
testfork.elf:     file format elf32-i386


Disassembly of section .text:

00000100 <main>:
#include "../syscall/fork.h"
#include "../syscall/stdio.h"
#include "../syscall/schedule.h"
int main(){
     100:	66 55                	push   %bp
     102:	66 89 e5             	mov    %sp,%bp
     105:	66 83 ec 10          	sub    $0x10,%sp
    __asm__("mov $0x7000, %eax\n");
     109:	66 b8 00 70          	mov    $0x7000,%ax
     10d:	00 00                	add    %al,(%eax)
    __asm__("mov %ax, %ds\n");
     10f:	8e d8                	mov    %eax,%ds
    __asm__("mov %ax, %es\n");
     111:	8e c0                	mov    %eax,%es
    __asm__("mov %ax, %ss\n");
     113:	8e d0                	mov    %eax,%ss
    __asm__("mov $0x100, %esp");
     115:	66 bc 00 01          	mov    $0x100,%sp
     119:	00 00                	add    %al,(%eax)
    int pid = fork();
     11b:	66 e8 37 19          	callw  1a56 <stack_copy+0x35>
     11f:	00 00                	add    %al,(%eax)
     121:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    printsint(pid);
     126:	67 66 ff 75 fc       	pushw  -0x4(%di)
     12b:	66 e8 f5 0d          	callw  f24 <printc+0x27>
     12f:	00 00                	add    %al,(%eax)
     131:	66 83 c4 04          	add    $0x4,%sp
    if(pid == -1){
     135:	67 66 83 7d fc ff    	cmpw   $0xffff,-0x4(%di)
     13b:	75 18                	jne    155 <main+0x55>
        char const *messeage = "Error in fork\n\r";
     13d:	67 66 c7 45 f8 84 1a 	movw   $0x1a84,-0x8(%di)
     144:	00 00                	add    %al,(%eax)
        prints(messeage);
     146:	67 66 ff 75 f8       	pushw  -0x8(%di)
     14b:	66 e8 5a 0d          	callw  ea9 <print+0x8f>
     14f:	00 00                	add    %al,(%eax)
     151:	66 83 c4 04          	add    $0x4,%sp
    }
    if(pid){
     155:	67 66 83 7d fc 00    	cmpw   $0x0,-0x4(%di)
     15b:	74 20                	je     17d <main+0x7d>
        char const*dad_talk = "I am daddy\n\r";
     15d:	67 66 c7 45 f4 94 1a 	movw   $0x1a94,-0xc(%di)
     164:	00 00                	add    %al,(%eax)
        prints(dad_talk);
     166:	67 66 ff 75 f4       	pushw  -0xc(%di)
     16b:	66 e8 3a 0d          	callw  ea9 <print+0x8f>
     16f:	00 00                	add    %al,(%eax)
     171:	66 83 c4 04          	add    $0x4,%sp
        wait();
     175:	66 e8 fa 18          	callw  1a73 <fork+0x1b>
     179:	00 00                	add    %al,(%eax)
     17b:	eb 18                	jmp    195 <main+0x95>
       // exit();
    }
    else{
        char const*son_talk = "I am son\n\r";
     17d:	67 66 c7 45 f0 a1 1a 	movw   $0x1aa1,-0x10(%di)
     184:	00 00                	add    %al,(%eax)
        prints(son_talk);
     186:	67 66 ff 75 f0       	pushw  -0x10(%di)
     18b:	66 e8 1a 0d          	callw  ea9 <print+0x8f>
     18f:	00 00                	add    %al,(%eax)
     191:	66 83 c4 04          	add    $0x4,%sp
        //exit();
    }
}
     195:	66 c9                	leavew 
     197:	66 c3                	retw   
     199:	66 90                	xchg   %ax,%ax
     19b:	66 90                	xchg   %ax,%ax
     19d:	66 90                	xchg   %ax,%ax
     19f:	90                   	nop

000001a0 <count>:
     1a0:	08 2d 00 00 00 00    	or     %ch,0x0

000001a1 <alpha>:
     1a1:	2d 00 00 00 00       	sub    $0x0,%eax

000001a2 <int_09_saved>:
     1a2:	00 00                	add    %al,(%eax)
	...

000001a6 <program_saved>:
     1a6:	70 00                	jo     1a8 <program_saved+0x2>
	...

000001aa <ds_saved>:
     1aa:	7c 00                	jl     1ac <ds_saved+0x2>
	...

000001ae <return_save>:
     1ae:	88 00                	mov    %al,(%eax)

000001b0 <esi_save>:
     1b0:	96                   	xchg   %eax,%esi
     1b1:	00 00                	add    %al,(%eax)
	...

000001b4 <temp>:
     1b4:	e8 03 b4 00 00       	call   b5bc <_end+0x81b8>

000001b6 <kernelesp_saved>:
     1b6:	b4 00                	mov    $0x0,%ah
	...

000001ba <esp_saved_inkernel>:
     1ba:	c8 00 00 00          	enter  $0x0,$0x0

000001be <esp_saved_in_user>:
     1be:	f0 00 00             	lock add %al,(%eax)
	...

000001c2 <ss_saved_in_user>:
     1c2:	2c 01                	sub    $0x1,%al
	...

000001c6 <color>:
     1c6:	01 c2                	add    %eax,%edx

000001c7 <ss_saved_fork>:
     1c7:	c2 01 00             	ret    $0x1
	...

000001cb <retaddr>:
     1cb:	58                   	pop    %eax
     1cc:	02 00                	add    (%eax),%al
	...

000001cf <Message31>:
     1cf:	74 69                	je     23a <_readinput+0x9>
     1d1:	6d                   	insl   (%dx),%es:(%edi)
     1d2:	65 3a 20             	cmp    %gs:(%eax),%ah

000001d5 <_sys_stack_copy>:
     1d5:	c8 00 00 00          	enter  $0x0,$0x0
     1d9:	8e d0                	mov    %eax,%ss
     1db:	60                   	pusha  
     1dc:	1e                   	push   %ds
     1dd:	8b 46 06             	mov    0x6(%esi),%eax
     1e0:	8b 56 0a             	mov    0xa(%esi),%edx
     1e3:	8b 4e 0e             	mov    0xe(%esi),%ecx
     1e6:	8c db                	mov    %ds,%ebx

000001e8 <while_loop1>:
     1e8:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
     1ee:	8e d8                	mov    %eax,%ds
     1f0:	67 8b 1a             	mov    (%bp,%si),%ebx
     1f3:	8e d9                	mov    %ecx,%ds
     1f5:	67 89 1a             	mov    %ebx,(%bp,%si)
     1f8:	83 c2 02             	add    $0x2,%edx
     1fb:	eb eb                	jmp    1e8 <while_loop1>

000001fd <end_for_copy>:
     1fd:	1f                   	pop    %ds
     1fe:	61                   	popa   
     1ff:	c9                   	leave  
     200:	66 5a                	pop    %dx
     202:	ff e2                	jmp    *%edx

00000204 <_clearscreen>:
     204:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     209:	66 5a                	pop    %dx
     20b:	ff e2                	jmp    *%edx

0000020d <_printchar>:
     20d:	c8 00 00 00          	enter  $0x0,$0x0
     211:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
     216:	57                   	push   %edi
     217:	66 8b 4e 06          	mov    0x6(%esi),%cx
     21b:	66 8b 7e 0a          	mov    0xa(%esi),%di
     21f:	66 8b 56 0e          	mov    0xe(%esi),%dx
     223:	88 d5                	mov    %dl,%ch
     225:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
     22c:	00 66 5a             	add    %ah,0x5a(%esi)
     22f:	ff e2                	jmp    *%edx

00000231 <_readinput>:
     231:	c8 04 00 00          	enter  $0x4,$0x0
     235:	b4 00                	mov    $0x0,%ah
     237:	cd 16                	int    $0x16
     239:	b4 00                	mov    $0x0,%ah
     23b:	66 67 89 04          	mov    %ax,(%si)
     23f:	24 66                	and    $0x66,%al
     241:	67 8b 04             	mov    (%si),%eax
     244:	24 c9                	and    $0xc9,%al
     246:	66 5a                	pop    %dx
     248:	ff e2                	jmp    *%edx

0000024a <_showchar>:
     24a:	c8 00 00 00          	enter  $0x0,$0x0
     24e:	50                   	push   %eax
     24f:	53                   	push   %ebx
     250:	8b 46 06             	mov    0x6(%esi),%eax
     253:	b4 0e                	mov    $0xe,%ah
     255:	b3 00                	mov    $0x0,%bl
     257:	cd 10                	int    $0x10
     259:	5b                   	pop    %ebx
     25a:	58                   	pop    %eax
     25b:	c9                   	leave  
     25c:	66 5a                	pop    %dx
     25e:	ff e2                	jmp    *%edx

00000260 <_setPoint>:
     260:	c8 00 00 00          	enter  $0x0,$0x0
     264:	53                   	push   %ebx
     265:	b7 00                	mov    $0x0,%bh
     267:	8a 77 06             	mov    0x6(%edi),%dh
     26a:	8a 57 0a             	mov    0xa(%edi),%dl
     26d:	b4 02                	mov    $0x2,%ah
     26f:	cd 10                	int    $0x10
     271:	5b                   	pop    %ebx
     272:	c9                   	leave  
     273:	66 5a                	pop    %dx
     275:	ff e2                	jmp    *%edx

00000277 <_loadP>:
     277:	c8 00 00 00          	enter  $0x0,$0x0
     27b:	60                   	pusha  
     27c:	06                   	push   %es
     27d:	1e                   	push   %ds
     27e:	8c c8                	mov    %cs,%eax
     280:	8e d8                	mov    %eax,%ds
     282:	8b 46 0e             	mov    0xe(%esi),%eax
     285:	8e c0                	mov    %eax,%es
     287:	b2 00                	mov    $0x0,%dl
     289:	8b 46 0a             	mov    0xa(%esi),%eax
     28c:	b3 12                	mov    $0x12,%bl
     28e:	f6 f3                	div    %bl
     290:	88 e1                	mov    %ah,%cl
     292:	30 e4                	xor    %ah,%ah
     294:	b3 02                	mov    $0x2,%bl
     296:	f6 f3                	div    %bl
     298:	88 e6                	mov    %ah,%dh
     29a:	88 c5                	mov    %al,%ch
     29c:	8a 46 06             	mov    0x6(%esi),%al
     29f:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
     2a4:	cd 13                	int    $0x13
     2a6:	1f                   	pop    %ds
     2a7:	07                   	pop    %es
     2a8:	61                   	popa   
     2a9:	c9                   	leave  
     2aa:	66 5a                	pop    %dx
     2ac:	ff e2                	jmp    *%edx

000002ae <_RunProgress>:
     2ae:	c8 00 00 00          	enter  $0x0,$0x0
     2b2:	8c c8                	mov    %cs,%eax
     2b4:	8e d8                	mov    %eax,%ds
     2b6:	8e c0                	mov    %eax,%es
     2b8:	8b 5e 06             	mov    0x6(%esi),%ebx
     2bb:	c7 06 a6 01 00 01    	movl   $0x10001a6,(%esi)
     2c1:	89 1e                	mov    %ebx,(%esi)
     2c3:	a8 01                	test   $0x1,%al
     2c5:	66 89 26             	mov    %sp,(%esi)
     2c8:	ba 01 26 ff 1e       	mov    $0x1eff2601,%edx
     2cd:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
     2ce:	01 8c c8 8e d8 8e c0 	add    %ecx,-0x3f712772(%eax,%ecx,8)

000002cf <S>:
     2cf:	8c c8                	mov    %cs,%eax
     2d1:	8e d8                	mov    %eax,%ds
     2d3:	8e c0                	mov    %eax,%es
     2d5:	8e d0                	mov    %eax,%ss
     2d7:	66 8b 26             	mov    (%esi),%sp
     2da:	ba 01 b4 00 cd       	mov    $0xcd00b401,%edx
     2df:	16                   	push   %ss
     2e0:	c9                   	leave  
     2e1:	66 5a                	pop    %dx
     2e3:	ff e2                	jmp    *%edx

000002e5 <_Schedule_once>:
     2e5:	c8 00 00 00          	enter  $0x0,$0x0
     2e9:	6a 00                	push   $0x0
     2eb:	cd 41                	int    $0x41
     2ed:	c9                   	leave  
     2ee:	66 5a                	pop    %dx
     2f0:	ff e2                	jmp    *%edx

000002f2 <_fork_user>:
     2f2:	c8 00 00 00          	enter  $0x0,$0x0
     2f6:	6a 00                	push   $0x0
     2f8:	cd 39                	int    $0x39
     2fa:	c9                   	leave  
     2fb:	66 5a                	pop    %dx
     2fd:	ff e2                	jmp    *%edx

000002ff <_Schedule>:
     2ff:	c8 00 00 00          	enter  $0x0,$0x0
     303:	16                   	push   %ss
     304:	6a 00                	push   $0x0
     306:	cd 42                	int    $0x42
     308:	17                   	pop    %ss
     309:	c9                   	leave  
     30a:	66 5a                	pop    %dx
     30c:	ff e2                	jmp    *%edx

0000030e <_wait>:
     30e:	c8 00 00 00          	enter  $0x0,$0x0
     312:	6a 00                	push   $0x0
     314:	cd 43                	int    $0x43
     316:	c9                   	leave  
     317:	66 5a                	pop    %dx
     319:	ff e2                	jmp    *%edx

0000031b <_SetINT20h>:
     31b:	fa                   	cli    
     31c:	1e                   	push   %ds
     31d:	06                   	push   %es
     31e:	8c c8                	mov    %cs,%eax
     320:	8e d8                	mov    %eax,%ds
     322:	8e c0                	mov    %eax,%es
     324:	8c 16                	mov    %ss,(%esi)
     326:	c2 01 8e             	ret    $0x8e01
     329:	d0 66 89             	shlb   -0x77(%esi)
     32c:	26                   	es
     32d:	be 01 66 8b 26       	mov    $0x268b6601,%esi
     332:	ba 01 53 51 52       	mov    $0x52515301,%edx
     337:	b4 01                	mov    $0x1,%ah
     339:	cd 16                	int    $0x16
     33b:	5a                   	pop    %edx
     33c:	59                   	pop    %ecx
     33d:	5b                   	pop    %ebx
     33e:	8e 16                	mov    (%esi),%ss
     340:	c2 01 66             	ret    $0x6601
     343:	8b 26                	mov    (%esi),%esp
     345:	be 01 07 1f 74       	mov    $0x741f0701,%esi
     34a:	0a 50 b4             	or     -0x4c(%eax),%dl
     34d:	00 cd                	add    %cl,%ch
     34f:	16                   	push   %ss
     350:	58                   	pop    %eax
     351:	fb                   	sti    
     352:	cd 38                	int    $0x38
     354:	cf                   	iret   

00000355 <going_on>:
     355:	fb                   	sti    
     356:	cf                   	iret   

00000357 <_SetINT08h_turn_around>:
     357:	fa                   	cli    
     358:	e8 ef 04 6a 00       	call   6a084c <_end+0x69d448>
     35d:	e8 61 11 e8 5b       	call   5be814c3 <_end+0x5be7e0bf>
     362:	05 b0 20 e6 20       	add    $0x20e620b0,%eax
     367:	e6 a0                	out    %al,$0xa0
     369:	fb                   	sti    
     36a:	cf                   	iret   

0000036b <_SetINT08h>:
     36b:	60                   	pusha  
     36c:	0f a8                	push   %gs
     36e:	1e                   	push   %ds
     36f:	06                   	push   %es
     370:	16                   	push   %ss
     371:	8c c8                	mov    %cs,%eax
     373:	8e c0                	mov    %eax,%es
     375:	8e d8                	mov    %eax,%ds
     377:	8e d0                	mov    %eax,%ss
     379:	fe 0e                	decb   (%esi)
     37b:	a0 01 75 4f 80       	mov    0x804f7501,%al

0000037f <notc>:
     37f:	80 3e a1             	cmpb   $0xa1,(%esi)
     382:	01 2d 75 07 c6 06    	add    %ebp,0x6c60775
     388:	a1 01 5c eb 2a       	mov    0x2aeb5c01,%eax

0000038d <changleft>:
     38d:	80 3e a1             	cmpb   $0xa1,(%esi)
     390:	01 5c 75 07          	add    %ebx,0x7(%ebp,%esi,2)
     394:	c6 06 a1             	movb   $0xa1,(%esi)
     397:	01 7c eb 1c          	add    %edi,0x1c(%ebx,%ebp,8)

0000039b <changright>:
     39b:	80 3e a1             	cmpb   $0xa1,(%esi)
     39e:	01 7c 75 07          	add    %edi,0x7(%ebp,%esi,2)
     3a2:	c6 06 a1             	movb   $0xa1,(%esi)
     3a5:	01 2f                	add    %ebp,(%edi)
     3a7:	eb 0e                	jmp    3b7 <show>

000003a9 <changheng>:
     3a9:	80 3e a1             	cmpb   $0xa1,(%esi)
     3ac:	01 2f                	add    %ebp,(%edi)
     3ae:	75 cf                	jne    37f <notc>
     3b0:	c6 06 a1             	movb   $0xa1,(%esi)
     3b3:	01 2d eb 00 b9 00    	add    %ebp,0xb900eb

000003b7 <show>:
     3b7:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     3bc:	b4 09                	mov    $0x9,%ah
     3be:	8a 26                	mov    (%esi),%ah
     3c0:	c6 01 a0             	movb   $0xa0,(%ecx)
     3c3:	a1 01 65 a3 8e       	mov    0x8ea36501,%eax
     3c8:	00 c6                	add    %al,%dh
     3ca:	06                   	push   %es
     3cb:	a0 01 08 b0 20       	mov    0x20b00801,%al

000003ce <end>:
     3ce:	b0 20                	mov    $0x20,%al
     3d0:	e6 20                	out    %al,$0x20
     3d2:	e6 a0                	out    %al,$0xa0
     3d4:	17                   	pop    %ss
     3d5:	07                   	pop    %es
     3d6:	1f                   	pop    %ds
     3d7:	0f a9                	pop    %gs
     3d9:	61                   	popa   
     3da:	fb                   	sti    
     3db:	cf                   	iret   

000003dc <_SetINT09h>:
     3dc:	fa                   	cli    
     3dd:	1e                   	push   %ds
     3de:	06                   	push   %es
     3df:	8c c8                	mov    %cs,%eax
     3e1:	8e d8                	mov    %eax,%ds
     3e3:	8e c0                	mov    %eax,%es
     3e5:	8e d0                	mov    %eax,%ss
     3e7:	8c 16                	mov    %ss,(%esi)
     3e9:	c2 01 8e             	ret    $0x8e01
     3ec:	d0 66 89             	shlb   -0x77(%esi)
     3ef:	26                   	es
     3f0:	be 01 66 8b 26       	mov    $0x268b6601,%esi
     3f5:	ba 01 60 b9 00       	mov    $0xb96001,%edx
     3fa:	b8 8e e9 8a 26       	mov    $0x268ae98e,%eax
     3ff:	c6 01 b0             	movb   $0xb0,(%ecx)
     402:	4f                   	dec    %edi
     403:	65 a3 78 00 b0 55    	mov    %eax,%gs:0x55b00078
     409:	65 a3 7a 00 b0 43    	mov    %eax,%gs:0x43b0007a
     40f:	65 a3 7c 00 b0 48    	mov    %eax,%gs:0x48b0007c
     415:	65 a3 7e 00 b0 53    	mov    %eax,%gs:0x53b0007e
     41b:	65 a3 80 00 b0 21    	mov    %eax,%gs:0x21b00080
     421:	65 a3 82 00 b0 4f    	mov    %eax,%gs:0x4fb00082
     427:	65 a3 84 00 b0 55    	mov    %eax,%gs:0x55b00084
     42d:	65 a3 86 00 b0 43    	mov    %eax,%gs:0x43b00086
     433:	65 a3 88 00 b0 48    	mov    %eax,%gs:0x48b00088
     439:	65 a3 8a 00 b0 21    	mov    %eax,%gs:0x21b0008a
     43f:	65 a3 8c 00 61 80    	mov    %eax,%gs:0x8061008c
     445:	fc                   	cld    
     446:	06                   	push   %es
     447:	75 06                	jne    44f <cont>
     449:	b4 01                	mov    $0x1,%ah
     44b:	88 26                	mov    %ah,(%esi)
     44d:	c6 01 fe             	movb   $0xfe,(%ecx)

0000044f <cont>:
     44f:	fe 06                	incb   (%esi)
     451:	c6 01 8c             	movb   $0x8c,(%ecx)
     454:	c8 8e c0 fb          	enter  $0xc08e,$0xfb
     458:	9c                   	pushf  
     459:	26 ff 1e             	lcall  *%es:(%esi)
     45c:	a2 01 8e 16 c2       	mov    %al,0xc2168e01
     461:	01 66 8b             	add    %esp,-0x75(%esi)
     464:	26                   	es
     465:	be 01 07 1f cf       	mov    $0xcf1f0701,%esi

0000046a <_SetINT33h>:
     46a:	fa                   	cli    
     46b:	c8 00 00 00          	enter  $0x0,$0x0
     46f:	60                   	pusha  
     470:	1e                   	push   %ds
     471:	0f a8                	push   %gs
     473:	06                   	push   %es
     474:	8c c8                	mov    %cs,%eax
     476:	8e c0                	mov    %eax,%es
     478:	8e d8                	mov    %eax,%ds
     47a:	8c 16                	mov    %ss,(%esi)
     47c:	c2 01 8e             	ret    $0x8e01
     47f:	d0 66 89             	shlb   -0x77(%esi)
     482:	26                   	es
     483:	be 01 66 8b 26       	mov    $0x268b6601,%esi
     488:	ba 01 6a 00 e8       	mov    $0xe8006a01,%edx
     48d:	bd 06 8e 16 c2       	mov    $0xc2168e06,%ebp
     492:	01 66 8b             	add    %esp,-0x75(%esi)
     495:	26                   	es
     496:	be 01 07 0f a9       	mov    $0xa90f0701,%esi
     49b:	1f                   	pop    %ds
     49c:	61                   	popa   
     49d:	fb                   	sti    
     49e:	c9                   	leave  
     49f:	cf                   	iret   

000004a0 <_SetINT34h>:
     4a0:	fa                   	cli    
     4a1:	c8 00 00 00          	enter  $0x0,$0x0
     4a5:	60                   	pusha  
     4a6:	1e                   	push   %ds
     4a7:	0f a8                	push   %gs
     4a9:	06                   	push   %es
     4aa:	8c c8                	mov    %cs,%eax
     4ac:	8e c0                	mov    %eax,%es
     4ae:	8e d8                	mov    %eax,%ds
     4b0:	8c 16                	mov    %ss,(%esi)
     4b2:	c2 01 8e             	ret    $0x8e01
     4b5:	d0 66 89             	shlb   -0x77(%esi)
     4b8:	26                   	es
     4b9:	be 01 66 8b 26       	mov    $0x268b6601,%esi
     4be:	ba 01 6a 00 e8       	mov    $0xe8006a01,%edx
     4c3:	37                   	aaa    
     4c4:	07                   	pop    %es
     4c5:	8e 16                	mov    (%esi),%ss
     4c7:	c2 01 66             	ret    $0x6601
     4ca:	8b 26                	mov    (%esi),%esp
     4cc:	be 01 07 0f a9       	mov    $0xa90f0701,%esi
     4d1:	1f                   	pop    %ds
     4d2:	61                   	popa   
     4d3:	fb                   	sti    
     4d4:	c9                   	leave  
     4d5:	cf                   	iret   

000004d6 <_SetINT35h>:
     4d6:	60                   	pusha  
     4d7:	1e                   	push   %ds
     4d8:	0f a8                	push   %gs
     4da:	06                   	push   %es
     4db:	8c c8                	mov    %cs,%eax
     4dd:	8e c0                	mov    %eax,%es
     4df:	8e d8                	mov    %eax,%ds
     4e1:	8c 16                	mov    %ss,(%esi)
     4e3:	c2 01 8e             	ret    $0x8e01
     4e6:	d0 66 89             	shlb   -0x77(%esi)
     4e9:	26                   	es
     4ea:	be 01 66 8b 26       	mov    $0x268b6601,%esi
     4ef:	ba 01 6a 00 e8       	mov    $0xe8006a01,%edx
     4f4:	e5 07                	in     $0x7,%eax
     4f6:	8e 16                	mov    (%esi),%ss
     4f8:	c2 01 66             	ret    $0x6601
     4fb:	8b 26                	mov    (%esi),%esp
     4fd:	be 01 07 0f a9       	mov    $0xa90f0701,%esi
     502:	1f                   	pop    %ds
     503:	61                   	popa   
     504:	fb                   	sti    
     505:	cf                   	iret   

00000506 <_SetINT36h>:
     506:	60                   	pusha  
     507:	1e                   	push   %ds
     508:	0f a8                	push   %gs
     50a:	06                   	push   %es
     50b:	8c c8                	mov    %cs,%eax
     50d:	8e c0                	mov    %eax,%es
     50f:	8e d8                	mov    %eax,%ds
     511:	8c 16                	mov    %ss,(%esi)
     513:	c2 01 8e             	ret    $0x8e01
     516:	d0 66 89             	shlb   -0x77(%esi)
     519:	26                   	es
     51a:	be 01 66 8b 26       	mov    $0x268b6601,%esi
     51f:	ba 01 6a 00 e8       	mov    $0xe8006a01,%edx
     524:	3b 08                	cmp    (%eax),%ecx
     526:	8e 16                	mov    (%esi),%ss
     528:	c2 01 66             	ret    $0x6601
     52b:	8b 26                	mov    (%esi),%esp
     52d:	be 01 07 0f a9       	mov    $0xa90f0701,%esi
     532:	1f                   	pop    %ds
     533:	61                   	popa   
     534:	fb                   	sti    
     535:	cf                   	iret   

00000536 <_SetINT21h>:
     536:	c8 00 00 00          	enter  $0x0,$0x0
     53a:	60                   	pusha  
     53b:	1e                   	push   %ds
     53c:	0f a8                	push   %gs
     53e:	06                   	push   %es
     53f:	8c c8                	mov    %cs,%eax
     541:	8e c0                	mov    %eax,%es
     543:	8e d8                	mov    %eax,%ds
     545:	8b 46 08             	mov    0x8(%esi),%eax
     548:	80 fc 00             	cmp    $0x0,%ah
     54b:	74 16                	je     563 <fn0>
     54d:	80 fc 01             	cmp    $0x1,%ah
     550:	74 21                	je     573 <fn1>
     552:	80 fc 02             	cmp    $0x2,%ah
     555:	74 3d                	je     594 <fn2>
     557:	80 fc 03             	cmp    $0x3,%ah
     55a:	74 5f                	je     5bb <fn3>
     55c:	07                   	pop    %es
     55d:	0f a9                	pop    %gs
     55f:	1f                   	pop    %ds
     560:	61                   	popa   
     561:	c9                   	leave  
     562:	cf                   	iret   

00000563 <fn0>:
     563:	8b 46 0a             	mov    0xa(%esi),%eax
     566:	b4 0e                	mov    $0xe,%ah
     568:	b3 00                	mov    $0x0,%bl
     56a:	cd 10                	int    $0x10
     56c:	07                   	pop    %es
     56d:	0f a9                	pop    %gs
     56f:	1f                   	pop    %ds
     570:	61                   	popa   
     571:	c9                   	leave  
     572:	cf                   	iret   

00000573 <fn1>:
     573:	66 83 ec 04          	sub    $0x4,%sp
     577:	b4 00                	mov    $0x0,%ah
     579:	cd 16                	int    $0x16
     57b:	b4 00                	mov    $0x0,%ah
     57d:	66 67 89 04          	mov    %ax,(%si)
     581:	24 66                	and    $0x66,%al
     583:	67 8b 04             	mov    (%si),%eax
     586:	24 66                	and    $0x66,%al
     588:	83 c4 04             	add    $0x4,%esp
     58b:	8e e0                	mov    %eax,%fs
     58d:	07                   	pop    %es
     58e:	0f a9                	pop    %gs
     590:	1f                   	pop    %ds
     591:	61                   	popa   
     592:	c9                   	leave  
     593:	cf                   	iret   

00000594 <fn2>:
     594:	66 83 ec 04          	sub    $0x4,%sp
     598:	b4 00                	mov    $0x0,%ah
     59a:	cd 16                	int    $0x16
     59c:	b4 00                	mov    $0x0,%ah
     59e:	66 67 89 04          	mov    %ax,(%si)
     5a2:	24 66                	and    $0x66,%al
     5a4:	67 8b 04             	mov    (%si),%eax
     5a7:	24 b4                	and    $0xb4,%al
     5a9:	0e                   	push   %cs
     5aa:	b3 00                	mov    $0x0,%bl
     5ac:	cd 10                	int    $0x10
     5ae:	66 83 c4 04          	add    $0x4,%sp
     5b2:	8e e0                	mov    %eax,%fs
     5b4:	07                   	pop    %es
     5b5:	0f a9                	pop    %gs
     5b7:	1f                   	pop    %ds
     5b8:	61                   	popa   
     5b9:	c9                   	leave  
     5ba:	cf                   	iret   

000005bb <fn3>:
     5bb:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     5c0:	07                   	pop    %es
     5c1:	0f a9                	pop    %gs
     5c3:	1f                   	pop    %ds
     5c4:	61                   	popa   
     5c5:	c9                   	leave  
     5c6:	cf                   	iret   

000005c7 <_SetINT37h>:
     5c7:	fa                   	cli    
     5c8:	e8 47 03 cf fa       	call   facf0914 <_end+0xfaced510>

000005cc <_SetINT38h>:
     5cc:	fa                   	cli    
     5cd:	50                   	push   %eax
     5ce:	1e                   	push   %ds
     5cf:	8c c8                	mov    %cs,%eax
     5d1:	8e d8                	mov    %eax,%ds
     5d3:	6a 00                	push   $0x0
     5d5:	e8 37 10 1f 58       	call   581f1611 <_end+0x581ee20d>
     5da:	cf                   	iret   

000005db <_SetINT39h>:
     5db:	fa                   	cli    
     5dc:	c8 00 00 00          	enter  $0x0,$0x0
     5e0:	1e                   	push   %ds
     5e1:	6a 00                	push   $0x0
     5e3:	8c c8                	mov    %cs,%eax
     5e5:	8e d8                	mov    %eax,%ds
     5e7:	e8 83 10 1f c9       	call   c91f166f <_end+0xc91ee26b>
     5ec:	cf                   	iret   

000005ed <_SetINT41h>:
     5ed:	fa                   	cli    
     5ee:	e8 59 02 e8 ca       	call   cae8084c <_end+0xcae7d448>
     5f3:	02 b0 20 e6 20 e6    	add    -0x19df19e0(%eax),%dh
     5f9:	a0 fb cf fa c8       	mov    0xc8facffb,%al

000005fc <_SetINT43h>:
     5fc:	fa                   	cli    
     5fd:	c8 00 00 00          	enter  $0x0,$0x0
     601:	1e                   	push   %ds
     602:	50                   	push   %eax
     603:	6a 00                	push   $0x0
     605:	8c c8                	mov    %cs,%eax
     607:	8e d8                	mov    %eax,%ds
     609:	e8 45 10 58 1f       	call   1f581653 <_end+0x1f57e24f>
     60e:	c9                   	leave  
     60f:	cf                   	iret   

00000610 <_initialInt>:
     610:	c8 00 00 00          	enter  $0x0,$0x0
     614:	60                   	pusha  
     615:	06                   	push   %es
     616:	1e                   	push   %ds
     617:	8c c8                	mov    %cs,%eax
     619:	8e d8                	mov    %eax,%ds
     61b:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     620:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
     625:	00 f7                	add    %dh,%bh
     627:	e3 89                	jecxz  5b2 <fn2+0x1e>
     629:	c7                   	(bad)  
     62a:	b8 1b 03 26 89       	mov    $0x8926031b,%eax
     62f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     634:	45                   	inc    %ebp
     635:	02 1f                	add    (%edi),%bl
     637:	07                   	pop    %es
     638:	61                   	popa   
     639:	60                   	pusha  
     63a:	06                   	push   %es
     63b:	1e                   	push   %ds
     63c:	8c c8                	mov    %cs,%eax
     63e:	8e d8                	mov    %eax,%ds
     640:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     645:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
     64a:	00 f7                	add    %dh,%bh
     64c:	e3 89                	jecxz  5d7 <_SetINT38h+0xb>
     64e:	c7                   	(bad)  
     64f:	b8 6a 04 26 89       	mov    $0x8926046a,%eax
     654:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     659:	45                   	inc    %ebp
     65a:	02 1f                	add    (%edi),%bl
     65c:	07                   	pop    %es
     65d:	61                   	popa   
     65e:	60                   	pusha  
     65f:	06                   	push   %es
     660:	1e                   	push   %ds
     661:	8c c8                	mov    %cs,%eax
     663:	8e d8                	mov    %eax,%ds
     665:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     66a:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
     66f:	00 f7                	add    %dh,%bh
     671:	e3 89                	jecxz  5fc <_SetINT43h>
     673:	c7                   	(bad)  
     674:	b8 a0 04 26 89       	mov    $0x892604a0,%eax
     679:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     67e:	45                   	inc    %ebp
     67f:	02 1f                	add    (%edi),%bl
     681:	07                   	pop    %es
     682:	61                   	popa   
     683:	60                   	pusha  
     684:	06                   	push   %es
     685:	1e                   	push   %ds
     686:	8c c8                	mov    %cs,%eax
     688:	8e d8                	mov    %eax,%ds
     68a:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     68f:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
     694:	00 f7                	add    %dh,%bh
     696:	e3 89                	jecxz  621 <_initialInt+0x11>
     698:	c7                   	(bad)  
     699:	b8 d6 04 26 89       	mov    $0x892604d6,%eax
     69e:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     6a3:	45                   	inc    %ebp
     6a4:	02 1f                	add    (%edi),%bl
     6a6:	07                   	pop    %es
     6a7:	61                   	popa   
     6a8:	60                   	pusha  
     6a9:	06                   	push   %es
     6aa:	1e                   	push   %ds
     6ab:	8c c8                	mov    %cs,%eax
     6ad:	8e d8                	mov    %eax,%ds
     6af:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     6b4:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
     6b9:	00 f7                	add    %dh,%bh
     6bb:	e3 89                	jecxz  646 <_initialInt+0x36>
     6bd:	c7                   	(bad)  
     6be:	b8 06 05 26 89       	mov    $0x89260506,%eax
     6c3:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     6c8:	45                   	inc    %ebp
     6c9:	02 1f                	add    (%edi),%bl
     6cb:	07                   	pop    %es
     6cc:	61                   	popa   
     6cd:	60                   	pusha  
     6ce:	06                   	push   %es
     6cf:	1e                   	push   %ds
     6d0:	8c c8                	mov    %cs,%eax
     6d2:	8e d8                	mov    %eax,%ds
     6d4:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     6d9:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
     6de:	00 f7                	add    %dh,%bh
     6e0:	e3 89                	jecxz  66b <_initialInt+0x5b>
     6e2:	c7                   	(bad)  
     6e3:	b8 36 05 26 89       	mov    $0x89260536,%eax
     6e8:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     6ed:	45                   	inc    %ebp
     6ee:	02 1f                	add    (%edi),%bl
     6f0:	07                   	pop    %es
     6f1:	61                   	popa   
     6f2:	60                   	pusha  
     6f3:	06                   	push   %es
     6f4:	1e                   	push   %ds
     6f5:	8c c8                	mov    %cs,%eax
     6f7:	8e d8                	mov    %eax,%ds
     6f9:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     6fe:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
     703:	00 f7                	add    %dh,%bh
     705:	e3 89                	jecxz  690 <_initialInt+0x80>
     707:	c7                   	(bad)  
     708:	b8 c7 05 26 89       	mov    $0x892605c7,%eax
     70d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     712:	45                   	inc    %ebp
     713:	02 1f                	add    (%edi),%bl
     715:	07                   	pop    %es
     716:	61                   	popa   
     717:	60                   	pusha  
     718:	06                   	push   %es
     719:	1e                   	push   %ds
     71a:	8c c8                	mov    %cs,%eax
     71c:	8e d8                	mov    %eax,%ds
     71e:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     723:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
     728:	00 f7                	add    %dh,%bh
     72a:	e3 89                	jecxz  6b5 <_initialInt+0xa5>
     72c:	c7                   	(bad)  
     72d:	b8 cc 05 26 89       	mov    $0x892605cc,%eax
     732:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     737:	45                   	inc    %ebp
     738:	02 1f                	add    (%edi),%bl
     73a:	07                   	pop    %es
     73b:	61                   	popa   
     73c:	60                   	pusha  
     73d:	06                   	push   %es
     73e:	1e                   	push   %ds
     73f:	8c c8                	mov    %cs,%eax
     741:	8e d8                	mov    %eax,%ds
     743:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     748:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
     74d:	00 f7                	add    %dh,%bh
     74f:	e3 89                	jecxz  6da <_initialInt+0xca>
     751:	c7                   	(bad)  
     752:	b8 db 05 26 89       	mov    $0x892605db,%eax
     757:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     75c:	45                   	inc    %ebp
     75d:	02 1f                	add    (%edi),%bl
     75f:	07                   	pop    %es
     760:	61                   	popa   
     761:	60                   	pusha  
     762:	06                   	push   %es
     763:	1e                   	push   %ds
     764:	8c c8                	mov    %cs,%eax
     766:	8e d8                	mov    %eax,%ds
     768:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     76d:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
     772:	00 f7                	add    %dh,%bh
     774:	e3 89                	jecxz  6ff <_initialInt+0xef>
     776:	c7                   	(bad)  
     777:	b8 ed 05 26 89       	mov    $0x892605ed,%eax
     77c:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     781:	45                   	inc    %ebp
     782:	02 1f                	add    (%edi),%bl
     784:	07                   	pop    %es
     785:	61                   	popa   
     786:	60                   	pusha  
     787:	06                   	push   %es
     788:	1e                   	push   %ds
     789:	8c c8                	mov    %cs,%eax
     78b:	8e d8                	mov    %eax,%ds
     78d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     792:	b8 42 00 bb 04       	mov    $0x4bb0042,%eax
     797:	00 f7                	add    %dh,%bh
     799:	e3 89                	jecxz  724 <_initialInt+0x114>
     79b:	c7                   	(bad)  
     79c:	b8 57 03 26 89       	mov    $0x89260357,%eax
     7a1:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     7a6:	45                   	inc    %ebp
     7a7:	02 1f                	add    (%edi),%bl
     7a9:	07                   	pop    %es
     7aa:	61                   	popa   
     7ab:	60                   	pusha  
     7ac:	06                   	push   %es
     7ad:	1e                   	push   %ds
     7ae:	8c c8                	mov    %cs,%eax
     7b0:	8e d8                	mov    %eax,%ds
     7b2:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     7b7:	b8 43 00 bb 04       	mov    $0x4bb0043,%eax
     7bc:	00 f7                	add    %dh,%bh
     7be:	e3 89                	jecxz  749 <_initialInt+0x139>
     7c0:	c7                   	(bad)  
     7c1:	b8 fc 05 26 89       	mov    $0x892605fc,%eax
     7c6:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     7cb:	45                   	inc    %ebp
     7cc:	02 1f                	add    (%edi),%bl
     7ce:	07                   	pop    %es
     7cf:	61                   	popa   
     7d0:	c9                   	leave  
     7d1:	66 5a                	pop    %dx
     7d3:	ff e2                	jmp    *%edx

000007d5 <_initialInt_09h>:
     7d5:	c8 00 00 00          	enter  $0x0,$0x0
     7d9:	a1 24 00 a3 a2       	mov    0xa2a30024,%eax
     7de:	01 a1 26 00 a3 a4    	add    %esp,-0x5b5cffda(%ecx)
     7e4:	01 60 06             	add    %esp,0x6(%eax)
     7e7:	1e                   	push   %ds
     7e8:	8c c8                	mov    %cs,%eax
     7ea:	8e d8                	mov    %eax,%ds
     7ec:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     7f1:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
     7f6:	00 f7                	add    %dh,%bh
     7f8:	e3 89                	jecxz  783 <_initialInt+0x173>
     7fa:	c7                   	(bad)  
     7fb:	b8 dc 03 26 89       	mov    $0x892603dc,%eax
     800:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     805:	45                   	inc    %ebp
     806:	02 1f                	add    (%edi),%bl
     808:	07                   	pop    %es
     809:	61                   	popa   
     80a:	c9                   	leave  
     80b:	66 5a                	pop    %dx
     80d:	ff e2                	jmp    *%edx

0000080f <_initialInt_08h>:
     80f:	c8 00 00 00          	enter  $0x0,$0x0
     813:	b0 40                	mov    $0x40,%al
     815:	e6 43                	out    %al,$0x43
     817:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
     81c:	88 e0                	mov    %ah,%al
     81e:	e6 40                	out    %al,$0x40
     820:	60                   	pusha  
     821:	06                   	push   %es
     822:	1e                   	push   %ds
     823:	8c c8                	mov    %cs,%eax
     825:	8e d8                	mov    %eax,%ds
     827:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     82c:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
     831:	00 f7                	add    %dh,%bh
     833:	e3 89                	jecxz  7be <_initialInt+0x1ae>
     835:	c7                   	(bad)  
     836:	b8 57 03 26 89       	mov    $0x89260357,%eax
     83b:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     840:	45                   	inc    %ebp
     841:	02 1f                	add    (%edi),%bl
     843:	07                   	pop    %es
     844:	61                   	popa   
     845:	c9                   	leave  
     846:	66 5a                	pop    %dx
     848:	ff e2                	jmp    *%edx

0000084a <_save>:
     84a:	66 89 26             	mov    %sp,(%esi)
     84d:	ba 01 1e 0e 1f       	mov    $0x1f0e1e01,%edx
     852:	8f 06                	popl   (%esi)
     854:	aa                   	stos   %al,%es:(%edi)
     855:	01 8f 06 ae 01 66    	add    %ecx,0x6601ae06(%edi)
     85b:	89 26                	mov    %esp,(%esi)
     85d:	b6 01                	mov    $0x1,%dh
     85f:	66 89 36             	mov    %si,(%esi)
     862:	b0 01                	mov    $0x1,%al
     864:	66 8b 36             	mov    (%esi),%si
     867:	00 34 66             	add    %dh,(%esi,%eiz,2)
     86a:	83 c6 2c             	add    $0x2c,%esi
     86d:	67 8f 06 67 8f       	popl   -0x7099
     872:	46                   	inc    %esi
     873:	04 67                	add    $0x67,%al
     875:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
     87c:	46                   	inc    %esi
     87d:	08 67 c7             	or     %ah,-0x39(%edi)
     880:	46                   	inc    %esi
     881:	0a 00                	or     (%eax),%al
     883:	00 66 67             	add    %ah,0x67(%esi)
     886:	89 66 fc             	mov    %esp,-0x4(%esi)
     889:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
     88d:	8c de                	mov    %ds,%esi
     88f:	8e d6                	mov    %esi,%ss
     891:	66 8b 26             	mov    (%esi),%sp
     894:	00 34 66             	add    %dh,(%esi,%eiz,2)
     897:	83 c4 24             	add    $0x24,%esp
     89a:	6a 00                	push   $0x0
     89c:	ff 36                	pushl  (%esi)
     89e:	aa                   	stos   %al,%es:(%edi)
     89f:	01 6a 00             	add    %ebp,0x0(%edx)
     8a2:	06                   	push   %es
     8a3:	66 55                	push   %bp
     8a5:	66 57                	push   %di
     8a7:	66 ff 36             	pushw  (%esi)
     8aa:	b0 01                	mov    $0x1,%al
     8ac:	66 52                	push   %dx
     8ae:	66 51                	push   %cx
     8b0:	66 53                	push   %bx
     8b2:	66 50                	push   %ax
     8b4:	66 8b 26             	mov    (%esi),%sp
     8b7:	b6 01                	mov    $0x1,%dh
     8b9:	a1 ae 01 ff e0       	mov    0xe0ff01ae,%eax

000008be <_restart>:
     8be:	66 89 26             	mov    %sp,(%esi)
     8c1:	b6 01                	mov    $0x1,%dh
     8c3:	66 8b 26             	mov    (%esi),%sp
     8c6:	00 34 66             	add    %dh,(%esi,%eiz,2)
     8c9:	58                   	pop    %eax
     8ca:	66 5b                	pop    %bx
     8cc:	66 59                	pop    %cx
     8ce:	66 5a                	pop    %dx
     8d0:	66 5e                	pop    %si
     8d2:	66 5f                	pop    %di
     8d4:	66 5d                	pop    %bp
     8d6:	07                   	pop    %es
     8d7:	8f 06                	popl   (%esi)
     8d9:	b4 01                	mov    $0x1,%ah
     8db:	8f 06                	popl   (%esi)
     8dd:	aa                   	stos   %al,%es:(%edi)
     8de:	01 8f 06 b4 01 66    	add    %ecx,0x6601b406(%edi)
     8e4:	89 36                	mov    %esi,(%esi)
     8e6:	b0 01                	mov    $0x1,%al
     8e8:	17                   	pop    %ss
     8e9:	8f 06                	popl   (%esi)
     8eb:	b4 01                	mov    $0x1,%ah
     8ed:	66 89 e6             	mov    %sp,%si
     8f0:	66 67 8b 26 67 ff    	mov    -0x99,%sp
     8f6:	76 0c                	jbe    904 <_restart+0x46>
     8f8:	67 ff 76 08          	pushl  0x8(%bp)
     8fc:	67 ff 76 04          	pushl  0x4(%bp)
     900:	66 8b 36             	mov    (%esi),%si
     903:	b0 01                	mov    $0x1,%al
     905:	8e 1e                	mov    (%esi),%ds
     907:	aa                   	stos   %al,%es:(%edi)
     908:	01 50 b0             	add    %edx,-0x50(%eax)
     90b:	20 e6                	and    %ah,%dh
     90d:	20 e6                	and    %ah,%dh
     90f:	a0 58 cf c8 00       	mov    0xc8cf58,%al

00000912 <RTC_Timer>:
     912:	c8 00 00 00          	enter  $0x0,$0x0
     916:	1e                   	push   %ds
     917:	06                   	push   %es
     918:	60                   	pusha  
     919:	8c c8                	mov    %cs,%eax
     91b:	8e d8                	mov    %eax,%ds
     91d:	8c c8                	mov    %cs,%eax
     91f:	8e c0                	mov    %eax,%es
     921:	bf c0 31 b4 02       	mov    $0x2b431c0,%edi
     926:	cd 1a                	int    $0x1a
     928:	88 e8                	mov    %ch,%al
     92a:	b4 00                	mov    $0x0,%ah
     92c:	b3 10                	mov    $0x10,%bl
     92e:	f6 f3                	div    %bl
     930:	04 30                	add    $0x30,%al
     932:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
     938:	88 e8                	mov    %ch,%al
     93a:	24 0f                	and    $0xf,%al
     93c:	04 30                	add    $0x30,%al
     93e:	88 45 01             	mov    %al,0x1(%ebp)
     941:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
     945:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
     949:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
     94d:	b4 02                	mov    $0x2,%ah
     94f:	cd 1a                	int    $0x1a
     951:	88 c8                	mov    %cl,%al
     953:	b4 00                	mov    $0x0,%ah
     955:	b3 10                	mov    $0x10,%bl
     957:	f6 f3                	div    %bl
     959:	04 30                	add    $0x30,%al
     95b:	88 45 05             	mov    %al,0x5(%ebp)
     95e:	b4 02                	mov    $0x2,%ah
     960:	cd 1a                	int    $0x1a
     962:	88 c8                	mov    %cl,%al
     964:	24 0f                	and    $0xf,%al
     966:	04 30                	add    $0x30,%al
     968:	88 45 06             	mov    %al,0x6(%ebp)
     96b:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
     96f:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
     973:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
     977:	8c c8                	mov    %cs,%eax
     979:	8e d8                	mov    %eax,%ds
     97b:	8e c0                	mov    %eax,%es
     97d:	bd cf 01 8c d8       	mov    $0xd88c01cf,%ebp
     982:	8e c0                	mov    %eax,%es
     984:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
     989:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     98f:	b2 0a                	mov    $0xa,%dl
     991:	cd 10                	int    $0x10
     993:	8c c8                	mov    %cs,%eax
     995:	8e d8                	mov    %eax,%ds
     997:	8e c0                	mov    %eax,%es
     999:	bd c0 31 8c d8       	mov    $0xd88c31c0,%ebp
     99e:	8e c0                	mov    %eax,%es
     9a0:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
     9a5:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     9ab:	b2 1e                	mov    $0x1e,%dl
     9ad:	cd 10                	int    $0x10
     9af:	61                   	popa   
     9b0:	07                   	pop    %es
     9b1:	1f                   	pop    %ds
     9b2:	c9                   	leave  
     9b3:	66 5a                	pop    %dx
     9b5:	ff e2                	jmp    *%edx

000009b7 <_Get_Hours_1>:
     9b7:	c8 04 00 00          	enter  $0x4,$0x0
     9bb:	b4 02                	mov    $0x2,%ah
     9bd:	cd 1a                	int    $0x1a
     9bf:	88 e8                	mov    %ch,%al
     9c1:	b4 00                	mov    $0x0,%ah
     9c3:	b3 10                	mov    $0x10,%bl
     9c5:	f6 f3                	div    %bl
     9c7:	30 e4                	xor    %ah,%ah
     9c9:	66 67 89 04          	mov    %ax,(%si)
     9cd:	24 66                	and    $0x66,%al
     9cf:	67 8b 04             	mov    (%si),%eax
     9d2:	24 c9                	and    $0xc9,%al
     9d4:	66 5a                	pop    %dx
     9d6:	ff e2                	jmp    *%edx

000009d8 <_Get_Hours_2>:
     9d8:	c8 04 00 00          	enter  $0x4,$0x0
     9dc:	b4 02                	mov    $0x2,%ah
     9de:	cd 1a                	int    $0x1a
     9e0:	88 e8                	mov    %ch,%al
     9e2:	24 0f                	and    $0xf,%al
     9e4:	30 e4                	xor    %ah,%ah
     9e6:	66 67 89 04          	mov    %ax,(%si)
     9ea:	24 66                	and    $0x66,%al
     9ec:	67 8b 04             	mov    (%si),%eax
     9ef:	24 c9                	and    $0xc9,%al
     9f1:	66 5a                	pop    %dx
     9f3:	ff e2                	jmp    *%edx

000009f5 <_Get_Minutes_1>:
     9f5:	c8 04 00 00          	enter  $0x4,$0x0
     9f9:	b4 02                	mov    $0x2,%ah
     9fb:	cd 1a                	int    $0x1a
     9fd:	88 c8                	mov    %cl,%al
     9ff:	b4 00                	mov    $0x0,%ah
     a01:	b3 10                	mov    $0x10,%bl
     a03:	f6 f3                	div    %bl
     a05:	30 e4                	xor    %ah,%ah
     a07:	66 67 89 04          	mov    %ax,(%si)
     a0b:	24 66                	and    $0x66,%al
     a0d:	67 8b 04             	mov    (%si),%eax
     a10:	24 c9                	and    $0xc9,%al
     a12:	66 5a                	pop    %dx
     a14:	ff e2                	jmp    *%edx

00000a16 <_Get_Minutes_2>:
     a16:	c8 04 00 00          	enter  $0x4,$0x0
     a1a:	b4 02                	mov    $0x2,%ah
     a1c:	cd 1a                	int    $0x1a
     a1e:	88 c8                	mov    %cl,%al
     a20:	24 0f                	and    $0xf,%al
     a22:	30 e4                	xor    %ah,%ah
     a24:	66 67 89 04          	mov    %ax,(%si)
     a28:	24 66                	and    $0x66,%al
     a2a:	67 8b 04             	mov    (%si),%eax
     a2d:	24 c9                	and    $0xc9,%al
     a2f:	66 5a                	pop    %dx
     a31:	ff e2                	jmp    *%edx

00000a33 <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
     a33:	66 55                	push   %bp
     a35:	66 89 e5             	mov    %sp,%bp
     a38:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
     a3c:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     a41:	66 89 d0             	mov    %dx,%ax
     a44:	66 c1 e0 02          	shl    $0x2,%ax
     a48:	66 01 d0             	add    %dx,%ax
     a4b:	66 c1 e0 04          	shl    $0x4,%ax
     a4f:	66 89 c2             	mov    %ax,%dx
     a52:	67 66 8b 45 10       	mov    0x10(%di),%ax
     a57:	66 01 d0             	add    %dx,%ax
     a5a:	66 01 c0             	add    %ax,%ax
     a5d:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
     a62:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     a69:	00 00                	add    %al,(%eax)
	int index = 0;
     a6b:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     a72:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     a74:	eb 35                	jmp    aab <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
     a76:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     a7b:	67 66 8b 45 08       	mov    0x8(%di),%ax
     a80:	66 01 d0             	add    %dx,%ax
     a83:	67 8a 00             	mov    (%bx,%si),%al
     a86:	66 0f be c0          	movsbw %al,%ax
     a8a:	67 66 ff 75 f4       	pushw  -0xc(%di)
     a8f:	67 66 ff 75 fc       	pushw  -0x4(%di)
     a94:	66 50                	push   %ax
     a96:	66 e8 71 f7          	callw  20b <_clearscreen+0x7>
     a9a:	ff                   	(bad)  
     a9b:	ff 66 83             	jmp    *-0x7d(%esi)
     a9e:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     aa1:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     aa5:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
     aab:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     ab0:	67 66 8b 45 08       	mov    0x8(%di),%ax
     ab5:	66 01 d0             	add    %dx,%ax
     ab8:	67 8a 00             	mov    (%bx,%si),%al
     abb:	84 c0                	test   %al,%al
     abd:	75 b7                	jne    a76 <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     abf:	90                   	nop
}
     ac0:	66 c9                	leavew 
     ac2:	66 c3                	retw   

00000ac4 <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
     ac4:	66 55                	push   %bp
     ac6:	66 89 e5             	mov    %sp,%bp
     ac9:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
     acd:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     ad2:	66 89 d0             	mov    %dx,%ax
     ad5:	66 c1 e0 02          	shl    $0x2,%ax
     ad9:	66 01 d0             	add    %dx,%ax
     adc:	66 c1 e0 04          	shl    $0x4,%ax
     ae0:	66 89 c2             	mov    %ax,%dx
     ae3:	67 66 8b 45 10       	mov    0x10(%di),%ax
     ae8:	66 01 d0             	add    %dx,%ax
     aeb:	66 01 c0             	add    %ax,%ax
     aee:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
     af3:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     afa:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     afc:	eb 35                	jmp    b33 <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
     afe:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     b03:	67 66 8b 45 08       	mov    0x8(%di),%ax
     b08:	66 01 d0             	add    %dx,%ax
     b0b:	67 8a 00             	mov    (%bx,%si),%al
     b0e:	66 0f be c0          	movsbw %al,%ax
     b12:	67 66 ff 75 14       	pushw  0x14(%di)
     b17:	67 66 ff 75 fc       	pushw  -0x4(%di)
     b1c:	66 50                	push   %ax
     b1e:	66 e8 e9 f6          	callw  20b <_clearscreen+0x7>
     b22:	ff                   	(bad)  
     b23:	ff 66 83             	jmp    *-0x7d(%esi)
     b26:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     b29:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     b2d:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
     b33:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     b38:	67 66 8b 45 08       	mov    0x8(%di),%ax
     b3d:	66 01 d0             	add    %dx,%ax
     b40:	67 8a 00             	mov    (%bx,%si),%al
     b43:	84 c0                	test   %al,%al
     b45:	75 b7                	jne    afe <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     b47:	90                   	nop
}
     b48:	66 c9                	leavew 
     b4a:	66 c3                	retw   

00000b4c <sys_showline>:
void sys_showline(){
     b4c:	66 55                	push   %bp
     b4e:	66 89 e5             	mov    %sp,%bp
     b51:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
     b55:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
     b5a:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
     b5f:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
     b64:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
     b69:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
     b6e:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
     b73:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
     b78:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     b7f:	00 00                	add    %al,(%eax)
    int i = 0;
     b81:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     b88:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
     b8a:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     b91:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
     b93:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     b9a:	00 00                	add    %al,(%eax)
     b9c:	eb 52                	jmp    bf0 <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
     b9e:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     ba3:	66 89 d0             	mov    %dx,%ax
     ba6:	66 c1 e0 03          	shl    $0x3,%ax
     baa:	66 01 d0             	add    %dx,%ax
     bad:	67 66 8d 14          	lea    (%si),%dx
     bb1:	c5 00                	lds    (%eax),%eax
     bb3:	00 00                	add    %al,(%eax)
     bb5:	00 66 01             	add    %ah,0x1(%esi)
     bb8:	d0 66 01             	shlb   0x1(%esi)
     bbb:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
     bbf:	45                   	inc    %ebp
     bc0:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
     bc6:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     bcb:	66 01 d0             	add    %dx,%ax
     bce:	67 8a 00             	mov    (%bx,%si),%al
     bd1:	66 0f be c0          	movsbw %al,%ax
     bd5:	67 66 ff 75 f4       	pushw  -0xc(%di)
     bda:	67 66 ff 75 f0       	pushw  -0x10(%di)
     bdf:	66 50                	push   %ax
     be1:	66 e8 26 f6          	callw  20b <_clearscreen+0x7>
     be5:	ff                   	(bad)  
     be6:	ff 66 83             	jmp    *-0x7d(%esi)
     be9:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
     bec:	66 ff 45 fc          	incw   -0x4(%ebp)
     bf0:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
     bf6:	7e a6                	jle    b9e <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
     bf8:	66 c9                	leavew 
     bfa:	66 c3                	retw   

00000bfc <sys_printname>:

void sys_printname(){
     bfc:	66 55                	push   %bp
     bfe:	66 89 e5             	mov    %sp,%bp
     c01:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
     c05:	67 66 c7 45 fc ac 1a 	movw   $0x1aac,-0x4(%di)
     c0c:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
     c0e:	67 66 c7 45 f8 f0 1a 	movw   $0x1af0,-0x8(%di)
     c15:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
     c17:	67 66 c7 45 f4 34 1b 	movw   $0x1b34,-0xc(%di)
     c1e:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
     c20:	67 66 c7 45 f0 78 1b 	movw   $0x1b78,-0x10(%di)
     c27:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
     c29:	67 66 c7 45 ec bc 1b 	movw   $0x1bbc,-0x14(%di)
     c30:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
     c32:	67 66 c7 45 e8 00 1c 	movw   $0x1c00,-0x18(%di)
     c39:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
     c3b:	67 66 c7 45 e4 44 1c 	movw   $0x1c44,-0x1c(%di)
     c42:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
     c44:	66 6a 0b             	pushw  $0xb
     c47:	66 6a 10             	pushw  $0x10
     c4a:	67 66 ff 75 fc       	pushw  -0x4(%di)
     c4f:	66 e8 de fd          	callw  a31 <_Get_Minutes_2+0x1b>
     c53:	ff                   	(bad)  
     c54:	ff 66 83             	jmp    *-0x7d(%esi)
     c57:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
     c5a:	6a 0b                	push   $0xb
     c5c:	66 6a 11             	pushw  $0x11
     c5f:	67 66 ff 75 f8       	pushw  -0x8(%di)
     c64:	66 e8 c9 fd          	callw  a31 <_Get_Minutes_2+0x1b>
     c68:	ff                   	(bad)  
     c69:	ff 66 83             	jmp    *-0x7d(%esi)
     c6c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
     c6f:	6a 0b                	push   $0xb
     c71:	66 6a 12             	pushw  $0x12
     c74:	67 66 ff 75 f4       	pushw  -0xc(%di)
     c79:	66 e8 b4 fd          	callw  a31 <_Get_Minutes_2+0x1b>
     c7d:	ff                   	(bad)  
     c7e:	ff 66 83             	jmp    *-0x7d(%esi)
     c81:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
     c84:	6a 0b                	push   $0xb
     c86:	66 6a 13             	pushw  $0x13
     c89:	67 66 ff 75 f0       	pushw  -0x10(%di)
     c8e:	66 e8 9f fd          	callw  a31 <_Get_Minutes_2+0x1b>
     c92:	ff                   	(bad)  
     c93:	ff 66 83             	jmp    *-0x7d(%esi)
     c96:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
     c99:	6a 0b                	push   $0xb
     c9b:	66 6a 14             	pushw  $0x14
     c9e:	67 66 ff 75 ec       	pushw  -0x14(%di)
     ca3:	66 e8 8a fd          	callw  a31 <_Get_Minutes_2+0x1b>
     ca7:	ff                   	(bad)  
     ca8:	ff 66 83             	jmp    *-0x7d(%esi)
     cab:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
     cae:	6a 0b                	push   $0xb
     cb0:	66 6a 15             	pushw  $0x15
     cb3:	67 66 ff 75 e8       	pushw  -0x18(%di)
     cb8:	66 e8 75 fd          	callw  a31 <_Get_Minutes_2+0x1b>
     cbc:	ff                   	(bad)  
     cbd:	ff 66 83             	jmp    *-0x7d(%esi)
     cc0:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
     cc3:	6a 0b                	push   $0xb
     cc5:	66 6a 16             	pushw  $0x16
     cc8:	67 66 ff 75 e4       	pushw  -0x1c(%di)
     ccd:	66 e8 60 fd          	callw  a31 <_Get_Minutes_2+0x1b>
     cd1:	ff                   	(bad)  
     cd2:	ff 66 83             	jmp    *-0x7d(%esi)
     cd5:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
     cd8:	c9                   	leave  
     cd9:	66 c3                	retw   

00000cdb <sys_printpoem>:
void sys_printpoem(){
     cdb:	66 55                	push   %bp
     cdd:	66 89 e5             	mov    %sp,%bp
     ce0:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
     ce4:	67 66 c7 45 f8 88 1c 	movw   $0x1c88,-0x8(%di)
     ceb:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
     ced:	67 66 c7 45 f4 9a 1c 	movw   $0x1c9a,-0xc(%di)
     cf4:	00 00                	add    %al,(%eax)
    int i = 1;
     cf6:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     cfd:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
     cff:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     d06:	00 00                	add    %al,(%eax)
     d08:	eb 4b                	jmp    d55 <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
     d0a:	67 66 ff 75 fc       	pushw  -0x4(%di)
     d0f:	66 6a 0a             	pushw  $0xa
     d12:	66 6a 0f             	pushw  $0xf
     d15:	67 66 ff 75 f8       	pushw  -0x8(%di)
     d1a:	66 e8 a4 fd          	callw  ac2 <sys_print_for_heart+0x8f>
     d1e:	ff                   	(bad)  
     d1f:	ff 66 83             	jmp    *-0x7d(%esi)
     d22:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
     d24:	67 66 ff 75 fc       	pushw  -0x4(%di)
     d29:	66 6a 0a             	pushw  $0xa
     d2c:	66 6a 10             	pushw  $0x10
     d2f:	67 66 ff 75 f4       	pushw  -0xc(%di)
     d34:	66 e8 8a fd          	callw  ac2 <sys_print_for_heart+0x8f>
     d38:	ff                   	(bad)  
     d39:	ff 66 83             	jmp    *-0x7d(%esi)
     d3c:	c4 10                	les    (%eax),%edx
        int j = 0;
     d3e:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     d45:	00 00                	add    %al,(%eax)
        int k = 0;
     d47:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
     d4e:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
     d50:	67 66 ff 45 fc       	incw   -0x4(%di)
     d55:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
     d5b:	7e ad                	jle    d0a <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
     d5d:	66 c9                	leavew 
     d5f:	66 c3                	retw   

00000d61 <sys_printheart>:
void sys_printheart(){
     d61:	66 55                	push   %bp
     d63:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
     d66:	66 6a 28             	pushw  $0x28
     d69:	66 6a 00             	pushw  $0x0
     d6c:	66 68 a3 1c          	pushw  $0x1ca3
     d70:	00 00                	add    %al,(%eax)
     d72:	66 e8 bb fc          	callw  a31 <_Get_Minutes_2+0x1b>
     d76:	ff                   	(bad)  
     d77:	ff 66 83             	jmp    *-0x7d(%esi)
     d7a:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
     d7d:	6a 28                	push   $0x28
     d7f:	66 6a 01             	pushw  $0x1
     d82:	66 68 bb 1c          	pushw  $0x1cbb
     d86:	00 00                	add    %al,(%eax)
     d88:	66 e8 a5 fc          	callw  a31 <_Get_Minutes_2+0x1b>
     d8c:	ff                   	(bad)  
     d8d:	ff 66 83             	jmp    *-0x7d(%esi)
     d90:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
     d93:	6a 28                	push   $0x28
     d95:	66 6a 02             	pushw  $0x2
     d98:	66 68 d4 1c          	pushw  $0x1cd4
     d9c:	00 00                	add    %al,(%eax)
     d9e:	66 e8 8f fc          	callw  a31 <_Get_Minutes_2+0x1b>
     da2:	ff                   	(bad)  
     da3:	ff 66 83             	jmp    *-0x7d(%esi)
     da6:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
     da9:	6a 28                	push   $0x28
     dab:	66 6a 03             	pushw  $0x3
     dae:	66 68 ef 1c          	pushw  $0x1cef
     db2:	00 00                	add    %al,(%eax)
     db4:	66 e8 79 fc          	callw  a31 <_Get_Minutes_2+0x1b>
     db8:	ff                   	(bad)  
     db9:	ff 66 83             	jmp    *-0x7d(%esi)
     dbc:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
     dbf:	6a 28                	push   $0x28
     dc1:	66 6a 04             	pushw  $0x4
     dc4:	66 68 08 1d          	pushw  $0x1d08
     dc8:	00 00                	add    %al,(%eax)
     dca:	66 e8 63 fc          	callw  a31 <_Get_Minutes_2+0x1b>
     dce:	ff                   	(bad)  
     dcf:	ff 66 83             	jmp    *-0x7d(%esi)
     dd2:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
     dd5:	6a 28                	push   $0x28
     dd7:	66 6a 05             	pushw  $0x5
     dda:	66 68 20 1d          	pushw  $0x1d20
     dde:	00 00                	add    %al,(%eax)
     de0:	66 e8 4d fc          	callw  a31 <_Get_Minutes_2+0x1b>
     de4:	ff                   	(bad)  
     de5:	ff 66 83             	jmp    *-0x7d(%esi)
     de8:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
     deb:	6a 28                	push   $0x28
     ded:	66 6a 06             	pushw  $0x6
     df0:	66 68 37 1d          	pushw  $0x1d37
     df4:	00 00                	add    %al,(%eax)
     df6:	66 e8 37 fc          	callw  a31 <_Get_Minutes_2+0x1b>
     dfa:	ff                   	(bad)  
     dfb:	ff 66 83             	jmp    *-0x7d(%esi)
     dfe:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
     e01:	6a 28                	push   $0x28
     e03:	66 6a 07             	pushw  $0x7
     e06:	66 68 4d 1d          	pushw  $0x1d4d
     e0a:	00 00                	add    %al,(%eax)
     e0c:	66 e8 21 fc          	callw  a31 <_Get_Minutes_2+0x1b>
     e10:	ff                   	(bad)  
     e11:	ff 66 83             	jmp    *-0x7d(%esi)
     e14:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
     e17:	c9                   	leave  
     e18:	66 c3                	retw   

00000e1a <print>:
#include "stdio.h"
//====================================================
//              显示字符串函数，可以指定位置
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
     e1a:	66 55                	push   %bp
     e1c:	66 89 e5             	mov    %sp,%bp
     e1f:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
     e23:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     e28:	66 89 d0             	mov    %dx,%ax
     e2b:	66 c1 e0 02          	shl    $0x2,%ax
     e2f:	66 01 d0             	add    %dx,%ax
     e32:	66 c1 e0 04          	shl    $0x4,%ax
     e36:	66 89 c2             	mov    %ax,%dx
     e39:	67 66 8b 45 10       	mov    0x10(%di),%ax
     e3e:	66 01 d0             	add    %dx,%ax
     e41:	66 01 c0             	add    %ax,%ax
     e44:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
     e49:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     e50:	00 00                	add    %al,(%eax)
	int index = 0;
     e52:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     e59:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     e5b:	eb 35                	jmp    e92 <print+0x78>
		_printchar(Messeage[index],pos,color);
     e5d:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     e62:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e67:	66 01 d0             	add    %dx,%ax
     e6a:	67 8a 00             	mov    (%bx,%si),%al
     e6d:	66 0f be c0          	movsbw %al,%ax
     e71:	67 66 ff 75 f4       	pushw  -0xc(%di)
     e76:	67 66 ff 75 fc       	pushw  -0x4(%di)
     e7b:	66 50                	push   %ax
     e7d:	66 e8 8a f3          	callw  20b <_clearscreen+0x7>
     e81:	ff                   	(bad)  
     e82:	ff 66 83             	jmp    *-0x7d(%esi)
     e85:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     e88:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     e8c:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
     e92:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     e97:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e9c:	66 01 d0             	add    %dx,%ax
     e9f:	67 8a 00             	mov    (%bx,%si),%al
     ea2:	84 c0                	test   %al,%al
     ea4:	75 b7                	jne    e5d <print+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     ea6:	90                   	nop
}
     ea7:	66 c9                	leavew 
     ea9:	66 c3                	retw   

00000eab <prints>:
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input
     eab:	66 55                	push   %bp
     ead:	66 89 e5             	mov    %sp,%bp
     eb0:	66 83 ec 04          	sub    $0x4,%sp
	int index = 0;
     eb4:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     ebb:	00 00                	add    %al,(%eax)
	while(Messeage[index]){
     ebd:	eb 25                	jmp    ee4 <prints+0x39>
		_showchar(Messeage[index]);
     ebf:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     ec4:	67 66 8b 45 08       	mov    0x8(%di),%ax
     ec9:	66 01 d0             	add    %dx,%ax
     ecc:	67 8a 00             	mov    (%bx,%si),%al
     ecf:	66 0f be c0          	movsbw %al,%ax
     ed3:	66 50                	push   %ax
     ed5:	66 e8 6f f3          	callw  248 <_readinput+0x17>
     ed9:	ff                   	(bad)  
     eda:	ff 66 83             	jmp    *-0x7d(%esi)
     edd:	c4 04 67             	les    (%edi,%eiz,2),%eax
		index++;
     ee0:	66 ff 45 fc          	incw   -0x4(%ebp)
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input
	int index = 0;
	while(Messeage[index]){
     ee4:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     ee9:	67 66 8b 45 08       	mov    0x8(%di),%ax
     eee:	66 01 d0             	add    %dx,%ax
     ef1:	67 8a 00             	mov    (%bx,%si),%al
     ef4:	84 c0                	test   %al,%al
     ef6:	75 c7                	jne    ebf <prints+0x14>
		_showchar(Messeage[index]);
		index++;
	}
	return;
     ef8:	90                   	nop
}
     ef9:	66 c9                	leavew 
     efb:	66 c3                	retw   

00000efd <printc>:
//====================================================
//                显示字符函数
//====================================================
void printc(char alpha){
     efd:	66 55                	push   %bp
     eff:	66 89 e5             	mov    %sp,%bp
     f02:	66 83 ec 04          	sub    $0x4,%sp
     f06:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f0b:	67 88 45 fc          	mov    %al,-0x4(%di)
	_showchar(alpha);
     f0f:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
     f15:	66 50                	push   %ax
     f17:	66 e8 2d f3          	callw  248 <_readinput+0x17>
     f1b:	ff                   	(bad)  
     f1c:	ff 66 83             	jmp    *-0x7d(%esi)
     f1f:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
     f22:	66 c9                	leavew 
     f24:	66 c3                	retw   

00000f26 <printsint>:
//====================================================
//                数字转字符函数
//====================================================
void printsint(int num){
     f26:	66 55                	push   %bp
     f28:	66 89 e5             	mov    %sp,%bp
     f2b:	66 83 ec 2c          	sub    $0x2c,%sp
	 int save = num;
     f2f:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f34:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	 int count = 0;
     f39:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     f40:	00 00                	add    %al,(%eax)
	 char number[30];
	 number[count] = 0;
     f42:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
     f47:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     f4c:	66 01 d0             	add    %dx,%ax
     f4f:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	if(num < 0){
     f53:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
     f59:	79 14                	jns    f6f <printsint+0x49>
		printc('-');
     f5b:	66 6a 2d             	pushw  $0x2d
     f5e:	66 e8 99 ff          	callw  efb <prints+0x50>
     f62:	ff                   	(bad)  
     f63:	ff 66 83             	jmp    *-0x7d(%esi)
     f66:	c4 04 67             	les    (%edi,%eiz,2),%eax
		num = -num;
     f69:	66 f7 5d 08          	negw   0x8(%ebp)
     f6d:	eb 15                	jmp    f84 <printsint+0x5e>
	}
	else if(num == 0){
     f6f:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
     f75:	75 0d                	jne    f84 <printsint+0x5e>
		printc('0');
     f77:	66 6a 30             	pushw  $0x30
     f7a:	66 e8 7d ff          	callw  efb <prints+0x50>
     f7e:	ff                   	(bad)  
     f7f:	ff 66 83             	jmp    *-0x7d(%esi)
     f82:	c4 04 eb             	les    (%ebx,%ebp,8),%eax
	}
	while(num > 0){
     f85:	50                   	push   %eax
		number[count] = num % 10 + '0';
     f86:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f8b:	66 b9 0a 00          	mov    $0xa,%cx
     f8f:	00 00                	add    %al,(%eax)
     f91:	66 99                	cwtd   
     f93:	66 f7 f9             	idiv   %cx
     f96:	66 89 d0             	mov    %dx,%ax
     f99:	66 83 c0 30          	add    $0x30,%ax
     f9d:	67 66 8d 4d d6       	lea    -0x2a(%di),%cx
     fa2:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     fa7:	66 01 ca             	add    %cx,%dx
     faa:	67 88 02             	mov    %al,(%bp,%si)
		num  = num / 10;
     fad:	67 66 8b 4d 08       	mov    0x8(%di),%cx
     fb2:	66 b8 67 66          	mov    $0x6667,%ax
     fb6:	66 66 66 f7 e9       	data32 data32 imul %cx
     fbb:	66 c1 fa 02          	sar    $0x2,%dx
     fbf:	66 89 c8             	mov    %cx,%ax
     fc2:	66 c1 f8 1f          	sar    $0x1f,%ax
     fc6:	66 29 c2             	sub    %ax,%dx
     fc9:	66 89 d0             	mov    %dx,%ax
     fcc:	67 66 89 45 08       	mov    %ax,0x8(%di)
		count ++;
     fd1:	67 66 ff 45 fc       	incw   -0x4(%di)
		num = -num;
	}
	else if(num == 0){
		printc('0');
	}
	while(num > 0){
     fd6:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
     fdc:	7f a8                	jg     f86 <printsint+0x60>
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
     fde:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     fe3:	66 48                	dec    %ax
     fe5:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
     fea:	eb 25                	jmp    1011 <printsint+0xeb>
		printc(number[i]);
     fec:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
     ff1:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
     ff6:	66 01 d0             	add    %dx,%ax
     ff9:	67 8a 00             	mov    (%bx,%si),%al
     ffc:	66 0f be c0          	movsbw %al,%ax
    1000:	66 50                	push   %ax
    1002:	66 e8 f5 fe          	callw  efb <prints+0x50>
    1006:	ff                   	(bad)  
    1007:	ff 66 83             	jmp    *-0x7d(%esi)
    100a:	c4 04 67             	les    (%edi,%eiz,2),%eax
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    100d:	66 ff 4d f8          	decw   -0x8(%ebp)
    1011:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    1017:	79 d3                	jns    fec <printsint+0xc6>
		printc(number[i]);
	}
	return;
    1019:	90                   	nop
}
    101a:	66 c9                	leavew 
    101c:	66 c3                	retw   

0000101e <print_next_line>:
//====================================================
//                显示字符串并换行函数
//====================================================
 void print_next_line(char const* Messeage){
    101e:	66 55                	push   %bp
    1020:	66 89 e5             	mov    %sp,%bp
	prints(Messeage);
    1023:	67 66 ff 75 08       	pushw  0x8(%di)
    1028:	66 e8 7d fe          	callw  ea9 <print+0x8f>
    102c:	ff                   	(bad)  
    102d:	ff 66 83             	jmp    *-0x7d(%esi)
    1030:	c4 04 66             	les    (%esi,%eiz,2),%eax
	prints("\n\r");
    1033:	68 62 1d 00 00       	push   $0x1d62
    1038:	66 e8 6d fe          	callw  ea9 <print+0x8f>
    103c:	ff                   	(bad)  
    103d:	ff 66 83             	jmp    *-0x7d(%esi)
    1040:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    1043:	66 c9                	leavew 
    1045:	66 c3                	retw   

00001047 <strlen>:
//====================================================
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
    1047:	66 55                	push   %bp
    1049:	66 89 e5             	mov    %sp,%bp
    104c:	66 83 ec 08          	sub    $0x8,%sp
	int i = 0;
    1050:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1057:	00 00                	add    %al,(%eax)
	int count = 0;
    1059:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    1060:	00 00                	add    %al,(%eax)
	while(Messeage[i] != 0){
    1062:	eb 0a                	jmp    106e <strlen+0x27>
		i++;
    1064:	67 66 ff 45 fc       	incw   -0x4(%di)
		count++;
    1069:	67 66 ff 45 f8       	incw   -0x8(%di)
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
	int i = 0;
	int count = 0;
	while(Messeage[i] != 0){
    106e:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1073:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1078:	66 01 d0             	add    %dx,%ax
    107b:	67 8a 00             	mov    (%bx,%si),%al
    107e:	84 c0                	test   %al,%al
    1080:	75 e2                	jne    1064 <strlen+0x1d>
		i++;
		count++;
	}
	return count;
    1082:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    1087:	66 c9                	leavew 
    1089:	66 c3                	retw   

0000108b <read_and_print_input>:
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    108b:	66 55                	push   %bp
    108d:	66 89 e5             	mov    %sp,%bp
    1090:	66 83 ec 08          	sub    $0x8,%sp
    int i = 1;
    1094:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    109b:	00 00                	add    %al,(%eax)
    while(i){
    109d:	eb 1c                	jmp    10bb <read_and_print_input+0x30>
        char savechar = _readinput();
    109f:	66 e8 8c f1          	callw  22f <_printchar+0x22>
    10a3:	ff                   	(bad)  
    10a4:	ff 67 88             	jmp    *-0x78(%edi)
    10a7:	45                   	inc    %ebp
    10a8:	fb                   	sti    
        _showchar(savechar);
    10a9:	67 66 0f be 45 fb    	movsbw -0x5(%di),%ax
    10af:	66 50                	push   %ax
    10b1:	66 e8 93 f1          	callw  248 <_readinput+0x17>
    10b5:	ff                   	(bad)  
    10b6:	ff 66 83             	jmp    *-0x7d(%esi)
    10b9:	c4 04 67             	les    (%edi,%eiz,2),%eax
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    int i = 1;
    while(i){
    10bc:	66 83 7d fc 00       	cmpw   $0x0,-0x4(%ebp)
    10c1:	75 dc                	jne    109f <read_and_print_input+0x14>
        char savechar = _readinput();
        _showchar(savechar);
    }
}
    10c3:	66 c9                	leavew 
    10c5:	66 c3                	retw   

000010c7 <getch>:
//====================================================
//        等待用户输入函数，返回用户输入在缓冲区中
//====================================================
char getch(){
    10c7:	66 55                	push   %bp
    10c9:	66 89 e5             	mov    %sp,%bp
    10cc:	66 83 ec 04          	sub    $0x4,%sp
	char result = _readinput();
    10d0:	66 e8 5b f1          	callw  22f <_printchar+0x22>
    10d4:	ff                   	(bad)  
    10d5:	ff 67 88             	jmp    *-0x78(%edi)
    10d8:	45                   	inc    %ebp
    10d9:	ff 67 8a             	jmp    *-0x76(%edi)
	return result;
    10dc:	45                   	inc    %ebp
    10dd:	ff 66 c9             	jmp    *-0x37(%esi)
}
    10e0:	66 c3                	retw   

000010e2 <getline>:
void  getline(char str[],int length){
    10e2:	66 55                	push   %bp
    10e4:	66 89 e5             	mov    %sp,%bp
    10e7:	66 83 ec 08          	sub    $0x8,%sp
	char save = getch();
    10eb:	66 e8 d6 ff          	callw  10c5 <read_and_print_input+0x3a>
    10ef:	ff                   	(bad)  
    10f0:	ff 67 88             	jmp    *-0x78(%edi)
    10f3:	45                   	inc    %ebp
    10f4:	ff 67 66             	jmp    *0x66(%edi)
	int index = 0;
    10f7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while(save != 13 && index < length){
    10fe:	eb 46                	jmp    1146 <getline+0x64>
		printc(save);
    1100:	67 66 0f be 45 ff    	movsbw -0x1(%di),%ax
    1106:	66 50                	push   %ax
    1108:	66 e8 ef fd          	callw  efb <prints+0x50>
    110c:	ff                   	(bad)  
    110d:	ff 66 83             	jmp    *-0x7d(%esi)
    1110:	c4 04 67             	les    (%edi,%eiz,2),%eax
		str[index] = save;
    1113:	66 8b 55 f8          	mov    -0x8(%ebp),%dx
    1117:	67 66 8b 45 08       	mov    0x8(%di),%ax
    111c:	66 01 c2             	add    %ax,%dx
    111f:	67 8a 45 ff          	mov    -0x1(%di),%al
    1123:	67 88 02             	mov    %al,(%bp,%si)
		index ++;
    1126:	67 66 ff 45 f8       	incw   -0x8(%di)
		str[index] = 0;
    112b:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    1130:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1135:	66 01 d0             	add    %dx,%ax
    1138:	67 c6 00 00          	movb   $0x0,(%bx,%si)
		save = getch();
    113c:	66 e8 85 ff          	callw  10c5 <read_and_print_input+0x3a>
    1140:	ff                   	(bad)  
    1141:	ff 67 88             	jmp    *-0x78(%edi)
    1144:	45                   	inc    %ebp
    1145:	ff 67 80             	jmp    *-0x80(%edi)
	return result;
}
void  getline(char str[],int length){
	char save = getch();
	int index = 0;
	while(save != 13 && index < length){
    1148:	7d ff                	jge    1149 <getline+0x67>
    114a:	0d 74 0c 67 66       	or     $0x66670c74,%eax
    114f:	8b 45 f8             	mov    -0x8(%ebp),%eax
    1152:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    1157:	7c a7                	jl     1100 <getline+0x1e>
		str[index] = save;
		index ++;
		str[index] = 0;
		save = getch();
	}
	return;
    1159:	90                   	nop
}
    115a:	66 c9                	leavew 
    115c:	66 c3                	retw   

0000115e <print_different_color>:
void print_different_color(char const* Messeage,int row,int colume,int color){
    115e:	66 55                	push   %bp
    1160:	66 89 e5             	mov    %sp,%bp
    1163:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    1167:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    116c:	66 89 d0             	mov    %dx,%ax
    116f:	66 c1 e0 02          	shl    $0x2,%ax
    1173:	66 01 d0             	add    %dx,%ax
    1176:	66 c1 e0 04          	shl    $0x4,%ax
    117a:	66 89 c2             	mov    %ax,%dx
    117d:	67 66 8b 45 10       	mov    0x10(%di),%ax
    1182:	66 01 d0             	add    %dx,%ax
    1185:	66 01 c0             	add    %ax,%ax
    1188:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    118d:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    1194:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    1196:	eb 35                	jmp    11cd <print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    1198:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    119d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    11a2:	66 01 d0             	add    %dx,%ax
    11a5:	67 8a 00             	mov    (%bx,%si),%al
    11a8:	66 0f be c0          	movsbw %al,%ax
    11ac:	67 66 ff 75 14       	pushw  0x14(%di)
    11b1:	67 66 ff 75 fc       	pushw  -0x4(%di)
    11b6:	66 50                	push   %ax
    11b8:	66 e8 4f f0          	callw  20b <_clearscreen+0x7>
    11bc:	ff                   	(bad)  
    11bd:	ff 66 83             	jmp    *-0x7d(%esi)
    11c0:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    11c3:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    11c7:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    11cd:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    11d2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    11d7:	66 01 d0             	add    %dx,%ax
    11da:	67 8a 00             	mov    (%bx,%si),%al
    11dd:	84 c0                	test   %al,%al
    11df:	75 b7                	jne    1198 <print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    11e1:	90                   	nop
}
    11e2:	66 c9                	leavew 
    11e4:	66 c3                	retw   

000011e6 <strcmp>:
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
    11e6:	66 55                	push   %bp
    11e8:	66 89 e5             	mov    %sp,%bp
    11eb:	66 83 ec 04          	sub    $0x4,%sp
	int i = 0;
    11ef:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    11f6:	00 00                	add    %al,(%eax)
	while(m1[i] != 0 && m2[i]!= 0){
    11f8:	eb 31                	jmp    122b <strcmp+0x45>
		if(m1[i] != m2[i]){
    11fa:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    11ff:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1204:	66 01 d0             	add    %dx,%ax
    1207:	67 8a 10             	mov    (%bx,%si),%dl
    120a:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    120f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1214:	66 01 c8             	add    %cx,%ax
    1217:	67 8a 00             	mov    (%bx,%si),%al
    121a:	38 c2                	cmp    %al,%dl
    121c:	74 08                	je     1226 <strcmp+0x40>
			return 0;
    121e:	66 b8 00 00          	mov    $0x0,%ax
    1222:	00 00                	add    %al,(%eax)
    1224:	eb 63                	jmp    1289 <strcmp+0xa3>
		}
		i++;
    1226:	67 66 ff 45 fc       	incw   -0x4(%di)
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
	int i = 0;
	while(m1[i] != 0 && m2[i]!= 0){
    122b:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1230:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1235:	66 01 d0             	add    %dx,%ax
    1238:	67 8a 00             	mov    (%bx,%si),%al
    123b:	84 c0                	test   %al,%al
    123d:	74 14                	je     1253 <strcmp+0x6d>
    123f:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1244:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1249:	66 01 d0             	add    %dx,%ax
    124c:	67 8a 00             	mov    (%bx,%si),%al
    124f:	84 c0                	test   %al,%al
    1251:	75 a7                	jne    11fa <strcmp+0x14>
		if(m1[i] != m2[i]){
			return 0;
		}
		i++;
	}
	if(m1[i] != 0 || m2[i] != 0){
    1253:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1258:	67 66 8b 45 08       	mov    0x8(%di),%ax
    125d:	66 01 d0             	add    %dx,%ax
    1260:	67 8a 00             	mov    (%bx,%si),%al
    1263:	84 c0                	test   %al,%al
    1265:	75 14                	jne    127b <strcmp+0x95>
    1267:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    126c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1271:	66 01 d0             	add    %dx,%ax
    1274:	67 8a 00             	mov    (%bx,%si),%al
    1277:	84 c0                	test   %al,%al
    1279:	74 08                	je     1283 <strcmp+0x9d>
		return 0;
    127b:	66 b8 00 00          	mov    $0x0,%ax
    127f:	00 00                	add    %al,(%eax)
    1281:	eb 06                	jmp    1289 <strcmp+0xa3>
	}
	return 1;
    1283:	66 b8 01 00          	mov    $0x1,%ax
    1287:	00 00                	add    %al,(%eax)
}
    1289:	66 c9                	leavew 
    128b:	66 c3                	retw   

0000128d <strcpy>:
//====================================================
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
    128d:	66 55                	push   %bp
    128f:	66 89 e5             	mov    %sp,%bp
    1292:	66 83 ec 08          	sub    $0x8,%sp
	int len = strlen(src);
    1296:	67 66 ff 75 08       	pushw  0x8(%di)
    129b:	66 e8 a6 fd          	callw  1045 <print_next_line+0x27>
    129f:	ff                   	(bad)  
    12a0:	ff 66 83             	jmp    *-0x7d(%esi)
    12a3:	c4 04 67             	les    (%edi,%eiz,2),%eax
    12a6:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	int i = 0;
    12aa:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    12b1:	00 00                	add    %al,(%eax)
	for(i = 0;i < len;i ++){
    12b3:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    12ba:	00 00                	add    %al,(%eax)
    12bc:	eb 3b                	jmp    12f9 <strcpy+0x6c>
    	des[i] =  src[i];
    12be:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    12c3:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    12c8:	66 01 c2             	add    %ax,%dx
    12cb:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    12d0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    12d5:	66 01 c8             	add    %cx,%ax
    12d8:	67 8a 00             	mov    (%bx,%si),%al
    12db:	67 88 02             	mov    %al,(%bp,%si)
        des[i+1] = 0;
    12de:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    12e3:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    12e8:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    12ed:	66 01 d0             	add    %dx,%ax
    12f0:	67 c6 00 00          	movb   $0x0,(%bx,%si)
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
	int len = strlen(src);
	int i = 0;
	for(i = 0;i < len;i ++){
    12f4:	67 66 ff 45 fc       	incw   -0x4(%di)
    12f9:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    12fe:	67 66 3b 45 f8       	cmp    -0x8(%di),%ax
    1303:	7c b9                	jl     12be <strcpy+0x31>
    	des[i] =  src[i];
        des[i+1] = 0;
	}
    1305:	66 c9                	leavew 
    1307:	66 c3                	retw   

00001309 <savePCB>:
#include "schedule.h"

void savePCB(){
    1309:	66 55                	push   %bp
    130b:	66 89 e5             	mov    %sp,%bp
    _save();
    130e:	66 e8 36 f5          	callw  848 <_initialInt_08h+0x39>
    1312:	ff                   	(bad)  
    1313:	ff 66 5d             	jmp    *0x5d(%esi)
}
    1316:	66 c3                	retw   

00001318 <initial_PCB>:
void initial_PCB(int index){
    1318:	66 55                	push   %bp
    131a:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    131d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1322:	66 40                	inc    %ax
    1324:	66 c1 e0 0c          	shl    $0xc,%ax
    1328:	66 89 c2             	mov    %ax,%dx
    132b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1330:	66 c1 e0 02          	shl    $0x2,%ax
    1334:	66 89 c1             	mov    %ax,%cx
    1337:	66 c1 e1 04          	shl    $0x4,%cx
    133b:	66 01 c8             	add    %cx,%ax
    133e:	66 05 10 32          	add    $0x3210,%ax
    1342:	00 00                	add    %al,(%eax)
    1344:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    1348:	67 66 8b 45 08       	mov    0x8(%di),%ax
    134d:	66 40                	inc    %ax
    134f:	66 c1 e0 0c          	shl    $0xc,%ax
    1353:	66 89 c2             	mov    %ax,%dx
    1356:	67 66 8b 45 08       	mov    0x8(%di),%ax
    135b:	66 c1 e0 02          	shl    $0x2,%ax
    135f:	66 89 c1             	mov    %ax,%cx
    1362:	66 c1 e1 04          	shl    $0x4,%cx
    1366:	66 01 c8             	add    %cx,%ax
    1369:	66 05 00 32          	add    $0x3200,%ax
    136d:	00 00                	add    %al,(%eax)
    136f:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
    1373:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1378:	66 40                	inc    %ax
    137a:	66 c1 e0 0c          	shl    $0xc,%ax
    137e:	66 89 c2             	mov    %ax,%dx
    1381:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1386:	66 c1 e0 02          	shl    $0x2,%ax
    138a:	66 89 c1             	mov    %ax,%cx
    138d:	66 c1 e1 04          	shl    $0x4,%cx
    1391:	66 01 c8             	add    %cx,%ax
    1394:	66 05 00 32          	add    $0x3200,%ax
    1398:	00 00                	add    %al,(%eax)
    139a:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
    139f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    13a4:	66 c1 e0 02          	shl    $0x2,%ax
    13a8:	66 89 c2             	mov    %ax,%dx
    13ab:	66 c1 e2 04          	shl    $0x4,%dx
    13af:	66 01 d0             	add    %dx,%ax
    13b2:	66 05 00 32          	add    $0x3200,%ax
    13b6:	00 00                	add    %al,(%eax)
    13b8:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
    13bf:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
    13c1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    13c6:	66 c1 e0 02          	shl    $0x2,%ax
    13ca:	66 89 c2             	mov    %ax,%dx
    13cd:	66 c1 e2 04          	shl    $0x4,%dx
    13d1:	66 01 d0             	add    %dx,%ax
    13d4:	66 05 00 32          	add    $0x3200,%ax
    13d8:	00 00                	add    %al,(%eax)
    13da:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    13e1:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = RUN;
    13e3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    13e8:	66 c1 e0 02          	shl    $0x2,%ax
    13ec:	66 89 c2             	mov    %ax,%dx
    13ef:	66 c1 e2 04          	shl    $0x4,%dx
    13f3:	66 01 d0             	add    %dx,%ax
    13f6:	66 05 10 32          	add    $0x3210,%ax
    13fa:	00 00                	add    %al,(%eax)
    13fc:	67 66 c7 40 08 01 00 	movw   $0x1,0x8(%bx,%si)
    1403:	00 00                	add    %al,(%eax)
    PCB_list[index ].eflags = 512;
    1405:	67 66 8b 45 08       	mov    0x8(%di),%ax
    140a:	66 c1 e0 02          	shl    $0x2,%ax
    140e:	66 89 c2             	mov    %ax,%dx
    1411:	66 c1 e2 04          	shl    $0x4,%dx
    1415:	66 01 d0             	add    %dx,%ax
    1418:	66 05 10 32          	add    $0x3210,%ax
    141c:	00 00                	add    %al,(%eax)
    141e:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    1425:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    1427:	67 66 8b 45 08       	mov    0x8(%di),%ax
    142c:	66 c1 e0 02          	shl    $0x2,%ax
    1430:	66 89 c2             	mov    %ax,%dx
    1433:	66 c1 e2 04          	shl    $0x4,%dx
    1437:	66 01 d0             	add    %dx,%ax
    143a:	67 66 8d 90 10 32    	lea    0x3210(%bx,%si),%dx
    1440:	00 00                	add    %al,(%eax)
    1442:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1447:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 5;
    144c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1451:	66 c1 e0 02          	shl    $0x2,%ax
    1455:	66 89 c2             	mov    %ax,%dx
    1458:	66 c1 e2 04          	shl    $0x4,%dx
    145c:	66 01 d0             	add    %dx,%ax
    145f:	66 05 20 32          	add    $0x3220,%ax
    1463:	00 00                	add    %al,(%eax)
    1465:	67 66 c7 00 05 00    	movw   $0x5,(%bx,%si)
    146b:	00 00                	add    %al,(%eax)
}
    146d:	66 5d                	pop    %bp
    146f:	66 c3                	retw   

00001471 <Set_PCB>:
void Set_PCB(){
    1471:	66 55                	push   %bp
    1473:	66 89 e5             	mov    %sp,%bp
    1476:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    147a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1481:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    1483:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    148a:	00 00                	add    %al,(%eax)
    148c:	eb 27                	jmp    14b5 <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    148e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1493:	66 c1 e0 02          	shl    $0x2,%ax
    1497:	66 89 c2             	mov    %ax,%dx
    149a:	66 c1 e2 04          	shl    $0x4,%dx
    149e:	66 01 d0             	add    %dx,%ax
    14a1:	66 05 10 32          	add    $0x3210,%ax
    14a5:	00 00                	add    %al,(%eax)
    14a7:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    14ae:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 5;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    14b0:	67 66 ff 45 fc       	incw   -0x4(%di)
    14b5:	67 66 83 7d fc 07    	cmpw   $0x7,-0x4(%di)
    14bb:	7e d1                	jle    148e <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    14bd:	66 c9                	leavew 
    14bf:	66 c3                	retw   

000014c1 <sys_schedule>:
void sys_schedule(){
    14c1:	66 55                	push   %bp
    14c3:	66 89 e5             	mov    %sp,%bp
    14c6:	66 83 ec 0c          	sub    $0xc,%sp
    int i,j;
    int index = -1;
    14ca:	67 66 c7 45 f4 ff ff 	movw   $0xffff,-0xc(%di)
    14d1:	ff                   	(bad)  
    14d2:	ff 66 a1             	jmp    *-0x5f(%esi)
    i = _CurrentProg - PCB_list;
    14d5:	00 34 66             	add    %dh,(%esi,%eiz,2)
    14d8:	89 c2                	mov    %eax,%edx
    14da:	66 b8 e0 31          	mov    $0x31e0,%ax
    14de:	00 00                	add    %al,(%eax)
    14e0:	66 29 c2             	sub    %ax,%dx
    14e3:	66 89 d0             	mov    %dx,%ax
    14e6:	66 c1 f8 02          	sar    $0x2,%ax
    14ea:	66 89 c2             	mov    %ax,%dx
    14ed:	66 89 d0             	mov    %dx,%ax
    14f0:	66 01 c0             	add    %ax,%ax
    14f3:	66 01 d0             	add    %dx,%ax
    14f6:	67 66 8d 14          	lea    (%si),%dx
    14fa:	85 00                	test   %eax,(%eax)
    14fc:	00 00                	add    %al,(%eax)
    14fe:	00 66 01             	add    %ah,0x1(%esi)
    1501:	d0 66 89             	shlb   -0x77(%esi)
    1504:	c2 66 c1             	ret    $0xc166
    1507:	e2 08                	loop   1511 <sys_schedule+0x50>
    1509:	66 01 d0             	add    %dx,%ax
    150c:	66 89 c2             	mov    %ax,%dx
    150f:	66 c1 e2 10          	shl    $0x10,%dx
    1513:	66 01 d0             	add    %dx,%ax
    1516:	66 f7 d8             	neg    %ax
    1519:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    for(j = 0;j < PCB_NUMMER;j ++){
    151e:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    1525:	00 00                	add    %al,(%eax)
    1527:	e9 a6 00 67 66       	jmp    666715d2 <_end+0x6666e1ce>
        if(i == PCB_NUMMER - 1){
    152c:	83 7d fc 07          	cmpl   $0x7,-0x4(%ebp)
    1530:	75 14                	jne    1546 <sys_schedule+0x85>
            _CurrentProg = PCB_list + 1;
    1532:	66 c7 06 00 34       	movw   $0x3400,(%esi)
    1537:	24 32                	and    $0x32,%al
    1539:	00 00                	add    %al,(%eax)
            i = 1;
    153b:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    1542:	00 00                	add    %al,(%eax)
    1544:	eb 11                	jmp    1557 <sys_schedule+0x96>
        }
        else{
            _CurrentProg ++;
    1546:	66 a1 00 34 66 83    	mov    0x83663400,%ax
    154c:	c0 44 66 a3 00       	rolb   $0x0,-0x5d(%esi,%eiz,2)
    1551:	34 67                	xor    $0x67,%al
            i ++;
    1553:	66 ff 45 fc          	incw   -0x4(%ebp)
        }
        if(_CurrentProg -> prg_status == RUN){
    1557:	66 a1 00 34 67 66    	mov    0x66673400,%ax
    155d:	8b 40 38             	mov    0x38(%eax),%eax
    1560:	66 83 f8 01          	cmp    $0x1,%ax
    1564:	75 03                	jne    1569 <sys_schedule+0xa8>
            return;
    1566:	e9 a2 00 66 a1       	jmp    a166160d <_end+0xa165e209>
        }
        if(_CurrentProg -> prg_status == READY && index == -1){
    156b:	00 34 67             	add    %dh,(%edi,%eiz,2)
    156e:	66 8b 40 38          	mov    0x38(%eax),%ax
    1572:	66 83 f8 03          	cmp    $0x3,%ax
    1576:	75 53                	jne    15cb <sys_schedule+0x10a>
    1578:	67 66 83 7d f4 ff    	cmpw   $0xffff,-0xc(%di)
    157e:	75 4b                	jne    15cb <sys_schedule+0x10a>
           index = _CurrentProg - PCB_list;
    1580:	66 a1 00 34 66 89    	mov    0x89663400,%ax
    1586:	c2 66 b8             	ret    $0xb866
    1589:	e0 31                	loopne 15bc <sys_schedule+0xfb>
    158b:	00 00                	add    %al,(%eax)
    158d:	66 29 c2             	sub    %ax,%dx
    1590:	66 89 d0             	mov    %dx,%ax
    1593:	66 c1 f8 02          	sar    $0x2,%ax
    1597:	66 89 c2             	mov    %ax,%dx
    159a:	66 89 d0             	mov    %dx,%ax
    159d:	66 01 c0             	add    %ax,%ax
    15a0:	66 01 d0             	add    %dx,%ax
    15a3:	67 66 8d 14          	lea    (%si),%dx
    15a7:	85 00                	test   %eax,(%eax)
    15a9:	00 00                	add    %al,(%eax)
    15ab:	00 66 01             	add    %ah,0x1(%esi)
    15ae:	d0 66 89             	shlb   -0x77(%esi)
    15b1:	c2 66 c1             	ret    $0xc166
    15b4:	e2 08                	loop   15be <sys_schedule+0xfd>
    15b6:	66 01 d0             	add    %dx,%ax
    15b9:	66 89 c2             	mov    %ax,%dx
    15bc:	66 c1 e2 10          	shl    $0x10,%dx
    15c0:	66 01 d0             	add    %dx,%ax
    15c3:	66 f7 d8             	neg    %ax
    15c6:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
}
void sys_schedule(){
    int i,j;
    int index = -1;
    i = _CurrentProg - PCB_list;
    for(j = 0;j < PCB_NUMMER;j ++){
    15cb:	67 66 ff 45 f8       	incw   -0x8(%di)
    15d0:	67 66 83 7d f8 07    	cmpw   $0x7,-0x8(%di)
    15d6:	0f 8e 50 ff 67 66    	jle    6668152c <_end+0x6667e128>
        }
        if(_CurrentProg -> prg_status == READY && index == -1){
           index = _CurrentProg - PCB_list;
        }
    }
    if(index != -1){
    15dc:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
    15e0:	74 1f                	je     1601 <sys_schedule+0x140>
        _CurrentProg = PCB_list + index;
    15e2:	67 66 8b 45 f4       	mov    -0xc(%di),%ax
    15e7:	66 c1 e0 02          	shl    $0x2,%ax
    15eb:	66 89 c2             	mov    %ax,%dx
    15ee:	66 c1 e2 04          	shl    $0x4,%dx
    15f2:	66 01 d0             	add    %dx,%ax
    15f5:	66 05 e0 31          	add    $0x31e0,%ax
    15f9:	00 00                	add    %al,(%eax)
    15fb:	66 a3 00 34 eb 0a    	mov    %ax,0xaeb3400
        return;
    }
    _CurrentProg = PCB_list ;
    1601:	66 c7 06 00 34       	movw   $0x3400,(%esi)
    1606:	e0 31                	loopne 1639 <sys_bolocked+0x14>
    1608:	00 00                	add    %al,(%eax)
    return;
    160a:	90                   	nop
}
    160b:	66 c9                	leavew 
    160d:	66 c3                	retw   

0000160f <sys_exit>:
void sys_exit(){
    160f:	66 55                	push   %bp
    1611:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = EXIT;
    1614:	66 a1 00 34 67 66    	mov    0x66673400,%ax
    161a:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
}
    1621:	66 5d                	pop    %bp
    1623:	66 c3                	retw   

00001625 <sys_bolocked>:
void sys_bolocked(){
    1625:	66 55                	push   %bp
    1627:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = BLOCKED;
    162a:	66 a1 00 34 67 66    	mov    0x66673400,%ax
    1630:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
}
    1637:	66 5d                	pop    %bp
    1639:	66 c3                	retw   

0000163b <sys_run>:
void sys_run(){
    163b:	66 55                	push   %bp
    163d:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    1640:	66 a1 00 34 67 66    	mov    0x66673400,%ax
    1646:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    164d:	66 5d                	pop    %bp
    164f:	66 c3                	retw   

00001651 <sys_wait>:
void sys_wait(){
    1651:	66 55                	push   %bp
    1653:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = BLOCKED;
    1656:	66 a1 00 34 67 66    	mov    0x66673400,%ax
    165c:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
    _Schedule();
    1663:	66 e8 96 ec          	callw  2fd <_fork_user+0xb>
    1667:	ff                   	(bad)  
    1668:	ff 66 5d             	jmp    *0x5d(%esi)
}
    166b:	66 c3                	retw   

0000166d <do_fork>:
int do_fork(){
    166d:	66 55                	push   %bp
    166f:	66 89 e5             	mov    %sp,%bp
    1672:	66 83 ec 04          	sub    $0x4,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    1676:	67 66 c7 45 fc 24 32 	movw   $0x3224,-0x4(%di)
    167d:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN)    fork_prg = fork_prg + 1;
    167f:	eb 06                	jmp    1687 <do_fork+0x1a>
    1681:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    1687:	67 66 81 7d fc 00 34 	cmpw   $0x3400,-0x4(%di)
    168e:	00 00                	add    %al,(%eax)
    1690:	73 10                	jae    16a2 <do_fork+0x35>
    1692:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1697:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    169c:	66 83 f8 01          	cmp    $0x1,%ax
    16a0:	74 df                	je     1681 <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    16a2:	67 66 81 7d fc bc 33 	cmpw   $0x33bc,-0x4(%di)
    16a9:	00 00                	add    %al,(%eax)
    16ab:	76 0f                	jbe    16bc <do_fork+0x4f>
    16ad:	66 a1 00 34 67 66    	mov    0x66673400,%ax
    16b3:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    16b9:	e9 dc 01 66 e8       	jmp    e866189a <_end+0xe865e496>
    else{
        _Schedule_once();
    16be:	23 ec                	and    %esp,%ebp
    16c0:	ff                   	(bad)  
    16c1:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    16c4:	ec                   	in     (%dx),%al
    16c5:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    16c6:	66 a1 00 34 67 66    	mov    0x66673400,%ax
    16cc:	ff 75 fc             	pushl  -0x4(%ebp)
    16cf:	66 50                	push   %ax
    16d1:	66 e8 3f 02          	callw  1914 <counter+0x63>
    16d5:	00 00                	add    %al,(%eax)
    16d7:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    16db:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    16df:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    16e4:	66 b8 e0 31          	mov    $0x31e0,%ax
    16e8:	00 00                	add    %al,(%eax)
    16ea:	66 29 c2             	sub    %ax,%dx
    16ed:	66 89 d0             	mov    %dx,%ax
    16f0:	66 c1 f8 02          	sar    $0x2,%ax
    16f4:	66 89 c2             	mov    %ax,%dx
    16f7:	66 89 d0             	mov    %dx,%ax
    16fa:	66 01 c0             	add    %ax,%ax
    16fd:	66 01 d0             	add    %dx,%ax
    1700:	67 66 8d 14          	lea    (%si),%dx
    1704:	85 00                	test   %eax,(%eax)
    1706:	00 00                	add    %al,(%eax)
    1708:	00 66 01             	add    %ah,0x1(%esi)
    170b:	d0 66 89             	shlb   -0x77(%esi)
    170e:	c2 66 c1             	ret    $0xc166
    1711:	e2 08                	loop   171b <do_fork+0xae>
    1713:	66 01 d0             	add    %dx,%ax
    1716:	66 89 c2             	mov    %ax,%dx
    1719:	66 c1 e2 10          	shl    $0x10,%dx
    171d:	66 01 d0             	add    %dx,%ax
    1720:	66 f7 d8             	neg    %ax
    1723:	66 89 c2             	mov    %ax,%dx
    1726:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    172b:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    1730:	66 a1 00 34 66 89    	mov    0x89663400,%ax
    1736:	c2 66 b8             	ret    $0xb866
    1739:	e0 31                	loopne 176c <do_fork+0xff>
    173b:	00 00                	add    %al,(%eax)
    173d:	66 29 c2             	sub    %ax,%dx
    1740:	66 89 d0             	mov    %dx,%ax
    1743:	66 c1 f8 02          	sar    $0x2,%ax
    1747:	66 89 c2             	mov    %ax,%dx
    174a:	66 89 d0             	mov    %dx,%ax
    174d:	66 01 c0             	add    %ax,%ax
    1750:	66 01 d0             	add    %dx,%ax
    1753:	67 66 8d 14          	lea    (%si),%dx
    1757:	85 00                	test   %eax,(%eax)
    1759:	00 00                	add    %al,(%eax)
    175b:	00 66 01             	add    %ah,0x1(%esi)
    175e:	d0 66 89             	shlb   -0x77(%esi)
    1761:	c2 66 c1             	ret    $0xc166
    1764:	e2 08                	loop   176e <do_fork+0x101>
    1766:	66 01 d0             	add    %dx,%ax
    1769:	66 89 c2             	mov    %ax,%dx
    176c:	66 c1 e2 10          	shl    $0x10,%dx
    1770:	66 01 d0             	add    %dx,%ax
    1773:	66 f7 d8             	neg    %ax
    1776:	66 89 c2             	mov    %ax,%dx
    1779:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    177e:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    1783:	66 a1 00 34 67 66    	mov    0x66673400,%ax
    1789:	8b 50 20             	mov    0x20(%eax),%edx
    178c:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1791:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    1796:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    179b:	66 b8 e0 31          	mov    $0x31e0,%ax
    179f:	00 00                	add    %al,(%eax)
    17a1:	66 29 c2             	sub    %ax,%dx
    17a4:	66 89 d0             	mov    %dx,%ax
    17a7:	66 c1 f8 02          	sar    $0x2,%ax
    17ab:	66 89 c2             	mov    %ax,%dx
    17ae:	66 89 d0             	mov    %dx,%ax
    17b1:	66 01 c0             	add    %ax,%ax
    17b4:	66 01 d0             	add    %dx,%ax
    17b7:	67 66 8d 14          	lea    (%si),%dx
    17bb:	85 00                	test   %eax,(%eax)
    17bd:	00 00                	add    %al,(%eax)
    17bf:	00 66 01             	add    %ah,0x1(%esi)
    17c2:	d0 66 89             	shlb   -0x77(%esi)
    17c5:	c2 66 c1             	ret    $0xc166
    17c8:	e2 08                	loop   17d2 <do_fork+0x165>
    17ca:	66 01 d0             	add    %dx,%ax
    17cd:	66 89 c2             	mov    %ax,%dx
    17d0:	66 c1 e2 10          	shl    $0x10,%dx
    17d4:	66 01 d0             	add    %dx,%ax
    17d7:	66 f7 d8             	neg    %ax
    17da:	66 83 c0 02          	add    $0x2,%ax
    17de:	66 c1 e0 0c          	shl    $0xc,%ax
    17e2:	66 89 c2             	mov    %ax,%dx
    17e5:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    17ea:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    17ef:	66 a1 00 34 67 66    	mov    0x66673400,%ax
    17f5:	8b 50 30             	mov    0x30(%eax),%edx
    17f8:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    17fd:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    1802:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1807:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    180e:	00 00                	add    %al,(%eax)
       // __asm__("enter $0,$0");
        _Schedule_once();
    1810:	66 e8 cf ea          	callw  2e3 <S+0x14>
    1814:	ff                   	(bad)  
    1815:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    1818:	ec                   	in     (%dx),%al
    1819:	06                   	push   %es
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    181a:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    181f:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1824:	66 a1 00 34 67 66    	mov    0x66673400,%ax
    182a:	8b 50 28             	mov    0x28(%eax),%edx
    182d:	66 a1 00 34 67 66    	mov    0x66673400,%ax
    1833:	8b 40 24             	mov    0x24(%eax),%eax
    1836:	66 51                	push   %cx
    1838:	66 52                	push   %dx
    183a:	66 50                	push   %ax
    183c:	66 e8 93 e9          	callw  1d3 <Message31+0x4>
    1840:	ff                   	(bad)  
    1841:	ff 66 83             	jmp    *-0x7d(%esi)
    1844:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
         __asm__("add $6,%esp");
    1847:	83 c4 06             	add    $0x6,%esp
        fork_prg -> ip = _CurrentProg -> ip;
    184a:	66 a1 00 34 67 66    	mov    0x66673400,%ax
    1850:	8b 50 2c             	mov    0x2c(%eax),%edx
    1853:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1858:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    185d:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1862:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1868:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    186a:	66 a1 00 34 67 66    	mov    0x66673400,%ax
    1870:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1873:	75 08                	jne    187d <do_fork+0x210>
            return 0;
    1875:	66 b8 00 00          	mov    $0x0,%ax
    1879:	00 00                	add    %al,(%eax)
    187b:	eb 1b                	jmp    1898 <do_fork+0x22b>
        }
        _CurrentProg -> eax = fork_prg -> id;
    187d:	66 a1 00 34 67 66    	mov    0x66673400,%ax
    1883:	8b 55 fc             	mov    -0x4(%ebp),%edx
    1886:	67 66 8b 52 3c       	mov    0x3c(%bp,%si),%dx
    188b:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    188f:	66 a1 00 34 67 66    	mov    0x66673400,%ax
    1895:	8b 00                	mov    (%eax),%eax
    1897:	90                   	nop
    }
}
    1898:	66 c9                	leavew 
    189a:	66 c3                	retw   

0000189c <thread_join>:
void thread_join(){
    189c:	66 55                	push   %bp
    189e:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    18a1:	90                   	nop
    18a2:	66 e8 09 00          	callw  18af <thread_join+0x13>
    18a6:	00 00                	add    %al,(%eax)
    18a8:	66 85 c0             	test   %ax,%ax
    18ab:	75 f5                	jne    18a2 <thread_join+0x6>
    }
}
    18ad:	66 5d                	pop    %bp
    18af:	66 c3                	retw   

000018b1 <counter>:
int counter(){
    18b1:	66 55                	push   %bp
    18b3:	66 89 e5             	mov    %sp,%bp
    18b6:	66 83 ec 08          	sub    $0x8,%sp
    int i = 0;
    18ba:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    18c1:	00 00                	add    %al,(%eax)
    int count = 0;
    18c3:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    18ca:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER - 1;i ++){
    18cc:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    18d3:	00 00                	add    %al,(%eax)
    18d5:	eb 2e                	jmp    1905 <counter+0x54>
        if(PCB_list[i].prg_status == 1){
    18d7:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    18dc:	66 c1 e0 02          	shl    $0x2,%ax
    18e0:	66 89 c2             	mov    %ax,%dx
    18e3:	66 c1 e2 04          	shl    $0x4,%dx
    18e7:	66 01 d0             	add    %dx,%ax
    18ea:	66 05 10 32          	add    $0x3210,%ax
    18ee:	00 00                	add    %al,(%eax)
    18f0:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    18f5:	66 83 f8 01          	cmp    $0x1,%ax
    18f9:	75 05                	jne    1900 <counter+0x4f>
            count ++;
    18fb:	67 66 ff 45 f8       	incw   -0x8(%di)
    }
}
int counter(){
    int i = 0;
    int count = 0;
    for(i = 0;i < PCB_NUMMER - 1;i ++){
    1900:	67 66 ff 45 fc       	incw   -0x4(%di)
    1905:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    190b:	7e ca                	jle    18d7 <counter+0x26>
        if(PCB_list[i].prg_status == 1){
            count ++;
        }
    }
    return count;
    190d:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    1912:	66 c9                	leavew 
    1914:	66 c3                	retw   

00001916 <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    1916:	66 55                	push   %bp
    1918:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    191b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1920:	67 66 8b 10          	mov    (%bx,%si),%dx
    1924:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1929:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    192d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1932:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    1937:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    193c:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    1941:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1946:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    194b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1950:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    1955:	67 66 8b 45 08       	mov    0x8(%di),%ax
    195a:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    195f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1964:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    1969:	67 66 8b 45 08       	mov    0x8(%di),%ax
    196e:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    1973:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1978:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    197d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1982:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    1987:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    198c:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    1991:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1996:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    199b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    19a0:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    19a5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19aa:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    19af:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    19b4:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    19b9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19be:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    19c3:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    19c8:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    19cd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19d2:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    19d7:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    19dc:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    19e1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19e6:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    19eb:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    19f0:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    19f5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19fa:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    19ff:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a04:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    1a09:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a0e:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    1a13:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a18:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    1a1d:	66 5d                	pop    %bp
    1a1f:	66 c3                	retw   

00001a21 <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    1a21:	66 55                	push   %bp
    1a23:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    1a26:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a2b:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1a30:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a35:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    1a3a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a3f:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    1a44:	66 51                	push   %cx
    1a46:	66 52                	push   %dx
    1a48:	66 50                	push   %ax
    1a4a:	66 e8 85 e7          	callw  1d3 <Message31+0x4>
    1a4e:	ff                   	(bad)  
    1a4f:	ff 66 83             	jmp    *-0x7d(%esi)
    1a52:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    1a55:	c9                   	leave  
    1a56:	66 c3                	retw   

00001a58 <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    1a58:	66 55                	push   %bp
    1a5a:	66 89 e5             	mov    %sp,%bp
    1a5d:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    1a61:	66 e8 8b e8          	callw  2f0 <_Schedule_once+0xb>
    1a65:	ff                   	(bad)  
    1a66:	ff 67 66             	jmp    *0x66(%edi)
    1a69:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    1a6c:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    1a71:	66 c9                	leavew 
    1a73:	66 c3                	retw   

00001a75 <wait>:
void wait(){
    1a75:	66 55                	push   %bp
    1a77:	66 89 e5             	mov    %sp,%bp
    _wait();
    1a7a:	66 e8 8e e8          	callw  30c <_Schedule+0xd>
    1a7e:	ff                   	(bad)  
    1a7f:	ff 66 5d             	jmp    *0x5d(%esi)
    1a82:	66 c3                	retw   
