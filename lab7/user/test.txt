
test.elf:     file format elf32-i386


Disassembly of section .text:

00000100 <test>:
     100:	8c c8                	mov    %cs,%eax
     102:	8e d8                	mov    %eax,%ds
     104:	8e d0                	mov    %eax,%ss
     106:	bc 00 01 cd 33       	mov    $0x33cd0100,%esp
     10b:	cd 39                	int    $0x39
     10d:	cd 38                	int    $0x38
     10f:	eb fe                	jmp    10f <test+0xf>
     111:	66 90                	xchg   %ax,%ax
     113:	66 90                	xchg   %ax,%ax
     115:	66 90                	xchg   %ax,%ax
     117:	66 90                	xchg   %ax,%ax
     119:	66 90                	xchg   %ax,%ax
     11b:	66 90                	xchg   %ax,%ax
     11d:	66 90                	xchg   %ax,%ax
     11f:	90                   	nop

00000120 <count>:
     120:	08 2d 00 00 00 00    	or     %ch,0x0

00000121 <alpha>:
     121:	2d 00 00 00 00       	sub    $0x0,%eax

00000122 <int_09_saved>:
     122:	00 00                	add    %al,(%eax)
	...

00000126 <program_saved>:
     126:	70 00                	jo     128 <program_saved+0x2>
	...

0000012a <ds_saved>:
     12a:	7c 00                	jl     12c <ds_saved+0x2>
	...

0000012e <return_save>:
     12e:	88 00                	mov    %al,(%eax)

00000130 <esi_save>:
     130:	96                   	xchg   %eax,%esi
     131:	00 00                	add    %al,(%eax)
	...

00000134 <temp>:
     134:	e8 03 b4 00 00       	call   b53c <_end+0x8858>

00000136 <kernelesp_saved>:
     136:	b4 00                	mov    $0x0,%ah
	...

0000013a <esp_saved_inkernel>:
     13a:	c8 00 00 00          	enter  $0x0,$0x0

0000013e <esp_saved_in_user>:
     13e:	f0 00 00             	lock add %al,(%eax)
	...

00000142 <ss_saved_in_user>:
     142:	2c 01                	sub    $0x1,%al
	...

00000146 <color>:
     146:	01 c2                	add    %eax,%edx

00000147 <ss_saved_fork>:
     147:	c2 01 00             	ret    $0x1
	...

0000014b <retaddr>:
     14b:	58                   	pop    %eax
     14c:	02 00                	add    (%eax),%al
	...

0000014f <Message31>:
     14f:	74 69                	je     1ba <_readinput+0x9>
     151:	6d                   	insl   (%dx),%es:(%edi)
     152:	65 3a 20             	cmp    %gs:(%eax),%ah

00000155 <_sys_stack_copy>:
     155:	c8 00 00 00          	enter  $0x0,$0x0
     159:	8e d0                	mov    %eax,%ss
     15b:	60                   	pusha  
     15c:	1e                   	push   %ds
     15d:	8b 46 06             	mov    0x6(%esi),%eax
     160:	8b 56 0a             	mov    0xa(%esi),%edx
     163:	8b 4e 0e             	mov    0xe(%esi),%ecx
     166:	8c db                	mov    %ds,%ebx

00000168 <while_loop1>:
     168:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
     16e:	8e d8                	mov    %eax,%ds
     170:	67 8b 1a             	mov    (%bp,%si),%ebx
     173:	8e d9                	mov    %ecx,%ds
     175:	67 89 1a             	mov    %ebx,(%bp,%si)
     178:	83 c2 02             	add    $0x2,%edx
     17b:	eb eb                	jmp    168 <while_loop1>

0000017d <end_for_copy>:
     17d:	1f                   	pop    %ds
     17e:	61                   	popa   
     17f:	c9                   	leave  
     180:	66 5a                	pop    %dx
     182:	ff e2                	jmp    *%edx

00000184 <_clearscreen>:
     184:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     189:	66 5a                	pop    %dx
     18b:	ff e2                	jmp    *%edx

0000018d <_printchar>:
     18d:	c8 00 00 00          	enter  $0x0,$0x0
     191:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
     196:	57                   	push   %edi
     197:	66 8b 4e 06          	mov    0x6(%esi),%cx
     19b:	66 8b 7e 0a          	mov    0xa(%esi),%di
     19f:	66 8b 56 0e          	mov    0xe(%esi),%dx
     1a3:	88 d5                	mov    %dl,%ch
     1a5:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
     1ac:	00 66 5a             	add    %ah,0x5a(%esi)
     1af:	ff e2                	jmp    *%edx

000001b1 <_readinput>:
     1b1:	c8 04 00 00          	enter  $0x4,$0x0
     1b5:	b4 00                	mov    $0x0,%ah
     1b7:	cd 16                	int    $0x16
     1b9:	b4 00                	mov    $0x0,%ah
     1bb:	66 67 89 04          	mov    %ax,(%si)
     1bf:	24 66                	and    $0x66,%al
     1c1:	67 8b 04             	mov    (%si),%eax
     1c4:	24 c9                	and    $0xc9,%al
     1c6:	66 5a                	pop    %dx
     1c8:	ff e2                	jmp    *%edx

000001ca <_showchar>:
     1ca:	c8 00 00 00          	enter  $0x0,$0x0
     1ce:	50                   	push   %eax
     1cf:	53                   	push   %ebx
     1d0:	8b 46 06             	mov    0x6(%esi),%eax
     1d3:	b4 0e                	mov    $0xe,%ah
     1d5:	b3 00                	mov    $0x0,%bl
     1d7:	cd 10                	int    $0x10
     1d9:	5b                   	pop    %ebx
     1da:	58                   	pop    %eax
     1db:	c9                   	leave  
     1dc:	66 5a                	pop    %dx
     1de:	ff e2                	jmp    *%edx

000001e0 <_setPoint>:
     1e0:	c8 00 00 00          	enter  $0x0,$0x0
     1e4:	53                   	push   %ebx
     1e5:	b7 00                	mov    $0x0,%bh
     1e7:	8a 77 06             	mov    0x6(%edi),%dh
     1ea:	8a 57 0a             	mov    0xa(%edi),%dl
     1ed:	b4 02                	mov    $0x2,%ah
     1ef:	cd 10                	int    $0x10
     1f1:	5b                   	pop    %ebx
     1f2:	c9                   	leave  
     1f3:	66 5a                	pop    %dx
     1f5:	ff e2                	jmp    *%edx

000001f7 <_loadP>:
     1f7:	c8 00 00 00          	enter  $0x0,$0x0
     1fb:	60                   	pusha  
     1fc:	06                   	push   %es
     1fd:	1e                   	push   %ds
     1fe:	8c c8                	mov    %cs,%eax
     200:	8e d8                	mov    %eax,%ds
     202:	8b 46 0e             	mov    0xe(%esi),%eax
     205:	8e c0                	mov    %eax,%es
     207:	b2 00                	mov    $0x0,%dl
     209:	8b 46 0a             	mov    0xa(%esi),%eax
     20c:	b3 12                	mov    $0x12,%bl
     20e:	f6 f3                	div    %bl
     210:	88 e1                	mov    %ah,%cl
     212:	30 e4                	xor    %ah,%ah
     214:	b3 02                	mov    $0x2,%bl
     216:	f6 f3                	div    %bl
     218:	88 e6                	mov    %ah,%dh
     21a:	88 c5                	mov    %al,%ch
     21c:	8a 46 06             	mov    0x6(%esi),%al
     21f:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
     224:	cd 13                	int    $0x13
     226:	1f                   	pop    %ds
     227:	07                   	pop    %es
     228:	61                   	popa   
     229:	c9                   	leave  
     22a:	66 5a                	pop    %dx
     22c:	ff e2                	jmp    *%edx

0000022e <_RunProgress>:
     22e:	c8 00 00 00          	enter  $0x0,$0x0
     232:	8c c8                	mov    %cs,%eax
     234:	8e d8                	mov    %eax,%ds
     236:	8e c0                	mov    %eax,%es
     238:	8b 5e 06             	mov    0x6(%esi),%ebx
     23b:	c7 06 26 01 00 01    	movl   $0x1000126,(%esi)
     241:	89 1e                	mov    %ebx,(%esi)
     243:	28 01                	sub    %al,(%ecx)
     245:	66 89 26             	mov    %sp,(%esi)
     248:	3a 01                	cmp    (%ecx),%al
     24a:	26 ff 1e             	lcall  *%es:(%esi)
     24d:	26 01 8c c8 8e d8 8e 	add    %ecx,%es:-0x3f712772(%eax,%ecx,8)
     254:	c0 

0000024f <S>:
     24f:	8c c8                	mov    %cs,%eax
     251:	8e d8                	mov    %eax,%ds
     253:	8e c0                	mov    %eax,%es
     255:	8e d0                	mov    %eax,%ss
     257:	66 8b 26             	mov    (%esi),%sp
     25a:	3a 01                	cmp    (%ecx),%al
     25c:	b4 00                	mov    $0x0,%ah
     25e:	cd 16                	int    $0x16
     260:	c9                   	leave  
     261:	66 5a                	pop    %dx
     263:	ff e2                	jmp    *%edx

00000265 <_Schedule_once>:
     265:	c8 00 00 00          	enter  $0x0,$0x0
     269:	6a 00                	push   $0x0
     26b:	cd 41                	int    $0x41
     26d:	c9                   	leave  
     26e:	66 5a                	pop    %dx
     270:	ff e2                	jmp    *%edx

00000272 <_fork_user>:
     272:	c8 00 00 00          	enter  $0x0,$0x0
     276:	6a 00                	push   $0x0
     278:	cd 39                	int    $0x39
     27a:	c9                   	leave  
     27b:	66 5a                	pop    %dx
     27d:	ff e2                	jmp    *%edx

0000027f <_Schedule>:
     27f:	c8 00 00 00          	enter  $0x0,$0x0
     283:	16                   	push   %ss
     284:	6a 00                	push   $0x0
     286:	cd 42                	int    $0x42
     288:	17                   	pop    %ss
     289:	c9                   	leave  
     28a:	66 5a                	pop    %dx
     28c:	ff e2                	jmp    *%edx

0000028e <_wait>:
     28e:	c8 00 00 00          	enter  $0x0,$0x0
     292:	6a 00                	push   $0x0
     294:	cd 43                	int    $0x43
     296:	c9                   	leave  
     297:	66 5a                	pop    %dx
     299:	ff e2                	jmp    *%edx

0000029b <_SetINT20h>:
     29b:	fa                   	cli    
     29c:	1e                   	push   %ds
     29d:	06                   	push   %es
     29e:	8c c8                	mov    %cs,%eax
     2a0:	8e d8                	mov    %eax,%ds
     2a2:	8e c0                	mov    %eax,%es
     2a4:	8c 16                	mov    %ss,(%esi)
     2a6:	42                   	inc    %edx
     2a7:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     2ad:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     2b1:	26 3a 01             	cmp    %es:(%ecx),%al
     2b4:	53                   	push   %ebx
     2b5:	51                   	push   %ecx
     2b6:	52                   	push   %edx
     2b7:	b4 01                	mov    $0x1,%ah
     2b9:	cd 16                	int    $0x16
     2bb:	5a                   	pop    %edx
     2bc:	59                   	pop    %ecx
     2bd:	5b                   	pop    %ebx
     2be:	8e 16                	mov    (%esi),%ss
     2c0:	42                   	inc    %edx
     2c1:	01 66 8b             	add    %esp,-0x75(%esi)
     2c4:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     2c8:	1f                   	pop    %ds
     2c9:	74 0a                	je     2d5 <going_on>
     2cb:	50                   	push   %eax
     2cc:	b4 00                	mov    $0x0,%ah
     2ce:	cd 16                	int    $0x16
     2d0:	58                   	pop    %eax
     2d1:	fb                   	sti    
     2d2:	cd 38                	int    $0x38
     2d4:	cf                   	iret   

000002d5 <going_on>:
     2d5:	fb                   	sti    
     2d6:	cf                   	iret   

000002d7 <_SetINT08h_turn_around>:
     2d7:	fa                   	cli    
     2d8:	e8 ef 04 6a 00       	call   6a07cc <_end+0x69dae8>
     2dd:	e8 72 0c e8 5b       	call   5be80f54 <_end+0x5be7e270>
     2e2:	05 b0 20 e6 20       	add    $0x20e620b0,%eax
     2e7:	e6 a0                	out    %al,$0xa0
     2e9:	fb                   	sti    
     2ea:	cf                   	iret   

000002eb <_SetINT08h>:
     2eb:	60                   	pusha  
     2ec:	0f a8                	push   %gs
     2ee:	1e                   	push   %ds
     2ef:	06                   	push   %es
     2f0:	16                   	push   %ss
     2f1:	8c c8                	mov    %cs,%eax
     2f3:	8e c0                	mov    %eax,%es
     2f5:	8e d8                	mov    %eax,%ds
     2f7:	8e d0                	mov    %eax,%ss
     2f9:	fe 0e                	decb   (%esi)
     2fb:	20 01                	and    %al,(%ecx)
     2fd:	75 4f                	jne    34e <end>

000002ff <notc>:
     2ff:	80 3e 21             	cmpb   $0x21,(%esi)
     302:	01 2d 75 07 c6 06    	add    %ebp,0x6c60775
     308:	21 01                	and    %eax,(%ecx)
     30a:	5c                   	pop    %esp
     30b:	eb 2a                	jmp    337 <show>

0000030d <changleft>:
     30d:	80 3e 21             	cmpb   $0x21,(%esi)
     310:	01 5c 75 07          	add    %ebx,0x7(%ebp,%esi,2)
     314:	c6 06 21             	movb   $0x21,(%esi)
     317:	01 7c eb 1c          	add    %edi,0x1c(%ebx,%ebp,8)

0000031b <changright>:
     31b:	80 3e 21             	cmpb   $0x21,(%esi)
     31e:	01 7c 75 07          	add    %edi,0x7(%ebp,%esi,2)
     322:	c6 06 21             	movb   $0x21,(%esi)
     325:	01 2f                	add    %ebp,(%edi)
     327:	eb 0e                	jmp    337 <show>

00000329 <changheng>:
     329:	80 3e 21             	cmpb   $0x21,(%esi)
     32c:	01 2f                	add    %ebp,(%edi)
     32e:	75 cf                	jne    2ff <notc>
     330:	c6 06 21             	movb   $0x21,(%esi)
     333:	01 2d eb 00 b9 00    	add    %ebp,0xb900eb

00000337 <show>:
     337:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     33c:	b4 09                	mov    $0x9,%ah
     33e:	8a 26                	mov    (%esi),%ah
     340:	46                   	inc    %esi
     341:	01 a0 21 01 65 a3    	add    %esp,-0x5c9afedf(%eax)
     347:	8e 00                	mov    (%eax),%es
     349:	c6 06 20             	movb   $0x20,(%esi)
     34c:	01 08                	add    %ecx,(%eax)

0000034e <end>:
     34e:	b0 20                	mov    $0x20,%al
     350:	e6 20                	out    %al,$0x20
     352:	e6 a0                	out    %al,$0xa0
     354:	17                   	pop    %ss
     355:	07                   	pop    %es
     356:	1f                   	pop    %ds
     357:	0f a9                	pop    %gs
     359:	61                   	popa   
     35a:	fb                   	sti    
     35b:	cf                   	iret   

0000035c <_SetINT09h>:
     35c:	fa                   	cli    
     35d:	1e                   	push   %ds
     35e:	06                   	push   %es
     35f:	8c c8                	mov    %cs,%eax
     361:	8e d8                	mov    %eax,%ds
     363:	8e c0                	mov    %eax,%es
     365:	8e d0                	mov    %eax,%ss
     367:	8c 16                	mov    %ss,(%esi)
     369:	42                   	inc    %edx
     36a:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     370:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     374:	26 3a 01             	cmp    %es:(%ecx),%al
     377:	60                   	pusha  
     378:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     37d:	8a 26                	mov    (%esi),%ah
     37f:	46                   	inc    %esi
     380:	01 b0 4f 65 a3 78    	add    %esi,0x78a3654f(%eax)
     386:	00 b0 55 65 a3 7a    	add    %dh,0x7aa36555(%eax)
     38c:	00 b0 43 65 a3 7c    	add    %dh,0x7ca36543(%eax)
     392:	00 b0 48 65 a3 7e    	add    %dh,0x7ea36548(%eax)
     398:	00 b0 53 65 a3 80    	add    %dh,-0x7f5c9aad(%eax)
     39e:	00 b0 21 65 a3 82    	add    %dh,-0x7d5c9adf(%eax)
     3a4:	00 b0 4f 65 a3 84    	add    %dh,-0x7b5c9ab1(%eax)
     3aa:	00 b0 55 65 a3 86    	add    %dh,-0x795c9aab(%eax)
     3b0:	00 b0 43 65 a3 88    	add    %dh,-0x775c9abd(%eax)
     3b6:	00 b0 48 65 a3 8a    	add    %dh,-0x755c9ab8(%eax)
     3bc:	00 b0 21 65 a3 8c    	add    %dh,-0x735c9adf(%eax)
     3c2:	00 61 80             	add    %ah,-0x80(%ecx)
     3c5:	fc                   	cld    
     3c6:	06                   	push   %es
     3c7:	75 06                	jne    3cf <cont>
     3c9:	b4 01                	mov    $0x1,%ah
     3cb:	88 26                	mov    %ah,(%esi)
     3cd:	46                   	inc    %esi
     3ce:	01 fe                	add    %edi,%esi

000003cf <cont>:
     3cf:	fe 06                	incb   (%esi)
     3d1:	46                   	inc    %esi
     3d2:	01 8c c8 8e c0 fb 9c 	add    %ecx,-0x63043f72(%eax,%ecx,8)
     3d9:	26 ff 1e             	lcall  *%es:(%esi)
     3dc:	22 01                	and    (%ecx),%al
     3de:	8e 16                	mov    (%esi),%ss
     3e0:	42                   	inc    %edx
     3e1:	01 66 8b             	add    %esp,-0x75(%esi)
     3e4:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     3e8:	1f                   	pop    %ds
     3e9:	cf                   	iret   

000003ea <_SetINT33h>:
     3ea:	fa                   	cli    
     3eb:	c8 00 00 00          	enter  $0x0,$0x0
     3ef:	60                   	pusha  
     3f0:	1e                   	push   %ds
     3f1:	0f a8                	push   %gs
     3f3:	06                   	push   %es
     3f4:	8c c8                	mov    %cs,%eax
     3f6:	8e c0                	mov    %eax,%es
     3f8:	8e d8                	mov    %eax,%ds
     3fa:	8c 16                	mov    %ss,(%esi)
     3fc:	42                   	inc    %edx
     3fd:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     403:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     407:	26 3a 01             	cmp    %es:(%ecx),%al
     40a:	6a 00                	push   $0x0
     40c:	e8 bd 06 8e 16       	call   168e0ace <_end+0x168dddea>
     411:	42                   	inc    %edx
     412:	01 66 8b             	add    %esp,-0x75(%esi)
     415:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     419:	0f a9                	pop    %gs
     41b:	1f                   	pop    %ds
     41c:	61                   	popa   
     41d:	fb                   	sti    
     41e:	c9                   	leave  
     41f:	cf                   	iret   

00000420 <_SetINT34h>:
     420:	fa                   	cli    
     421:	c8 00 00 00          	enter  $0x0,$0x0
     425:	60                   	pusha  
     426:	1e                   	push   %ds
     427:	0f a8                	push   %gs
     429:	06                   	push   %es
     42a:	8c c8                	mov    %cs,%eax
     42c:	8e c0                	mov    %eax,%es
     42e:	8e d8                	mov    %eax,%ds
     430:	8c 16                	mov    %ss,(%esi)
     432:	42                   	inc    %edx
     433:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     439:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     43d:	26 3a 01             	cmp    %es:(%ecx),%al
     440:	6a 00                	push   $0x0
     442:	e8 37 07 8e 16       	call   168e0b7e <_end+0x168dde9a>
     447:	42                   	inc    %edx
     448:	01 66 8b             	add    %esp,-0x75(%esi)
     44b:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     44f:	0f a9                	pop    %gs
     451:	1f                   	pop    %ds
     452:	61                   	popa   
     453:	fb                   	sti    
     454:	c9                   	leave  
     455:	cf                   	iret   

00000456 <_SetINT35h>:
     456:	60                   	pusha  
     457:	1e                   	push   %ds
     458:	0f a8                	push   %gs
     45a:	06                   	push   %es
     45b:	8c c8                	mov    %cs,%eax
     45d:	8e c0                	mov    %eax,%es
     45f:	8e d8                	mov    %eax,%ds
     461:	8c 16                	mov    %ss,(%esi)
     463:	42                   	inc    %edx
     464:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     46a:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     46e:	26 3a 01             	cmp    %es:(%ecx),%al
     471:	6a 00                	push   $0x0
     473:	e8 e5 07 8e 16       	call   168e0c5d <_end+0x168ddf79>
     478:	42                   	inc    %edx
     479:	01 66 8b             	add    %esp,-0x75(%esi)
     47c:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     480:	0f a9                	pop    %gs
     482:	1f                   	pop    %ds
     483:	61                   	popa   
     484:	fb                   	sti    
     485:	cf                   	iret   

00000486 <_SetINT36h>:
     486:	60                   	pusha  
     487:	1e                   	push   %ds
     488:	0f a8                	push   %gs
     48a:	06                   	push   %es
     48b:	8c c8                	mov    %cs,%eax
     48d:	8e c0                	mov    %eax,%es
     48f:	8e d8                	mov    %eax,%ds
     491:	8c 16                	mov    %ss,(%esi)
     493:	42                   	inc    %edx
     494:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     49a:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     49e:	26 3a 01             	cmp    %es:(%ecx),%al
     4a1:	6a 00                	push   $0x0
     4a3:	e8 3b 08 8e 16       	call   168e0ce3 <_end+0x168ddfff>
     4a8:	42                   	inc    %edx
     4a9:	01 66 8b             	add    %esp,-0x75(%esi)
     4ac:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     4b0:	0f a9                	pop    %gs
     4b2:	1f                   	pop    %ds
     4b3:	61                   	popa   
     4b4:	fb                   	sti    
     4b5:	cf                   	iret   

000004b6 <_SetINT21h>:
     4b6:	c8 00 00 00          	enter  $0x0,$0x0
     4ba:	60                   	pusha  
     4bb:	1e                   	push   %ds
     4bc:	0f a8                	push   %gs
     4be:	06                   	push   %es
     4bf:	8c c8                	mov    %cs,%eax
     4c1:	8e c0                	mov    %eax,%es
     4c3:	8e d8                	mov    %eax,%ds
     4c5:	8b 46 08             	mov    0x8(%esi),%eax
     4c8:	80 fc 00             	cmp    $0x0,%ah
     4cb:	74 16                	je     4e3 <fn0>
     4cd:	80 fc 01             	cmp    $0x1,%ah
     4d0:	74 21                	je     4f3 <fn1>
     4d2:	80 fc 02             	cmp    $0x2,%ah
     4d5:	74 3d                	je     514 <fn2>
     4d7:	80 fc 03             	cmp    $0x3,%ah
     4da:	74 5f                	je     53b <fn3>
     4dc:	07                   	pop    %es
     4dd:	0f a9                	pop    %gs
     4df:	1f                   	pop    %ds
     4e0:	61                   	popa   
     4e1:	c9                   	leave  
     4e2:	cf                   	iret   

000004e3 <fn0>:
     4e3:	8b 46 0a             	mov    0xa(%esi),%eax
     4e6:	b4 0e                	mov    $0xe,%ah
     4e8:	b3 00                	mov    $0x0,%bl
     4ea:	cd 10                	int    $0x10
     4ec:	07                   	pop    %es
     4ed:	0f a9                	pop    %gs
     4ef:	1f                   	pop    %ds
     4f0:	61                   	popa   
     4f1:	c9                   	leave  
     4f2:	cf                   	iret   

000004f3 <fn1>:
     4f3:	66 83 ec 04          	sub    $0x4,%sp
     4f7:	b4 00                	mov    $0x0,%ah
     4f9:	cd 16                	int    $0x16
     4fb:	b4 00                	mov    $0x0,%ah
     4fd:	66 67 89 04          	mov    %ax,(%si)
     501:	24 66                	and    $0x66,%al
     503:	67 8b 04             	mov    (%si),%eax
     506:	24 66                	and    $0x66,%al
     508:	83 c4 04             	add    $0x4,%esp
     50b:	8e e0                	mov    %eax,%fs
     50d:	07                   	pop    %es
     50e:	0f a9                	pop    %gs
     510:	1f                   	pop    %ds
     511:	61                   	popa   
     512:	c9                   	leave  
     513:	cf                   	iret   

00000514 <fn2>:
     514:	66 83 ec 04          	sub    $0x4,%sp
     518:	b4 00                	mov    $0x0,%ah
     51a:	cd 16                	int    $0x16
     51c:	b4 00                	mov    $0x0,%ah
     51e:	66 67 89 04          	mov    %ax,(%si)
     522:	24 66                	and    $0x66,%al
     524:	67 8b 04             	mov    (%si),%eax
     527:	24 b4                	and    $0xb4,%al
     529:	0e                   	push   %cs
     52a:	b3 00                	mov    $0x0,%bl
     52c:	cd 10                	int    $0x10
     52e:	66 83 c4 04          	add    $0x4,%sp
     532:	8e e0                	mov    %eax,%fs
     534:	07                   	pop    %es
     535:	0f a9                	pop    %gs
     537:	1f                   	pop    %ds
     538:	61                   	popa   
     539:	c9                   	leave  
     53a:	cf                   	iret   

0000053b <fn3>:
     53b:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     540:	07                   	pop    %es
     541:	0f a9                	pop    %gs
     543:	1f                   	pop    %ds
     544:	61                   	popa   
     545:	c9                   	leave  
     546:	cf                   	iret   

00000547 <_SetINT37h>:
     547:	fa                   	cli    
     548:	e8 47 03 cf fa       	call   facf0894 <_end+0xfacedbb0>

0000054c <_SetINT38h>:
     54c:	fa                   	cli    
     54d:	50                   	push   %eax
     54e:	1e                   	push   %ds
     54f:	8c c8                	mov    %cs,%eax
     551:	8e d8                	mov    %eax,%ds
     553:	6a 00                	push   $0x0
     555:	e8 48 0b 1f 58       	call   581f10a2 <_end+0x581ee3be>
     55a:	cf                   	iret   

0000055b <_SetINT39h>:
     55b:	fa                   	cli    
     55c:	c8 00 00 00          	enter  $0x0,$0x0
     560:	1e                   	push   %ds
     561:	6a 00                	push   $0x0
     563:	8c c8                	mov    %cs,%eax
     565:	8e d8                	mov    %eax,%ds
     567:	e8 94 0b 1f c9       	call   c91f1100 <_end+0xc91ee41c>
     56c:	cf                   	iret   

0000056d <_SetINT41h>:
     56d:	fa                   	cli    
     56e:	e8 59 02 e8 ca       	call   cae807cc <_end+0xcae7dae8>
     573:	02 b0 20 e6 20 e6    	add    -0x19df19e0(%eax),%dh
     579:	a0 fb cf fa c8       	mov    0xc8facffb,%al

0000057c <_SetINT43h>:
     57c:	fa                   	cli    
     57d:	c8 00 00 00          	enter  $0x0,$0x0
     581:	1e                   	push   %ds
     582:	50                   	push   %eax
     583:	6a 00                	push   $0x0
     585:	8c c8                	mov    %cs,%eax
     587:	8e d8                	mov    %eax,%ds
     589:	e8 56 0b 58 1f       	call   1f5810e4 <_end+0x1f57e400>
     58e:	c9                   	leave  
     58f:	cf                   	iret   

00000590 <_initialInt>:
     590:	c8 00 00 00          	enter  $0x0,$0x0
     594:	60                   	pusha  
     595:	06                   	push   %es
     596:	1e                   	push   %ds
     597:	8c c8                	mov    %cs,%eax
     599:	8e d8                	mov    %eax,%ds
     59b:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     5a0:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
     5a5:	00 f7                	add    %dh,%bh
     5a7:	e3 89                	jecxz  532 <fn2+0x1e>
     5a9:	c7                   	(bad)  
     5aa:	b8 9b 02 26 89       	mov    $0x8926029b,%eax
     5af:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     5b4:	45                   	inc    %ebp
     5b5:	02 1f                	add    (%edi),%bl
     5b7:	07                   	pop    %es
     5b8:	61                   	popa   
     5b9:	60                   	pusha  
     5ba:	06                   	push   %es
     5bb:	1e                   	push   %ds
     5bc:	8c c8                	mov    %cs,%eax
     5be:	8e d8                	mov    %eax,%ds
     5c0:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     5c5:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
     5ca:	00 f7                	add    %dh,%bh
     5cc:	e3 89                	jecxz  557 <_SetINT38h+0xb>
     5ce:	c7                   	(bad)  
     5cf:	b8 ea 03 26 89       	mov    $0x892603ea,%eax
     5d4:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     5d9:	45                   	inc    %ebp
     5da:	02 1f                	add    (%edi),%bl
     5dc:	07                   	pop    %es
     5dd:	61                   	popa   
     5de:	60                   	pusha  
     5df:	06                   	push   %es
     5e0:	1e                   	push   %ds
     5e1:	8c c8                	mov    %cs,%eax
     5e3:	8e d8                	mov    %eax,%ds
     5e5:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     5ea:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
     5ef:	00 f7                	add    %dh,%bh
     5f1:	e3 89                	jecxz  57c <_SetINT43h>
     5f3:	c7                   	(bad)  
     5f4:	b8 20 04 26 89       	mov    $0x89260420,%eax
     5f9:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     5fe:	45                   	inc    %ebp
     5ff:	02 1f                	add    (%edi),%bl
     601:	07                   	pop    %es
     602:	61                   	popa   
     603:	60                   	pusha  
     604:	06                   	push   %es
     605:	1e                   	push   %ds
     606:	8c c8                	mov    %cs,%eax
     608:	8e d8                	mov    %eax,%ds
     60a:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     60f:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
     614:	00 f7                	add    %dh,%bh
     616:	e3 89                	jecxz  5a1 <_initialInt+0x11>
     618:	c7                   	(bad)  
     619:	b8 56 04 26 89       	mov    $0x89260456,%eax
     61e:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     623:	45                   	inc    %ebp
     624:	02 1f                	add    (%edi),%bl
     626:	07                   	pop    %es
     627:	61                   	popa   
     628:	60                   	pusha  
     629:	06                   	push   %es
     62a:	1e                   	push   %ds
     62b:	8c c8                	mov    %cs,%eax
     62d:	8e d8                	mov    %eax,%ds
     62f:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     634:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
     639:	00 f7                	add    %dh,%bh
     63b:	e3 89                	jecxz  5c6 <_initialInt+0x36>
     63d:	c7                   	(bad)  
     63e:	b8 86 04 26 89       	mov    $0x89260486,%eax
     643:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     648:	45                   	inc    %ebp
     649:	02 1f                	add    (%edi),%bl
     64b:	07                   	pop    %es
     64c:	61                   	popa   
     64d:	60                   	pusha  
     64e:	06                   	push   %es
     64f:	1e                   	push   %ds
     650:	8c c8                	mov    %cs,%eax
     652:	8e d8                	mov    %eax,%ds
     654:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     659:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
     65e:	00 f7                	add    %dh,%bh
     660:	e3 89                	jecxz  5eb <_initialInt+0x5b>
     662:	c7                   	(bad)  
     663:	b8 b6 04 26 89       	mov    $0x892604b6,%eax
     668:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     66d:	45                   	inc    %ebp
     66e:	02 1f                	add    (%edi),%bl
     670:	07                   	pop    %es
     671:	61                   	popa   
     672:	60                   	pusha  
     673:	06                   	push   %es
     674:	1e                   	push   %ds
     675:	8c c8                	mov    %cs,%eax
     677:	8e d8                	mov    %eax,%ds
     679:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     67e:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
     683:	00 f7                	add    %dh,%bh
     685:	e3 89                	jecxz  610 <_initialInt+0x80>
     687:	c7                   	(bad)  
     688:	b8 47 05 26 89       	mov    $0x89260547,%eax
     68d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     692:	45                   	inc    %ebp
     693:	02 1f                	add    (%edi),%bl
     695:	07                   	pop    %es
     696:	61                   	popa   
     697:	60                   	pusha  
     698:	06                   	push   %es
     699:	1e                   	push   %ds
     69a:	8c c8                	mov    %cs,%eax
     69c:	8e d8                	mov    %eax,%ds
     69e:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     6a3:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
     6a8:	00 f7                	add    %dh,%bh
     6aa:	e3 89                	jecxz  635 <_initialInt+0xa5>
     6ac:	c7                   	(bad)  
     6ad:	b8 4c 05 26 89       	mov    $0x8926054c,%eax
     6b2:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     6b7:	45                   	inc    %ebp
     6b8:	02 1f                	add    (%edi),%bl
     6ba:	07                   	pop    %es
     6bb:	61                   	popa   
     6bc:	60                   	pusha  
     6bd:	06                   	push   %es
     6be:	1e                   	push   %ds
     6bf:	8c c8                	mov    %cs,%eax
     6c1:	8e d8                	mov    %eax,%ds
     6c3:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     6c8:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
     6cd:	00 f7                	add    %dh,%bh
     6cf:	e3 89                	jecxz  65a <_initialInt+0xca>
     6d1:	c7                   	(bad)  
     6d2:	b8 5b 05 26 89       	mov    $0x8926055b,%eax
     6d7:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     6dc:	45                   	inc    %ebp
     6dd:	02 1f                	add    (%edi),%bl
     6df:	07                   	pop    %es
     6e0:	61                   	popa   
     6e1:	60                   	pusha  
     6e2:	06                   	push   %es
     6e3:	1e                   	push   %ds
     6e4:	8c c8                	mov    %cs,%eax
     6e6:	8e d8                	mov    %eax,%ds
     6e8:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     6ed:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
     6f2:	00 f7                	add    %dh,%bh
     6f4:	e3 89                	jecxz  67f <_initialInt+0xef>
     6f6:	c7                   	(bad)  
     6f7:	b8 6d 05 26 89       	mov    $0x8926056d,%eax
     6fc:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     701:	45                   	inc    %ebp
     702:	02 1f                	add    (%edi),%bl
     704:	07                   	pop    %es
     705:	61                   	popa   
     706:	60                   	pusha  
     707:	06                   	push   %es
     708:	1e                   	push   %ds
     709:	8c c8                	mov    %cs,%eax
     70b:	8e d8                	mov    %eax,%ds
     70d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     712:	b8 42 00 bb 04       	mov    $0x4bb0042,%eax
     717:	00 f7                	add    %dh,%bh
     719:	e3 89                	jecxz  6a4 <_initialInt+0x114>
     71b:	c7                   	(bad)  
     71c:	b8 d7 02 26 89       	mov    $0x892602d7,%eax
     721:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     726:	45                   	inc    %ebp
     727:	02 1f                	add    (%edi),%bl
     729:	07                   	pop    %es
     72a:	61                   	popa   
     72b:	60                   	pusha  
     72c:	06                   	push   %es
     72d:	1e                   	push   %ds
     72e:	8c c8                	mov    %cs,%eax
     730:	8e d8                	mov    %eax,%ds
     732:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     737:	b8 43 00 bb 04       	mov    $0x4bb0043,%eax
     73c:	00 f7                	add    %dh,%bh
     73e:	e3 89                	jecxz  6c9 <_initialInt+0x139>
     740:	c7                   	(bad)  
     741:	b8 7c 05 26 89       	mov    $0x8926057c,%eax
     746:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     74b:	45                   	inc    %ebp
     74c:	02 1f                	add    (%edi),%bl
     74e:	07                   	pop    %es
     74f:	61                   	popa   
     750:	c9                   	leave  
     751:	66 5a                	pop    %dx
     753:	ff e2                	jmp    *%edx

00000755 <_initialInt_09h>:
     755:	c8 00 00 00          	enter  $0x0,$0x0
     759:	a1 24 00 a3 22       	mov    0x22a30024,%eax
     75e:	01 a1 26 00 a3 24    	add    %esp,0x24a30026(%ecx)
     764:	01 60 06             	add    %esp,0x6(%eax)
     767:	1e                   	push   %ds
     768:	8c c8                	mov    %cs,%eax
     76a:	8e d8                	mov    %eax,%ds
     76c:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     771:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
     776:	00 f7                	add    %dh,%bh
     778:	e3 89                	jecxz  703 <_initialInt+0x173>
     77a:	c7                   	(bad)  
     77b:	b8 5c 03 26 89       	mov    $0x8926035c,%eax
     780:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     785:	45                   	inc    %ebp
     786:	02 1f                	add    (%edi),%bl
     788:	07                   	pop    %es
     789:	61                   	popa   
     78a:	c9                   	leave  
     78b:	66 5a                	pop    %dx
     78d:	ff e2                	jmp    *%edx

0000078f <_initialInt_08h>:
     78f:	c8 00 00 00          	enter  $0x0,$0x0
     793:	b0 40                	mov    $0x40,%al
     795:	e6 43                	out    %al,$0x43
     797:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
     79c:	88 e0                	mov    %ah,%al
     79e:	e6 40                	out    %al,$0x40
     7a0:	60                   	pusha  
     7a1:	06                   	push   %es
     7a2:	1e                   	push   %ds
     7a3:	8c c8                	mov    %cs,%eax
     7a5:	8e d8                	mov    %eax,%ds
     7a7:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     7ac:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
     7b1:	00 f7                	add    %dh,%bh
     7b3:	e3 89                	jecxz  73e <_initialInt+0x1ae>
     7b5:	c7                   	(bad)  
     7b6:	b8 d7 02 26 89       	mov    $0x892602d7,%eax
     7bb:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     7c0:	45                   	inc    %ebp
     7c1:	02 1f                	add    (%edi),%bl
     7c3:	07                   	pop    %es
     7c4:	61                   	popa   
     7c5:	c9                   	leave  
     7c6:	66 5a                	pop    %dx
     7c8:	ff e2                	jmp    *%edx

000007ca <_save>:
     7ca:	66 89 26             	mov    %sp,(%esi)
     7cd:	3a 01                	cmp    (%ecx),%al
     7cf:	1e                   	push   %ds
     7d0:	0e                   	push   %cs
     7d1:	1f                   	pop    %ds
     7d2:	8f 06                	popl   (%esi)
     7d4:	2a 01                	sub    (%ecx),%al
     7d6:	8f 06                	popl   (%esi)
     7d8:	2e 01 66 89          	add    %esp,%cs:-0x77(%esi)
     7dc:	26 36 01 66 89       	es add %esp,%ss:%es:-0x77(%esi)
     7e1:	36 30 01             	xor    %al,%ss:(%ecx)
     7e4:	66 8b 36             	mov    (%esi),%si
     7e7:	e0 2c                	loopne 815 <_save+0x4b>
     7e9:	66 83 c6 2c          	add    $0x2c,%si
     7ed:	67 8f 06 67 8f       	popl   -0x7099
     7f2:	46                   	inc    %esi
     7f3:	04 67                	add    $0x67,%al
     7f5:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
     7fc:	46                   	inc    %esi
     7fd:	08 67 c7             	or     %ah,-0x39(%edi)
     800:	46                   	inc    %esi
     801:	0a 00                	or     (%eax),%al
     803:	00 66 67             	add    %ah,0x67(%esi)
     806:	89 66 fc             	mov    %esp,-0x4(%esi)
     809:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
     80d:	8c de                	mov    %ds,%esi
     80f:	8e d6                	mov    %esi,%ss
     811:	66 8b 26             	mov    (%esi),%sp
     814:	e0 2c                	loopne 842 <_restart+0x4>
     816:	66 83 c4 24          	add    $0x24,%sp
     81a:	6a 00                	push   $0x0
     81c:	ff 36                	pushl  (%esi)
     81e:	2a 01                	sub    (%ecx),%al
     820:	6a 00                	push   $0x0
     822:	06                   	push   %es
     823:	66 55                	push   %bp
     825:	66 57                	push   %di
     827:	66 ff 36             	pushw  (%esi)
     82a:	30 01                	xor    %al,(%ecx)
     82c:	66 52                	push   %dx
     82e:	66 51                	push   %cx
     830:	66 53                	push   %bx
     832:	66 50                	push   %ax
     834:	66 8b 26             	mov    (%esi),%sp
     837:	36 01 a1 2e 01 ff e0 	add    %esp,%ss:-0x1f00fed2(%ecx)

0000083e <_restart>:
     83e:	66 89 26             	mov    %sp,(%esi)
     841:	36 01 66 8b          	add    %esp,%ss:-0x75(%esi)
     845:	26                   	es
     846:	e0 2c                	loopne 874 <_restart+0x36>
     848:	66 58                	pop    %ax
     84a:	66 5b                	pop    %bx
     84c:	66 59                	pop    %cx
     84e:	66 5a                	pop    %dx
     850:	66 5e                	pop    %si
     852:	66 5f                	pop    %di
     854:	66 5d                	pop    %bp
     856:	07                   	pop    %es
     857:	8f 06                	popl   (%esi)
     859:	34 01                	xor    $0x1,%al
     85b:	8f 06                	popl   (%esi)
     85d:	2a 01                	sub    (%ecx),%al
     85f:	8f 06                	popl   (%esi)
     861:	34 01                	xor    $0x1,%al
     863:	66 89 36             	mov    %si,(%esi)
     866:	30 01                	xor    %al,(%ecx)
     868:	17                   	pop    %ss
     869:	8f 06                	popl   (%esi)
     86b:	34 01                	xor    $0x1,%al
     86d:	66 89 e6             	mov    %sp,%si
     870:	66 67 8b 26 67 ff    	mov    -0x99,%sp
     876:	76 0c                	jbe    884 <_restart+0x46>
     878:	67 ff 76 08          	pushl  0x8(%bp)
     87c:	67 ff 76 04          	pushl  0x4(%bp)
     880:	66 8b 36             	mov    (%esi),%si
     883:	30 01                	xor    %al,(%ecx)
     885:	8e 1e                	mov    (%esi),%ds
     887:	2a 01                	sub    (%ecx),%al
     889:	50                   	push   %eax
     88a:	b0 20                	mov    $0x20,%al
     88c:	e6 20                	out    %al,$0x20
     88e:	e6 a0                	out    %al,$0xa0
     890:	58                   	pop    %eax
     891:	cf                   	iret   

00000892 <RTC_Timer>:
     892:	c8 00 00 00          	enter  $0x0,$0x0
     896:	1e                   	push   %ds
     897:	06                   	push   %es
     898:	60                   	pusha  
     899:	8c c8                	mov    %cs,%eax
     89b:	8e d8                	mov    %eax,%ds
     89d:	8c c8                	mov    %cs,%eax
     89f:	8e c0                	mov    %eax,%es
     8a1:	bf a0 2a b4 02       	mov    $0x2b42aa0,%edi
     8a6:	cd 1a                	int    $0x1a
     8a8:	88 e8                	mov    %ch,%al
     8aa:	b4 00                	mov    $0x0,%ah
     8ac:	b3 10                	mov    $0x10,%bl
     8ae:	f6 f3                	div    %bl
     8b0:	04 30                	add    $0x30,%al
     8b2:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
     8b8:	88 e8                	mov    %ch,%al
     8ba:	24 0f                	and    $0xf,%al
     8bc:	04 30                	add    $0x30,%al
     8be:	88 45 01             	mov    %al,0x1(%ebp)
     8c1:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
     8c5:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
     8c9:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
     8cd:	b4 02                	mov    $0x2,%ah
     8cf:	cd 1a                	int    $0x1a
     8d1:	88 c8                	mov    %cl,%al
     8d3:	b4 00                	mov    $0x0,%ah
     8d5:	b3 10                	mov    $0x10,%bl
     8d7:	f6 f3                	div    %bl
     8d9:	04 30                	add    $0x30,%al
     8db:	88 45 05             	mov    %al,0x5(%ebp)
     8de:	b4 02                	mov    $0x2,%ah
     8e0:	cd 1a                	int    $0x1a
     8e2:	88 c8                	mov    %cl,%al
     8e4:	24 0f                	and    $0xf,%al
     8e6:	04 30                	add    $0x30,%al
     8e8:	88 45 06             	mov    %al,0x6(%ebp)
     8eb:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
     8ef:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
     8f3:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
     8f7:	8c c8                	mov    %cs,%eax
     8f9:	8e d8                	mov    %eax,%ds
     8fb:	8e c0                	mov    %eax,%es
     8fd:	bd 4f 01 8c d8       	mov    $0xd88c014f,%ebp
     902:	8e c0                	mov    %eax,%es
     904:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
     909:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     90f:	b2 0a                	mov    $0xa,%dl
     911:	cd 10                	int    $0x10
     913:	8c c8                	mov    %cs,%eax
     915:	8e d8                	mov    %eax,%ds
     917:	8e c0                	mov    %eax,%es
     919:	bd a0 2a 8c d8       	mov    $0xd88c2aa0,%ebp
     91e:	8e c0                	mov    %eax,%es
     920:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
     925:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     92b:	b2 1e                	mov    $0x1e,%dl
     92d:	cd 10                	int    $0x10
     92f:	61                   	popa   
     930:	07                   	pop    %es
     931:	1f                   	pop    %ds
     932:	c9                   	leave  
     933:	66 5a                	pop    %dx
     935:	ff e2                	jmp    *%edx

00000937 <_Get_Hours_1>:
     937:	c8 04 00 00          	enter  $0x4,$0x0
     93b:	b4 02                	mov    $0x2,%ah
     93d:	cd 1a                	int    $0x1a
     93f:	88 e8                	mov    %ch,%al
     941:	b4 00                	mov    $0x0,%ah
     943:	b3 10                	mov    $0x10,%bl
     945:	f6 f3                	div    %bl
     947:	30 e4                	xor    %ah,%ah
     949:	66 67 89 04          	mov    %ax,(%si)
     94d:	24 66                	and    $0x66,%al
     94f:	67 8b 04             	mov    (%si),%eax
     952:	24 c9                	and    $0xc9,%al
     954:	66 5a                	pop    %dx
     956:	ff e2                	jmp    *%edx

00000958 <_Get_Hours_2>:
     958:	c8 04 00 00          	enter  $0x4,$0x0
     95c:	b4 02                	mov    $0x2,%ah
     95e:	cd 1a                	int    $0x1a
     960:	88 e8                	mov    %ch,%al
     962:	24 0f                	and    $0xf,%al
     964:	30 e4                	xor    %ah,%ah
     966:	66 67 89 04          	mov    %ax,(%si)
     96a:	24 66                	and    $0x66,%al
     96c:	67 8b 04             	mov    (%si),%eax
     96f:	24 c9                	and    $0xc9,%al
     971:	66 5a                	pop    %dx
     973:	ff e2                	jmp    *%edx

00000975 <_Get_Minutes_1>:
     975:	c8 04 00 00          	enter  $0x4,$0x0
     979:	b4 02                	mov    $0x2,%ah
     97b:	cd 1a                	int    $0x1a
     97d:	88 c8                	mov    %cl,%al
     97f:	b4 00                	mov    $0x0,%ah
     981:	b3 10                	mov    $0x10,%bl
     983:	f6 f3                	div    %bl
     985:	30 e4                	xor    %ah,%ah
     987:	66 67 89 04          	mov    %ax,(%si)
     98b:	24 66                	and    $0x66,%al
     98d:	67 8b 04             	mov    (%si),%eax
     990:	24 c9                	and    $0xc9,%al
     992:	66 5a                	pop    %dx
     994:	ff e2                	jmp    *%edx

00000996 <_Get_Minutes_2>:
     996:	c8 04 00 00          	enter  $0x4,$0x0
     99a:	b4 02                	mov    $0x2,%ah
     99c:	cd 1a                	int    $0x1a
     99e:	88 c8                	mov    %cl,%al
     9a0:	24 0f                	and    $0xf,%al
     9a2:	30 e4                	xor    %ah,%ah
     9a4:	66 67 89 04          	mov    %ax,(%si)
     9a8:	24 66                	and    $0x66,%al
     9aa:	67 8b 04             	mov    (%si),%eax
     9ad:	24 c9                	and    $0xc9,%al
     9af:	66 5a                	pop    %dx
     9b1:	ff e2                	jmp    *%edx

000009b3 <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
     9b3:	66 55                	push   %bp
     9b5:	66 89 e5             	mov    %sp,%bp
     9b8:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
     9bc:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     9c1:	66 89 d0             	mov    %dx,%ax
     9c4:	66 c1 e0 02          	shl    $0x2,%ax
     9c8:	66 01 d0             	add    %dx,%ax
     9cb:	66 c1 e0 04          	shl    $0x4,%ax
     9cf:	66 89 c2             	mov    %ax,%dx
     9d2:	67 66 8b 45 10       	mov    0x10(%di),%ax
     9d7:	66 01 d0             	add    %dx,%ax
     9da:	66 01 c0             	add    %ax,%ax
     9dd:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
     9e2:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     9e9:	00 00                	add    %al,(%eax)
	int index = 0;
     9eb:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     9f2:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     9f4:	eb 35                	jmp    a2b <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
     9f6:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     9fb:	67 66 8b 45 08       	mov    0x8(%di),%ax
     a00:	66 01 d0             	add    %dx,%ax
     a03:	67 8a 00             	mov    (%bx,%si),%al
     a06:	66 0f be c0          	movsbw %al,%ax
     a0a:	67 66 ff 75 f4       	pushw  -0xc(%di)
     a0f:	67 66 ff 75 fc       	pushw  -0x4(%di)
     a14:	66 50                	push   %ax
     a16:	66 e8 71 f7          	callw  18b <_clearscreen+0x7>
     a1a:	ff                   	(bad)  
     a1b:	ff 66 83             	jmp    *-0x7d(%esi)
     a1e:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     a21:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     a25:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
     a2b:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     a30:	67 66 8b 45 08       	mov    0x8(%di),%ax
     a35:	66 01 d0             	add    %dx,%ax
     a38:	67 8a 00             	mov    (%bx,%si),%al
     a3b:	84 c0                	test   %al,%al
     a3d:	75 b7                	jne    9f6 <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     a3f:	90                   	nop
}
     a40:	66 c9                	leavew 
     a42:	66 c3                	retw   

00000a44 <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
     a44:	66 55                	push   %bp
     a46:	66 89 e5             	mov    %sp,%bp
     a49:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
     a4d:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     a52:	66 89 d0             	mov    %dx,%ax
     a55:	66 c1 e0 02          	shl    $0x2,%ax
     a59:	66 01 d0             	add    %dx,%ax
     a5c:	66 c1 e0 04          	shl    $0x4,%ax
     a60:	66 89 c2             	mov    %ax,%dx
     a63:	67 66 8b 45 10       	mov    0x10(%di),%ax
     a68:	66 01 d0             	add    %dx,%ax
     a6b:	66 01 c0             	add    %ax,%ax
     a6e:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
     a73:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     a7a:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     a7c:	eb 35                	jmp    ab3 <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
     a7e:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     a83:	67 66 8b 45 08       	mov    0x8(%di),%ax
     a88:	66 01 d0             	add    %dx,%ax
     a8b:	67 8a 00             	mov    (%bx,%si),%al
     a8e:	66 0f be c0          	movsbw %al,%ax
     a92:	67 66 ff 75 14       	pushw  0x14(%di)
     a97:	67 66 ff 75 fc       	pushw  -0x4(%di)
     a9c:	66 50                	push   %ax
     a9e:	66 e8 e9 f6          	callw  18b <_clearscreen+0x7>
     aa2:	ff                   	(bad)  
     aa3:	ff 66 83             	jmp    *-0x7d(%esi)
     aa6:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     aa9:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     aad:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
     ab3:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     ab8:	67 66 8b 45 08       	mov    0x8(%di),%ax
     abd:	66 01 d0             	add    %dx,%ax
     ac0:	67 8a 00             	mov    (%bx,%si),%al
     ac3:	84 c0                	test   %al,%al
     ac5:	75 b7                	jne    a7e <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     ac7:	90                   	nop
}
     ac8:	66 c9                	leavew 
     aca:	66 c3                	retw   

00000acc <sys_showline>:
void sys_showline(){
     acc:	66 55                	push   %bp
     ace:	66 89 e5             	mov    %sp,%bp
     ad1:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
     ad5:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
     ada:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
     adf:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
     ae4:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
     ae9:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
     aee:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
     af3:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
     af8:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     aff:	00 00                	add    %al,(%eax)
    int i = 0;
     b01:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     b08:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
     b0a:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     b11:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
     b13:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     b1a:	00 00                	add    %al,(%eax)
     b1c:	eb 52                	jmp    b70 <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
     b1e:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     b23:	66 89 d0             	mov    %dx,%ax
     b26:	66 c1 e0 03          	shl    $0x3,%ax
     b2a:	66 01 d0             	add    %dx,%ax
     b2d:	67 66 8d 14          	lea    (%si),%dx
     b31:	c5 00                	lds    (%eax),%eax
     b33:	00 00                	add    %al,(%eax)
     b35:	00 66 01             	add    %ah,0x1(%esi)
     b38:	d0 66 01             	shlb   0x1(%esi)
     b3b:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
     b3f:	45                   	inc    %ebp
     b40:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
     b46:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     b4b:	66 01 d0             	add    %dx,%ax
     b4e:	67 8a 00             	mov    (%bx,%si),%al
     b51:	66 0f be c0          	movsbw %al,%ax
     b55:	67 66 ff 75 f4       	pushw  -0xc(%di)
     b5a:	67 66 ff 75 f0       	pushw  -0x10(%di)
     b5f:	66 50                	push   %ax
     b61:	66 e8 26 f6          	callw  18b <_clearscreen+0x7>
     b65:	ff                   	(bad)  
     b66:	ff 66 83             	jmp    *-0x7d(%esi)
     b69:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
     b6c:	66 ff 45 fc          	incw   -0x4(%ebp)
     b70:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
     b76:	7e a6                	jle    b1e <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
     b78:	66 c9                	leavew 
     b7a:	66 c3                	retw   

00000b7c <sys_printname>:

void sys_printname(){
     b7c:	66 55                	push   %bp
     b7e:	66 89 e5             	mov    %sp,%bp
     b81:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
     b85:	67 66 c7 45 fc 18 15 	movw   $0x1518,-0x4(%di)
     b8c:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
     b8e:	67 66 c7 45 f8 5c 15 	movw   $0x155c,-0x8(%di)
     b95:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
     b97:	67 66 c7 45 f4 a0 15 	movw   $0x15a0,-0xc(%di)
     b9e:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
     ba0:	67 66 c7 45 f0 e4 15 	movw   $0x15e4,-0x10(%di)
     ba7:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
     ba9:	67 66 c7 45 ec 28 16 	movw   $0x1628,-0x14(%di)
     bb0:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
     bb2:	67 66 c7 45 e8 6c 16 	movw   $0x166c,-0x18(%di)
     bb9:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
     bbb:	67 66 c7 45 e4 b0 16 	movw   $0x16b0,-0x1c(%di)
     bc2:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
     bc4:	66 6a 0b             	pushw  $0xb
     bc7:	66 6a 10             	pushw  $0x10
     bca:	67 66 ff 75 fc       	pushw  -0x4(%di)
     bcf:	66 e8 de fd          	callw  9b1 <_Get_Minutes_2+0x1b>
     bd3:	ff                   	(bad)  
     bd4:	ff 66 83             	jmp    *-0x7d(%esi)
     bd7:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
     bda:	6a 0b                	push   $0xb
     bdc:	66 6a 11             	pushw  $0x11
     bdf:	67 66 ff 75 f8       	pushw  -0x8(%di)
     be4:	66 e8 c9 fd          	callw  9b1 <_Get_Minutes_2+0x1b>
     be8:	ff                   	(bad)  
     be9:	ff 66 83             	jmp    *-0x7d(%esi)
     bec:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
     bef:	6a 0b                	push   $0xb
     bf1:	66 6a 12             	pushw  $0x12
     bf4:	67 66 ff 75 f4       	pushw  -0xc(%di)
     bf9:	66 e8 b4 fd          	callw  9b1 <_Get_Minutes_2+0x1b>
     bfd:	ff                   	(bad)  
     bfe:	ff 66 83             	jmp    *-0x7d(%esi)
     c01:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
     c04:	6a 0b                	push   $0xb
     c06:	66 6a 13             	pushw  $0x13
     c09:	67 66 ff 75 f0       	pushw  -0x10(%di)
     c0e:	66 e8 9f fd          	callw  9b1 <_Get_Minutes_2+0x1b>
     c12:	ff                   	(bad)  
     c13:	ff 66 83             	jmp    *-0x7d(%esi)
     c16:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
     c19:	6a 0b                	push   $0xb
     c1b:	66 6a 14             	pushw  $0x14
     c1e:	67 66 ff 75 ec       	pushw  -0x14(%di)
     c23:	66 e8 8a fd          	callw  9b1 <_Get_Minutes_2+0x1b>
     c27:	ff                   	(bad)  
     c28:	ff 66 83             	jmp    *-0x7d(%esi)
     c2b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
     c2e:	6a 0b                	push   $0xb
     c30:	66 6a 15             	pushw  $0x15
     c33:	67 66 ff 75 e8       	pushw  -0x18(%di)
     c38:	66 e8 75 fd          	callw  9b1 <_Get_Minutes_2+0x1b>
     c3c:	ff                   	(bad)  
     c3d:	ff 66 83             	jmp    *-0x7d(%esi)
     c40:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
     c43:	6a 0b                	push   $0xb
     c45:	66 6a 16             	pushw  $0x16
     c48:	67 66 ff 75 e4       	pushw  -0x1c(%di)
     c4d:	66 e8 60 fd          	callw  9b1 <_Get_Minutes_2+0x1b>
     c51:	ff                   	(bad)  
     c52:	ff 66 83             	jmp    *-0x7d(%esi)
     c55:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
     c58:	c9                   	leave  
     c59:	66 c3                	retw   

00000c5b <sys_printpoem>:
void sys_printpoem(){
     c5b:	66 55                	push   %bp
     c5d:	66 89 e5             	mov    %sp,%bp
     c60:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
     c64:	67 66 c7 45 f8 f4 16 	movw   $0x16f4,-0x8(%di)
     c6b:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
     c6d:	67 66 c7 45 f4 06 17 	movw   $0x1706,-0xc(%di)
     c74:	00 00                	add    %al,(%eax)
    int i = 1;
     c76:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     c7d:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
     c7f:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     c86:	00 00                	add    %al,(%eax)
     c88:	eb 4b                	jmp    cd5 <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
     c8a:	67 66 ff 75 fc       	pushw  -0x4(%di)
     c8f:	66 6a 0a             	pushw  $0xa
     c92:	66 6a 0f             	pushw  $0xf
     c95:	67 66 ff 75 f8       	pushw  -0x8(%di)
     c9a:	66 e8 a4 fd          	callw  a42 <sys_print_for_heart+0x8f>
     c9e:	ff                   	(bad)  
     c9f:	ff 66 83             	jmp    *-0x7d(%esi)
     ca2:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
     ca4:	67 66 ff 75 fc       	pushw  -0x4(%di)
     ca9:	66 6a 0a             	pushw  $0xa
     cac:	66 6a 10             	pushw  $0x10
     caf:	67 66 ff 75 f4       	pushw  -0xc(%di)
     cb4:	66 e8 8a fd          	callw  a42 <sys_print_for_heart+0x8f>
     cb8:	ff                   	(bad)  
     cb9:	ff 66 83             	jmp    *-0x7d(%esi)
     cbc:	c4 10                	les    (%eax),%edx
        int j = 0;
     cbe:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     cc5:	00 00                	add    %al,(%eax)
        int k = 0;
     cc7:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
     cce:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
     cd0:	67 66 ff 45 fc       	incw   -0x4(%di)
     cd5:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
     cdb:	7e ad                	jle    c8a <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
     cdd:	66 c9                	leavew 
     cdf:	66 c3                	retw   

00000ce1 <sys_printheart>:
void sys_printheart(){
     ce1:	66 55                	push   %bp
     ce3:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
     ce6:	66 6a 28             	pushw  $0x28
     ce9:	66 6a 00             	pushw  $0x0
     cec:	66 68 0f 17          	pushw  $0x170f
     cf0:	00 00                	add    %al,(%eax)
     cf2:	66 e8 bb fc          	callw  9b1 <_Get_Minutes_2+0x1b>
     cf6:	ff                   	(bad)  
     cf7:	ff 66 83             	jmp    *-0x7d(%esi)
     cfa:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
     cfd:	6a 28                	push   $0x28
     cff:	66 6a 01             	pushw  $0x1
     d02:	66 68 27 17          	pushw  $0x1727
     d06:	00 00                	add    %al,(%eax)
     d08:	66 e8 a5 fc          	callw  9b1 <_Get_Minutes_2+0x1b>
     d0c:	ff                   	(bad)  
     d0d:	ff 66 83             	jmp    *-0x7d(%esi)
     d10:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
     d13:	6a 28                	push   $0x28
     d15:	66 6a 02             	pushw  $0x2
     d18:	66 68 40 17          	pushw  $0x1740
     d1c:	00 00                	add    %al,(%eax)
     d1e:	66 e8 8f fc          	callw  9b1 <_Get_Minutes_2+0x1b>
     d22:	ff                   	(bad)  
     d23:	ff 66 83             	jmp    *-0x7d(%esi)
     d26:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
     d29:	6a 28                	push   $0x28
     d2b:	66 6a 03             	pushw  $0x3
     d2e:	66 68 5b 17          	pushw  $0x175b
     d32:	00 00                	add    %al,(%eax)
     d34:	66 e8 79 fc          	callw  9b1 <_Get_Minutes_2+0x1b>
     d38:	ff                   	(bad)  
     d39:	ff 66 83             	jmp    *-0x7d(%esi)
     d3c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
     d3f:	6a 28                	push   $0x28
     d41:	66 6a 04             	pushw  $0x4
     d44:	66 68 74 17          	pushw  $0x1774
     d48:	00 00                	add    %al,(%eax)
     d4a:	66 e8 63 fc          	callw  9b1 <_Get_Minutes_2+0x1b>
     d4e:	ff                   	(bad)  
     d4f:	ff 66 83             	jmp    *-0x7d(%esi)
     d52:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
     d55:	6a 28                	push   $0x28
     d57:	66 6a 05             	pushw  $0x5
     d5a:	66 68 8c 17          	pushw  $0x178c
     d5e:	00 00                	add    %al,(%eax)
     d60:	66 e8 4d fc          	callw  9b1 <_Get_Minutes_2+0x1b>
     d64:	ff                   	(bad)  
     d65:	ff 66 83             	jmp    *-0x7d(%esi)
     d68:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
     d6b:	6a 28                	push   $0x28
     d6d:	66 6a 06             	pushw  $0x6
     d70:	66 68 a3 17          	pushw  $0x17a3
     d74:	00 00                	add    %al,(%eax)
     d76:	66 e8 37 fc          	callw  9b1 <_Get_Minutes_2+0x1b>
     d7a:	ff                   	(bad)  
     d7b:	ff 66 83             	jmp    *-0x7d(%esi)
     d7e:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
     d81:	6a 28                	push   $0x28
     d83:	66 6a 07             	pushw  $0x7
     d86:	66 68 b9 17          	pushw  $0x17b9
     d8a:	00 00                	add    %al,(%eax)
     d8c:	66 e8 21 fc          	callw  9b1 <_Get_Minutes_2+0x1b>
     d90:	ff                   	(bad)  
     d91:	ff 66 83             	jmp    *-0x7d(%esi)
     d94:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
     d97:	c9                   	leave  
     d98:	66 c3                	retw   

00000d9a <savePCB>:
#include "schedule.h"

void savePCB(){
     d9a:	66 55                	push   %bp
     d9c:	66 89 e5             	mov    %sp,%bp
    _save();
     d9f:	66 e8 25 fa          	callw  7c8 <_initialInt_08h+0x39>
     da3:	ff                   	(bad)  
     da4:	ff 66 5d             	jmp    *0x5d(%esi)
}
     da7:	66 c3                	retw   

00000da9 <initial_PCB>:
void initial_PCB(int index){
     da9:	66 55                	push   %bp
     dab:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
     dae:	67 66 8b 45 08       	mov    0x8(%di),%ax
     db3:	66 40                	inc    %ax
     db5:	66 c1 e0 0c          	shl    $0xc,%ax
     db9:	66 89 c2             	mov    %ax,%dx
     dbc:	67 66 8b 45 08       	mov    0x8(%di),%ax
     dc1:	66 c1 e0 02          	shl    $0x2,%ax
     dc5:	66 89 c1             	mov    %ax,%cx
     dc8:	66 c1 e1 04          	shl    $0x4,%cx
     dcc:	66 01 c8             	add    %cx,%ax
     dcf:	66 05 f0 2a          	add    $0x2af0,%ax
     dd3:	00 00                	add    %al,(%eax)
     dd5:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
     dd9:	67 66 8b 45 08       	mov    0x8(%di),%ax
     dde:	66 40                	inc    %ax
     de0:	66 c1 e0 0c          	shl    $0xc,%ax
     de4:	66 89 c2             	mov    %ax,%dx
     de7:	67 66 8b 45 08       	mov    0x8(%di),%ax
     dec:	66 c1 e0 02          	shl    $0x2,%ax
     df0:	66 89 c1             	mov    %ax,%cx
     df3:	66 c1 e1 04          	shl    $0x4,%cx
     df7:	66 01 c8             	add    %cx,%ax
     dfa:	66 05 e0 2a          	add    $0x2ae0,%ax
     dfe:	00 00                	add    %al,(%eax)
     e00:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
     e04:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e09:	66 40                	inc    %ax
     e0b:	66 c1 e0 0c          	shl    $0xc,%ax
     e0f:	66 89 c2             	mov    %ax,%dx
     e12:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e17:	66 c1 e0 02          	shl    $0x2,%ax
     e1b:	66 89 c1             	mov    %ax,%cx
     e1e:	66 c1 e1 04          	shl    $0x4,%cx
     e22:	66 01 c8             	add    %cx,%ax
     e25:	66 05 e0 2a          	add    $0x2ae0,%ax
     e29:	00 00                	add    %al,(%eax)
     e2b:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
     e30:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e35:	66 c1 e0 02          	shl    $0x2,%ax
     e39:	66 89 c2             	mov    %ax,%dx
     e3c:	66 c1 e2 04          	shl    $0x4,%dx
     e40:	66 01 d0             	add    %dx,%ax
     e43:	66 05 e0 2a          	add    $0x2ae0,%ax
     e47:	00 00                	add    %al,(%eax)
     e49:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
     e50:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
     e52:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e57:	66 c1 e0 02          	shl    $0x2,%ax
     e5b:	66 89 c2             	mov    %ax,%dx
     e5e:	66 c1 e2 04          	shl    $0x4,%dx
     e62:	66 01 d0             	add    %dx,%ax
     e65:	66 05 e0 2a          	add    $0x2ae0,%ax
     e69:	00 00                	add    %al,(%eax)
     e6b:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
     e72:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = RUN;
     e74:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e79:	66 c1 e0 02          	shl    $0x2,%ax
     e7d:	66 89 c2             	mov    %ax,%dx
     e80:	66 c1 e2 04          	shl    $0x4,%dx
     e84:	66 01 d0             	add    %dx,%ax
     e87:	66 05 f0 2a          	add    $0x2af0,%ax
     e8b:	00 00                	add    %al,(%eax)
     e8d:	67 66 c7 40 08 01 00 	movw   $0x1,0x8(%bx,%si)
     e94:	00 00                	add    %al,(%eax)
    PCB_list[index ].eflags = 512;
     e96:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e9b:	66 c1 e0 02          	shl    $0x2,%ax
     e9f:	66 89 c2             	mov    %ax,%dx
     ea2:	66 c1 e2 04          	shl    $0x4,%dx
     ea6:	66 01 d0             	add    %dx,%ax
     ea9:	66 05 f0 2a          	add    $0x2af0,%ax
     ead:	00 00                	add    %al,(%eax)
     eaf:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
     eb6:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
     eb8:	67 66 8b 45 08       	mov    0x8(%di),%ax
     ebd:	66 c1 e0 02          	shl    $0x2,%ax
     ec1:	66 89 c2             	mov    %ax,%dx
     ec4:	66 c1 e2 04          	shl    $0x4,%dx
     ec8:	66 01 d0             	add    %dx,%ax
     ecb:	67 66 8d 90 f0 2a    	lea    0x2af0(%bx,%si),%dx
     ed1:	00 00                	add    %al,(%eax)
     ed3:	67 66 8b 45 08       	mov    0x8(%di),%ax
     ed8:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 5;
     edd:	67 66 8b 45 08       	mov    0x8(%di),%ax
     ee2:	66 c1 e0 02          	shl    $0x2,%ax
     ee6:	66 89 c2             	mov    %ax,%dx
     ee9:	66 c1 e2 04          	shl    $0x4,%dx
     eed:	66 01 d0             	add    %dx,%ax
     ef0:	66 05 00 2b          	add    $0x2b00,%ax
     ef4:	00 00                	add    %al,(%eax)
     ef6:	67 66 c7 00 05 00    	movw   $0x5,(%bx,%si)
     efc:	00 00                	add    %al,(%eax)
}
     efe:	66 5d                	pop    %bp
     f00:	66 c3                	retw   

00000f02 <Set_PCB>:
void Set_PCB(){
     f02:	66 55                	push   %bp
     f04:	66 89 e5             	mov    %sp,%bp
     f07:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
     f0b:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     f12:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
     f14:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     f1b:	00 00                	add    %al,(%eax)
     f1d:	eb 27                	jmp    f46 <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
     f1f:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     f24:	66 c1 e0 02          	shl    $0x2,%ax
     f28:	66 89 c2             	mov    %ax,%dx
     f2b:	66 c1 e2 04          	shl    $0x4,%dx
     f2f:	66 01 d0             	add    %dx,%ax
     f32:	66 05 f0 2a          	add    $0x2af0,%ax
     f36:	00 00                	add    %al,(%eax)
     f38:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
     f3f:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 5;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
     f41:	67 66 ff 45 fc       	incw   -0x4(%di)
     f46:	67 66 83 7d fc 07    	cmpw   $0x7,-0x4(%di)
     f4c:	7e d1                	jle    f1f <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
     f4e:	66 c9                	leavew 
     f50:	66 c3                	retw   

00000f52 <sys_schedule>:
void sys_schedule(){
     f52:	66 55                	push   %bp
     f54:	66 89 e5             	mov    %sp,%bp
     f57:	66 83 ec 0c          	sub    $0xc,%sp
    int i,j;
    int index = -1;
     f5b:	67 66 c7 45 f4 ff ff 	movw   $0xffff,-0xc(%di)
     f62:	ff                   	(bad)  
     f63:	ff 66 a1             	jmp    *-0x5f(%esi)
    i = _CurrentProg - PCB_list;
     f66:	e0 2c                	loopne f94 <sys_schedule+0x42>
     f68:	66 89 c2             	mov    %ax,%dx
     f6b:	66 b8 c0 2a          	mov    $0x2ac0,%ax
     f6f:	00 00                	add    %al,(%eax)
     f71:	66 29 c2             	sub    %ax,%dx
     f74:	66 89 d0             	mov    %dx,%ax
     f77:	66 c1 f8 02          	sar    $0x2,%ax
     f7b:	66 89 c2             	mov    %ax,%dx
     f7e:	66 89 d0             	mov    %dx,%ax
     f81:	66 01 c0             	add    %ax,%ax
     f84:	66 01 d0             	add    %dx,%ax
     f87:	67 66 8d 14          	lea    (%si),%dx
     f8b:	85 00                	test   %eax,(%eax)
     f8d:	00 00                	add    %al,(%eax)
     f8f:	00 66 01             	add    %ah,0x1(%esi)
     f92:	d0 66 89             	shlb   -0x77(%esi)
     f95:	c2 66 c1             	ret    $0xc166
     f98:	e2 08                	loop   fa2 <sys_schedule+0x50>
     f9a:	66 01 d0             	add    %dx,%ax
     f9d:	66 89 c2             	mov    %ax,%dx
     fa0:	66 c1 e2 10          	shl    $0x10,%dx
     fa4:	66 01 d0             	add    %dx,%ax
     fa7:	66 f7 d8             	neg    %ax
     faa:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    for(j = 0;j < PCB_NUMMER;j ++){
     faf:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     fb6:	00 00                	add    %al,(%eax)
     fb8:	e9 a6 00 67 66       	jmp    66671063 <_end+0x6666e37f>
        if(i == PCB_NUMMER - 1){
     fbd:	83 7d fc 07          	cmpl   $0x7,-0x4(%ebp)
     fc1:	75 14                	jne    fd7 <sys_schedule+0x85>
            _CurrentProg = PCB_list + 1;
     fc3:	66 c7 06 e0 2c       	movw   $0x2ce0,(%esi)
     fc8:	04 2b                	add    $0x2b,%al
     fca:	00 00                	add    %al,(%eax)
            i = 1;
     fcc:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     fd3:	00 00                	add    %al,(%eax)
     fd5:	eb 11                	jmp    fe8 <sys_schedule+0x96>
        }
        else{
            _CurrentProg ++;
     fd7:	66 a1 e0 2c 66 83    	mov    0x83662ce0,%ax
     fdd:	c0 44 66 a3 e0       	rolb   $0xe0,-0x5d(%esi,%eiz,2)
     fe2:	2c 67                	sub    $0x67,%al
            i ++;
     fe4:	66 ff 45 fc          	incw   -0x4(%ebp)
        }
        if(_CurrentProg -> prg_status == RUN){
     fe8:	66 a1 e0 2c 67 66    	mov    0x66672ce0,%ax
     fee:	8b 40 38             	mov    0x38(%eax),%eax
     ff1:	66 83 f8 01          	cmp    $0x1,%ax
     ff5:	75 03                	jne    ffa <sys_schedule+0xa8>
            return;
     ff7:	e9 a2 00 66 a1       	jmp    a166109e <_end+0xa165e3ba>
        }
        if(_CurrentProg -> prg_status == READY && index == -1){
     ffc:	e0 2c                	loopne 102a <sys_schedule+0xd8>
     ffe:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    1003:	66 83 f8 03          	cmp    $0x3,%ax
    1007:	75 53                	jne    105c <sys_schedule+0x10a>
    1009:	67 66 83 7d f4 ff    	cmpw   $0xffff,-0xc(%di)
    100f:	75 4b                	jne    105c <sys_schedule+0x10a>
           index = _CurrentProg - PCB_list;
    1011:	66 a1 e0 2c 66 89    	mov    0x89662ce0,%ax
    1017:	c2 66 b8             	ret    $0xb866
    101a:	c0 2a 00             	shrb   $0x0,(%edx)
    101d:	00 66 29             	add    %ah,0x29(%esi)
    1020:	c2 66 89             	ret    $0x8966
    1023:	d0 66 c1             	shlb   -0x3f(%esi)
    1026:	f8                   	clc    
    1027:	02 66 89             	add    -0x77(%esi),%ah
    102a:	c2 66 89             	ret    $0x8966
    102d:	d0 66 01             	shlb   0x1(%esi)
    1030:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    1034:	67 66 8d 14          	lea    (%si),%dx
    1038:	85 00                	test   %eax,(%eax)
    103a:	00 00                	add    %al,(%eax)
    103c:	00 66 01             	add    %ah,0x1(%esi)
    103f:	d0 66 89             	shlb   -0x77(%esi)
    1042:	c2 66 c1             	ret    $0xc166
    1045:	e2 08                	loop   104f <sys_schedule+0xfd>
    1047:	66 01 d0             	add    %dx,%ax
    104a:	66 89 c2             	mov    %ax,%dx
    104d:	66 c1 e2 10          	shl    $0x10,%dx
    1051:	66 01 d0             	add    %dx,%ax
    1054:	66 f7 d8             	neg    %ax
    1057:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
}
void sys_schedule(){
    int i,j;
    int index = -1;
    i = _CurrentProg - PCB_list;
    for(j = 0;j < PCB_NUMMER;j ++){
    105c:	67 66 ff 45 f8       	incw   -0x8(%di)
    1061:	67 66 83 7d f8 07    	cmpw   $0x7,-0x8(%di)
    1067:	0f 8e 50 ff 67 66    	jle    66680fbd <_end+0x6667e2d9>
        }
        if(_CurrentProg -> prg_status == READY && index == -1){
           index = _CurrentProg - PCB_list;
        }
    }
    if(index != -1){
    106d:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
    1071:	74 1f                	je     1092 <sys_schedule+0x140>
        _CurrentProg = PCB_list + index;
    1073:	67 66 8b 45 f4       	mov    -0xc(%di),%ax
    1078:	66 c1 e0 02          	shl    $0x2,%ax
    107c:	66 89 c2             	mov    %ax,%dx
    107f:	66 c1 e2 04          	shl    $0x4,%dx
    1083:	66 01 d0             	add    %dx,%ax
    1086:	66 05 c0 2a          	add    $0x2ac0,%ax
    108a:	00 00                	add    %al,(%eax)
    108c:	66 a3 e0 2c eb 0a    	mov    %ax,0xaeb2ce0
        return;
    }
    _CurrentProg = PCB_list ;
    1092:	66 c7 06 e0 2c       	movw   $0x2ce0,(%esi)
    1097:	c0 2a 00             	shrb   $0x0,(%edx)
    109a:	00 90 66 c9 66 c3    	add    %dl,-0x3c99369a(%eax)

000010a0 <sys_exit>:
    return;
}
void sys_exit(){
    10a0:	66 55                	push   %bp
    10a2:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = EXIT;
    10a5:	66 a1 e0 2c 67 66    	mov    0x66672ce0,%ax
    10ab:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
}
    10b2:	66 5d                	pop    %bp
    10b4:	66 c3                	retw   

000010b6 <sys_bolocked>:
void sys_bolocked(){
    10b6:	66 55                	push   %bp
    10b8:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = BLOCKED;
    10bb:	66 a1 e0 2c 67 66    	mov    0x66672ce0,%ax
    10c1:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
}
    10c8:	66 5d                	pop    %bp
    10ca:	66 c3                	retw   

000010cc <sys_run>:
void sys_run(){
    10cc:	66 55                	push   %bp
    10ce:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    10d1:	66 a1 e0 2c 67 66    	mov    0x66672ce0,%ax
    10d7:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    10de:	66 5d                	pop    %bp
    10e0:	66 c3                	retw   

000010e2 <sys_wait>:
void sys_wait(){
    10e2:	66 55                	push   %bp
    10e4:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = BLOCKED;
    10e7:	66 a1 e0 2c 67 66    	mov    0x66672ce0,%ax
    10ed:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
    _Schedule();
    10f4:	66 e8 85 f1          	callw  27d <_fork_user+0xb>
    10f8:	ff                   	(bad)  
    10f9:	ff 66 5d             	jmp    *0x5d(%esi)
}
    10fc:	66 c3                	retw   

000010fe <do_fork>:
int do_fork(){
    10fe:	66 55                	push   %bp
    1100:	66 89 e5             	mov    %sp,%bp
    1103:	66 83 ec 04          	sub    $0x4,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    1107:	67 66 c7 45 fc 04 2b 	movw   $0x2b04,-0x4(%di)
    110e:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN)    fork_prg = fork_prg + 1;
    1110:	eb 06                	jmp    1118 <do_fork+0x1a>
    1112:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    1118:	67 66 81 7d fc e0 2c 	cmpw   $0x2ce0,-0x4(%di)
    111f:	00 00                	add    %al,(%eax)
    1121:	73 10                	jae    1133 <do_fork+0x35>
    1123:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1128:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    112d:	66 83 f8 01          	cmp    $0x1,%ax
    1131:	74 df                	je     1112 <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    1133:	67 66 81 7d fc 9c 2c 	cmpw   $0x2c9c,-0x4(%di)
    113a:	00 00                	add    %al,(%eax)
    113c:	76 0f                	jbe    114d <do_fork+0x4f>
    113e:	66 a1 e0 2c 67 66    	mov    0x66672ce0,%ax
    1144:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    114a:	e9 dc 01 66 e8       	jmp    e866132b <_end+0xe865e647>
    else{
        _Schedule_once();
    114f:	12 f1                	adc    %cl,%dh
    1151:	ff                   	(bad)  
    1152:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    1155:	ec                   	in     (%dx),%al
    1156:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    1157:	66 a1 e0 2c 67 66    	mov    0x66672ce0,%ax
    115d:	ff 75 fc             	pushl  -0x4(%ebp)
    1160:	66 50                	push   %ax
    1162:	66 e8 3f 02          	callw  13a5 <counter+0x63>
    1166:	00 00                	add    %al,(%eax)
    1168:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    116c:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    1170:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1175:	66 b8 c0 2a          	mov    $0x2ac0,%ax
    1179:	00 00                	add    %al,(%eax)
    117b:	66 29 c2             	sub    %ax,%dx
    117e:	66 89 d0             	mov    %dx,%ax
    1181:	66 c1 f8 02          	sar    $0x2,%ax
    1185:	66 89 c2             	mov    %ax,%dx
    1188:	66 89 d0             	mov    %dx,%ax
    118b:	66 01 c0             	add    %ax,%ax
    118e:	66 01 d0             	add    %dx,%ax
    1191:	67 66 8d 14          	lea    (%si),%dx
    1195:	85 00                	test   %eax,(%eax)
    1197:	00 00                	add    %al,(%eax)
    1199:	00 66 01             	add    %ah,0x1(%esi)
    119c:	d0 66 89             	shlb   -0x77(%esi)
    119f:	c2 66 c1             	ret    $0xc166
    11a2:	e2 08                	loop   11ac <do_fork+0xae>
    11a4:	66 01 d0             	add    %dx,%ax
    11a7:	66 89 c2             	mov    %ax,%dx
    11aa:	66 c1 e2 10          	shl    $0x10,%dx
    11ae:	66 01 d0             	add    %dx,%ax
    11b1:	66 f7 d8             	neg    %ax
    11b4:	66 89 c2             	mov    %ax,%dx
    11b7:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    11bc:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    11c1:	66 a1 e0 2c 66 89    	mov    0x89662ce0,%ax
    11c7:	c2 66 b8             	ret    $0xb866
    11ca:	c0 2a 00             	shrb   $0x0,(%edx)
    11cd:	00 66 29             	add    %ah,0x29(%esi)
    11d0:	c2 66 89             	ret    $0x8966
    11d3:	d0 66 c1             	shlb   -0x3f(%esi)
    11d6:	f8                   	clc    
    11d7:	02 66 89             	add    -0x77(%esi),%ah
    11da:	c2 66 89             	ret    $0x8966
    11dd:	d0 66 01             	shlb   0x1(%esi)
    11e0:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    11e4:	67 66 8d 14          	lea    (%si),%dx
    11e8:	85 00                	test   %eax,(%eax)
    11ea:	00 00                	add    %al,(%eax)
    11ec:	00 66 01             	add    %ah,0x1(%esi)
    11ef:	d0 66 89             	shlb   -0x77(%esi)
    11f2:	c2 66 c1             	ret    $0xc166
    11f5:	e2 08                	loop   11ff <do_fork+0x101>
    11f7:	66 01 d0             	add    %dx,%ax
    11fa:	66 89 c2             	mov    %ax,%dx
    11fd:	66 c1 e2 10          	shl    $0x10,%dx
    1201:	66 01 d0             	add    %dx,%ax
    1204:	66 f7 d8             	neg    %ax
    1207:	66 89 c2             	mov    %ax,%dx
    120a:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    120f:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    1214:	66 a1 e0 2c 67 66    	mov    0x66672ce0,%ax
    121a:	8b 50 20             	mov    0x20(%eax),%edx
    121d:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1222:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    1227:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    122c:	66 b8 c0 2a          	mov    $0x2ac0,%ax
    1230:	00 00                	add    %al,(%eax)
    1232:	66 29 c2             	sub    %ax,%dx
    1235:	66 89 d0             	mov    %dx,%ax
    1238:	66 c1 f8 02          	sar    $0x2,%ax
    123c:	66 89 c2             	mov    %ax,%dx
    123f:	66 89 d0             	mov    %dx,%ax
    1242:	66 01 c0             	add    %ax,%ax
    1245:	66 01 d0             	add    %dx,%ax
    1248:	67 66 8d 14          	lea    (%si),%dx
    124c:	85 00                	test   %eax,(%eax)
    124e:	00 00                	add    %al,(%eax)
    1250:	00 66 01             	add    %ah,0x1(%esi)
    1253:	d0 66 89             	shlb   -0x77(%esi)
    1256:	c2 66 c1             	ret    $0xc166
    1259:	e2 08                	loop   1263 <do_fork+0x165>
    125b:	66 01 d0             	add    %dx,%ax
    125e:	66 89 c2             	mov    %ax,%dx
    1261:	66 c1 e2 10          	shl    $0x10,%dx
    1265:	66 01 d0             	add    %dx,%ax
    1268:	66 f7 d8             	neg    %ax
    126b:	66 83 c0 02          	add    $0x2,%ax
    126f:	66 c1 e0 0c          	shl    $0xc,%ax
    1273:	66 89 c2             	mov    %ax,%dx
    1276:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    127b:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    1280:	66 a1 e0 2c 67 66    	mov    0x66672ce0,%ax
    1286:	8b 50 30             	mov    0x30(%eax),%edx
    1289:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    128e:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    1293:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1298:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    129f:	00 00                	add    %al,(%eax)
       // __asm__("enter $0,$0");
        _Schedule_once();
    12a1:	66 e8 be ef          	callw  263 <S+0x14>
    12a5:	ff                   	(bad)  
    12a6:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    12a9:	ec                   	in     (%dx),%al
    12aa:	06                   	push   %es
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    12ab:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    12b0:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    12b5:	66 a1 e0 2c 67 66    	mov    0x66672ce0,%ax
    12bb:	8b 50 28             	mov    0x28(%eax),%edx
    12be:	66 a1 e0 2c 67 66    	mov    0x66672ce0,%ax
    12c4:	8b 40 24             	mov    0x24(%eax),%eax
    12c7:	66 51                	push   %cx
    12c9:	66 52                	push   %dx
    12cb:	66 50                	push   %ax
    12cd:	66 e8 82 ee          	callw  153 <Message31+0x4>
    12d1:	ff                   	(bad)  
    12d2:	ff 66 83             	jmp    *-0x7d(%esi)
    12d5:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
         __asm__("add $6,%esp");
    12d8:	83 c4 06             	add    $0x6,%esp
        fork_prg -> ip = _CurrentProg -> ip;
    12db:	66 a1 e0 2c 67 66    	mov    0x66672ce0,%ax
    12e1:	8b 50 2c             	mov    0x2c(%eax),%edx
    12e4:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    12e9:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    12ee:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    12f3:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    12f9:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    12fb:	66 a1 e0 2c 67 66    	mov    0x66672ce0,%ax
    1301:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1304:	75 08                	jne    130e <do_fork+0x210>
            return 0;
    1306:	66 b8 00 00          	mov    $0x0,%ax
    130a:	00 00                	add    %al,(%eax)
    130c:	eb 1b                	jmp    1329 <do_fork+0x22b>
        }
        _CurrentProg -> eax = fork_prg -> id;
    130e:	66 a1 e0 2c 67 66    	mov    0x66672ce0,%ax
    1314:	8b 55 fc             	mov    -0x4(%ebp),%edx
    1317:	67 66 8b 52 3c       	mov    0x3c(%bp,%si),%dx
    131c:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    1320:	66 a1 e0 2c 67 66    	mov    0x66672ce0,%ax
    1326:	8b 00                	mov    (%eax),%eax
    1328:	90                   	nop
    }
}
    1329:	66 c9                	leavew 
    132b:	66 c3                	retw   

0000132d <thread_join>:
void thread_join(){
    132d:	66 55                	push   %bp
    132f:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    1332:	90                   	nop
    1333:	66 e8 09 00          	callw  1340 <thread_join+0x13>
    1337:	00 00                	add    %al,(%eax)
    1339:	66 85 c0             	test   %ax,%ax
    133c:	75 f5                	jne    1333 <thread_join+0x6>
    }
}
    133e:	66 5d                	pop    %bp
    1340:	66 c3                	retw   

00001342 <counter>:
int counter(){
    1342:	66 55                	push   %bp
    1344:	66 89 e5             	mov    %sp,%bp
    1347:	66 83 ec 08          	sub    $0x8,%sp
    int i = 0;
    134b:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1352:	00 00                	add    %al,(%eax)
    int count = 0;
    1354:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    135b:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER - 1;i ++){
    135d:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1364:	00 00                	add    %al,(%eax)
    1366:	eb 2e                	jmp    1396 <counter+0x54>
        if(PCB_list[i].prg_status == 1){
    1368:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    136d:	66 c1 e0 02          	shl    $0x2,%ax
    1371:	66 89 c2             	mov    %ax,%dx
    1374:	66 c1 e2 04          	shl    $0x4,%dx
    1378:	66 01 d0             	add    %dx,%ax
    137b:	66 05 f0 2a          	add    $0x2af0,%ax
    137f:	00 00                	add    %al,(%eax)
    1381:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1386:	66 83 f8 01          	cmp    $0x1,%ax
    138a:	75 05                	jne    1391 <counter+0x4f>
            count ++;
    138c:	67 66 ff 45 f8       	incw   -0x8(%di)
    }
}
int counter(){
    int i = 0;
    int count = 0;
    for(i = 0;i < PCB_NUMMER - 1;i ++){
    1391:	67 66 ff 45 fc       	incw   -0x4(%di)
    1396:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    139c:	7e ca                	jle    1368 <counter+0x26>
        if(PCB_list[i].prg_status == 1){
            count ++;
        }
    }
    return count;
    139e:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    13a3:	66 c9                	leavew 
    13a5:	66 c3                	retw   

000013a7 <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    13a7:	66 55                	push   %bp
    13a9:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    13ac:	67 66 8b 45 08       	mov    0x8(%di),%ax
    13b1:	67 66 8b 10          	mov    (%bx,%si),%dx
    13b5:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    13ba:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    13be:	67 66 8b 45 08       	mov    0x8(%di),%ax
    13c3:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    13c8:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    13cd:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    13d2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    13d7:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    13dc:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    13e1:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    13e6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    13eb:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    13f0:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    13f5:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    13fa:	67 66 8b 45 08       	mov    0x8(%di),%ax
    13ff:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    1404:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1409:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    140e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1413:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    1418:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    141d:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    1422:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1427:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    142c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1431:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    1436:	67 66 8b 45 08       	mov    0x8(%di),%ax
    143b:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    1440:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1445:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    144a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    144f:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    1454:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1459:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    145e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1463:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    1468:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    146d:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    1472:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1477:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    147c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1481:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    1486:	67 66 8b 45 08       	mov    0x8(%di),%ax
    148b:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    1490:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1495:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    149a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    149f:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    14a4:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    14a9:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    14ae:	66 5d                	pop    %bp
    14b0:	66 c3                	retw   

000014b2 <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    14b2:	66 55                	push   %bp
    14b4:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    14b7:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    14bc:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    14c1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    14c6:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    14cb:	67 66 8b 45 08       	mov    0x8(%di),%ax
    14d0:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    14d5:	66 51                	push   %cx
    14d7:	66 52                	push   %dx
    14d9:	66 50                	push   %ax
    14db:	66 e8 74 ec          	callw  153 <Message31+0x4>
    14df:	ff                   	(bad)  
    14e0:	ff 66 83             	jmp    *-0x7d(%esi)
    14e3:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    14e6:	c9                   	leave  
    14e7:	66 c3                	retw   

000014e9 <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    14e9:	66 55                	push   %bp
    14eb:	66 89 e5             	mov    %sp,%bp
    14ee:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    14f2:	66 e8 7a ed          	callw  270 <_Schedule_once+0xb>
    14f6:	ff                   	(bad)  
    14f7:	ff 67 66             	jmp    *0x66(%edi)
    14fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    14fd:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    1502:	66 c9                	leavew 
    1504:	66 c3                	retw   

00001506 <wait>:
void wait(){
    1506:	66 55                	push   %bp
    1508:	66 89 e5             	mov    %sp,%bp
    _wait();
    150b:	66 e8 7d ed          	callw  28c <_Schedule+0xd>
    150f:	ff                   	(bad)  
    1510:	ff 66 5d             	jmp    *0x5d(%esi)
    1513:	66 c3                	retw   
