
test.elf:     file format elf32-i386


Disassembly of section .text:

00000100 <test>:
     100:	8c c8                	mov    %cs,%eax
     102:	8e d8                	mov    %eax,%ds
     104:	8e d0                	mov    %eax,%ss
     106:	bc 00 01 cd 33       	mov    $0x33cd0100,%esp
     10b:	cd 39                	int    $0x39
     10d:	cd 38                	int    $0x38
     10f:	eb fe                	jmp    10f <test+0xf>
     111:	66 90                	xchg   %ax,%ax
     113:	66 90                	xchg   %ax,%ax
     115:	66 90                	xchg   %ax,%ax
     117:	66 90                	xchg   %ax,%ax
     119:	66 90                	xchg   %ax,%ax
     11b:	66 90                	xchg   %ax,%ax
     11d:	66 90                	xchg   %ax,%ax
     11f:	90                   	nop

00000120 <count>:
     120:	08 2d 00 00 00 00    	or     %ch,0x0

00000121 <alpha>:
     121:	2d 00 00 00 00       	sub    $0x0,%eax

00000122 <int_09_saved>:
     122:	00 00                	add    %al,(%eax)
	...

00000126 <program_saved>:
     126:	70 00                	jo     128 <program_saved+0x2>
	...

0000012a <ds_saved>:
     12a:	7c 00                	jl     12c <ds_saved+0x2>
	...

0000012e <return_save>:
     12e:	88 00                	mov    %al,(%eax)

00000130 <esi_save>:
     130:	96                   	xchg   %eax,%esi
     131:	00 00                	add    %al,(%eax)
	...

00000134 <temp>:
     134:	e8 03 b4 00 00       	call   b53c <_end+0x8658>

00000136 <kernelesp_saved>:
     136:	b4 00                	mov    $0x0,%ah
	...

0000013a <esp_saved_inkernel>:
     13a:	c8 00 00 00          	enter  $0x0,$0x0

0000013e <esp_saved_in_user>:
     13e:	f0 00 00             	lock add %al,(%eax)
	...

00000142 <ss_saved_in_user>:
     142:	2c 01                	sub    $0x1,%al
	...

00000146 <color>:
     146:	01 c2                	add    %eax,%edx

00000147 <ss_saved_fork>:
     147:	c2 01 00             	ret    $0x1
	...

0000014b <retaddr>:
     14b:	58                   	pop    %eax
     14c:	02 00                	add    (%eax),%al
	...

0000014f <Message31>:
     14f:	74 69                	je     1ba <_readinput+0x9>
     151:	6d                   	insl   (%dx),%es:(%edi)
     152:	65 3a 20             	cmp    %gs:(%eax),%ah

00000155 <_sys_stack_copy>:
     155:	c8 00 00 00          	enter  $0x0,$0x0
     159:	8e d0                	mov    %eax,%ss
     15b:	60                   	pusha  
     15c:	1e                   	push   %ds
     15d:	8b 46 06             	mov    0x6(%esi),%eax
     160:	8b 56 0a             	mov    0xa(%esi),%edx
     163:	8b 4e 0e             	mov    0xe(%esi),%ecx
     166:	8c db                	mov    %ds,%ebx

00000168 <while_loop1>:
     168:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
     16e:	8e d8                	mov    %eax,%ds
     170:	67 8b 1a             	mov    (%bp,%si),%ebx
     173:	8e d9                	mov    %ecx,%ds
     175:	67 89 1a             	mov    %ebx,(%bp,%si)
     178:	83 c2 02             	add    $0x2,%edx
     17b:	eb eb                	jmp    168 <while_loop1>

0000017d <end_for_copy>:
     17d:	1f                   	pop    %ds
     17e:	61                   	popa   
     17f:	c9                   	leave  
     180:	66 5a                	pop    %dx
     182:	ff e2                	jmp    *%edx

00000184 <_clearscreen>:
     184:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     189:	66 5a                	pop    %dx
     18b:	ff e2                	jmp    *%edx

0000018d <_printchar>:
     18d:	c8 00 00 00          	enter  $0x0,$0x0
     191:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
     196:	57                   	push   %edi
     197:	66 8b 4e 06          	mov    0x6(%esi),%cx
     19b:	66 8b 7e 0a          	mov    0xa(%esi),%di
     19f:	66 8b 56 0e          	mov    0xe(%esi),%dx
     1a3:	88 d5                	mov    %dl,%ch
     1a5:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
     1ac:	00 66 5a             	add    %ah,0x5a(%esi)
     1af:	ff e2                	jmp    *%edx

000001b1 <_readinput>:
     1b1:	c8 04 00 00          	enter  $0x4,$0x0
     1b5:	b4 00                	mov    $0x0,%ah
     1b7:	cd 16                	int    $0x16
     1b9:	b4 00                	mov    $0x0,%ah
     1bb:	66 67 89 04          	mov    %ax,(%si)
     1bf:	24 66                	and    $0x66,%al
     1c1:	67 8b 04             	mov    (%si),%eax
     1c4:	24 c9                	and    $0xc9,%al
     1c6:	66 5a                	pop    %dx
     1c8:	ff e2                	jmp    *%edx

000001ca <_showchar>:
     1ca:	c8 00 00 00          	enter  $0x0,$0x0
     1ce:	50                   	push   %eax
     1cf:	53                   	push   %ebx
     1d0:	8b 46 06             	mov    0x6(%esi),%eax
     1d3:	b4 0e                	mov    $0xe,%ah
     1d5:	b3 00                	mov    $0x0,%bl
     1d7:	cd 10                	int    $0x10
     1d9:	5b                   	pop    %ebx
     1da:	58                   	pop    %eax
     1db:	c9                   	leave  
     1dc:	66 5a                	pop    %dx
     1de:	ff e2                	jmp    *%edx

000001e0 <_setPoint>:
     1e0:	c8 00 00 00          	enter  $0x0,$0x0
     1e4:	53                   	push   %ebx
     1e5:	b7 00                	mov    $0x0,%bh
     1e7:	8a 77 06             	mov    0x6(%edi),%dh
     1ea:	8a 57 0a             	mov    0xa(%edi),%dl
     1ed:	b4 02                	mov    $0x2,%ah
     1ef:	cd 10                	int    $0x10
     1f1:	5b                   	pop    %ebx
     1f2:	c9                   	leave  
     1f3:	66 5a                	pop    %dx
     1f5:	ff e2                	jmp    *%edx

000001f7 <_loadP>:
     1f7:	c8 00 00 00          	enter  $0x0,$0x0
     1fb:	60                   	pusha  
     1fc:	06                   	push   %es
     1fd:	1e                   	push   %ds
     1fe:	8c c8                	mov    %cs,%eax
     200:	8e d8                	mov    %eax,%ds
     202:	8b 46 0e             	mov    0xe(%esi),%eax
     205:	8e c0                	mov    %eax,%es
     207:	b2 00                	mov    $0x0,%dl
     209:	8b 46 0a             	mov    0xa(%esi),%eax
     20c:	b3 12                	mov    $0x12,%bl
     20e:	f6 f3                	div    %bl
     210:	88 e1                	mov    %ah,%cl
     212:	30 e4                	xor    %ah,%ah
     214:	b3 02                	mov    $0x2,%bl
     216:	f6 f3                	div    %bl
     218:	88 e6                	mov    %ah,%dh
     21a:	88 c5                	mov    %al,%ch
     21c:	8a 46 06             	mov    0x6(%esi),%al
     21f:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
     224:	cd 13                	int    $0x13
     226:	1f                   	pop    %ds
     227:	07                   	pop    %es
     228:	61                   	popa   
     229:	c9                   	leave  
     22a:	66 5a                	pop    %dx
     22c:	ff e2                	jmp    *%edx

0000022e <_RunProgress>:
     22e:	c8 00 00 00          	enter  $0x0,$0x0
     232:	8c c8                	mov    %cs,%eax
     234:	8e d8                	mov    %eax,%ds
     236:	8e c0                	mov    %eax,%es
     238:	8b 5e 06             	mov    0x6(%esi),%ebx
     23b:	c7 06 26 01 00 01    	movl   $0x1000126,(%esi)
     241:	89 1e                	mov    %ebx,(%esi)
     243:	28 01                	sub    %al,(%ecx)
     245:	66 89 26             	mov    %sp,(%esi)
     248:	3a 01                	cmp    (%ecx),%al
     24a:	26 ff 1e             	lcall  *%es:(%esi)
     24d:	26 01 8c c8 8e d8 8e 	add    %ecx,%es:-0x3f712772(%eax,%ecx,8)
     254:	c0 

0000024f <S>:
     24f:	8c c8                	mov    %cs,%eax
     251:	8e d8                	mov    %eax,%ds
     253:	8e c0                	mov    %eax,%es
     255:	8e d0                	mov    %eax,%ss
     257:	66 8b 26             	mov    (%esi),%sp
     25a:	3a 01                	cmp    (%ecx),%al
     25c:	b4 00                	mov    $0x0,%ah
     25e:	cd 16                	int    $0x16
     260:	c9                   	leave  
     261:	66 5a                	pop    %dx
     263:	ff e2                	jmp    *%edx

00000265 <_Schedule_once>:
     265:	c8 00 00 00          	enter  $0x0,$0x0
     269:	cd 41                	int    $0x41
     26b:	c9                   	leave  
     26c:	66 5a                	pop    %dx
     26e:	ff e2                	jmp    *%edx

00000270 <_fork_user>:
     270:	c8 00 00 00          	enter  $0x0,$0x0
     274:	cd 39                	int    $0x39
     276:	c9                   	leave  
     277:	66 5a                	pop    %dx
     279:	ff e2                	jmp    *%edx

0000027b <_Schedule>:
     27b:	c8 00 00 00          	enter  $0x0,$0x0
     27f:	16                   	push   %ss
     280:	cd 42                	int    $0x42
     282:	17                   	pop    %ss
     283:	c9                   	leave  
     284:	66 5a                	pop    %dx
     286:	ff e2                	jmp    *%edx

00000288 <_wait>:
     288:	c8 00 00 00          	enter  $0x0,$0x0
     28c:	cd 43                	int    $0x43
     28e:	c9                   	leave  
     28f:	66 5a                	pop    %dx
     291:	ff e2                	jmp    *%edx

00000293 <_exit>:
     293:	c8 00 00 00          	enter  $0x0,$0x0
     297:	66 67 8b 45 06       	mov    0x6(%di),%ax
     29c:	66 50                	push   %ax
     29e:	cd 3a                	int    $0x3a
     2a0:	c9                   	leave  
     2a1:	66 5a                	pop    %dx
     2a3:	ff e2                	jmp    *%edx

000002a5 <_SetINT20h>:
     2a5:	fa                   	cli    
     2a6:	1e                   	push   %ds
     2a7:	06                   	push   %es
     2a8:	8c c8                	mov    %cs,%eax
     2aa:	8e d8                	mov    %eax,%ds
     2ac:	8e c0                	mov    %eax,%es
     2ae:	8c 16                	mov    %ss,(%esi)
     2b0:	42                   	inc    %edx
     2b1:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     2b7:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     2bb:	26 3a 01             	cmp    %es:(%ecx),%al
     2be:	53                   	push   %ebx
     2bf:	51                   	push   %ecx
     2c0:	52                   	push   %edx
     2c1:	b4 01                	mov    $0x1,%ah
     2c3:	cd 16                	int    $0x16
     2c5:	5a                   	pop    %edx
     2c6:	59                   	pop    %ecx
     2c7:	5b                   	pop    %ebx
     2c8:	8e 16                	mov    (%esi),%ss
     2ca:	42                   	inc    %edx
     2cb:	01 66 8b             	add    %esp,-0x75(%esi)
     2ce:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     2d2:	1f                   	pop    %ds
     2d3:	74 0a                	je     2df <going_on>
     2d5:	50                   	push   %eax
     2d6:	b4 00                	mov    $0x0,%ah
     2d8:	cd 16                	int    $0x16
     2da:	58                   	pop    %eax
     2db:	fb                   	sti    
     2dc:	cd 38                	int    $0x38
     2de:	cf                   	iret   

000002df <going_on>:
     2df:	fb                   	sti    
     2e0:	cf                   	iret   

000002e1 <_SetINT08h_turn_around>:
     2e1:	fa                   	cli    
     2e2:	e8 2b 05 6a 00       	call   6a0812 <_end+0x69d92e>
     2e7:	e8 ae 0c e8 97       	call   97e80f9a <_end+0x97e7e0b6>
     2ec:	05 b0 20 e6 20       	add    $0x20e620b0,%eax
     2f1:	e6 a0                	out    %al,$0xa0
     2f3:	fb                   	sti    
     2f4:	cf                   	iret   

000002f5 <_SetINT08h>:
     2f5:	60                   	pusha  
     2f6:	0f a8                	push   %gs
     2f8:	1e                   	push   %ds
     2f9:	06                   	push   %es
     2fa:	16                   	push   %ss
     2fb:	8c c8                	mov    %cs,%eax
     2fd:	8e c0                	mov    %eax,%es
     2ff:	8e d8                	mov    %eax,%ds
     301:	8e d0                	mov    %eax,%ss
     303:	fe 0e                	decb   (%esi)
     305:	20 01                	and    %al,(%ecx)
     307:	75 4f                	jne    358 <end>

00000309 <notc>:
     309:	80 3e 21             	cmpb   $0x21,(%esi)
     30c:	01 2d 75 07 c6 06    	add    %ebp,0x6c60775
     312:	21 01                	and    %eax,(%ecx)
     314:	5c                   	pop    %esp
     315:	eb 2a                	jmp    341 <show>

00000317 <changleft>:
     317:	80 3e 21             	cmpb   $0x21,(%esi)
     31a:	01 5c 75 07          	add    %ebx,0x7(%ebp,%esi,2)
     31e:	c6 06 21             	movb   $0x21,(%esi)
     321:	01 7c eb 1c          	add    %edi,0x1c(%ebx,%ebp,8)

00000325 <changright>:
     325:	80 3e 21             	cmpb   $0x21,(%esi)
     328:	01 7c 75 07          	add    %edi,0x7(%ebp,%esi,2)
     32c:	c6 06 21             	movb   $0x21,(%esi)
     32f:	01 2f                	add    %ebp,(%edi)
     331:	eb 0e                	jmp    341 <show>

00000333 <changheng>:
     333:	80 3e 21             	cmpb   $0x21,(%esi)
     336:	01 2f                	add    %ebp,(%edi)
     338:	75 cf                	jne    309 <notc>
     33a:	c6 06 21             	movb   $0x21,(%esi)
     33d:	01 2d eb 00 b9 00    	add    %ebp,0xb900eb

00000341 <show>:
     341:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     346:	b4 09                	mov    $0x9,%ah
     348:	8a 26                	mov    (%esi),%ah
     34a:	46                   	inc    %esi
     34b:	01 a0 21 01 65 a3    	add    %esp,-0x5c9afedf(%eax)
     351:	8e 00                	mov    (%eax),%es
     353:	c6 06 20             	movb   $0x20,(%esi)
     356:	01 08                	add    %ecx,(%eax)

00000358 <end>:
     358:	b0 20                	mov    $0x20,%al
     35a:	e6 20                	out    %al,$0x20
     35c:	e6 a0                	out    %al,$0xa0
     35e:	17                   	pop    %ss
     35f:	07                   	pop    %es
     360:	1f                   	pop    %ds
     361:	0f a9                	pop    %gs
     363:	61                   	popa   
     364:	fb                   	sti    
     365:	cf                   	iret   

00000366 <_SetINT09h>:
     366:	fa                   	cli    
     367:	1e                   	push   %ds
     368:	06                   	push   %es
     369:	8c c8                	mov    %cs,%eax
     36b:	8e d8                	mov    %eax,%ds
     36d:	8e c0                	mov    %eax,%es
     36f:	8e d0                	mov    %eax,%ss
     371:	8c 16                	mov    %ss,(%esi)
     373:	42                   	inc    %edx
     374:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     37a:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     37e:	26 3a 01             	cmp    %es:(%ecx),%al
     381:	60                   	pusha  
     382:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     387:	8a 26                	mov    (%esi),%ah
     389:	46                   	inc    %esi
     38a:	01 b0 4f 65 a3 78    	add    %esi,0x78a3654f(%eax)
     390:	00 b0 55 65 a3 7a    	add    %dh,0x7aa36555(%eax)
     396:	00 b0 43 65 a3 7c    	add    %dh,0x7ca36543(%eax)
     39c:	00 b0 48 65 a3 7e    	add    %dh,0x7ea36548(%eax)
     3a2:	00 b0 53 65 a3 80    	add    %dh,-0x7f5c9aad(%eax)
     3a8:	00 b0 21 65 a3 82    	add    %dh,-0x7d5c9adf(%eax)
     3ae:	00 b0 4f 65 a3 84    	add    %dh,-0x7b5c9ab1(%eax)
     3b4:	00 b0 55 65 a3 86    	add    %dh,-0x795c9aab(%eax)
     3ba:	00 b0 43 65 a3 88    	add    %dh,-0x775c9abd(%eax)
     3c0:	00 b0 48 65 a3 8a    	add    %dh,-0x755c9ab8(%eax)
     3c6:	00 b0 21 65 a3 8c    	add    %dh,-0x735c9adf(%eax)
     3cc:	00 61 80             	add    %ah,-0x80(%ecx)
     3cf:	fc                   	cld    
     3d0:	06                   	push   %es
     3d1:	75 06                	jne    3d9 <cont>
     3d3:	b4 01                	mov    $0x1,%ah
     3d5:	88 26                	mov    %ah,(%esi)
     3d7:	46                   	inc    %esi
     3d8:	01 fe                	add    %edi,%esi

000003d9 <cont>:
     3d9:	fe 06                	incb   (%esi)
     3db:	46                   	inc    %esi
     3dc:	01 8c c8 8e c0 fb 9c 	add    %ecx,-0x63043f72(%eax,%ecx,8)
     3e3:	26 ff 1e             	lcall  *%es:(%esi)
     3e6:	22 01                	and    (%ecx),%al
     3e8:	8e 16                	mov    (%esi),%ss
     3ea:	42                   	inc    %edx
     3eb:	01 66 8b             	add    %esp,-0x75(%esi)
     3ee:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     3f2:	1f                   	pop    %ds
     3f3:	cf                   	iret   

000003f4 <_SetINT33h>:
     3f4:	fa                   	cli    
     3f5:	c8 00 00 00          	enter  $0x0,$0x0
     3f9:	60                   	pusha  
     3fa:	1e                   	push   %ds
     3fb:	0f a8                	push   %gs
     3fd:	06                   	push   %es
     3fe:	8c c8                	mov    %cs,%eax
     400:	8e c0                	mov    %eax,%es
     402:	8e d8                	mov    %eax,%ds
     404:	8c 16                	mov    %ss,(%esi)
     406:	42                   	inc    %edx
     407:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     40d:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     411:	26 3a 01             	cmp    %es:(%ecx),%al
     414:	6a 00                	push   $0x0
     416:	e8 f9 06 8e 16       	call   168e0b14 <_end+0x168ddc30>
     41b:	42                   	inc    %edx
     41c:	01 66 8b             	add    %esp,-0x75(%esi)
     41f:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     423:	0f a9                	pop    %gs
     425:	1f                   	pop    %ds
     426:	61                   	popa   
     427:	fb                   	sti    
     428:	c9                   	leave  
     429:	cf                   	iret   

0000042a <_SetINT34h>:
     42a:	fa                   	cli    
     42b:	c8 00 00 00          	enter  $0x0,$0x0
     42f:	60                   	pusha  
     430:	1e                   	push   %ds
     431:	0f a8                	push   %gs
     433:	06                   	push   %es
     434:	8c c8                	mov    %cs,%eax
     436:	8e c0                	mov    %eax,%es
     438:	8e d8                	mov    %eax,%ds
     43a:	8c 16                	mov    %ss,(%esi)
     43c:	42                   	inc    %edx
     43d:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     443:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     447:	26 3a 01             	cmp    %es:(%ecx),%al
     44a:	6a 00                	push   $0x0
     44c:	e8 73 07 8e 16       	call   168e0bc4 <_end+0x168ddce0>
     451:	42                   	inc    %edx
     452:	01 66 8b             	add    %esp,-0x75(%esi)
     455:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     459:	0f a9                	pop    %gs
     45b:	1f                   	pop    %ds
     45c:	61                   	popa   
     45d:	fb                   	sti    
     45e:	c9                   	leave  
     45f:	cf                   	iret   

00000460 <_SetINT35h>:
     460:	60                   	pusha  
     461:	1e                   	push   %ds
     462:	0f a8                	push   %gs
     464:	06                   	push   %es
     465:	8c c8                	mov    %cs,%eax
     467:	8e c0                	mov    %eax,%es
     469:	8e d8                	mov    %eax,%ds
     46b:	8c 16                	mov    %ss,(%esi)
     46d:	42                   	inc    %edx
     46e:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     474:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     478:	26 3a 01             	cmp    %es:(%ecx),%al
     47b:	6a 00                	push   $0x0
     47d:	e8 21 08 8e 16       	call   168e0ca3 <_end+0x168dddbf>
     482:	42                   	inc    %edx
     483:	01 66 8b             	add    %esp,-0x75(%esi)
     486:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     48a:	0f a9                	pop    %gs
     48c:	1f                   	pop    %ds
     48d:	61                   	popa   
     48e:	fb                   	sti    
     48f:	cf                   	iret   

00000490 <_SetINT36h>:
     490:	60                   	pusha  
     491:	1e                   	push   %ds
     492:	0f a8                	push   %gs
     494:	06                   	push   %es
     495:	8c c8                	mov    %cs,%eax
     497:	8e c0                	mov    %eax,%es
     499:	8e d8                	mov    %eax,%ds
     49b:	8c 16                	mov    %ss,(%esi)
     49d:	42                   	inc    %edx
     49e:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     4a4:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     4a8:	26 3a 01             	cmp    %es:(%ecx),%al
     4ab:	6a 00                	push   $0x0
     4ad:	e8 77 08 8e 16       	call   168e0d29 <_end+0x168dde45>
     4b2:	42                   	inc    %edx
     4b3:	01 66 8b             	add    %esp,-0x75(%esi)
     4b6:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     4ba:	0f a9                	pop    %gs
     4bc:	1f                   	pop    %ds
     4bd:	61                   	popa   
     4be:	fb                   	sti    
     4bf:	cf                   	iret   

000004c0 <_SetINT21h>:
     4c0:	c8 00 00 00          	enter  $0x0,$0x0
     4c4:	60                   	pusha  
     4c5:	1e                   	push   %ds
     4c6:	0f a8                	push   %gs
     4c8:	06                   	push   %es
     4c9:	8c c8                	mov    %cs,%eax
     4cb:	8e c0                	mov    %eax,%es
     4cd:	8e d8                	mov    %eax,%ds
     4cf:	8b 46 08             	mov    0x8(%esi),%eax
     4d2:	80 fc 00             	cmp    $0x0,%ah
     4d5:	74 16                	je     4ed <fn0>
     4d7:	80 fc 01             	cmp    $0x1,%ah
     4da:	74 21                	je     4fd <fn1>
     4dc:	80 fc 02             	cmp    $0x2,%ah
     4df:	74 3d                	je     51e <fn2>
     4e1:	80 fc 03             	cmp    $0x3,%ah
     4e4:	74 5f                	je     545 <fn3>
     4e6:	07                   	pop    %es
     4e7:	0f a9                	pop    %gs
     4e9:	1f                   	pop    %ds
     4ea:	61                   	popa   
     4eb:	c9                   	leave  
     4ec:	cf                   	iret   

000004ed <fn0>:
     4ed:	8b 46 0a             	mov    0xa(%esi),%eax
     4f0:	b4 0e                	mov    $0xe,%ah
     4f2:	b3 00                	mov    $0x0,%bl
     4f4:	cd 10                	int    $0x10
     4f6:	07                   	pop    %es
     4f7:	0f a9                	pop    %gs
     4f9:	1f                   	pop    %ds
     4fa:	61                   	popa   
     4fb:	c9                   	leave  
     4fc:	cf                   	iret   

000004fd <fn1>:
     4fd:	66 83 ec 04          	sub    $0x4,%sp
     501:	b4 00                	mov    $0x0,%ah
     503:	cd 16                	int    $0x16
     505:	b4 00                	mov    $0x0,%ah
     507:	66 67 89 04          	mov    %ax,(%si)
     50b:	24 66                	and    $0x66,%al
     50d:	67 8b 04             	mov    (%si),%eax
     510:	24 66                	and    $0x66,%al
     512:	83 c4 04             	add    $0x4,%esp
     515:	8e e0                	mov    %eax,%fs
     517:	07                   	pop    %es
     518:	0f a9                	pop    %gs
     51a:	1f                   	pop    %ds
     51b:	61                   	popa   
     51c:	c9                   	leave  
     51d:	cf                   	iret   

0000051e <fn2>:
     51e:	66 83 ec 04          	sub    $0x4,%sp
     522:	b4 00                	mov    $0x0,%ah
     524:	cd 16                	int    $0x16
     526:	b4 00                	mov    $0x0,%ah
     528:	66 67 89 04          	mov    %ax,(%si)
     52c:	24 66                	and    $0x66,%al
     52e:	67 8b 04             	mov    (%si),%eax
     531:	24 b4                	and    $0xb4,%al
     533:	0e                   	push   %cs
     534:	b3 00                	mov    $0x0,%bl
     536:	cd 10                	int    $0x10
     538:	66 83 c4 04          	add    $0x4,%sp
     53c:	8e e0                	mov    %eax,%fs
     53e:	07                   	pop    %es
     53f:	0f a9                	pop    %gs
     541:	1f                   	pop    %ds
     542:	61                   	popa   
     543:	c9                   	leave  
     544:	cf                   	iret   

00000545 <fn3>:
     545:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     54a:	07                   	pop    %es
     54b:	0f a9                	pop    %gs
     54d:	1f                   	pop    %ds
     54e:	61                   	popa   
     54f:	c9                   	leave  
     550:	cf                   	iret   

00000551 <_SetINT37h>:
     551:	fa                   	cli    
     552:	e8 83 03 cf fa       	call   facf08da <_end+0xfaced9f6>

00000556 <_SetINT38h>:
     556:	fa                   	cli    
     557:	50                   	push   %eax
     558:	1e                   	push   %ds
     559:	8c c8                	mov    %cs,%eax
     55b:	8e d8                	mov    %eax,%ds
     55d:	6a 00                	push   $0x0
     55f:	e8 a6 0b 1f 58       	call   581f110a <_end+0x581ee226>
     564:	cf                   	iret   

00000565 <_SetINT39h>:
     565:	fa                   	cli    
     566:	c8 00 00 00          	enter  $0x0,$0x0
     56a:	1e                   	push   %ds
     56b:	6a 00                	push   $0x0
     56d:	8c c8                	mov    %cs,%eax
     56f:	8e d8                	mov    %eax,%ds
     571:	e8 fe 0c 1f c9       	call   c91f1274 <_end+0xc91ee390>
     576:	cf                   	iret   

00000577 <_SetINT41h>:
     577:	fa                   	cli    
     578:	e8 95 02 e8 06       	call   6e80812 <_end+0x6e7d92e>
     57d:	03 b0 20 e6 20 e6    	add    -0x19df19e0(%eax),%esi
     583:	a0 fb cf fa c8       	mov    0xc8facffb,%al

00000586 <_SetINT43h>:
     586:	fa                   	cli    
     587:	c8 00 00 00          	enter  $0x0,$0x0
     58b:	1e                   	push   %ds
     58c:	6a 00                	push   $0x0
     58e:	8c c8                	mov    %cs,%eax
     590:	8e d8                	mov    %eax,%ds
     592:	e8 f8 0b 1f c9       	call   c91f118f <_end+0xc91ee2ab>
     597:	cf                   	iret   

00000598 <_SetINT3Ah>:
     598:	fa                   	cli    
     599:	c8 00 00 00          	enter  $0x0,$0x0
     59d:	1e                   	push   %ds
     59e:	66 67 8b 45 08       	mov    0x8(%di),%ax
     5a3:	66 50                	push   %ax
     5a5:	6a 00                	push   $0x0
     5a7:	8c c8                	mov    %cs,%eax
     5a9:	8e d8                	mov    %eax,%ds
     5ab:	e8 72 0b 1f c9       	call   c91f1122 <_end+0xc91ee23e>
     5b0:	cf                   	iret   

000005b1 <_initialInt>:
     5b1:	c8 00 00 00          	enter  $0x0,$0x0
     5b5:	60                   	pusha  
     5b6:	06                   	push   %es
     5b7:	1e                   	push   %ds
     5b8:	8c c8                	mov    %cs,%eax
     5ba:	8e d8                	mov    %eax,%ds
     5bc:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     5c1:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
     5c6:	00 f7                	add    %dh,%bh
     5c8:	e3 89                	jecxz  553 <_SetINT37h+0x2>
     5ca:	c7                   	(bad)  
     5cb:	b8 a5 02 26 89       	mov    $0x892602a5,%eax
     5d0:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     5d5:	45                   	inc    %ebp
     5d6:	02 1f                	add    (%edi),%bl
     5d8:	07                   	pop    %es
     5d9:	61                   	popa   
     5da:	60                   	pusha  
     5db:	06                   	push   %es
     5dc:	1e                   	push   %ds
     5dd:	8c c8                	mov    %cs,%eax
     5df:	8e d8                	mov    %eax,%ds
     5e1:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     5e6:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
     5eb:	00 f7                	add    %dh,%bh
     5ed:	e3 89                	jecxz  578 <_SetINT41h+0x1>
     5ef:	c7                   	(bad)  
     5f0:	b8 f4 03 26 89       	mov    $0x892603f4,%eax
     5f5:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     5fa:	45                   	inc    %ebp
     5fb:	02 1f                	add    (%edi),%bl
     5fd:	07                   	pop    %es
     5fe:	61                   	popa   
     5ff:	60                   	pusha  
     600:	06                   	push   %es
     601:	1e                   	push   %ds
     602:	8c c8                	mov    %cs,%eax
     604:	8e d8                	mov    %eax,%ds
     606:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     60b:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
     610:	00 f7                	add    %dh,%bh
     612:	e3 89                	jecxz  59d <_SetINT3Ah+0x5>
     614:	c7                   	(bad)  
     615:	b8 2a 04 26 89       	mov    $0x8926042a,%eax
     61a:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     61f:	45                   	inc    %ebp
     620:	02 1f                	add    (%edi),%bl
     622:	07                   	pop    %es
     623:	61                   	popa   
     624:	60                   	pusha  
     625:	06                   	push   %es
     626:	1e                   	push   %ds
     627:	8c c8                	mov    %cs,%eax
     629:	8e d8                	mov    %eax,%ds
     62b:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     630:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
     635:	00 f7                	add    %dh,%bh
     637:	e3 89                	jecxz  5c2 <_initialInt+0x11>
     639:	c7                   	(bad)  
     63a:	b8 60 04 26 89       	mov    $0x89260460,%eax
     63f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     644:	45                   	inc    %ebp
     645:	02 1f                	add    (%edi),%bl
     647:	07                   	pop    %es
     648:	61                   	popa   
     649:	60                   	pusha  
     64a:	06                   	push   %es
     64b:	1e                   	push   %ds
     64c:	8c c8                	mov    %cs,%eax
     64e:	8e d8                	mov    %eax,%ds
     650:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     655:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
     65a:	00 f7                	add    %dh,%bh
     65c:	e3 89                	jecxz  5e7 <_initialInt+0x36>
     65e:	c7                   	(bad)  
     65f:	b8 90 04 26 89       	mov    $0x89260490,%eax
     664:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     669:	45                   	inc    %ebp
     66a:	02 1f                	add    (%edi),%bl
     66c:	07                   	pop    %es
     66d:	61                   	popa   
     66e:	60                   	pusha  
     66f:	06                   	push   %es
     670:	1e                   	push   %ds
     671:	8c c8                	mov    %cs,%eax
     673:	8e d8                	mov    %eax,%ds
     675:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     67a:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
     67f:	00 f7                	add    %dh,%bh
     681:	e3 89                	jecxz  60c <_initialInt+0x5b>
     683:	c7                   	(bad)  
     684:	b8 c0 04 26 89       	mov    $0x892604c0,%eax
     689:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     68e:	45                   	inc    %ebp
     68f:	02 1f                	add    (%edi),%bl
     691:	07                   	pop    %es
     692:	61                   	popa   
     693:	60                   	pusha  
     694:	06                   	push   %es
     695:	1e                   	push   %ds
     696:	8c c8                	mov    %cs,%eax
     698:	8e d8                	mov    %eax,%ds
     69a:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     69f:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
     6a4:	00 f7                	add    %dh,%bh
     6a6:	e3 89                	jecxz  631 <_initialInt+0x80>
     6a8:	c7                   	(bad)  
     6a9:	b8 51 05 26 89       	mov    $0x89260551,%eax
     6ae:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     6b3:	45                   	inc    %ebp
     6b4:	02 1f                	add    (%edi),%bl
     6b6:	07                   	pop    %es
     6b7:	61                   	popa   
     6b8:	60                   	pusha  
     6b9:	06                   	push   %es
     6ba:	1e                   	push   %ds
     6bb:	8c c8                	mov    %cs,%eax
     6bd:	8e d8                	mov    %eax,%ds
     6bf:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     6c4:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
     6c9:	00 f7                	add    %dh,%bh
     6cb:	e3 89                	jecxz  656 <_initialInt+0xa5>
     6cd:	c7                   	(bad)  
     6ce:	b8 56 05 26 89       	mov    $0x89260556,%eax
     6d3:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     6d8:	45                   	inc    %ebp
     6d9:	02 1f                	add    (%edi),%bl
     6db:	07                   	pop    %es
     6dc:	61                   	popa   
     6dd:	60                   	pusha  
     6de:	06                   	push   %es
     6df:	1e                   	push   %ds
     6e0:	8c c8                	mov    %cs,%eax
     6e2:	8e d8                	mov    %eax,%ds
     6e4:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     6e9:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
     6ee:	00 f7                	add    %dh,%bh
     6f0:	e3 89                	jecxz  67b <_initialInt+0xca>
     6f2:	c7                   	(bad)  
     6f3:	b8 65 05 26 89       	mov    $0x89260565,%eax
     6f8:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     6fd:	45                   	inc    %ebp
     6fe:	02 1f                	add    (%edi),%bl
     700:	07                   	pop    %es
     701:	61                   	popa   
     702:	60                   	pusha  
     703:	06                   	push   %es
     704:	1e                   	push   %ds
     705:	8c c8                	mov    %cs,%eax
     707:	8e d8                	mov    %eax,%ds
     709:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     70e:	b8 3a 00 bb 04       	mov    $0x4bb003a,%eax
     713:	00 f7                	add    %dh,%bh
     715:	e3 89                	jecxz  6a0 <_initialInt+0xef>
     717:	c7                   	(bad)  
     718:	b8 98 05 26 89       	mov    $0x89260598,%eax
     71d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     722:	45                   	inc    %ebp
     723:	02 1f                	add    (%edi),%bl
     725:	07                   	pop    %es
     726:	61                   	popa   
     727:	60                   	pusha  
     728:	06                   	push   %es
     729:	1e                   	push   %ds
     72a:	8c c8                	mov    %cs,%eax
     72c:	8e d8                	mov    %eax,%ds
     72e:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     733:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
     738:	00 f7                	add    %dh,%bh
     73a:	e3 89                	jecxz  6c5 <_initialInt+0x114>
     73c:	c7                   	(bad)  
     73d:	b8 77 05 26 89       	mov    $0x89260577,%eax
     742:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     747:	45                   	inc    %ebp
     748:	02 1f                	add    (%edi),%bl
     74a:	07                   	pop    %es
     74b:	61                   	popa   
     74c:	60                   	pusha  
     74d:	06                   	push   %es
     74e:	1e                   	push   %ds
     74f:	8c c8                	mov    %cs,%eax
     751:	8e d8                	mov    %eax,%ds
     753:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     758:	b8 42 00 bb 04       	mov    $0x4bb0042,%eax
     75d:	00 f7                	add    %dh,%bh
     75f:	e3 89                	jecxz  6ea <_initialInt+0x139>
     761:	c7                   	(bad)  
     762:	b8 e1 02 26 89       	mov    $0x892602e1,%eax
     767:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     76c:	45                   	inc    %ebp
     76d:	02 1f                	add    (%edi),%bl
     76f:	07                   	pop    %es
     770:	61                   	popa   
     771:	60                   	pusha  
     772:	06                   	push   %es
     773:	1e                   	push   %ds
     774:	8c c8                	mov    %cs,%eax
     776:	8e d8                	mov    %eax,%ds
     778:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     77d:	b8 43 00 bb 04       	mov    $0x4bb0043,%eax
     782:	00 f7                	add    %dh,%bh
     784:	e3 89                	jecxz  70f <_initialInt+0x15e>
     786:	c7                   	(bad)  
     787:	b8 86 05 26 89       	mov    $0x89260586,%eax
     78c:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     791:	45                   	inc    %ebp
     792:	02 1f                	add    (%edi),%bl
     794:	07                   	pop    %es
     795:	61                   	popa   
     796:	c9                   	leave  
     797:	66 5a                	pop    %dx
     799:	ff e2                	jmp    *%edx

0000079b <_initialInt_09h>:
     79b:	c8 00 00 00          	enter  $0x0,$0x0
     79f:	a1 24 00 a3 22       	mov    0x22a30024,%eax
     7a4:	01 a1 26 00 a3 24    	add    %esp,0x24a30026(%ecx)
     7aa:	01 60 06             	add    %esp,0x6(%eax)
     7ad:	1e                   	push   %ds
     7ae:	8c c8                	mov    %cs,%eax
     7b0:	8e d8                	mov    %eax,%ds
     7b2:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     7b7:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
     7bc:	00 f7                	add    %dh,%bh
     7be:	e3 89                	jecxz  749 <_initialInt+0x198>
     7c0:	c7                   	(bad)  
     7c1:	b8 66 03 26 89       	mov    $0x89260366,%eax
     7c6:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     7cb:	45                   	inc    %ebp
     7cc:	02 1f                	add    (%edi),%bl
     7ce:	07                   	pop    %es
     7cf:	61                   	popa   
     7d0:	c9                   	leave  
     7d1:	66 5a                	pop    %dx
     7d3:	ff e2                	jmp    *%edx

000007d5 <_initialInt_08h>:
     7d5:	c8 00 00 00          	enter  $0x0,$0x0
     7d9:	b0 40                	mov    $0x40,%al
     7db:	e6 43                	out    %al,$0x43
     7dd:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
     7e2:	88 e0                	mov    %ah,%al
     7e4:	e6 40                	out    %al,$0x40
     7e6:	60                   	pusha  
     7e7:	06                   	push   %es
     7e8:	1e                   	push   %ds
     7e9:	8c c8                	mov    %cs,%eax
     7eb:	8e d8                	mov    %eax,%ds
     7ed:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     7f2:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
     7f7:	00 f7                	add    %dh,%bh
     7f9:	e3 89                	jecxz  784 <_initialInt+0x1d3>
     7fb:	c7                   	(bad)  
     7fc:	b8 e1 02 26 89       	mov    $0x892602e1,%eax
     801:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     806:	45                   	inc    %ebp
     807:	02 1f                	add    (%edi),%bl
     809:	07                   	pop    %es
     80a:	61                   	popa   
     80b:	c9                   	leave  
     80c:	66 5a                	pop    %dx
     80e:	ff e2                	jmp    *%edx

00000810 <_save>:
     810:	66 89 26             	mov    %sp,(%esi)
     813:	3a 01                	cmp    (%ecx),%al
     815:	1e                   	push   %ds
     816:	0e                   	push   %cs
     817:	1f                   	pop    %ds
     818:	8f 06                	popl   (%esi)
     81a:	2a 01                	sub    (%ecx),%al
     81c:	8f 06                	popl   (%esi)
     81e:	2e 01 66 89          	add    %esp,%cs:-0x77(%esi)
     822:	26 36 01 66 89       	es add %esp,%ss:%es:-0x77(%esi)
     827:	36 30 01             	xor    %al,%ss:(%ecx)
     82a:	66 8b 36             	mov    (%esi),%si
     82d:	e0 2e                	loopne 85d <_save+0x4d>
     82f:	66 83 c6 2c          	add    $0x2c,%si
     833:	67 8f 06 67 8f       	popl   -0x7099
     838:	46                   	inc    %esi
     839:	04 67                	add    $0x67,%al
     83b:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
     842:	46                   	inc    %esi
     843:	08 67 c7             	or     %ah,-0x39(%edi)
     846:	46                   	inc    %esi
     847:	0a 00                	or     (%eax),%al
     849:	00 66 67             	add    %ah,0x67(%esi)
     84c:	89 66 fc             	mov    %esp,-0x4(%esi)
     84f:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
     853:	8c de                	mov    %ds,%esi
     855:	8e d6                	mov    %esi,%ss
     857:	66 8b 26             	mov    (%esi),%sp
     85a:	e0 2e                	loopne 88a <_restart+0x6>
     85c:	66 83 c4 24          	add    $0x24,%sp
     860:	6a 00                	push   $0x0
     862:	ff 36                	pushl  (%esi)
     864:	2a 01                	sub    (%ecx),%al
     866:	6a 00                	push   $0x0
     868:	06                   	push   %es
     869:	66 55                	push   %bp
     86b:	66 57                	push   %di
     86d:	66 ff 36             	pushw  (%esi)
     870:	30 01                	xor    %al,(%ecx)
     872:	66 52                	push   %dx
     874:	66 51                	push   %cx
     876:	66 53                	push   %bx
     878:	66 50                	push   %ax
     87a:	66 8b 26             	mov    (%esi),%sp
     87d:	36 01 a1 2e 01 ff e0 	add    %esp,%ss:-0x1f00fed2(%ecx)

00000884 <_restart>:
     884:	66 89 26             	mov    %sp,(%esi)
     887:	36 01 66 8b          	add    %esp,%ss:-0x75(%esi)
     88b:	26                   	es
     88c:	e0 2e                	loopne 8bc <_restart+0x38>
     88e:	66 58                	pop    %ax
     890:	66 5b                	pop    %bx
     892:	66 59                	pop    %cx
     894:	66 5a                	pop    %dx
     896:	66 5e                	pop    %si
     898:	66 5f                	pop    %di
     89a:	66 5d                	pop    %bp
     89c:	07                   	pop    %es
     89d:	8f 06                	popl   (%esi)
     89f:	34 01                	xor    $0x1,%al
     8a1:	8f 06                	popl   (%esi)
     8a3:	2a 01                	sub    (%ecx),%al
     8a5:	8f 06                	popl   (%esi)
     8a7:	34 01                	xor    $0x1,%al
     8a9:	66 89 36             	mov    %si,(%esi)
     8ac:	30 01                	xor    %al,(%ecx)
     8ae:	17                   	pop    %ss
     8af:	8f 06                	popl   (%esi)
     8b1:	34 01                	xor    $0x1,%al
     8b3:	66 89 e6             	mov    %sp,%si
     8b6:	66 67 8b 26 67 ff    	mov    -0x99,%sp
     8bc:	76 0c                	jbe    8ca <_restart+0x46>
     8be:	67 ff 76 08          	pushl  0x8(%bp)
     8c2:	67 ff 76 04          	pushl  0x4(%bp)
     8c6:	66 8b 36             	mov    (%esi),%si
     8c9:	30 01                	xor    %al,(%ecx)
     8cb:	8e 1e                	mov    (%esi),%ds
     8cd:	2a 01                	sub    (%ecx),%al
     8cf:	50                   	push   %eax
     8d0:	b0 20                	mov    $0x20,%al
     8d2:	e6 20                	out    %al,$0x20
     8d4:	e6 a0                	out    %al,$0xa0
     8d6:	58                   	pop    %eax
     8d7:	cf                   	iret   

000008d8 <RTC_Timer>:
     8d8:	c8 00 00 00          	enter  $0x0,$0x0
     8dc:	1e                   	push   %ds
     8dd:	06                   	push   %es
     8de:	60                   	pusha  
     8df:	8c c8                	mov    %cs,%eax
     8e1:	8e d8                	mov    %eax,%ds
     8e3:	8c c8                	mov    %cs,%eax
     8e5:	8e c0                	mov    %eax,%es
     8e7:	bf a0 2c b4 02       	mov    $0x2b42ca0,%edi
     8ec:	cd 1a                	int    $0x1a
     8ee:	88 e8                	mov    %ch,%al
     8f0:	b4 00                	mov    $0x0,%ah
     8f2:	b3 10                	mov    $0x10,%bl
     8f4:	f6 f3                	div    %bl
     8f6:	04 30                	add    $0x30,%al
     8f8:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
     8fe:	88 e8                	mov    %ch,%al
     900:	24 0f                	and    $0xf,%al
     902:	04 30                	add    $0x30,%al
     904:	88 45 01             	mov    %al,0x1(%ebp)
     907:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
     90b:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
     90f:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
     913:	b4 02                	mov    $0x2,%ah
     915:	cd 1a                	int    $0x1a
     917:	88 c8                	mov    %cl,%al
     919:	b4 00                	mov    $0x0,%ah
     91b:	b3 10                	mov    $0x10,%bl
     91d:	f6 f3                	div    %bl
     91f:	04 30                	add    $0x30,%al
     921:	88 45 05             	mov    %al,0x5(%ebp)
     924:	b4 02                	mov    $0x2,%ah
     926:	cd 1a                	int    $0x1a
     928:	88 c8                	mov    %cl,%al
     92a:	24 0f                	and    $0xf,%al
     92c:	04 30                	add    $0x30,%al
     92e:	88 45 06             	mov    %al,0x6(%ebp)
     931:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
     935:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
     939:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
     93d:	8c c8                	mov    %cs,%eax
     93f:	8e d8                	mov    %eax,%ds
     941:	8e c0                	mov    %eax,%es
     943:	bd 4f 01 8c d8       	mov    $0xd88c014f,%ebp
     948:	8e c0                	mov    %eax,%es
     94a:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
     94f:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     955:	b2 0a                	mov    $0xa,%dl
     957:	cd 10                	int    $0x10
     959:	8c c8                	mov    %cs,%eax
     95b:	8e d8                	mov    %eax,%ds
     95d:	8e c0                	mov    %eax,%es
     95f:	bd a0 2c 8c d8       	mov    $0xd88c2ca0,%ebp
     964:	8e c0                	mov    %eax,%es
     966:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
     96b:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     971:	b2 1e                	mov    $0x1e,%dl
     973:	cd 10                	int    $0x10
     975:	61                   	popa   
     976:	07                   	pop    %es
     977:	1f                   	pop    %ds
     978:	c9                   	leave  
     979:	66 5a                	pop    %dx
     97b:	ff e2                	jmp    *%edx

0000097d <_Get_Hours_1>:
     97d:	c8 04 00 00          	enter  $0x4,$0x0
     981:	b4 02                	mov    $0x2,%ah
     983:	cd 1a                	int    $0x1a
     985:	88 e8                	mov    %ch,%al
     987:	b4 00                	mov    $0x0,%ah
     989:	b3 10                	mov    $0x10,%bl
     98b:	f6 f3                	div    %bl
     98d:	30 e4                	xor    %ah,%ah
     98f:	66 67 89 04          	mov    %ax,(%si)
     993:	24 66                	and    $0x66,%al
     995:	67 8b 04             	mov    (%si),%eax
     998:	24 c9                	and    $0xc9,%al
     99a:	66 5a                	pop    %dx
     99c:	ff e2                	jmp    *%edx

0000099e <_Get_Hours_2>:
     99e:	c8 04 00 00          	enter  $0x4,$0x0
     9a2:	b4 02                	mov    $0x2,%ah
     9a4:	cd 1a                	int    $0x1a
     9a6:	88 e8                	mov    %ch,%al
     9a8:	24 0f                	and    $0xf,%al
     9aa:	30 e4                	xor    %ah,%ah
     9ac:	66 67 89 04          	mov    %ax,(%si)
     9b0:	24 66                	and    $0x66,%al
     9b2:	67 8b 04             	mov    (%si),%eax
     9b5:	24 c9                	and    $0xc9,%al
     9b7:	66 5a                	pop    %dx
     9b9:	ff e2                	jmp    *%edx

000009bb <_Get_Minutes_1>:
     9bb:	c8 04 00 00          	enter  $0x4,$0x0
     9bf:	b4 02                	mov    $0x2,%ah
     9c1:	cd 1a                	int    $0x1a
     9c3:	88 c8                	mov    %cl,%al
     9c5:	b4 00                	mov    $0x0,%ah
     9c7:	b3 10                	mov    $0x10,%bl
     9c9:	f6 f3                	div    %bl
     9cb:	30 e4                	xor    %ah,%ah
     9cd:	66 67 89 04          	mov    %ax,(%si)
     9d1:	24 66                	and    $0x66,%al
     9d3:	67 8b 04             	mov    (%si),%eax
     9d6:	24 c9                	and    $0xc9,%al
     9d8:	66 5a                	pop    %dx
     9da:	ff e2                	jmp    *%edx

000009dc <_Get_Minutes_2>:
     9dc:	c8 04 00 00          	enter  $0x4,$0x0
     9e0:	b4 02                	mov    $0x2,%ah
     9e2:	cd 1a                	int    $0x1a
     9e4:	88 c8                	mov    %cl,%al
     9e6:	24 0f                	and    $0xf,%al
     9e8:	30 e4                	xor    %ah,%ah
     9ea:	66 67 89 04          	mov    %ax,(%si)
     9ee:	24 66                	and    $0x66,%al
     9f0:	67 8b 04             	mov    (%si),%eax
     9f3:	24 c9                	and    $0xc9,%al
     9f5:	66 5a                	pop    %dx
     9f7:	ff e2                	jmp    *%edx

000009f9 <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
     9f9:	66 55                	push   %bp
     9fb:	66 89 e5             	mov    %sp,%bp
     9fe:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
     a02:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     a07:	66 89 d0             	mov    %dx,%ax
     a0a:	66 c1 e0 02          	shl    $0x2,%ax
     a0e:	66 01 d0             	add    %dx,%ax
     a11:	66 c1 e0 04          	shl    $0x4,%ax
     a15:	66 89 c2             	mov    %ax,%dx
     a18:	67 66 8b 45 10       	mov    0x10(%di),%ax
     a1d:	66 01 d0             	add    %dx,%ax
     a20:	66 01 c0             	add    %ax,%ax
     a23:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
     a28:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     a2f:	00 00                	add    %al,(%eax)
	int index = 0;
     a31:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     a38:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     a3a:	eb 35                	jmp    a71 <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
     a3c:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     a41:	67 66 8b 45 08       	mov    0x8(%di),%ax
     a46:	66 01 d0             	add    %dx,%ax
     a49:	67 8a 00             	mov    (%bx,%si),%al
     a4c:	66 0f be c0          	movsbw %al,%ax
     a50:	67 66 ff 75 f4       	pushw  -0xc(%di)
     a55:	67 66 ff 75 fc       	pushw  -0x4(%di)
     a5a:	66 50                	push   %ax
     a5c:	66 e8 2b f7          	callw  18b <_clearscreen+0x7>
     a60:	ff                   	(bad)  
     a61:	ff 66 83             	jmp    *-0x7d(%esi)
     a64:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     a67:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     a6b:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
     a71:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     a76:	67 66 8b 45 08       	mov    0x8(%di),%ax
     a7b:	66 01 d0             	add    %dx,%ax
     a7e:	67 8a 00             	mov    (%bx,%si),%al
     a81:	84 c0                	test   %al,%al
     a83:	75 b7                	jne    a3c <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     a85:	90                   	nop
}
     a86:	66 c9                	leavew 
     a88:	66 c3                	retw   

00000a8a <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
     a8a:	66 55                	push   %bp
     a8c:	66 89 e5             	mov    %sp,%bp
     a8f:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
     a93:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     a98:	66 89 d0             	mov    %dx,%ax
     a9b:	66 c1 e0 02          	shl    $0x2,%ax
     a9f:	66 01 d0             	add    %dx,%ax
     aa2:	66 c1 e0 04          	shl    $0x4,%ax
     aa6:	66 89 c2             	mov    %ax,%dx
     aa9:	67 66 8b 45 10       	mov    0x10(%di),%ax
     aae:	66 01 d0             	add    %dx,%ax
     ab1:	66 01 c0             	add    %ax,%ax
     ab4:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
     ab9:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     ac0:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     ac2:	eb 35                	jmp    af9 <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
     ac4:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     ac9:	67 66 8b 45 08       	mov    0x8(%di),%ax
     ace:	66 01 d0             	add    %dx,%ax
     ad1:	67 8a 00             	mov    (%bx,%si),%al
     ad4:	66 0f be c0          	movsbw %al,%ax
     ad8:	67 66 ff 75 14       	pushw  0x14(%di)
     add:	67 66 ff 75 fc       	pushw  -0x4(%di)
     ae2:	66 50                	push   %ax
     ae4:	66 e8 a3 f6          	callw  18b <_clearscreen+0x7>
     ae8:	ff                   	(bad)  
     ae9:	ff 66 83             	jmp    *-0x7d(%esi)
     aec:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     aef:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     af3:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
     af9:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     afe:	67 66 8b 45 08       	mov    0x8(%di),%ax
     b03:	66 01 d0             	add    %dx,%ax
     b06:	67 8a 00             	mov    (%bx,%si),%al
     b09:	84 c0                	test   %al,%al
     b0b:	75 b7                	jne    ac4 <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     b0d:	90                   	nop
}
     b0e:	66 c9                	leavew 
     b10:	66 c3                	retw   

00000b12 <sys_showline>:
void sys_showline(){
     b12:	66 55                	push   %bp
     b14:	66 89 e5             	mov    %sp,%bp
     b17:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
     b1b:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
     b20:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
     b25:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
     b2a:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
     b2f:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
     b34:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
     b39:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
     b3e:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     b45:	00 00                	add    %al,(%eax)
    int i = 0;
     b47:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     b4e:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
     b50:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     b57:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
     b59:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     b60:	00 00                	add    %al,(%eax)
     b62:	eb 52                	jmp    bb6 <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
     b64:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     b69:	66 89 d0             	mov    %dx,%ax
     b6c:	66 c1 e0 03          	shl    $0x3,%ax
     b70:	66 01 d0             	add    %dx,%ax
     b73:	67 66 8d 14          	lea    (%si),%dx
     b77:	c5 00                	lds    (%eax),%eax
     b79:	00 00                	add    %al,(%eax)
     b7b:	00 66 01             	add    %ah,0x1(%esi)
     b7e:	d0 66 01             	shlb   0x1(%esi)
     b81:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
     b85:	45                   	inc    %ebp
     b86:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
     b8c:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     b91:	66 01 d0             	add    %dx,%ax
     b94:	67 8a 00             	mov    (%bx,%si),%al
     b97:	66 0f be c0          	movsbw %al,%ax
     b9b:	67 66 ff 75 f4       	pushw  -0xc(%di)
     ba0:	67 66 ff 75 f0       	pushw  -0x10(%di)
     ba5:	66 50                	push   %ax
     ba7:	66 e8 e0 f5          	callw  18b <_clearscreen+0x7>
     bab:	ff                   	(bad)  
     bac:	ff 66 83             	jmp    *-0x7d(%esi)
     baf:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
     bb2:	66 ff 45 fc          	incw   -0x4(%ebp)
     bb6:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
     bbc:	7e a6                	jle    b64 <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
     bbe:	66 c9                	leavew 
     bc0:	66 c3                	retw   

00000bc2 <sys_printname>:

void sys_printname(){
     bc2:	66 55                	push   %bp
     bc4:	66 89 e5             	mov    %sp,%bp
     bc7:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
     bcb:	67 66 c7 45 fc cc 16 	movw   $0x16cc,-0x4(%di)
     bd2:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
     bd4:	67 66 c7 45 f8 10 17 	movw   $0x1710,-0x8(%di)
     bdb:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
     bdd:	67 66 c7 45 f4 54 17 	movw   $0x1754,-0xc(%di)
     be4:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
     be6:	67 66 c7 45 f0 98 17 	movw   $0x1798,-0x10(%di)
     bed:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
     bef:	67 66 c7 45 ec dc 17 	movw   $0x17dc,-0x14(%di)
     bf6:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
     bf8:	67 66 c7 45 e8 20 18 	movw   $0x1820,-0x18(%di)
     bff:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
     c01:	67 66 c7 45 e4 64 18 	movw   $0x1864,-0x1c(%di)
     c08:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
     c0a:	66 6a 0b             	pushw  $0xb
     c0d:	66 6a 10             	pushw  $0x10
     c10:	67 66 ff 75 fc       	pushw  -0x4(%di)
     c15:	66 e8 de fd          	callw  9f7 <_Get_Minutes_2+0x1b>
     c19:	ff                   	(bad)  
     c1a:	ff 66 83             	jmp    *-0x7d(%esi)
     c1d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
     c20:	6a 0b                	push   $0xb
     c22:	66 6a 11             	pushw  $0x11
     c25:	67 66 ff 75 f8       	pushw  -0x8(%di)
     c2a:	66 e8 c9 fd          	callw  9f7 <_Get_Minutes_2+0x1b>
     c2e:	ff                   	(bad)  
     c2f:	ff 66 83             	jmp    *-0x7d(%esi)
     c32:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
     c35:	6a 0b                	push   $0xb
     c37:	66 6a 12             	pushw  $0x12
     c3a:	67 66 ff 75 f4       	pushw  -0xc(%di)
     c3f:	66 e8 b4 fd          	callw  9f7 <_Get_Minutes_2+0x1b>
     c43:	ff                   	(bad)  
     c44:	ff 66 83             	jmp    *-0x7d(%esi)
     c47:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
     c4a:	6a 0b                	push   $0xb
     c4c:	66 6a 13             	pushw  $0x13
     c4f:	67 66 ff 75 f0       	pushw  -0x10(%di)
     c54:	66 e8 9f fd          	callw  9f7 <_Get_Minutes_2+0x1b>
     c58:	ff                   	(bad)  
     c59:	ff 66 83             	jmp    *-0x7d(%esi)
     c5c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
     c5f:	6a 0b                	push   $0xb
     c61:	66 6a 14             	pushw  $0x14
     c64:	67 66 ff 75 ec       	pushw  -0x14(%di)
     c69:	66 e8 8a fd          	callw  9f7 <_Get_Minutes_2+0x1b>
     c6d:	ff                   	(bad)  
     c6e:	ff 66 83             	jmp    *-0x7d(%esi)
     c71:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
     c74:	6a 0b                	push   $0xb
     c76:	66 6a 15             	pushw  $0x15
     c79:	67 66 ff 75 e8       	pushw  -0x18(%di)
     c7e:	66 e8 75 fd          	callw  9f7 <_Get_Minutes_2+0x1b>
     c82:	ff                   	(bad)  
     c83:	ff 66 83             	jmp    *-0x7d(%esi)
     c86:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
     c89:	6a 0b                	push   $0xb
     c8b:	66 6a 16             	pushw  $0x16
     c8e:	67 66 ff 75 e4       	pushw  -0x1c(%di)
     c93:	66 e8 60 fd          	callw  9f7 <_Get_Minutes_2+0x1b>
     c97:	ff                   	(bad)  
     c98:	ff 66 83             	jmp    *-0x7d(%esi)
     c9b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
     c9e:	c9                   	leave  
     c9f:	66 c3                	retw   

00000ca1 <sys_printpoem>:
void sys_printpoem(){
     ca1:	66 55                	push   %bp
     ca3:	66 89 e5             	mov    %sp,%bp
     ca6:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
     caa:	67 66 c7 45 f8 a8 18 	movw   $0x18a8,-0x8(%di)
     cb1:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
     cb3:	67 66 c7 45 f4 ba 18 	movw   $0x18ba,-0xc(%di)
     cba:	00 00                	add    %al,(%eax)
    int i = 1;
     cbc:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     cc3:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
     cc5:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     ccc:	00 00                	add    %al,(%eax)
     cce:	eb 4b                	jmp    d1b <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
     cd0:	67 66 ff 75 fc       	pushw  -0x4(%di)
     cd5:	66 6a 0a             	pushw  $0xa
     cd8:	66 6a 0f             	pushw  $0xf
     cdb:	67 66 ff 75 f8       	pushw  -0x8(%di)
     ce0:	66 e8 a4 fd          	callw  a88 <sys_print_for_heart+0x8f>
     ce4:	ff                   	(bad)  
     ce5:	ff 66 83             	jmp    *-0x7d(%esi)
     ce8:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
     cea:	67 66 ff 75 fc       	pushw  -0x4(%di)
     cef:	66 6a 0a             	pushw  $0xa
     cf2:	66 6a 10             	pushw  $0x10
     cf5:	67 66 ff 75 f4       	pushw  -0xc(%di)
     cfa:	66 e8 8a fd          	callw  a88 <sys_print_for_heart+0x8f>
     cfe:	ff                   	(bad)  
     cff:	ff 66 83             	jmp    *-0x7d(%esi)
     d02:	c4 10                	les    (%eax),%edx
        int j = 0;
     d04:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     d0b:	00 00                	add    %al,(%eax)
        int k = 0;
     d0d:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
     d14:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
     d16:	67 66 ff 45 fc       	incw   -0x4(%di)
     d1b:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
     d21:	7e ad                	jle    cd0 <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
     d23:	66 c9                	leavew 
     d25:	66 c3                	retw   

00000d27 <sys_printheart>:
void sys_printheart(){
     d27:	66 55                	push   %bp
     d29:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
     d2c:	66 6a 28             	pushw  $0x28
     d2f:	66 6a 00             	pushw  $0x0
     d32:	66 68 c3 18          	pushw  $0x18c3
     d36:	00 00                	add    %al,(%eax)
     d38:	66 e8 bb fc          	callw  9f7 <_Get_Minutes_2+0x1b>
     d3c:	ff                   	(bad)  
     d3d:	ff 66 83             	jmp    *-0x7d(%esi)
     d40:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
     d43:	6a 28                	push   $0x28
     d45:	66 6a 01             	pushw  $0x1
     d48:	66 68 db 18          	pushw  $0x18db
     d4c:	00 00                	add    %al,(%eax)
     d4e:	66 e8 a5 fc          	callw  9f7 <_Get_Minutes_2+0x1b>
     d52:	ff                   	(bad)  
     d53:	ff 66 83             	jmp    *-0x7d(%esi)
     d56:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
     d59:	6a 28                	push   $0x28
     d5b:	66 6a 02             	pushw  $0x2
     d5e:	66 68 f4 18          	pushw  $0x18f4
     d62:	00 00                	add    %al,(%eax)
     d64:	66 e8 8f fc          	callw  9f7 <_Get_Minutes_2+0x1b>
     d68:	ff                   	(bad)  
     d69:	ff 66 83             	jmp    *-0x7d(%esi)
     d6c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
     d6f:	6a 28                	push   $0x28
     d71:	66 6a 03             	pushw  $0x3
     d74:	66 68 0f 19          	pushw  $0x190f
     d78:	00 00                	add    %al,(%eax)
     d7a:	66 e8 79 fc          	callw  9f7 <_Get_Minutes_2+0x1b>
     d7e:	ff                   	(bad)  
     d7f:	ff 66 83             	jmp    *-0x7d(%esi)
     d82:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
     d85:	6a 28                	push   $0x28
     d87:	66 6a 04             	pushw  $0x4
     d8a:	66 68 28 19          	pushw  $0x1928
     d8e:	00 00                	add    %al,(%eax)
     d90:	66 e8 63 fc          	callw  9f7 <_Get_Minutes_2+0x1b>
     d94:	ff                   	(bad)  
     d95:	ff 66 83             	jmp    *-0x7d(%esi)
     d98:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
     d9b:	6a 28                	push   $0x28
     d9d:	66 6a 05             	pushw  $0x5
     da0:	66 68 40 19          	pushw  $0x1940
     da4:	00 00                	add    %al,(%eax)
     da6:	66 e8 4d fc          	callw  9f7 <_Get_Minutes_2+0x1b>
     daa:	ff                   	(bad)  
     dab:	ff 66 83             	jmp    *-0x7d(%esi)
     dae:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
     db1:	6a 28                	push   $0x28
     db3:	66 6a 06             	pushw  $0x6
     db6:	66 68 57 19          	pushw  $0x1957
     dba:	00 00                	add    %al,(%eax)
     dbc:	66 e8 37 fc          	callw  9f7 <_Get_Minutes_2+0x1b>
     dc0:	ff                   	(bad)  
     dc1:	ff 66 83             	jmp    *-0x7d(%esi)
     dc4:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
     dc7:	6a 28                	push   $0x28
     dc9:	66 6a 07             	pushw  $0x7
     dcc:	66 68 6d 19          	pushw  $0x196d
     dd0:	00 00                	add    %al,(%eax)
     dd2:	66 e8 21 fc          	callw  9f7 <_Get_Minutes_2+0x1b>
     dd6:	ff                   	(bad)  
     dd7:	ff 66 83             	jmp    *-0x7d(%esi)
     dda:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
     ddd:	c9                   	leave  
     dde:	66 c3                	retw   

00000de0 <savePCB>:
#include "schedule.h"

void savePCB(){
     de0:	66 55                	push   %bp
     de2:	66 89 e5             	mov    %sp,%bp
    _save();
     de5:	66 e8 25 fa          	callw  80e <_initialInt_08h+0x39>
     de9:	ff                   	(bad)  
     dea:	ff 66 5d             	jmp    *0x5d(%esi)
}
     ded:	66 c3                	retw   

00000def <initial_PCB>:
void initial_PCB(int index){
     def:	66 55                	push   %bp
     df1:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
     df4:	67 66 8b 45 08       	mov    0x8(%di),%ax
     df9:	66 40                	inc    %ax
     dfb:	66 c1 e0 0c          	shl    $0xc,%ax
     dff:	66 89 c2             	mov    %ax,%dx
     e02:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e07:	66 c1 e0 02          	shl    $0x2,%ax
     e0b:	66 89 c1             	mov    %ax,%cx
     e0e:	66 c1 e1 04          	shl    $0x4,%cx
     e12:	66 01 c8             	add    %cx,%ax
     e15:	66 05 f0 2c          	add    $0x2cf0,%ax
     e19:	00 00                	add    %al,(%eax)
     e1b:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
     e1f:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e24:	66 40                	inc    %ax
     e26:	66 c1 e0 0c          	shl    $0xc,%ax
     e2a:	66 89 c2             	mov    %ax,%dx
     e2d:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e32:	66 c1 e0 02          	shl    $0x2,%ax
     e36:	66 89 c1             	mov    %ax,%cx
     e39:	66 c1 e1 04          	shl    $0x4,%cx
     e3d:	66 01 c8             	add    %cx,%ax
     e40:	66 05 e0 2c          	add    $0x2ce0,%ax
     e44:	00 00                	add    %al,(%eax)
     e46:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
     e4a:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e4f:	66 40                	inc    %ax
     e51:	66 c1 e0 0c          	shl    $0xc,%ax
     e55:	66 89 c2             	mov    %ax,%dx
     e58:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e5d:	66 c1 e0 02          	shl    $0x2,%ax
     e61:	66 89 c1             	mov    %ax,%cx
     e64:	66 c1 e1 04          	shl    $0x4,%cx
     e68:	66 01 c8             	add    %cx,%ax
     e6b:	66 05 e0 2c          	add    $0x2ce0,%ax
     e6f:	00 00                	add    %al,(%eax)
     e71:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
     e76:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e7b:	66 c1 e0 02          	shl    $0x2,%ax
     e7f:	66 89 c2             	mov    %ax,%dx
     e82:	66 c1 e2 04          	shl    $0x4,%dx
     e86:	66 01 d0             	add    %dx,%ax
     e89:	66 05 e0 2c          	add    $0x2ce0,%ax
     e8d:	00 00                	add    %al,(%eax)
     e8f:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
     e96:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
     e98:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e9d:	66 c1 e0 02          	shl    $0x2,%ax
     ea1:	66 89 c2             	mov    %ax,%dx
     ea4:	66 c1 e2 04          	shl    $0x4,%dx
     ea8:	66 01 d0             	add    %dx,%ax
     eab:	66 05 e0 2c          	add    $0x2ce0,%ax
     eaf:	00 00                	add    %al,(%eax)
     eb1:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
     eb8:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = RUN;
     eba:	67 66 8b 45 08       	mov    0x8(%di),%ax
     ebf:	66 c1 e0 02          	shl    $0x2,%ax
     ec3:	66 89 c2             	mov    %ax,%dx
     ec6:	66 c1 e2 04          	shl    $0x4,%dx
     eca:	66 01 d0             	add    %dx,%ax
     ecd:	66 05 f0 2c          	add    $0x2cf0,%ax
     ed1:	00 00                	add    %al,(%eax)
     ed3:	67 66 c7 40 08 01 00 	movw   $0x1,0x8(%bx,%si)
     eda:	00 00                	add    %al,(%eax)
    PCB_list[index ].eflags = 512;
     edc:	67 66 8b 45 08       	mov    0x8(%di),%ax
     ee1:	66 c1 e0 02          	shl    $0x2,%ax
     ee5:	66 89 c2             	mov    %ax,%dx
     ee8:	66 c1 e2 04          	shl    $0x4,%dx
     eec:	66 01 d0             	add    %dx,%ax
     eef:	66 05 f0 2c          	add    $0x2cf0,%ax
     ef3:	00 00                	add    %al,(%eax)
     ef5:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
     efc:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
     efe:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f03:	66 c1 e0 02          	shl    $0x2,%ax
     f07:	66 89 c2             	mov    %ax,%dx
     f0a:	66 c1 e2 04          	shl    $0x4,%dx
     f0e:	66 01 d0             	add    %dx,%ax
     f11:	67 66 8d 90 f0 2c    	lea    0x2cf0(%bx,%si),%dx
     f17:	00 00                	add    %al,(%eax)
     f19:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f1e:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 0;
     f23:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f28:	66 c1 e0 02          	shl    $0x2,%ax
     f2c:	66 89 c2             	mov    %ax,%dx
     f2f:	66 c1 e2 04          	shl    $0x4,%dx
     f33:	66 01 d0             	add    %dx,%ax
     f36:	66 05 00 2d          	add    $0x2d00,%ax
     f3a:	00 00                	add    %al,(%eax)
     f3c:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
     f42:	00 00                	add    %al,(%eax)
}
     f44:	66 5d                	pop    %bp
     f46:	66 c3                	retw   

00000f48 <Set_PCB>:
void Set_PCB(){
     f48:	66 55                	push   %bp
     f4a:	66 89 e5             	mov    %sp,%bp
     f4d:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
     f51:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     f58:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
     f5a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     f61:	00 00                	add    %al,(%eax)
     f63:	eb 27                	jmp    f8c <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
     f65:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     f6a:	66 c1 e0 02          	shl    $0x2,%ax
     f6e:	66 89 c2             	mov    %ax,%dx
     f71:	66 c1 e2 04          	shl    $0x4,%dx
     f75:	66 01 d0             	add    %dx,%ax
     f78:	66 05 f0 2c          	add    $0x2cf0,%ax
     f7c:	00 00                	add    %al,(%eax)
     f7e:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
     f85:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 0;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
     f87:	67 66 ff 45 fc       	incw   -0x4(%di)
     f8c:	67 66 83 7d fc 07    	cmpw   $0x7,-0x4(%di)
     f92:	7e d1                	jle    f65 <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
     f94:	66 c9                	leavew 
     f96:	66 c3                	retw   

00000f98 <sys_schedule>:
void sys_schedule(){
     f98:	66 55                	push   %bp
     f9a:	66 89 e5             	mov    %sp,%bp
     f9d:	66 83 ec 0c          	sub    $0xc,%sp
    int i,j;
    int index = -1;
     fa1:	67 66 c7 45 f4 ff ff 	movw   $0xffff,-0xc(%di)
     fa8:	ff                   	(bad)  
     fa9:	ff 66 a1             	jmp    *-0x5f(%esi)
    i = _CurrentProg - PCB_list;
     fac:	e0 2e                	loopne fdc <sys_schedule+0x44>
     fae:	66 89 c2             	mov    %ax,%dx
     fb1:	66 b8 c0 2c          	mov    $0x2cc0,%ax
     fb5:	00 00                	add    %al,(%eax)
     fb7:	66 29 c2             	sub    %ax,%dx
     fba:	66 89 d0             	mov    %dx,%ax
     fbd:	66 c1 f8 02          	sar    $0x2,%ax
     fc1:	66 89 c2             	mov    %ax,%dx
     fc4:	66 89 d0             	mov    %dx,%ax
     fc7:	66 01 c0             	add    %ax,%ax
     fca:	66 01 d0             	add    %dx,%ax
     fcd:	67 66 8d 14          	lea    (%si),%dx
     fd1:	85 00                	test   %eax,(%eax)
     fd3:	00 00                	add    %al,(%eax)
     fd5:	00 66 01             	add    %ah,0x1(%esi)
     fd8:	d0 66 89             	shlb   -0x77(%esi)
     fdb:	c2 66 c1             	ret    $0xc166
     fde:	e2 08                	loop   fe8 <sys_schedule+0x50>
     fe0:	66 01 d0             	add    %dx,%ax
     fe3:	66 89 c2             	mov    %ax,%dx
     fe6:	66 c1 e2 10          	shl    $0x10,%dx
     fea:	66 01 d0             	add    %dx,%ax
     fed:	66 f7 d8             	neg    %ax
     ff0:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    for(j = 0;j < PCB_NUMMER;j ++){
     ff5:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     ffc:	00 00                	add    %al,(%eax)
     ffe:	e9 a6 00 67 66       	jmp    666710a9 <_end+0x6666e1c5>
        if(i == PCB_NUMMER - 1){
    1003:	83 7d fc 07          	cmpl   $0x7,-0x4(%ebp)
    1007:	75 14                	jne    101d <sys_schedule+0x85>
            _CurrentProg = PCB_list + 1;
    1009:	66 c7 06 e0 2e       	movw   $0x2ee0,(%esi)
    100e:	04 2d                	add    $0x2d,%al
    1010:	00 00                	add    %al,(%eax)
            i = 1;
    1012:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    1019:	00 00                	add    %al,(%eax)
    101b:	eb 11                	jmp    102e <sys_schedule+0x96>
        }
        else{
            _CurrentProg ++;
    101d:	66 a1 e0 2e 66 83    	mov    0x83662ee0,%ax
    1023:	c0 44 66 a3 e0       	rolb   $0xe0,-0x5d(%esi,%eiz,2)
    1028:	2e 67 66 ff 45 fc    	incw   %cs:-0x4(%di)
            i ++;
        }
        if(_CurrentProg -> prg_status == RUN){
    102e:	66 a1 e0 2e 67 66    	mov    0x66672ee0,%ax
    1034:	8b 40 38             	mov    0x38(%eax),%eax
    1037:	66 83 f8 01          	cmp    $0x1,%ax
    103b:	75 03                	jne    1040 <sys_schedule+0xa8>
            return;
    103d:	e9 c4 00 66 a1       	jmp    a1661106 <_end+0xa165e222>
        }
        if(_CurrentProg -> prg_status == READY && index == -1){
    1042:	e0 2e                	loopne 1072 <sys_schedule+0xda>
    1044:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    1049:	66 83 f8 03          	cmp    $0x3,%ax
    104d:	75 53                	jne    10a2 <sys_schedule+0x10a>
    104f:	67 66 83 7d f4 ff    	cmpw   $0xffff,-0xc(%di)
    1055:	75 4b                	jne    10a2 <sys_schedule+0x10a>
           index = _CurrentProg - PCB_list;
    1057:	66 a1 e0 2e 66 89    	mov    0x89662ee0,%ax
    105d:	c2 66 b8             	ret    $0xb866
    1060:	c0 2c 00 00          	shrb   $0x0,(%eax,%eax,1)
    1064:	66 29 c2             	sub    %ax,%dx
    1067:	66 89 d0             	mov    %dx,%ax
    106a:	66 c1 f8 02          	sar    $0x2,%ax
    106e:	66 89 c2             	mov    %ax,%dx
    1071:	66 89 d0             	mov    %dx,%ax
    1074:	66 01 c0             	add    %ax,%ax
    1077:	66 01 d0             	add    %dx,%ax
    107a:	67 66 8d 14          	lea    (%si),%dx
    107e:	85 00                	test   %eax,(%eax)
    1080:	00 00                	add    %al,(%eax)
    1082:	00 66 01             	add    %ah,0x1(%esi)
    1085:	d0 66 89             	shlb   -0x77(%esi)
    1088:	c2 66 c1             	ret    $0xc166
    108b:	e2 08                	loop   1095 <sys_schedule+0xfd>
    108d:	66 01 d0             	add    %dx,%ax
    1090:	66 89 c2             	mov    %ax,%dx
    1093:	66 c1 e2 10          	shl    $0x10,%dx
    1097:	66 01 d0             	add    %dx,%ax
    109a:	66 f7 d8             	neg    %ax
    109d:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
}
void sys_schedule(){
    int i,j;
    int index = -1;
    i = _CurrentProg - PCB_list;
    for(j = 0;j < PCB_NUMMER;j ++){
    10a2:	67 66 ff 45 f8       	incw   -0x8(%di)
    10a7:	67 66 83 7d f8 07    	cmpw   $0x7,-0x8(%di)
    10ad:	0f 8e 50 ff 67 66    	jle    66681003 <_end+0x6667e11f>
        }
        if(_CurrentProg -> prg_status == READY && index == -1){
           index = _CurrentProg - PCB_list;
        }
    }
    if(index != -1){
    10b3:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
    10b7:	74 41                	je     10fa <sys_schedule+0x162>
        _CurrentProg = PCB_list + index;
    10b9:	67 66 8b 45 f4       	mov    -0xc(%di),%ax
    10be:	66 c1 e0 02          	shl    $0x2,%ax
    10c2:	66 89 c2             	mov    %ax,%dx
    10c5:	66 c1 e2 04          	shl    $0x4,%dx
    10c9:	66 01 d0             	add    %dx,%ax
    10cc:	66 05 c0 2c          	add    $0x2cc0,%ax
    10d0:	00 00                	add    %al,(%eax)
    10d2:	66 a3 e0 2e 67 66    	mov    %ax,0x66672ee0
        PCB_list[index].prg_status = RUN;
    10d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
    10db:	66 c1 e0 02          	shl    $0x2,%ax
    10df:	66 89 c2             	mov    %ax,%dx
    10e2:	66 c1 e2 04          	shl    $0x4,%dx
    10e6:	66 01 d0             	add    %dx,%ax
    10e9:	66 05 f0 2c          	add    $0x2cf0,%ax
    10ed:	00 00                	add    %al,(%eax)
    10ef:	67 66 c7 40 08 01 00 	movw   $0x1,0x8(%bx,%si)
    10f6:	00 00                	add    %al,(%eax)
        return;
    10f8:	eb 0a                	jmp    1104 <sys_schedule+0x16c>
    }
    _CurrentProg = PCB_list ;
    10fa:	66 c7 06 e0 2e       	movw   $0x2ee0,(%esi)
    10ff:	c0 2c 00 00          	shrb   $0x0,(%eax,%eax,1)
    return;
    1103:	90                   	nop
}
    1104:	66 c9                	leavew 
    1106:	66 c3                	retw   

00001108 <sys_exit>:
void sys_exit(){
    1108:	66 55                	push   %bp
    110a:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    110d:	fa                   	cli    
    _CurrentProg -> prg_status = EXIT;
    110e:	66 a1 e0 2e 67 66    	mov    0x66672ee0,%ax
    1114:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    __asm__("sti\n");
    111b:	fb                   	sti    
}
    111c:	66 5d                	pop    %bp
    111e:	66 c3                	retw   

00001120 <sys_exit_fork>:

void sys_exit_fork(char ch){
    1120:	66 55                	push   %bp
    1122:	66 89 e5             	mov    %sp,%bp
    1125:	66 83 ec 08          	sub    $0x8,%sp
    1129:	67 66 8b 45 08       	mov    0x8(%di),%ax
    112e:	67 88 45 f8          	mov    %al,-0x8(%di)
    int index = _CurrentProg -> fid;
    1132:	66 a1 e0 2e 67 66    	mov    0x66672ee0,%ax
    1138:	8b 40 40             	mov    0x40(%eax),%eax
    113b:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_wakeup(index);
    1140:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1145:	66 e8 e4 00          	callw  122d <sys_bolocked+0x2b>
    1149:	00 00                	add    %al,(%eax)
    114b:	66 83 c4 04          	add    $0x4,%sp
    PCB_list[_CurrentProg -> fid].eax = ch;
    114f:	66 a1 e0 2e 67 66    	mov    0x66672ee0,%ax
    1155:	8b 40 40             	mov    0x40(%eax),%eax
    1158:	67 66 0f be 55 f8    	movsbw -0x8(%di),%dx
    115e:	66 c1 e0 02          	shl    $0x2,%ax
    1162:	66 89 c1             	mov    %ax,%cx
    1165:	66 c1 e1 04          	shl    $0x4,%cx
    1169:	66 01 c8             	add    %cx,%ax
    116c:	66 05 c0 2c          	add    $0x2cc0,%ax
    1170:	00 00                	add    %al,(%eax)
    1172:	67 66 89 10          	mov    %dx,(%bx,%si)
    _CurrentProg -> prg_status = EXIT;
    1176:	66 a1 e0 2e 67 66    	mov    0x66672ee0,%ax
    117c:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    _Schedule();
    1183:	66 e8 f2 f0          	callw  279 <_fork_user+0x9>
    1187:	ff                   	(bad)  
    1188:	ff 66 c9             	jmp    *-0x37(%esi)
}
    118b:	66 c3                	retw   

0000118d <sys_wait>:
int sys_wait(){
    118d:	66 55                	push   %bp
    118f:	66 89 e5             	mov    %sp,%bp
    1192:	66 83 ec 04          	sub    $0x4,%sp
    int index = _CurrentProg - PCB_list;
    1196:	66 a1 e0 2e 66 89    	mov    0x89662ee0,%ax
    119c:	c2 66 b8             	ret    $0xb866
    119f:	c0 2c 00 00          	shrb   $0x0,(%eax,%eax,1)
    11a3:	66 29 c2             	sub    %ax,%dx
    11a6:	66 89 d0             	mov    %dx,%ax
    11a9:	66 c1 f8 02          	sar    $0x2,%ax
    11ad:	66 89 c2             	mov    %ax,%dx
    11b0:	66 89 d0             	mov    %dx,%ax
    11b3:	66 01 c0             	add    %ax,%ax
    11b6:	66 01 d0             	add    %dx,%ax
    11b9:	67 66 8d 14          	lea    (%si),%dx
    11bd:	85 00                	test   %eax,(%eax)
    11bf:	00 00                	add    %al,(%eax)
    11c1:	00 66 01             	add    %ah,0x1(%esi)
    11c4:	d0 66 89             	shlb   -0x77(%esi)
    11c7:	c2 66 c1             	ret    $0xc166
    11ca:	e2 08                	loop   11d4 <sys_wait+0x47>
    11cc:	66 01 d0             	add    %dx,%ax
    11cf:	66 89 c2             	mov    %ax,%dx
    11d2:	66 c1 e2 10          	shl    $0x10,%dx
    11d6:	66 01 d0             	add    %dx,%ax
    11d9:	66 f7 d8             	neg    %ax
    11dc:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_bolocked(index);
    11e1:	67 66 ff 75 fc       	pushw  -0x4(%di)
    11e6:	66 e8 16 00          	callw  1200 <sys_wait+0x73>
    11ea:	00 00                	add    %al,(%eax)
    11ec:	66 83 c4 04          	add    $0x4,%sp
    _Schedule();
    11f0:	66 e8 85 f0          	callw  279 <_fork_user+0x9>
    11f4:	ff                   	(bad)  
    11f5:	ff 66 a1             	jmp    *-0x5f(%esi)
    return _CurrentProg -> eax;
    11f8:	e0 2e                	loopne 1228 <sys_bolocked+0x26>
    11fa:	67 66 8b 00          	mov    (%bx,%si),%ax
}
    11fe:	66 c9                	leavew 
    1200:	66 c3                	retw   

00001202 <sys_bolocked>:
void sys_bolocked(int index){
    1202:	66 55                	push   %bp
    1204:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    1207:	fa                   	cli    
    PCB_list[index].prg_status = BLOCKED;
    1208:	67 66 8b 45 08       	mov    0x8(%di),%ax
    120d:	66 c1 e0 02          	shl    $0x2,%ax
    1211:	66 89 c2             	mov    %ax,%dx
    1214:	66 c1 e2 04          	shl    $0x4,%dx
    1218:	66 01 d0             	add    %dx,%ax
    121b:	66 05 f0 2c          	add    $0x2cf0,%ax
    121f:	00 00                	add    %al,(%eax)
    1221:	67 66 c7 40 08 02 00 	movw   $0x2,0x8(%bx,%si)
    1228:	00 00                	add    %al,(%eax)
    __asm__("sti\n");
    122a:	fb                   	sti    
}
    122b:	66 5d                	pop    %bp
    122d:	66 c3                	retw   

0000122f <sys_wakeup>:
void sys_wakeup(int index){
    122f:	66 55                	push   %bp
    1231:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    1234:	fa                   	cli    
    PCB_list[index].prg_status = READY;
    1235:	67 66 8b 45 08       	mov    0x8(%di),%ax
    123a:	66 c1 e0 02          	shl    $0x2,%ax
    123e:	66 89 c2             	mov    %ax,%dx
    1241:	66 c1 e2 04          	shl    $0x4,%dx
    1245:	66 01 d0             	add    %dx,%ax
    1248:	66 05 f0 2c          	add    $0x2cf0,%ax
    124c:	00 00                	add    %al,(%eax)
    124e:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    1255:	00 00                	add    %al,(%eax)
    __asm__("sti\n");
    1257:	fb                   	sti    
}
    1258:	66 5d                	pop    %bp
    125a:	66 c3                	retw   

0000125c <sys_run>:
void sys_run(){
    125c:	66 55                	push   %bp
    125e:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    1261:	66 a1 e0 2e 67 66    	mov    0x66672ee0,%ax
    1267:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    126e:	66 5d                	pop    %bp
    1270:	66 c3                	retw   

00001272 <do_fork>:

int do_fork(){
    1272:	66 55                	push   %bp
    1274:	66 89 e5             	mov    %sp,%bp
    1277:	66 83 ec 04          	sub    $0x4,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    127b:	67 66 c7 45 fc 04 2d 	movw   $0x2d04,-0x4(%di)
    1282:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN )    fork_prg = fork_prg + 1;//应该增加used位，防止被覆盖
    1284:	eb 06                	jmp    128c <do_fork+0x1a>
    1286:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    128c:	67 66 81 7d fc e0 2e 	cmpw   $0x2ee0,-0x4(%di)
    1293:	00 00                	add    %al,(%eax)
    1295:	73 10                	jae    12a7 <do_fork+0x35>
    1297:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    129c:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    12a1:	66 83 f8 01          	cmp    $0x1,%ax
    12a5:	74 df                	je     1286 <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    12a7:	67 66 81 7d fc 9c 2e 	cmpw   $0x2e9c,-0x4(%di)
    12ae:	00 00                	add    %al,(%eax)
    12b0:	76 0f                	jbe    12c1 <do_fork+0x4f>
    12b2:	66 a1 e0 2e 67 66    	mov    0x66672ee0,%ax
    12b8:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    12be:	e9 dc 01 66 e8       	jmp    e866149f <_end+0xe865e5bb>
    else{
        _Schedule_once();
    12c3:	9e                   	sahf   
    12c4:	ef                   	out    %eax,(%dx)
    12c5:	ff                   	(bad)  
    12c6:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    12c9:	ec                   	in     (%dx),%al
    12ca:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    12cb:	66 a1 e0 2e 67 66    	mov    0x66672ee0,%ax
    12d1:	ff 75 fc             	pushl  -0x4(%ebp)
    12d4:	66 50                	push   %ax
    12d6:	66 e8 3e 02          	callw  1518 <counter+0x62>
    12da:	00 00                	add    %al,(%eax)
    12dc:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    12e0:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    12e4:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    12e9:	66 b8 c0 2c          	mov    $0x2cc0,%ax
    12ed:	00 00                	add    %al,(%eax)
    12ef:	66 29 c2             	sub    %ax,%dx
    12f2:	66 89 d0             	mov    %dx,%ax
    12f5:	66 c1 f8 02          	sar    $0x2,%ax
    12f9:	66 89 c2             	mov    %ax,%dx
    12fc:	66 89 d0             	mov    %dx,%ax
    12ff:	66 01 c0             	add    %ax,%ax
    1302:	66 01 d0             	add    %dx,%ax
    1305:	67 66 8d 14          	lea    (%si),%dx
    1309:	85 00                	test   %eax,(%eax)
    130b:	00 00                	add    %al,(%eax)
    130d:	00 66 01             	add    %ah,0x1(%esi)
    1310:	d0 66 89             	shlb   -0x77(%esi)
    1313:	c2 66 c1             	ret    $0xc166
    1316:	e2 08                	loop   1320 <do_fork+0xae>
    1318:	66 01 d0             	add    %dx,%ax
    131b:	66 89 c2             	mov    %ax,%dx
    131e:	66 c1 e2 10          	shl    $0x10,%dx
    1322:	66 01 d0             	add    %dx,%ax
    1325:	66 f7 d8             	neg    %ax
    1328:	66 89 c2             	mov    %ax,%dx
    132b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1330:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    1335:	66 a1 e0 2e 66 89    	mov    0x89662ee0,%ax
    133b:	c2 66 b8             	ret    $0xb866
    133e:	c0 2c 00 00          	shrb   $0x0,(%eax,%eax,1)
    1342:	66 29 c2             	sub    %ax,%dx
    1345:	66 89 d0             	mov    %dx,%ax
    1348:	66 c1 f8 02          	sar    $0x2,%ax
    134c:	66 89 c2             	mov    %ax,%dx
    134f:	66 89 d0             	mov    %dx,%ax
    1352:	66 01 c0             	add    %ax,%ax
    1355:	66 01 d0             	add    %dx,%ax
    1358:	67 66 8d 14          	lea    (%si),%dx
    135c:	85 00                	test   %eax,(%eax)
    135e:	00 00                	add    %al,(%eax)
    1360:	00 66 01             	add    %ah,0x1(%esi)
    1363:	d0 66 89             	shlb   -0x77(%esi)
    1366:	c2 66 c1             	ret    $0xc166
    1369:	e2 08                	loop   1373 <do_fork+0x101>
    136b:	66 01 d0             	add    %dx,%ax
    136e:	66 89 c2             	mov    %ax,%dx
    1371:	66 c1 e2 10          	shl    $0x10,%dx
    1375:	66 01 d0             	add    %dx,%ax
    1378:	66 f7 d8             	neg    %ax
    137b:	66 89 c2             	mov    %ax,%dx
    137e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1383:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    1388:	66 a1 e0 2e 67 66    	mov    0x66672ee0,%ax
    138e:	8b 50 20             	mov    0x20(%eax),%edx
    1391:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1396:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    139b:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    13a0:	66 b8 c0 2c          	mov    $0x2cc0,%ax
    13a4:	00 00                	add    %al,(%eax)
    13a6:	66 29 c2             	sub    %ax,%dx
    13a9:	66 89 d0             	mov    %dx,%ax
    13ac:	66 c1 f8 02          	sar    $0x2,%ax
    13b0:	66 89 c2             	mov    %ax,%dx
    13b3:	66 89 d0             	mov    %dx,%ax
    13b6:	66 01 c0             	add    %ax,%ax
    13b9:	66 01 d0             	add    %dx,%ax
    13bc:	67 66 8d 14          	lea    (%si),%dx
    13c0:	85 00                	test   %eax,(%eax)
    13c2:	00 00                	add    %al,(%eax)
    13c4:	00 66 01             	add    %ah,0x1(%esi)
    13c7:	d0 66 89             	shlb   -0x77(%esi)
    13ca:	c2 66 c1             	ret    $0xc166
    13cd:	e2 08                	loop   13d7 <do_fork+0x165>
    13cf:	66 01 d0             	add    %dx,%ax
    13d2:	66 89 c2             	mov    %ax,%dx
    13d5:	66 c1 e2 10          	shl    $0x10,%dx
    13d9:	66 01 d0             	add    %dx,%ax
    13dc:	66 f7 d8             	neg    %ax
    13df:	66 83 c0 02          	add    $0x2,%ax
    13e3:	66 c1 e0 0c          	shl    $0xc,%ax
    13e7:	66 89 c2             	mov    %ax,%dx
    13ea:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    13ef:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    13f4:	66 a1 e0 2e 67 66    	mov    0x66672ee0,%ax
    13fa:	8b 50 30             	mov    0x30(%eax),%edx
    13fd:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1402:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    1407:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    140c:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    1413:	00 00                	add    %al,(%eax)
       // __asm__("enter $0,$0");
        _Schedule_once();
    1415:	66 e8 4a ee          	callw  263 <S+0x14>
    1419:	ff                   	(bad)  
    141a:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    141d:	ec                   	in     (%dx),%al
    141e:	06                   	push   %es
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    141f:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1424:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1429:	66 a1 e0 2e 67 66    	mov    0x66672ee0,%ax
    142f:	8b 50 28             	mov    0x28(%eax),%edx
    1432:	66 a1 e0 2e 67 66    	mov    0x66672ee0,%ax
    1438:	8b 40 24             	mov    0x24(%eax),%eax
    143b:	66 51                	push   %cx
    143d:	66 52                	push   %dx
    143f:	66 50                	push   %ax
    1441:	66 e8 0e ed          	callw  153 <Message31+0x4>
    1445:	ff                   	(bad)  
    1446:	ff 66 83             	jmp    *-0x7d(%esi)
    1449:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
        __asm__("add $6,%esp");
    144c:	83 c4 06             	add    $0x6,%esp
        fork_prg -> ip = _CurrentProg -> ip;
    144f:	66 a1 e0 2e 67 66    	mov    0x66672ee0,%ax
    1455:	8b 50 2c             	mov    0x2c(%eax),%edx
    1458:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    145d:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    1462:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1467:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    146d:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    146f:	66 a1 e0 2e 67 66    	mov    0x66672ee0,%ax
    1475:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1478:	75 08                	jne    1482 <do_fork+0x210>
            return 0;
    147a:	66 b8 00 00          	mov    $0x0,%ax
    147e:	00 00                	add    %al,(%eax)
    1480:	eb 1b                	jmp    149d <do_fork+0x22b>
        }
        _CurrentProg -> eax = _CurrentProg -> id;
    1482:	66 a1 e0 2e 66 8b    	mov    0x8b662ee0,%ax
    1488:	16                   	push   %ss
    1489:	e0 2e                	loopne 14b9 <counter+0x3>
    148b:	67 66 8b 52 3c       	mov    0x3c(%bp,%si),%dx
    1490:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    1494:	66 a1 e0 2e 67 66    	mov    0x66672ee0,%ax
    149a:	8b 00                	mov    (%eax),%eax
    149c:	90                   	nop
    }
}
    149d:	66 c9                	leavew 
    149f:	66 c3                	retw   

000014a1 <thread_join>:
void thread_join(){
    14a1:	66 55                	push   %bp
    14a3:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    14a6:	90                   	nop
    14a7:	66 e8 09 00          	callw  14b4 <thread_join+0x13>
    14ab:	00 00                	add    %al,(%eax)
    14ad:	66 85 c0             	test   %ax,%ax
    14b0:	75 f5                	jne    14a7 <thread_join+0x6>
    }
}
    14b2:	66 5d                	pop    %bp
    14b4:	66 c3                	retw   

000014b6 <counter>:
int counter(){
    14b6:	66 55                	push   %bp
    14b8:	66 89 e5             	mov    %sp,%bp
    14bb:	66 83 ec 08          	sub    $0x8,%sp
    int i = 0;
    14bf:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    14c6:	00 00                	add    %al,(%eax)
    int count = 0;
    14c8:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    14cf:	00 00                	add    %al,(%eax)
    for(i = 1;i < PCB_NUMMER;i ++){
    14d1:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    14d8:	00 00                	add    %al,(%eax)
    14da:	eb 2d                	jmp    1509 <counter+0x53>
        if(PCB_list[i].prg_status != EXIT){
    14dc:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    14e1:	66 c1 e0 02          	shl    $0x2,%ax
    14e5:	66 89 c2             	mov    %ax,%dx
    14e8:	66 c1 e2 04          	shl    $0x4,%dx
    14ec:	66 01 d0             	add    %dx,%ax
    14ef:	66 05 f0 2c          	add    $0x2cf0,%ax
    14f3:	00 00                	add    %al,(%eax)
    14f5:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    14fa:	66 85 c0             	test   %ax,%ax
    14fd:	74 05                	je     1504 <counter+0x4e>
            count ++;
    14ff:	67 66 ff 45 f8       	incw   -0x8(%di)
    }
}
int counter(){
    int i = 0;
    int count = 0;
    for(i = 1;i < PCB_NUMMER;i ++){
    1504:	67 66 ff 45 fc       	incw   -0x4(%di)
    1509:	67 66 83 7d fc 07    	cmpw   $0x7,-0x4(%di)
    150f:	7e cb                	jle    14dc <counter+0x26>
        if(PCB_list[i].prg_status != EXIT){
            count ++;
        }
    }
    return count;
    1511:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    1516:	66 c9                	leavew 
    1518:	66 c3                	retw   

0000151a <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    151a:	66 55                	push   %bp
    151c:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    151f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1524:	67 66 8b 10          	mov    (%bx,%si),%dx
    1528:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    152d:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    1531:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1536:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    153b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1540:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    1545:	67 66 8b 45 08       	mov    0x8(%di),%ax
    154a:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    154f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1554:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    1559:	67 66 8b 45 08       	mov    0x8(%di),%ax
    155e:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    1563:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1568:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    156d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1572:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    1577:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    157c:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    1581:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1586:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    158b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1590:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    1595:	67 66 8b 45 08       	mov    0x8(%di),%ax
    159a:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    159f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    15a4:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    15a9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15ae:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    15b3:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    15b8:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    15bd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15c2:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    15c7:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    15cc:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    15d1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15d6:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    15db:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    15e0:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    15e5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15ea:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    15ef:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    15f4:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    15f9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15fe:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    1603:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1608:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    160d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1612:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    1617:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    161c:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    1621:	66 5d                	pop    %bp
    1623:	66 c3                	retw   

00001625 <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    1625:	66 55                	push   %bp
    1627:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    162a:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    162f:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1634:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1639:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    163e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1643:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    1648:	66 51                	push   %cx
    164a:	66 52                	push   %dx
    164c:	66 50                	push   %ax
    164e:	66 e8 01 eb          	callw  153 <Message31+0x4>
    1652:	ff                   	(bad)  
    1653:	ff 66 83             	jmp    *-0x7d(%esi)
    1656:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    1659:	c9                   	leave  
    165a:	66 c3                	retw   

0000165c <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    165c:	66 55                	push   %bp
    165e:	66 89 e5             	mov    %sp,%bp
    1661:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    1665:	66 e8 05 ec          	callw  26e <_Schedule_once+0x9>
    1669:	ff                   	(bad)  
    166a:	ff 67 66             	jmp    *0x66(%edi)
    166d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    1670:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    1675:	66 c9                	leavew 
    1677:	66 c3                	retw   

00001679 <wait>:
char wait(){
    1679:	66 55                	push   %bp
    167b:	66 89 e5             	mov    %sp,%bp
    167e:	66 83 ec 08          	sub    $0x8,%sp
    int temp_ch = _wait();
    1682:	66 e8 00 ec          	callw  286 <_Schedule+0xb>
    1686:	ff                   	(bad)  
    1687:	ff 67 66             	jmp    *0x66(%edi)
    168a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char ch = '0' + temp_ch;
    168d:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1692:	66 83 c0 30          	add    $0x30,%ax
    1696:	67 88 45 fb          	mov    %al,-0x5(%di)
    return ch;
    169a:	67 8a 45 fb          	mov    -0x5(%di),%al
    //_wait();
}
    169e:	66 c9                	leavew 
    16a0:	66 c3                	retw   

000016a2 <exit>:
void exit(char ch){
    16a2:	66 55                	push   %bp
    16a4:	66 89 e5             	mov    %sp,%bp
    16a7:	66 83 ec 04          	sub    $0x4,%sp
    16ab:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16b0:	67 88 45 fc          	mov    %al,-0x4(%di)
    _exit(ch);
    16b4:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    16ba:	66 50                	push   %ax
    16bc:	66 e8 d1 eb          	callw  291 <_wait+0x9>
    16c0:	ff                   	(bad)  
    16c1:	ff 66 83             	jmp    *-0x7d(%esi)
    16c4:	c4 04 66             	les    (%esi,%eiz,2),%eax
    16c7:	c9                   	leave  
    16c8:	66 c3                	retw   
