
user1.elf:     file format elf32-i386


Disassembly of section .text:

00000100 <user1>:
     100:	8c c8                	mov    %cs,%eax
     102:	8e d8                	mov    %eax,%ds
     104:	8e d0                	mov    %eax,%ss
     106:	bc 00 01 b8 00       	mov    $0xb80100,%esp
     10b:	b8 8e c0 14 00       	mov    $0x14c08e,%eax

0000010e <record>:
     10e:	14 00                	adc    $0x0,%al
     110:	c7 06 0e 01 50 00    	movl   $0x50010e,(%esi)

00000116 <start>:
     116:	e8 5c 01 a1 64       	call   64a10277 <delay+0x64a03f27>
     11b:	2d a3 5e 2d a1       	sub    $0xa12d5ea3,%eax
     120:	66 2d a3 60          	sub    $0x60a3,%ax
     124:	2d a0 62 2d a2       	sub    $0xa22d62a0,%eax
     129:	5c                   	pop    %esp
     12a:	2d a0 63 2d a2       	sub    $0xa22d63a0,%eax
     12f:	5d                   	pop    %ebp
     130:	2d a0 68 2d a2       	sub    $0xa22d68a0,%eax
     135:	0f 00 a0 69 2d a2 7e 	verr   0x7ea22d69(%eax)
     13c:	2d e8 7d 00 fe       	sub    $0xfe007de8,%eax
     141:	06                   	push   %es
     142:	0f 00 a1 5e 2d a3 64 	verr   0x64a32d5e(%ecx)
     149:	2d a1 60 2d a3       	sub    $0xa32d60a1,%eax
     14e:	66 2d a0 5c          	sub    $0x5ca0,%ax
     152:	2d a2 62 2d a0       	sub    $0xa02d62a2,%eax
     157:	5d                   	pop    %ebp
     158:	2d a2 63 2d a0       	sub    $0xa02d63a2,%eax
     15d:	0f 00 a2 68 2d a1 6c 	verr   0x6ca12d68(%edx)
     164:	2d a3 5e 2d a1       	sub    $0xa12d5ea3,%eax
     169:	6e                   	outsb  %ds:(%esi),(%dx)
     16a:	2d a3 60 2d a0       	sub    $0xa02d60a3,%eax
     16f:	6a 2d                	push   $0x2d
     171:	a2 5c 2d a0 6b       	mov    %al,0x6ba02d5c
     176:	2d a2 5d 2d a0       	sub    $0xa02d5da2,%eax
     17b:	70 2d                	jo     1aa <start+0x94>
     17d:	a2 0f 00 a0 71       	mov    %al,0x71a0000f
     182:	2d a2 7e 2d e8       	sub    $0xe82d7ea2,%eax
     187:	34 00                	xor    $0x0,%al
     189:	fe 06                	incb   (%esi)
     18b:	0f 00 a1 5e 2d a3 6c 	verr   0x6ca32d5e(%ecx)
     192:	2d a1 60 2d a3       	sub    $0xa32d60a1,%eax
     197:	6e                   	outsb  %ds:(%esi),(%dx)
     198:	2d a0 5c 2d a2       	sub    $0xa22d5ca0,%eax
     19d:	6a 2d                	push   $0x2d
     19f:	a0 5d 2d a2 6b       	mov    0x6ba22d5d,%al
     1a4:	2d a0 0f 00 a2       	sub    $0xa2000fa0,%eax
     1a9:	70 2d                	jo     1d8 <update+0xb>
     1ab:	cd 33                	int    $0x33
     1ad:	ff 0e                	decl   (%esi)
     1af:	0e                   	push   %cs
     1b0:	01 83 3e 0e 01 01    	add    %eax,0x1010e3e(%ebx)
     1b6:	75 02                	jne    1ba <again>
     1b8:	cd 38                	int    $0x38

000001ba <again>:
     1ba:	e9 59 ff e8 7e       	jmp    7ee90118 <delay+0x7ee83dc8>

000001bd <move>:
     1bd:	e8 7e 00 e8 ab       	call   abe80240 <delay+0xabe73ef0>
     1c2:	00 e8                	add    %ch,%al
     1c4:	07                   	pop    %es
     1c5:	00 e8                	add    %ch,%al
     1c7:	75 00                	jne    1c9 <move+0xc>
     1c9:	e8 88 00 c3 a0       	call   a0c30256 <delay+0xa0c23f06>

000001cd <update>:
     1cd:	a0 5c 2d e8 07       	mov    0x7e82d5c,%al
     1d2:	00 a0 5d 2d e8 33    	add    %ah,0x33e82d5d(%eax)
     1d8:	00 c3                	add    %al,%bl

000001da <handlex>:
     1da:	3c 01                	cmp    $0x1,%al
     1dc:	75 17                	jne    1f5 <dec1>
     1de:	ff 06                	incl   (%esi)
     1e0:	5e                   	pop    %esi
     1e1:	2d 83 3e 5e 2d       	sub    $0x2d5e3e83,%eax
     1e6:	0f 75 54 c7 06       	pcmpeqw 0x6(%edi,%eax,8),%mm2
     1eb:	5e                   	pop    %esi
     1ec:	2d 0d 00 c6 06       	sub    $0x6c6000d,%eax
     1f1:	5c                   	pop    %esp
     1f2:	2d 00 c3 ff 0e       	sub    $0xeffc300,%eax

000001f5 <dec1>:
     1f5:	ff 0e                	decl   (%esi)
     1f7:	5e                   	pop    %esi
     1f8:	2d 83 3e 5e 2d       	sub    $0x2d5e3e83,%eax
     1fd:	ff 75 3d             	pushl  0x3d(%ebp)
     200:	c7 06 5e 2d 01 00    	movl   $0x12d5e,(%esi)
     206:	c6 06 5c             	movb   $0x5c,(%esi)
     209:	2d 01 c3 3c 01       	sub    $0x13cc301,%eax

0000020c <handley>:
     20c:	3c 01                	cmp    $0x1,%al
     20e:	75 17                	jne    227 <dec2>
     210:	ff 06                	incl   (%esi)
     212:	60                   	pusha  
     213:	2d 83 3e 60 2d       	sub    $0x2d603e83,%eax
     218:	28 75 22             	sub    %dh,0x22(%ebp)
     21b:	c7 06 60 2d 26 00    	movl   $0x262d60,(%esi)
     221:	c6 06 5d             	movb   $0x5d,(%esi)
     224:	2d 00 c3 ff 0e       	sub    $0xeffc300,%eax

00000227 <dec2>:
     227:	ff 0e                	decl   (%esi)
     229:	60                   	pusha  
     22a:	2d 83 3e 60 2d       	sub    $0x2d603e83,%eax
     22f:	ff 75 0b             	pushl  0xb(%ebp)
     232:	c7 06 60 2d 01 00    	movl   $0x12d60,(%esi)
     238:	c6 06 5d             	movb   $0x5d,(%esi)
     23b:	2d 01 c3 31 c0       	sub    $0xc031c301,%eax

0000023d <notchange>:
     23d:	c3                   	ret    

0000023e <Setpoint>:
     23e:	31 c0                	xor    %eax,%eax
     240:	a1 5e 2d bb 50       	mov    0x50bb2d5e,%eax
     245:	00 f7                	add    %dh,%bh
     247:	e3 03                	jecxz  24c <Setpoint+0xe>
     249:	06                   	push   %es
     24a:	60                   	pusha  
     24b:	2d bb 02 00 f7       	sub    $0xf70002bb,%eax
     250:	e3 89                	jecxz  1db <handlex+0x1>
     252:	c3                   	ret    
     253:	c3                   	ret    

00000254 <show>:
     254:	8a 26                	mov    (%esi),%ah
     256:	0f 00 a0 7e 2d 26 89 	verr   -0x76d9d282(%eax)
     25d:	07                   	pop    %es
     25e:	8a 1e                	mov    (%esi),%bl
     260:	0f 00 80 fb 10 75 06 	sldt   0x67510fb(%eax)
     267:	b3 01                	mov    $0x1,%bl
     269:	88 1e                	mov    %bl,(%esi)
     26b:	0f 00 c3             	sldt   %ebx

0000026d <c>:
     26d:	c3                   	ret    

0000026e <kill>:
     26e:	b8 00 00 26 89       	mov    $0x89260000,%eax
     273:	07                   	pop    %es
     274:	c3                   	ret    

00000275 <loop1>:
     275:	8b 0e                	mov    (%esi),%ecx
     277:	72 2d                	jb     2a6 <showname+0x24>

00000279 <LOOP1>:
     279:	a1 74 2d 48 7f       	mov    0x7f482d74,%eax

0000027c <LOOP2>:
     27c:	48                   	dec    %eax
     27d:	7f fd                	jg     27c <LOOP2>
     27f:	e2 f8                	loop   279 <LOOP1>
     281:	c3                   	ret    

00000282 <showname>:
     282:	06                   	push   %es
     283:	53                   	push   %ebx
     284:	66 55                	push   %bp
     286:	8c d8                	mov    %ds,%eax
     288:	8e c0                	mov    %eax,%es
     28a:	b8 76 2d 89 c5       	mov    $0xc5892d76,%eax
     28f:	b8 01 13 b6 0c       	mov    $0xcb61301,%eax
     294:	b2 28                	mov    $0x28,%dl
     296:	b9 08 00 b7 00       	mov    $0xb70008,%ecx
     29b:	8a 1e                	mov    (%esi),%bl
     29d:	0f 00 cd             	str    %ebp
     2a0:	10 66 5d             	adc    %ah,0x5d(%esi)
     2a3:	5b                   	pop    %ebx
     2a4:	07                   	pop    %es
     2a5:	c3                   	ret    
     2a6:	66 90                	xchg   %ax,%ax
     2a8:	66 90                	xchg   %ax,%ax
     2aa:	66 90                	xchg   %ax,%ax
     2ac:	66 90                	xchg   %ax,%ax
     2ae:	66 90                	xchg   %ax,%ax

000002b0 <count>:
     2b0:	08 2d 00 00 00 00    	or     %ch,0x0

000002b1 <alpha>:
     2b1:	2d 00 00 00 00       	sub    $0x0,%eax

000002b2 <int_09_saved>:
     2b2:	00 00                	add    %al,(%eax)
	...

000002b6 <program_saved>:
     2b6:	70 00                	jo     2b8 <program_saved+0x2>
	...

000002ba <ds_saved>:
     2ba:	7c 00                	jl     2bc <ds_saved+0x2>
	...

000002be <return_save>:
     2be:	88 00                	mov    %al,(%eax)

000002c0 <esi_save>:
     2c0:	96                   	xchg   %eax,%esi
     2c1:	00 00                	add    %al,(%eax)
	...

000002c4 <temp>:
     2c4:	e8 03 b4 00 00       	call   b6cc <BOOTSEG2+0x3acc>

000002c6 <kernelesp_saved>:
     2c6:	b4 00                	mov    $0x0,%ah
	...

000002ca <esp_saved_inkernel>:
     2ca:	c8 00 00 00          	enter  $0x0,$0x0

000002ce <esp_saved_in_user>:
     2ce:	f0 00 00             	lock add %al,(%eax)
	...

000002d2 <ss_saved_in_user>:
     2d2:	2c 01                	sub    $0x1,%al
	...

000002d6 <color>:
     2d6:	01 c2                	add    %eax,%edx

000002d7 <ss_saved_fork>:
     2d7:	c2 01 00             	ret    $0x1
	...

000002db <retaddr>:
     2db:	58                   	pop    %eax
     2dc:	02 00                	add    (%eax),%al
	...

000002df <Message31>:
     2df:	74 69                	je     34a <_readinput+0x9>
     2e1:	6d                   	insl   (%dx),%es:(%edi)
     2e2:	65 3a 20             	cmp    %gs:(%eax),%ah

000002e5 <_sys_stack_copy>:
     2e5:	c8 00 00 00          	enter  $0x0,$0x0
     2e9:	8e d0                	mov    %eax,%ss
     2eb:	60                   	pusha  
     2ec:	1e                   	push   %ds
     2ed:	8b 46 06             	mov    0x6(%esi),%eax
     2f0:	8b 56 0a             	mov    0xa(%esi),%edx
     2f3:	8b 4e 0e             	mov    0xe(%esi),%ecx
     2f6:	8c db                	mov    %ds,%ebx

000002f8 <while_loop1>:
     2f8:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
     2fe:	8e d8                	mov    %eax,%ds
     300:	67 8b 1a             	mov    (%bp,%si),%ebx
     303:	8e d9                	mov    %ecx,%ds
     305:	67 89 1a             	mov    %ebx,(%bp,%si)
     308:	83 c2 02             	add    $0x2,%edx
     30b:	eb eb                	jmp    2f8 <while_loop1>

0000030d <end_for_copy>:
     30d:	1f                   	pop    %ds
     30e:	61                   	popa   
     30f:	c9                   	leave  
     310:	66 5a                	pop    %dx
     312:	ff e2                	jmp    *%edx

00000314 <_clearscreen>:
     314:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     319:	66 5a                	pop    %dx
     31b:	ff e2                	jmp    *%edx

0000031d <_printchar>:
     31d:	c8 00 00 00          	enter  $0x0,$0x0
     321:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
     326:	57                   	push   %edi
     327:	66 8b 4e 06          	mov    0x6(%esi),%cx
     32b:	66 8b 7e 0a          	mov    0xa(%esi),%di
     32f:	66 8b 56 0e          	mov    0xe(%esi),%dx
     333:	88 d5                	mov    %dl,%ch
     335:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
     33c:	00 66 5a             	add    %ah,0x5a(%esi)
     33f:	ff e2                	jmp    *%edx

00000341 <_readinput>:
     341:	c8 04 00 00          	enter  $0x4,$0x0
     345:	b4 00                	mov    $0x0,%ah
     347:	cd 16                	int    $0x16
     349:	b4 00                	mov    $0x0,%ah
     34b:	66 67 89 04          	mov    %ax,(%si)
     34f:	24 66                	and    $0x66,%al
     351:	67 8b 04             	mov    (%si),%eax
     354:	24 c9                	and    $0xc9,%al
     356:	66 5a                	pop    %dx
     358:	ff e2                	jmp    *%edx

0000035a <_showchar>:
     35a:	c8 00 00 00          	enter  $0x0,$0x0
     35e:	50                   	push   %eax
     35f:	53                   	push   %ebx
     360:	8b 46 06             	mov    0x6(%esi),%eax
     363:	b4 0e                	mov    $0xe,%ah
     365:	b3 00                	mov    $0x0,%bl
     367:	cd 10                	int    $0x10
     369:	5b                   	pop    %ebx
     36a:	58                   	pop    %eax
     36b:	c9                   	leave  
     36c:	66 5a                	pop    %dx
     36e:	ff e2                	jmp    *%edx

00000370 <_setPoint>:
     370:	c8 00 00 00          	enter  $0x0,$0x0
     374:	53                   	push   %ebx
     375:	b7 00                	mov    $0x0,%bh
     377:	8a 77 06             	mov    0x6(%edi),%dh
     37a:	8a 57 0a             	mov    0xa(%edi),%dl
     37d:	b4 02                	mov    $0x2,%ah
     37f:	cd 10                	int    $0x10
     381:	5b                   	pop    %ebx
     382:	c9                   	leave  
     383:	66 5a                	pop    %dx
     385:	ff e2                	jmp    *%edx

00000387 <_loadP>:
     387:	c8 00 00 00          	enter  $0x0,$0x0
     38b:	60                   	pusha  
     38c:	06                   	push   %es
     38d:	1e                   	push   %ds
     38e:	8c c8                	mov    %cs,%eax
     390:	8e d8                	mov    %eax,%ds
     392:	8b 46 0e             	mov    0xe(%esi),%eax
     395:	8e c0                	mov    %eax,%es
     397:	b2 00                	mov    $0x0,%dl
     399:	8b 46 0a             	mov    0xa(%esi),%eax
     39c:	b3 12                	mov    $0x12,%bl
     39e:	f6 f3                	div    %bl
     3a0:	88 e1                	mov    %ah,%cl
     3a2:	30 e4                	xor    %ah,%ah
     3a4:	b3 02                	mov    $0x2,%bl
     3a6:	f6 f3                	div    %bl
     3a8:	88 e6                	mov    %ah,%dh
     3aa:	88 c5                	mov    %al,%ch
     3ac:	8a 46 06             	mov    0x6(%esi),%al
     3af:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
     3b4:	cd 13                	int    $0x13
     3b6:	1f                   	pop    %ds
     3b7:	07                   	pop    %es
     3b8:	61                   	popa   
     3b9:	c9                   	leave  
     3ba:	66 5a                	pop    %dx
     3bc:	ff e2                	jmp    *%edx

000003be <_RunProgress>:
     3be:	c8 00 00 00          	enter  $0x0,$0x0
     3c2:	8c c8                	mov    %cs,%eax
     3c4:	8e d8                	mov    %eax,%ds
     3c6:	8e c0                	mov    %eax,%es
     3c8:	8b 5e 06             	mov    0x6(%esi),%ebx
     3cb:	c7 06 b6 02 00 01    	movl   $0x10002b6,(%esi)
     3d1:	89 1e                	mov    %ebx,(%esi)
     3d3:	b8 02 66 89 26       	mov    $0x26896602,%eax
     3d8:	ca 02 26             	lret   $0x2602
     3db:	ff 1e                	lcall  *(%esi)
     3dd:	b6 02                	mov    $0x2,%dh

000003df <S>:
     3df:	8c c8                	mov    %cs,%eax
     3e1:	8e d8                	mov    %eax,%ds
     3e3:	8e c0                	mov    %eax,%es
     3e5:	8e d0                	mov    %eax,%ss
     3e7:	66 8b 26             	mov    (%esi),%sp
     3ea:	ca 02 b4             	lret   $0xb402
     3ed:	00 cd                	add    %cl,%ch
     3ef:	16                   	push   %ss
     3f0:	c9                   	leave  
     3f1:	66 5a                	pop    %dx
     3f3:	ff e2                	jmp    *%edx

000003f5 <_Schedule_once>:
     3f5:	c8 00 00 00          	enter  $0x0,$0x0
     3f9:	cd 41                	int    $0x41
     3fb:	c9                   	leave  
     3fc:	66 5a                	pop    %dx
     3fe:	ff e2                	jmp    *%edx

00000400 <_fork_user>:
     400:	c8 00 00 00          	enter  $0x0,$0x0
     404:	cd 39                	int    $0x39
     406:	c9                   	leave  
     407:	66 5a                	pop    %dx
     409:	ff e2                	jmp    *%edx

0000040b <_Schedule>:
     40b:	c8 00 00 00          	enter  $0x0,$0x0
     40f:	16                   	push   %ss
     410:	cd 42                	int    $0x42
     412:	17                   	pop    %ss
     413:	c9                   	leave  
     414:	66 5a                	pop    %dx
     416:	ff e2                	jmp    *%edx

00000418 <_wait>:
     418:	c8 00 00 00          	enter  $0x0,$0x0
     41c:	cd 43                	int    $0x43
     41e:	c9                   	leave  
     41f:	66 5a                	pop    %dx
     421:	ff e2                	jmp    *%edx

00000423 <_exit>:
     423:	c8 00 00 00          	enter  $0x0,$0x0
     427:	66 67 8b 45 06       	mov    0x6(%di),%ax
     42c:	66 50                	push   %ax
     42e:	cd 3a                	int    $0x3a
     430:	c9                   	leave  
     431:	66 5a                	pop    %dx
     433:	ff e2                	jmp    *%edx

00000435 <_SetINT20h>:
     435:	fa                   	cli    
     436:	1e                   	push   %ds
     437:	06                   	push   %es
     438:	8c c8                	mov    %cs,%eax
     43a:	8e d8                	mov    %eax,%ds
     43c:	8e c0                	mov    %eax,%es
     43e:	8c 16                	mov    %ss,(%esi)
     440:	d2 02                	rolb   %cl,(%edx)
     442:	8e d0                	mov    %eax,%ss
     444:	66 89 26             	mov    %sp,(%esi)
     447:	ce                   	into   
     448:	02 66 8b             	add    -0x75(%esi),%ah
     44b:	26                   	es
     44c:	ca 02 53             	lret   $0x5302
     44f:	51                   	push   %ecx
     450:	52                   	push   %edx
     451:	b4 01                	mov    $0x1,%ah
     453:	cd 16                	int    $0x16
     455:	5a                   	pop    %edx
     456:	59                   	pop    %ecx
     457:	5b                   	pop    %ebx
     458:	8e 16                	mov    (%esi),%ss
     45a:	d2 02                	rolb   %cl,(%edx)
     45c:	66 8b 26             	mov    (%esi),%sp
     45f:	ce                   	into   
     460:	02 07                	add    (%edi),%al
     462:	1f                   	pop    %ds
     463:	74 0a                	je     46f <going_on>
     465:	50                   	push   %eax
     466:	b4 00                	mov    $0x0,%ah
     468:	cd 16                	int    $0x16
     46a:	58                   	pop    %eax
     46b:	fb                   	sti    
     46c:	cd 38                	int    $0x38
     46e:	cf                   	iret   

0000046f <going_on>:
     46f:	fb                   	sti    
     470:	cf                   	iret   

00000471 <_SetINT08h_turn_around>:
     471:	fa                   	cli    
     472:	e8 2b 05 6a 00       	call   6a09a2 <delay+0x694652>
     477:	e8 ae 0c e8 97       	call   97e8112a <delay+0x97e74dda>
     47c:	05 b0 20 e6 20       	add    $0x20e620b0,%eax
     481:	e6 a0                	out    %al,$0xa0
     483:	fb                   	sti    
     484:	cf                   	iret   

00000485 <_SetINT08h>:
     485:	60                   	pusha  
     486:	0f a8                	push   %gs
     488:	1e                   	push   %ds
     489:	06                   	push   %es
     48a:	16                   	push   %ss
     48b:	8c c8                	mov    %cs,%eax
     48d:	8e c0                	mov    %eax,%es
     48f:	8e d8                	mov    %eax,%ds
     491:	8e d0                	mov    %eax,%ss
     493:	fe 0e                	decb   (%esi)
     495:	b0 02                	mov    $0x2,%al
     497:	75 4f                	jne    4e8 <end>

00000499 <notc>:
     499:	80 3e b1             	cmpb   $0xb1,(%esi)
     49c:	02 2d 75 07 c6 06    	add    0x6c60775,%ch
     4a2:	b1 02                	mov    $0x2,%cl
     4a4:	5c                   	pop    %esp
     4a5:	eb 2a                	jmp    4d1 <show>

000004a7 <changleft>:
     4a7:	80 3e b1             	cmpb   $0xb1,(%esi)
     4aa:	02 5c 75 07          	add    0x7(%ebp,%esi,2),%bl
     4ae:	c6 06 b1             	movb   $0xb1,(%esi)
     4b1:	02 7c eb 1c          	add    0x1c(%ebx,%ebp,8),%bh

000004b5 <changright>:
     4b5:	80 3e b1             	cmpb   $0xb1,(%esi)
     4b8:	02 7c 75 07          	add    0x7(%ebp,%esi,2),%bh
     4bc:	c6 06 b1             	movb   $0xb1,(%esi)
     4bf:	02 2f                	add    (%edi),%ch
     4c1:	eb 0e                	jmp    4d1 <show>

000004c3 <changheng>:
     4c3:	80 3e b1             	cmpb   $0xb1,(%esi)
     4c6:	02 2f                	add    (%edi),%ch
     4c8:	75 cf                	jne    499 <notc>
     4ca:	c6 06 b1             	movb   $0xb1,(%esi)
     4cd:	02 2d eb 00 b9 00    	add    0xb900eb,%ch

000004d1 <show>:
     4d1:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     4d6:	b4 09                	mov    $0x9,%ah
     4d8:	8a 26                	mov    (%esi),%ah
     4da:	d6                   	(bad)  
     4db:	02 a0 b1 02 65 a3    	add    -0x5c9afd4f(%eax),%ah
     4e1:	8e 00                	mov    (%eax),%es
     4e3:	c6 06 b0             	movb   $0xb0,(%esi)
     4e6:	02 08                	add    (%eax),%cl

000004e8 <end>:
     4e8:	b0 20                	mov    $0x20,%al
     4ea:	e6 20                	out    %al,$0x20
     4ec:	e6 a0                	out    %al,$0xa0
     4ee:	17                   	pop    %ss
     4ef:	07                   	pop    %es
     4f0:	1f                   	pop    %ds
     4f1:	0f a9                	pop    %gs
     4f3:	61                   	popa   
     4f4:	fb                   	sti    
     4f5:	cf                   	iret   

000004f6 <_SetINT09h>:
     4f6:	fa                   	cli    
     4f7:	1e                   	push   %ds
     4f8:	06                   	push   %es
     4f9:	8c c8                	mov    %cs,%eax
     4fb:	8e d8                	mov    %eax,%ds
     4fd:	8e c0                	mov    %eax,%es
     4ff:	8e d0                	mov    %eax,%ss
     501:	8c 16                	mov    %ss,(%esi)
     503:	d2 02                	rolb   %cl,(%edx)
     505:	8e d0                	mov    %eax,%ss
     507:	66 89 26             	mov    %sp,(%esi)
     50a:	ce                   	into   
     50b:	02 66 8b             	add    -0x75(%esi),%ah
     50e:	26                   	es
     50f:	ca 02 60             	lret   $0x6002
     512:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     517:	8a 26                	mov    (%esi),%ah
     519:	d6                   	(bad)  
     51a:	02 b0 4f 65 a3 78    	add    0x78a3654f(%eax),%dh
     520:	00 b0 55 65 a3 7a    	add    %dh,0x7aa36555(%eax)
     526:	00 b0 43 65 a3 7c    	add    %dh,0x7ca36543(%eax)
     52c:	00 b0 48 65 a3 7e    	add    %dh,0x7ea36548(%eax)
     532:	00 b0 53 65 a3 80    	add    %dh,-0x7f5c9aad(%eax)
     538:	00 b0 21 65 a3 82    	add    %dh,-0x7d5c9adf(%eax)
     53e:	00 b0 4f 65 a3 84    	add    %dh,-0x7b5c9ab1(%eax)
     544:	00 b0 55 65 a3 86    	add    %dh,-0x795c9aab(%eax)
     54a:	00 b0 43 65 a3 88    	add    %dh,-0x775c9abd(%eax)
     550:	00 b0 48 65 a3 8a    	add    %dh,-0x755c9ab8(%eax)
     556:	00 b0 21 65 a3 8c    	add    %dh,-0x735c9adf(%eax)
     55c:	00 61 80             	add    %ah,-0x80(%ecx)
     55f:	fc                   	cld    
     560:	06                   	push   %es
     561:	75 06                	jne    569 <cont>
     563:	b4 01                	mov    $0x1,%ah
     565:	88 26                	mov    %ah,(%esi)
     567:	d6                   	(bad)  
     568:	02 fe                	add    %dh,%bh

00000569 <cont>:
     569:	fe 06                	incb   (%esi)
     56b:	d6                   	(bad)  
     56c:	02 8c c8 8e c0 fb 9c 	add    -0x63043f72(%eax,%ecx,8),%cl
     573:	26 ff 1e             	lcall  *%es:(%esi)
     576:	b2 02                	mov    $0x2,%dl
     578:	8e 16                	mov    (%esi),%ss
     57a:	d2 02                	rolb   %cl,(%edx)
     57c:	66 8b 26             	mov    (%esi),%sp
     57f:	ce                   	into   
     580:	02 07                	add    (%edi),%al
     582:	1f                   	pop    %ds
     583:	cf                   	iret   

00000584 <_SetINT33h>:
     584:	fa                   	cli    
     585:	c8 00 00 00          	enter  $0x0,$0x0
     589:	60                   	pusha  
     58a:	1e                   	push   %ds
     58b:	0f a8                	push   %gs
     58d:	06                   	push   %es
     58e:	8c c8                	mov    %cs,%eax
     590:	8e c0                	mov    %eax,%es
     592:	8e d8                	mov    %eax,%ds
     594:	8c 16                	mov    %ss,(%esi)
     596:	d2 02                	rolb   %cl,(%edx)
     598:	8e d0                	mov    %eax,%ss
     59a:	66 89 26             	mov    %sp,(%esi)
     59d:	ce                   	into   
     59e:	02 66 8b             	add    -0x75(%esi),%ah
     5a1:	26                   	es
     5a2:	ca 02 6a             	lret   $0x6a02
     5a5:	00 e8                	add    %ch,%al
     5a7:	f9                   	stc    
     5a8:	06                   	push   %es
     5a9:	8e 16                	mov    (%esi),%ss
     5ab:	d2 02                	rolb   %cl,(%edx)
     5ad:	66 8b 26             	mov    (%esi),%sp
     5b0:	ce                   	into   
     5b1:	02 07                	add    (%edi),%al
     5b3:	0f a9                	pop    %gs
     5b5:	1f                   	pop    %ds
     5b6:	61                   	popa   
     5b7:	fb                   	sti    
     5b8:	c9                   	leave  
     5b9:	cf                   	iret   

000005ba <_SetINT34h>:
     5ba:	fa                   	cli    
     5bb:	c8 00 00 00          	enter  $0x0,$0x0
     5bf:	60                   	pusha  
     5c0:	1e                   	push   %ds
     5c1:	0f a8                	push   %gs
     5c3:	06                   	push   %es
     5c4:	8c c8                	mov    %cs,%eax
     5c6:	8e c0                	mov    %eax,%es
     5c8:	8e d8                	mov    %eax,%ds
     5ca:	8c 16                	mov    %ss,(%esi)
     5cc:	d2 02                	rolb   %cl,(%edx)
     5ce:	8e d0                	mov    %eax,%ss
     5d0:	66 89 26             	mov    %sp,(%esi)
     5d3:	ce                   	into   
     5d4:	02 66 8b             	add    -0x75(%esi),%ah
     5d7:	26                   	es
     5d8:	ca 02 6a             	lret   $0x6a02
     5db:	00 e8                	add    %ch,%al
     5dd:	73 07                	jae    5e6 <_SetINT34h+0x2c>
     5df:	8e 16                	mov    (%esi),%ss
     5e1:	d2 02                	rolb   %cl,(%edx)
     5e3:	66 8b 26             	mov    (%esi),%sp
     5e6:	ce                   	into   
     5e7:	02 07                	add    (%edi),%al
     5e9:	0f a9                	pop    %gs
     5eb:	1f                   	pop    %ds
     5ec:	61                   	popa   
     5ed:	fb                   	sti    
     5ee:	c9                   	leave  
     5ef:	cf                   	iret   

000005f0 <_SetINT35h>:
     5f0:	60                   	pusha  
     5f1:	1e                   	push   %ds
     5f2:	0f a8                	push   %gs
     5f4:	06                   	push   %es
     5f5:	8c c8                	mov    %cs,%eax
     5f7:	8e c0                	mov    %eax,%es
     5f9:	8e d8                	mov    %eax,%ds
     5fb:	8c 16                	mov    %ss,(%esi)
     5fd:	d2 02                	rolb   %cl,(%edx)
     5ff:	8e d0                	mov    %eax,%ss
     601:	66 89 26             	mov    %sp,(%esi)
     604:	ce                   	into   
     605:	02 66 8b             	add    -0x75(%esi),%ah
     608:	26                   	es
     609:	ca 02 6a             	lret   $0x6a02
     60c:	00 e8                	add    %ch,%al
     60e:	21 08                	and    %ecx,(%eax)
     610:	8e 16                	mov    (%esi),%ss
     612:	d2 02                	rolb   %cl,(%edx)
     614:	66 8b 26             	mov    (%esi),%sp
     617:	ce                   	into   
     618:	02 07                	add    (%edi),%al
     61a:	0f a9                	pop    %gs
     61c:	1f                   	pop    %ds
     61d:	61                   	popa   
     61e:	fb                   	sti    
     61f:	cf                   	iret   

00000620 <_SetINT36h>:
     620:	60                   	pusha  
     621:	1e                   	push   %ds
     622:	0f a8                	push   %gs
     624:	06                   	push   %es
     625:	8c c8                	mov    %cs,%eax
     627:	8e c0                	mov    %eax,%es
     629:	8e d8                	mov    %eax,%ds
     62b:	8c 16                	mov    %ss,(%esi)
     62d:	d2 02                	rolb   %cl,(%edx)
     62f:	8e d0                	mov    %eax,%ss
     631:	66 89 26             	mov    %sp,(%esi)
     634:	ce                   	into   
     635:	02 66 8b             	add    -0x75(%esi),%ah
     638:	26                   	es
     639:	ca 02 6a             	lret   $0x6a02
     63c:	00 e8                	add    %ch,%al
     63e:	77 08                	ja     648 <_SetINT36h+0x28>
     640:	8e 16                	mov    (%esi),%ss
     642:	d2 02                	rolb   %cl,(%edx)
     644:	66 8b 26             	mov    (%esi),%sp
     647:	ce                   	into   
     648:	02 07                	add    (%edi),%al
     64a:	0f a9                	pop    %gs
     64c:	1f                   	pop    %ds
     64d:	61                   	popa   
     64e:	fb                   	sti    
     64f:	cf                   	iret   

00000650 <_SetINT21h>:
     650:	c8 00 00 00          	enter  $0x0,$0x0
     654:	60                   	pusha  
     655:	1e                   	push   %ds
     656:	0f a8                	push   %gs
     658:	06                   	push   %es
     659:	8c c8                	mov    %cs,%eax
     65b:	8e c0                	mov    %eax,%es
     65d:	8e d8                	mov    %eax,%ds
     65f:	8b 46 08             	mov    0x8(%esi),%eax
     662:	80 fc 00             	cmp    $0x0,%ah
     665:	74 16                	je     67d <fn0>
     667:	80 fc 01             	cmp    $0x1,%ah
     66a:	74 21                	je     68d <fn1>
     66c:	80 fc 02             	cmp    $0x2,%ah
     66f:	74 3d                	je     6ae <fn2>
     671:	80 fc 03             	cmp    $0x3,%ah
     674:	74 5f                	je     6d5 <fn3>
     676:	07                   	pop    %es
     677:	0f a9                	pop    %gs
     679:	1f                   	pop    %ds
     67a:	61                   	popa   
     67b:	c9                   	leave  
     67c:	cf                   	iret   

0000067d <fn0>:
     67d:	8b 46 0a             	mov    0xa(%esi),%eax
     680:	b4 0e                	mov    $0xe,%ah
     682:	b3 00                	mov    $0x0,%bl
     684:	cd 10                	int    $0x10
     686:	07                   	pop    %es
     687:	0f a9                	pop    %gs
     689:	1f                   	pop    %ds
     68a:	61                   	popa   
     68b:	c9                   	leave  
     68c:	cf                   	iret   

0000068d <fn1>:
     68d:	66 83 ec 04          	sub    $0x4,%sp
     691:	b4 00                	mov    $0x0,%ah
     693:	cd 16                	int    $0x16
     695:	b4 00                	mov    $0x0,%ah
     697:	66 67 89 04          	mov    %ax,(%si)
     69b:	24 66                	and    $0x66,%al
     69d:	67 8b 04             	mov    (%si),%eax
     6a0:	24 66                	and    $0x66,%al
     6a2:	83 c4 04             	add    $0x4,%esp
     6a5:	8e e0                	mov    %eax,%fs
     6a7:	07                   	pop    %es
     6a8:	0f a9                	pop    %gs
     6aa:	1f                   	pop    %ds
     6ab:	61                   	popa   
     6ac:	c9                   	leave  
     6ad:	cf                   	iret   

000006ae <fn2>:
     6ae:	66 83 ec 04          	sub    $0x4,%sp
     6b2:	b4 00                	mov    $0x0,%ah
     6b4:	cd 16                	int    $0x16
     6b6:	b4 00                	mov    $0x0,%ah
     6b8:	66 67 89 04          	mov    %ax,(%si)
     6bc:	24 66                	and    $0x66,%al
     6be:	67 8b 04             	mov    (%si),%eax
     6c1:	24 b4                	and    $0xb4,%al
     6c3:	0e                   	push   %cs
     6c4:	b3 00                	mov    $0x0,%bl
     6c6:	cd 10                	int    $0x10
     6c8:	66 83 c4 04          	add    $0x4,%sp
     6cc:	8e e0                	mov    %eax,%fs
     6ce:	07                   	pop    %es
     6cf:	0f a9                	pop    %gs
     6d1:	1f                   	pop    %ds
     6d2:	61                   	popa   
     6d3:	c9                   	leave  
     6d4:	cf                   	iret   

000006d5 <fn3>:
     6d5:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     6da:	07                   	pop    %es
     6db:	0f a9                	pop    %gs
     6dd:	1f                   	pop    %ds
     6de:	61                   	popa   
     6df:	c9                   	leave  
     6e0:	cf                   	iret   

000006e1 <_SetINT37h>:
     6e1:	fa                   	cli    
     6e2:	e8 83 03 cf fa       	call   facf0a6a <delay+0xface471a>

000006e6 <_SetINT38h>:
     6e6:	fa                   	cli    
     6e7:	50                   	push   %eax
     6e8:	1e                   	push   %ds
     6e9:	8c c8                	mov    %cs,%eax
     6eb:	8e d8                	mov    %eax,%ds
     6ed:	6a 00                	push   $0x0
     6ef:	e8 84 0b 1f 58       	call   581f1278 <delay+0x581e4f28>
     6f4:	cf                   	iret   

000006f5 <_SetINT39h>:
     6f5:	fa                   	cli    
     6f6:	c8 00 00 00          	enter  $0x0,$0x0
     6fa:	1e                   	push   %ds
     6fb:	6a 00                	push   $0x0
     6fd:	8c c8                	mov    %cs,%eax
     6ff:	8e d8                	mov    %eax,%ds
     701:	e8 4e 0c 1f c9       	call   c91f1354 <delay+0xc91e5004>
     706:	cf                   	iret   

00000707 <_SetINT41h>:
     707:	fa                   	cli    
     708:	e8 95 02 e8 06       	call   6e809a2 <delay+0x6e74652>
     70d:	03 b0 20 e6 20 e6    	add    -0x19df19e0(%eax),%esi
     713:	a0 fb cf fa c8       	mov    0xc8facffb,%al

00000716 <_SetINT43h>:
     716:	fa                   	cli    
     717:	c8 00 00 00          	enter  $0x0,$0x0
     71b:	1e                   	push   %ds
     71c:	6a 00                	push   $0x0
     71e:	8c c8                	mov    %cs,%eax
     720:	8e d8                	mov    %eax,%ds
     722:	e8 09 0c 1f c9       	call   c91f1330 <delay+0xc91e4fe0>
     727:	cf                   	iret   

00000728 <_SetINT3Ah>:
     728:	fa                   	cli    
     729:	c8 00 00 00          	enter  $0x0,$0x0
     72d:	1e                   	push   %ds
     72e:	66 67 8b 45 08       	mov    0x8(%di),%ax
     733:	66 50                	push   %ax
     735:	6a 00                	push   $0x0
     737:	8c c8                	mov    %cs,%eax
     739:	8e d8                	mov    %eax,%ds
     73b:	e8 4e 0b 1f c9       	call   c91f128e <delay+0xc91e4f3e>
     740:	cf                   	iret   

00000741 <_initialInt>:
     741:	c8 00 00 00          	enter  $0x0,$0x0
     745:	60                   	pusha  
     746:	06                   	push   %es
     747:	1e                   	push   %ds
     748:	8c c8                	mov    %cs,%eax
     74a:	8e d8                	mov    %eax,%ds
     74c:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     751:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
     756:	00 f7                	add    %dh,%bh
     758:	e3 89                	jecxz  6e3 <_SetINT37h+0x2>
     75a:	c7                   	(bad)  
     75b:	b8 35 04 26 89       	mov    $0x89260435,%eax
     760:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     765:	45                   	inc    %ebp
     766:	02 1f                	add    (%edi),%bl
     768:	07                   	pop    %es
     769:	61                   	popa   
     76a:	60                   	pusha  
     76b:	06                   	push   %es
     76c:	1e                   	push   %ds
     76d:	8c c8                	mov    %cs,%eax
     76f:	8e d8                	mov    %eax,%ds
     771:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     776:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
     77b:	00 f7                	add    %dh,%bh
     77d:	e3 89                	jecxz  708 <_SetINT41h+0x1>
     77f:	c7                   	(bad)  
     780:	b8 84 05 26 89       	mov    $0x89260584,%eax
     785:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     78a:	45                   	inc    %ebp
     78b:	02 1f                	add    (%edi),%bl
     78d:	07                   	pop    %es
     78e:	61                   	popa   
     78f:	60                   	pusha  
     790:	06                   	push   %es
     791:	1e                   	push   %ds
     792:	8c c8                	mov    %cs,%eax
     794:	8e d8                	mov    %eax,%ds
     796:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     79b:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
     7a0:	00 f7                	add    %dh,%bh
     7a2:	e3 89                	jecxz  72d <_SetINT3Ah+0x5>
     7a4:	c7                   	(bad)  
     7a5:	b8 ba 05 26 89       	mov    $0x892605ba,%eax
     7aa:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     7af:	45                   	inc    %ebp
     7b0:	02 1f                	add    (%edi),%bl
     7b2:	07                   	pop    %es
     7b3:	61                   	popa   
     7b4:	60                   	pusha  
     7b5:	06                   	push   %es
     7b6:	1e                   	push   %ds
     7b7:	8c c8                	mov    %cs,%eax
     7b9:	8e d8                	mov    %eax,%ds
     7bb:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     7c0:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
     7c5:	00 f7                	add    %dh,%bh
     7c7:	e3 89                	jecxz  752 <_initialInt+0x11>
     7c9:	c7                   	(bad)  
     7ca:	b8 f0 05 26 89       	mov    $0x892605f0,%eax
     7cf:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     7d4:	45                   	inc    %ebp
     7d5:	02 1f                	add    (%edi),%bl
     7d7:	07                   	pop    %es
     7d8:	61                   	popa   
     7d9:	60                   	pusha  
     7da:	06                   	push   %es
     7db:	1e                   	push   %ds
     7dc:	8c c8                	mov    %cs,%eax
     7de:	8e d8                	mov    %eax,%ds
     7e0:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     7e5:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
     7ea:	00 f7                	add    %dh,%bh
     7ec:	e3 89                	jecxz  777 <_initialInt+0x36>
     7ee:	c7                   	(bad)  
     7ef:	b8 20 06 26 89       	mov    $0x89260620,%eax
     7f4:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     7f9:	45                   	inc    %ebp
     7fa:	02 1f                	add    (%edi),%bl
     7fc:	07                   	pop    %es
     7fd:	61                   	popa   
     7fe:	60                   	pusha  
     7ff:	06                   	push   %es
     800:	1e                   	push   %ds
     801:	8c c8                	mov    %cs,%eax
     803:	8e d8                	mov    %eax,%ds
     805:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     80a:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
     80f:	00 f7                	add    %dh,%bh
     811:	e3 89                	jecxz  79c <_initialInt+0x5b>
     813:	c7                   	(bad)  
     814:	b8 50 06 26 89       	mov    $0x89260650,%eax
     819:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     81e:	45                   	inc    %ebp
     81f:	02 1f                	add    (%edi),%bl
     821:	07                   	pop    %es
     822:	61                   	popa   
     823:	60                   	pusha  
     824:	06                   	push   %es
     825:	1e                   	push   %ds
     826:	8c c8                	mov    %cs,%eax
     828:	8e d8                	mov    %eax,%ds
     82a:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     82f:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
     834:	00 f7                	add    %dh,%bh
     836:	e3 89                	jecxz  7c1 <_initialInt+0x80>
     838:	c7                   	(bad)  
     839:	b8 e1 06 26 89       	mov    $0x892606e1,%eax
     83e:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     843:	45                   	inc    %ebp
     844:	02 1f                	add    (%edi),%bl
     846:	07                   	pop    %es
     847:	61                   	popa   
     848:	60                   	pusha  
     849:	06                   	push   %es
     84a:	1e                   	push   %ds
     84b:	8c c8                	mov    %cs,%eax
     84d:	8e d8                	mov    %eax,%ds
     84f:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     854:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
     859:	00 f7                	add    %dh,%bh
     85b:	e3 89                	jecxz  7e6 <ddelay+0x16>
     85d:	c7                   	(bad)  
     85e:	b8 e6 06 26 89       	mov    $0x892606e6,%eax
     863:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     868:	45                   	inc    %ebp
     869:	02 1f                	add    (%edi),%bl
     86b:	07                   	pop    %es
     86c:	61                   	popa   
     86d:	60                   	pusha  
     86e:	06                   	push   %es
     86f:	1e                   	push   %ds
     870:	8c c8                	mov    %cs,%eax
     872:	8e d8                	mov    %eax,%ds
     874:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     879:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
     87e:	00 f7                	add    %dh,%bh
     880:	e3 89                	jecxz  80b <ddelay+0x3b>
     882:	c7                   	(bad)  
     883:	b8 f5 06 26 89       	mov    $0x892606f5,%eax
     888:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     88d:	45                   	inc    %ebp
     88e:	02 1f                	add    (%edi),%bl
     890:	07                   	pop    %es
     891:	61                   	popa   
     892:	60                   	pusha  
     893:	06                   	push   %es
     894:	1e                   	push   %ds
     895:	8c c8                	mov    %cs,%eax
     897:	8e d8                	mov    %eax,%ds
     899:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     89e:	b8 3a 00 bb 04       	mov    $0x4bb003a,%eax
     8a3:	00 f7                	add    %dh,%bh
     8a5:	e3 89                	jecxz  830 <ddelay+0x60>
     8a7:	c7                   	(bad)  
     8a8:	b8 28 07 26 89       	mov    $0x89260728,%eax
     8ad:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8b2:	45                   	inc    %ebp
     8b3:	02 1f                	add    (%edi),%bl
     8b5:	07                   	pop    %es
     8b6:	61                   	popa   
     8b7:	60                   	pusha  
     8b8:	06                   	push   %es
     8b9:	1e                   	push   %ds
     8ba:	8c c8                	mov    %cs,%eax
     8bc:	8e d8                	mov    %eax,%ds
     8be:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8c3:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
     8c8:	00 f7                	add    %dh,%bh
     8ca:	e3 89                	jecxz  855 <ddelay+0x85>
     8cc:	c7                   	(bad)  
     8cd:	b8 07 07 26 89       	mov    $0x89260707,%eax
     8d2:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8d7:	45                   	inc    %ebp
     8d8:	02 1f                	add    (%edi),%bl
     8da:	07                   	pop    %es
     8db:	61                   	popa   
     8dc:	60                   	pusha  
     8dd:	06                   	push   %es
     8de:	1e                   	push   %ds
     8df:	8c c8                	mov    %cs,%eax
     8e1:	8e d8                	mov    %eax,%ds
     8e3:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8e8:	b8 42 00 bb 04       	mov    $0x4bb0042,%eax
     8ed:	00 f7                	add    %dh,%bh
     8ef:	e3 89                	jecxz  87a <ddelay+0xaa>
     8f1:	c7                   	(bad)  
     8f2:	b8 71 04 26 89       	mov    $0x89260471,%eax
     8f7:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8fc:	45                   	inc    %ebp
     8fd:	02 1f                	add    (%edi),%bl
     8ff:	07                   	pop    %es
     900:	61                   	popa   
     901:	60                   	pusha  
     902:	06                   	push   %es
     903:	1e                   	push   %ds
     904:	8c c8                	mov    %cs,%eax
     906:	8e d8                	mov    %eax,%ds
     908:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     90d:	b8 43 00 bb 04       	mov    $0x4bb0043,%eax
     912:	00 f7                	add    %dh,%bh
     914:	e3 89                	jecxz  89f <ddelay+0xcf>
     916:	c7                   	(bad)  
     917:	b8 16 07 26 89       	mov    $0x89260716,%eax
     91c:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     921:	45                   	inc    %ebp
     922:	02 1f                	add    (%edi),%bl
     924:	07                   	pop    %es
     925:	61                   	popa   
     926:	c9                   	leave  
     927:	66 5a                	pop    %dx
     929:	ff e2                	jmp    *%edx

0000092b <_initialInt_09h>:
     92b:	c8 00 00 00          	enter  $0x0,$0x0
     92f:	a1 24 00 a3 b2       	mov    0xb2a30024,%eax
     934:	02 a1 26 00 a3 b4    	add    -0x4b5cffda(%ecx),%ah
     93a:	02 60 06             	add    0x6(%eax),%ah
     93d:	1e                   	push   %ds
     93e:	8c c8                	mov    %cs,%eax
     940:	8e d8                	mov    %eax,%ds
     942:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     947:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
     94c:	00 f7                	add    %dh,%bh
     94e:	e3 89                	jecxz  8d9 <ddelay+0x109>
     950:	c7                   	(bad)  
     951:	b8 f6 04 26 89       	mov    $0x892604f6,%eax
     956:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     95b:	45                   	inc    %ebp
     95c:	02 1f                	add    (%edi),%bl
     95e:	07                   	pop    %es
     95f:	61                   	popa   
     960:	c9                   	leave  
     961:	66 5a                	pop    %dx
     963:	ff e2                	jmp    *%edx

00000965 <_initialInt_08h>:
     965:	c8 00 00 00          	enter  $0x0,$0x0
     969:	b0 40                	mov    $0x40,%al
     96b:	e6 43                	out    %al,$0x43
     96d:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
     972:	88 e0                	mov    %ah,%al
     974:	e6 40                	out    %al,$0x40
     976:	60                   	pusha  
     977:	06                   	push   %es
     978:	1e                   	push   %ds
     979:	8c c8                	mov    %cs,%eax
     97b:	8e d8                	mov    %eax,%ds
     97d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     982:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
     987:	00 f7                	add    %dh,%bh
     989:	e3 89                	jecxz  914 <ddelay+0x144>
     98b:	c7                   	(bad)  
     98c:	b8 71 04 26 89       	mov    $0x89260471,%eax
     991:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     996:	45                   	inc    %ebp
     997:	02 1f                	add    (%edi),%bl
     999:	07                   	pop    %es
     99a:	61                   	popa   
     99b:	c9                   	leave  
     99c:	66 5a                	pop    %dx
     99e:	ff e2                	jmp    *%edx

000009a0 <_save>:
     9a0:	66 89 26             	mov    %sp,(%esi)
     9a3:	ca 02 1e             	lret   $0x1e02
     9a6:	0e                   	push   %cs
     9a7:	1f                   	pop    %ds
     9a8:	8f 06                	popl   (%esi)
     9aa:	ba 02 8f 06 be       	mov    $0xbe068f02,%edx
     9af:	02 66 89             	add    -0x77(%esi),%ah
     9b2:	26 c6 02 66          	movb   $0x66,%es:(%edx)
     9b6:	89 36                	mov    %esi,(%esi)
     9b8:	c0 02 66             	rolb   $0x66,(%edx)
     9bb:	8b 36                	mov    (%esi),%esi
     9bd:	c0 2f 66             	shrb   $0x66,(%edi)
     9c0:	83 c6 2c             	add    $0x2c,%esi
     9c3:	67 8f 06 67 8f       	popl   -0x7099
     9c8:	46                   	inc    %esi
     9c9:	04 67                	add    $0x67,%al
     9cb:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
     9d2:	46                   	inc    %esi
     9d3:	08 67 c7             	or     %ah,-0x39(%edi)
     9d6:	46                   	inc    %esi
     9d7:	0a 00                	or     (%eax),%al
     9d9:	00 66 67             	add    %ah,0x67(%esi)
     9dc:	89 66 fc             	mov    %esp,-0x4(%esi)
     9df:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
     9e3:	8c de                	mov    %ds,%esi
     9e5:	8e d6                	mov    %esi,%ss
     9e7:	66 8b 26             	mov    (%esi),%sp
     9ea:	c0 2f 66             	shrb   $0x66,(%edi)
     9ed:	83 c4 24             	add    $0x24,%esp
     9f0:	6a 00                	push   $0x0
     9f2:	ff 36                	pushl  (%esi)
     9f4:	ba 02 6a 00 06       	mov    $0x6006a02,%edx
     9f9:	66 55                	push   %bp
     9fb:	66 57                	push   %di
     9fd:	66 ff 36             	pushw  (%esi)
     a00:	c0 02 66             	rolb   $0x66,(%edx)
     a03:	52                   	push   %edx
     a04:	66 51                	push   %cx
     a06:	66 53                	push   %bx
     a08:	66 50                	push   %ax
     a0a:	66 8b 26             	mov    (%esi),%sp
     a0d:	c6 02 a1             	movb   $0xa1,(%edx)
     a10:	be 02 ff e0 66       	mov    $0x66e0ff02,%esi

00000a14 <_restart>:
     a14:	66 89 26             	mov    %sp,(%esi)
     a17:	c6 02 66             	movb   $0x66,(%edx)
     a1a:	8b 26                	mov    (%esi),%esp
     a1c:	c0 2f 66             	shrb   $0x66,(%edi)
     a1f:	58                   	pop    %eax
     a20:	66 5b                	pop    %bx
     a22:	66 59                	pop    %cx
     a24:	66 5a                	pop    %dx
     a26:	66 5e                	pop    %si
     a28:	66 5f                	pop    %di
     a2a:	66 5d                	pop    %bp
     a2c:	07                   	pop    %es
     a2d:	8f 06                	popl   (%esi)
     a2f:	c4 02                	les    (%edx),%eax
     a31:	8f 06                	popl   (%esi)
     a33:	ba 02 8f 06 c4       	mov    $0xc4068f02,%edx
     a38:	02 66 89             	add    -0x77(%esi),%ah
     a3b:	36 c0 02 17          	rolb   $0x17,%ss:(%edx)
     a3f:	8f 06                	popl   (%esi)
     a41:	c4 02                	les    (%edx),%eax
     a43:	66 89 e6             	mov    %sp,%si
     a46:	66 67 8b 26 67 ff    	mov    -0x99,%sp
     a4c:	76 0c                	jbe    a5a <_restart+0x46>
     a4e:	67 ff 76 08          	pushl  0x8(%bp)
     a52:	67 ff 76 04          	pushl  0x4(%bp)
     a56:	66 8b 36             	mov    (%esi),%si
     a59:	c0 02 8e             	rolb   $0x8e,(%edx)
     a5c:	1e                   	push   %ds
     a5d:	ba 02 50 b0 20       	mov    $0x20b05002,%edx
     a62:	e6 20                	out    %al,$0x20
     a64:	e6 a0                	out    %al,$0xa0
     a66:	58                   	pop    %eax
     a67:	cf                   	iret   

00000a68 <RTC_Timer>:
     a68:	c8 00 00 00          	enter  $0x0,$0x0
     a6c:	1e                   	push   %ds
     a6d:	06                   	push   %es
     a6e:	60                   	pusha  
     a6f:	8c c8                	mov    %cs,%eax
     a71:	8e d8                	mov    %eax,%ds
     a73:	8c c8                	mov    %cs,%eax
     a75:	8e c0                	mov    %eax,%es
     a77:	bf 80 2d b4 02       	mov    $0x2b42d80,%edi
     a7c:	cd 1a                	int    $0x1a
     a7e:	88 e8                	mov    %ch,%al
     a80:	b4 00                	mov    $0x0,%ah
     a82:	b3 10                	mov    $0x10,%bl
     a84:	f6 f3                	div    %bl
     a86:	04 30                	add    $0x30,%al
     a88:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
     a8e:	88 e8                	mov    %ch,%al
     a90:	24 0f                	and    $0xf,%al
     a92:	04 30                	add    $0x30,%al
     a94:	88 45 01             	mov    %al,0x1(%ebp)
     a97:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
     a9b:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
     a9f:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
     aa3:	b4 02                	mov    $0x2,%ah
     aa5:	cd 1a                	int    $0x1a
     aa7:	88 c8                	mov    %cl,%al
     aa9:	b4 00                	mov    $0x0,%ah
     aab:	b3 10                	mov    $0x10,%bl
     aad:	f6 f3                	div    %bl
     aaf:	04 30                	add    $0x30,%al
     ab1:	88 45 05             	mov    %al,0x5(%ebp)
     ab4:	b4 02                	mov    $0x2,%ah
     ab6:	cd 1a                	int    $0x1a
     ab8:	88 c8                	mov    %cl,%al
     aba:	24 0f                	and    $0xf,%al
     abc:	04 30                	add    $0x30,%al
     abe:	88 45 06             	mov    %al,0x6(%ebp)
     ac1:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
     ac5:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
     ac9:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
     acd:	8c c8                	mov    %cs,%eax
     acf:	8e d8                	mov    %eax,%ds
     ad1:	8e c0                	mov    %eax,%es
     ad3:	bd df 02 8c d8       	mov    $0xd88c02df,%ebp
     ad8:	8e c0                	mov    %eax,%es
     ada:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
     adf:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     ae5:	b2 0a                	mov    $0xa,%dl
     ae7:	cd 10                	int    $0x10
     ae9:	8c c8                	mov    %cs,%eax
     aeb:	8e d8                	mov    %eax,%ds
     aed:	8e c0                	mov    %eax,%es
     aef:	bd 80 2d 8c d8       	mov    $0xd88c2d80,%ebp
     af4:	8e c0                	mov    %eax,%es
     af6:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
     afb:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     b01:	b2 1e                	mov    $0x1e,%dl
     b03:	cd 10                	int    $0x10
     b05:	61                   	popa   
     b06:	07                   	pop    %es
     b07:	1f                   	pop    %ds
     b08:	c9                   	leave  
     b09:	66 5a                	pop    %dx
     b0b:	ff e2                	jmp    *%edx

00000b0d <_Get_Hours_1>:
     b0d:	c8 04 00 00          	enter  $0x4,$0x0
     b11:	b4 02                	mov    $0x2,%ah
     b13:	cd 1a                	int    $0x1a
     b15:	88 e8                	mov    %ch,%al
     b17:	b4 00                	mov    $0x0,%ah
     b19:	b3 10                	mov    $0x10,%bl
     b1b:	f6 f3                	div    %bl
     b1d:	30 e4                	xor    %ah,%ah
     b1f:	66 67 89 04          	mov    %ax,(%si)
     b23:	24 66                	and    $0x66,%al
     b25:	67 8b 04             	mov    (%si),%eax
     b28:	24 c9                	and    $0xc9,%al
     b2a:	66 5a                	pop    %dx
     b2c:	ff e2                	jmp    *%edx

00000b2e <_Get_Hours_2>:
     b2e:	c8 04 00 00          	enter  $0x4,$0x0
     b32:	b4 02                	mov    $0x2,%ah
     b34:	cd 1a                	int    $0x1a
     b36:	88 e8                	mov    %ch,%al
     b38:	24 0f                	and    $0xf,%al
     b3a:	30 e4                	xor    %ah,%ah
     b3c:	66 67 89 04          	mov    %ax,(%si)
     b40:	24 66                	and    $0x66,%al
     b42:	67 8b 04             	mov    (%si),%eax
     b45:	24 c9                	and    $0xc9,%al
     b47:	66 5a                	pop    %dx
     b49:	ff e2                	jmp    *%edx

00000b4b <_Get_Minutes_1>:
     b4b:	c8 04 00 00          	enter  $0x4,$0x0
     b4f:	b4 02                	mov    $0x2,%ah
     b51:	cd 1a                	int    $0x1a
     b53:	88 c8                	mov    %cl,%al
     b55:	b4 00                	mov    $0x0,%ah
     b57:	b3 10                	mov    $0x10,%bl
     b59:	f6 f3                	div    %bl
     b5b:	30 e4                	xor    %ah,%ah
     b5d:	66 67 89 04          	mov    %ax,(%si)
     b61:	24 66                	and    $0x66,%al
     b63:	67 8b 04             	mov    (%si),%eax
     b66:	24 c9                	and    $0xc9,%al
     b68:	66 5a                	pop    %dx
     b6a:	ff e2                	jmp    *%edx

00000b6c <_Get_Minutes_2>:
     b6c:	c8 04 00 00          	enter  $0x4,$0x0
     b70:	b4 02                	mov    $0x2,%ah
     b72:	cd 1a                	int    $0x1a
     b74:	88 c8                	mov    %cl,%al
     b76:	24 0f                	and    $0xf,%al
     b78:	30 e4                	xor    %ah,%ah
     b7a:	66 67 89 04          	mov    %ax,(%si)
     b7e:	24 66                	and    $0x66,%al
     b80:	67 8b 04             	mov    (%si),%eax
     b83:	24 c9                	and    $0xc9,%al
     b85:	66 5a                	pop    %dx
     b87:	ff e2                	jmp    *%edx

00000b89 <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
     b89:	66 55                	push   %bp
     b8b:	66 89 e5             	mov    %sp,%bp
     b8e:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
     b92:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     b97:	66 89 d0             	mov    %dx,%ax
     b9a:	66 c1 e0 02          	shl    $0x2,%ax
     b9e:	66 01 d0             	add    %dx,%ax
     ba1:	66 c1 e0 04          	shl    $0x4,%ax
     ba5:	66 89 c2             	mov    %ax,%dx
     ba8:	67 66 8b 45 10       	mov    0x10(%di),%ax
     bad:	66 01 d0             	add    %dx,%ax
     bb0:	66 01 c0             	add    %ax,%ax
     bb3:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
     bb8:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     bbf:	00 00                	add    %al,(%eax)
	int index = 0;
     bc1:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     bc8:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     bca:	eb 35                	jmp    c01 <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
     bcc:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     bd1:	67 66 8b 45 08       	mov    0x8(%di),%ax
     bd6:	66 01 d0             	add    %dx,%ax
     bd9:	67 8a 00             	mov    (%bx,%si),%al
     bdc:	66 0f be c0          	movsbw %al,%ax
     be0:	67 66 ff 75 f4       	pushw  -0xc(%di)
     be5:	67 66 ff 75 fc       	pushw  -0x4(%di)
     bea:	66 50                	push   %ax
     bec:	66 e8 2b f7          	callw  31b <_clearscreen+0x7>
     bf0:	ff                   	(bad)  
     bf1:	ff 66 83             	jmp    *-0x7d(%esi)
     bf4:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     bf7:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     bfb:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
     c01:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     c06:	67 66 8b 45 08       	mov    0x8(%di),%ax
     c0b:	66 01 d0             	add    %dx,%ax
     c0e:	67 8a 00             	mov    (%bx,%si),%al
     c11:	84 c0                	test   %al,%al
     c13:	75 b7                	jne    bcc <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     c15:	90                   	nop
}
     c16:	66 c9                	leavew 
     c18:	66 c3                	retw   

00000c1a <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
     c1a:	66 55                	push   %bp
     c1c:	66 89 e5             	mov    %sp,%bp
     c1f:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
     c23:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     c28:	66 89 d0             	mov    %dx,%ax
     c2b:	66 c1 e0 02          	shl    $0x2,%ax
     c2f:	66 01 d0             	add    %dx,%ax
     c32:	66 c1 e0 04          	shl    $0x4,%ax
     c36:	66 89 c2             	mov    %ax,%dx
     c39:	67 66 8b 45 10       	mov    0x10(%di),%ax
     c3e:	66 01 d0             	add    %dx,%ax
     c41:	66 01 c0             	add    %ax,%ax
     c44:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
     c49:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     c50:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     c52:	eb 35                	jmp    c89 <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
     c54:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     c59:	67 66 8b 45 08       	mov    0x8(%di),%ax
     c5e:	66 01 d0             	add    %dx,%ax
     c61:	67 8a 00             	mov    (%bx,%si),%al
     c64:	66 0f be c0          	movsbw %al,%ax
     c68:	67 66 ff 75 14       	pushw  0x14(%di)
     c6d:	67 66 ff 75 fc       	pushw  -0x4(%di)
     c72:	66 50                	push   %ax
     c74:	66 e8 a3 f6          	callw  31b <_clearscreen+0x7>
     c78:	ff                   	(bad)  
     c79:	ff 66 83             	jmp    *-0x7d(%esi)
     c7c:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     c7f:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     c83:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
     c89:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     c8e:	67 66 8b 45 08       	mov    0x8(%di),%ax
     c93:	66 01 d0             	add    %dx,%ax
     c96:	67 8a 00             	mov    (%bx,%si),%al
     c99:	84 c0                	test   %al,%al
     c9b:	75 b7                	jne    c54 <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     c9d:	90                   	nop
}
     c9e:	66 c9                	leavew 
     ca0:	66 c3                	retw   

00000ca2 <sys_showline>:
void sys_showline(){
     ca2:	66 55                	push   %bp
     ca4:	66 89 e5             	mov    %sp,%bp
     ca7:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
     cab:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
     cb0:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
     cb5:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
     cba:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
     cbf:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
     cc4:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
     cc9:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
     cce:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     cd5:	00 00                	add    %al,(%eax)
    int i = 0;
     cd7:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     cde:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
     ce0:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     ce7:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
     ce9:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     cf0:	00 00                	add    %al,(%eax)
     cf2:	eb 52                	jmp    d46 <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
     cf4:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     cf9:	66 89 d0             	mov    %dx,%ax
     cfc:	66 c1 e0 03          	shl    $0x3,%ax
     d00:	66 01 d0             	add    %dx,%ax
     d03:	67 66 8d 14          	lea    (%si),%dx
     d07:	c5 00                	lds    (%eax),%eax
     d09:	00 00                	add    %al,(%eax)
     d0b:	00 66 01             	add    %ah,0x1(%esi)
     d0e:	d0 66 01             	shlb   0x1(%esi)
     d11:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
     d15:	45                   	inc    %ebp
     d16:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
     d1c:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     d21:	66 01 d0             	add    %dx,%ax
     d24:	67 8a 00             	mov    (%bx,%si),%al
     d27:	66 0f be c0          	movsbw %al,%ax
     d2b:	67 66 ff 75 f4       	pushw  -0xc(%di)
     d30:	67 66 ff 75 f0       	pushw  -0x10(%di)
     d35:	66 50                	push   %ax
     d37:	66 e8 e0 f5          	callw  31b <_clearscreen+0x7>
     d3b:	ff                   	(bad)  
     d3c:	ff 66 83             	jmp    *-0x7d(%esi)
     d3f:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
     d42:	66 ff 45 fc          	incw   -0x4(%ebp)
     d46:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
     d4c:	7e a6                	jle    cf4 <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
     d4e:	66 c9                	leavew 
     d50:	66 c3                	retw   

00000d52 <sys_printname>:

void sys_printname(){
     d52:	66 55                	push   %bp
     d54:	66 89 e5             	mov    %sp,%bp
     d57:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
     d5b:	67 66 c7 45 fc ac 17 	movw   $0x17ac,-0x4(%di)
     d62:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
     d64:	67 66 c7 45 f8 f0 17 	movw   $0x17f0,-0x8(%di)
     d6b:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
     d6d:	67 66 c7 45 f4 34 18 	movw   $0x1834,-0xc(%di)
     d74:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
     d76:	67 66 c7 45 f0 78 18 	movw   $0x1878,-0x10(%di)
     d7d:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
     d7f:	67 66 c7 45 ec bc 18 	movw   $0x18bc,-0x14(%di)
     d86:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
     d88:	67 66 c7 45 e8 00 19 	movw   $0x1900,-0x18(%di)
     d8f:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
     d91:	67 66 c7 45 e4 44 19 	movw   $0x1944,-0x1c(%di)
     d98:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
     d9a:	66 6a 0b             	pushw  $0xb
     d9d:	66 6a 10             	pushw  $0x10
     da0:	67 66 ff 75 fc       	pushw  -0x4(%di)
     da5:	66 e8 de fd          	callw  b87 <_Get_Minutes_2+0x1b>
     da9:	ff                   	(bad)  
     daa:	ff 66 83             	jmp    *-0x7d(%esi)
     dad:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
     db0:	6a 0b                	push   $0xb
     db2:	66 6a 11             	pushw  $0x11
     db5:	67 66 ff 75 f8       	pushw  -0x8(%di)
     dba:	66 e8 c9 fd          	callw  b87 <_Get_Minutes_2+0x1b>
     dbe:	ff                   	(bad)  
     dbf:	ff 66 83             	jmp    *-0x7d(%esi)
     dc2:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
     dc5:	6a 0b                	push   $0xb
     dc7:	66 6a 12             	pushw  $0x12
     dca:	67 66 ff 75 f4       	pushw  -0xc(%di)
     dcf:	66 e8 b4 fd          	callw  b87 <_Get_Minutes_2+0x1b>
     dd3:	ff                   	(bad)  
     dd4:	ff 66 83             	jmp    *-0x7d(%esi)
     dd7:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
     dda:	6a 0b                	push   $0xb
     ddc:	66 6a 13             	pushw  $0x13
     ddf:	67 66 ff 75 f0       	pushw  -0x10(%di)
     de4:	66 e8 9f fd          	callw  b87 <_Get_Minutes_2+0x1b>
     de8:	ff                   	(bad)  
     de9:	ff 66 83             	jmp    *-0x7d(%esi)
     dec:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
     def:	6a 0b                	push   $0xb
     df1:	66 6a 14             	pushw  $0x14
     df4:	67 66 ff 75 ec       	pushw  -0x14(%di)
     df9:	66 e8 8a fd          	callw  b87 <_Get_Minutes_2+0x1b>
     dfd:	ff                   	(bad)  
     dfe:	ff 66 83             	jmp    *-0x7d(%esi)
     e01:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
     e04:	6a 0b                	push   $0xb
     e06:	66 6a 15             	pushw  $0x15
     e09:	67 66 ff 75 e8       	pushw  -0x18(%di)
     e0e:	66 e8 75 fd          	callw  b87 <_Get_Minutes_2+0x1b>
     e12:	ff                   	(bad)  
     e13:	ff 66 83             	jmp    *-0x7d(%esi)
     e16:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
     e19:	6a 0b                	push   $0xb
     e1b:	66 6a 16             	pushw  $0x16
     e1e:	67 66 ff 75 e4       	pushw  -0x1c(%di)
     e23:	66 e8 60 fd          	callw  b87 <_Get_Minutes_2+0x1b>
     e27:	ff                   	(bad)  
     e28:	ff 66 83             	jmp    *-0x7d(%esi)
     e2b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
     e2e:	c9                   	leave  
     e2f:	66 c3                	retw   

00000e31 <sys_printpoem>:
void sys_printpoem(){
     e31:	66 55                	push   %bp
     e33:	66 89 e5             	mov    %sp,%bp
     e36:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
     e3a:	67 66 c7 45 f8 88 19 	movw   $0x1988,-0x8(%di)
     e41:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
     e43:	67 66 c7 45 f4 9a 19 	movw   $0x199a,-0xc(%di)
     e4a:	00 00                	add    %al,(%eax)
    int i = 1;
     e4c:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     e53:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
     e55:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     e5c:	00 00                	add    %al,(%eax)
     e5e:	eb 4b                	jmp    eab <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
     e60:	67 66 ff 75 fc       	pushw  -0x4(%di)
     e65:	66 6a 0a             	pushw  $0xa
     e68:	66 6a 0f             	pushw  $0xf
     e6b:	67 66 ff 75 f8       	pushw  -0x8(%di)
     e70:	66 e8 a4 fd          	callw  c18 <sys_print_for_heart+0x8f>
     e74:	ff                   	(bad)  
     e75:	ff 66 83             	jmp    *-0x7d(%esi)
     e78:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
     e7a:	67 66 ff 75 fc       	pushw  -0x4(%di)
     e7f:	66 6a 0a             	pushw  $0xa
     e82:	66 6a 10             	pushw  $0x10
     e85:	67 66 ff 75 f4       	pushw  -0xc(%di)
     e8a:	66 e8 8a fd          	callw  c18 <sys_print_for_heart+0x8f>
     e8e:	ff                   	(bad)  
     e8f:	ff 66 83             	jmp    *-0x7d(%esi)
     e92:	c4 10                	les    (%eax),%edx
        int j = 0;
     e94:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     e9b:	00 00                	add    %al,(%eax)
        int k = 0;
     e9d:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
     ea4:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
     ea6:	67 66 ff 45 fc       	incw   -0x4(%di)
     eab:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
     eb1:	7e ad                	jle    e60 <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
     eb3:	66 c9                	leavew 
     eb5:	66 c3                	retw   

00000eb7 <sys_printheart>:
void sys_printheart(){
     eb7:	66 55                	push   %bp
     eb9:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
     ebc:	66 6a 28             	pushw  $0x28
     ebf:	66 6a 00             	pushw  $0x0
     ec2:	66 68 a3 19          	pushw  $0x19a3
     ec6:	00 00                	add    %al,(%eax)
     ec8:	66 e8 bb fc          	callw  b87 <_Get_Minutes_2+0x1b>
     ecc:	ff                   	(bad)  
     ecd:	ff 66 83             	jmp    *-0x7d(%esi)
     ed0:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
     ed3:	6a 28                	push   $0x28
     ed5:	66 6a 01             	pushw  $0x1
     ed8:	66 68 bb 19          	pushw  $0x19bb
     edc:	00 00                	add    %al,(%eax)
     ede:	66 e8 a5 fc          	callw  b87 <_Get_Minutes_2+0x1b>
     ee2:	ff                   	(bad)  
     ee3:	ff 66 83             	jmp    *-0x7d(%esi)
     ee6:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
     ee9:	6a 28                	push   $0x28
     eeb:	66 6a 02             	pushw  $0x2
     eee:	66 68 d4 19          	pushw  $0x19d4
     ef2:	00 00                	add    %al,(%eax)
     ef4:	66 e8 8f fc          	callw  b87 <_Get_Minutes_2+0x1b>
     ef8:	ff                   	(bad)  
     ef9:	ff 66 83             	jmp    *-0x7d(%esi)
     efc:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
     eff:	6a 28                	push   $0x28
     f01:	66 6a 03             	pushw  $0x3
     f04:	66 68 ef 19          	pushw  $0x19ef
     f08:	00 00                	add    %al,(%eax)
     f0a:	66 e8 79 fc          	callw  b87 <_Get_Minutes_2+0x1b>
     f0e:	ff                   	(bad)  
     f0f:	ff 66 83             	jmp    *-0x7d(%esi)
     f12:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
     f15:	6a 28                	push   $0x28
     f17:	66 6a 04             	pushw  $0x4
     f1a:	66 68 08 1a          	pushw  $0x1a08
     f1e:	00 00                	add    %al,(%eax)
     f20:	66 e8 63 fc          	callw  b87 <_Get_Minutes_2+0x1b>
     f24:	ff                   	(bad)  
     f25:	ff 66 83             	jmp    *-0x7d(%esi)
     f28:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
     f2b:	6a 28                	push   $0x28
     f2d:	66 6a 05             	pushw  $0x5
     f30:	66 68 20 1a          	pushw  $0x1a20
     f34:	00 00                	add    %al,(%eax)
     f36:	66 e8 4d fc          	callw  b87 <_Get_Minutes_2+0x1b>
     f3a:	ff                   	(bad)  
     f3b:	ff 66 83             	jmp    *-0x7d(%esi)
     f3e:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
     f41:	6a 28                	push   $0x28
     f43:	66 6a 06             	pushw  $0x6
     f46:	66 68 37 1a          	pushw  $0x1a37
     f4a:	00 00                	add    %al,(%eax)
     f4c:	66 e8 37 fc          	callw  b87 <_Get_Minutes_2+0x1b>
     f50:	ff                   	(bad)  
     f51:	ff 66 83             	jmp    *-0x7d(%esi)
     f54:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
     f57:	6a 28                	push   $0x28
     f59:	66 6a 07             	pushw  $0x7
     f5c:	66 68 4d 1a          	pushw  $0x1a4d
     f60:	00 00                	add    %al,(%eax)
     f62:	66 e8 21 fc          	callw  b87 <_Get_Minutes_2+0x1b>
     f66:	ff                   	(bad)  
     f67:	ff 66 83             	jmp    *-0x7d(%esi)
     f6a:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
     f6d:	c9                   	leave  
     f6e:	66 c3                	retw   

00000f70 <savePCB>:
#include "schedule.h"

void savePCB(){
     f70:	66 55                	push   %bp
     f72:	66 89 e5             	mov    %sp,%bp
    _save();
     f75:	66 e8 25 fa          	callw  99e <_initialInt_08h+0x39>
     f79:	ff                   	(bad)  
     f7a:	ff 66 5d             	jmp    *0x5d(%esi)
}
     f7d:	66 c3                	retw   

00000f7f <initial_PCB>:
void initial_PCB(int index){
     f7f:	66 55                	push   %bp
     f81:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
     f84:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f89:	66 40                	inc    %ax
     f8b:	66 c1 e0 0c          	shl    $0xc,%ax
     f8f:	66 89 c2             	mov    %ax,%dx
     f92:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f97:	66 c1 e0 02          	shl    $0x2,%ax
     f9b:	66 89 c1             	mov    %ax,%cx
     f9e:	66 c1 e1 04          	shl    $0x4,%cx
     fa2:	66 01 c8             	add    %cx,%ax
     fa5:	66 05 d0 2d          	add    $0x2dd0,%ax
     fa9:	00 00                	add    %al,(%eax)
     fab:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
     faf:	67 66 8b 45 08       	mov    0x8(%di),%ax
     fb4:	66 40                	inc    %ax
     fb6:	66 c1 e0 0c          	shl    $0xc,%ax
     fba:	66 89 c2             	mov    %ax,%dx
     fbd:	67 66 8b 45 08       	mov    0x8(%di),%ax
     fc2:	66 c1 e0 02          	shl    $0x2,%ax
     fc6:	66 89 c1             	mov    %ax,%cx
     fc9:	66 c1 e1 04          	shl    $0x4,%cx
     fcd:	66 01 c8             	add    %cx,%ax
     fd0:	66 05 c0 2d          	add    $0x2dc0,%ax
     fd4:	00 00                	add    %al,(%eax)
     fd6:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
     fda:	67 66 8b 45 08       	mov    0x8(%di),%ax
     fdf:	66 40                	inc    %ax
     fe1:	66 c1 e0 0c          	shl    $0xc,%ax
     fe5:	66 89 c2             	mov    %ax,%dx
     fe8:	67 66 8b 45 08       	mov    0x8(%di),%ax
     fed:	66 c1 e0 02          	shl    $0x2,%ax
     ff1:	66 89 c1             	mov    %ax,%cx
     ff4:	66 c1 e1 04          	shl    $0x4,%cx
     ff8:	66 01 c8             	add    %cx,%ax
     ffb:	66 05 c0 2d          	add    $0x2dc0,%ax
     fff:	00 00                	add    %al,(%eax)
    1001:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
    1006:	67 66 8b 45 08       	mov    0x8(%di),%ax
    100b:	66 c1 e0 02          	shl    $0x2,%ax
    100f:	66 89 c2             	mov    %ax,%dx
    1012:	66 c1 e2 04          	shl    $0x4,%dx
    1016:	66 01 d0             	add    %dx,%ax
    1019:	66 05 c0 2d          	add    $0x2dc0,%ax
    101d:	00 00                	add    %al,(%eax)
    101f:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
    1026:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
    1028:	67 66 8b 45 08       	mov    0x8(%di),%ax
    102d:	66 c1 e0 02          	shl    $0x2,%ax
    1031:	66 89 c2             	mov    %ax,%dx
    1034:	66 c1 e2 04          	shl    $0x4,%dx
    1038:	66 01 d0             	add    %dx,%ax
    103b:	66 05 c0 2d          	add    $0x2dc0,%ax
    103f:	00 00                	add    %al,(%eax)
    1041:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    1048:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = RUN;
    104a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    104f:	66 c1 e0 02          	shl    $0x2,%ax
    1053:	66 89 c2             	mov    %ax,%dx
    1056:	66 c1 e2 04          	shl    $0x4,%dx
    105a:	66 01 d0             	add    %dx,%ax
    105d:	66 05 d0 2d          	add    $0x2dd0,%ax
    1061:	00 00                	add    %al,(%eax)
    1063:	67 66 c7 40 08 01 00 	movw   $0x1,0x8(%bx,%si)
    106a:	00 00                	add    %al,(%eax)
    PCB_list[index ].eflags = 512;
    106c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1071:	66 c1 e0 02          	shl    $0x2,%ax
    1075:	66 89 c2             	mov    %ax,%dx
    1078:	66 c1 e2 04          	shl    $0x4,%dx
    107c:	66 01 d0             	add    %dx,%ax
    107f:	66 05 d0 2d          	add    $0x2dd0,%ax
    1083:	00 00                	add    %al,(%eax)
    1085:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    108c:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    108e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1093:	66 c1 e0 02          	shl    $0x2,%ax
    1097:	66 89 c2             	mov    %ax,%dx
    109a:	66 c1 e2 04          	shl    $0x4,%dx
    109e:	66 01 d0             	add    %dx,%ax
    10a1:	67 66 8d 90 d0 2d    	lea    0x2dd0(%bx,%si),%dx
    10a7:	00 00                	add    %al,(%eax)
    10a9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    10ae:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 0;
    10b3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    10b8:	66 c1 e0 02          	shl    $0x2,%ax
    10bc:	66 89 c2             	mov    %ax,%dx
    10bf:	66 c1 e2 04          	shl    $0x4,%dx
    10c3:	66 01 d0             	add    %dx,%ax
    10c6:	66 05 e0 2d          	add    $0x2de0,%ax
    10ca:	00 00                	add    %al,(%eax)
    10cc:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    10d2:	00 00                	add    %al,(%eax)
}
    10d4:	66 5d                	pop    %bp
    10d6:	66 c3                	retw   

000010d8 <Set_PCB>:
void Set_PCB(){
    10d8:	66 55                	push   %bp
    10da:	66 89 e5             	mov    %sp,%bp
    10dd:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    10e1:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    10e8:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    10ea:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    10f1:	00 00                	add    %al,(%eax)
    10f3:	eb 27                	jmp    111c <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    10f5:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    10fa:	66 c1 e0 02          	shl    $0x2,%ax
    10fe:	66 89 c2             	mov    %ax,%dx
    1101:	66 c1 e2 04          	shl    $0x4,%dx
    1105:	66 01 d0             	add    %dx,%ax
    1108:	66 05 d0 2d          	add    $0x2dd0,%ax
    110c:	00 00                	add    %al,(%eax)
    110e:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    1115:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 0;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    1117:	67 66 ff 45 fc       	incw   -0x4(%di)
    111c:	67 66 83 7d fc 07    	cmpw   $0x7,-0x4(%di)
    1122:	7e d1                	jle    10f5 <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    1124:	66 c9                	leavew 
    1126:	66 c3                	retw   

00001128 <sys_schedule>:
void sys_schedule(){
    1128:	66 55                	push   %bp
    112a:	66 89 e5             	mov    %sp,%bp
    112d:	66 83 ec 0c          	sub    $0xc,%sp
    int i,j;
    int index = -1;
    1131:	67 66 c7 45 f4 ff ff 	movw   $0xffff,-0xc(%di)
    1138:	ff                   	(bad)  
    1139:	ff 66 a1             	jmp    *-0x5f(%esi)
    i = _CurrentProg - PCB_list;
    113c:	c0 2f 66             	shrb   $0x66,(%edi)
    113f:	89 c2                	mov    %eax,%edx
    1141:	66 b8 a0 2d          	mov    $0x2da0,%ax
    1145:	00 00                	add    %al,(%eax)
    1147:	66 29 c2             	sub    %ax,%dx
    114a:	66 89 d0             	mov    %dx,%ax
    114d:	66 c1 f8 02          	sar    $0x2,%ax
    1151:	66 89 c2             	mov    %ax,%dx
    1154:	66 89 d0             	mov    %dx,%ax
    1157:	66 01 c0             	add    %ax,%ax
    115a:	66 01 d0             	add    %dx,%ax
    115d:	67 66 8d 14          	lea    (%si),%dx
    1161:	85 00                	test   %eax,(%eax)
    1163:	00 00                	add    %al,(%eax)
    1165:	00 66 01             	add    %ah,0x1(%esi)
    1168:	d0 66 89             	shlb   -0x77(%esi)
    116b:	c2 66 c1             	ret    $0xc166
    116e:	e2 08                	loop   1178 <sys_schedule+0x50>
    1170:	66 01 d0             	add    %dx,%ax
    1173:	66 89 c2             	mov    %ax,%dx
    1176:	66 c1 e2 10          	shl    $0x10,%dx
    117a:	66 01 d0             	add    %dx,%ax
    117d:	66 f7 d8             	neg    %ax
    1180:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    for(j = 0;j < PCB_NUMMER;j ++){
    1185:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    118c:	00 00                	add    %al,(%eax)
    118e:	e9 a6 00 67 66       	jmp    66671239 <delay+0x66664ee9>
        if(i == PCB_NUMMER - 1){
    1193:	83 7d fc 07          	cmpl   $0x7,-0x4(%ebp)
    1197:	75 14                	jne    11ad <sys_schedule+0x85>
            _CurrentProg = PCB_list + 1;
    1199:	66 c7 06 c0 2f       	movw   $0x2fc0,(%esi)
    119e:	e4 2d                	in     $0x2d,%al
    11a0:	00 00                	add    %al,(%eax)
            i = 1;
    11a2:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    11a9:	00 00                	add    %al,(%eax)
    11ab:	eb 11                	jmp    11be <sys_schedule+0x96>
        }
        else{
            _CurrentProg ++;
    11ad:	66 a1 c0 2f 66 83    	mov    0x83662fc0,%ax
    11b3:	c0 44 66 a3 c0       	rolb   $0xc0,-0x5d(%esi,%eiz,2)
    11b8:	2f                   	das    
            i ++;
    11b9:	67 66 ff 45 fc       	incw   -0x4(%di)
        }
        if(_CurrentProg -> prg_status == RUN){
    11be:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    11c4:	8b 40 38             	mov    0x38(%eax),%eax
    11c7:	66 83 f8 01          	cmp    $0x1,%ax
    11cb:	75 03                	jne    11d0 <sys_schedule+0xa8>
            return;
    11cd:	e9 a2 00 66 a1       	jmp    a1661274 <delay+0xa1654f24>
        }
        if(_CurrentProg -> prg_status == READY && index == -1){
    11d2:	c0 2f 67             	shrb   $0x67,(%edi)
    11d5:	66 8b 40 38          	mov    0x38(%eax),%ax
    11d9:	66 83 f8 03          	cmp    $0x3,%ax
    11dd:	75 53                	jne    1232 <sys_schedule+0x10a>
    11df:	67 66 83 7d f4 ff    	cmpw   $0xffff,-0xc(%di)
    11e5:	75 4b                	jne    1232 <sys_schedule+0x10a>
           index = _CurrentProg - PCB_list;
    11e7:	66 a1 c0 2f 66 89    	mov    0x89662fc0,%ax
    11ed:	c2 66 b8             	ret    $0xb866
    11f0:	a0 2d 00 00 66       	mov    0x6600002d,%al
    11f5:	29 c2                	sub    %eax,%edx
    11f7:	66 89 d0             	mov    %dx,%ax
    11fa:	66 c1 f8 02          	sar    $0x2,%ax
    11fe:	66 89 c2             	mov    %ax,%dx
    1201:	66 89 d0             	mov    %dx,%ax
    1204:	66 01 c0             	add    %ax,%ax
    1207:	66 01 d0             	add    %dx,%ax
    120a:	67 66 8d 14          	lea    (%si),%dx
    120e:	85 00                	test   %eax,(%eax)
    1210:	00 00                	add    %al,(%eax)
    1212:	00 66 01             	add    %ah,0x1(%esi)
    1215:	d0 66 89             	shlb   -0x77(%esi)
    1218:	c2 66 c1             	ret    $0xc166
    121b:	e2 08                	loop   1225 <sys_schedule+0xfd>
    121d:	66 01 d0             	add    %dx,%ax
    1220:	66 89 c2             	mov    %ax,%dx
    1223:	66 c1 e2 10          	shl    $0x10,%dx
    1227:	66 01 d0             	add    %dx,%ax
    122a:	66 f7 d8             	neg    %ax
    122d:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
}
void sys_schedule(){
    int i,j;
    int index = -1;
    i = _CurrentProg - PCB_list;
    for(j = 0;j < PCB_NUMMER;j ++){
    1232:	67 66 ff 45 f8       	incw   -0x8(%di)
    1237:	67 66 83 7d f8 07    	cmpw   $0x7,-0x8(%di)
    123d:	0f 8e 50 ff 67 66    	jle    66681193 <delay+0x66674e43>
        }
        if(_CurrentProg -> prg_status == READY && index == -1){
           index = _CurrentProg - PCB_list;
        }
    }
    if(index != -1){
    1243:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
    1247:	74 1f                	je     1268 <sys_schedule+0x140>
        _CurrentProg = PCB_list + index;
    1249:	67 66 8b 45 f4       	mov    -0xc(%di),%ax
    124e:	66 c1 e0 02          	shl    $0x2,%ax
    1252:	66 89 c2             	mov    %ax,%dx
    1255:	66 c1 e2 04          	shl    $0x4,%dx
    1259:	66 01 d0             	add    %dx,%ax
    125c:	66 05 a0 2d          	add    $0x2da0,%ax
    1260:	00 00                	add    %al,(%eax)
    1262:	66 a3 c0 2f eb 0a    	mov    %ax,0xaeb2fc0
        return;
    }
    _CurrentProg = PCB_list ;
    1268:	66 c7 06 c0 2f       	movw   $0x2fc0,(%esi)
    126d:	a0 2d 00 00 90       	mov    0x9000002d,%al
    return;
}
    1272:	66 c9                	leavew 
    1274:	66 c3                	retw   

00001276 <sys_exit>:
void sys_exit(){
    1276:	66 55                	push   %bp
    1278:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = EXIT;
    127b:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    1281:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
}
    1288:	66 5d                	pop    %bp
    128a:	66 c3                	retw   

0000128c <sys_exit_fork>:
void sys_exit_fork(char ch){
    128c:	66 55                	push   %bp
    128e:	66 89 e5             	mov    %sp,%bp
    1291:	66 83 ec 04          	sub    $0x4,%sp
    1295:	67 66 8b 45 08       	mov    0x8(%di),%ax
    129a:	67 88 45 fc          	mov    %al,-0x4(%di)
    _CurrentProg -> prg_status = EXIT;
    129e:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    12a4:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    PCB_list[_CurrentProg -> fid].prg_status = READY;
    12ab:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    12b1:	8b 40 40             	mov    0x40(%eax),%eax
    12b4:	66 c1 e0 02          	shl    $0x2,%ax
    12b8:	66 89 c2             	mov    %ax,%dx
    12bb:	66 c1 e2 04          	shl    $0x4,%dx
    12bf:	66 01 d0             	add    %dx,%ax
    12c2:	66 05 d0 2d          	add    $0x2dd0,%ax
    12c6:	00 00                	add    %al,(%eax)
    12c8:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    12cf:	00 00                	add    %al,(%eax)
    PCB_list[_CurrentProg -> fid].eax = ch;
    12d1:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    12d7:	8b 40 40             	mov    0x40(%eax),%eax
    12da:	67 66 0f be 55 fc    	movsbw -0x4(%di),%dx
    12e0:	66 c1 e0 02          	shl    $0x2,%ax
    12e4:	66 89 c1             	mov    %ax,%cx
    12e7:	66 c1 e1 04          	shl    $0x4,%cx
    12eb:	66 01 c8             	add    %cx,%ax
    12ee:	66 05 a0 2d          	add    $0x2da0,%ax
    12f2:	00 00                	add    %al,(%eax)
    12f4:	67 66 89 10          	mov    %dx,(%bx,%si)
    _Schedule();
    12f8:	66 e8 0d f1          	callw  409 <_fork_user+0x9>
    12fc:	ff                   	(bad)  
    12fd:	ff 66 c9             	jmp    *-0x37(%esi)
}
    1300:	66 c3                	retw   

00001302 <sys_bolocked>:
void sys_bolocked(){
    1302:	66 55                	push   %bp
    1304:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = BLOCKED;
    1307:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    130d:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
}
    1314:	66 5d                	pop    %bp
    1316:	66 c3                	retw   

00001318 <sys_run>:
void sys_run(){
    1318:	66 55                	push   %bp
    131a:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    131d:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    1323:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    132a:	66 5d                	pop    %bp
    132c:	66 c3                	retw   

0000132e <sys_wait>:
int sys_wait(){
    132e:	66 55                	push   %bp
    1330:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = BLOCKED;
    1333:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    1339:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
    _Schedule();
    1340:	66 e8 c5 f0          	callw  409 <_fork_user+0x9>
    1344:	ff                   	(bad)  
    1345:	ff 66 a1             	jmp    *-0x5f(%esi)
    return _CurrentProg -> eax;
    1348:	c0 2f 67             	shrb   $0x67,(%edi)
    134b:	66 8b 00             	mov    (%eax),%ax
}
    134e:	66 5d                	pop    %bp
    1350:	66 c3                	retw   

00001352 <do_fork>:
int do_fork(){
    1352:	66 55                	push   %bp
    1354:	66 89 e5             	mov    %sp,%bp
    1357:	66 83 ec 04          	sub    $0x4,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    135b:	67 66 c7 45 fc e4 2d 	movw   $0x2de4,-0x4(%di)
    1362:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN )    fork_prg = fork_prg + 1;//应该增加used位，防止被覆盖
    1364:	eb 06                	jmp    136c <do_fork+0x1a>
    1366:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    136c:	67 66 81 7d fc c0 2f 	cmpw   $0x2fc0,-0x4(%di)
    1373:	00 00                	add    %al,(%eax)
    1375:	73 10                	jae    1387 <do_fork+0x35>
    1377:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    137c:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    1381:	66 83 f8 01          	cmp    $0x1,%ax
    1385:	74 df                	je     1366 <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    1387:	67 66 81 7d fc 7c 2f 	cmpw   $0x2f7c,-0x4(%di)
    138e:	00 00                	add    %al,(%eax)
    1390:	76 0f                	jbe    13a1 <do_fork+0x4f>
    1392:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    1398:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    139e:	e9 dc 01 66 e8       	jmp    e866157f <delay+0xe865522f>
    else{
        _Schedule_once();
    13a3:	4e                   	dec    %esi
    13a4:	f0 ff                	lock (bad) 
    13a6:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    13a9:	ec                   	in     (%dx),%al
    13aa:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    13ab:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    13b1:	ff 75 fc             	pushl  -0x4(%ebp)
    13b4:	66 50                	push   %ax
    13b6:	66 e8 3f 02          	callw  15f9 <counter+0x63>
    13ba:	00 00                	add    %al,(%eax)
    13bc:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    13c0:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    13c4:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    13c9:	66 b8 a0 2d          	mov    $0x2da0,%ax
    13cd:	00 00                	add    %al,(%eax)
    13cf:	66 29 c2             	sub    %ax,%dx
    13d2:	66 89 d0             	mov    %dx,%ax
    13d5:	66 c1 f8 02          	sar    $0x2,%ax
    13d9:	66 89 c2             	mov    %ax,%dx
    13dc:	66 89 d0             	mov    %dx,%ax
    13df:	66 01 c0             	add    %ax,%ax
    13e2:	66 01 d0             	add    %dx,%ax
    13e5:	67 66 8d 14          	lea    (%si),%dx
    13e9:	85 00                	test   %eax,(%eax)
    13eb:	00 00                	add    %al,(%eax)
    13ed:	00 66 01             	add    %ah,0x1(%esi)
    13f0:	d0 66 89             	shlb   -0x77(%esi)
    13f3:	c2 66 c1             	ret    $0xc166
    13f6:	e2 08                	loop   1400 <do_fork+0xae>
    13f8:	66 01 d0             	add    %dx,%ax
    13fb:	66 89 c2             	mov    %ax,%dx
    13fe:	66 c1 e2 10          	shl    $0x10,%dx
    1402:	66 01 d0             	add    %dx,%ax
    1405:	66 f7 d8             	neg    %ax
    1408:	66 89 c2             	mov    %ax,%dx
    140b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1410:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    1415:	66 a1 c0 2f 66 89    	mov    0x89662fc0,%ax
    141b:	c2 66 b8             	ret    $0xb866
    141e:	a0 2d 00 00 66       	mov    0x6600002d,%al
    1423:	29 c2                	sub    %eax,%edx
    1425:	66 89 d0             	mov    %dx,%ax
    1428:	66 c1 f8 02          	sar    $0x2,%ax
    142c:	66 89 c2             	mov    %ax,%dx
    142f:	66 89 d0             	mov    %dx,%ax
    1432:	66 01 c0             	add    %ax,%ax
    1435:	66 01 d0             	add    %dx,%ax
    1438:	67 66 8d 14          	lea    (%si),%dx
    143c:	85 00                	test   %eax,(%eax)
    143e:	00 00                	add    %al,(%eax)
    1440:	00 66 01             	add    %ah,0x1(%esi)
    1443:	d0 66 89             	shlb   -0x77(%esi)
    1446:	c2 66 c1             	ret    $0xc166
    1449:	e2 08                	loop   1453 <do_fork+0x101>
    144b:	66 01 d0             	add    %dx,%ax
    144e:	66 89 c2             	mov    %ax,%dx
    1451:	66 c1 e2 10          	shl    $0x10,%dx
    1455:	66 01 d0             	add    %dx,%ax
    1458:	66 f7 d8             	neg    %ax
    145b:	66 89 c2             	mov    %ax,%dx
    145e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1463:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    1468:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    146e:	8b 50 20             	mov    0x20(%eax),%edx
    1471:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1476:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    147b:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1480:	66 b8 a0 2d          	mov    $0x2da0,%ax
    1484:	00 00                	add    %al,(%eax)
    1486:	66 29 c2             	sub    %ax,%dx
    1489:	66 89 d0             	mov    %dx,%ax
    148c:	66 c1 f8 02          	sar    $0x2,%ax
    1490:	66 89 c2             	mov    %ax,%dx
    1493:	66 89 d0             	mov    %dx,%ax
    1496:	66 01 c0             	add    %ax,%ax
    1499:	66 01 d0             	add    %dx,%ax
    149c:	67 66 8d 14          	lea    (%si),%dx
    14a0:	85 00                	test   %eax,(%eax)
    14a2:	00 00                	add    %al,(%eax)
    14a4:	00 66 01             	add    %ah,0x1(%esi)
    14a7:	d0 66 89             	shlb   -0x77(%esi)
    14aa:	c2 66 c1             	ret    $0xc166
    14ad:	e2 08                	loop   14b7 <do_fork+0x165>
    14af:	66 01 d0             	add    %dx,%ax
    14b2:	66 89 c2             	mov    %ax,%dx
    14b5:	66 c1 e2 10          	shl    $0x10,%dx
    14b9:	66 01 d0             	add    %dx,%ax
    14bc:	66 f7 d8             	neg    %ax
    14bf:	66 83 c0 02          	add    $0x2,%ax
    14c3:	66 c1 e0 0c          	shl    $0xc,%ax
    14c7:	66 89 c2             	mov    %ax,%dx
    14ca:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    14cf:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    14d4:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    14da:	8b 50 30             	mov    0x30(%eax),%edx
    14dd:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    14e2:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    14e7:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    14ec:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    14f3:	00 00                	add    %al,(%eax)
       // __asm__("enter $0,$0");
        _Schedule_once();
    14f5:	66 e8 fa ee          	callw  3f3 <S+0x14>
    14f9:	ff                   	(bad)  
    14fa:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    14fd:	ec                   	in     (%dx),%al
    14fe:	06                   	push   %es
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    14ff:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1504:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1509:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    150f:	8b 50 28             	mov    0x28(%eax),%edx
    1512:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    1518:	8b 40 24             	mov    0x24(%eax),%eax
    151b:	66 51                	push   %cx
    151d:	66 52                	push   %dx
    151f:	66 50                	push   %ax
    1521:	66 e8 be ed          	callw  2e3 <Message31+0x4>
    1525:	ff                   	(bad)  
    1526:	ff 66 83             	jmp    *-0x7d(%esi)
    1529:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
        __asm__("add $6,%esp");
    152c:	83 c4 06             	add    $0x6,%esp
        fork_prg -> ip = _CurrentProg -> ip;
    152f:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    1535:	8b 50 2c             	mov    0x2c(%eax),%edx
    1538:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    153d:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    1542:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1547:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    154d:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    154f:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    1555:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1558:	75 08                	jne    1562 <do_fork+0x210>
            return 0;
    155a:	66 b8 00 00          	mov    $0x0,%ax
    155e:	00 00                	add    %al,(%eax)
    1560:	eb 1b                	jmp    157d <do_fork+0x22b>
        }
        _CurrentProg -> eax = fork_prg -> id;
    1562:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    1568:	8b 55 fc             	mov    -0x4(%ebp),%edx
    156b:	67 66 8b 52 3c       	mov    0x3c(%bp,%si),%dx
    1570:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    1574:	66 a1 c0 2f 67 66    	mov    0x66672fc0,%ax
    157a:	8b 00                	mov    (%eax),%eax
    157c:	90                   	nop
    }
}
    157d:	66 c9                	leavew 
    157f:	66 c3                	retw   

00001581 <thread_join>:
void thread_join(){
    1581:	66 55                	push   %bp
    1583:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    1586:	90                   	nop
    1587:	66 e8 09 00          	callw  1594 <thread_join+0x13>
    158b:	00 00                	add    %al,(%eax)
    158d:	66 85 c0             	test   %ax,%ax
    1590:	75 f5                	jne    1587 <thread_join+0x6>
    }
}
    1592:	66 5d                	pop    %bp
    1594:	66 c3                	retw   

00001596 <counter>:
int counter(){
    1596:	66 55                	push   %bp
    1598:	66 89 e5             	mov    %sp,%bp
    159b:	66 83 ec 08          	sub    $0x8,%sp
    int i = 0;
    159f:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    15a6:	00 00                	add    %al,(%eax)
    int count = 0;
    15a8:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    15af:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER - 1;i ++){
    15b1:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    15b8:	00 00                	add    %al,(%eax)
    15ba:	eb 2e                	jmp    15ea <counter+0x54>
        if(PCB_list[i].prg_status == 1){
    15bc:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    15c1:	66 c1 e0 02          	shl    $0x2,%ax
    15c5:	66 89 c2             	mov    %ax,%dx
    15c8:	66 c1 e2 04          	shl    $0x4,%dx
    15cc:	66 01 d0             	add    %dx,%ax
    15cf:	66 05 d0 2d          	add    $0x2dd0,%ax
    15d3:	00 00                	add    %al,(%eax)
    15d5:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    15da:	66 83 f8 01          	cmp    $0x1,%ax
    15de:	75 05                	jne    15e5 <counter+0x4f>
            count ++;
    15e0:	67 66 ff 45 f8       	incw   -0x8(%di)
    }
}
int counter(){
    int i = 0;
    int count = 0;
    for(i = 0;i < PCB_NUMMER - 1;i ++){
    15e5:	67 66 ff 45 fc       	incw   -0x4(%di)
    15ea:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    15f0:	7e ca                	jle    15bc <counter+0x26>
        if(PCB_list[i].prg_status == 1){
            count ++;
        }
    }
    return count;
    15f2:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    15f7:	66 c9                	leavew 
    15f9:	66 c3                	retw   

000015fb <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    15fb:	66 55                	push   %bp
    15fd:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    1600:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1605:	67 66 8b 10          	mov    (%bx,%si),%dx
    1609:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    160e:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    1612:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1617:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    161c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1621:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    1626:	67 66 8b 45 08       	mov    0x8(%di),%ax
    162b:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    1630:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1635:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    163a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    163f:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    1644:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1649:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    164e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1653:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    1658:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    165d:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    1662:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1667:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    166c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1671:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    1676:	67 66 8b 45 08       	mov    0x8(%di),%ax
    167b:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    1680:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1685:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    168a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    168f:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    1694:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1699:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    169e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16a3:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    16a8:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    16ad:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    16b2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16b7:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    16bc:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    16c1:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    16c6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16cb:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    16d0:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    16d5:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    16da:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16df:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    16e4:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    16e9:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    16ee:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16f3:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    16f8:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    16fd:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    1702:	66 5d                	pop    %bp
    1704:	66 c3                	retw   

00001706 <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    1706:	66 55                	push   %bp
    1708:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    170b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1710:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1715:	67 66 8b 45 08       	mov    0x8(%di),%ax
    171a:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    171f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1724:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    1729:	66 51                	push   %cx
    172b:	66 52                	push   %dx
    172d:	66 50                	push   %ax
    172f:	66 e8 b0 eb          	callw  2e3 <Message31+0x4>
    1733:	ff                   	(bad)  
    1734:	ff 66 83             	jmp    *-0x7d(%esi)
    1737:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    173a:	c9                   	leave  
    173b:	66 c3                	retw   

0000173d <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    173d:	66 55                	push   %bp
    173f:	66 89 e5             	mov    %sp,%bp
    1742:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    1746:	66 e8 b4 ec          	callw  3fe <_Schedule_once+0x9>
    174a:	ff                   	(bad)  
    174b:	ff 67 66             	jmp    *0x66(%edi)
    174e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    1751:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    1756:	66 c9                	leavew 
    1758:	66 c3                	retw   

0000175a <wait>:
char wait(){
    175a:	66 55                	push   %bp
    175c:	66 89 e5             	mov    %sp,%bp
    175f:	66 83 ec 08          	sub    $0x8,%sp
    int temp_ch = _wait();
    1763:	66 e8 af ec          	callw  416 <_Schedule+0xb>
    1767:	ff                   	(bad)  
    1768:	ff 67 66             	jmp    *0x66(%edi)
    176b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char ch = '0' + temp_ch;
    176e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1773:	66 83 c0 30          	add    $0x30,%ax
    1777:	67 88 45 fb          	mov    %al,-0x5(%di)
    return ch;
    177b:	67 8a 45 fb          	mov    -0x5(%di),%al
    //_wait();
}
    177f:	66 c9                	leavew 
    1781:	66 c3                	retw   

00001783 <exit>:
void exit(char ch){
    1783:	66 55                	push   %bp
    1785:	66 89 e5             	mov    %sp,%bp
    1788:	66 83 ec 04          	sub    $0x4,%sp
    178c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1791:	67 88 45 fc          	mov    %al,-0x4(%di)
    _exit(ch);
    1795:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    179b:	66 50                	push   %ax
    179d:	66 e8 80 ec          	callw  421 <_wait+0x9>
    17a1:	ff                   	(bad)  
    17a2:	ff 66 83             	jmp    *-0x7d(%esi)
    17a5:	c4 04 66             	les    (%esi,%eiz,2),%eax
    17a8:	c9                   	leave  
    17a9:	66 c3                	retw   
