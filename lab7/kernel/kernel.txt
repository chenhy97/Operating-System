
kernel.elf:     file format elf32-i386


Disassembly of section .text:

00007d00 <_start>:
    7d00:	66 b8 00 00          	mov    $0x0,%ax
    7d04:	00 00                	add    %al,(%eax)
    7d06:	8e d8                	mov    %eax,%ds
    7d08:	8e c0                	mov    %eax,%es
    7d0a:	8e d0                	mov    %eax,%ss
    7d0c:	66 ea 14 7d 00 00    	ljmpw  $0x0,$0x7d14
	...

00007d14 <main>:
#include"kernel.h"
#include "../syscall/stdio.h"
#include "../syscall/schedule.h"
#include "../syscall/time.h"

int main(){
    7d14:	66 55                	push   %bp
    7d16:	66 89 e5             	mov    %sp,%bp
    7d19:	66 83 ec 0c          	sub    $0xc,%sp
    clearscreen();
    7d1d:	66 e8 c5 08          	callw  85e6 <stack_copy+0x35>
    7d21:	00 00                	add    %al,(%eax)
   // char str[100] = {};
    //getline(str,10);
   // prints(str);
    Initial_Int();
    7d23:	66 e8 cf 08          	callw  85f6 <clearscreen+0xe>
    7d27:	00 00                	add    %al,(%eax)
    printTime();
    7d29:	66 e8 2c 20          	callw  9d59 <Get_Minutes+0x46>
    7d2d:	00 00                	add    %al,(%eax)
    //Initial_Int_09h();
    Set_PCB();
    7d2f:	66 e8 cc 02          	callw  7fff <initial_PCB+0x157>
    7d33:	00 00                	add    %al,(%eax)
    loadProg(18,95,0x2000);
    7d35:	66 68 00 20          	pushw  $0x2000
    7d39:	00 00                	add    %al,(%eax)
    7d3b:	66 6a 5f             	pushw  $0x5f
    7d3e:	66 6a 12             	pushw  $0x12
    7d41:	66 e8 df 08          	callw  8624 <Initial_Int_08h+0xd>
    7d45:	00 00                	add    %al,(%eax)
    7d47:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(18,115,0x3000);
    7d4b:	66 68 00 30          	pushw  $0x3000
    7d4f:	00 00                	add    %al,(%eax)
    7d51:	66 6a 73             	pushw  $0x73
    7d54:	66 6a 12             	pushw  $0x12
    7d57:	66 e8 c9 08          	callw  8624 <Initial_Int_08h+0xd>
    7d5b:	00 00                	add    %al,(%eax)
    7d5d:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(18,135,0x4000);
    7d61:	66 68 00 40          	pushw  $0x4000
    7d65:	00 00                	add    %al,(%eax)
    7d67:	66 68 87 00          	pushw  $0x87
    7d6b:	00 00                	add    %al,(%eax)
    7d6d:	66 6a 12             	pushw  $0x12
    7d70:	66 e8 b0 08          	callw  8624 <Initial_Int_08h+0xd>
    7d74:	00 00                	add    %al,(%eax)
    7d76:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(18,155,0x5000);
    7d7a:	66 68 00 50          	pushw  $0x5000
    7d7e:	00 00                	add    %al,(%eax)
    7d80:	66 68 9b 00          	pushw  $0x9b
    7d84:	00 00                	add    %al,(%eax)
    7d86:	66 6a 12             	pushw  $0x12
    7d89:	66 e8 97 08          	callw  8624 <Initial_Int_08h+0xd>
    7d8d:	00 00                	add    %al,(%eax)
    7d8f:	66 83 c4 0c          	add    $0xc,%sp
    _loadP(18,175,0x6000);
    7d93:	66 68 00 60          	pushw  $0x6000
    7d97:	00 00                	add    %al,(%eax)
    7d99:	66 68 af 00          	pushw  $0xaf
    7d9d:	00 00                	add    %al,(%eax)
    7d9f:	66 6a 12             	pushw  $0x12
    7da2:	66 e8 7f 09          	callw  8725 <_setPoint+0x15>
    7da6:	00 00                	add    %al,(%eax)
    7da8:	66 83 c4 0c          	add    $0xc,%sp
    _loadP(18,195,0x7000);
    7dac:	66 68 00 70          	pushw  $0x7000
    7db0:	00 00                	add    %al,(%eax)
    7db2:	66 68 c3 00          	pushw  $0xc3
    7db6:	00 00                	add    %al,(%eax)
    7db8:	66 6a 12             	pushw  $0x12
    7dbb:	66 e8 66 09          	callw  8725 <_setPoint+0x15>
    7dbf:	00 00                	add    %al,(%eax)
    7dc1:	66 83 c4 0c          	add    $0xc,%sp
    initial_PCB(5);
    7dc5:	66 6a 05             	pushw  $0x5
    7dc8:	66 e8 da 00          	callw  7ea6 <savePCB+0xd>
    7dcc:	00 00                	add    %al,(%eax)
    7dce:	66 83 c4 04          	add    $0x4,%sp
    _CurrentProg = PCB_list + 5;
    7dd2:	66 c7 06 60 ba       	movw   $0xba60,(%esi)
    7dd7:	94                   	xchg   %eax,%esp
    7dd8:	b9 00 00 66 68       	mov    $0x68660000,%ecx
    //int fork_a = do_fork();
    //printsint(fork_a);
   // _CurrentProg = PCB_list;//important! mov dword ptr ds:0x9e60, 0x00009d20,把PCB_list的地址9d20存到ds的9e60处，此后就直接用9e60来织带PCB_list
    //Initial_Int_08h();
   _RunProgress(0x7000);
    7ddd:	00 70 00             	add    %dh,0x0(%eax)
    7de0:	00 66 e8             	add    %ah,-0x18(%esi)
    7de3:	77 09                	ja     7dee <main+0xda>
    7de5:	00 00                	add    %al,(%eax)
    7de7:	66 83 c4 04          	add    $0x4,%sp


    char const *Messeage = "Built by Chen Hongyang on March 20, 2018";
    7deb:	67 66 c7 45 fc e8 9d 	movw   $0x9de8,-0x4(%di)
    7df2:	00 00                	add    %al,(%eax)
    print("===================================================",9,12);
    7df4:	66 6a 0c             	pushw  $0xc
    7df7:	66 6a 09             	pushw  $0x9
    7dfa:	66 68 14 9e          	pushw  $0x9e14
    7dfe:	00 00                	add    %al,(%eax)
    7e00:	66 e8 ef 15          	callw  93f3 <run+0x62>
    7e04:	00 00                	add    %al,(%eax)
    7e06:	66 83 c4 0c          	add    $0xc,%sp

    print("chenhyOS",10,32);
    7e0a:	66 6a 20             	pushw  $0x20
    7e0d:	66 6a 0a             	pushw  $0xa
    7e10:	66 68 48 9e          	pushw  $0x9e48
    7e14:	00 00                	add    %al,(%eax)
    7e16:	66 e8 d9 15          	callw  93f3 <run+0x62>
    7e1a:	00 00                	add    %al,(%eax)
    7e1c:	66 83 c4 0c          	add    $0xc,%sp
   print(Messeage,11,16); //print the msg
    7e20:	66 6a 10             	pushw  $0x10
    7e23:	66 6a 0b             	pushw  $0xb
    7e26:	67 66 ff 75 fc       	pushw  -0x4(%di)
    7e2b:	66 e8 c4 15          	callw  93f3 <run+0x62>
    7e2f:	00 00                	add    %al,(%eax)
    7e31:	66 83 c4 0c          	add    $0xc,%sp
   print("===================================================",12,12);
    7e35:	66 6a 0c             	pushw  $0xc
    7e38:	66 6a 0c             	pushw  $0xc
    7e3b:	66 68 14 9e          	pushw  $0x9e14
    7e3f:	00 00                	add    %al,(%eax)
    7e41:	66 e8 ae 15          	callw  93f3 <run+0x62>
    7e45:	00 00                	add    %al,(%eax)
    7e47:	66 83 c4 0c          	add    $0xc,%sp
   

   char a = getch();
    7e4b:	66 e8 51 18          	callw  96a0 <read_and_print_input+0x3a>
    7e4f:	00 00                	add    %al,(%eax)
    7e51:	67 88 45 fb          	mov    %al,-0x5(%di)
   clearscreen(); 
    7e55:	66 e8 8d 07          	callw  85e6 <stack_copy+0x35>
    7e59:	00 00                	add    %al,(%eax)
    char const *Msg1 = "Press any key to get help\n\r";
    7e5b:	67 66 c7 45 f4 51 9e 	movw   $0x9e51,-0xc(%di)
    7e62:	00 00                	add    %al,(%eax)
   prints(Msg1);
    7e64:	67 66 ff 75 f4       	pushw  -0xc(%di)
    7e69:	66 e8 17 16          	callw  9484 <print+0x8f>
    7e6d:	00 00                	add    %al,(%eax)
    7e6f:	66 83 c4 04          	add    $0x4,%sp
   print("!",13,39);
    7e73:	66 6a 27             	pushw  $0x27
    7e76:	66 6a 0d             	pushw  $0xd
    7e79:	66 68 6d 9e          	pushw  $0x9e6d
    7e7d:	00 00                	add    %al,(%eax)
    7e7f:	66 e8 70 15          	callw  93f3 <run+0x62>
    7e83:	00 00                	add    %al,(%eax)
    7e85:	66 83 c4 0c          	add    $0xc,%sp
   //Initial_Int();
    /*buildmap();还有待解决debug
    void *addr = (void*) 0xB100;
    _loadP(2,21,addr);
    showtable();*/
    terminal();
    7e89:	66 e8 54 10          	callw  8ee1 <_Get_Minutes_2+0x1b>
    7e8d:	00 00                	add    %al,(%eax)
    return 0;
    7e8f:	66 b8 00 00          	mov    $0x0,%ax
    7e93:	00 00                	add    %al,(%eax)
    7e95:	66 c9                	leavew 
    7e97:	66 c3                	retw   

00007e99 <savePCB>:
#include "schedule.h"

void savePCB(){
    7e99:	66 55                	push   %bp
    7e9b:	66 89 e5             	mov    %sp,%bp
    _save();
    7e9e:	66 e8 56 0e          	callw  8cf8 <_initialInt_08h+0x39>
    7ea2:	00 00                	add    %al,(%eax)
}
    7ea4:	66 5d                	pop    %bp
    7ea6:	66 c3                	retw   

00007ea8 <initial_PCB>:
void initial_PCB(int index){
    7ea8:	66 55                	push   %bp
    7eaa:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    7ead:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7eb2:	66 40                	inc    %ax
    7eb4:	66 c1 e0 0c          	shl    $0xc,%ax
    7eb8:	66 89 c2             	mov    %ax,%dx
    7ebb:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7ec0:	66 c1 e0 02          	shl    $0x2,%ax
    7ec4:	66 89 c1             	mov    %ax,%cx
    7ec7:	66 c1 e1 04          	shl    $0x4,%cx
    7ecb:	66 01 c8             	add    %cx,%ax
    7ece:	66 05 70 b8          	add    $0xb870,%ax
    7ed2:	00 00                	add    %al,(%eax)
    7ed4:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    7ed8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7edd:	66 40                	inc    %ax
    7edf:	66 c1 e0 0c          	shl    $0xc,%ax
    7ee3:	66 89 c2             	mov    %ax,%dx
    7ee6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7eeb:	66 c1 e0 02          	shl    $0x2,%ax
    7eef:	66 89 c1             	mov    %ax,%cx
    7ef2:	66 c1 e1 04          	shl    $0x4,%cx
    7ef6:	66 01 c8             	add    %cx,%ax
    7ef9:	66 05 60 b8          	add    $0xb860,%ax
    7efd:	00 00                	add    %al,(%eax)
    7eff:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
    7f03:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f08:	66 40                	inc    %ax
    7f0a:	66 c1 e0 0c          	shl    $0xc,%ax
    7f0e:	66 89 c2             	mov    %ax,%dx
    7f11:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f16:	66 c1 e0 02          	shl    $0x2,%ax
    7f1a:	66 89 c1             	mov    %ax,%cx
    7f1d:	66 c1 e1 04          	shl    $0x4,%cx
    7f21:	66 01 c8             	add    %cx,%ax
    7f24:	66 05 60 b8          	add    $0xb860,%ax
    7f28:	00 00                	add    %al,(%eax)
    7f2a:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
    7f2f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f34:	66 c1 e0 02          	shl    $0x2,%ax
    7f38:	66 89 c2             	mov    %ax,%dx
    7f3b:	66 c1 e2 04          	shl    $0x4,%dx
    7f3f:	66 01 d0             	add    %dx,%ax
    7f42:	66 05 60 b8          	add    $0xb860,%ax
    7f46:	00 00                	add    %al,(%eax)
    7f48:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
    7f4f:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
    7f51:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f56:	66 c1 e0 02          	shl    $0x2,%ax
    7f5a:	66 89 c2             	mov    %ax,%dx
    7f5d:	66 c1 e2 04          	shl    $0x4,%dx
    7f61:	66 01 d0             	add    %dx,%ax
    7f64:	66 05 60 b8          	add    $0xb860,%ax
    7f68:	00 00                	add    %al,(%eax)
    7f6a:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    7f71:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = RUN;
    7f73:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f78:	66 c1 e0 02          	shl    $0x2,%ax
    7f7c:	66 89 c2             	mov    %ax,%dx
    7f7f:	66 c1 e2 04          	shl    $0x4,%dx
    7f83:	66 01 d0             	add    %dx,%ax
    7f86:	66 05 70 b8          	add    $0xb870,%ax
    7f8a:	00 00                	add    %al,(%eax)
    7f8c:	67 66 c7 40 08 01 00 	movw   $0x1,0x8(%bx,%si)
    7f93:	00 00                	add    %al,(%eax)
    PCB_list[index ].eflags = 512;
    7f95:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f9a:	66 c1 e0 02          	shl    $0x2,%ax
    7f9e:	66 89 c2             	mov    %ax,%dx
    7fa1:	66 c1 e2 04          	shl    $0x4,%dx
    7fa5:	66 01 d0             	add    %dx,%ax
    7fa8:	66 05 70 b8          	add    $0xb870,%ax
    7fac:	00 00                	add    %al,(%eax)
    7fae:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    7fb5:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    7fb7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7fbc:	66 c1 e0 02          	shl    $0x2,%ax
    7fc0:	66 89 c2             	mov    %ax,%dx
    7fc3:	66 c1 e2 04          	shl    $0x4,%dx
    7fc7:	66 01 d0             	add    %dx,%ax
    7fca:	67 66 8d 90 70 b8    	lea    -0x4790(%bx,%si),%dx
    7fd0:	00 00                	add    %al,(%eax)
    7fd2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7fd7:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 5;
    7fdc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7fe1:	66 c1 e0 02          	shl    $0x2,%ax
    7fe5:	66 89 c2             	mov    %ax,%dx
    7fe8:	66 c1 e2 04          	shl    $0x4,%dx
    7fec:	66 01 d0             	add    %dx,%ax
    7fef:	66 05 80 b8          	add    $0xb880,%ax
    7ff3:	00 00                	add    %al,(%eax)
    7ff5:	67 66 c7 00 05 00    	movw   $0x5,(%bx,%si)
    7ffb:	00 00                	add    %al,(%eax)
}
    7ffd:	66 5d                	pop    %bp
    7fff:	66 c3                	retw   

00008001 <Set_PCB>:
void Set_PCB(){
    8001:	66 55                	push   %bp
    8003:	66 89 e5             	mov    %sp,%bp
    8006:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    800a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8011:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    8013:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    801a:	00 00                	add    %al,(%eax)
    801c:	eb 27                	jmp    8045 <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    801e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8023:	66 c1 e0 02          	shl    $0x2,%ax
    8027:	66 89 c2             	mov    %ax,%dx
    802a:	66 c1 e2 04          	shl    $0x4,%dx
    802e:	66 01 d0             	add    %dx,%ax
    8031:	66 05 70 b8          	add    $0xb870,%ax
    8035:	00 00                	add    %al,(%eax)
    8037:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    803e:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 5;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    8040:	67 66 ff 45 fc       	incw   -0x4(%di)
    8045:	67 66 83 7d fc 07    	cmpw   $0x7,-0x4(%di)
    804b:	7e d1                	jle    801e <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    804d:	66 c9                	leavew 
    804f:	66 c3                	retw   

00008051 <sys_schedule>:
void sys_schedule(){
    8051:	66 55                	push   %bp
    8053:	66 89 e5             	mov    %sp,%bp
    8056:	66 83 ec 0c          	sub    $0xc,%sp
    int i,j;
    int index = -1;
    805a:	67 66 c7 45 f4 ff ff 	movw   $0xffff,-0xc(%di)
    8061:	ff                   	(bad)  
    8062:	ff 66 a1             	jmp    *-0x5f(%esi)
    i = _CurrentProg - PCB_list;
    8065:	60                   	pusha  
    8066:	ba 66 89 c2 66       	mov    $0x66c28966,%edx
    806b:	b8 40 b8 00 00       	mov    $0xb840,%eax
    8070:	66 29 c2             	sub    %ax,%dx
    8073:	66 89 d0             	mov    %dx,%ax
    8076:	66 c1 f8 02          	sar    $0x2,%ax
    807a:	66 89 c2             	mov    %ax,%dx
    807d:	66 89 d0             	mov    %dx,%ax
    8080:	66 01 c0             	add    %ax,%ax
    8083:	66 01 d0             	add    %dx,%ax
    8086:	67 66 8d 14          	lea    (%si),%dx
    808a:	85 00                	test   %eax,(%eax)
    808c:	00 00                	add    %al,(%eax)
    808e:	00 66 01             	add    %ah,0x1(%esi)
    8091:	d0 66 89             	shlb   -0x77(%esi)
    8094:	c2 66 c1             	ret    $0xc166
    8097:	e2 08                	loop   80a1 <sys_schedule+0x50>
    8099:	66 01 d0             	add    %dx,%ax
    809c:	66 89 c2             	mov    %ax,%dx
    809f:	66 c1 e2 10          	shl    $0x10,%dx
    80a3:	66 01 d0             	add    %dx,%ax
    80a6:	66 f7 d8             	neg    %ax
    80a9:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    for(j = 0;j < PCB_NUMMER;j ++){
    80ae:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    80b5:	00 00                	add    %al,(%eax)
    80b7:	e9 a6 00 67 66       	jmp    66678162 <_end+0x6666c6fe>
        if(i == PCB_NUMMER - 1){
    80bc:	83 7d fc 07          	cmpl   $0x7,-0x4(%ebp)
    80c0:	75 14                	jne    80d6 <sys_schedule+0x85>
            _CurrentProg = PCB_list + 1;
    80c2:	66 c7 06 60 ba       	movw   $0xba60,(%esi)
    80c7:	84 b8 00 00 67 66    	test   %bh,0x66670000(%eax)
            i = 1;
    80cd:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    80d4:	eb 11                	jmp    80e7 <sys_schedule+0x96>
        }
        else{
            _CurrentProg ++;
    80d6:	66 a1 60 ba 66 83    	mov    0x8366ba60,%ax
    80dc:	c0 44 66 a3 60       	rolb   $0x60,-0x5d(%esi,%eiz,2)
    80e1:	ba 67 66 ff 45       	mov    $0x45ff6667,%edx
            i ++;
    80e6:	fc                   	cld    
        }
        if(_CurrentProg -> prg_status == RUN){
    80e7:	66 a1 60 ba 67 66    	mov    0x6667ba60,%ax
    80ed:	8b 40 38             	mov    0x38(%eax),%eax
    80f0:	66 83 f8 01          	cmp    $0x1,%ax
    80f4:	75 03                	jne    80f9 <sys_schedule+0xa8>
            return;
    80f6:	e9 a2 00 66 a1       	jmp    a166819d <_end+0xa165c739>
        }
        if(_CurrentProg -> prg_status == READY && index == -1){
    80fb:	60                   	pusha  
    80fc:	ba 67 66 8b 40       	mov    $0x408b6667,%edx
    8101:	38 66 83             	cmp    %ah,-0x7d(%esi)
    8104:	f8                   	clc    
    8105:	03 75 53             	add    0x53(%ebp),%esi
    8108:	67 66 83 7d f4 ff    	cmpw   $0xffff,-0xc(%di)
    810e:	75 4b                	jne    815b <sys_schedule+0x10a>
           index = _CurrentProg - PCB_list;
    8110:	66 a1 60 ba 66 89    	mov    0x8966ba60,%ax
    8116:	c2 66 b8             	ret    $0xb866
    8119:	40                   	inc    %eax
    811a:	b8 00 00 66 29       	mov    $0x29660000,%eax
    811f:	c2 66 89             	ret    $0x8966
    8122:	d0 66 c1             	shlb   -0x3f(%esi)
    8125:	f8                   	clc    
    8126:	02 66 89             	add    -0x77(%esi),%ah
    8129:	c2 66 89             	ret    $0x8966
    812c:	d0 66 01             	shlb   0x1(%esi)
    812f:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    8133:	67 66 8d 14          	lea    (%si),%dx
    8137:	85 00                	test   %eax,(%eax)
    8139:	00 00                	add    %al,(%eax)
    813b:	00 66 01             	add    %ah,0x1(%esi)
    813e:	d0 66 89             	shlb   -0x77(%esi)
    8141:	c2 66 c1             	ret    $0xc166
    8144:	e2 08                	loop   814e <sys_schedule+0xfd>
    8146:	66 01 d0             	add    %dx,%ax
    8149:	66 89 c2             	mov    %ax,%dx
    814c:	66 c1 e2 10          	shl    $0x10,%dx
    8150:	66 01 d0             	add    %dx,%ax
    8153:	66 f7 d8             	neg    %ax
    8156:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
}
void sys_schedule(){
    int i,j;
    int index = -1;
    i = _CurrentProg - PCB_list;
    for(j = 0;j < PCB_NUMMER;j ++){
    815b:	67 66 ff 45 f8       	incw   -0x8(%di)
    8160:	67 66 83 7d f8 07    	cmpw   $0x7,-0x8(%di)
    8166:	0f 8e 50 ff 67 66    	jle    666880bc <_end+0x6667c658>
        }
        if(_CurrentProg -> prg_status == READY && index == -1){
           index = _CurrentProg - PCB_list;
        }
    }
    if(index != -1){
    816c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
    8170:	74 1f                	je     8191 <sys_schedule+0x140>
        _CurrentProg = PCB_list + index;
    8172:	67 66 8b 45 f4       	mov    -0xc(%di),%ax
    8177:	66 c1 e0 02          	shl    $0x2,%ax
    817b:	66 89 c2             	mov    %ax,%dx
    817e:	66 c1 e2 04          	shl    $0x4,%dx
    8182:	66 01 d0             	add    %dx,%ax
    8185:	66 05 40 b8          	add    $0xb840,%ax
    8189:	00 00                	add    %al,(%eax)
    818b:	66 a3 60 ba eb 0a    	mov    %ax,0xaebba60
        return;
    }
    _CurrentProg = PCB_list ;
    8191:	66 c7 06 60 ba       	movw   $0xba60,(%esi)
    8196:	40                   	inc    %eax
    8197:	b8 00 00 90 66       	mov    $0x66900000,%eax
    return;
}
    819c:	c9                   	leave  
    819d:	66 c3                	retw   

0000819f <sys_exit>:
void sys_exit(){
    819f:	66 55                	push   %bp
    81a1:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = EXIT;
    81a4:	66 a1 60 ba 67 66    	mov    0x6667ba60,%ax
    81aa:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
}
    81b1:	66 5d                	pop    %bp
    81b3:	66 c3                	retw   

000081b5 <sys_bolocked>:
void sys_bolocked(){
    81b5:	66 55                	push   %bp
    81b7:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = BLOCKED;
    81ba:	66 a1 60 ba 67 66    	mov    0x6667ba60,%ax
    81c0:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
}
    81c7:	66 5d                	pop    %bp
    81c9:	66 c3                	retw   

000081cb <sys_run>:
void sys_run(){
    81cb:	66 55                	push   %bp
    81cd:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    81d0:	66 a1 60 ba 67 66    	mov    0x6667ba60,%ax
    81d6:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    81dd:	66 5d                	pop    %bp
    81df:	66 c3                	retw   

000081e1 <sys_wait>:
void sys_wait(){
    81e1:	66 55                	push   %bp
    81e3:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = BLOCKED;
    81e6:	66 a1 60 ba 67 66    	mov    0x6667ba60,%ax
    81ec:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
    _Schedule();
    81f3:	66 e8 b6 05          	callw  87ad <_fork_user+0xb>
    81f7:	00 00                	add    %al,(%eax)
}
    81f9:	66 5d                	pop    %bp
    81fb:	66 c3                	retw   

000081fd <do_fork>:
int do_fork(){
    81fd:	66 55                	push   %bp
    81ff:	66 89 e5             	mov    %sp,%bp
    8202:	66 83 ec 04          	sub    $0x4,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    8206:	67 66 c7 45 fc 84 b8 	movw   $0xb884,-0x4(%di)
    820d:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN)    fork_prg = fork_prg + 1;
    820f:	eb 06                	jmp    8217 <do_fork+0x1a>
    8211:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    8217:	67 66 81 7d fc 60 ba 	cmpw   $0xba60,-0x4(%di)
    821e:	00 00                	add    %al,(%eax)
    8220:	73 10                	jae    8232 <do_fork+0x35>
    8222:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8227:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    822c:	66 83 f8 01          	cmp    $0x1,%ax
    8230:	74 df                	je     8211 <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    8232:	67 66 81 7d fc 1c ba 	cmpw   $0xba1c,-0x4(%di)
    8239:	00 00                	add    %al,(%eax)
    823b:	76 0f                	jbe    824c <do_fork+0x4f>
    823d:	66 a1 60 ba 67 66    	mov    0x6667ba60,%ax
    8243:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    8249:	e9 dc 01 66 e8       	jmp    e866842a <_end+0xe865c9c6>
    else{
        _Schedule_once();
    824e:	43                   	inc    %ebx
    824f:	05 00 00 66 83       	add    $0x83660000,%eax
        __asm__("sub $6,%esp");
    8254:	ec                   	in     (%dx),%al
    8255:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    8256:	66 a1 60 ba 67 66    	mov    0x6667ba60,%ax
    825c:	ff 75 fc             	pushl  -0x4(%ebp)
    825f:	66 50                	push   %ax
    8261:	66 e8 3f 02          	callw  84a4 <counter+0x63>
    8265:	00 00                	add    %al,(%eax)
    8267:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    826b:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    826f:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8274:	66 b8 40 b8          	mov    $0xb840,%ax
    8278:	00 00                	add    %al,(%eax)
    827a:	66 29 c2             	sub    %ax,%dx
    827d:	66 89 d0             	mov    %dx,%ax
    8280:	66 c1 f8 02          	sar    $0x2,%ax
    8284:	66 89 c2             	mov    %ax,%dx
    8287:	66 89 d0             	mov    %dx,%ax
    828a:	66 01 c0             	add    %ax,%ax
    828d:	66 01 d0             	add    %dx,%ax
    8290:	67 66 8d 14          	lea    (%si),%dx
    8294:	85 00                	test   %eax,(%eax)
    8296:	00 00                	add    %al,(%eax)
    8298:	00 66 01             	add    %ah,0x1(%esi)
    829b:	d0 66 89             	shlb   -0x77(%esi)
    829e:	c2 66 c1             	ret    $0xc166
    82a1:	e2 08                	loop   82ab <do_fork+0xae>
    82a3:	66 01 d0             	add    %dx,%ax
    82a6:	66 89 c2             	mov    %ax,%dx
    82a9:	66 c1 e2 10          	shl    $0x10,%dx
    82ad:	66 01 d0             	add    %dx,%ax
    82b0:	66 f7 d8             	neg    %ax
    82b3:	66 89 c2             	mov    %ax,%dx
    82b6:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    82bb:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    82c0:	66 a1 60 ba 66 89    	mov    0x8966ba60,%ax
    82c6:	c2 66 b8             	ret    $0xb866
    82c9:	40                   	inc    %eax
    82ca:	b8 00 00 66 29       	mov    $0x29660000,%eax
    82cf:	c2 66 89             	ret    $0x8966
    82d2:	d0 66 c1             	shlb   -0x3f(%esi)
    82d5:	f8                   	clc    
    82d6:	02 66 89             	add    -0x77(%esi),%ah
    82d9:	c2 66 89             	ret    $0x8966
    82dc:	d0 66 01             	shlb   0x1(%esi)
    82df:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    82e3:	67 66 8d 14          	lea    (%si),%dx
    82e7:	85 00                	test   %eax,(%eax)
    82e9:	00 00                	add    %al,(%eax)
    82eb:	00 66 01             	add    %ah,0x1(%esi)
    82ee:	d0 66 89             	shlb   -0x77(%esi)
    82f1:	c2 66 c1             	ret    $0xc166
    82f4:	e2 08                	loop   82fe <do_fork+0x101>
    82f6:	66 01 d0             	add    %dx,%ax
    82f9:	66 89 c2             	mov    %ax,%dx
    82fc:	66 c1 e2 10          	shl    $0x10,%dx
    8300:	66 01 d0             	add    %dx,%ax
    8303:	66 f7 d8             	neg    %ax
    8306:	66 89 c2             	mov    %ax,%dx
    8309:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    830e:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    8313:	66 a1 60 ba 67 66    	mov    0x6667ba60,%ax
    8319:	8b 50 20             	mov    0x20(%eax),%edx
    831c:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8321:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    8326:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    832b:	66 b8 40 b8          	mov    $0xb840,%ax
    832f:	00 00                	add    %al,(%eax)
    8331:	66 29 c2             	sub    %ax,%dx
    8334:	66 89 d0             	mov    %dx,%ax
    8337:	66 c1 f8 02          	sar    $0x2,%ax
    833b:	66 89 c2             	mov    %ax,%dx
    833e:	66 89 d0             	mov    %dx,%ax
    8341:	66 01 c0             	add    %ax,%ax
    8344:	66 01 d0             	add    %dx,%ax
    8347:	67 66 8d 14          	lea    (%si),%dx
    834b:	85 00                	test   %eax,(%eax)
    834d:	00 00                	add    %al,(%eax)
    834f:	00 66 01             	add    %ah,0x1(%esi)
    8352:	d0 66 89             	shlb   -0x77(%esi)
    8355:	c2 66 c1             	ret    $0xc166
    8358:	e2 08                	loop   8362 <do_fork+0x165>
    835a:	66 01 d0             	add    %dx,%ax
    835d:	66 89 c2             	mov    %ax,%dx
    8360:	66 c1 e2 10          	shl    $0x10,%dx
    8364:	66 01 d0             	add    %dx,%ax
    8367:	66 f7 d8             	neg    %ax
    836a:	66 83 c0 02          	add    $0x2,%ax
    836e:	66 c1 e0 0c          	shl    $0xc,%ax
    8372:	66 89 c2             	mov    %ax,%dx
    8375:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    837a:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    837f:	66 a1 60 ba 67 66    	mov    0x6667ba60,%ax
    8385:	8b 50 30             	mov    0x30(%eax),%edx
    8388:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    838d:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    8392:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8397:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    839e:	00 00                	add    %al,(%eax)
       // __asm__("enter $0,$0");
        _Schedule_once();
    83a0:	66 e8 ef 03          	callw  8793 <S+0x14>
    83a4:	00 00                	add    %al,(%eax)
        __asm__("sub $6,%esp");
    83a6:	66 83 ec 06          	sub    $0x6,%sp
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    83aa:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    83af:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    83b4:	66 a1 60 ba 67 66    	mov    0x6667ba60,%ax
    83ba:	8b 50 28             	mov    0x28(%eax),%edx
    83bd:	66 a1 60 ba 67 66    	mov    0x6667ba60,%ax
    83c3:	8b 40 24             	mov    0x24(%eax),%eax
    83c6:	66 51                	push   %cx
    83c8:	66 52                	push   %dx
    83ca:	66 50                	push   %ax
    83cc:	66 e8 b3 02          	callw  8683 <Message31+0x4>
    83d0:	00 00                	add    %al,(%eax)
    83d2:	66 83 c4 0c          	add    $0xc,%sp
         __asm__("add $6,%esp");
    83d6:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> ip = _CurrentProg -> ip;
    83da:	66 a1 60 ba 67 66    	mov    0x6667ba60,%ax
    83e0:	8b 50 2c             	mov    0x2c(%eax),%edx
    83e3:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    83e8:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    83ed:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    83f2:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    83f8:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    83fa:	66 a1 60 ba 67 66    	mov    0x6667ba60,%ax
    8400:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    8403:	75 08                	jne    840d <do_fork+0x210>
            return 0;
    8405:	66 b8 00 00          	mov    $0x0,%ax
    8409:	00 00                	add    %al,(%eax)
    840b:	eb 1b                	jmp    8428 <do_fork+0x22b>
        }
        _CurrentProg -> eax = fork_prg -> id;
    840d:	66 a1 60 ba 67 66    	mov    0x6667ba60,%ax
    8413:	8b 55 fc             	mov    -0x4(%ebp),%edx
    8416:	67 66 8b 52 3c       	mov    0x3c(%bp,%si),%dx
    841b:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    841f:	66 a1 60 ba 67 66    	mov    0x6667ba60,%ax
    8425:	8b 00                	mov    (%eax),%eax
    8427:	90                   	nop
    }
}
    8428:	66 c9                	leavew 
    842a:	66 c3                	retw   

0000842c <thread_join>:
void thread_join(){
    842c:	66 55                	push   %bp
    842e:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    8431:	90                   	nop
    8432:	66 e8 09 00          	callw  843f <thread_join+0x13>
    8436:	00 00                	add    %al,(%eax)
    8438:	66 85 c0             	test   %ax,%ax
    843b:	75 f5                	jne    8432 <thread_join+0x6>
    }
}
    843d:	66 5d                	pop    %bp
    843f:	66 c3                	retw   

00008441 <counter>:
int counter(){
    8441:	66 55                	push   %bp
    8443:	66 89 e5             	mov    %sp,%bp
    8446:	66 83 ec 08          	sub    $0x8,%sp
    int i = 0;
    844a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8451:	00 00                	add    %al,(%eax)
    int count = 0;
    8453:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    845a:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER - 1;i ++){
    845c:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8463:	00 00                	add    %al,(%eax)
    8465:	eb 2e                	jmp    8495 <counter+0x54>
        if(PCB_list[i].prg_status == 1){
    8467:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    846c:	66 c1 e0 02          	shl    $0x2,%ax
    8470:	66 89 c2             	mov    %ax,%dx
    8473:	66 c1 e2 04          	shl    $0x4,%dx
    8477:	66 01 d0             	add    %dx,%ax
    847a:	66 05 70 b8          	add    $0xb870,%ax
    847e:	00 00                	add    %al,(%eax)
    8480:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    8485:	66 83 f8 01          	cmp    $0x1,%ax
    8489:	75 05                	jne    8490 <counter+0x4f>
            count ++;
    848b:	67 66 ff 45 f8       	incw   -0x8(%di)
    }
}
int counter(){
    int i = 0;
    int count = 0;
    for(i = 0;i < PCB_NUMMER - 1;i ++){
    8490:	67 66 ff 45 fc       	incw   -0x4(%di)
    8495:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    849b:	7e ca                	jle    8467 <counter+0x26>
        if(PCB_list[i].prg_status == 1){
            count ++;
        }
    }
    return count;
    849d:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    84a2:	66 c9                	leavew 
    84a4:	66 c3                	retw   

000084a6 <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    84a6:	66 55                	push   %bp
    84a8:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    84ab:	67 66 8b 45 08       	mov    0x8(%di),%ax
    84b0:	67 66 8b 10          	mov    (%bx,%si),%dx
    84b4:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    84b9:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    84bd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    84c2:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    84c7:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    84cc:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    84d1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    84d6:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    84db:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    84e0:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    84e5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    84ea:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    84ef:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    84f4:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    84f9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    84fe:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    8503:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8508:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    850d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8512:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    8517:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    851c:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    8521:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8526:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    852b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8530:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    8535:	67 66 8b 45 08       	mov    0x8(%di),%ax
    853a:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    853f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8544:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    8549:	67 66 8b 45 08       	mov    0x8(%di),%ax
    854e:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    8553:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8558:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    855d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8562:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    8567:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    856c:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    8571:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8576:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    857b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8580:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    8585:	67 66 8b 45 08       	mov    0x8(%di),%ax
    858a:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    858f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8594:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    8599:	67 66 8b 45 08       	mov    0x8(%di),%ax
    859e:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    85a3:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    85a8:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    85ad:	66 5d                	pop    %bp
    85af:	66 c3                	retw   

000085b1 <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    85b1:	66 55                	push   %bp
    85b3:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    85b6:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    85bb:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    85c0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    85c5:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    85ca:	67 66 8b 45 08       	mov    0x8(%di),%ax
    85cf:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    85d4:	66 51                	push   %cx
    85d6:	66 52                	push   %dx
    85d8:	66 50                	push   %ax
    85da:	66 e8 a5 00          	callw  8683 <Message31+0x4>
    85de:	00 00                	add    %al,(%eax)
    85e0:	66 83 c4 0c          	add    $0xc,%sp
}
    85e4:	66 c9                	leavew 
    85e6:	66 c3                	retw   

000085e8 <clearscreen>:
#include "use.h"
//====================================================
//                封装清屏函数
//====================================================
void clearscreen(){
    85e8:	66 55                	push   %bp
    85ea:	66 89 e5             	mov    %sp,%bp
	_clearscreen();//C调用汇编时会压入四个字节，必须考虑到这个，写出newret，是pop edx,而非 pop dx；
    85ed:	66 e8 c1 00          	callw  86b2 <end_for_copy+0x5>
    85f1:	00 00                	add    %al,(%eax)
	//__asm__("pop %ax");
	return ;
    85f3:	90                   	nop
}
    85f4:	66 5d                	pop    %bp
    85f6:	66 c3                	retw   

000085f8 <Initial_Int>:
	}
}*/
//====================================================
//                封装中断初始化函数
//====================================================
void Initial_Int(){
    85f8:	66 55                	push   %bp
    85fa:	66 89 e5             	mov    %sp,%bp
	_initialInt();
    85fd:	66 e8 bd 04          	callw  8abe <_SetINT43h+0x12>
    8601:	00 00                	add    %al,(%eax)
	return;
    8603:	90                   	nop
}
    8604:	66 5d                	pop    %bp
    8606:	66 c3                	retw   

00008608 <Initial_Int_09h>:
void Initial_Int_09h(){
    8608:	66 55                	push   %bp
    860a:	66 89 e5             	mov    %sp,%bp
	_initialInt_09h();
    860d:	66 e8 72 06          	callw  8c83 <_initialInt+0x1c3>
    8611:	00 00                	add    %al,(%eax)
}
    8613:	66 5d                	pop    %bp
    8615:	66 c3                	retw   

00008617 <Initial_Int_08h>:
void Initial_Int_08h(){
    8617:	66 55                	push   %bp
    8619:	66 89 e5             	mov    %sp,%bp
	_initialInt_08h();
    861c:	66 e8 9d 06          	callw  8cbd <_initialInt_09h+0x38>
    8620:	00 00                	add    %al,(%eax)
}
    8622:	66 5d                	pop    %bp
    8624:	66 c3                	retw   

00008626 <loadProg>:
void loadProg(int count,int begin,int memory_postion){
    8626:	66 55                	push   %bp
    8628:	66 89 e5             	mov    %sp,%bp
    _loadP(count,begin,memory_postion);
    862b:	67 66 ff 75 10       	pushw  0x10(%di)
    8630:	67 66 ff 75 0c       	pushw  0xc(%di)
    8635:	67 66 ff 75 08       	pushw  0x8(%di)
    863a:	66 e8 e7 00          	callw  8725 <_setPoint+0x15>
    863e:	00 00                	add    %al,(%eax)
    8640:	66 83 c4 0c          	add    $0xc,%sp
    8644:	66 c9                	leavew 
    8646:	66 c3                	retw   
    8648:	66 90                	xchg   %ax,%ax
    864a:	66 90                	xchg   %ax,%ax
    864c:	66 90                	xchg   %ax,%ax
    864e:	66 90                	xchg   %ax,%ax

00008650 <count>:
    8650:	08 2d 00 00 00 00    	or     %ch,0x0

00008651 <alpha>:
    8651:	2d 00 00 00 00       	sub    $0x0,%eax

00008652 <int_09_saved>:
    8652:	00 00                	add    %al,(%eax)
	...

00008656 <program_saved>:
    8656:	70 00                	jo     8658 <program_saved+0x2>
	...

0000865a <ds_saved>:
    865a:	7c 00                	jl     865c <ds_saved+0x2>
	...

0000865e <return_save>:
    865e:	88 00                	mov    %al,(%eax)

00008660 <esi_save>:
    8660:	96                   	xchg   %eax,%esi
    8661:	00 00                	add    %al,(%eax)
	...

00008664 <temp>:
    8664:	e8 03 b4 00 00       	call   13a6c <_end+0x8008>

00008666 <kernelesp_saved>:
    8666:	b4 00                	mov    $0x0,%ah
	...

0000866a <esp_saved_inkernel>:
    866a:	c8 00 00 00          	enter  $0x0,$0x0

0000866e <esp_saved_in_user>:
    866e:	f0 00 00             	lock add %al,(%eax)
	...

00008672 <ss_saved_in_user>:
    8672:	2c 01                	sub    $0x1,%al
	...

00008676 <color>:
    8676:	01 c2                	add    %eax,%edx

00008677 <ss_saved_fork>:
    8677:	c2 01 00             	ret    $0x1
	...

0000867b <retaddr>:
    867b:	58                   	pop    %eax
    867c:	02 00                	add    (%eax),%al
	...

0000867f <Message31>:
    867f:	74 69                	je     86ea <_readinput+0x9>
    8681:	6d                   	insl   (%dx),%es:(%edi)
    8682:	65 3a 20             	cmp    %gs:(%eax),%ah

00008685 <_sys_stack_copy>:
    8685:	c8 00 00 00          	enter  $0x0,$0x0
    8689:	8e d0                	mov    %eax,%ss
    868b:	60                   	pusha  
    868c:	1e                   	push   %ds
    868d:	8b 46 06             	mov    0x6(%esi),%eax
    8690:	8b 56 0a             	mov    0xa(%esi),%edx
    8693:	8b 4e 0e             	mov    0xe(%esi),%ecx
    8696:	8c db                	mov    %ds,%ebx

00008698 <while_loop1>:
    8698:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
    869e:	8e d8                	mov    %eax,%ds
    86a0:	67 8b 1a             	mov    (%bp,%si),%ebx
    86a3:	8e d9                	mov    %ecx,%ds
    86a5:	67 89 1a             	mov    %ebx,(%bp,%si)
    86a8:	83 c2 02             	add    $0x2,%edx
    86ab:	eb eb                	jmp    8698 <while_loop1>

000086ad <end_for_copy>:
    86ad:	1f                   	pop    %ds
    86ae:	61                   	popa   
    86af:	c9                   	leave  
    86b0:	66 5a                	pop    %dx
    86b2:	ff e2                	jmp    *%edx

000086b4 <_clearscreen>:
    86b4:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    86b9:	66 5a                	pop    %dx
    86bb:	ff e2                	jmp    *%edx

000086bd <_printchar>:
    86bd:	c8 00 00 00          	enter  $0x0,$0x0
    86c1:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
    86c6:	57                   	push   %edi
    86c7:	66 8b 4e 06          	mov    0x6(%esi),%cx
    86cb:	66 8b 7e 0a          	mov    0xa(%esi),%di
    86cf:	66 8b 56 0e          	mov    0xe(%esi),%dx
    86d3:	88 d5                	mov    %dl,%ch
    86d5:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
    86dc:	00 66 5a             	add    %ah,0x5a(%esi)
    86df:	ff e2                	jmp    *%edx

000086e1 <_readinput>:
    86e1:	c8 04 00 00          	enter  $0x4,$0x0
    86e5:	b4 00                	mov    $0x0,%ah
    86e7:	cd 16                	int    $0x16
    86e9:	b4 00                	mov    $0x0,%ah
    86eb:	66 67 89 04          	mov    %ax,(%si)
    86ef:	24 66                	and    $0x66,%al
    86f1:	67 8b 04             	mov    (%si),%eax
    86f4:	24 c9                	and    $0xc9,%al
    86f6:	66 5a                	pop    %dx
    86f8:	ff e2                	jmp    *%edx

000086fa <_showchar>:
    86fa:	c8 00 00 00          	enter  $0x0,$0x0
    86fe:	50                   	push   %eax
    86ff:	53                   	push   %ebx
    8700:	8b 46 06             	mov    0x6(%esi),%eax
    8703:	b4 0e                	mov    $0xe,%ah
    8705:	b3 00                	mov    $0x0,%bl
    8707:	cd 10                	int    $0x10
    8709:	5b                   	pop    %ebx
    870a:	58                   	pop    %eax
    870b:	c9                   	leave  
    870c:	66 5a                	pop    %dx
    870e:	ff e2                	jmp    *%edx

00008710 <_setPoint>:
    8710:	c8 00 00 00          	enter  $0x0,$0x0
    8714:	53                   	push   %ebx
    8715:	b7 00                	mov    $0x0,%bh
    8717:	8a 77 06             	mov    0x6(%edi),%dh
    871a:	8a 57 0a             	mov    0xa(%edi),%dl
    871d:	b4 02                	mov    $0x2,%ah
    871f:	cd 10                	int    $0x10
    8721:	5b                   	pop    %ebx
    8722:	c9                   	leave  
    8723:	66 5a                	pop    %dx
    8725:	ff e2                	jmp    *%edx

00008727 <_loadP>:
    8727:	c8 00 00 00          	enter  $0x0,$0x0
    872b:	60                   	pusha  
    872c:	06                   	push   %es
    872d:	1e                   	push   %ds
    872e:	8c c8                	mov    %cs,%eax
    8730:	8e d8                	mov    %eax,%ds
    8732:	8b 46 0e             	mov    0xe(%esi),%eax
    8735:	8e c0                	mov    %eax,%es
    8737:	b2 00                	mov    $0x0,%dl
    8739:	8b 46 0a             	mov    0xa(%esi),%eax
    873c:	b3 12                	mov    $0x12,%bl
    873e:	f6 f3                	div    %bl
    8740:	88 e1                	mov    %ah,%cl
    8742:	30 e4                	xor    %ah,%ah
    8744:	b3 02                	mov    $0x2,%bl
    8746:	f6 f3                	div    %bl
    8748:	88 e6                	mov    %ah,%dh
    874a:	88 c5                	mov    %al,%ch
    874c:	8a 46 06             	mov    0x6(%esi),%al
    874f:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
    8754:	cd 13                	int    $0x13
    8756:	1f                   	pop    %ds
    8757:	07                   	pop    %es
    8758:	61                   	popa   
    8759:	c9                   	leave  
    875a:	66 5a                	pop    %dx
    875c:	ff e2                	jmp    *%edx

0000875e <_RunProgress>:
    875e:	c8 00 00 00          	enter  $0x0,$0x0
    8762:	8c c8                	mov    %cs,%eax
    8764:	8e d8                	mov    %eax,%ds
    8766:	8e c0                	mov    %eax,%es
    8768:	8b 5e 06             	mov    0x6(%esi),%ebx
    876b:	c7 06 56 86 00 01    	movl   $0x1008656,(%esi)
    8771:	89 1e                	mov    %ebx,(%esi)
    8773:	58                   	pop    %eax
    8774:	86 66 89             	xchg   %ah,-0x77(%esi)
    8777:	26                   	es
    8778:	6a 86                	push   $0xffffff86
    877a:	26 ff 1e             	lcall  *%es:(%esi)
    877d:	56                   	push   %esi
    877e:	86 8c c8 8e d8 8e c0 	xchg   %cl,-0x3f712772(%eax,%ecx,8)

0000877f <S>:
    877f:	8c c8                	mov    %cs,%eax
    8781:	8e d8                	mov    %eax,%ds
    8783:	8e c0                	mov    %eax,%es
    8785:	8e d0                	mov    %eax,%ss
    8787:	66 8b 26             	mov    (%esi),%sp
    878a:	6a 86                	push   $0xffffff86
    878c:	b4 00                	mov    $0x0,%ah
    878e:	cd 16                	int    $0x16
    8790:	c9                   	leave  
    8791:	66 5a                	pop    %dx
    8793:	ff e2                	jmp    *%edx

00008795 <_Schedule_once>:
    8795:	c8 00 00 00          	enter  $0x0,$0x0
    8799:	6a 00                	push   $0x0
    879b:	cd 41                	int    $0x41
    879d:	c9                   	leave  
    879e:	66 5a                	pop    %dx
    87a0:	ff e2                	jmp    *%edx

000087a2 <_fork_user>:
    87a2:	c8 00 00 00          	enter  $0x0,$0x0
    87a6:	6a 00                	push   $0x0
    87a8:	cd 39                	int    $0x39
    87aa:	c9                   	leave  
    87ab:	66 5a                	pop    %dx
    87ad:	ff e2                	jmp    *%edx

000087af <_Schedule>:
    87af:	c8 00 00 00          	enter  $0x0,$0x0
    87b3:	16                   	push   %ss
    87b4:	6a 00                	push   $0x0
    87b6:	cd 42                	int    $0x42
    87b8:	17                   	pop    %ss
    87b9:	c9                   	leave  
    87ba:	66 5a                	pop    %dx
    87bc:	ff e2                	jmp    *%edx

000087be <_wait>:
    87be:	c8 00 00 00          	enter  $0x0,$0x0
    87c2:	6a 00                	push   $0x0
    87c4:	cd 43                	int    $0x43
    87c6:	c9                   	leave  
    87c7:	66 5a                	pop    %dx
    87c9:	ff e2                	jmp    *%edx

000087cb <_SetINT20h>:
    87cb:	fa                   	cli    
    87cc:	1e                   	push   %ds
    87cd:	06                   	push   %es
    87ce:	8c c8                	mov    %cs,%eax
    87d0:	8e d8                	mov    %eax,%ds
    87d2:	8e c0                	mov    %eax,%es
    87d4:	8c 16                	mov    %ss,(%esi)
    87d6:	72 86                	jb     875e <_RunProgress>
    87d8:	8e d0                	mov    %eax,%ss
    87da:	66 89 26             	mov    %sp,(%esi)
    87dd:	6e                   	outsb  %ds:(%esi),(%dx)
    87de:	86 66 8b             	xchg   %ah,-0x75(%esi)
    87e1:	26                   	es
    87e2:	6a 86                	push   $0xffffff86
    87e4:	53                   	push   %ebx
    87e5:	51                   	push   %ecx
    87e6:	52                   	push   %edx
    87e7:	b4 01                	mov    $0x1,%ah
    87e9:	cd 16                	int    $0x16
    87eb:	5a                   	pop    %edx
    87ec:	59                   	pop    %ecx
    87ed:	5b                   	pop    %ebx
    87ee:	8e 16                	mov    (%esi),%ss
    87f0:	72 86                	jb     8778 <_RunProgress+0x1a>
    87f2:	66 8b 26             	mov    (%esi),%sp
    87f5:	6e                   	outsb  %ds:(%esi),(%dx)
    87f6:	86 07                	xchg   %al,(%edi)
    87f8:	1f                   	pop    %ds
    87f9:	74 0a                	je     8805 <going_on>
    87fb:	50                   	push   %eax
    87fc:	b4 00                	mov    $0x0,%ah
    87fe:	cd 16                	int    $0x16
    8800:	58                   	pop    %eax
    8801:	fb                   	sti    
    8802:	cd 38                	int    $0x38
    8804:	cf                   	iret   

00008805 <going_on>:
    8805:	fb                   	sti    
    8806:	cf                   	iret   

00008807 <_SetINT08h_turn_around>:
    8807:	fa                   	cli    
    8808:	e8 ef 04 6a 00       	call   6a8cfc <_end+0x69d298>
    880d:	e8 41 f8 e8 5b       	call   5be98053 <_end+0x5be8c5ef>
    8812:	05 b0 20 e6 20       	add    $0x20e620b0,%eax
    8817:	e6 a0                	out    %al,$0xa0
    8819:	fb                   	sti    
    881a:	cf                   	iret   

0000881b <_SetINT08h>:
    881b:	60                   	pusha  
    881c:	0f a8                	push   %gs
    881e:	1e                   	push   %ds
    881f:	06                   	push   %es
    8820:	16                   	push   %ss
    8821:	8c c8                	mov    %cs,%eax
    8823:	8e c0                	mov    %eax,%es
    8825:	8e d8                	mov    %eax,%ds
    8827:	8e d0                	mov    %eax,%ss
    8829:	fe 0e                	decb   (%esi)
    882b:	50                   	push   %eax
    882c:	86 75 4f             	xchg   %dh,0x4f(%ebp)

0000882f <notc>:
    882f:	80 3e 51             	cmpb   $0x51,(%esi)
    8832:	86 2d 75 07 c6 06    	xchg   %ch,0x6c60775
    8838:	51                   	push   %ecx
    8839:	86 5c eb 2a          	xchg   %bl,0x2a(%ebx,%ebp,8)

0000883d <changleft>:
    883d:	80 3e 51             	cmpb   $0x51,(%esi)
    8840:	86 5c 75 07          	xchg   %bl,0x7(%ebp,%esi,2)
    8844:	c6 06 51             	movb   $0x51,(%esi)
    8847:	86 7c eb 1c          	xchg   %bh,0x1c(%ebx,%ebp,8)

0000884b <changright>:
    884b:	80 3e 51             	cmpb   $0x51,(%esi)
    884e:	86 7c 75 07          	xchg   %bh,0x7(%ebp,%esi,2)
    8852:	c6 06 51             	movb   $0x51,(%esi)
    8855:	86 2f                	xchg   %ch,(%edi)
    8857:	eb 0e                	jmp    8867 <show>

00008859 <changheng>:
    8859:	80 3e 51             	cmpb   $0x51,(%esi)
    885c:	86 2f                	xchg   %ch,(%edi)
    885e:	75 cf                	jne    882f <notc>
    8860:	c6 06 51             	movb   $0x51,(%esi)
    8863:	86 2d eb 00 b9 00    	xchg   %ch,0xb900eb

00008867 <show>:
    8867:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    886c:	b4 09                	mov    $0x9,%ah
    886e:	8a 26                	mov    (%esi),%ah
    8870:	76 86                	jbe    87f8 <_SetINT20h+0x2d>
    8872:	a0 51 86 65 a3       	mov    0xa3658651,%al
    8877:	8e 00                	mov    (%eax),%es
    8879:	c6 06 50             	movb   $0x50,(%esi)
    887c:	86 08                	xchg   %cl,(%eax)

0000887e <end>:
    887e:	b0 20                	mov    $0x20,%al
    8880:	e6 20                	out    %al,$0x20
    8882:	e6 a0                	out    %al,$0xa0
    8884:	17                   	pop    %ss
    8885:	07                   	pop    %es
    8886:	1f                   	pop    %ds
    8887:	0f a9                	pop    %gs
    8889:	61                   	popa   
    888a:	fb                   	sti    
    888b:	cf                   	iret   

0000888c <_SetINT09h>:
    888c:	fa                   	cli    
    888d:	1e                   	push   %ds
    888e:	06                   	push   %es
    888f:	8c c8                	mov    %cs,%eax
    8891:	8e d8                	mov    %eax,%ds
    8893:	8e c0                	mov    %eax,%es
    8895:	8e d0                	mov    %eax,%ss
    8897:	8c 16                	mov    %ss,(%esi)
    8899:	72 86                	jb     8821 <_SetINT08h+0x6>
    889b:	8e d0                	mov    %eax,%ss
    889d:	66 89 26             	mov    %sp,(%esi)
    88a0:	6e                   	outsb  %ds:(%esi),(%dx)
    88a1:	86 66 8b             	xchg   %ah,-0x75(%esi)
    88a4:	26                   	es
    88a5:	6a 86                	push   $0xffffff86
    88a7:	60                   	pusha  
    88a8:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    88ad:	8a 26                	mov    (%esi),%ah
    88af:	76 86                	jbe    8837 <notc+0x8>
    88b1:	b0 4f                	mov    $0x4f,%al
    88b3:	65 a3 78 00 b0 55    	mov    %eax,%gs:0x55b00078
    88b9:	65 a3 7a 00 b0 43    	mov    %eax,%gs:0x43b0007a
    88bf:	65 a3 7c 00 b0 48    	mov    %eax,%gs:0x48b0007c
    88c5:	65 a3 7e 00 b0 53    	mov    %eax,%gs:0x53b0007e
    88cb:	65 a3 80 00 b0 21    	mov    %eax,%gs:0x21b00080
    88d1:	65 a3 82 00 b0 4f    	mov    %eax,%gs:0x4fb00082
    88d7:	65 a3 84 00 b0 55    	mov    %eax,%gs:0x55b00084
    88dd:	65 a3 86 00 b0 43    	mov    %eax,%gs:0x43b00086
    88e3:	65 a3 88 00 b0 48    	mov    %eax,%gs:0x48b00088
    88e9:	65 a3 8a 00 b0 21    	mov    %eax,%gs:0x21b0008a
    88ef:	65 a3 8c 00 61 80    	mov    %eax,%gs:0x8061008c
    88f5:	fc                   	cld    
    88f6:	06                   	push   %es
    88f7:	75 06                	jne    88ff <cont>
    88f9:	b4 01                	mov    $0x1,%ah
    88fb:	88 26                	mov    %ah,(%esi)
    88fd:	76 86                	jbe    8885 <end+0x7>

000088ff <cont>:
    88ff:	fe 06                	incb   (%esi)
    8901:	76 86                	jbe    8889 <end+0xb>
    8903:	8c c8                	mov    %cs,%eax
    8905:	8e c0                	mov    %eax,%es
    8907:	fb                   	sti    
    8908:	9c                   	pushf  
    8909:	26 ff 1e             	lcall  *%es:(%esi)
    890c:	52                   	push   %edx
    890d:	86 8e 16 72 86 66    	xchg   %cl,0x66867216(%esi)
    8913:	8b 26                	mov    (%esi),%esp
    8915:	6e                   	outsb  %ds:(%esi),(%dx)
    8916:	86 07                	xchg   %al,(%edi)
    8918:	1f                   	pop    %ds
    8919:	cf                   	iret   

0000891a <_SetINT33h>:
    891a:	fa                   	cli    
    891b:	c8 00 00 00          	enter  $0x0,$0x0
    891f:	60                   	pusha  
    8920:	1e                   	push   %ds
    8921:	0f a8                	push   %gs
    8923:	06                   	push   %es
    8924:	8c c8                	mov    %cs,%eax
    8926:	8e c0                	mov    %eax,%es
    8928:	8e d8                	mov    %eax,%ds
    892a:	8c 16                	mov    %ss,(%esi)
    892c:	72 86                	jb     88b4 <_SetINT09h+0x28>
    892e:	8e d0                	mov    %eax,%ss
    8930:	66 89 26             	mov    %sp,(%esi)
    8933:	6e                   	outsb  %ds:(%esi),(%dx)
    8934:	86 66 8b             	xchg   %ah,-0x75(%esi)
    8937:	26                   	es
    8938:	6a 86                	push   $0xffffff86
    893a:	6a 00                	push   $0x0
    893c:	e8 be 10 8e 16       	call   168e99ff <_end+0x168ddf9b>
    8941:	72 86                	jb     88c9 <_SetINT09h+0x3d>
    8943:	66 8b 26             	mov    (%esi),%sp
    8946:	6e                   	outsb  %ds:(%esi),(%dx)
    8947:	86 07                	xchg   %al,(%edi)
    8949:	0f a9                	pop    %gs
    894b:	1f                   	pop    %ds
    894c:	61                   	popa   
    894d:	fb                   	sti    
    894e:	c9                   	leave  
    894f:	cf                   	iret   

00008950 <_SetINT34h>:
    8950:	fa                   	cli    
    8951:	c8 00 00 00          	enter  $0x0,$0x0
    8955:	60                   	pusha  
    8956:	1e                   	push   %ds
    8957:	0f a8                	push   %gs
    8959:	06                   	push   %es
    895a:	8c c8                	mov    %cs,%eax
    895c:	8e c0                	mov    %eax,%es
    895e:	8e d8                	mov    %eax,%ds
    8960:	8c 16                	mov    %ss,(%esi)
    8962:	72 86                	jb     88ea <_SetINT09h+0x5e>
    8964:	8e d0                	mov    %eax,%ss
    8966:	66 89 26             	mov    %sp,(%esi)
    8969:	6e                   	outsb  %ds:(%esi),(%dx)
    896a:	86 66 8b             	xchg   %ah,-0x75(%esi)
    896d:	26                   	es
    896e:	6a 86                	push   $0xffffff86
    8970:	6a 00                	push   $0x0
    8972:	e8 38 11 8e 16       	call   168e9aaf <_end+0x168de04b>
    8977:	72 86                	jb     88ff <cont>
    8979:	66 8b 26             	mov    (%esi),%sp
    897c:	6e                   	outsb  %ds:(%esi),(%dx)
    897d:	86 07                	xchg   %al,(%edi)
    897f:	0f a9                	pop    %gs
    8981:	1f                   	pop    %ds
    8982:	61                   	popa   
    8983:	fb                   	sti    
    8984:	c9                   	leave  
    8985:	cf                   	iret   

00008986 <_SetINT35h>:
    8986:	60                   	pusha  
    8987:	1e                   	push   %ds
    8988:	0f a8                	push   %gs
    898a:	06                   	push   %es
    898b:	8c c8                	mov    %cs,%eax
    898d:	8e c0                	mov    %eax,%es
    898f:	8e d8                	mov    %eax,%ds
    8991:	8c 16                	mov    %ss,(%esi)
    8993:	72 86                	jb     891b <_SetINT33h+0x1>
    8995:	8e d0                	mov    %eax,%ss
    8997:	66 89 26             	mov    %sp,(%esi)
    899a:	6e                   	outsb  %ds:(%esi),(%dx)
    899b:	86 66 8b             	xchg   %ah,-0x75(%esi)
    899e:	26                   	es
    899f:	6a 86                	push   $0xffffff86
    89a1:	6a 00                	push   $0x0
    89a3:	e8 e6 11 8e 16       	call   168e9b8e <_end+0x168de12a>
    89a8:	72 86                	jb     8930 <_SetINT33h+0x16>
    89aa:	66 8b 26             	mov    (%esi),%sp
    89ad:	6e                   	outsb  %ds:(%esi),(%dx)
    89ae:	86 07                	xchg   %al,(%edi)
    89b0:	0f a9                	pop    %gs
    89b2:	1f                   	pop    %ds
    89b3:	61                   	popa   
    89b4:	fb                   	sti    
    89b5:	cf                   	iret   

000089b6 <_SetINT36h>:
    89b6:	60                   	pusha  
    89b7:	1e                   	push   %ds
    89b8:	0f a8                	push   %gs
    89ba:	06                   	push   %es
    89bb:	8c c8                	mov    %cs,%eax
    89bd:	8e c0                	mov    %eax,%es
    89bf:	8e d8                	mov    %eax,%ds
    89c1:	8c 16                	mov    %ss,(%esi)
    89c3:	72 86                	jb     894b <_SetINT33h+0x31>
    89c5:	8e d0                	mov    %eax,%ss
    89c7:	66 89 26             	mov    %sp,(%esi)
    89ca:	6e                   	outsb  %ds:(%esi),(%dx)
    89cb:	86 66 8b             	xchg   %ah,-0x75(%esi)
    89ce:	26                   	es
    89cf:	6a 86                	push   $0xffffff86
    89d1:	6a 00                	push   $0x0
    89d3:	e8 3c 12 8e 16       	call   168e9c14 <_end+0x168de1b0>
    89d8:	72 86                	jb     8960 <_SetINT34h+0x10>
    89da:	66 8b 26             	mov    (%esi),%sp
    89dd:	6e                   	outsb  %ds:(%esi),(%dx)
    89de:	86 07                	xchg   %al,(%edi)
    89e0:	0f a9                	pop    %gs
    89e2:	1f                   	pop    %ds
    89e3:	61                   	popa   
    89e4:	fb                   	sti    
    89e5:	cf                   	iret   

000089e6 <_SetINT21h>:
    89e6:	c8 00 00 00          	enter  $0x0,$0x0
    89ea:	60                   	pusha  
    89eb:	1e                   	push   %ds
    89ec:	0f a8                	push   %gs
    89ee:	06                   	push   %es
    89ef:	8c c8                	mov    %cs,%eax
    89f1:	8e c0                	mov    %eax,%es
    89f3:	8e d8                	mov    %eax,%ds
    89f5:	8b 46 08             	mov    0x8(%esi),%eax
    89f8:	80 fc 00             	cmp    $0x0,%ah
    89fb:	74 16                	je     8a13 <fn0>
    89fd:	80 fc 01             	cmp    $0x1,%ah
    8a00:	74 21                	je     8a23 <fn1>
    8a02:	80 fc 02             	cmp    $0x2,%ah
    8a05:	74 3d                	je     8a44 <fn2>
    8a07:	80 fc 03             	cmp    $0x3,%ah
    8a0a:	74 5f                	je     8a6b <fn3>
    8a0c:	07                   	pop    %es
    8a0d:	0f a9                	pop    %gs
    8a0f:	1f                   	pop    %ds
    8a10:	61                   	popa   
    8a11:	c9                   	leave  
    8a12:	cf                   	iret   

00008a13 <fn0>:
    8a13:	8b 46 0a             	mov    0xa(%esi),%eax
    8a16:	b4 0e                	mov    $0xe,%ah
    8a18:	b3 00                	mov    $0x0,%bl
    8a1a:	cd 10                	int    $0x10
    8a1c:	07                   	pop    %es
    8a1d:	0f a9                	pop    %gs
    8a1f:	1f                   	pop    %ds
    8a20:	61                   	popa   
    8a21:	c9                   	leave  
    8a22:	cf                   	iret   

00008a23 <fn1>:
    8a23:	66 83 ec 04          	sub    $0x4,%sp
    8a27:	b4 00                	mov    $0x0,%ah
    8a29:	cd 16                	int    $0x16
    8a2b:	b4 00                	mov    $0x0,%ah
    8a2d:	66 67 89 04          	mov    %ax,(%si)
    8a31:	24 66                	and    $0x66,%al
    8a33:	67 8b 04             	mov    (%si),%eax
    8a36:	24 66                	and    $0x66,%al
    8a38:	83 c4 04             	add    $0x4,%esp
    8a3b:	8e e0                	mov    %eax,%fs
    8a3d:	07                   	pop    %es
    8a3e:	0f a9                	pop    %gs
    8a40:	1f                   	pop    %ds
    8a41:	61                   	popa   
    8a42:	c9                   	leave  
    8a43:	cf                   	iret   

00008a44 <fn2>:
    8a44:	66 83 ec 04          	sub    $0x4,%sp
    8a48:	b4 00                	mov    $0x0,%ah
    8a4a:	cd 16                	int    $0x16
    8a4c:	b4 00                	mov    $0x0,%ah
    8a4e:	66 67 89 04          	mov    %ax,(%si)
    8a52:	24 66                	and    $0x66,%al
    8a54:	67 8b 04             	mov    (%si),%eax
    8a57:	24 b4                	and    $0xb4,%al
    8a59:	0e                   	push   %cs
    8a5a:	b3 00                	mov    $0x0,%bl
    8a5c:	cd 10                	int    $0x10
    8a5e:	66 83 c4 04          	add    $0x4,%sp
    8a62:	8e e0                	mov    %eax,%fs
    8a64:	07                   	pop    %es
    8a65:	0f a9                	pop    %gs
    8a67:	1f                   	pop    %ds
    8a68:	61                   	popa   
    8a69:	c9                   	leave  
    8a6a:	cf                   	iret   

00008a6b <fn3>:
    8a6b:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    8a70:	07                   	pop    %es
    8a71:	0f a9                	pop    %gs
    8a73:	1f                   	pop    %ds
    8a74:	61                   	popa   
    8a75:	c9                   	leave  
    8a76:	cf                   	iret   

00008a77 <_SetINT37h>:
    8a77:	fa                   	cli    
    8a78:	e8 47 03 cf fa       	call   facf8dc4 <_end+0xfaced360>

00008a7c <_SetINT38h>:
    8a7c:	fa                   	cli    
    8a7d:	50                   	push   %eax
    8a7e:	1e                   	push   %ds
    8a7f:	8c c8                	mov    %cs,%eax
    8a81:	8e d8                	mov    %eax,%ds
    8a83:	6a 00                	push   $0x0
    8a85:	e8 17 f7 1f 58       	call   582081a1 <_end+0x581fc73d>
    8a8a:	cf                   	iret   

00008a8b <_SetINT39h>:
    8a8b:	fa                   	cli    
    8a8c:	c8 00 00 00          	enter  $0x0,$0x0
    8a90:	1e                   	push   %ds
    8a91:	6a 00                	push   $0x0
    8a93:	8c c8                	mov    %cs,%eax
    8a95:	8e d8                	mov    %eax,%ds
    8a97:	e8 63 f7 1f c9       	call   c92081ff <_end+0xc91fc79b>
    8a9c:	cf                   	iret   

00008a9d <_SetINT41h>:
    8a9d:	fa                   	cli    
    8a9e:	e8 59 02 e8 ca       	call   cae88cfc <_end+0xcae7d298>
    8aa3:	02 b0 20 e6 20 e6    	add    -0x19df19e0(%eax),%dh
    8aa9:	a0 fb cf fa c8       	mov    0xc8facffb,%al

00008aac <_SetINT43h>:
    8aac:	fa                   	cli    
    8aad:	c8 00 00 00          	enter  $0x0,$0x0
    8ab1:	1e                   	push   %ds
    8ab2:	50                   	push   %eax
    8ab3:	6a 00                	push   $0x0
    8ab5:	8c c8                	mov    %cs,%eax
    8ab7:	8e d8                	mov    %eax,%ds
    8ab9:	e8 25 f7 58 1f       	call   1f5981e3 <_end+0x1f58c77f>
    8abe:	c9                   	leave  
    8abf:	cf                   	iret   

00008ac0 <_initialInt>:
    8ac0:	c8 00 00 00          	enter  $0x0,$0x0
    8ac4:	60                   	pusha  
    8ac5:	06                   	push   %es
    8ac6:	1e                   	push   %ds
    8ac7:	8c c8                	mov    %cs,%eax
    8ac9:	8e d8                	mov    %eax,%ds
    8acb:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8ad0:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
    8ad5:	00 f7                	add    %dh,%bh
    8ad7:	e3 89                	jecxz  8a62 <fn2+0x1e>
    8ad9:	c7                   	(bad)  
    8ada:	b8 cb 87 26 89       	mov    $0x892687cb,%eax
    8adf:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8ae4:	45                   	inc    %ebp
    8ae5:	02 1f                	add    (%edi),%bl
    8ae7:	07                   	pop    %es
    8ae8:	61                   	popa   
    8ae9:	60                   	pusha  
    8aea:	06                   	push   %es
    8aeb:	1e                   	push   %ds
    8aec:	8c c8                	mov    %cs,%eax
    8aee:	8e d8                	mov    %eax,%ds
    8af0:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8af5:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
    8afa:	00 f7                	add    %dh,%bh
    8afc:	e3 89                	jecxz  8a87 <_SetINT38h+0xb>
    8afe:	c7                   	(bad)  
    8aff:	b8 1a 89 26 89       	mov    $0x8926891a,%eax
    8b04:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b09:	45                   	inc    %ebp
    8b0a:	02 1f                	add    (%edi),%bl
    8b0c:	07                   	pop    %es
    8b0d:	61                   	popa   
    8b0e:	60                   	pusha  
    8b0f:	06                   	push   %es
    8b10:	1e                   	push   %ds
    8b11:	8c c8                	mov    %cs,%eax
    8b13:	8e d8                	mov    %eax,%ds
    8b15:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b1a:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
    8b1f:	00 f7                	add    %dh,%bh
    8b21:	e3 89                	jecxz  8aac <_SetINT43h>
    8b23:	c7                   	(bad)  
    8b24:	b8 50 89 26 89       	mov    $0x89268950,%eax
    8b29:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b2e:	45                   	inc    %ebp
    8b2f:	02 1f                	add    (%edi),%bl
    8b31:	07                   	pop    %es
    8b32:	61                   	popa   
    8b33:	60                   	pusha  
    8b34:	06                   	push   %es
    8b35:	1e                   	push   %ds
    8b36:	8c c8                	mov    %cs,%eax
    8b38:	8e d8                	mov    %eax,%ds
    8b3a:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b3f:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
    8b44:	00 f7                	add    %dh,%bh
    8b46:	e3 89                	jecxz  8ad1 <_initialInt+0x11>
    8b48:	c7                   	(bad)  
    8b49:	b8 86 89 26 89       	mov    $0x89268986,%eax
    8b4e:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b53:	45                   	inc    %ebp
    8b54:	02 1f                	add    (%edi),%bl
    8b56:	07                   	pop    %es
    8b57:	61                   	popa   
    8b58:	60                   	pusha  
    8b59:	06                   	push   %es
    8b5a:	1e                   	push   %ds
    8b5b:	8c c8                	mov    %cs,%eax
    8b5d:	8e d8                	mov    %eax,%ds
    8b5f:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b64:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
    8b69:	00 f7                	add    %dh,%bh
    8b6b:	e3 89                	jecxz  8af6 <_initialInt+0x36>
    8b6d:	c7                   	(bad)  
    8b6e:	b8 b6 89 26 89       	mov    $0x892689b6,%eax
    8b73:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b78:	45                   	inc    %ebp
    8b79:	02 1f                	add    (%edi),%bl
    8b7b:	07                   	pop    %es
    8b7c:	61                   	popa   
    8b7d:	60                   	pusha  
    8b7e:	06                   	push   %es
    8b7f:	1e                   	push   %ds
    8b80:	8c c8                	mov    %cs,%eax
    8b82:	8e d8                	mov    %eax,%ds
    8b84:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b89:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
    8b8e:	00 f7                	add    %dh,%bh
    8b90:	e3 89                	jecxz  8b1b <_initialInt+0x5b>
    8b92:	c7                   	(bad)  
    8b93:	b8 e6 89 26 89       	mov    $0x892689e6,%eax
    8b98:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b9d:	45                   	inc    %ebp
    8b9e:	02 1f                	add    (%edi),%bl
    8ba0:	07                   	pop    %es
    8ba1:	61                   	popa   
    8ba2:	60                   	pusha  
    8ba3:	06                   	push   %es
    8ba4:	1e                   	push   %ds
    8ba5:	8c c8                	mov    %cs,%eax
    8ba7:	8e d8                	mov    %eax,%ds
    8ba9:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8bae:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
    8bb3:	00 f7                	add    %dh,%bh
    8bb5:	e3 89                	jecxz  8b40 <_initialInt+0x80>
    8bb7:	c7                   	(bad)  
    8bb8:	b8 77 8a 26 89       	mov    $0x89268a77,%eax
    8bbd:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8bc2:	45                   	inc    %ebp
    8bc3:	02 1f                	add    (%edi),%bl
    8bc5:	07                   	pop    %es
    8bc6:	61                   	popa   
    8bc7:	60                   	pusha  
    8bc8:	06                   	push   %es
    8bc9:	1e                   	push   %ds
    8bca:	8c c8                	mov    %cs,%eax
    8bcc:	8e d8                	mov    %eax,%ds
    8bce:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8bd3:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
    8bd8:	00 f7                	add    %dh,%bh
    8bda:	e3 89                	jecxz  8b65 <_initialInt+0xa5>
    8bdc:	c7                   	(bad)  
    8bdd:	b8 7c 8a 26 89       	mov    $0x89268a7c,%eax
    8be2:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8be7:	45                   	inc    %ebp
    8be8:	02 1f                	add    (%edi),%bl
    8bea:	07                   	pop    %es
    8beb:	61                   	popa   
    8bec:	60                   	pusha  
    8bed:	06                   	push   %es
    8bee:	1e                   	push   %ds
    8bef:	8c c8                	mov    %cs,%eax
    8bf1:	8e d8                	mov    %eax,%ds
    8bf3:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8bf8:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
    8bfd:	00 f7                	add    %dh,%bh
    8bff:	e3 89                	jecxz  8b8a <_initialInt+0xca>
    8c01:	c7                   	(bad)  
    8c02:	b8 8b 8a 26 89       	mov    $0x89268a8b,%eax
    8c07:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c0c:	45                   	inc    %ebp
    8c0d:	02 1f                	add    (%edi),%bl
    8c0f:	07                   	pop    %es
    8c10:	61                   	popa   
    8c11:	60                   	pusha  
    8c12:	06                   	push   %es
    8c13:	1e                   	push   %ds
    8c14:	8c c8                	mov    %cs,%eax
    8c16:	8e d8                	mov    %eax,%ds
    8c18:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8c1d:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
    8c22:	00 f7                	add    %dh,%bh
    8c24:	e3 89                	jecxz  8baf <_initialInt+0xef>
    8c26:	c7                   	(bad)  
    8c27:	b8 9d 8a 26 89       	mov    $0x89268a9d,%eax
    8c2c:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c31:	45                   	inc    %ebp
    8c32:	02 1f                	add    (%edi),%bl
    8c34:	07                   	pop    %es
    8c35:	61                   	popa   
    8c36:	60                   	pusha  
    8c37:	06                   	push   %es
    8c38:	1e                   	push   %ds
    8c39:	8c c8                	mov    %cs,%eax
    8c3b:	8e d8                	mov    %eax,%ds
    8c3d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8c42:	b8 42 00 bb 04       	mov    $0x4bb0042,%eax
    8c47:	00 f7                	add    %dh,%bh
    8c49:	e3 89                	jecxz  8bd4 <_initialInt+0x114>
    8c4b:	c7                   	(bad)  
    8c4c:	b8 07 88 26 89       	mov    $0x89268807,%eax
    8c51:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c56:	45                   	inc    %ebp
    8c57:	02 1f                	add    (%edi),%bl
    8c59:	07                   	pop    %es
    8c5a:	61                   	popa   
    8c5b:	60                   	pusha  
    8c5c:	06                   	push   %es
    8c5d:	1e                   	push   %ds
    8c5e:	8c c8                	mov    %cs,%eax
    8c60:	8e d8                	mov    %eax,%ds
    8c62:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8c67:	b8 43 00 bb 04       	mov    $0x4bb0043,%eax
    8c6c:	00 f7                	add    %dh,%bh
    8c6e:	e3 89                	jecxz  8bf9 <_initialInt+0x139>
    8c70:	c7                   	(bad)  
    8c71:	b8 ac 8a 26 89       	mov    $0x89268aac,%eax
    8c76:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c7b:	45                   	inc    %ebp
    8c7c:	02 1f                	add    (%edi),%bl
    8c7e:	07                   	pop    %es
    8c7f:	61                   	popa   
    8c80:	c9                   	leave  
    8c81:	66 5a                	pop    %dx
    8c83:	ff e2                	jmp    *%edx

00008c85 <_initialInt_09h>:
    8c85:	c8 00 00 00          	enter  $0x0,$0x0
    8c89:	a1 24 00 a3 52       	mov    0x52a30024,%eax
    8c8e:	86 a1 26 00 a3 54    	xchg   %ah,0x54a30026(%ecx)
    8c94:	86 60 06             	xchg   %ah,0x6(%eax)
    8c97:	1e                   	push   %ds
    8c98:	8c c8                	mov    %cs,%eax
    8c9a:	8e d8                	mov    %eax,%ds
    8c9c:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8ca1:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
    8ca6:	00 f7                	add    %dh,%bh
    8ca8:	e3 89                	jecxz  8c33 <_initialInt+0x173>
    8caa:	c7                   	(bad)  
    8cab:	b8 8c 88 26 89       	mov    $0x8926888c,%eax
    8cb0:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8cb5:	45                   	inc    %ebp
    8cb6:	02 1f                	add    (%edi),%bl
    8cb8:	07                   	pop    %es
    8cb9:	61                   	popa   
    8cba:	c9                   	leave  
    8cbb:	66 5a                	pop    %dx
    8cbd:	ff e2                	jmp    *%edx

00008cbf <_initialInt_08h>:
    8cbf:	c8 00 00 00          	enter  $0x0,$0x0
    8cc3:	b0 40                	mov    $0x40,%al
    8cc5:	e6 43                	out    %al,$0x43
    8cc7:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
    8ccc:	88 e0                	mov    %ah,%al
    8cce:	e6 40                	out    %al,$0x40
    8cd0:	60                   	pusha  
    8cd1:	06                   	push   %es
    8cd2:	1e                   	push   %ds
    8cd3:	8c c8                	mov    %cs,%eax
    8cd5:	8e d8                	mov    %eax,%ds
    8cd7:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8cdc:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
    8ce1:	00 f7                	add    %dh,%bh
    8ce3:	e3 89                	jecxz  8c6e <_initialInt+0x1ae>
    8ce5:	c7                   	(bad)  
    8ce6:	b8 07 88 26 89       	mov    $0x89268807,%eax
    8ceb:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8cf0:	45                   	inc    %ebp
    8cf1:	02 1f                	add    (%edi),%bl
    8cf3:	07                   	pop    %es
    8cf4:	61                   	popa   
    8cf5:	c9                   	leave  
    8cf6:	66 5a                	pop    %dx
    8cf8:	ff e2                	jmp    *%edx

00008cfa <_save>:
    8cfa:	66 89 26             	mov    %sp,(%esi)
    8cfd:	6a 86                	push   $0xffffff86
    8cff:	1e                   	push   %ds
    8d00:	0e                   	push   %cs
    8d01:	1f                   	pop    %ds
    8d02:	8f 06                	popl   (%esi)
    8d04:	5a                   	pop    %edx
    8d05:	86 8f 06 5e 86 66    	xchg   %cl,0x66865e06(%edi)
    8d0b:	89 26                	mov    %esp,(%esi)
    8d0d:	66                   	data16
    8d0e:	86 66 89             	xchg   %ah,-0x77(%esi)
    8d11:	36                   	ss
    8d12:	60                   	pusha  
    8d13:	86 66 8b             	xchg   %ah,-0x75(%esi)
    8d16:	36                   	ss
    8d17:	60                   	pusha  
    8d18:	ba 66 83 c6 2c       	mov    $0x2cc68366,%edx
    8d1d:	67 8f 06 67 8f       	popl   -0x7099
    8d22:	46                   	inc    %esi
    8d23:	04 67                	add    $0x67,%al
    8d25:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
    8d2c:	46                   	inc    %esi
    8d2d:	08 67 c7             	or     %ah,-0x39(%edi)
    8d30:	46                   	inc    %esi
    8d31:	0a 00                	or     (%eax),%al
    8d33:	00 66 67             	add    %ah,0x67(%esi)
    8d36:	89 66 fc             	mov    %esp,-0x4(%esi)
    8d39:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
    8d3d:	8c de                	mov    %ds,%esi
    8d3f:	8e d6                	mov    %esi,%ss
    8d41:	66 8b 26             	mov    (%esi),%sp
    8d44:	60                   	pusha  
    8d45:	ba 66 83 c4 24       	mov    $0x24c48366,%edx
    8d4a:	6a 00                	push   $0x0
    8d4c:	ff 36                	pushl  (%esi)
    8d4e:	5a                   	pop    %edx
    8d4f:	86 6a 00             	xchg   %ch,0x0(%edx)
    8d52:	06                   	push   %es
    8d53:	66 55                	push   %bp
    8d55:	66 57                	push   %di
    8d57:	66 ff 36             	pushw  (%esi)
    8d5a:	60                   	pusha  
    8d5b:	86 66 52             	xchg   %ah,0x52(%esi)
    8d5e:	66 51                	push   %cx
    8d60:	66 53                	push   %bx
    8d62:	66 50                	push   %ax
    8d64:	66 8b 26             	mov    (%esi),%sp
    8d67:	66                   	data16
    8d68:	86 a1 5e 86 ff e0    	xchg   %ah,-0x1f0079a2(%ecx)

00008d6e <_restart>:
    8d6e:	66 89 26             	mov    %sp,(%esi)
    8d71:	66                   	data16
    8d72:	86 66 8b             	xchg   %ah,-0x75(%esi)
    8d75:	26                   	es
    8d76:	60                   	pusha  
    8d77:	ba 66 58 66 5b       	mov    $0x5b665866,%edx
    8d7c:	66 59                	pop    %cx
    8d7e:	66 5a                	pop    %dx
    8d80:	66 5e                	pop    %si
    8d82:	66 5f                	pop    %di
    8d84:	66 5d                	pop    %bp
    8d86:	07                   	pop    %es
    8d87:	8f 06                	popl   (%esi)
    8d89:	64 86 8f 06 5a 86 8f 	xchg   %cl,%fs:-0x7079a5fa(%edi)
    8d90:	06                   	push   %es
    8d91:	64 86 66 89          	xchg   %ah,%fs:-0x77(%esi)
    8d95:	36                   	ss
    8d96:	60                   	pusha  
    8d97:	86 17                	xchg   %dl,(%edi)
    8d99:	8f 06                	popl   (%esi)
    8d9b:	64 86 66 89          	xchg   %ah,%fs:-0x77(%esi)
    8d9f:	e6 66                	out    %al,$0x66
    8da1:	67 8b 26 67 ff       	mov    -0x99,%esp
    8da6:	76 0c                	jbe    8db4 <_restart+0x46>
    8da8:	67 ff 76 08          	pushl  0x8(%bp)
    8dac:	67 ff 76 04          	pushl  0x4(%bp)
    8db0:	66 8b 36             	mov    (%esi),%si
    8db3:	60                   	pusha  
    8db4:	86 8e 1e 5a 86 50    	xchg   %cl,0x50865a1e(%esi)
    8dba:	b0 20                	mov    $0x20,%al
    8dbc:	e6 20                	out    %al,$0x20
    8dbe:	e6 a0                	out    %al,$0xa0
    8dc0:	58                   	pop    %eax
    8dc1:	cf                   	iret   

00008dc2 <RTC_Timer>:
    8dc2:	c8 00 00 00          	enter  $0x0,$0x0
    8dc6:	1e                   	push   %ds
    8dc7:	06                   	push   %es
    8dc8:	60                   	pusha  
    8dc9:	8c c8                	mov    %cs,%eax
    8dcb:	8e d8                	mov    %eax,%ds
    8dcd:	8c c8                	mov    %cs,%eax
    8dcf:	8e c0                	mov    %eax,%es
    8dd1:	bf 20 b8 b4 02       	mov    $0x2b4b820,%edi
    8dd6:	cd 1a                	int    $0x1a
    8dd8:	88 e8                	mov    %ch,%al
    8dda:	b4 00                	mov    $0x0,%ah
    8ddc:	b3 10                	mov    $0x10,%bl
    8dde:	f6 f3                	div    %bl
    8de0:	04 30                	add    $0x30,%al
    8de2:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
    8de8:	88 e8                	mov    %ch,%al
    8dea:	24 0f                	and    $0xf,%al
    8dec:	04 30                	add    $0x30,%al
    8dee:	88 45 01             	mov    %al,0x1(%ebp)
    8df1:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
    8df5:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
    8df9:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
    8dfd:	b4 02                	mov    $0x2,%ah
    8dff:	cd 1a                	int    $0x1a
    8e01:	88 c8                	mov    %cl,%al
    8e03:	b4 00                	mov    $0x0,%ah
    8e05:	b3 10                	mov    $0x10,%bl
    8e07:	f6 f3                	div    %bl
    8e09:	04 30                	add    $0x30,%al
    8e0b:	88 45 05             	mov    %al,0x5(%ebp)
    8e0e:	b4 02                	mov    $0x2,%ah
    8e10:	cd 1a                	int    $0x1a
    8e12:	88 c8                	mov    %cl,%al
    8e14:	24 0f                	and    $0xf,%al
    8e16:	04 30                	add    $0x30,%al
    8e18:	88 45 06             	mov    %al,0x6(%ebp)
    8e1b:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
    8e1f:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
    8e23:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
    8e27:	8c c8                	mov    %cs,%eax
    8e29:	8e d8                	mov    %eax,%ds
    8e2b:	8e c0                	mov    %eax,%es
    8e2d:	bd 7f 86 8c d8       	mov    $0xd88c867f,%ebp
    8e32:	8e c0                	mov    %eax,%es
    8e34:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
    8e39:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
    8e3f:	b2 0a                	mov    $0xa,%dl
    8e41:	cd 10                	int    $0x10
    8e43:	8c c8                	mov    %cs,%eax
    8e45:	8e d8                	mov    %eax,%ds
    8e47:	8e c0                	mov    %eax,%es
    8e49:	bd 20 b8 8c d8       	mov    $0xd88cb820,%ebp
    8e4e:	8e c0                	mov    %eax,%es
    8e50:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
    8e55:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
    8e5b:	b2 1e                	mov    $0x1e,%dl
    8e5d:	cd 10                	int    $0x10
    8e5f:	61                   	popa   
    8e60:	07                   	pop    %es
    8e61:	1f                   	pop    %ds
    8e62:	c9                   	leave  
    8e63:	66 5a                	pop    %dx
    8e65:	ff e2                	jmp    *%edx

00008e67 <_Get_Hours_1>:
    8e67:	c8 04 00 00          	enter  $0x4,$0x0
    8e6b:	b4 02                	mov    $0x2,%ah
    8e6d:	cd 1a                	int    $0x1a
    8e6f:	88 e8                	mov    %ch,%al
    8e71:	b4 00                	mov    $0x0,%ah
    8e73:	b3 10                	mov    $0x10,%bl
    8e75:	f6 f3                	div    %bl
    8e77:	30 e4                	xor    %ah,%ah
    8e79:	66 67 89 04          	mov    %ax,(%si)
    8e7d:	24 66                	and    $0x66,%al
    8e7f:	67 8b 04             	mov    (%si),%eax
    8e82:	24 c9                	and    $0xc9,%al
    8e84:	66 5a                	pop    %dx
    8e86:	ff e2                	jmp    *%edx

00008e88 <_Get_Hours_2>:
    8e88:	c8 04 00 00          	enter  $0x4,$0x0
    8e8c:	b4 02                	mov    $0x2,%ah
    8e8e:	cd 1a                	int    $0x1a
    8e90:	88 e8                	mov    %ch,%al
    8e92:	24 0f                	and    $0xf,%al
    8e94:	30 e4                	xor    %ah,%ah
    8e96:	66 67 89 04          	mov    %ax,(%si)
    8e9a:	24 66                	and    $0x66,%al
    8e9c:	67 8b 04             	mov    (%si),%eax
    8e9f:	24 c9                	and    $0xc9,%al
    8ea1:	66 5a                	pop    %dx
    8ea3:	ff e2                	jmp    *%edx

00008ea5 <_Get_Minutes_1>:
    8ea5:	c8 04 00 00          	enter  $0x4,$0x0
    8ea9:	b4 02                	mov    $0x2,%ah
    8eab:	cd 1a                	int    $0x1a
    8ead:	88 c8                	mov    %cl,%al
    8eaf:	b4 00                	mov    $0x0,%ah
    8eb1:	b3 10                	mov    $0x10,%bl
    8eb3:	f6 f3                	div    %bl
    8eb5:	30 e4                	xor    %ah,%ah
    8eb7:	66 67 89 04          	mov    %ax,(%si)
    8ebb:	24 66                	and    $0x66,%al
    8ebd:	67 8b 04             	mov    (%si),%eax
    8ec0:	24 c9                	and    $0xc9,%al
    8ec2:	66 5a                	pop    %dx
    8ec4:	ff e2                	jmp    *%edx

00008ec6 <_Get_Minutes_2>:
    8ec6:	c8 04 00 00          	enter  $0x4,$0x0
    8eca:	b4 02                	mov    $0x2,%ah
    8ecc:	cd 1a                	int    $0x1a
    8ece:	88 c8                	mov    %cl,%al
    8ed0:	24 0f                	and    $0xf,%al
    8ed2:	30 e4                	xor    %ah,%ah
    8ed4:	66 67 89 04          	mov    %ax,(%si)
    8ed8:	24 66                	and    $0x66,%al
    8eda:	67 8b 04             	mov    (%si),%eax
    8edd:	24 c9                	and    $0xc9,%al
    8edf:	66 5a                	pop    %dx
    8ee1:	ff e2                	jmp    *%edx

00008ee3 <terminal>:
#include "../syscall/use.h"
#include "command.h"
#include "../syscall/stdio.h"
#include "../syscall/time.h"
void run(int queue[],int size);
int terminal(){
    8ee3:	66 55                	push   %bp
    8ee5:	66 89 e5             	mov    %sp,%bp
    8ee8:	66 57                	push   %di
    8eea:	66 56                	push   %si
    8eec:	66 53                	push   %bx
    8eee:	66 83 ec 60          	sub    $0x60,%sp
    8ef2:	66 89 e0             	mov    %sp,%ax
    8ef5:	66 89 c6             	mov    %ax,%si
    char const *CMDHead = "hongyangchendeMacBook-Air:chenhyOS users$ ";
    8ef8:	67 66 c7 45 e4 70 9e 	movw   $0x9e70,-0x1c(%di)
    8eff:	00 00                	add    %al,(%eax)
    char const *controlMsg1 = "The queue is full,waiting for the Enter Key.";
    8f01:	67 66 c7 45 e0 9c 9e 	movw   $0x9e9c,-0x20(%di)
    8f08:	00 00                	add    %al,(%eax)
    char const *controlMsg2 = "The queue is empty!";
    8f0a:	67 66 c7 45 dc c9 9e 	movw   $0x9ec9,-0x24(%di)
    8f11:	00 00                	add    %al,(%eax)
    char const *ByeByeMsg = "ByeBye";
    8f13:	67 66 c7 45 d8 dd 9e 	movw   $0x9edd,-0x28(%di)
    8f1a:	00 00                	add    %al,(%eax)
    char const *filelist = "Program1 upleft   Program2 upright  \r\nProgram3 downleft  Program4 downright";
    8f1c:	67 66 c7 45 d4 e4 9e 	movw   $0x9ee4,-0x2c(%di)
    8f23:	00 00                	add    %al,(%eax)
    char const *HelpMsg1 = "Enter 1,2,3,4 to run the program\n\rEnter quit,to quit\n\rEnter help to print this script again";
    8f25:	67 66 c7 45 d0 30 9f 	movw   $0x9f30,-0x30(%di)
    8f2c:	00 00                	add    %al,(%eax)
    char const *help = "help";
    8f2e:	67 66 c7 45 cc 8c 9f 	movw   $0x9f8c,-0x34(%di)
    8f35:	00 00                	add    %al,(%eax)
    char const *quit = "quit";
    8f37:	67 66 c7 45 c8 91 9f 	movw   $0x9f91,-0x38(%di)
    8f3e:	00 00                	add    %al,(%eax)
    char const *lst = "ls";
    8f40:	67 66 c7 45 c4 96 9f 	movw   $0x9f96,-0x3c(%di)
    8f47:	00 00                	add    %al,(%eax)
    int Maxsize = 10;
    8f49:	67 66 c7 45 c0 0a 00 	movw   $0xa,-0x40(%di)
    8f50:	00 00                	add    %al,(%eax)
    print_next_line(HelpMsg1);
    8f52:	67 66 ff 75 d0       	pushw  -0x30(%di)
    8f57:	66 e8 9c 06          	callw  95f7 <printsint+0xf6>
    8f5b:	00 00                	add    %al,(%eax)
    8f5d:	66 83 c4 04          	add    $0x4,%sp
    
            // _RunProgress(0xC000);
   prints(CMDHead);
    8f61:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    8f66:	66 e8 1a 05          	callw  9484 <print+0x8f>
    8f6a:	00 00                	add    %al,(%eax)
    8f6c:	66 83 c4 04          	add    $0x4,%sp
    char recived[10] = {};
    8f70:	67 66 8d 5d 96       	lea    -0x6a(%di),%bx
    8f75:	66 ba 0a 00          	mov    $0xa,%dx
    8f79:	00 00                	add    %al,(%eax)
    8f7b:	b0 00                	mov    $0x0,%al
    8f7d:	66 89 df             	mov    %bx,%di
    8f80:	66 89 d1             	mov    %dx,%cx
    8f83:	f3 aa                	rep stos %al,%es:(%edi)
    recived[0] = 0;
    8f85:	67 c6 45 96 00       	movb   $0x0,-0x6a(%di)
    int index_of_str = 0;
    8f8a:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8f91:	00 00                	add    %al,(%eax)
    int i = 1;
    8f93:	67 66 c7 45 bc 01 00 	movw   $0x1,-0x44(%di)
    8f9a:	00 00                	add    %al,(%eax)
    int queue[Maxsize];
    8f9c:	67 66 8b 45 c0       	mov    -0x40(%di),%ax
    8fa1:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    8fa6:	67 66 89 55 b8       	mov    %dx,-0x48(%di)
    8fab:	66 c1 e0 02          	shl    $0x2,%ax
    8faf:	67 66 8d 50 03       	lea    0x3(%bx,%si),%dx
    8fb4:	66 b8 04 00          	mov    $0x4,%ax
    8fb8:	00 00                	add    %al,(%eax)
    8fba:	66 48                	dec    %ax
    8fbc:	66 01 d0             	add    %dx,%ax
    8fbf:	66 bb 04 00          	mov    $0x4,%bx
    8fc3:	00 00                	add    %al,(%eax)
    8fc5:	66 ba 00 00          	mov    $0x0,%dx
    8fc9:	00 00                	add    %al,(%eax)
    8fcb:	66 f7 f3             	div    %bx
    8fce:	66 6b c0 04          	imul   $0x4,%ax,%ax
    8fd2:	66 29 c4             	sub    %ax,%sp
    8fd5:	66 89 e0             	mov    %sp,%ax
    8fd8:	66 83 c0 03          	add    $0x3,%ax
    8fdc:	66 c1 e8 02          	shr    $0x2,%ax
    8fe0:	66 c1 e0 02          	shl    $0x2,%ax
    8fe4:	67 66 89 45 b4       	mov    %ax,-0x4c(%di)
    int num_of_queue = 0;
    8fe9:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    8ff0:	00 00                	add    %al,(%eax)
    int number = 0;
    8ff2:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    8ff9:	00 00                	add    %al,(%eax)
    int k = 0;
    8ffb:	67 66 c7 45 b0 00 00 	movw   $0x0,-0x50(%di)
    9002:	00 00                	add    %al,(%eax)
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    9004:	e9 6e 03 66 e8       	jmp    e8669377 <_end+0xe865d913>
        char save = getch();
    9009:	95                   	xchg   %eax,%ebp
    900a:	06                   	push   %es
    900b:	00 00                	add    %al,(%eax)
    900d:	67 88 45 af          	mov    %al,-0x51(%di)
        if(save == 32){//空格
    9011:	67 80 7d af 20       	cmpb   $0x20,-0x51(%di)
    9016:	75 74                	jne    908c <terminal+0x1a9>
            if(num_of_queue == Maxsize){
    9018:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    901d:	67 66 3b 45 c0       	cmp    -0x40(%di),%ax
    9022:	75 31                	jne    9055 <terminal+0x172>
                prints("\n\r");
    9024:	66 68 99 9f          	pushw  $0x9f99
    9028:	00 00                	add    %al,(%eax)
    902a:	66 e8 56 04          	callw  9484 <print+0x8f>
    902e:	00 00                	add    %al,(%eax)
    9030:	66 83 c4 04          	add    $0x4,%sp
                print_next_line(controlMsg1);
    9034:	67 66 ff 75 e0       	pushw  -0x20(%di)
    9039:	66 e8 ba 05          	callw  95f7 <printsint+0xf6>
    903d:	00 00                	add    %al,(%eax)
    903f:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    9043:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    9048:	66 e8 38 04          	callw  9484 <print+0x8f>
    904c:	00 00                	add    %al,(%eax)
    904e:	66 83 c4 04          	add    $0x4,%sp
                continue;
    9052:	e9 20 03 67 66       	jmp    66679377 <_end+0x6666d913>
            }
            printc(save);
    9057:	0f be 45 af          	movsbl -0x51(%ebp),%eax
    905b:	66 50                	push   %ax
    905d:	66 e8 75 04          	callw  94d6 <prints+0x50>
    9061:	00 00                	add    %al,(%eax)
    9063:	66 83 c4 04          	add    $0x4,%sp
            queue[num_of_queue] = number;
    9067:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    906c:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    9071:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    9076:	67 66 89 0c          	mov    %cx,(%si)
    907a:	90                   	nop
            num_of_queue ++;
    907b:	67 66 ff 45 ec       	incw   -0x14(%di)
            number = 0;
    9080:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    9087:	00 00                	add    %al,(%eax)
            continue;
    9089:	e9 e9 02 67 80       	jmp    80679377 <_end+0x8066d913>
        }
       else  if(save == 13){//回车
    908e:	7d af                	jge    903f <terminal+0x15c>
    9090:	0d 0f 85 39 02       	or     $0x239850f,%eax
            int strcmp1 = strcmp(recived,quit);
    9095:	67 66 ff 75 c8       	pushw  -0x38(%di)
    909a:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    909f:	66 50                	push   %ax
    90a1:	66 e8 1a 07          	callw  97bf <print_different_color+0x86>
    90a5:	00 00                	add    %al,(%eax)
    90a7:	66 83 c4 08          	add    $0x8,%sp
    90ab:	67 66 89 45 a8       	mov    %ax,-0x58(%di)
            int strcmp2 = strcmp(recived,help);
    90b0:	67 66 ff 75 cc       	pushw  -0x34(%di)
    90b5:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    90ba:	66 50                	push   %ax
    90bc:	66 e8 ff 06          	callw  97bf <print_different_color+0x86>
    90c0:	00 00                	add    %al,(%eax)
    90c2:	66 83 c4 08          	add    $0x8,%sp
    90c6:	67 66 89 45 a4       	mov    %ax,-0x5c(%di)
            int strcmp3 = strcmp(recived,lst);
    90cb:	67 66 ff 75 c4       	pushw  -0x3c(%di)
    90d0:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    90d5:	66 50                	push   %ax
    90d7:	66 e8 e4 06          	callw  97bf <print_different_color+0x86>
    90db:	00 00                	add    %al,(%eax)
    90dd:	66 83 c4 08          	add    $0x8,%sp
    90e1:	67 66 89 45 a0       	mov    %ax,-0x60(%di)
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
    90e6:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    90ec:	75 22                	jne    9110 <terminal+0x22d>
    90ee:	67 66 83 7d e8 00    	cmpw   $0x0,-0x18(%di)
    90f4:	75 1a                	jne    9110 <terminal+0x22d>
    90f6:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    90fc:	74 12                	je     9110 <terminal+0x22d>
    90fe:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    9104:	74 0a                	je     9110 <terminal+0x22d>
    9106:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    910c:	0f 85 73 01 67 66    	jne    66679285 <_end+0x6666d821>
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    9112:	83 7d a8 01          	cmpl   $0x1,-0x58(%ebp)
    9116:	74 12                	je     912a <terminal+0x247>
    9118:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    911e:	74 0a                	je     912a <terminal+0x247>
    9120:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    9126:	0f 85 b9 00 66 68    	jne    686691e5 <_end+0x6865d781>
                    print_next_line("");
    912c:	9c                   	pushf  
    912d:	9f                   	lahf   
    912e:	00 00                	add    %al,(%eax)
    9130:	66 e8 c3 04          	callw  95f7 <printsint+0xf6>
    9134:	00 00                	add    %al,(%eax)
    9136:	66 83 c4 04          	add    $0x4,%sp
                    if(strcmp1 == 1){
    913a:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    9140:	75 2b                	jne    916d <terminal+0x28a>
                        print_next_line(ByeByeMsg);
    9142:	67 66 ff 75 d8       	pushw  -0x28(%di)
    9147:	66 e8 ac 04          	callw  95f7 <printsint+0xf6>
    914b:	00 00                	add    %al,(%eax)
    914d:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    9151:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9158:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    915a:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    915f:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    9164:	66 01 d0             	add    %dx,%ax
    9167:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    916b:	eb 64                	jmp    91d1 <terminal+0x2ee>
                    }                  
                   else if(strcmp2 == 1){
    916d:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    9173:	75 2b                	jne    91a0 <terminal+0x2bd>
                         print_next_line(HelpMsg1);
    9175:	67 66 ff 75 d0       	pushw  -0x30(%di)
    917a:	66 e8 79 04          	callw  95f7 <printsint+0xf6>
    917e:	00 00                	add    %al,(%eax)
    9180:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    9184:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    918b:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    918d:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    9192:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    9197:	66 01 d0             	add    %dx,%ax
    919a:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    919e:	eb 31                	jmp    91d1 <terminal+0x2ee>
                    }
                    else if(strcmp3 == 1){
    91a0:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    91a6:	75 29                	jne    91d1 <terminal+0x2ee>
                        print_next_line(filelist);
    91a8:	67 66 ff 75 d4       	pushw  -0x2c(%di)
    91ad:	66 e8 46 04          	callw  95f7 <printsint+0xf6>
    91b1:	00 00                	add    %al,(%eax)
    91b3:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    91b7:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    91be:	00 00                	add    %al,(%eax)
                      recived[index_of_str] = 0;
    91c0:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    91c5:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    91ca:	66 01 d0             	add    %dx,%ax
    91cd:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    }
                        //prints(recived);
                    prints(CMDHead);
    91d1:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    91d6:	66 e8 aa 02          	callw  9484 <print+0x8f>
    91da:	00 00                	add    %al,(%eax)
    91dc:	66 83 c4 04          	add    $0x4,%sp
                    continue;
    91e0:	e9 92 01 67 66       	jmp    66679377 <_end+0x6666d913>
                }
            
                else if(number != 0||num_of_queue != 0){
    91e5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    91e9:	75 0a                	jne    91f5 <terminal+0x312>
    91eb:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    91f1:	0f 84 8a 00 67 66    	je     66679281 <_end+0x6666d81d>
                    if(number != 0 ){
    91f7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    91fb:	74 28                	je     9225 <terminal+0x342>
                         printsint(number);
    91fd:	67 66 ff 75 e8       	pushw  -0x18(%di)
    9202:	66 e8 f9 02          	callw  94ff <printc+0x27>
    9206:	00 00                	add    %al,(%eax)
    9208:	66 83 c4 04          	add    $0x4,%sp
                        queue[num_of_queue] = number;
    920c:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    9211:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    9216:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    921b:	67 66 89 0c          	mov    %cx,(%si)
    921f:	90                   	nop
                        num_of_queue++;
    9220:	67 66 ff 45 ec       	incw   -0x14(%di)
                    }
                    run(queue,num_of_queue);
    9225:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    922a:	67 66 ff 75 ec       	pushw  -0x14(%di)
    922f:	66 50                	push   %ax
    9231:	66 e8 5a 01          	callw  938f <terminal+0x4ac>
    9235:	00 00                	add    %al,(%eax)
    9237:	66 83 c4 08          	add    $0x8,%sp
                    num_of_queue = 0;
    923b:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    9242:	00 00                	add    %al,(%eax)
                    number = 0;
    9244:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    924b:	00 00                	add    %al,(%eax)
                    clearscreen();
    924d:	66 e8 95 f3          	callw  85e6 <stack_copy+0x35>
    9251:	ff                   	(bad)  
    9252:	ff 67 66             	jmp    *0x66(%edi)
                    prints(CMDHead);
    9255:	ff 75 e4             	pushl  -0x1c(%ebp)
    9258:	66 e8 28 02          	callw  9484 <print+0x8f>
    925c:	00 00                	add    %al,(%eax)
    925e:	66 83 c4 04          	add    $0x4,%sp
                    index_of_str = 0;
    9262:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9269:	00 00                	add    %al,(%eax)
                    recived[index_of_str] = 0;
    926b:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    9270:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    9275:	66 01 d0             	add    %dx,%ax
    9278:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    continue;
    927c:	e9 f6 00 90 e9       	jmp    e9909377 <_end+0xe98fd913>
            int strcmp1 = strcmp(recived,quit);
            int strcmp2 = strcmp(recived,help);
            int strcmp3 = strcmp(recived,lst);
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    9281:	f2 00 66 68          	repnz add %ah,0x68(%esi)
                    recived[index_of_str] = 0;
                    continue;
                }
            }
            else{
                 prints("\n\r");
    9285:	99                   	cltd   
    9286:	9f                   	lahf   
    9287:	00 00                	add    %al,(%eax)
    9289:	66 e8 f7 01          	callw  9484 <print+0x8f>
    928d:	00 00                	add    %al,(%eax)
    928f:	66 83 c4 04          	add    $0x4,%sp
                print_next_line(controlMsg2);
    9293:	67 66 ff 75 dc       	pushw  -0x24(%di)
    9298:	66 e8 5b 03          	callw  95f7 <printsint+0xf6>
    929c:	00 00                	add    %al,(%eax)
    929e:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    92a2:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    92a7:	66 e8 d9 01          	callw  9484 <print+0x8f>
    92ab:	00 00                	add    %al,(%eax)
    92ad:	66 83 c4 04          	add    $0x4,%sp
                index_of_str = 0;
    92b1:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    92b8:	00 00                	add    %al,(%eax)
                recived[index_of_str] = 0;
    92ba:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    92bf:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    92c4:	66 01 d0             	add    %dx,%ax
    92c7:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                continue;
    92cb:	e9 a7 00 67 80       	jmp    80679377 <_end+0x8066d913>
            }
        }
        else if(save >= '0' && save <='9'){
    92d0:	7d af                	jge    9281 <terminal+0x39e>
    92d2:	2f                   	das    
    92d3:	7e 42                	jle    9317 <terminal+0x434>
    92d5:	67 80 7d af 39       	cmpb   $0x39,-0x51(%di)
    92da:	7f 3b                	jg     9317 <terminal+0x434>
           printc(save);
    92dc:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    92e2:	66 50                	push   %ax
    92e4:	66 e8 ee 01          	callw  94d6 <prints+0x50>
    92e8:	00 00                	add    %al,(%eax)
    92ea:	66 83 c4 04          	add    $0x4,%sp
            number = number * 10 + save -'0';
    92ee:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
    92f3:	66 89 d0             	mov    %dx,%ax
    92f6:	66 c1 e0 02          	shl    $0x2,%ax
    92fa:	66 01 d0             	add    %dx,%ax
    92fd:	66 01 c0             	add    %ax,%ax
    9300:	66 89 c2             	mov    %ax,%dx
    9303:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    9309:	66 01 d0             	add    %dx,%ax
    930c:	66 83 e8 30          	sub    $0x30,%ax
    9310:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
           // printsint(number);
            continue;
    9315:	eb 5e                	jmp    9375 <terminal+0x492>
        }
        else{
           printc(save);
    9317:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    931d:	66 50                	push   %ax
    931f:	66 e8 b3 01          	callw  94d6 <prints+0x50>
    9323:	00 00                	add    %al,(%eax)
    9325:	66 83 c4 04          	add    $0x4,%sp
           // if(save == '-' || save == 'q' || save == 'h' || save == 'l' || save =='s'){
            if(index_of_str < 10){
    9329:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    932f:	7f 2c                	jg     935d <terminal+0x47a>
                recived[index_of_str] =  save;
    9331:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    9336:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    933b:	66 01 c2             	add    %ax,%dx
    933e:	67 8a 45 af          	mov    -0x51(%di),%al
    9342:	67 88 02             	mov    %al,(%bp,%si)
                index_of_str ++;
    9345:	67 66 ff 45 f0       	incw   -0x10(%di)
                recived[index_of_str] = 0;
    934a:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    934f:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    9354:	66 01 d0             	add    %dx,%ax
    9357:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    935b:	eb 18                	jmp    9375 <terminal+0x492>
            }
            else if(index_of_str >= 10){
    935d:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    9363:	7e 10                	jle    9375 <terminal+0x492>
                prints("not added");
    9365:	66 68 9d 9f          	pushw  $0x9f9d
    9369:	00 00                	add    %al,(%eax)
    936b:	66 e8 15 01          	callw  9484 <print+0x8f>
    936f:	00 00                	add    %al,(%eax)
    9371:	66 83 c4 04          	add    $0x4,%sp
    int number = 0;
    int k = 0;
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    9375:	67 66 83 7d bc 00    	cmpw   $0x0,-0x44(%di)
    937b:	0f 85 88 fc 66 89    	jne    89679009 <_end+0x8966d5a5>
    9381:	f4                   	hlt    
            else if(index_of_str >= 10){
                prints("not added");
            }
        }
    }
}
    9382:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    9387:	66 5b                	pop    %bx
    9389:	66 5e                	pop    %si
    938b:	66 5f                	pop    %di
    938d:	66 5d                	pop    %bp
    938f:	66 c3                	retw   

00009391 <run>:
void run(int queue[],int size){
    9391:	66 55                	push   %bp
    9393:	66 89 e5             	mov    %sp,%bp
    9396:	66 83 ec 04          	sub    $0x4,%sp
    int j = 0;
    939a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    93a1:	00 00                	add    %al,(%eax)
    clearscreen();
    93a3:	66 e8 3f f2          	callw  85e6 <stack_copy+0x35>
    93a7:	ff                   	(bad)  
    93a8:	ff 67 66             	jmp    *0x66(%edi)
        if(queue[j] == 4){
            //_loadP(10,55,0x4000);
            _RunProgress(0x4000);
        }
    }*/
    for(j = 0;j < size;j ++){
    93ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    93b2:	eb 2b                	jmp    93df <run+0x4e>
        initial_PCB(queue[j]);
    93b4:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    93b9:	67 66 8d 14          	lea    (%si),%dx
    93bd:	85 00                	test   %eax,(%eax)
    93bf:	00 00                	add    %al,(%eax)
    93c1:	00 67 66             	add    %ah,0x66(%edi)
    93c4:	8b 45 08             	mov    0x8(%ebp),%eax
    93c7:	66 01 d0             	add    %dx,%ax
    93ca:	67 66 8b 00          	mov    (%bx,%si),%ax
    93ce:	66 50                	push   %ax
    93d0:	66 e8 d2 ea          	callw  7ea6 <savePCB+0xd>
    93d4:	ff                   	(bad)  
    93d5:	ff 66 83             	jmp    *-0x7d(%esi)
    93d8:	c4 04 67             	les    (%edi,%eiz,2),%eax
        if(queue[j] == 4){
            //_loadP(10,55,0x4000);
            _RunProgress(0x4000);
        }
    }*/
    for(j = 0;j < size;j ++){
    93db:	66 ff 45 fc          	incw   -0x4(%ebp)
    93df:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    93e4:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    93e9:	7c c9                	jl     93b4 <run+0x23>
        initial_PCB(queue[j]);
    }
   // clearscreen();;
    thread_join();
    93eb:	66 e8 3b f0          	callw  842a <do_fork+0x22d>
    93ef:	ff                   	(bad)  
    93f0:	ff 66 c9             	jmp    *-0x37(%esi)
    //Initial_Int_08h();
    93f3:	66 c3                	retw   

000093f5 <print>:
#include "stdio.h"
//====================================================
//              显示字符串函数，可以指定位置
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
    93f5:	66 55                	push   %bp
    93f7:	66 89 e5             	mov    %sp,%bp
    93fa:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    93fe:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    9403:	66 89 d0             	mov    %dx,%ax
    9406:	66 c1 e0 02          	shl    $0x2,%ax
    940a:	66 01 d0             	add    %dx,%ax
    940d:	66 c1 e0 04          	shl    $0x4,%ax
    9411:	66 89 c2             	mov    %ax,%dx
    9414:	67 66 8b 45 10       	mov    0x10(%di),%ax
    9419:	66 01 d0             	add    %dx,%ax
    941c:	66 01 c0             	add    %ax,%ax
    941f:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    9424:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    942b:	00 00                	add    %al,(%eax)
	int index = 0;
    942d:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    9434:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    9436:	eb 35                	jmp    946d <print+0x78>
		_printchar(Messeage[index],pos,color);
    9438:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    943d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9442:	66 01 d0             	add    %dx,%ax
    9445:	67 8a 00             	mov    (%bx,%si),%al
    9448:	66 0f be c0          	movsbw %al,%ax
    944c:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9451:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9456:	66 50                	push   %ax
    9458:	66 e8 5f f2          	callw  86bb <_clearscreen+0x7>
    945c:	ff                   	(bad)  
    945d:	ff 66 83             	jmp    *-0x7d(%esi)
    9460:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    9463:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    9467:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    946d:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9472:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9477:	66 01 d0             	add    %dx,%ax
    947a:	67 8a 00             	mov    (%bx,%si),%al
    947d:	84 c0                	test   %al,%al
    947f:	75 b7                	jne    9438 <print+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    9481:	90                   	nop
}
    9482:	66 c9                	leavew 
    9484:	66 c3                	retw   

00009486 <prints>:
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input
    9486:	66 55                	push   %bp
    9488:	66 89 e5             	mov    %sp,%bp
    948b:	66 83 ec 04          	sub    $0x4,%sp
	int index = 0;
    948f:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9496:	00 00                	add    %al,(%eax)
	while(Messeage[index]){
    9498:	eb 25                	jmp    94bf <prints+0x39>
		_showchar(Messeage[index]);
    949a:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    949f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    94a4:	66 01 d0             	add    %dx,%ax
    94a7:	67 8a 00             	mov    (%bx,%si),%al
    94aa:	66 0f be c0          	movsbw %al,%ax
    94ae:	66 50                	push   %ax
    94b0:	66 e8 44 f2          	callw  86f8 <_readinput+0x17>
    94b4:	ff                   	(bad)  
    94b5:	ff 66 83             	jmp    *-0x7d(%esi)
    94b8:	c4 04 67             	les    (%edi,%eiz,2),%eax
		index++;
    94bb:	66 ff 45 fc          	incw   -0x4(%ebp)
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input
	int index = 0;
	while(Messeage[index]){
    94bf:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    94c4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    94c9:	66 01 d0             	add    %dx,%ax
    94cc:	67 8a 00             	mov    (%bx,%si),%al
    94cf:	84 c0                	test   %al,%al
    94d1:	75 c7                	jne    949a <prints+0x14>
		_showchar(Messeage[index]);
		index++;
	}
	return;
    94d3:	90                   	nop
}
    94d4:	66 c9                	leavew 
    94d6:	66 c3                	retw   

000094d8 <printc>:
//====================================================
//                显示字符函数
//====================================================
void printc(char alpha){
    94d8:	66 55                	push   %bp
    94da:	66 89 e5             	mov    %sp,%bp
    94dd:	66 83 ec 04          	sub    $0x4,%sp
    94e1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    94e6:	67 88 45 fc          	mov    %al,-0x4(%di)
	_showchar(alpha);
    94ea:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    94f0:	66 50                	push   %ax
    94f2:	66 e8 02 f2          	callw  86f8 <_readinput+0x17>
    94f6:	ff                   	(bad)  
    94f7:	ff 66 83             	jmp    *-0x7d(%esi)
    94fa:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    94fd:	66 c9                	leavew 
    94ff:	66 c3                	retw   

00009501 <printsint>:
//====================================================
//                数字转字符函数
//====================================================
void printsint(int num){
    9501:	66 55                	push   %bp
    9503:	66 89 e5             	mov    %sp,%bp
    9506:	66 83 ec 2c          	sub    $0x2c,%sp
	 int save = num;
    950a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    950f:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	 int count = 0;
    9514:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    951b:	00 00                	add    %al,(%eax)
	 char number[30];
	 number[count] = 0;
    951d:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    9522:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9527:	66 01 d0             	add    %dx,%ax
    952a:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	if(num < 0){
    952e:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    9534:	79 14                	jns    954a <printsint+0x49>
		printc('-');
    9536:	66 6a 2d             	pushw  $0x2d
    9539:	66 e8 99 ff          	callw  94d6 <prints+0x50>
    953d:	ff                   	(bad)  
    953e:	ff 66 83             	jmp    *-0x7d(%esi)
    9541:	c4 04 67             	les    (%edi,%eiz,2),%eax
		num = -num;
    9544:	66 f7 5d 08          	negw   0x8(%ebp)
    9548:	eb 15                	jmp    955f <printsint+0x5e>
	}
	else if(num == 0){
    954a:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    9550:	75 0d                	jne    955f <printsint+0x5e>
		printc('0');
    9552:	66 6a 30             	pushw  $0x30
    9555:	66 e8 7d ff          	callw  94d6 <prints+0x50>
    9559:	ff                   	(bad)  
    955a:	ff 66 83             	jmp    *-0x7d(%esi)
    955d:	c4 04 eb             	les    (%ebx,%ebp,8),%eax
	}
	while(num > 0){
    9560:	50                   	push   %eax
		number[count] = num % 10 + '0';
    9561:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9566:	66 b9 0a 00          	mov    $0xa,%cx
    956a:	00 00                	add    %al,(%eax)
    956c:	66 99                	cwtd   
    956e:	66 f7 f9             	idiv   %cx
    9571:	66 89 d0             	mov    %dx,%ax
    9574:	66 83 c0 30          	add    $0x30,%ax
    9578:	67 66 8d 4d d6       	lea    -0x2a(%di),%cx
    957d:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9582:	66 01 ca             	add    %cx,%dx
    9585:	67 88 02             	mov    %al,(%bp,%si)
		num  = num / 10;
    9588:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    958d:	66 b8 67 66          	mov    $0x6667,%ax
    9591:	66 66 66 f7 e9       	data32 data32 imul %cx
    9596:	66 c1 fa 02          	sar    $0x2,%dx
    959a:	66 89 c8             	mov    %cx,%ax
    959d:	66 c1 f8 1f          	sar    $0x1f,%ax
    95a1:	66 29 c2             	sub    %ax,%dx
    95a4:	66 89 d0             	mov    %dx,%ax
    95a7:	67 66 89 45 08       	mov    %ax,0x8(%di)
		count ++;
    95ac:	67 66 ff 45 fc       	incw   -0x4(%di)
		num = -num;
	}
	else if(num == 0){
		printc('0');
	}
	while(num > 0){
    95b1:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    95b7:	7f a8                	jg     9561 <printsint+0x60>
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    95b9:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    95be:	66 48                	dec    %ax
    95c0:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    95c5:	eb 25                	jmp    95ec <printsint+0xeb>
		printc(number[i]);
    95c7:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    95cc:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    95d1:	66 01 d0             	add    %dx,%ax
    95d4:	67 8a 00             	mov    (%bx,%si),%al
    95d7:	66 0f be c0          	movsbw %al,%ax
    95db:	66 50                	push   %ax
    95dd:	66 e8 f5 fe          	callw  94d6 <prints+0x50>
    95e1:	ff                   	(bad)  
    95e2:	ff 66 83             	jmp    *-0x7d(%esi)
    95e5:	c4 04 67             	les    (%edi,%eiz,2),%eax
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    95e8:	66 ff 4d f8          	decw   -0x8(%ebp)
    95ec:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    95f2:	79 d3                	jns    95c7 <printsint+0xc6>
		printc(number[i]);
	}
	return;
    95f4:	90                   	nop
}
    95f5:	66 c9                	leavew 
    95f7:	66 c3                	retw   

000095f9 <print_next_line>:
//====================================================
//                显示字符串并换行函数
//====================================================
 void print_next_line(char const* Messeage){
    95f9:	66 55                	push   %bp
    95fb:	66 89 e5             	mov    %sp,%bp
	prints(Messeage);
    95fe:	67 66 ff 75 08       	pushw  0x8(%di)
    9603:	66 e8 7d fe          	callw  9484 <print+0x8f>
    9607:	ff                   	(bad)  
    9608:	ff 66 83             	jmp    *-0x7d(%esi)
    960b:	c4 04 66             	les    (%esi,%eiz,2),%eax
	prints("\n\r");
    960e:	68 a7 9f 00 00       	push   $0x9fa7
    9613:	66 e8 6d fe          	callw  9484 <print+0x8f>
    9617:	ff                   	(bad)  
    9618:	ff 66 83             	jmp    *-0x7d(%esi)
    961b:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    961e:	66 c9                	leavew 
    9620:	66 c3                	retw   

00009622 <strlen>:
//====================================================
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
    9622:	66 55                	push   %bp
    9624:	66 89 e5             	mov    %sp,%bp
    9627:	66 83 ec 08          	sub    $0x8,%sp
	int i = 0;
    962b:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9632:	00 00                	add    %al,(%eax)
	int count = 0;
    9634:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    963b:	00 00                	add    %al,(%eax)
	while(Messeage[i] != 0){
    963d:	eb 0a                	jmp    9649 <strlen+0x27>
		i++;
    963f:	67 66 ff 45 fc       	incw   -0x4(%di)
		count++;
    9644:	67 66 ff 45 f8       	incw   -0x8(%di)
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
	int i = 0;
	int count = 0;
	while(Messeage[i] != 0){
    9649:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    964e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9653:	66 01 d0             	add    %dx,%ax
    9656:	67 8a 00             	mov    (%bx,%si),%al
    9659:	84 c0                	test   %al,%al
    965b:	75 e2                	jne    963f <strlen+0x1d>
		i++;
		count++;
	}
	return count;
    965d:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    9662:	66 c9                	leavew 
    9664:	66 c3                	retw   

00009666 <read_and_print_input>:
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    9666:	66 55                	push   %bp
    9668:	66 89 e5             	mov    %sp,%bp
    966b:	66 83 ec 08          	sub    $0x8,%sp
    int i = 1;
    966f:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    9676:	00 00                	add    %al,(%eax)
    while(i){
    9678:	eb 1c                	jmp    9696 <read_and_print_input+0x30>
        char savechar = _readinput();
    967a:	66 e8 61 f0          	callw  86df <_printchar+0x22>
    967e:	ff                   	(bad)  
    967f:	ff 67 88             	jmp    *-0x78(%edi)
    9682:	45                   	inc    %ebp
    9683:	fb                   	sti    
        _showchar(savechar);
    9684:	67 66 0f be 45 fb    	movsbw -0x5(%di),%ax
    968a:	66 50                	push   %ax
    968c:	66 e8 68 f0          	callw  86f8 <_readinput+0x17>
    9690:	ff                   	(bad)  
    9691:	ff 66 83             	jmp    *-0x7d(%esi)
    9694:	c4 04 67             	les    (%edi,%eiz,2),%eax
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    int i = 1;
    while(i){
    9697:	66 83 7d fc 00       	cmpw   $0x0,-0x4(%ebp)
    969c:	75 dc                	jne    967a <read_and_print_input+0x14>
        char savechar = _readinput();
        _showchar(savechar);
    }
}
    969e:	66 c9                	leavew 
    96a0:	66 c3                	retw   

000096a2 <getch>:
//====================================================
//        等待用户输入函数，返回用户输入在缓冲区中
//====================================================
char getch(){
    96a2:	66 55                	push   %bp
    96a4:	66 89 e5             	mov    %sp,%bp
    96a7:	66 83 ec 04          	sub    $0x4,%sp
	char result = _readinput();
    96ab:	66 e8 30 f0          	callw  86df <_printchar+0x22>
    96af:	ff                   	(bad)  
    96b0:	ff 67 88             	jmp    *-0x78(%edi)
    96b3:	45                   	inc    %ebp
    96b4:	ff 67 8a             	jmp    *-0x76(%edi)
	return result;
    96b7:	45                   	inc    %ebp
    96b8:	ff 66 c9             	jmp    *-0x37(%esi)
}
    96bb:	66 c3                	retw   

000096bd <getline>:
void  getline(char str[],int length){
    96bd:	66 55                	push   %bp
    96bf:	66 89 e5             	mov    %sp,%bp
    96c2:	66 83 ec 08          	sub    $0x8,%sp
	char save = getch();
    96c6:	66 e8 d6 ff          	callw  96a0 <read_and_print_input+0x3a>
    96ca:	ff                   	(bad)  
    96cb:	ff 67 88             	jmp    *-0x78(%edi)
    96ce:	45                   	inc    %ebp
    96cf:	ff 67 66             	jmp    *0x66(%edi)
	int index = 0;
    96d2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while(save != 13 && index < length){
    96d9:	eb 46                	jmp    9721 <getline+0x64>
		printc(save);
    96db:	67 66 0f be 45 ff    	movsbw -0x1(%di),%ax
    96e1:	66 50                	push   %ax
    96e3:	66 e8 ef fd          	callw  94d6 <prints+0x50>
    96e7:	ff                   	(bad)  
    96e8:	ff 66 83             	jmp    *-0x7d(%esi)
    96eb:	c4 04 67             	les    (%edi,%eiz,2),%eax
		str[index] = save;
    96ee:	66 8b 55 f8          	mov    -0x8(%ebp),%dx
    96f2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    96f7:	66 01 c2             	add    %ax,%dx
    96fa:	67 8a 45 ff          	mov    -0x1(%di),%al
    96fe:	67 88 02             	mov    %al,(%bp,%si)
		index ++;
    9701:	67 66 ff 45 f8       	incw   -0x8(%di)
		str[index] = 0;
    9706:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    970b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9710:	66 01 d0             	add    %dx,%ax
    9713:	67 c6 00 00          	movb   $0x0,(%bx,%si)
		save = getch();
    9717:	66 e8 85 ff          	callw  96a0 <read_and_print_input+0x3a>
    971b:	ff                   	(bad)  
    971c:	ff 67 88             	jmp    *-0x78(%edi)
    971f:	45                   	inc    %ebp
    9720:	ff 67 80             	jmp    *-0x80(%edi)
	return result;
}
void  getline(char str[],int length){
	char save = getch();
	int index = 0;
	while(save != 13 && index < length){
    9723:	7d ff                	jge    9724 <getline+0x67>
    9725:	0d 74 0c 67 66       	or     $0x66670c74,%eax
    972a:	8b 45 f8             	mov    -0x8(%ebp),%eax
    972d:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    9732:	7c a7                	jl     96db <getline+0x1e>
		str[index] = save;
		index ++;
		str[index] = 0;
		save = getch();
	}
	return;
    9734:	90                   	nop
}
    9735:	66 c9                	leavew 
    9737:	66 c3                	retw   

00009739 <print_different_color>:
void print_different_color(char const* Messeage,int row,int colume,int color){
    9739:	66 55                	push   %bp
    973b:	66 89 e5             	mov    %sp,%bp
    973e:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    9742:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    9747:	66 89 d0             	mov    %dx,%ax
    974a:	66 c1 e0 02          	shl    $0x2,%ax
    974e:	66 01 d0             	add    %dx,%ax
    9751:	66 c1 e0 04          	shl    $0x4,%ax
    9755:	66 89 c2             	mov    %ax,%dx
    9758:	67 66 8b 45 10       	mov    0x10(%di),%ax
    975d:	66 01 d0             	add    %dx,%ax
    9760:	66 01 c0             	add    %ax,%ax
    9763:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    9768:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    976f:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    9771:	eb 35                	jmp    97a8 <print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    9773:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9778:	67 66 8b 45 08       	mov    0x8(%di),%ax
    977d:	66 01 d0             	add    %dx,%ax
    9780:	67 8a 00             	mov    (%bx,%si),%al
    9783:	66 0f be c0          	movsbw %al,%ax
    9787:	67 66 ff 75 14       	pushw  0x14(%di)
    978c:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9791:	66 50                	push   %ax
    9793:	66 e8 24 ef          	callw  86bb <_clearscreen+0x7>
    9797:	ff                   	(bad)  
    9798:	ff 66 83             	jmp    *-0x7d(%esi)
    979b:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    979e:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    97a2:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    97a8:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    97ad:	67 66 8b 45 08       	mov    0x8(%di),%ax
    97b2:	66 01 d0             	add    %dx,%ax
    97b5:	67 8a 00             	mov    (%bx,%si),%al
    97b8:	84 c0                	test   %al,%al
    97ba:	75 b7                	jne    9773 <print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    97bc:	90                   	nop
}
    97bd:	66 c9                	leavew 
    97bf:	66 c3                	retw   

000097c1 <strcmp>:
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
    97c1:	66 55                	push   %bp
    97c3:	66 89 e5             	mov    %sp,%bp
    97c6:	66 83 ec 04          	sub    $0x4,%sp
	int i = 0;
    97ca:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    97d1:	00 00                	add    %al,(%eax)
	while(m1[i] != 0 && m2[i]!= 0){
    97d3:	eb 31                	jmp    9806 <strcmp+0x45>
		if(m1[i] != m2[i]){
    97d5:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    97da:	67 66 8b 45 08       	mov    0x8(%di),%ax
    97df:	66 01 d0             	add    %dx,%ax
    97e2:	67 8a 10             	mov    (%bx,%si),%dl
    97e5:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    97ea:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    97ef:	66 01 c8             	add    %cx,%ax
    97f2:	67 8a 00             	mov    (%bx,%si),%al
    97f5:	38 c2                	cmp    %al,%dl
    97f7:	74 08                	je     9801 <strcmp+0x40>
			return 0;
    97f9:	66 b8 00 00          	mov    $0x0,%ax
    97fd:	00 00                	add    %al,(%eax)
    97ff:	eb 63                	jmp    9864 <strcmp+0xa3>
		}
		i++;
    9801:	67 66 ff 45 fc       	incw   -0x4(%di)
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
	int i = 0;
	while(m1[i] != 0 && m2[i]!= 0){
    9806:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    980b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9810:	66 01 d0             	add    %dx,%ax
    9813:	67 8a 00             	mov    (%bx,%si),%al
    9816:	84 c0                	test   %al,%al
    9818:	74 14                	je     982e <strcmp+0x6d>
    981a:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    981f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9824:	66 01 d0             	add    %dx,%ax
    9827:	67 8a 00             	mov    (%bx,%si),%al
    982a:	84 c0                	test   %al,%al
    982c:	75 a7                	jne    97d5 <strcmp+0x14>
		if(m1[i] != m2[i]){
			return 0;
		}
		i++;
	}
	if(m1[i] != 0 || m2[i] != 0){
    982e:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9833:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9838:	66 01 d0             	add    %dx,%ax
    983b:	67 8a 00             	mov    (%bx,%si),%al
    983e:	84 c0                	test   %al,%al
    9840:	75 14                	jne    9856 <strcmp+0x95>
    9842:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9847:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    984c:	66 01 d0             	add    %dx,%ax
    984f:	67 8a 00             	mov    (%bx,%si),%al
    9852:	84 c0                	test   %al,%al
    9854:	74 08                	je     985e <strcmp+0x9d>
		return 0;
    9856:	66 b8 00 00          	mov    $0x0,%ax
    985a:	00 00                	add    %al,(%eax)
    985c:	eb 06                	jmp    9864 <strcmp+0xa3>
	}
	return 1;
    985e:	66 b8 01 00          	mov    $0x1,%ax
    9862:	00 00                	add    %al,(%eax)
}
    9864:	66 c9                	leavew 
    9866:	66 c3                	retw   

00009868 <strcpy>:
//====================================================
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
    9868:	66 55                	push   %bp
    986a:	66 89 e5             	mov    %sp,%bp
    986d:	66 83 ec 08          	sub    $0x8,%sp
	int len = strlen(src);
    9871:	67 66 ff 75 08       	pushw  0x8(%di)
    9876:	66 e8 a6 fd          	callw  9620 <print_next_line+0x27>
    987a:	ff                   	(bad)  
    987b:	ff 66 83             	jmp    *-0x7d(%esi)
    987e:	c4 04 67             	les    (%edi,%eiz,2),%eax
    9881:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	int i = 0;
    9885:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    988c:	00 00                	add    %al,(%eax)
	for(i = 0;i < len;i ++){
    988e:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9895:	00 00                	add    %al,(%eax)
    9897:	eb 3b                	jmp    98d4 <strcpy+0x6c>
    	des[i] =  src[i];
    9899:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    989e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    98a3:	66 01 c2             	add    %ax,%dx
    98a6:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    98ab:	67 66 8b 45 08       	mov    0x8(%di),%ax
    98b0:	66 01 c8             	add    %cx,%ax
    98b3:	67 8a 00             	mov    (%bx,%si),%al
    98b6:	67 88 02             	mov    %al,(%bp,%si)
        des[i+1] = 0;
    98b9:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    98be:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    98c3:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    98c8:	66 01 d0             	add    %dx,%ax
    98cb:	67 c6 00 00          	movb   $0x0,(%bx,%si)
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
	int len = strlen(src);
	int i = 0;
	for(i = 0;i < len;i ++){
    98cf:	67 66 ff 45 fc       	incw   -0x4(%di)
    98d4:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    98d9:	67 66 3b 45 f8       	cmp    -0x8(%di),%ax
    98de:	7c b9                	jl     9899 <strcpy+0x31>
    	des[i] =  src[i];
        des[i+1] = 0;
	}
    98e0:	66 c9                	leavew 
    98e2:	66 c3                	retw   

000098e4 <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
    98e4:	66 55                	push   %bp
    98e6:	66 89 e5             	mov    %sp,%bp
    98e9:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    98ed:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    98f2:	66 89 d0             	mov    %dx,%ax
    98f5:	66 c1 e0 02          	shl    $0x2,%ax
    98f9:	66 01 d0             	add    %dx,%ax
    98fc:	66 c1 e0 04          	shl    $0x4,%ax
    9900:	66 89 c2             	mov    %ax,%dx
    9903:	67 66 8b 45 10       	mov    0x10(%di),%ax
    9908:	66 01 d0             	add    %dx,%ax
    990b:	66 01 c0             	add    %ax,%ax
    990e:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    9913:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    991a:	00 00                	add    %al,(%eax)
	int index = 0;
    991c:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    9923:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    9925:	eb 35                	jmp    995c <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
    9927:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    992c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9931:	66 01 d0             	add    %dx,%ax
    9934:	67 8a 00             	mov    (%bx,%si),%al
    9937:	66 0f be c0          	movsbw %al,%ax
    993b:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9940:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9945:	66 50                	push   %ax
    9947:	66 e8 70 ed          	callw  86bb <_clearscreen+0x7>
    994b:	ff                   	(bad)  
    994c:	ff 66 83             	jmp    *-0x7d(%esi)
    994f:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    9952:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    9956:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    995c:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9961:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9966:	66 01 d0             	add    %dx,%ax
    9969:	67 8a 00             	mov    (%bx,%si),%al
    996c:	84 c0                	test   %al,%al
    996e:	75 b7                	jne    9927 <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    9970:	90                   	nop
}
    9971:	66 c9                	leavew 
    9973:	66 c3                	retw   

00009975 <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    9975:	66 55                	push   %bp
    9977:	66 89 e5             	mov    %sp,%bp
    997a:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    997e:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    9983:	66 89 d0             	mov    %dx,%ax
    9986:	66 c1 e0 02          	shl    $0x2,%ax
    998a:	66 01 d0             	add    %dx,%ax
    998d:	66 c1 e0 04          	shl    $0x4,%ax
    9991:	66 89 c2             	mov    %ax,%dx
    9994:	67 66 8b 45 10       	mov    0x10(%di),%ax
    9999:	66 01 d0             	add    %dx,%ax
    999c:	66 01 c0             	add    %ax,%ax
    999f:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    99a4:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    99ab:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    99ad:	eb 35                	jmp    99e4 <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    99af:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    99b4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    99b9:	66 01 d0             	add    %dx,%ax
    99bc:	67 8a 00             	mov    (%bx,%si),%al
    99bf:	66 0f be c0          	movsbw %al,%ax
    99c3:	67 66 ff 75 14       	pushw  0x14(%di)
    99c8:	67 66 ff 75 fc       	pushw  -0x4(%di)
    99cd:	66 50                	push   %ax
    99cf:	66 e8 e8 ec          	callw  86bb <_clearscreen+0x7>
    99d3:	ff                   	(bad)  
    99d4:	ff 66 83             	jmp    *-0x7d(%esi)
    99d7:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    99da:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    99de:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    99e4:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    99e9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    99ee:	66 01 d0             	add    %dx,%ax
    99f1:	67 8a 00             	mov    (%bx,%si),%al
    99f4:	84 c0                	test   %al,%al
    99f6:	75 b7                	jne    99af <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    99f8:	90                   	nop
}
    99f9:	66 c9                	leavew 
    99fb:	66 c3                	retw   

000099fd <sys_showline>:
void sys_showline(){
    99fd:	66 55                	push   %bp
    99ff:	66 89 e5             	mov    %sp,%bp
    9a02:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
    9a06:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
    9a0b:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
    9a10:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
    9a15:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
    9a1a:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
    9a1f:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
    9a24:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
    9a29:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    9a30:	00 00                	add    %al,(%eax)
    int i = 0;
    9a32:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9a39:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
    9a3b:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9a42:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
    9a44:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9a4b:	00 00                	add    %al,(%eax)
    9a4d:	eb 52                	jmp    9aa1 <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
    9a4f:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9a54:	66 89 d0             	mov    %dx,%ax
    9a57:	66 c1 e0 03          	shl    $0x3,%ax
    9a5b:	66 01 d0             	add    %dx,%ax
    9a5e:	67 66 8d 14          	lea    (%si),%dx
    9a62:	c5 00                	lds    (%eax),%eax
    9a64:	00 00                	add    %al,(%eax)
    9a66:	00 66 01             	add    %ah,0x1(%esi)
    9a69:	d0 66 01             	shlb   0x1(%esi)
    9a6c:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
    9a70:	45                   	inc    %ebp
    9a71:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
    9a77:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9a7c:	66 01 d0             	add    %dx,%ax
    9a7f:	67 8a 00             	mov    (%bx,%si),%al
    9a82:	66 0f be c0          	movsbw %al,%ax
    9a86:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9a8b:	67 66 ff 75 f0       	pushw  -0x10(%di)
    9a90:	66 50                	push   %ax
    9a92:	66 e8 25 ec          	callw  86bb <_clearscreen+0x7>
    9a96:	ff                   	(bad)  
    9a97:	ff 66 83             	jmp    *-0x7d(%esi)
    9a9a:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
    9a9d:	66 ff 45 fc          	incw   -0x4(%ebp)
    9aa1:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
    9aa7:	7e a6                	jle    9a4f <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
    9aa9:	66 c9                	leavew 
    9aab:	66 c3                	retw   

00009aad <sys_printname>:

void sys_printname(){
    9aad:	66 55                	push   %bp
    9aaf:	66 89 e5             	mov    %sp,%bp
    9ab2:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
    9ab6:	67 66 c7 45 fc ac 9f 	movw   $0x9fac,-0x4(%di)
    9abd:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
    9abf:	67 66 c7 45 f8 f0 9f 	movw   $0x9ff0,-0x8(%di)
    9ac6:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
    9ac8:	67 66 c7 45 f4 34 a0 	movw   $0xa034,-0xc(%di)
    9acf:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
    9ad1:	67 66 c7 45 f0 78 a0 	movw   $0xa078,-0x10(%di)
    9ad8:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
    9ada:	67 66 c7 45 ec bc a0 	movw   $0xa0bc,-0x14(%di)
    9ae1:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
    9ae3:	67 66 c7 45 e8 00 a1 	movw   $0xa100,-0x18(%di)
    9aea:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
    9aec:	67 66 c7 45 e4 44 a1 	movw   $0xa144,-0x1c(%di)
    9af3:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
    9af5:	66 6a 0b             	pushw  $0xb
    9af8:	66 6a 10             	pushw  $0x10
    9afb:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9b00:	66 e8 de fd          	callw  98e2 <strcpy+0x7a>
    9b04:	ff                   	(bad)  
    9b05:	ff 66 83             	jmp    *-0x7d(%esi)
    9b08:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
    9b0b:	6a 0b                	push   $0xb
    9b0d:	66 6a 11             	pushw  $0x11
    9b10:	67 66 ff 75 f8       	pushw  -0x8(%di)
    9b15:	66 e8 c9 fd          	callw  98e2 <strcpy+0x7a>
    9b19:	ff                   	(bad)  
    9b1a:	ff 66 83             	jmp    *-0x7d(%esi)
    9b1d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
    9b20:	6a 0b                	push   $0xb
    9b22:	66 6a 12             	pushw  $0x12
    9b25:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9b2a:	66 e8 b4 fd          	callw  98e2 <strcpy+0x7a>
    9b2e:	ff                   	(bad)  
    9b2f:	ff 66 83             	jmp    *-0x7d(%esi)
    9b32:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
    9b35:	6a 0b                	push   $0xb
    9b37:	66 6a 13             	pushw  $0x13
    9b3a:	67 66 ff 75 f0       	pushw  -0x10(%di)
    9b3f:	66 e8 9f fd          	callw  98e2 <strcpy+0x7a>
    9b43:	ff                   	(bad)  
    9b44:	ff 66 83             	jmp    *-0x7d(%esi)
    9b47:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
    9b4a:	6a 0b                	push   $0xb
    9b4c:	66 6a 14             	pushw  $0x14
    9b4f:	67 66 ff 75 ec       	pushw  -0x14(%di)
    9b54:	66 e8 8a fd          	callw  98e2 <strcpy+0x7a>
    9b58:	ff                   	(bad)  
    9b59:	ff 66 83             	jmp    *-0x7d(%esi)
    9b5c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
    9b5f:	6a 0b                	push   $0xb
    9b61:	66 6a 15             	pushw  $0x15
    9b64:	67 66 ff 75 e8       	pushw  -0x18(%di)
    9b69:	66 e8 75 fd          	callw  98e2 <strcpy+0x7a>
    9b6d:	ff                   	(bad)  
    9b6e:	ff 66 83             	jmp    *-0x7d(%esi)
    9b71:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
    9b74:	6a 0b                	push   $0xb
    9b76:	66 6a 16             	pushw  $0x16
    9b79:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    9b7e:	66 e8 60 fd          	callw  98e2 <strcpy+0x7a>
    9b82:	ff                   	(bad)  
    9b83:	ff 66 83             	jmp    *-0x7d(%esi)
    9b86:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    9b89:	c9                   	leave  
    9b8a:	66 c3                	retw   

00009b8c <sys_printpoem>:
void sys_printpoem(){
    9b8c:	66 55                	push   %bp
    9b8e:	66 89 e5             	mov    %sp,%bp
    9b91:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
    9b95:	67 66 c7 45 f8 88 a1 	movw   $0xa188,-0x8(%di)
    9b9c:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
    9b9e:	67 66 c7 45 f4 9a a1 	movw   $0xa19a,-0xc(%di)
    9ba5:	00 00                	add    %al,(%eax)
    int i = 1;
    9ba7:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    9bae:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
    9bb0:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    9bb7:	00 00                	add    %al,(%eax)
    9bb9:	eb 4b                	jmp    9c06 <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
    9bbb:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9bc0:	66 6a 0a             	pushw  $0xa
    9bc3:	66 6a 0f             	pushw  $0xf
    9bc6:	67 66 ff 75 f8       	pushw  -0x8(%di)
    9bcb:	66 e8 a4 fd          	callw  9973 <sys_print_for_heart+0x8f>
    9bcf:	ff                   	(bad)  
    9bd0:	ff 66 83             	jmp    *-0x7d(%esi)
    9bd3:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
    9bd5:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9bda:	66 6a 0a             	pushw  $0xa
    9bdd:	66 6a 10             	pushw  $0x10
    9be0:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9be5:	66 e8 8a fd          	callw  9973 <sys_print_for_heart+0x8f>
    9be9:	ff                   	(bad)  
    9bea:	ff 66 83             	jmp    *-0x7d(%esi)
    9bed:	c4 10                	les    (%eax),%edx
        int j = 0;
    9bef:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9bf6:	00 00                	add    %al,(%eax)
        int k = 0;
    9bf8:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    9bff:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
    9c01:	67 66 ff 45 fc       	incw   -0x4(%di)
    9c06:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    9c0c:	7e ad                	jle    9bbb <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
    9c0e:	66 c9                	leavew 
    9c10:	66 c3                	retw   

00009c12 <sys_printheart>:
void sys_printheart(){
    9c12:	66 55                	push   %bp
    9c14:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
    9c17:	66 6a 28             	pushw  $0x28
    9c1a:	66 6a 00             	pushw  $0x0
    9c1d:	66 68 a3 a1          	pushw  $0xa1a3
    9c21:	00 00                	add    %al,(%eax)
    9c23:	66 e8 bb fc          	callw  98e2 <strcpy+0x7a>
    9c27:	ff                   	(bad)  
    9c28:	ff 66 83             	jmp    *-0x7d(%esi)
    9c2b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
    9c2e:	6a 28                	push   $0x28
    9c30:	66 6a 01             	pushw  $0x1
    9c33:	66 68 bb a1          	pushw  $0xa1bb
    9c37:	00 00                	add    %al,(%eax)
    9c39:	66 e8 a5 fc          	callw  98e2 <strcpy+0x7a>
    9c3d:	ff                   	(bad)  
    9c3e:	ff 66 83             	jmp    *-0x7d(%esi)
    9c41:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
    9c44:	6a 28                	push   $0x28
    9c46:	66 6a 02             	pushw  $0x2
    9c49:	66 68 d4 a1          	pushw  $0xa1d4
    9c4d:	00 00                	add    %al,(%eax)
    9c4f:	66 e8 8f fc          	callw  98e2 <strcpy+0x7a>
    9c53:	ff                   	(bad)  
    9c54:	ff 66 83             	jmp    *-0x7d(%esi)
    9c57:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
    9c5a:	6a 28                	push   $0x28
    9c5c:	66 6a 03             	pushw  $0x3
    9c5f:	66 68 ef a1          	pushw  $0xa1ef
    9c63:	00 00                	add    %al,(%eax)
    9c65:	66 e8 79 fc          	callw  98e2 <strcpy+0x7a>
    9c69:	ff                   	(bad)  
    9c6a:	ff 66 83             	jmp    *-0x7d(%esi)
    9c6d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
    9c70:	6a 28                	push   $0x28
    9c72:	66 6a 04             	pushw  $0x4
    9c75:	66 68 08 a2          	pushw  $0xa208
    9c79:	00 00                	add    %al,(%eax)
    9c7b:	66 e8 63 fc          	callw  98e2 <strcpy+0x7a>
    9c7f:	ff                   	(bad)  
    9c80:	ff 66 83             	jmp    *-0x7d(%esi)
    9c83:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
    9c86:	6a 28                	push   $0x28
    9c88:	66 6a 05             	pushw  $0x5
    9c8b:	66 68 20 a2          	pushw  $0xa220
    9c8f:	00 00                	add    %al,(%eax)
    9c91:	66 e8 4d fc          	callw  98e2 <strcpy+0x7a>
    9c95:	ff                   	(bad)  
    9c96:	ff 66 83             	jmp    *-0x7d(%esi)
    9c99:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
    9c9c:	6a 28                	push   $0x28
    9c9e:	66 6a 06             	pushw  $0x6
    9ca1:	66 68 37 a2          	pushw  $0xa237
    9ca5:	00 00                	add    %al,(%eax)
    9ca7:	66 e8 37 fc          	callw  98e2 <strcpy+0x7a>
    9cab:	ff                   	(bad)  
    9cac:	ff 66 83             	jmp    *-0x7d(%esi)
    9caf:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
    9cb2:	6a 28                	push   $0x28
    9cb4:	66 6a 07             	pushw  $0x7
    9cb7:	66 68 4d a2          	pushw  $0xa24d
    9cbb:	00 00                	add    %al,(%eax)
    9cbd:	66 e8 21 fc          	callw  98e2 <strcpy+0x7a>
    9cc1:	ff                   	(bad)  
    9cc2:	ff 66 83             	jmp    *-0x7d(%esi)
    9cc5:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    9cc8:	c9                   	leave  
    9cc9:	66 c3                	retw   

00009ccb <Get_Hours>:
#include "time.h"
#include "stdio.h"

int Get_Hours(){
    9ccb:	66 55                	push   %bp
    9ccd:	66 89 e5             	mov    %sp,%bp
    9cd0:	66 53                	push   %bx
    9cd2:	66 83 ec 04          	sub    $0x4,%sp
    int hours = _Get_Hours_1();
    9cd6:	66 e8 8b f1          	callw  8e65 <RTC_Timer+0xa3>
    9cda:	ff                   	(bad)  
    9cdb:	ff 67 66             	jmp    *0x66(%edi)
    9cde:	89 45 f8             	mov    %eax,-0x8(%ebp)
    hours = hours * 10 + _Get_Hours_2();
    9ce1:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9ce6:	66 89 d0             	mov    %dx,%ax
    9ce9:	66 c1 e0 02          	shl    $0x2,%ax
    9ced:	66 01 d0             	add    %dx,%ax
    9cf0:	66 01 c0             	add    %ax,%ax
    9cf3:	66 89 c3             	mov    %ax,%bx
    9cf6:	66 e8 8c f1          	callw  8e86 <_Get_Hours_1+0x1f>
    9cfa:	ff                   	(bad)  
    9cfb:	ff 66 01             	jmp    *0x1(%esi)
    9cfe:	d8 67 66             	fsubs  0x66(%edi)
    9d01:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return hours;
    9d04:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
   // printsint(hours);
}
    9d09:	66 83 c4 04          	add    $0x4,%sp
    9d0d:	66 5b                	pop    %bx
    9d0f:	66 5d                	pop    %bp
    9d11:	66 c3                	retw   

00009d13 <Get_Minutes>:
int Get_Minutes(){
    9d13:	66 55                	push   %bp
    9d15:	66 89 e5             	mov    %sp,%bp
    9d18:	66 53                	push   %bx
    9d1a:	66 83 ec 04          	sub    $0x4,%sp
    int minutes = _Get_Minutes_1();
    9d1e:	66 e8 81 f1          	callw  8ea3 <_Get_Hours_2+0x1b>
    9d22:	ff                   	(bad)  
    9d23:	ff 67 66             	jmp    *0x66(%edi)
    9d26:	89 45 f8             	mov    %eax,-0x8(%ebp)
    minutes = minutes * 10 + _Get_Minutes_2();
    9d29:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9d2e:	66 89 d0             	mov    %dx,%ax
    9d31:	66 c1 e0 02          	shl    $0x2,%ax
    9d35:	66 01 d0             	add    %dx,%ax
    9d38:	66 01 c0             	add    %ax,%ax
    9d3b:	66 89 c3             	mov    %ax,%bx
    9d3e:	66 e8 82 f1          	callw  8ec4 <_Get_Minutes_1+0x1f>
    9d42:	ff                   	(bad)  
    9d43:	ff 66 01             	jmp    *0x1(%esi)
    9d46:	d8 67 66             	fsubs  0x66(%edi)
    9d49:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return minutes;
    9d4c:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    9d51:	66 83 c4 04          	add    $0x4,%sp
    9d55:	66 5b                	pop    %bx
    9d57:	66 5d                	pop    %bp
    9d59:	66 c3                	retw   

00009d5b <printTime>:
void printTime(){
    9d5b:	66 55                	push   %bp
    9d5d:	66 89 e5             	mov    %sp,%bp
    9d60:	66 83 ec 08          	sub    $0x8,%sp
    int hour = Get_Hours();
    9d64:	66 e8 61 ff          	callw  9cc9 <sys_printheart+0xb7>
    9d68:	ff                   	(bad)  
    9d69:	ff 67 66             	jmp    *0x66(%edi)
    9d6c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int minute = Get_Minutes();
    9d6f:	66 e8 9e ff          	callw  9d11 <Get_Hours+0x46>
    9d73:	ff                   	(bad)  
    9d74:	ff 67 66             	jmp    *0x66(%edi)
    9d77:	89 45 f8             	mov    %eax,-0x8(%ebp)
    printsint(hour);
    9d7a:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9d7f:	66 e8 7c f7          	callw  94ff <printc+0x27>
    9d83:	ff                   	(bad)  
    9d84:	ff 66 83             	jmp    *-0x7d(%esi)
    9d87:	c4 04 66             	les    (%esi,%eiz,2),%eax
    prints("h : ");
    9d8a:	68 62 a2 00 00       	push   $0xa262
    9d8f:	66 e8 f1 f6          	callw  9484 <print+0x8f>
    9d93:	ff                   	(bad)  
    9d94:	ff 66 83             	jmp    *-0x7d(%esi)
    9d97:	c4 04 67             	les    (%edi,%eiz,2),%eax
    printsint(minute);
    9d9a:	66 ff 75 f8          	pushw  -0x8(%ebp)
    9d9e:	66 e8 5d f7          	callw  94ff <printc+0x27>
    9da2:	ff                   	(bad)  
    9da3:	ff 66 83             	jmp    *-0x7d(%esi)
    9da6:	c4 04 66             	les    (%esi,%eiz,2),%eax
    printc('m');
    9da9:	6a 6d                	push   $0x6d
    9dab:	66 e8 27 f7          	callw  94d6 <prints+0x50>
    9daf:	ff                   	(bad)  
    9db0:	ff 66 83             	jmp    *-0x7d(%esi)
    9db3:	c4 04 66             	les    (%esi,%eiz,2),%eax

    9db6:	c9                   	leave  
    9db7:	66 c3                	retw   

00009db9 <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    9db9:	66 55                	push   %bp
    9dbb:	66 89 e5             	mov    %sp,%bp
    9dbe:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    9dc2:	66 e8 da e9          	callw  87a0 <_Schedule_once+0xb>
    9dc6:	ff                   	(bad)  
    9dc7:	ff 67 66             	jmp    *0x66(%edi)
    9dca:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    9dcd:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    9dd2:	66 c9                	leavew 
    9dd4:	66 c3                	retw   

00009dd6 <wait>:
void wait(){
    9dd6:	66 55                	push   %bp
    9dd8:	66 89 e5             	mov    %sp,%bp
    _wait();
    9ddb:	66 e8 dd e9          	callw  87bc <_Schedule+0xd>
    9ddf:	ff                   	(bad)  
    9de0:	ff 66 5d             	jmp    *0x5d(%esi)
    9de3:	66 c3                	retw   
