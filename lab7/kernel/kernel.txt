
kernel.elf:     file format elf32-i386


Disassembly of section .text:

00007d00 <_start>:
    7d00:	66 b8 00 00          	mov    $0x0,%ax
    7d04:	00 00                	add    %al,(%eax)
    7d06:	8e d8                	mov    %eax,%ds
    7d08:	8e c0                	mov    %eax,%es
    7d0a:	8e d0                	mov    %eax,%ss
    7d0c:	66 ea 14 7d 00 00    	ljmpw  $0x0,$0x7d14
	...

00007d14 <main>:
#include"kernel.h"
#include "../syscall/stdio.h"
#include "../syscall/schedule.h"
#include "../syscall/time.h"

int main(){
    7d14:	66 55                	push   %bp
    7d16:	66 89 e5             	mov    %sp,%bp
    7d19:	66 83 ec 0c          	sub    $0xc,%sp
    clearscreen();
    7d1d:	66 e8 43 09          	callw  8664 <stack_copy+0x35>
    7d21:	00 00                	add    %al,(%eax)
   // char str[100] = {};
    //getline(str,10);
   // prints(str);
    Initial_Int();
    7d23:	66 e8 4d 09          	callw  8674 <clearscreen+0xe>
    7d27:	00 00                	add    %al,(%eax)
    printTime();
    7d29:	66 e8 f2 20          	callw  9e1f <Get_Minutes+0x46>
    7d2d:	00 00                	add    %al,(%eax)
    //Initial_Int_09h();
    Set_PCB();
    7d2f:	66 e8 cc 02          	callw  7fff <initial_PCB+0x157>
    7d33:	00 00                	add    %al,(%eax)
    loadProg(18,95,0x2000);
    7d35:	66 68 00 20          	pushw  $0x2000
    7d39:	00 00                	add    %al,(%eax)
    7d3b:	66 6a 5f             	pushw  $0x5f
    7d3e:	66 6a 12             	pushw  $0x12
    7d41:	66 e8 5d 09          	callw  86a2 <Initial_Int_08h+0xd>
    7d45:	00 00                	add    %al,(%eax)
    7d47:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(18,115,0x3000);
    7d4b:	66 68 00 30          	pushw  $0x3000
    7d4f:	00 00                	add    %al,(%eax)
    7d51:	66 6a 73             	pushw  $0x73
    7d54:	66 6a 12             	pushw  $0x12
    7d57:	66 e8 47 09          	callw  86a2 <Initial_Int_08h+0xd>
    7d5b:	00 00                	add    %al,(%eax)
    7d5d:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(18,135,0x4000);
    7d61:	66 68 00 40          	pushw  $0x4000
    7d65:	00 00                	add    %al,(%eax)
    7d67:	66 68 87 00          	pushw  $0x87
    7d6b:	00 00                	add    %al,(%eax)
    7d6d:	66 6a 12             	pushw  $0x12
    7d70:	66 e8 2e 09          	callw  86a2 <Initial_Int_08h+0xd>
    7d74:	00 00                	add    %al,(%eax)
    7d76:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(18,155,0x5000);
    7d7a:	66 68 00 50          	pushw  $0x5000
    7d7e:	00 00                	add    %al,(%eax)
    7d80:	66 68 9b 00          	pushw  $0x9b
    7d84:	00 00                	add    %al,(%eax)
    7d86:	66 6a 12             	pushw  $0x12
    7d89:	66 e8 15 09          	callw  86a2 <Initial_Int_08h+0xd>
    7d8d:	00 00                	add    %al,(%eax)
    7d8f:	66 83 c4 0c          	add    $0xc,%sp
    _loadP(18,175,0x6000);
    7d93:	66 68 00 60          	pushw  $0x6000
    7d97:	00 00                	add    %al,(%eax)
    7d99:	66 68 af 00          	pushw  $0xaf
    7d9d:	00 00                	add    %al,(%eax)
    7d9f:	66 6a 12             	pushw  $0x12
    7da2:	66 e8 ff 09          	callw  87a5 <_setPoint+0x15>
    7da6:	00 00                	add    %al,(%eax)
    7da8:	66 83 c4 0c          	add    $0xc,%sp
    _loadP(18,195,0x7000);
    7dac:	66 68 00 70          	pushw  $0x7000
    7db0:	00 00                	add    %al,(%eax)
    7db2:	66 68 c3 00          	pushw  $0xc3
    7db6:	00 00                	add    %al,(%eax)
    7db8:	66 6a 12             	pushw  $0x12
    7dbb:	66 e8 e6 09          	callw  87a5 <_setPoint+0x15>
    7dbf:	00 00                	add    %al,(%eax)
    7dc1:	66 83 c4 0c          	add    $0xc,%sp
    initial_PCB(6);
    7dc5:	66 6a 06             	pushw  $0x6
    7dc8:	66 e8 da 00          	callw  7ea6 <savePCB+0xd>
    7dcc:	00 00                	add    %al,(%eax)
    7dce:	66 83 c4 04          	add    $0x4,%sp
    _CurrentProg = PCB_list + 6;
    7dd2:	66 c7 06 a0 bb       	movw   $0xbba0,(%esi)
    7dd7:	18 bb 00 00 66 68    	sbb    %bh,0x68660000(%ebx)
    //_CurrentProg = PCB_list;//important! mov dword ptr ds:0x9e60, 0x00009d20,把PCB_list的地址9d20存到ds的9e60处，此后就直接用9e60来织带PCB_list
   // Initial_Int_08h();
   _RunProgress(0x7000);
    7ddd:	00 70 00             	add    %dh,0x0(%eax)
    7de0:	00 66 e8             	add    %ah,-0x18(%esi)
    7de3:	f7                   	(bad)  
    7de4:	09 00                	or     %eax,(%eax)
    7de6:	00 66 83             	add    %ah,-0x7d(%esi)
    7de9:	c4 04 67             	les    (%edi,%eiz,2),%eax


    char const *Messeage = "Built by Chen Hongyang on March 20, 2018";
    7dec:	66 c7 45 fc f0 9e    	movw   $0x9ef0,-0x4(%ebp)
    7df2:	00 00                	add    %al,(%eax)
    print("===================================================",9,12);
    7df4:	66 6a 0c             	pushw  $0xc
    7df7:	66 6a 09             	pushw  $0x9
    7dfa:	66 68 1c 9f          	pushw  $0x9f1c
    7dfe:	00 00                	add    %al,(%eax)
    7e00:	66 e8 b5 16          	callw  94b9 <run+0x62>
    7e04:	00 00                	add    %al,(%eax)
    7e06:	66 83 c4 0c          	add    $0xc,%sp

    print("chenhyOS",10,32);
    7e0a:	66 6a 20             	pushw  $0x20
    7e0d:	66 6a 0a             	pushw  $0xa
    7e10:	66 68 50 9f          	pushw  $0x9f50
    7e14:	00 00                	add    %al,(%eax)
    7e16:	66 e8 9f 16          	callw  94b9 <run+0x62>
    7e1a:	00 00                	add    %al,(%eax)
    7e1c:	66 83 c4 0c          	add    $0xc,%sp
   print(Messeage,11,16); //print the msg
    7e20:	66 6a 10             	pushw  $0x10
    7e23:	66 6a 0b             	pushw  $0xb
    7e26:	67 66 ff 75 fc       	pushw  -0x4(%di)
    7e2b:	66 e8 8a 16          	callw  94b9 <run+0x62>
    7e2f:	00 00                	add    %al,(%eax)
    7e31:	66 83 c4 0c          	add    $0xc,%sp
   print("===================================================",12,12);
    7e35:	66 6a 0c             	pushw  $0xc
    7e38:	66 6a 0c             	pushw  $0xc
    7e3b:	66 68 1c 9f          	pushw  $0x9f1c
    7e3f:	00 00                	add    %al,(%eax)
    7e41:	66 e8 74 16          	callw  94b9 <run+0x62>
    7e45:	00 00                	add    %al,(%eax)
    7e47:	66 83 c4 0c          	add    $0xc,%sp
   

   char a = getch();
    7e4b:	66 e8 17 19          	callw  9766 <read_and_print_input+0x3a>
    7e4f:	00 00                	add    %al,(%eax)
    7e51:	67 88 45 fb          	mov    %al,-0x5(%di)
   clearscreen(); 
    7e55:	66 e8 0b 08          	callw  8664 <stack_copy+0x35>
    7e59:	00 00                	add    %al,(%eax)
    char const *Msg1 = "Press any key to get help\n\r";
    7e5b:	67 66 c7 45 f4 59 9f 	movw   $0x9f59,-0xc(%di)
    7e62:	00 00                	add    %al,(%eax)
   prints(Msg1);
    7e64:	67 66 ff 75 f4       	pushw  -0xc(%di)
    7e69:	66 e8 dd 16          	callw  954a <print+0x8f>
    7e6d:	00 00                	add    %al,(%eax)
    7e6f:	66 83 c4 04          	add    $0x4,%sp
   print("!",13,39);
    7e73:	66 6a 27             	pushw  $0x27
    7e76:	66 6a 0d             	pushw  $0xd
    7e79:	66 68 75 9f          	pushw  $0x9f75
    7e7d:	00 00                	add    %al,(%eax)
    7e7f:	66 e8 36 16          	callw  94b9 <run+0x62>
    7e83:	00 00                	add    %al,(%eax)
    7e85:	66 83 c4 0c          	add    $0xc,%sp
   //Initial_Int();
    /*buildmap();还有待解决debug
    void *addr = (void*) 0xB100;
    _loadP(2,21,addr);
    showtable();*/
    terminal();
    7e89:	66 e8 1a 11          	callw  8fa7 <_Get_Minutes_2+0x1b>
    7e8d:	00 00                	add    %al,(%eax)
    return 0;
    7e8f:	66 b8 00 00          	mov    $0x0,%ax
    7e93:	00 00                	add    %al,(%eax)
    7e95:	66 c9                	leavew 
    7e97:	66 c3                	retw   

00007e99 <savePCB>:
#include "schedule.h"

void savePCB(){
    7e99:	66 55                	push   %bp
    7e9b:	66 89 e5             	mov    %sp,%bp
    _save();
    7e9e:	66 e8 1c 0f          	callw  8dbe <_initialInt_08h+0x39>
    7ea2:	00 00                	add    %al,(%eax)
}
    7ea4:	66 5d                	pop    %bp
    7ea6:	66 c3                	retw   

00007ea8 <initial_PCB>:
void initial_PCB(int index){
    7ea8:	66 55                	push   %bp
    7eaa:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    7ead:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7eb2:	66 40                	inc    %ax
    7eb4:	66 c1 e0 0c          	shl    $0xc,%ax
    7eb8:	66 89 c2             	mov    %ax,%dx
    7ebb:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7ec0:	66 c1 e0 02          	shl    $0x2,%ax
    7ec4:	66 89 c1             	mov    %ax,%cx
    7ec7:	66 c1 e1 04          	shl    $0x4,%cx
    7ecb:	66 01 c8             	add    %cx,%ax
    7ece:	66 05 b0 b9          	add    $0xb9b0,%ax
    7ed2:	00 00                	add    %al,(%eax)
    7ed4:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    7ed8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7edd:	66 40                	inc    %ax
    7edf:	66 c1 e0 0c          	shl    $0xc,%ax
    7ee3:	66 89 c2             	mov    %ax,%dx
    7ee6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7eeb:	66 c1 e0 02          	shl    $0x2,%ax
    7eef:	66 89 c1             	mov    %ax,%cx
    7ef2:	66 c1 e1 04          	shl    $0x4,%cx
    7ef6:	66 01 c8             	add    %cx,%ax
    7ef9:	66 05 a0 b9          	add    $0xb9a0,%ax
    7efd:	00 00                	add    %al,(%eax)
    7eff:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
    7f03:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f08:	66 40                	inc    %ax
    7f0a:	66 c1 e0 0c          	shl    $0xc,%ax
    7f0e:	66 89 c2             	mov    %ax,%dx
    7f11:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f16:	66 c1 e0 02          	shl    $0x2,%ax
    7f1a:	66 89 c1             	mov    %ax,%cx
    7f1d:	66 c1 e1 04          	shl    $0x4,%cx
    7f21:	66 01 c8             	add    %cx,%ax
    7f24:	66 05 a0 b9          	add    $0xb9a0,%ax
    7f28:	00 00                	add    %al,(%eax)
    7f2a:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
    7f2f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f34:	66 c1 e0 02          	shl    $0x2,%ax
    7f38:	66 89 c2             	mov    %ax,%dx
    7f3b:	66 c1 e2 04          	shl    $0x4,%dx
    7f3f:	66 01 d0             	add    %dx,%ax
    7f42:	66 05 a0 b9          	add    $0xb9a0,%ax
    7f46:	00 00                	add    %al,(%eax)
    7f48:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
    7f4f:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
    7f51:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f56:	66 c1 e0 02          	shl    $0x2,%ax
    7f5a:	66 89 c2             	mov    %ax,%dx
    7f5d:	66 c1 e2 04          	shl    $0x4,%dx
    7f61:	66 01 d0             	add    %dx,%ax
    7f64:	66 05 a0 b9          	add    $0xb9a0,%ax
    7f68:	00 00                	add    %al,(%eax)
    7f6a:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    7f71:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = RUN;
    7f73:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f78:	66 c1 e0 02          	shl    $0x2,%ax
    7f7c:	66 89 c2             	mov    %ax,%dx
    7f7f:	66 c1 e2 04          	shl    $0x4,%dx
    7f83:	66 01 d0             	add    %dx,%ax
    7f86:	66 05 b0 b9          	add    $0xb9b0,%ax
    7f8a:	00 00                	add    %al,(%eax)
    7f8c:	67 66 c7 40 08 01 00 	movw   $0x1,0x8(%bx,%si)
    7f93:	00 00                	add    %al,(%eax)
    PCB_list[index ].eflags = 512;
    7f95:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f9a:	66 c1 e0 02          	shl    $0x2,%ax
    7f9e:	66 89 c2             	mov    %ax,%dx
    7fa1:	66 c1 e2 04          	shl    $0x4,%dx
    7fa5:	66 01 d0             	add    %dx,%ax
    7fa8:	66 05 b0 b9          	add    $0xb9b0,%ax
    7fac:	00 00                	add    %al,(%eax)
    7fae:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    7fb5:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    7fb7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7fbc:	66 c1 e0 02          	shl    $0x2,%ax
    7fc0:	66 89 c2             	mov    %ax,%dx
    7fc3:	66 c1 e2 04          	shl    $0x4,%dx
    7fc7:	66 01 d0             	add    %dx,%ax
    7fca:	67 66 8d 90 b0 b9    	lea    -0x4650(%bx,%si),%dx
    7fd0:	00 00                	add    %al,(%eax)
    7fd2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7fd7:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 0;
    7fdc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7fe1:	66 c1 e0 02          	shl    $0x2,%ax
    7fe5:	66 89 c2             	mov    %ax,%dx
    7fe8:	66 c1 e2 04          	shl    $0x4,%dx
    7fec:	66 01 d0             	add    %dx,%ax
    7fef:	66 05 c0 b9          	add    $0xb9c0,%ax
    7ff3:	00 00                	add    %al,(%eax)
    7ff5:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    7ffb:	00 00                	add    %al,(%eax)
}
    7ffd:	66 5d                	pop    %bp
    7fff:	66 c3                	retw   

00008001 <Set_PCB>:
void Set_PCB(){
    8001:	66 55                	push   %bp
    8003:	66 89 e5             	mov    %sp,%bp
    8006:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    800a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8011:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    8013:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    801a:	00 00                	add    %al,(%eax)
    801c:	eb 27                	jmp    8045 <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    801e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8023:	66 c1 e0 02          	shl    $0x2,%ax
    8027:	66 89 c2             	mov    %ax,%dx
    802a:	66 c1 e2 04          	shl    $0x4,%dx
    802e:	66 01 d0             	add    %dx,%ax
    8031:	66 05 b0 b9          	add    $0xb9b0,%ax
    8035:	00 00                	add    %al,(%eax)
    8037:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    803e:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 0;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    8040:	67 66 ff 45 fc       	incw   -0x4(%di)
    8045:	67 66 83 7d fc 07    	cmpw   $0x7,-0x4(%di)
    804b:	7e d1                	jle    801e <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    804d:	66 c9                	leavew 
    804f:	66 c3                	retw   

00008051 <sys_schedule>:
void sys_schedule(){
    8051:	66 55                	push   %bp
    8053:	66 89 e5             	mov    %sp,%bp
    8056:	66 83 ec 0c          	sub    $0xc,%sp
    int i,j;
    int index = -1;
    805a:	67 66 c7 45 f4 ff ff 	movw   $0xffff,-0xc(%di)
    8061:	ff                   	(bad)  
    8062:	ff 66 a1             	jmp    *-0x5f(%esi)
    i = _CurrentProg - PCB_list;
    8065:	a0 bb 66 89 c2       	mov    0xc28966bb,%al
    806a:	66 b8 80 b9          	mov    $0xb980,%ax
    806e:	00 00                	add    %al,(%eax)
    8070:	66 29 c2             	sub    %ax,%dx
    8073:	66 89 d0             	mov    %dx,%ax
    8076:	66 c1 f8 02          	sar    $0x2,%ax
    807a:	66 89 c2             	mov    %ax,%dx
    807d:	66 89 d0             	mov    %dx,%ax
    8080:	66 01 c0             	add    %ax,%ax
    8083:	66 01 d0             	add    %dx,%ax
    8086:	67 66 8d 14          	lea    (%si),%dx
    808a:	85 00                	test   %eax,(%eax)
    808c:	00 00                	add    %al,(%eax)
    808e:	00 66 01             	add    %ah,0x1(%esi)
    8091:	d0 66 89             	shlb   -0x77(%esi)
    8094:	c2 66 c1             	ret    $0xc166
    8097:	e2 08                	loop   80a1 <sys_schedule+0x50>
    8099:	66 01 d0             	add    %dx,%ax
    809c:	66 89 c2             	mov    %ax,%dx
    809f:	66 c1 e2 10          	shl    $0x10,%dx
    80a3:	66 01 d0             	add    %dx,%ax
    80a6:	66 f7 d8             	neg    %ax
    80a9:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    for(j = 0;j < PCB_NUMMER;j ++){
    80ae:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    80b5:	00 00                	add    %al,(%eax)
    80b7:	e9 a6 00 67 66       	jmp    66678162 <_end+0x6666c5be>
        if(i == PCB_NUMMER - 1){
    80bc:	83 7d fc 07          	cmpl   $0x7,-0x4(%ebp)
    80c0:	75 14                	jne    80d6 <sys_schedule+0x85>
            _CurrentProg = PCB_list + 1;
    80c2:	66 c7 06 a0 bb       	movw   $0xbba0,(%esi)
    80c7:	c4 b9 00 00 67 66    	les    0x66670000(%ecx),%edi
            i = 1;
    80cd:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    80d4:	eb 11                	jmp    80e7 <sys_schedule+0x96>
        }
        else{
            _CurrentProg ++;
    80d6:	66 a1 a0 bb 66 83    	mov    0x8366bba0,%ax
    80dc:	c0 44 66 a3 a0       	rolb   $0xa0,-0x5d(%esi,%eiz,2)
    80e1:	bb 67 66 ff 45       	mov    $0x45ff6667,%ebx
            i ++;
    80e6:	fc                   	cld    
        }
        if(_CurrentProg -> prg_status == RUN){
    80e7:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    80ed:	8b 40 38             	mov    0x38(%eax),%eax
    80f0:	66 83 f8 01          	cmp    $0x1,%ax
    80f4:	75 03                	jne    80f9 <sys_schedule+0xa8>
            return;
    80f6:	e9 a2 00 66 a1       	jmp    a166819d <_end+0xa165c5f9>
        }
        if(_CurrentProg -> prg_status == READY && index == -1){
    80fb:	a0 bb 67 66 8b       	mov    0x8b6667bb,%al
    8100:	40                   	inc    %eax
    8101:	38 66 83             	cmp    %ah,-0x7d(%esi)
    8104:	f8                   	clc    
    8105:	03 75 53             	add    0x53(%ebp),%esi
    8108:	67 66 83 7d f4 ff    	cmpw   $0xffff,-0xc(%di)
    810e:	75 4b                	jne    815b <sys_schedule+0x10a>
           index = _CurrentProg - PCB_list;
    8110:	66 a1 a0 bb 66 89    	mov    0x8966bba0,%ax
    8116:	c2 66 b8             	ret    $0xb866
    8119:	80 b9 00 00 66 29 c2 	cmpb   $0xc2,0x29660000(%ecx)
    8120:	66 89 d0             	mov    %dx,%ax
    8123:	66 c1 f8 02          	sar    $0x2,%ax
    8127:	66 89 c2             	mov    %ax,%dx
    812a:	66 89 d0             	mov    %dx,%ax
    812d:	66 01 c0             	add    %ax,%ax
    8130:	66 01 d0             	add    %dx,%ax
    8133:	67 66 8d 14          	lea    (%si),%dx
    8137:	85 00                	test   %eax,(%eax)
    8139:	00 00                	add    %al,(%eax)
    813b:	00 66 01             	add    %ah,0x1(%esi)
    813e:	d0 66 89             	shlb   -0x77(%esi)
    8141:	c2 66 c1             	ret    $0xc166
    8144:	e2 08                	loop   814e <sys_schedule+0xfd>
    8146:	66 01 d0             	add    %dx,%ax
    8149:	66 89 c2             	mov    %ax,%dx
    814c:	66 c1 e2 10          	shl    $0x10,%dx
    8150:	66 01 d0             	add    %dx,%ax
    8153:	66 f7 d8             	neg    %ax
    8156:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
}
void sys_schedule(){
    int i,j;
    int index = -1;
    i = _CurrentProg - PCB_list;
    for(j = 0;j < PCB_NUMMER;j ++){
    815b:	67 66 ff 45 f8       	incw   -0x8(%di)
    8160:	67 66 83 7d f8 07    	cmpw   $0x7,-0x8(%di)
    8166:	0f 8e 50 ff 67 66    	jle    666880bc <_end+0x6667c518>
        }
        if(_CurrentProg -> prg_status == READY && index == -1){
           index = _CurrentProg - PCB_list;
        }
    }
    if(index != -1){
    816c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
    8170:	74 1f                	je     8191 <sys_schedule+0x140>
        _CurrentProg = PCB_list + index;
    8172:	67 66 8b 45 f4       	mov    -0xc(%di),%ax
    8177:	66 c1 e0 02          	shl    $0x2,%ax
    817b:	66 89 c2             	mov    %ax,%dx
    817e:	66 c1 e2 04          	shl    $0x4,%dx
    8182:	66 01 d0             	add    %dx,%ax
    8185:	66 05 80 b9          	add    $0xb980,%ax
    8189:	00 00                	add    %al,(%eax)
    818b:	66 a3 a0 bb eb 0a    	mov    %ax,0xaebbba0
        return;
    }
    _CurrentProg = PCB_list ;
    8191:	66 c7 06 a0 bb       	movw   $0xbba0,(%esi)
    8196:	80 b9 00 00 90 66 c9 	cmpb   $0xc9,0x66900000(%ecx)
    return;
}
    819d:	66 c3                	retw   

0000819f <sys_exit>:
void sys_exit(){
    819f:	66 55                	push   %bp
    81a1:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = EXIT;
    81a4:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    81aa:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
}
    81b1:	66 5d                	pop    %bp
    81b3:	66 c3                	retw   

000081b5 <sys_exit_fork>:
void sys_exit_fork(char ch){
    81b5:	66 55                	push   %bp
    81b7:	66 89 e5             	mov    %sp,%bp
    81ba:	66 83 ec 04          	sub    $0x4,%sp
    81be:	67 66 8b 45 08       	mov    0x8(%di),%ax
    81c3:	67 88 45 fc          	mov    %al,-0x4(%di)
    _CurrentProg -> prg_status = EXIT;
    81c7:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    81cd:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    PCB_list[_CurrentProg -> fid].prg_status = READY;
    81d4:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    81da:	8b 40 40             	mov    0x40(%eax),%eax
    81dd:	66 c1 e0 02          	shl    $0x2,%ax
    81e1:	66 89 c2             	mov    %ax,%dx
    81e4:	66 c1 e2 04          	shl    $0x4,%dx
    81e8:	66 01 d0             	add    %dx,%ax
    81eb:	66 05 b0 b9          	add    $0xb9b0,%ax
    81ef:	00 00                	add    %al,(%eax)
    81f1:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    81f8:	00 00                	add    %al,(%eax)
    PCB_list[_CurrentProg -> fid].eax = ch;
    81fa:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    8200:	8b 40 40             	mov    0x40(%eax),%eax
    8203:	67 66 0f be 55 fc    	movsbw -0x4(%di),%dx
    8209:	66 c1 e0 02          	shl    $0x2,%ax
    820d:	66 89 c1             	mov    %ax,%cx
    8210:	66 c1 e1 04          	shl    $0x4,%cx
    8214:	66 01 c8             	add    %cx,%ax
    8217:	66 05 80 b9          	add    $0xb980,%ax
    821b:	00 00                	add    %al,(%eax)
    821d:	67 66 89 10          	mov    %dx,(%bx,%si)
    _Schedule();
    8221:	66 e8 04 06          	callw  8829 <_fork_user+0x9>
    8225:	00 00                	add    %al,(%eax)
}
    8227:	66 c9                	leavew 
    8229:	66 c3                	retw   

0000822b <sys_bolocked>:
void sys_bolocked(){
    822b:	66 55                	push   %bp
    822d:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = BLOCKED;
    8230:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    8236:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
}
    823d:	66 5d                	pop    %bp
    823f:	66 c3                	retw   

00008241 <sys_run>:
void sys_run(){
    8241:	66 55                	push   %bp
    8243:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    8246:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    824c:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    8253:	66 5d                	pop    %bp
    8255:	66 c3                	retw   

00008257 <sys_wait>:
int sys_wait(){
    8257:	66 55                	push   %bp
    8259:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = BLOCKED;
    825c:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    8262:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
    _Schedule();
    8269:	66 e8 bc 05          	callw  8829 <_fork_user+0x9>
    826d:	00 00                	add    %al,(%eax)
    return _CurrentProg -> eax;
    826f:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    8275:	8b 00                	mov    (%eax),%eax
}
    8277:	66 5d                	pop    %bp
    8279:	66 c3                	retw   

0000827b <do_fork>:
int do_fork(){
    827b:	66 55                	push   %bp
    827d:	66 89 e5             	mov    %sp,%bp
    8280:	66 83 ec 04          	sub    $0x4,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    8284:	67 66 c7 45 fc c4 b9 	movw   $0xb9c4,-0x4(%di)
    828b:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN )    fork_prg = fork_prg + 1;//应该增加used位，防止被覆盖
    828d:	eb 06                	jmp    8295 <do_fork+0x1a>
    828f:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    8295:	67 66 81 7d fc a0 bb 	cmpw   $0xbba0,-0x4(%di)
    829c:	00 00                	add    %al,(%eax)
    829e:	73 10                	jae    82b0 <do_fork+0x35>
    82a0:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    82a5:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    82aa:	66 83 f8 01          	cmp    $0x1,%ax
    82ae:	74 df                	je     828f <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    82b0:	67 66 81 7d fc 5c bb 	cmpw   $0xbb5c,-0x4(%di)
    82b7:	00 00                	add    %al,(%eax)
    82b9:	76 0f                	jbe    82ca <do_fork+0x4f>
    82bb:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    82c1:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    82c7:	e9 dc 01 66 e8       	jmp    e86684a8 <_end+0xe865c904>
    else{
        _Schedule_once();
    82cc:	45                   	inc    %ebp
    82cd:	05 00 00 66 83       	add    $0x83660000,%eax
        __asm__("sub $6,%esp");
    82d2:	ec                   	in     (%dx),%al
    82d3:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    82d4:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    82da:	ff 75 fc             	pushl  -0x4(%ebp)
    82dd:	66 50                	push   %ax
    82df:	66 e8 3f 02          	callw  8522 <counter+0x63>
    82e3:	00 00                	add    %al,(%eax)
    82e5:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    82e9:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    82ed:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    82f2:	66 b8 80 b9          	mov    $0xb980,%ax
    82f6:	00 00                	add    %al,(%eax)
    82f8:	66 29 c2             	sub    %ax,%dx
    82fb:	66 89 d0             	mov    %dx,%ax
    82fe:	66 c1 f8 02          	sar    $0x2,%ax
    8302:	66 89 c2             	mov    %ax,%dx
    8305:	66 89 d0             	mov    %dx,%ax
    8308:	66 01 c0             	add    %ax,%ax
    830b:	66 01 d0             	add    %dx,%ax
    830e:	67 66 8d 14          	lea    (%si),%dx
    8312:	85 00                	test   %eax,(%eax)
    8314:	00 00                	add    %al,(%eax)
    8316:	00 66 01             	add    %ah,0x1(%esi)
    8319:	d0 66 89             	shlb   -0x77(%esi)
    831c:	c2 66 c1             	ret    $0xc166
    831f:	e2 08                	loop   8329 <do_fork+0xae>
    8321:	66 01 d0             	add    %dx,%ax
    8324:	66 89 c2             	mov    %ax,%dx
    8327:	66 c1 e2 10          	shl    $0x10,%dx
    832b:	66 01 d0             	add    %dx,%ax
    832e:	66 f7 d8             	neg    %ax
    8331:	66 89 c2             	mov    %ax,%dx
    8334:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8339:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    833e:	66 a1 a0 bb 66 89    	mov    0x8966bba0,%ax
    8344:	c2 66 b8             	ret    $0xb866
    8347:	80 b9 00 00 66 29 c2 	cmpb   $0xc2,0x29660000(%ecx)
    834e:	66 89 d0             	mov    %dx,%ax
    8351:	66 c1 f8 02          	sar    $0x2,%ax
    8355:	66 89 c2             	mov    %ax,%dx
    8358:	66 89 d0             	mov    %dx,%ax
    835b:	66 01 c0             	add    %ax,%ax
    835e:	66 01 d0             	add    %dx,%ax
    8361:	67 66 8d 14          	lea    (%si),%dx
    8365:	85 00                	test   %eax,(%eax)
    8367:	00 00                	add    %al,(%eax)
    8369:	00 66 01             	add    %ah,0x1(%esi)
    836c:	d0 66 89             	shlb   -0x77(%esi)
    836f:	c2 66 c1             	ret    $0xc166
    8372:	e2 08                	loop   837c <do_fork+0x101>
    8374:	66 01 d0             	add    %dx,%ax
    8377:	66 89 c2             	mov    %ax,%dx
    837a:	66 c1 e2 10          	shl    $0x10,%dx
    837e:	66 01 d0             	add    %dx,%ax
    8381:	66 f7 d8             	neg    %ax
    8384:	66 89 c2             	mov    %ax,%dx
    8387:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    838c:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    8391:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    8397:	8b 50 20             	mov    0x20(%eax),%edx
    839a:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    839f:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    83a4:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    83a9:	66 b8 80 b9          	mov    $0xb980,%ax
    83ad:	00 00                	add    %al,(%eax)
    83af:	66 29 c2             	sub    %ax,%dx
    83b2:	66 89 d0             	mov    %dx,%ax
    83b5:	66 c1 f8 02          	sar    $0x2,%ax
    83b9:	66 89 c2             	mov    %ax,%dx
    83bc:	66 89 d0             	mov    %dx,%ax
    83bf:	66 01 c0             	add    %ax,%ax
    83c2:	66 01 d0             	add    %dx,%ax
    83c5:	67 66 8d 14          	lea    (%si),%dx
    83c9:	85 00                	test   %eax,(%eax)
    83cb:	00 00                	add    %al,(%eax)
    83cd:	00 66 01             	add    %ah,0x1(%esi)
    83d0:	d0 66 89             	shlb   -0x77(%esi)
    83d3:	c2 66 c1             	ret    $0xc166
    83d6:	e2 08                	loop   83e0 <do_fork+0x165>
    83d8:	66 01 d0             	add    %dx,%ax
    83db:	66 89 c2             	mov    %ax,%dx
    83de:	66 c1 e2 10          	shl    $0x10,%dx
    83e2:	66 01 d0             	add    %dx,%ax
    83e5:	66 f7 d8             	neg    %ax
    83e8:	66 83 c0 02          	add    $0x2,%ax
    83ec:	66 c1 e0 0c          	shl    $0xc,%ax
    83f0:	66 89 c2             	mov    %ax,%dx
    83f3:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    83f8:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    83fd:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    8403:	8b 50 30             	mov    0x30(%eax),%edx
    8406:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    840b:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    8410:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8415:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    841c:	00 00                	add    %al,(%eax)
       // __asm__("enter $0,$0");
        _Schedule_once();
    841e:	66 e8 f1 03          	callw  8813 <S+0x14>
    8422:	00 00                	add    %al,(%eax)
        __asm__("sub $6,%esp");
    8424:	66 83 ec 06          	sub    $0x6,%sp
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    8428:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    842d:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    8432:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    8438:	8b 50 28             	mov    0x28(%eax),%edx
    843b:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    8441:	8b 40 24             	mov    0x24(%eax),%eax
    8444:	66 51                	push   %cx
    8446:	66 52                	push   %dx
    8448:	66 50                	push   %ax
    844a:	66 e8 b5 02          	callw  8703 <Message31+0x4>
    844e:	00 00                	add    %al,(%eax)
    8450:	66 83 c4 0c          	add    $0xc,%sp
        __asm__("add $6,%esp");
    8454:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> ip = _CurrentProg -> ip;
    8458:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    845e:	8b 50 2c             	mov    0x2c(%eax),%edx
    8461:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8466:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    846b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8470:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    8476:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    8478:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    847e:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    8481:	75 08                	jne    848b <do_fork+0x210>
            return 0;
    8483:	66 b8 00 00          	mov    $0x0,%ax
    8487:	00 00                	add    %al,(%eax)
    8489:	eb 1b                	jmp    84a6 <do_fork+0x22b>
        }
        _CurrentProg -> eax = fork_prg -> id;
    848b:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    8491:	8b 55 fc             	mov    -0x4(%ebp),%edx
    8494:	67 66 8b 52 3c       	mov    0x3c(%bp,%si),%dx
    8499:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    849d:	66 a1 a0 bb 67 66    	mov    0x6667bba0,%ax
    84a3:	8b 00                	mov    (%eax),%eax
    84a5:	90                   	nop
    }
}
    84a6:	66 c9                	leavew 
    84a8:	66 c3                	retw   

000084aa <thread_join>:
void thread_join(){
    84aa:	66 55                	push   %bp
    84ac:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    84af:	90                   	nop
    84b0:	66 e8 09 00          	callw  84bd <thread_join+0x13>
    84b4:	00 00                	add    %al,(%eax)
    84b6:	66 85 c0             	test   %ax,%ax
    84b9:	75 f5                	jne    84b0 <thread_join+0x6>
    }
}
    84bb:	66 5d                	pop    %bp
    84bd:	66 c3                	retw   

000084bf <counter>:
int counter(){
    84bf:	66 55                	push   %bp
    84c1:	66 89 e5             	mov    %sp,%bp
    84c4:	66 83 ec 08          	sub    $0x8,%sp
    int i = 0;
    84c8:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    84cf:	00 00                	add    %al,(%eax)
    int count = 0;
    84d1:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    84d8:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER - 1;i ++){
    84da:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    84e1:	00 00                	add    %al,(%eax)
    84e3:	eb 2e                	jmp    8513 <counter+0x54>
        if(PCB_list[i].prg_status == 1){
    84e5:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    84ea:	66 c1 e0 02          	shl    $0x2,%ax
    84ee:	66 89 c2             	mov    %ax,%dx
    84f1:	66 c1 e2 04          	shl    $0x4,%dx
    84f5:	66 01 d0             	add    %dx,%ax
    84f8:	66 05 b0 b9          	add    $0xb9b0,%ax
    84fc:	00 00                	add    %al,(%eax)
    84fe:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    8503:	66 83 f8 01          	cmp    $0x1,%ax
    8507:	75 05                	jne    850e <counter+0x4f>
            count ++;
    8509:	67 66 ff 45 f8       	incw   -0x8(%di)
    }
}
int counter(){
    int i = 0;
    int count = 0;
    for(i = 0;i < PCB_NUMMER - 1;i ++){
    850e:	67 66 ff 45 fc       	incw   -0x4(%di)
    8513:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    8519:	7e ca                	jle    84e5 <counter+0x26>
        if(PCB_list[i].prg_status == 1){
            count ++;
        }
    }
    return count;
    851b:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    8520:	66 c9                	leavew 
    8522:	66 c3                	retw   

00008524 <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    8524:	66 55                	push   %bp
    8526:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    8529:	67 66 8b 45 08       	mov    0x8(%di),%ax
    852e:	67 66 8b 10          	mov    (%bx,%si),%dx
    8532:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8537:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    853b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8540:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    8545:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    854a:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    854f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8554:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    8559:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    855e:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    8563:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8568:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    856d:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8572:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    8577:	67 66 8b 45 08       	mov    0x8(%di),%ax
    857c:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    8581:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8586:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    858b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8590:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    8595:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    859a:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    859f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    85a4:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    85a9:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    85ae:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    85b3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    85b8:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    85bd:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    85c2:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    85c7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    85cc:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    85d1:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    85d6:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    85db:	67 66 8b 45 08       	mov    0x8(%di),%ax
    85e0:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    85e5:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    85ea:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    85ef:	67 66 8b 45 08       	mov    0x8(%di),%ax
    85f4:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    85f9:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    85fe:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    8603:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8608:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    860d:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8612:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    8617:	67 66 8b 45 08       	mov    0x8(%di),%ax
    861c:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    8621:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8626:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    862b:	66 5d                	pop    %bp
    862d:	66 c3                	retw   

0000862f <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    862f:	66 55                	push   %bp
    8631:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    8634:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8639:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    863e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8643:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    8648:	67 66 8b 45 08       	mov    0x8(%di),%ax
    864d:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    8652:	66 51                	push   %cx
    8654:	66 52                	push   %dx
    8656:	66 50                	push   %ax
    8658:	66 e8 a7 00          	callw  8703 <Message31+0x4>
    865c:	00 00                	add    %al,(%eax)
    865e:	66 83 c4 0c          	add    $0xc,%sp
}
    8662:	66 c9                	leavew 
    8664:	66 c3                	retw   

00008666 <clearscreen>:
#include "use.h"
//====================================================
//                封装清屏函数
//====================================================
void clearscreen(){
    8666:	66 55                	push   %bp
    8668:	66 89 e5             	mov    %sp,%bp
	_clearscreen();//C调用汇编时会压入四个字节，必须考虑到这个，写出newret，是pop edx,而非 pop dx；
    866b:	66 e8 c3 00          	callw  8732 <end_for_copy+0x5>
    866f:	00 00                	add    %al,(%eax)
	//__asm__("pop %ax");
	return ;
    8671:	90                   	nop
}
    8672:	66 5d                	pop    %bp
    8674:	66 c3                	retw   

00008676 <Initial_Int>:
	}
}*/
//====================================================
//                封装中断初始化函数
//====================================================
void Initial_Int(){
    8676:	66 55                	push   %bp
    8678:	66 89 e5             	mov    %sp,%bp
	_initialInt();
    867b:	66 e8 e0 04          	callw  8b5f <_SetINT3Ah+0x17>
    867f:	00 00                	add    %al,(%eax)
	return;
    8681:	90                   	nop
}
    8682:	66 5d                	pop    %bp
    8684:	66 c3                	retw   

00008686 <Initial_Int_09h>:
void Initial_Int_09h(){
    8686:	66 55                	push   %bp
    8688:	66 89 e5             	mov    %sp,%bp
	_initialInt_09h();
    868b:	66 e8 ba 06          	callw  8d49 <_initialInt+0x1e8>
    868f:	00 00                	add    %al,(%eax)
}
    8691:	66 5d                	pop    %bp
    8693:	66 c3                	retw   

00008695 <Initial_Int_08h>:
void Initial_Int_08h(){
    8695:	66 55                	push   %bp
    8697:	66 89 e5             	mov    %sp,%bp
	_initialInt_08h();
    869a:	66 e8 e5 06          	callw  8d83 <_initialInt_09h+0x38>
    869e:	00 00                	add    %al,(%eax)
}
    86a0:	66 5d                	pop    %bp
    86a2:	66 c3                	retw   

000086a4 <loadProg>:
void loadProg(int count,int begin,int memory_postion){
    86a4:	66 55                	push   %bp
    86a6:	66 89 e5             	mov    %sp,%bp
    _loadP(count,begin,memory_postion);
    86a9:	67 66 ff 75 10       	pushw  0x10(%di)
    86ae:	67 66 ff 75 0c       	pushw  0xc(%di)
    86b3:	67 66 ff 75 08       	pushw  0x8(%di)
    86b8:	66 e8 e9 00          	callw  87a5 <_setPoint+0x15>
    86bc:	00 00                	add    %al,(%eax)
    86be:	66 83 c4 0c          	add    $0xc,%sp
    86c2:	66 c9                	leavew 
    86c4:	66 c3                	retw   
    86c6:	66 90                	xchg   %ax,%ax
    86c8:	66 90                	xchg   %ax,%ax
    86ca:	66 90                	xchg   %ax,%ax
    86cc:	66 90                	xchg   %ax,%ax
    86ce:	66 90                	xchg   %ax,%ax

000086d0 <count>:
    86d0:	08 2d 00 00 00 00    	or     %ch,0x0

000086d1 <alpha>:
    86d1:	2d 00 00 00 00       	sub    $0x0,%eax

000086d2 <int_09_saved>:
    86d2:	00 00                	add    %al,(%eax)
	...

000086d6 <program_saved>:
    86d6:	70 00                	jo     86d8 <program_saved+0x2>
	...

000086da <ds_saved>:
    86da:	7c 00                	jl     86dc <ds_saved+0x2>
	...

000086de <return_save>:
    86de:	88 00                	mov    %al,(%eax)

000086e0 <esi_save>:
    86e0:	96                   	xchg   %eax,%esi
    86e1:	00 00                	add    %al,(%eax)
	...

000086e4 <temp>:
    86e4:	e8 03 b4 00 00       	call   13aec <_end+0x7f48>

000086e6 <kernelesp_saved>:
    86e6:	b4 00                	mov    $0x0,%ah
	...

000086ea <esp_saved_inkernel>:
    86ea:	c8 00 00 00          	enter  $0x0,$0x0

000086ee <esp_saved_in_user>:
    86ee:	f0 00 00             	lock add %al,(%eax)
	...

000086f2 <ss_saved_in_user>:
    86f2:	2c 01                	sub    $0x1,%al
	...

000086f6 <color>:
    86f6:	01 c2                	add    %eax,%edx

000086f7 <ss_saved_fork>:
    86f7:	c2 01 00             	ret    $0x1
	...

000086fb <retaddr>:
    86fb:	58                   	pop    %eax
    86fc:	02 00                	add    (%eax),%al
	...

000086ff <Message31>:
    86ff:	74 69                	je     876a <_readinput+0x9>
    8701:	6d                   	insl   (%dx),%es:(%edi)
    8702:	65 3a 20             	cmp    %gs:(%eax),%ah

00008705 <_sys_stack_copy>:
    8705:	c8 00 00 00          	enter  $0x0,$0x0
    8709:	8e d0                	mov    %eax,%ss
    870b:	60                   	pusha  
    870c:	1e                   	push   %ds
    870d:	8b 46 06             	mov    0x6(%esi),%eax
    8710:	8b 56 0a             	mov    0xa(%esi),%edx
    8713:	8b 4e 0e             	mov    0xe(%esi),%ecx
    8716:	8c db                	mov    %ds,%ebx

00008718 <while_loop1>:
    8718:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
    871e:	8e d8                	mov    %eax,%ds
    8720:	67 8b 1a             	mov    (%bp,%si),%ebx
    8723:	8e d9                	mov    %ecx,%ds
    8725:	67 89 1a             	mov    %ebx,(%bp,%si)
    8728:	83 c2 02             	add    $0x2,%edx
    872b:	eb eb                	jmp    8718 <while_loop1>

0000872d <end_for_copy>:
    872d:	1f                   	pop    %ds
    872e:	61                   	popa   
    872f:	c9                   	leave  
    8730:	66 5a                	pop    %dx
    8732:	ff e2                	jmp    *%edx

00008734 <_clearscreen>:
    8734:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    8739:	66 5a                	pop    %dx
    873b:	ff e2                	jmp    *%edx

0000873d <_printchar>:
    873d:	c8 00 00 00          	enter  $0x0,$0x0
    8741:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
    8746:	57                   	push   %edi
    8747:	66 8b 4e 06          	mov    0x6(%esi),%cx
    874b:	66 8b 7e 0a          	mov    0xa(%esi),%di
    874f:	66 8b 56 0e          	mov    0xe(%esi),%dx
    8753:	88 d5                	mov    %dl,%ch
    8755:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
    875c:	00 66 5a             	add    %ah,0x5a(%esi)
    875f:	ff e2                	jmp    *%edx

00008761 <_readinput>:
    8761:	c8 04 00 00          	enter  $0x4,$0x0
    8765:	b4 00                	mov    $0x0,%ah
    8767:	cd 16                	int    $0x16
    8769:	b4 00                	mov    $0x0,%ah
    876b:	66 67 89 04          	mov    %ax,(%si)
    876f:	24 66                	and    $0x66,%al
    8771:	67 8b 04             	mov    (%si),%eax
    8774:	24 c9                	and    $0xc9,%al
    8776:	66 5a                	pop    %dx
    8778:	ff e2                	jmp    *%edx

0000877a <_showchar>:
    877a:	c8 00 00 00          	enter  $0x0,$0x0
    877e:	50                   	push   %eax
    877f:	53                   	push   %ebx
    8780:	8b 46 06             	mov    0x6(%esi),%eax
    8783:	b4 0e                	mov    $0xe,%ah
    8785:	b3 00                	mov    $0x0,%bl
    8787:	cd 10                	int    $0x10
    8789:	5b                   	pop    %ebx
    878a:	58                   	pop    %eax
    878b:	c9                   	leave  
    878c:	66 5a                	pop    %dx
    878e:	ff e2                	jmp    *%edx

00008790 <_setPoint>:
    8790:	c8 00 00 00          	enter  $0x0,$0x0
    8794:	53                   	push   %ebx
    8795:	b7 00                	mov    $0x0,%bh
    8797:	8a 77 06             	mov    0x6(%edi),%dh
    879a:	8a 57 0a             	mov    0xa(%edi),%dl
    879d:	b4 02                	mov    $0x2,%ah
    879f:	cd 10                	int    $0x10
    87a1:	5b                   	pop    %ebx
    87a2:	c9                   	leave  
    87a3:	66 5a                	pop    %dx
    87a5:	ff e2                	jmp    *%edx

000087a7 <_loadP>:
    87a7:	c8 00 00 00          	enter  $0x0,$0x0
    87ab:	60                   	pusha  
    87ac:	06                   	push   %es
    87ad:	1e                   	push   %ds
    87ae:	8c c8                	mov    %cs,%eax
    87b0:	8e d8                	mov    %eax,%ds
    87b2:	8b 46 0e             	mov    0xe(%esi),%eax
    87b5:	8e c0                	mov    %eax,%es
    87b7:	b2 00                	mov    $0x0,%dl
    87b9:	8b 46 0a             	mov    0xa(%esi),%eax
    87bc:	b3 12                	mov    $0x12,%bl
    87be:	f6 f3                	div    %bl
    87c0:	88 e1                	mov    %ah,%cl
    87c2:	30 e4                	xor    %ah,%ah
    87c4:	b3 02                	mov    $0x2,%bl
    87c6:	f6 f3                	div    %bl
    87c8:	88 e6                	mov    %ah,%dh
    87ca:	88 c5                	mov    %al,%ch
    87cc:	8a 46 06             	mov    0x6(%esi),%al
    87cf:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
    87d4:	cd 13                	int    $0x13
    87d6:	1f                   	pop    %ds
    87d7:	07                   	pop    %es
    87d8:	61                   	popa   
    87d9:	c9                   	leave  
    87da:	66 5a                	pop    %dx
    87dc:	ff e2                	jmp    *%edx

000087de <_RunProgress>:
    87de:	c8 00 00 00          	enter  $0x0,$0x0
    87e2:	8c c8                	mov    %cs,%eax
    87e4:	8e d8                	mov    %eax,%ds
    87e6:	8e c0                	mov    %eax,%es
    87e8:	8b 5e 06             	mov    0x6(%esi),%ebx
    87eb:	c7 06 d6 86 00 01    	movl   $0x10086d6,(%esi)
    87f1:	89 1e                	mov    %ebx,(%esi)
    87f3:	d8 86 66 89 26 ea    	fadds  -0x15d9769a(%esi)
    87f9:	86 26                	xchg   %ah,(%esi)
    87fb:	ff 1e                	lcall  *(%esi)
    87fd:	d6                   	(bad)  
    87fe:	86 8c c8 8e d8 8e c0 	xchg   %cl,-0x3f712772(%eax,%ecx,8)

000087ff <S>:
    87ff:	8c c8                	mov    %cs,%eax
    8801:	8e d8                	mov    %eax,%ds
    8803:	8e c0                	mov    %eax,%es
    8805:	8e d0                	mov    %eax,%ss
    8807:	66 8b 26             	mov    (%esi),%sp
    880a:	ea 86 b4 00 cd 16 c9 	ljmp   $0xc916,$0xcd00b486
    8811:	66 5a                	pop    %dx
    8813:	ff e2                	jmp    *%edx

00008815 <_Schedule_once>:
    8815:	c8 00 00 00          	enter  $0x0,$0x0
    8819:	cd 41                	int    $0x41
    881b:	c9                   	leave  
    881c:	66 5a                	pop    %dx
    881e:	ff e2                	jmp    *%edx

00008820 <_fork_user>:
    8820:	c8 00 00 00          	enter  $0x0,$0x0
    8824:	cd 39                	int    $0x39
    8826:	c9                   	leave  
    8827:	66 5a                	pop    %dx
    8829:	ff e2                	jmp    *%edx

0000882b <_Schedule>:
    882b:	c8 00 00 00          	enter  $0x0,$0x0
    882f:	16                   	push   %ss
    8830:	cd 42                	int    $0x42
    8832:	17                   	pop    %ss
    8833:	c9                   	leave  
    8834:	66 5a                	pop    %dx
    8836:	ff e2                	jmp    *%edx

00008838 <_wait>:
    8838:	c8 00 00 00          	enter  $0x0,$0x0
    883c:	cd 43                	int    $0x43
    883e:	c9                   	leave  
    883f:	66 5a                	pop    %dx
    8841:	ff e2                	jmp    *%edx

00008843 <_exit>:
    8843:	c8 00 00 00          	enter  $0x0,$0x0
    8847:	66 67 8b 45 06       	mov    0x6(%di),%ax
    884c:	66 50                	push   %ax
    884e:	cd 3a                	int    $0x3a
    8850:	c9                   	leave  
    8851:	66 5a                	pop    %dx
    8853:	ff e2                	jmp    *%edx

00008855 <_SetINT20h>:
    8855:	fa                   	cli    
    8856:	1e                   	push   %ds
    8857:	06                   	push   %es
    8858:	8c c8                	mov    %cs,%eax
    885a:	8e d8                	mov    %eax,%ds
    885c:	8e c0                	mov    %eax,%es
    885e:	8c 16                	mov    %ss,(%esi)
    8860:	f2 86 8e d0 66 89 26 	xacquire xchg %cl,0x268966d0(%esi)
    8867:	ee                   	out    %al,(%dx)
    8868:	86 66 8b             	xchg   %ah,-0x75(%esi)
    886b:	26                   	es
    886c:	ea 86 53 51 52 b4 01 	ljmp   $0x1b4,$0x52515386
    8873:	cd 16                	int    $0x16
    8875:	5a                   	pop    %edx
    8876:	59                   	pop    %ecx
    8877:	5b                   	pop    %ebx
    8878:	8e 16                	mov    (%esi),%ss
    887a:	f2 86 66 8b          	xacquire xchg %ah,-0x75(%esi)
    887e:	26                   	es
    887f:	ee                   	out    %al,(%dx)
    8880:	86 07                	xchg   %al,(%edi)
    8882:	1f                   	pop    %ds
    8883:	74 0a                	je     888f <going_on>
    8885:	50                   	push   %eax
    8886:	b4 00                	mov    $0x0,%ah
    8888:	cd 16                	int    $0x16
    888a:	58                   	pop    %eax
    888b:	fb                   	sti    
    888c:	cd 38                	int    $0x38
    888e:	cf                   	iret   

0000888f <going_on>:
    888f:	fb                   	sti    
    8890:	cf                   	iret   

00008891 <_SetINT08h_turn_around>:
    8891:	fa                   	cli    
    8892:	e8 2b 05 6a 00       	call   6a8dc2 <_end+0x69d21e>
    8897:	e8 b7 f7 e8 97       	call   97e98053 <_end+0x97e8c4af>
    889c:	05 b0 20 e6 20       	add    $0x20e620b0,%eax
    88a1:	e6 a0                	out    %al,$0xa0
    88a3:	fb                   	sti    
    88a4:	cf                   	iret   

000088a5 <_SetINT08h>:
    88a5:	60                   	pusha  
    88a6:	0f a8                	push   %gs
    88a8:	1e                   	push   %ds
    88a9:	06                   	push   %es
    88aa:	16                   	push   %ss
    88ab:	8c c8                	mov    %cs,%eax
    88ad:	8e c0                	mov    %eax,%es
    88af:	8e d8                	mov    %eax,%ds
    88b1:	8e d0                	mov    %eax,%ss
    88b3:	fe 0e                	decb   (%esi)
    88b5:	d0 86 75 4f 80 3e    	rolb   0x3e804f75(%esi)

000088b9 <notc>:
    88b9:	80 3e d1             	cmpb   $0xd1,(%esi)
    88bc:	86 2d 75 07 c6 06    	xchg   %ch,0x6c60775
    88c2:	d1 86 5c eb 2a 80    	roll   -0x7fd514a4(%esi)

000088c7 <changleft>:
    88c7:	80 3e d1             	cmpb   $0xd1,(%esi)
    88ca:	86 5c 75 07          	xchg   %bl,0x7(%ebp,%esi,2)
    88ce:	c6 06 d1             	movb   $0xd1,(%esi)
    88d1:	86 7c eb 1c          	xchg   %bh,0x1c(%ebx,%ebp,8)

000088d5 <changright>:
    88d5:	80 3e d1             	cmpb   $0xd1,(%esi)
    88d8:	86 7c 75 07          	xchg   %bh,0x7(%ebp,%esi,2)
    88dc:	c6 06 d1             	movb   $0xd1,(%esi)
    88df:	86 2f                	xchg   %ch,(%edi)
    88e1:	eb 0e                	jmp    88f1 <show>

000088e3 <changheng>:
    88e3:	80 3e d1             	cmpb   $0xd1,(%esi)
    88e6:	86 2f                	xchg   %ch,(%edi)
    88e8:	75 cf                	jne    88b9 <notc>
    88ea:	c6 06 d1             	movb   $0xd1,(%esi)
    88ed:	86 2d eb 00 b9 00    	xchg   %ch,0xb900eb

000088f1 <show>:
    88f1:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    88f6:	b4 09                	mov    $0x9,%ah
    88f8:	8a 26                	mov    (%esi),%ah
    88fa:	f6 86 a0 d1 86 65 a3 	testb  $0xa3,0x6586d1a0(%esi)
    8901:	8e 00                	mov    (%eax),%es
    8903:	c6 06 d0             	movb   $0xd0,(%esi)
    8906:	86 08                	xchg   %cl,(%eax)

00008908 <end>:
    8908:	b0 20                	mov    $0x20,%al
    890a:	e6 20                	out    %al,$0x20
    890c:	e6 a0                	out    %al,$0xa0
    890e:	17                   	pop    %ss
    890f:	07                   	pop    %es
    8910:	1f                   	pop    %ds
    8911:	0f a9                	pop    %gs
    8913:	61                   	popa   
    8914:	fb                   	sti    
    8915:	cf                   	iret   

00008916 <_SetINT09h>:
    8916:	fa                   	cli    
    8917:	1e                   	push   %ds
    8918:	06                   	push   %es
    8919:	8c c8                	mov    %cs,%eax
    891b:	8e d8                	mov    %eax,%ds
    891d:	8e c0                	mov    %eax,%es
    891f:	8e d0                	mov    %eax,%ss
    8921:	8c 16                	mov    %ss,(%esi)
    8923:	f2 86 8e d0 66 89 26 	xacquire xchg %cl,0x268966d0(%esi)
    892a:	ee                   	out    %al,(%dx)
    892b:	86 66 8b             	xchg   %ah,-0x75(%esi)
    892e:	26                   	es
    892f:	ea 86 60 b9 00 b8 8e 	ljmp   $0x8eb8,$0xb96086
    8936:	e9 8a 26 f6 86       	jmp    86f6afc5 <_end+0x86f5f421>
    893b:	b0 4f                	mov    $0x4f,%al
    893d:	65 a3 78 00 b0 55    	mov    %eax,%gs:0x55b00078
    8943:	65 a3 7a 00 b0 43    	mov    %eax,%gs:0x43b0007a
    8949:	65 a3 7c 00 b0 48    	mov    %eax,%gs:0x48b0007c
    894f:	65 a3 7e 00 b0 53    	mov    %eax,%gs:0x53b0007e
    8955:	65 a3 80 00 b0 21    	mov    %eax,%gs:0x21b00080
    895b:	65 a3 82 00 b0 4f    	mov    %eax,%gs:0x4fb00082
    8961:	65 a3 84 00 b0 55    	mov    %eax,%gs:0x55b00084
    8967:	65 a3 86 00 b0 43    	mov    %eax,%gs:0x43b00086
    896d:	65 a3 88 00 b0 48    	mov    %eax,%gs:0x48b00088
    8973:	65 a3 8a 00 b0 21    	mov    %eax,%gs:0x21b0008a
    8979:	65 a3 8c 00 61 80    	mov    %eax,%gs:0x8061008c
    897f:	fc                   	cld    
    8980:	06                   	push   %es
    8981:	75 06                	jne    8989 <cont>
    8983:	b4 01                	mov    $0x1,%ah
    8985:	88 26                	mov    %ah,(%esi)
    8987:	f6 86 fe 06 f6 86 8c 	testb  $0x8c,-0x7909f902(%esi)

00008989 <cont>:
    8989:	fe 06                	incb   (%esi)
    898b:	f6 86 8c c8 8e c0 fb 	testb  $0xfb,-0x3f713774(%esi)
    8992:	9c                   	pushf  
    8993:	26 ff 1e             	lcall  *%es:(%esi)
    8996:	d2 86 8e 16 f2 86    	rolb   %cl,-0x790de972(%esi)
    899c:	66 8b 26             	mov    (%esi),%sp
    899f:	ee                   	out    %al,(%dx)
    89a0:	86 07                	xchg   %al,(%edi)
    89a2:	1f                   	pop    %ds
    89a3:	cf                   	iret   

000089a4 <_SetINT33h>:
    89a4:	fa                   	cli    
    89a5:	c8 00 00 00          	enter  $0x0,$0x0
    89a9:	60                   	pusha  
    89aa:	1e                   	push   %ds
    89ab:	0f a8                	push   %gs
    89ad:	06                   	push   %es
    89ae:	8c c8                	mov    %cs,%eax
    89b0:	8e c0                	mov    %eax,%es
    89b2:	8e d8                	mov    %eax,%ds
    89b4:	8c 16                	mov    %ss,(%esi)
    89b6:	f2 86 8e d0 66 89 26 	xacquire xchg %cl,0x268966d0(%esi)
    89bd:	ee                   	out    %al,(%dx)
    89be:	86 66 8b             	xchg   %ah,-0x75(%esi)
    89c1:	26                   	es
    89c2:	ea 86 6a 00 e8 fa 10 	ljmp   $0x10fa,$0xe8006a86
    89c9:	8e 16                	mov    (%esi),%ss
    89cb:	f2 86 66 8b          	xacquire xchg %ah,-0x75(%esi)
    89cf:	26                   	es
    89d0:	ee                   	out    %al,(%dx)
    89d1:	86 07                	xchg   %al,(%edi)
    89d3:	0f a9                	pop    %gs
    89d5:	1f                   	pop    %ds
    89d6:	61                   	popa   
    89d7:	fb                   	sti    
    89d8:	c9                   	leave  
    89d9:	cf                   	iret   

000089da <_SetINT34h>:
    89da:	fa                   	cli    
    89db:	c8 00 00 00          	enter  $0x0,$0x0
    89df:	60                   	pusha  
    89e0:	1e                   	push   %ds
    89e1:	0f a8                	push   %gs
    89e3:	06                   	push   %es
    89e4:	8c c8                	mov    %cs,%eax
    89e6:	8e c0                	mov    %eax,%es
    89e8:	8e d8                	mov    %eax,%ds
    89ea:	8c 16                	mov    %ss,(%esi)
    89ec:	f2 86 8e d0 66 89 26 	xacquire xchg %cl,0x268966d0(%esi)
    89f3:	ee                   	out    %al,(%dx)
    89f4:	86 66 8b             	xchg   %ah,-0x75(%esi)
    89f7:	26                   	es
    89f8:	ea 86 6a 00 e8 74 11 	ljmp   $0x1174,$0xe8006a86
    89ff:	8e 16                	mov    (%esi),%ss
    8a01:	f2 86 66 8b          	xacquire xchg %ah,-0x75(%esi)
    8a05:	26                   	es
    8a06:	ee                   	out    %al,(%dx)
    8a07:	86 07                	xchg   %al,(%edi)
    8a09:	0f a9                	pop    %gs
    8a0b:	1f                   	pop    %ds
    8a0c:	61                   	popa   
    8a0d:	fb                   	sti    
    8a0e:	c9                   	leave  
    8a0f:	cf                   	iret   

00008a10 <_SetINT35h>:
    8a10:	60                   	pusha  
    8a11:	1e                   	push   %ds
    8a12:	0f a8                	push   %gs
    8a14:	06                   	push   %es
    8a15:	8c c8                	mov    %cs,%eax
    8a17:	8e c0                	mov    %eax,%es
    8a19:	8e d8                	mov    %eax,%ds
    8a1b:	8c 16                	mov    %ss,(%esi)
    8a1d:	f2 86 8e d0 66 89 26 	xacquire xchg %cl,0x268966d0(%esi)
    8a24:	ee                   	out    %al,(%dx)
    8a25:	86 66 8b             	xchg   %ah,-0x75(%esi)
    8a28:	26                   	es
    8a29:	ea 86 6a 00 e8 22 12 	ljmp   $0x1222,$0xe8006a86
    8a30:	8e 16                	mov    (%esi),%ss
    8a32:	f2 86 66 8b          	xacquire xchg %ah,-0x75(%esi)
    8a36:	26                   	es
    8a37:	ee                   	out    %al,(%dx)
    8a38:	86 07                	xchg   %al,(%edi)
    8a3a:	0f a9                	pop    %gs
    8a3c:	1f                   	pop    %ds
    8a3d:	61                   	popa   
    8a3e:	fb                   	sti    
    8a3f:	cf                   	iret   

00008a40 <_SetINT36h>:
    8a40:	60                   	pusha  
    8a41:	1e                   	push   %ds
    8a42:	0f a8                	push   %gs
    8a44:	06                   	push   %es
    8a45:	8c c8                	mov    %cs,%eax
    8a47:	8e c0                	mov    %eax,%es
    8a49:	8e d8                	mov    %eax,%ds
    8a4b:	8c 16                	mov    %ss,(%esi)
    8a4d:	f2 86 8e d0 66 89 26 	xacquire xchg %cl,0x268966d0(%esi)
    8a54:	ee                   	out    %al,(%dx)
    8a55:	86 66 8b             	xchg   %ah,-0x75(%esi)
    8a58:	26                   	es
    8a59:	ea 86 6a 00 e8 78 12 	ljmp   $0x1278,$0xe8006a86
    8a60:	8e 16                	mov    (%esi),%ss
    8a62:	f2 86 66 8b          	xacquire xchg %ah,-0x75(%esi)
    8a66:	26                   	es
    8a67:	ee                   	out    %al,(%dx)
    8a68:	86 07                	xchg   %al,(%edi)
    8a6a:	0f a9                	pop    %gs
    8a6c:	1f                   	pop    %ds
    8a6d:	61                   	popa   
    8a6e:	fb                   	sti    
    8a6f:	cf                   	iret   

00008a70 <_SetINT21h>:
    8a70:	c8 00 00 00          	enter  $0x0,$0x0
    8a74:	60                   	pusha  
    8a75:	1e                   	push   %ds
    8a76:	0f a8                	push   %gs
    8a78:	06                   	push   %es
    8a79:	8c c8                	mov    %cs,%eax
    8a7b:	8e c0                	mov    %eax,%es
    8a7d:	8e d8                	mov    %eax,%ds
    8a7f:	8b 46 08             	mov    0x8(%esi),%eax
    8a82:	80 fc 00             	cmp    $0x0,%ah
    8a85:	74 16                	je     8a9d <fn0>
    8a87:	80 fc 01             	cmp    $0x1,%ah
    8a8a:	74 21                	je     8aad <fn1>
    8a8c:	80 fc 02             	cmp    $0x2,%ah
    8a8f:	74 3d                	je     8ace <fn2>
    8a91:	80 fc 03             	cmp    $0x3,%ah
    8a94:	74 5f                	je     8af5 <fn3>
    8a96:	07                   	pop    %es
    8a97:	0f a9                	pop    %gs
    8a99:	1f                   	pop    %ds
    8a9a:	61                   	popa   
    8a9b:	c9                   	leave  
    8a9c:	cf                   	iret   

00008a9d <fn0>:
    8a9d:	8b 46 0a             	mov    0xa(%esi),%eax
    8aa0:	b4 0e                	mov    $0xe,%ah
    8aa2:	b3 00                	mov    $0x0,%bl
    8aa4:	cd 10                	int    $0x10
    8aa6:	07                   	pop    %es
    8aa7:	0f a9                	pop    %gs
    8aa9:	1f                   	pop    %ds
    8aaa:	61                   	popa   
    8aab:	c9                   	leave  
    8aac:	cf                   	iret   

00008aad <fn1>:
    8aad:	66 83 ec 04          	sub    $0x4,%sp
    8ab1:	b4 00                	mov    $0x0,%ah
    8ab3:	cd 16                	int    $0x16
    8ab5:	b4 00                	mov    $0x0,%ah
    8ab7:	66 67 89 04          	mov    %ax,(%si)
    8abb:	24 66                	and    $0x66,%al
    8abd:	67 8b 04             	mov    (%si),%eax
    8ac0:	24 66                	and    $0x66,%al
    8ac2:	83 c4 04             	add    $0x4,%esp
    8ac5:	8e e0                	mov    %eax,%fs
    8ac7:	07                   	pop    %es
    8ac8:	0f a9                	pop    %gs
    8aca:	1f                   	pop    %ds
    8acb:	61                   	popa   
    8acc:	c9                   	leave  
    8acd:	cf                   	iret   

00008ace <fn2>:
    8ace:	66 83 ec 04          	sub    $0x4,%sp
    8ad2:	b4 00                	mov    $0x0,%ah
    8ad4:	cd 16                	int    $0x16
    8ad6:	b4 00                	mov    $0x0,%ah
    8ad8:	66 67 89 04          	mov    %ax,(%si)
    8adc:	24 66                	and    $0x66,%al
    8ade:	67 8b 04             	mov    (%si),%eax
    8ae1:	24 b4                	and    $0xb4,%al
    8ae3:	0e                   	push   %cs
    8ae4:	b3 00                	mov    $0x0,%bl
    8ae6:	cd 10                	int    $0x10
    8ae8:	66 83 c4 04          	add    $0x4,%sp
    8aec:	8e e0                	mov    %eax,%fs
    8aee:	07                   	pop    %es
    8aef:	0f a9                	pop    %gs
    8af1:	1f                   	pop    %ds
    8af2:	61                   	popa   
    8af3:	c9                   	leave  
    8af4:	cf                   	iret   

00008af5 <fn3>:
    8af5:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    8afa:	07                   	pop    %es
    8afb:	0f a9                	pop    %gs
    8afd:	1f                   	pop    %ds
    8afe:	61                   	popa   
    8aff:	c9                   	leave  
    8b00:	cf                   	iret   

00008b01 <_SetINT37h>:
    8b01:	fa                   	cli    
    8b02:	e8 83 03 cf fa       	call   facf8e8a <_end+0xfaced2e6>

00008b06 <_SetINT38h>:
    8b06:	fa                   	cli    
    8b07:	50                   	push   %eax
    8b08:	1e                   	push   %ds
    8b09:	8c c8                	mov    %cs,%eax
    8b0b:	8e d8                	mov    %eax,%ds
    8b0d:	6a 00                	push   $0x0
    8b0f:	e8 8d f6 1f 58       	call   582081a1 <_end+0x581fc5fd>
    8b14:	cf                   	iret   

00008b15 <_SetINT39h>:
    8b15:	fa                   	cli    
    8b16:	c8 00 00 00          	enter  $0x0,$0x0
    8b1a:	1e                   	push   %ds
    8b1b:	6a 00                	push   $0x0
    8b1d:	8c c8                	mov    %cs,%eax
    8b1f:	8e d8                	mov    %eax,%ds
    8b21:	e8 57 f7 1f c9       	call   c920827d <_end+0xc91fc6d9>
    8b26:	cf                   	iret   

00008b27 <_SetINT41h>:
    8b27:	fa                   	cli    
    8b28:	e8 95 02 e8 06       	call   6e88dc2 <_end+0x6e7d21e>
    8b2d:	03 b0 20 e6 20 e6    	add    -0x19df19e0(%eax),%esi
    8b33:	a0 fb cf fa c8       	mov    0xc8facffb,%al

00008b36 <_SetINT43h>:
    8b36:	fa                   	cli    
    8b37:	c8 00 00 00          	enter  $0x0,$0x0
    8b3b:	1e                   	push   %ds
    8b3c:	6a 00                	push   $0x0
    8b3e:	8c c8                	mov    %cs,%eax
    8b40:	8e d8                	mov    %eax,%ds
    8b42:	e8 12 f7 1f c9       	call   c9208259 <_end+0xc91fc6b5>
    8b47:	cf                   	iret   

00008b48 <_SetINT3Ah>:
    8b48:	fa                   	cli    
    8b49:	c8 00 00 00          	enter  $0x0,$0x0
    8b4d:	1e                   	push   %ds
    8b4e:	66 67 8b 45 08       	mov    0x8(%di),%ax
    8b53:	66 50                	push   %ax
    8b55:	6a 00                	push   $0x0
    8b57:	8c c8                	mov    %cs,%eax
    8b59:	8e d8                	mov    %eax,%ds
    8b5b:	e8 57 f6 1f c9       	call   c92081b7 <_end+0xc91fc613>
    8b60:	cf                   	iret   

00008b61 <_initialInt>:
    8b61:	c8 00 00 00          	enter  $0x0,$0x0
    8b65:	60                   	pusha  
    8b66:	06                   	push   %es
    8b67:	1e                   	push   %ds
    8b68:	8c c8                	mov    %cs,%eax
    8b6a:	8e d8                	mov    %eax,%ds
    8b6c:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b71:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
    8b76:	00 f7                	add    %dh,%bh
    8b78:	e3 89                	jecxz  8b03 <_SetINT37h+0x2>
    8b7a:	c7                   	(bad)  
    8b7b:	b8 55 88 26 89       	mov    $0x89268855,%eax
    8b80:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b85:	45                   	inc    %ebp
    8b86:	02 1f                	add    (%edi),%bl
    8b88:	07                   	pop    %es
    8b89:	61                   	popa   
    8b8a:	60                   	pusha  
    8b8b:	06                   	push   %es
    8b8c:	1e                   	push   %ds
    8b8d:	8c c8                	mov    %cs,%eax
    8b8f:	8e d8                	mov    %eax,%ds
    8b91:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b96:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
    8b9b:	00 f7                	add    %dh,%bh
    8b9d:	e3 89                	jecxz  8b28 <_SetINT41h+0x1>
    8b9f:	c7                   	(bad)  
    8ba0:	b8 a4 89 26 89       	mov    $0x892689a4,%eax
    8ba5:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8baa:	45                   	inc    %ebp
    8bab:	02 1f                	add    (%edi),%bl
    8bad:	07                   	pop    %es
    8bae:	61                   	popa   
    8baf:	60                   	pusha  
    8bb0:	06                   	push   %es
    8bb1:	1e                   	push   %ds
    8bb2:	8c c8                	mov    %cs,%eax
    8bb4:	8e d8                	mov    %eax,%ds
    8bb6:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8bbb:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
    8bc0:	00 f7                	add    %dh,%bh
    8bc2:	e3 89                	jecxz  8b4d <_SetINT3Ah+0x5>
    8bc4:	c7                   	(bad)  
    8bc5:	b8 da 89 26 89       	mov    $0x892689da,%eax
    8bca:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8bcf:	45                   	inc    %ebp
    8bd0:	02 1f                	add    (%edi),%bl
    8bd2:	07                   	pop    %es
    8bd3:	61                   	popa   
    8bd4:	60                   	pusha  
    8bd5:	06                   	push   %es
    8bd6:	1e                   	push   %ds
    8bd7:	8c c8                	mov    %cs,%eax
    8bd9:	8e d8                	mov    %eax,%ds
    8bdb:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8be0:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
    8be5:	00 f7                	add    %dh,%bh
    8be7:	e3 89                	jecxz  8b72 <_initialInt+0x11>
    8be9:	c7                   	(bad)  
    8bea:	b8 10 8a 26 89       	mov    $0x89268a10,%eax
    8bef:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8bf4:	45                   	inc    %ebp
    8bf5:	02 1f                	add    (%edi),%bl
    8bf7:	07                   	pop    %es
    8bf8:	61                   	popa   
    8bf9:	60                   	pusha  
    8bfa:	06                   	push   %es
    8bfb:	1e                   	push   %ds
    8bfc:	8c c8                	mov    %cs,%eax
    8bfe:	8e d8                	mov    %eax,%ds
    8c00:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8c05:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
    8c0a:	00 f7                	add    %dh,%bh
    8c0c:	e3 89                	jecxz  8b97 <_initialInt+0x36>
    8c0e:	c7                   	(bad)  
    8c0f:	b8 40 8a 26 89       	mov    $0x89268a40,%eax
    8c14:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c19:	45                   	inc    %ebp
    8c1a:	02 1f                	add    (%edi),%bl
    8c1c:	07                   	pop    %es
    8c1d:	61                   	popa   
    8c1e:	60                   	pusha  
    8c1f:	06                   	push   %es
    8c20:	1e                   	push   %ds
    8c21:	8c c8                	mov    %cs,%eax
    8c23:	8e d8                	mov    %eax,%ds
    8c25:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8c2a:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
    8c2f:	00 f7                	add    %dh,%bh
    8c31:	e3 89                	jecxz  8bbc <_initialInt+0x5b>
    8c33:	c7                   	(bad)  
    8c34:	b8 70 8a 26 89       	mov    $0x89268a70,%eax
    8c39:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c3e:	45                   	inc    %ebp
    8c3f:	02 1f                	add    (%edi),%bl
    8c41:	07                   	pop    %es
    8c42:	61                   	popa   
    8c43:	60                   	pusha  
    8c44:	06                   	push   %es
    8c45:	1e                   	push   %ds
    8c46:	8c c8                	mov    %cs,%eax
    8c48:	8e d8                	mov    %eax,%ds
    8c4a:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8c4f:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
    8c54:	00 f7                	add    %dh,%bh
    8c56:	e3 89                	jecxz  8be1 <_initialInt+0x80>
    8c58:	c7                   	(bad)  
    8c59:	b8 01 8b 26 89       	mov    $0x89268b01,%eax
    8c5e:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c63:	45                   	inc    %ebp
    8c64:	02 1f                	add    (%edi),%bl
    8c66:	07                   	pop    %es
    8c67:	61                   	popa   
    8c68:	60                   	pusha  
    8c69:	06                   	push   %es
    8c6a:	1e                   	push   %ds
    8c6b:	8c c8                	mov    %cs,%eax
    8c6d:	8e d8                	mov    %eax,%ds
    8c6f:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8c74:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
    8c79:	00 f7                	add    %dh,%bh
    8c7b:	e3 89                	jecxz  8c06 <_initialInt+0xa5>
    8c7d:	c7                   	(bad)  
    8c7e:	b8 06 8b 26 89       	mov    $0x89268b06,%eax
    8c83:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c88:	45                   	inc    %ebp
    8c89:	02 1f                	add    (%edi),%bl
    8c8b:	07                   	pop    %es
    8c8c:	61                   	popa   
    8c8d:	60                   	pusha  
    8c8e:	06                   	push   %es
    8c8f:	1e                   	push   %ds
    8c90:	8c c8                	mov    %cs,%eax
    8c92:	8e d8                	mov    %eax,%ds
    8c94:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8c99:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
    8c9e:	00 f7                	add    %dh,%bh
    8ca0:	e3 89                	jecxz  8c2b <_initialInt+0xca>
    8ca2:	c7                   	(bad)  
    8ca3:	b8 15 8b 26 89       	mov    $0x89268b15,%eax
    8ca8:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8cad:	45                   	inc    %ebp
    8cae:	02 1f                	add    (%edi),%bl
    8cb0:	07                   	pop    %es
    8cb1:	61                   	popa   
    8cb2:	60                   	pusha  
    8cb3:	06                   	push   %es
    8cb4:	1e                   	push   %ds
    8cb5:	8c c8                	mov    %cs,%eax
    8cb7:	8e d8                	mov    %eax,%ds
    8cb9:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8cbe:	b8 3a 00 bb 04       	mov    $0x4bb003a,%eax
    8cc3:	00 f7                	add    %dh,%bh
    8cc5:	e3 89                	jecxz  8c50 <_initialInt+0xef>
    8cc7:	c7                   	(bad)  
    8cc8:	b8 48 8b 26 89       	mov    $0x89268b48,%eax
    8ccd:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8cd2:	45                   	inc    %ebp
    8cd3:	02 1f                	add    (%edi),%bl
    8cd5:	07                   	pop    %es
    8cd6:	61                   	popa   
    8cd7:	60                   	pusha  
    8cd8:	06                   	push   %es
    8cd9:	1e                   	push   %ds
    8cda:	8c c8                	mov    %cs,%eax
    8cdc:	8e d8                	mov    %eax,%ds
    8cde:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8ce3:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
    8ce8:	00 f7                	add    %dh,%bh
    8cea:	e3 89                	jecxz  8c75 <_initialInt+0x114>
    8cec:	c7                   	(bad)  
    8ced:	b8 27 8b 26 89       	mov    $0x89268b27,%eax
    8cf2:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8cf7:	45                   	inc    %ebp
    8cf8:	02 1f                	add    (%edi),%bl
    8cfa:	07                   	pop    %es
    8cfb:	61                   	popa   
    8cfc:	60                   	pusha  
    8cfd:	06                   	push   %es
    8cfe:	1e                   	push   %ds
    8cff:	8c c8                	mov    %cs,%eax
    8d01:	8e d8                	mov    %eax,%ds
    8d03:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8d08:	b8 42 00 bb 04       	mov    $0x4bb0042,%eax
    8d0d:	00 f7                	add    %dh,%bh
    8d0f:	e3 89                	jecxz  8c9a <_initialInt+0x139>
    8d11:	c7                   	(bad)  
    8d12:	b8 91 88 26 89       	mov    $0x89268891,%eax
    8d17:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8d1c:	45                   	inc    %ebp
    8d1d:	02 1f                	add    (%edi),%bl
    8d1f:	07                   	pop    %es
    8d20:	61                   	popa   
    8d21:	60                   	pusha  
    8d22:	06                   	push   %es
    8d23:	1e                   	push   %ds
    8d24:	8c c8                	mov    %cs,%eax
    8d26:	8e d8                	mov    %eax,%ds
    8d28:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8d2d:	b8 43 00 bb 04       	mov    $0x4bb0043,%eax
    8d32:	00 f7                	add    %dh,%bh
    8d34:	e3 89                	jecxz  8cbf <_initialInt+0x15e>
    8d36:	c7                   	(bad)  
    8d37:	b8 36 8b 26 89       	mov    $0x89268b36,%eax
    8d3c:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8d41:	45                   	inc    %ebp
    8d42:	02 1f                	add    (%edi),%bl
    8d44:	07                   	pop    %es
    8d45:	61                   	popa   
    8d46:	c9                   	leave  
    8d47:	66 5a                	pop    %dx
    8d49:	ff e2                	jmp    *%edx

00008d4b <_initialInt_09h>:
    8d4b:	c8 00 00 00          	enter  $0x0,$0x0
    8d4f:	a1 24 00 a3 d2       	mov    0xd2a30024,%eax
    8d54:	86 a1 26 00 a3 d4    	xchg   %ah,-0x2b5cffda(%ecx)
    8d5a:	86 60 06             	xchg   %ah,0x6(%eax)
    8d5d:	1e                   	push   %ds
    8d5e:	8c c8                	mov    %cs,%eax
    8d60:	8e d8                	mov    %eax,%ds
    8d62:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8d67:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
    8d6c:	00 f7                	add    %dh,%bh
    8d6e:	e3 89                	jecxz  8cf9 <_initialInt+0x198>
    8d70:	c7                   	(bad)  
    8d71:	b8 16 89 26 89       	mov    $0x89268916,%eax
    8d76:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8d7b:	45                   	inc    %ebp
    8d7c:	02 1f                	add    (%edi),%bl
    8d7e:	07                   	pop    %es
    8d7f:	61                   	popa   
    8d80:	c9                   	leave  
    8d81:	66 5a                	pop    %dx
    8d83:	ff e2                	jmp    *%edx

00008d85 <_initialInt_08h>:
    8d85:	c8 00 00 00          	enter  $0x0,$0x0
    8d89:	b0 40                	mov    $0x40,%al
    8d8b:	e6 43                	out    %al,$0x43
    8d8d:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
    8d92:	88 e0                	mov    %ah,%al
    8d94:	e6 40                	out    %al,$0x40
    8d96:	60                   	pusha  
    8d97:	06                   	push   %es
    8d98:	1e                   	push   %ds
    8d99:	8c c8                	mov    %cs,%eax
    8d9b:	8e d8                	mov    %eax,%ds
    8d9d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8da2:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
    8da7:	00 f7                	add    %dh,%bh
    8da9:	e3 89                	jecxz  8d34 <_initialInt+0x1d3>
    8dab:	c7                   	(bad)  
    8dac:	b8 91 88 26 89       	mov    $0x89268891,%eax
    8db1:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8db6:	45                   	inc    %ebp
    8db7:	02 1f                	add    (%edi),%bl
    8db9:	07                   	pop    %es
    8dba:	61                   	popa   
    8dbb:	c9                   	leave  
    8dbc:	66 5a                	pop    %dx
    8dbe:	ff e2                	jmp    *%edx

00008dc0 <_save>:
    8dc0:	66 89 26             	mov    %sp,(%esi)
    8dc3:	ea 86 1e 0e 1f 8f 06 	ljmp   $0x68f,$0x1f0e1e86
    8dca:	da 86 8f 06 de 86    	fiaddl -0x7921f971(%esi)
    8dd0:	66 89 26             	mov    %sp,(%esi)
    8dd3:	e6 86                	out    %al,$0x86
    8dd5:	66 89 36             	mov    %si,(%esi)
    8dd8:	e0 86                	loopne 8d60 <_initialInt_09h+0x15>
    8dda:	66 8b 36             	mov    (%esi),%si
    8ddd:	a0 bb 66 83 c6       	mov    0xc68366bb,%al
    8de2:	2c 67                	sub    $0x67,%al
    8de4:	8f 06                	popl   (%esi)
    8de6:	67 8f 46 04          	popl   0x4(%bp)
    8dea:	67 c7 46 06 00 00 67 	movl   $0x8f670000,0x6(%bp)
    8df1:	8f 
    8df2:	46                   	inc    %esi
    8df3:	08 67 c7             	or     %ah,-0x39(%edi)
    8df6:	46                   	inc    %esi
    8df7:	0a 00                	or     (%eax),%al
    8df9:	00 66 67             	add    %ah,0x67(%esi)
    8dfc:	89 66 fc             	mov    %esp,-0x4(%esi)
    8dff:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
    8e03:	8c de                	mov    %ds,%esi
    8e05:	8e d6                	mov    %esi,%ss
    8e07:	66 8b 26             	mov    (%esi),%sp
    8e0a:	a0 bb 66 83 c4       	mov    0xc48366bb,%al
    8e0f:	24 6a                	and    $0x6a,%al
    8e11:	00 ff                	add    %bh,%bh
    8e13:	36 da 86 6a 00 06 66 	fiaddl %ss:0x6606006a(%esi)
    8e1a:	55                   	push   %ebp
    8e1b:	66 57                	push   %di
    8e1d:	66 ff 36             	pushw  (%esi)
    8e20:	e0 86                	loopne 8da8 <_initialInt_08h+0x23>
    8e22:	66 52                	push   %dx
    8e24:	66 51                	push   %cx
    8e26:	66 53                	push   %bx
    8e28:	66 50                	push   %ax
    8e2a:	66 8b 26             	mov    (%esi),%sp
    8e2d:	e6 86                	out    %al,$0x86
    8e2f:	a1 de 86 ff e0       	mov    0xe0ff86de,%eax

00008e34 <_restart>:
    8e34:	66 89 26             	mov    %sp,(%esi)
    8e37:	e6 86                	out    %al,$0x86
    8e39:	66 8b 26             	mov    (%esi),%sp
    8e3c:	a0 bb 66 58 66       	mov    0x665866bb,%al
    8e41:	5b                   	pop    %ebx
    8e42:	66 59                	pop    %cx
    8e44:	66 5a                	pop    %dx
    8e46:	66 5e                	pop    %si
    8e48:	66 5f                	pop    %di
    8e4a:	66 5d                	pop    %bp
    8e4c:	07                   	pop    %es
    8e4d:	8f 06                	popl   (%esi)
    8e4f:	e4 86                	in     $0x86,%al
    8e51:	8f 06                	popl   (%esi)
    8e53:	da 86 8f 06 e4 86    	fiaddl -0x791bf971(%esi)
    8e59:	66 89 36             	mov    %si,(%esi)
    8e5c:	e0 86                	loopne 8de4 <_save+0x24>
    8e5e:	17                   	pop    %ss
    8e5f:	8f 06                	popl   (%esi)
    8e61:	e4 86                	in     $0x86,%al
    8e63:	66 89 e6             	mov    %sp,%si
    8e66:	66 67 8b 26 67 ff    	mov    -0x99,%sp
    8e6c:	76 0c                	jbe    8e7a <_restart+0x46>
    8e6e:	67 ff 76 08          	pushl  0x8(%bp)
    8e72:	67 ff 76 04          	pushl  0x4(%bp)
    8e76:	66 8b 36             	mov    (%esi),%si
    8e79:	e0 86                	loopne 8e01 <_save+0x41>
    8e7b:	8e 1e                	mov    (%esi),%ds
    8e7d:	da 86 50 b0 20 e6    	fiaddl -0x19df4fb0(%esi)
    8e83:	20 e6                	and    %ah,%dh
    8e85:	a0 58 cf c8 00       	mov    0xc8cf58,%al

00008e88 <RTC_Timer>:
    8e88:	c8 00 00 00          	enter  $0x0,$0x0
    8e8c:	1e                   	push   %ds
    8e8d:	06                   	push   %es
    8e8e:	60                   	pusha  
    8e8f:	8c c8                	mov    %cs,%eax
    8e91:	8e d8                	mov    %eax,%ds
    8e93:	8c c8                	mov    %cs,%eax
    8e95:	8e c0                	mov    %eax,%es
    8e97:	bf 60 b9 b4 02       	mov    $0x2b4b960,%edi
    8e9c:	cd 1a                	int    $0x1a
    8e9e:	88 e8                	mov    %ch,%al
    8ea0:	b4 00                	mov    $0x0,%ah
    8ea2:	b3 10                	mov    $0x10,%bl
    8ea4:	f6 f3                	div    %bl
    8ea6:	04 30                	add    $0x30,%al
    8ea8:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
    8eae:	88 e8                	mov    %ch,%al
    8eb0:	24 0f                	and    $0xf,%al
    8eb2:	04 30                	add    $0x30,%al
    8eb4:	88 45 01             	mov    %al,0x1(%ebp)
    8eb7:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
    8ebb:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
    8ebf:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
    8ec3:	b4 02                	mov    $0x2,%ah
    8ec5:	cd 1a                	int    $0x1a
    8ec7:	88 c8                	mov    %cl,%al
    8ec9:	b4 00                	mov    $0x0,%ah
    8ecb:	b3 10                	mov    $0x10,%bl
    8ecd:	f6 f3                	div    %bl
    8ecf:	04 30                	add    $0x30,%al
    8ed1:	88 45 05             	mov    %al,0x5(%ebp)
    8ed4:	b4 02                	mov    $0x2,%ah
    8ed6:	cd 1a                	int    $0x1a
    8ed8:	88 c8                	mov    %cl,%al
    8eda:	24 0f                	and    $0xf,%al
    8edc:	04 30                	add    $0x30,%al
    8ede:	88 45 06             	mov    %al,0x6(%ebp)
    8ee1:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
    8ee5:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
    8ee9:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
    8eed:	8c c8                	mov    %cs,%eax
    8eef:	8e d8                	mov    %eax,%ds
    8ef1:	8e c0                	mov    %eax,%es
    8ef3:	bd ff 86 8c d8       	mov    $0xd88c86ff,%ebp
    8ef8:	8e c0                	mov    %eax,%es
    8efa:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
    8eff:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
    8f05:	b2 0a                	mov    $0xa,%dl
    8f07:	cd 10                	int    $0x10
    8f09:	8c c8                	mov    %cs,%eax
    8f0b:	8e d8                	mov    %eax,%ds
    8f0d:	8e c0                	mov    %eax,%es
    8f0f:	bd 60 b9 8c d8       	mov    $0xd88cb960,%ebp
    8f14:	8e c0                	mov    %eax,%es
    8f16:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
    8f1b:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
    8f21:	b2 1e                	mov    $0x1e,%dl
    8f23:	cd 10                	int    $0x10
    8f25:	61                   	popa   
    8f26:	07                   	pop    %es
    8f27:	1f                   	pop    %ds
    8f28:	c9                   	leave  
    8f29:	66 5a                	pop    %dx
    8f2b:	ff e2                	jmp    *%edx

00008f2d <_Get_Hours_1>:
    8f2d:	c8 04 00 00          	enter  $0x4,$0x0
    8f31:	b4 02                	mov    $0x2,%ah
    8f33:	cd 1a                	int    $0x1a
    8f35:	88 e8                	mov    %ch,%al
    8f37:	b4 00                	mov    $0x0,%ah
    8f39:	b3 10                	mov    $0x10,%bl
    8f3b:	f6 f3                	div    %bl
    8f3d:	30 e4                	xor    %ah,%ah
    8f3f:	66 67 89 04          	mov    %ax,(%si)
    8f43:	24 66                	and    $0x66,%al
    8f45:	67 8b 04             	mov    (%si),%eax
    8f48:	24 c9                	and    $0xc9,%al
    8f4a:	66 5a                	pop    %dx
    8f4c:	ff e2                	jmp    *%edx

00008f4e <_Get_Hours_2>:
    8f4e:	c8 04 00 00          	enter  $0x4,$0x0
    8f52:	b4 02                	mov    $0x2,%ah
    8f54:	cd 1a                	int    $0x1a
    8f56:	88 e8                	mov    %ch,%al
    8f58:	24 0f                	and    $0xf,%al
    8f5a:	30 e4                	xor    %ah,%ah
    8f5c:	66 67 89 04          	mov    %ax,(%si)
    8f60:	24 66                	and    $0x66,%al
    8f62:	67 8b 04             	mov    (%si),%eax
    8f65:	24 c9                	and    $0xc9,%al
    8f67:	66 5a                	pop    %dx
    8f69:	ff e2                	jmp    *%edx

00008f6b <_Get_Minutes_1>:
    8f6b:	c8 04 00 00          	enter  $0x4,$0x0
    8f6f:	b4 02                	mov    $0x2,%ah
    8f71:	cd 1a                	int    $0x1a
    8f73:	88 c8                	mov    %cl,%al
    8f75:	b4 00                	mov    $0x0,%ah
    8f77:	b3 10                	mov    $0x10,%bl
    8f79:	f6 f3                	div    %bl
    8f7b:	30 e4                	xor    %ah,%ah
    8f7d:	66 67 89 04          	mov    %ax,(%si)
    8f81:	24 66                	and    $0x66,%al
    8f83:	67 8b 04             	mov    (%si),%eax
    8f86:	24 c9                	and    $0xc9,%al
    8f88:	66 5a                	pop    %dx
    8f8a:	ff e2                	jmp    *%edx

00008f8c <_Get_Minutes_2>:
    8f8c:	c8 04 00 00          	enter  $0x4,$0x0
    8f90:	b4 02                	mov    $0x2,%ah
    8f92:	cd 1a                	int    $0x1a
    8f94:	88 c8                	mov    %cl,%al
    8f96:	24 0f                	and    $0xf,%al
    8f98:	30 e4                	xor    %ah,%ah
    8f9a:	66 67 89 04          	mov    %ax,(%si)
    8f9e:	24 66                	and    $0x66,%al
    8fa0:	67 8b 04             	mov    (%si),%eax
    8fa3:	24 c9                	and    $0xc9,%al
    8fa5:	66 5a                	pop    %dx
    8fa7:	ff e2                	jmp    *%edx

00008fa9 <terminal>:
#include "../syscall/use.h"
#include "command.h"
#include "../syscall/stdio.h"
#include "../syscall/time.h"
void run(int queue[],int size);
int terminal(){
    8fa9:	66 55                	push   %bp
    8fab:	66 89 e5             	mov    %sp,%bp
    8fae:	66 57                	push   %di
    8fb0:	66 56                	push   %si
    8fb2:	66 53                	push   %bx
    8fb4:	66 83 ec 60          	sub    $0x60,%sp
    8fb8:	66 89 e0             	mov    %sp,%ax
    8fbb:	66 89 c6             	mov    %ax,%si
    char const *CMDHead = "hongyangchendeMacBook-Air:chenhyOS users$ ";
    8fbe:	67 66 c7 45 e4 78 9f 	movw   $0x9f78,-0x1c(%di)
    8fc5:	00 00                	add    %al,(%eax)
    char const *controlMsg1 = "The queue is full,waiting for the Enter Key.";
    8fc7:	67 66 c7 45 e0 a4 9f 	movw   $0x9fa4,-0x20(%di)
    8fce:	00 00                	add    %al,(%eax)
    char const *controlMsg2 = "The queue is empty!";
    8fd0:	67 66 c7 45 dc d1 9f 	movw   $0x9fd1,-0x24(%di)
    8fd7:	00 00                	add    %al,(%eax)
    char const *ByeByeMsg = "ByeBye";
    8fd9:	67 66 c7 45 d8 e5 9f 	movw   $0x9fe5,-0x28(%di)
    8fe0:	00 00                	add    %al,(%eax)
    char const *filelist = "Program1 upleft   Program2 upright  \r\nProgram3 downleft  Program4 downright";
    8fe2:	67 66 c7 45 d4 ec 9f 	movw   $0x9fec,-0x2c(%di)
    8fe9:	00 00                	add    %al,(%eax)
    char const *HelpMsg1 = "Enter 1,2,3,4 to run the program\n\rEnter quit,to quit\n\rEnter help to print this script again";
    8feb:	67 66 c7 45 d0 38 a0 	movw   $0xa038,-0x30(%di)
    8ff2:	00 00                	add    %al,(%eax)
    char const *help = "help";
    8ff4:	67 66 c7 45 cc 94 a0 	movw   $0xa094,-0x34(%di)
    8ffb:	00 00                	add    %al,(%eax)
    char const *quit = "quit";
    8ffd:	67 66 c7 45 c8 99 a0 	movw   $0xa099,-0x38(%di)
    9004:	00 00                	add    %al,(%eax)
    char const *lst = "ls";
    9006:	67 66 c7 45 c4 9e a0 	movw   $0xa09e,-0x3c(%di)
    900d:	00 00                	add    %al,(%eax)
    int Maxsize = 10;
    900f:	67 66 c7 45 c0 0a 00 	movw   $0xa,-0x40(%di)
    9016:	00 00                	add    %al,(%eax)
    print_next_line(HelpMsg1);
    9018:	67 66 ff 75 d0       	pushw  -0x30(%di)
    901d:	66 e8 9c 06          	callw  96bd <printsint+0xf6>
    9021:	00 00                	add    %al,(%eax)
    9023:	66 83 c4 04          	add    $0x4,%sp
    
            // _RunProgress(0xC000);
   prints(CMDHead);
    9027:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    902c:	66 e8 1a 05          	callw  954a <print+0x8f>
    9030:	00 00                	add    %al,(%eax)
    9032:	66 83 c4 04          	add    $0x4,%sp
    char recived[10] = {};
    9036:	67 66 8d 5d 96       	lea    -0x6a(%di),%bx
    903b:	66 ba 0a 00          	mov    $0xa,%dx
    903f:	00 00                	add    %al,(%eax)
    9041:	b0 00                	mov    $0x0,%al
    9043:	66 89 df             	mov    %bx,%di
    9046:	66 89 d1             	mov    %dx,%cx
    9049:	f3 aa                	rep stos %al,%es:(%edi)
    recived[0] = 0;
    904b:	67 c6 45 96 00       	movb   $0x0,-0x6a(%di)
    int index_of_str = 0;
    9050:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9057:	00 00                	add    %al,(%eax)
    int i = 1;
    9059:	67 66 c7 45 bc 01 00 	movw   $0x1,-0x44(%di)
    9060:	00 00                	add    %al,(%eax)
    int queue[Maxsize];
    9062:	67 66 8b 45 c0       	mov    -0x40(%di),%ax
    9067:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    906c:	67 66 89 55 b8       	mov    %dx,-0x48(%di)
    9071:	66 c1 e0 02          	shl    $0x2,%ax
    9075:	67 66 8d 50 03       	lea    0x3(%bx,%si),%dx
    907a:	66 b8 04 00          	mov    $0x4,%ax
    907e:	00 00                	add    %al,(%eax)
    9080:	66 48                	dec    %ax
    9082:	66 01 d0             	add    %dx,%ax
    9085:	66 bb 04 00          	mov    $0x4,%bx
    9089:	00 00                	add    %al,(%eax)
    908b:	66 ba 00 00          	mov    $0x0,%dx
    908f:	00 00                	add    %al,(%eax)
    9091:	66 f7 f3             	div    %bx
    9094:	66 6b c0 04          	imul   $0x4,%ax,%ax
    9098:	66 29 c4             	sub    %ax,%sp
    909b:	66 89 e0             	mov    %sp,%ax
    909e:	66 83 c0 03          	add    $0x3,%ax
    90a2:	66 c1 e8 02          	shr    $0x2,%ax
    90a6:	66 c1 e0 02          	shl    $0x2,%ax
    90aa:	67 66 89 45 b4       	mov    %ax,-0x4c(%di)
    int num_of_queue = 0;
    90af:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    90b6:	00 00                	add    %al,(%eax)
    int number = 0;
    90b8:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    90bf:	00 00                	add    %al,(%eax)
    int k = 0;
    90c1:	67 66 c7 45 b0 00 00 	movw   $0x0,-0x50(%di)
    90c8:	00 00                	add    %al,(%eax)
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    90ca:	e9 6e 03 66 e8       	jmp    e866943d <_end+0xe865d899>
        char save = getch();
    90cf:	95                   	xchg   %eax,%ebp
    90d0:	06                   	push   %es
    90d1:	00 00                	add    %al,(%eax)
    90d3:	67 88 45 af          	mov    %al,-0x51(%di)
        if(save == 32){//空格
    90d7:	67 80 7d af 20       	cmpb   $0x20,-0x51(%di)
    90dc:	75 74                	jne    9152 <terminal+0x1a9>
            if(num_of_queue == Maxsize){
    90de:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    90e3:	67 66 3b 45 c0       	cmp    -0x40(%di),%ax
    90e8:	75 31                	jne    911b <terminal+0x172>
                prints("\n\r");
    90ea:	66 68 a1 a0          	pushw  $0xa0a1
    90ee:	00 00                	add    %al,(%eax)
    90f0:	66 e8 56 04          	callw  954a <print+0x8f>
    90f4:	00 00                	add    %al,(%eax)
    90f6:	66 83 c4 04          	add    $0x4,%sp
                print_next_line(controlMsg1);
    90fa:	67 66 ff 75 e0       	pushw  -0x20(%di)
    90ff:	66 e8 ba 05          	callw  96bd <printsint+0xf6>
    9103:	00 00                	add    %al,(%eax)
    9105:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    9109:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    910e:	66 e8 38 04          	callw  954a <print+0x8f>
    9112:	00 00                	add    %al,(%eax)
    9114:	66 83 c4 04          	add    $0x4,%sp
                continue;
    9118:	e9 20 03 67 66       	jmp    6667943d <_end+0x6666d899>
            }
            printc(save);
    911d:	0f be 45 af          	movsbl -0x51(%ebp),%eax
    9121:	66 50                	push   %ax
    9123:	66 e8 75 04          	callw  959c <prints+0x50>
    9127:	00 00                	add    %al,(%eax)
    9129:	66 83 c4 04          	add    $0x4,%sp
            queue[num_of_queue] = number;
    912d:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    9132:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    9137:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    913c:	67 66 89 0c          	mov    %cx,(%si)
    9140:	90                   	nop
            num_of_queue ++;
    9141:	67 66 ff 45 ec       	incw   -0x14(%di)
            number = 0;
    9146:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    914d:	00 00                	add    %al,(%eax)
            continue;
    914f:	e9 e9 02 67 80       	jmp    8067943d <_end+0x8066d899>
        }
       else  if(save == 13){//回车
    9154:	7d af                	jge    9105 <terminal+0x15c>
    9156:	0d 0f 85 39 02       	or     $0x239850f,%eax
            int strcmp1 = strcmp(recived,quit);
    915b:	67 66 ff 75 c8       	pushw  -0x38(%di)
    9160:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    9165:	66 50                	push   %ax
    9167:	66 e8 1a 07          	callw  9885 <print_different_color+0x86>
    916b:	00 00                	add    %al,(%eax)
    916d:	66 83 c4 08          	add    $0x8,%sp
    9171:	67 66 89 45 a8       	mov    %ax,-0x58(%di)
            int strcmp2 = strcmp(recived,help);
    9176:	67 66 ff 75 cc       	pushw  -0x34(%di)
    917b:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    9180:	66 50                	push   %ax
    9182:	66 e8 ff 06          	callw  9885 <print_different_color+0x86>
    9186:	00 00                	add    %al,(%eax)
    9188:	66 83 c4 08          	add    $0x8,%sp
    918c:	67 66 89 45 a4       	mov    %ax,-0x5c(%di)
            int strcmp3 = strcmp(recived,lst);
    9191:	67 66 ff 75 c4       	pushw  -0x3c(%di)
    9196:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    919b:	66 50                	push   %ax
    919d:	66 e8 e4 06          	callw  9885 <print_different_color+0x86>
    91a1:	00 00                	add    %al,(%eax)
    91a3:	66 83 c4 08          	add    $0x8,%sp
    91a7:	67 66 89 45 a0       	mov    %ax,-0x60(%di)
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
    91ac:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    91b2:	75 22                	jne    91d6 <terminal+0x22d>
    91b4:	67 66 83 7d e8 00    	cmpw   $0x0,-0x18(%di)
    91ba:	75 1a                	jne    91d6 <terminal+0x22d>
    91bc:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    91c2:	74 12                	je     91d6 <terminal+0x22d>
    91c4:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    91ca:	74 0a                	je     91d6 <terminal+0x22d>
    91cc:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    91d2:	0f 85 73 01 67 66    	jne    6667934b <_end+0x6666d7a7>
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    91d8:	83 7d a8 01          	cmpl   $0x1,-0x58(%ebp)
    91dc:	74 12                	je     91f0 <terminal+0x247>
    91de:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    91e4:	74 0a                	je     91f0 <terminal+0x247>
    91e6:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    91ec:	0f 85 b9 00 66 68    	jne    686692ab <_end+0x6865d707>
                    print_next_line("");
    91f2:	a4                   	movsb  %ds:(%esi),%es:(%edi)
    91f3:	a0 00 00 66 e8       	mov    0xe8660000,%al
    91f8:	c3                   	ret    
    91f9:	04 00                	add    $0x0,%al
    91fb:	00 66 83             	add    %ah,-0x7d(%esi)
    91fe:	c4 04 67             	les    (%edi,%eiz,2),%eax
                    if(strcmp1 == 1){
    9201:	66 83 7d a8 01       	cmpw   $0x1,-0x58(%ebp)
    9206:	75 2b                	jne    9233 <terminal+0x28a>
                        print_next_line(ByeByeMsg);
    9208:	67 66 ff 75 d8       	pushw  -0x28(%di)
    920d:	66 e8 ac 04          	callw  96bd <printsint+0xf6>
    9211:	00 00                	add    %al,(%eax)
    9213:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    9217:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    921e:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    9220:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    9225:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    922a:	66 01 d0             	add    %dx,%ax
    922d:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    9231:	eb 64                	jmp    9297 <terminal+0x2ee>
                    }                  
                   else if(strcmp2 == 1){
    9233:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    9239:	75 2b                	jne    9266 <terminal+0x2bd>
                         print_next_line(HelpMsg1);
    923b:	67 66 ff 75 d0       	pushw  -0x30(%di)
    9240:	66 e8 79 04          	callw  96bd <printsint+0xf6>
    9244:	00 00                	add    %al,(%eax)
    9246:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    924a:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9251:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    9253:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    9258:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    925d:	66 01 d0             	add    %dx,%ax
    9260:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    9264:	eb 31                	jmp    9297 <terminal+0x2ee>
                    }
                    else if(strcmp3 == 1){
    9266:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    926c:	75 29                	jne    9297 <terminal+0x2ee>
                        print_next_line(filelist);
    926e:	67 66 ff 75 d4       	pushw  -0x2c(%di)
    9273:	66 e8 46 04          	callw  96bd <printsint+0xf6>
    9277:	00 00                	add    %al,(%eax)
    9279:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    927d:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9284:	00 00                	add    %al,(%eax)
                      recived[index_of_str] = 0;
    9286:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    928b:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    9290:	66 01 d0             	add    %dx,%ax
    9293:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    }
                        //prints(recived);
                    prints(CMDHead);
    9297:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    929c:	66 e8 aa 02          	callw  954a <print+0x8f>
    92a0:	00 00                	add    %al,(%eax)
    92a2:	66 83 c4 04          	add    $0x4,%sp
                    continue;
    92a6:	e9 92 01 67 66       	jmp    6667943d <_end+0x6666d899>
                }
            
                else if(number != 0||num_of_queue != 0){
    92ab:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    92af:	75 0a                	jne    92bb <terminal+0x312>
    92b1:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    92b7:	0f 84 8a 00 67 66    	je     66679347 <_end+0x6666d7a3>
                    if(number != 0 ){
    92bd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    92c1:	74 28                	je     92eb <terminal+0x342>
                         printsint(number);
    92c3:	67 66 ff 75 e8       	pushw  -0x18(%di)
    92c8:	66 e8 f9 02          	callw  95c5 <printc+0x27>
    92cc:	00 00                	add    %al,(%eax)
    92ce:	66 83 c4 04          	add    $0x4,%sp
                        queue[num_of_queue] = number;
    92d2:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    92d7:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    92dc:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    92e1:	67 66 89 0c          	mov    %cx,(%si)
    92e5:	90                   	nop
                        num_of_queue++;
    92e6:	67 66 ff 45 ec       	incw   -0x14(%di)
                    }
                    run(queue,num_of_queue);
    92eb:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    92f0:	67 66 ff 75 ec       	pushw  -0x14(%di)
    92f5:	66 50                	push   %ax
    92f7:	66 e8 5a 01          	callw  9455 <terminal+0x4ac>
    92fb:	00 00                	add    %al,(%eax)
    92fd:	66 83 c4 08          	add    $0x8,%sp
                    num_of_queue = 0;
    9301:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    9308:	00 00                	add    %al,(%eax)
                    number = 0;
    930a:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    9311:	00 00                	add    %al,(%eax)
                    clearscreen();
    9313:	66 e8 4d f3          	callw  8664 <stack_copy+0x35>
    9317:	ff                   	(bad)  
    9318:	ff 67 66             	jmp    *0x66(%edi)
                    prints(CMDHead);
    931b:	ff 75 e4             	pushl  -0x1c(%ebp)
    931e:	66 e8 28 02          	callw  954a <print+0x8f>
    9322:	00 00                	add    %al,(%eax)
    9324:	66 83 c4 04          	add    $0x4,%sp
                    index_of_str = 0;
    9328:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    932f:	00 00                	add    %al,(%eax)
                    recived[index_of_str] = 0;
    9331:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    9336:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    933b:	66 01 d0             	add    %dx,%ax
    933e:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    continue;
    9342:	e9 f6 00 90 e9       	jmp    e990943d <_end+0xe98fd899>
            int strcmp1 = strcmp(recived,quit);
            int strcmp2 = strcmp(recived,help);
            int strcmp3 = strcmp(recived,lst);
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    9347:	f2 00 66 68          	repnz add %ah,0x68(%esi)
                    recived[index_of_str] = 0;
                    continue;
                }
            }
            else{
                 prints("\n\r");
    934b:	a1 a0 00 00 66       	mov    0x660000a0,%eax
    9350:	e8 f7 01 00 00       	call   954c <prints>
    9355:	66 83 c4 04          	add    $0x4,%sp
                print_next_line(controlMsg2);
    9359:	67 66 ff 75 dc       	pushw  -0x24(%di)
    935e:	66 e8 5b 03          	callw  96bd <printsint+0xf6>
    9362:	00 00                	add    %al,(%eax)
    9364:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    9368:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    936d:	66 e8 d9 01          	callw  954a <print+0x8f>
    9371:	00 00                	add    %al,(%eax)
    9373:	66 83 c4 04          	add    $0x4,%sp
                index_of_str = 0;
    9377:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    937e:	00 00                	add    %al,(%eax)
                recived[index_of_str] = 0;
    9380:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    9385:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    938a:	66 01 d0             	add    %dx,%ax
    938d:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                continue;
    9391:	e9 a7 00 67 80       	jmp    8067943d <_end+0x8066d899>
            }
        }
        else if(save >= '0' && save <='9'){
    9396:	7d af                	jge    9347 <terminal+0x39e>
    9398:	2f                   	das    
    9399:	7e 42                	jle    93dd <terminal+0x434>
    939b:	67 80 7d af 39       	cmpb   $0x39,-0x51(%di)
    93a0:	7f 3b                	jg     93dd <terminal+0x434>
           printc(save);
    93a2:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    93a8:	66 50                	push   %ax
    93aa:	66 e8 ee 01          	callw  959c <prints+0x50>
    93ae:	00 00                	add    %al,(%eax)
    93b0:	66 83 c4 04          	add    $0x4,%sp
            number = number * 10 + save -'0';
    93b4:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
    93b9:	66 89 d0             	mov    %dx,%ax
    93bc:	66 c1 e0 02          	shl    $0x2,%ax
    93c0:	66 01 d0             	add    %dx,%ax
    93c3:	66 01 c0             	add    %ax,%ax
    93c6:	66 89 c2             	mov    %ax,%dx
    93c9:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    93cf:	66 01 d0             	add    %dx,%ax
    93d2:	66 83 e8 30          	sub    $0x30,%ax
    93d6:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
           // printsint(number);
            continue;
    93db:	eb 5e                	jmp    943b <terminal+0x492>
        }
        else{
           printc(save);
    93dd:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    93e3:	66 50                	push   %ax
    93e5:	66 e8 b3 01          	callw  959c <prints+0x50>
    93e9:	00 00                	add    %al,(%eax)
    93eb:	66 83 c4 04          	add    $0x4,%sp
           // if(save == '-' || save == 'q' || save == 'h' || save == 'l' || save =='s'){
            if(index_of_str < 10){
    93ef:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    93f5:	7f 2c                	jg     9423 <terminal+0x47a>
                recived[index_of_str] =  save;
    93f7:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    93fc:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    9401:	66 01 c2             	add    %ax,%dx
    9404:	67 8a 45 af          	mov    -0x51(%di),%al
    9408:	67 88 02             	mov    %al,(%bp,%si)
                index_of_str ++;
    940b:	67 66 ff 45 f0       	incw   -0x10(%di)
                recived[index_of_str] = 0;
    9410:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    9415:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    941a:	66 01 d0             	add    %dx,%ax
    941d:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    9421:	eb 18                	jmp    943b <terminal+0x492>
            }
            else if(index_of_str >= 10){
    9423:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    9429:	7e 10                	jle    943b <terminal+0x492>
                prints("not added");
    942b:	66 68 a5 a0          	pushw  $0xa0a5
    942f:	00 00                	add    %al,(%eax)
    9431:	66 e8 15 01          	callw  954a <print+0x8f>
    9435:	00 00                	add    %al,(%eax)
    9437:	66 83 c4 04          	add    $0x4,%sp
    int number = 0;
    int k = 0;
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    943b:	67 66 83 7d bc 00    	cmpw   $0x0,-0x44(%di)
    9441:	0f 85 88 fc 66 89    	jne    896790cf <_end+0x8966d52b>
    9447:	f4                   	hlt    
            else if(index_of_str >= 10){
                prints("not added");
            }
        }
    }
}
    9448:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    944d:	66 5b                	pop    %bx
    944f:	66 5e                	pop    %si
    9451:	66 5f                	pop    %di
    9453:	66 5d                	pop    %bp
    9455:	66 c3                	retw   

00009457 <run>:
void run(int queue[],int size){
    9457:	66 55                	push   %bp
    9459:	66 89 e5             	mov    %sp,%bp
    945c:	66 83 ec 04          	sub    $0x4,%sp
    int j = 0;
    9460:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9467:	00 00                	add    %al,(%eax)
    clearscreen();
    9469:	66 e8 f7 f1          	callw  8664 <stack_copy+0x35>
    946d:	ff                   	(bad)  
    946e:	ff 67 66             	jmp    *0x66(%edi)
        if(queue[j] == 4){
            //_loadP(10,55,0x4000);
            _RunProgress(0x4000);
        }
    }*/
    for(j = 0;j < size;j ++){
    9471:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    9478:	eb 2b                	jmp    94a5 <run+0x4e>
        initial_PCB(queue[j]);
    947a:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    947f:	67 66 8d 14          	lea    (%si),%dx
    9483:	85 00                	test   %eax,(%eax)
    9485:	00 00                	add    %al,(%eax)
    9487:	00 67 66             	add    %ah,0x66(%edi)
    948a:	8b 45 08             	mov    0x8(%ebp),%eax
    948d:	66 01 d0             	add    %dx,%ax
    9490:	67 66 8b 00          	mov    (%bx,%si),%ax
    9494:	66 50                	push   %ax
    9496:	66 e8 0c ea          	callw  7ea6 <savePCB+0xd>
    949a:	ff                   	(bad)  
    949b:	ff 66 83             	jmp    *-0x7d(%esi)
    949e:	c4 04 67             	les    (%edi,%eiz,2),%eax
        if(queue[j] == 4){
            //_loadP(10,55,0x4000);
            _RunProgress(0x4000);
        }
    }*/
    for(j = 0;j < size;j ++){
    94a1:	66 ff 45 fc          	incw   -0x4(%ebp)
    94a5:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    94aa:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    94af:	7c c9                	jl     947a <run+0x23>
        initial_PCB(queue[j]);
    }
   // clearscreen();;
    thread_join();
    94b1:	66 e8 f3 ef          	callw  84a8 <do_fork+0x22d>
    94b5:	ff                   	(bad)  
    94b6:	ff 66 c9             	jmp    *-0x37(%esi)
    //Initial_Int_08h();
    94b9:	66 c3                	retw   

000094bb <print>:
#include "stdio.h"
//====================================================
//              显示字符串函数，可以指定位置
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
    94bb:	66 55                	push   %bp
    94bd:	66 89 e5             	mov    %sp,%bp
    94c0:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    94c4:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    94c9:	66 89 d0             	mov    %dx,%ax
    94cc:	66 c1 e0 02          	shl    $0x2,%ax
    94d0:	66 01 d0             	add    %dx,%ax
    94d3:	66 c1 e0 04          	shl    $0x4,%ax
    94d7:	66 89 c2             	mov    %ax,%dx
    94da:	67 66 8b 45 10       	mov    0x10(%di),%ax
    94df:	66 01 d0             	add    %dx,%ax
    94e2:	66 01 c0             	add    %ax,%ax
    94e5:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    94ea:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    94f1:	00 00                	add    %al,(%eax)
	int index = 0;
    94f3:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    94fa:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    94fc:	eb 35                	jmp    9533 <print+0x78>
		_printchar(Messeage[index],pos,color);
    94fe:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9503:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9508:	66 01 d0             	add    %dx,%ax
    950b:	67 8a 00             	mov    (%bx,%si),%al
    950e:	66 0f be c0          	movsbw %al,%ax
    9512:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9517:	67 66 ff 75 fc       	pushw  -0x4(%di)
    951c:	66 50                	push   %ax
    951e:	66 e8 19 f2          	callw  873b <_clearscreen+0x7>
    9522:	ff                   	(bad)  
    9523:	ff 66 83             	jmp    *-0x7d(%esi)
    9526:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    9529:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    952d:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    9533:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9538:	67 66 8b 45 08       	mov    0x8(%di),%ax
    953d:	66 01 d0             	add    %dx,%ax
    9540:	67 8a 00             	mov    (%bx,%si),%al
    9543:	84 c0                	test   %al,%al
    9545:	75 b7                	jne    94fe <print+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    9547:	90                   	nop
}
    9548:	66 c9                	leavew 
    954a:	66 c3                	retw   

0000954c <prints>:
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input
    954c:	66 55                	push   %bp
    954e:	66 89 e5             	mov    %sp,%bp
    9551:	66 83 ec 04          	sub    $0x4,%sp
	int index = 0;
    9555:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    955c:	00 00                	add    %al,(%eax)
	while(Messeage[index]){
    955e:	eb 25                	jmp    9585 <prints+0x39>
		_showchar(Messeage[index]);
    9560:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9565:	67 66 8b 45 08       	mov    0x8(%di),%ax
    956a:	66 01 d0             	add    %dx,%ax
    956d:	67 8a 00             	mov    (%bx,%si),%al
    9570:	66 0f be c0          	movsbw %al,%ax
    9574:	66 50                	push   %ax
    9576:	66 e8 fe f1          	callw  8778 <_readinput+0x17>
    957a:	ff                   	(bad)  
    957b:	ff 66 83             	jmp    *-0x7d(%esi)
    957e:	c4 04 67             	les    (%edi,%eiz,2),%eax
		index++;
    9581:	66 ff 45 fc          	incw   -0x4(%ebp)
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input
	int index = 0;
	while(Messeage[index]){
    9585:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    958a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    958f:	66 01 d0             	add    %dx,%ax
    9592:	67 8a 00             	mov    (%bx,%si),%al
    9595:	84 c0                	test   %al,%al
    9597:	75 c7                	jne    9560 <prints+0x14>
		_showchar(Messeage[index]);
		index++;
	}
	return;
    9599:	90                   	nop
}
    959a:	66 c9                	leavew 
    959c:	66 c3                	retw   

0000959e <printc>:
//====================================================
//                显示字符函数
//====================================================
void printc(char alpha){
    959e:	66 55                	push   %bp
    95a0:	66 89 e5             	mov    %sp,%bp
    95a3:	66 83 ec 04          	sub    $0x4,%sp
    95a7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    95ac:	67 88 45 fc          	mov    %al,-0x4(%di)
	_showchar(alpha);
    95b0:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    95b6:	66 50                	push   %ax
    95b8:	66 e8 bc f1          	callw  8778 <_readinput+0x17>
    95bc:	ff                   	(bad)  
    95bd:	ff 66 83             	jmp    *-0x7d(%esi)
    95c0:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    95c3:	66 c9                	leavew 
    95c5:	66 c3                	retw   

000095c7 <printsint>:
//====================================================
//                数字转字符函数
//====================================================
void printsint(int num){
    95c7:	66 55                	push   %bp
    95c9:	66 89 e5             	mov    %sp,%bp
    95cc:	66 83 ec 2c          	sub    $0x2c,%sp
	 int save = num;
    95d0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    95d5:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	 int count = 0;
    95da:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    95e1:	00 00                	add    %al,(%eax)
	 char number[30];
	 number[count] = 0;
    95e3:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    95e8:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    95ed:	66 01 d0             	add    %dx,%ax
    95f0:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	if(num < 0){
    95f4:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    95fa:	79 14                	jns    9610 <printsint+0x49>
		printc('-');
    95fc:	66 6a 2d             	pushw  $0x2d
    95ff:	66 e8 99 ff          	callw  959c <prints+0x50>
    9603:	ff                   	(bad)  
    9604:	ff 66 83             	jmp    *-0x7d(%esi)
    9607:	c4 04 67             	les    (%edi,%eiz,2),%eax
		num = -num;
    960a:	66 f7 5d 08          	negw   0x8(%ebp)
    960e:	eb 15                	jmp    9625 <printsint+0x5e>
	}
	else if(num == 0){
    9610:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    9616:	75 0d                	jne    9625 <printsint+0x5e>
		printc('0');
    9618:	66 6a 30             	pushw  $0x30
    961b:	66 e8 7d ff          	callw  959c <prints+0x50>
    961f:	ff                   	(bad)  
    9620:	ff 66 83             	jmp    *-0x7d(%esi)
    9623:	c4 04 eb             	les    (%ebx,%ebp,8),%eax
	}
	while(num > 0){
    9626:	50                   	push   %eax
		number[count] = num % 10 + '0';
    9627:	67 66 8b 45 08       	mov    0x8(%di),%ax
    962c:	66 b9 0a 00          	mov    $0xa,%cx
    9630:	00 00                	add    %al,(%eax)
    9632:	66 99                	cwtd   
    9634:	66 f7 f9             	idiv   %cx
    9637:	66 89 d0             	mov    %dx,%ax
    963a:	66 83 c0 30          	add    $0x30,%ax
    963e:	67 66 8d 4d d6       	lea    -0x2a(%di),%cx
    9643:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9648:	66 01 ca             	add    %cx,%dx
    964b:	67 88 02             	mov    %al,(%bp,%si)
		num  = num / 10;
    964e:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    9653:	66 b8 67 66          	mov    $0x6667,%ax
    9657:	66 66 66 f7 e9       	data32 data32 imul %cx
    965c:	66 c1 fa 02          	sar    $0x2,%dx
    9660:	66 89 c8             	mov    %cx,%ax
    9663:	66 c1 f8 1f          	sar    $0x1f,%ax
    9667:	66 29 c2             	sub    %ax,%dx
    966a:	66 89 d0             	mov    %dx,%ax
    966d:	67 66 89 45 08       	mov    %ax,0x8(%di)
		count ++;
    9672:	67 66 ff 45 fc       	incw   -0x4(%di)
		num = -num;
	}
	else if(num == 0){
		printc('0');
	}
	while(num > 0){
    9677:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    967d:	7f a8                	jg     9627 <printsint+0x60>
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    967f:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9684:	66 48                	dec    %ax
    9686:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    968b:	eb 25                	jmp    96b2 <printsint+0xeb>
		printc(number[i]);
    968d:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    9692:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    9697:	66 01 d0             	add    %dx,%ax
    969a:	67 8a 00             	mov    (%bx,%si),%al
    969d:	66 0f be c0          	movsbw %al,%ax
    96a1:	66 50                	push   %ax
    96a3:	66 e8 f5 fe          	callw  959c <prints+0x50>
    96a7:	ff                   	(bad)  
    96a8:	ff 66 83             	jmp    *-0x7d(%esi)
    96ab:	c4 04 67             	les    (%edi,%eiz,2),%eax
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    96ae:	66 ff 4d f8          	decw   -0x8(%ebp)
    96b2:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    96b8:	79 d3                	jns    968d <printsint+0xc6>
		printc(number[i]);
	}
	return;
    96ba:	90                   	nop
}
    96bb:	66 c9                	leavew 
    96bd:	66 c3                	retw   

000096bf <print_next_line>:
//====================================================
//                显示字符串并换行函数
//====================================================
 void print_next_line(char const* Messeage){
    96bf:	66 55                	push   %bp
    96c1:	66 89 e5             	mov    %sp,%bp
	prints(Messeage);
    96c4:	67 66 ff 75 08       	pushw  0x8(%di)
    96c9:	66 e8 7d fe          	callw  954a <print+0x8f>
    96cd:	ff                   	(bad)  
    96ce:	ff 66 83             	jmp    *-0x7d(%esi)
    96d1:	c4 04 66             	les    (%esi,%eiz,2),%eax
	prints("\n\r");
    96d4:	68 af a0 00 00       	push   $0xa0af
    96d9:	66 e8 6d fe          	callw  954a <print+0x8f>
    96dd:	ff                   	(bad)  
    96de:	ff 66 83             	jmp    *-0x7d(%esi)
    96e1:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    96e4:	66 c9                	leavew 
    96e6:	66 c3                	retw   

000096e8 <strlen>:
//====================================================
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
    96e8:	66 55                	push   %bp
    96ea:	66 89 e5             	mov    %sp,%bp
    96ed:	66 83 ec 08          	sub    $0x8,%sp
	int i = 0;
    96f1:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    96f8:	00 00                	add    %al,(%eax)
	int count = 0;
    96fa:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    9701:	00 00                	add    %al,(%eax)
	while(Messeage[i] != 0){
    9703:	eb 0a                	jmp    970f <strlen+0x27>
		i++;
    9705:	67 66 ff 45 fc       	incw   -0x4(%di)
		count++;
    970a:	67 66 ff 45 f8       	incw   -0x8(%di)
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
	int i = 0;
	int count = 0;
	while(Messeage[i] != 0){
    970f:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9714:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9719:	66 01 d0             	add    %dx,%ax
    971c:	67 8a 00             	mov    (%bx,%si),%al
    971f:	84 c0                	test   %al,%al
    9721:	75 e2                	jne    9705 <strlen+0x1d>
		i++;
		count++;
	}
	return count;
    9723:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    9728:	66 c9                	leavew 
    972a:	66 c3                	retw   

0000972c <read_and_print_input>:
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    972c:	66 55                	push   %bp
    972e:	66 89 e5             	mov    %sp,%bp
    9731:	66 83 ec 08          	sub    $0x8,%sp
    int i = 1;
    9735:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    973c:	00 00                	add    %al,(%eax)
    while(i){
    973e:	eb 1c                	jmp    975c <read_and_print_input+0x30>
        char savechar = _readinput();
    9740:	66 e8 1b f0          	callw  875f <_printchar+0x22>
    9744:	ff                   	(bad)  
    9745:	ff 67 88             	jmp    *-0x78(%edi)
    9748:	45                   	inc    %ebp
    9749:	fb                   	sti    
        _showchar(savechar);
    974a:	67 66 0f be 45 fb    	movsbw -0x5(%di),%ax
    9750:	66 50                	push   %ax
    9752:	66 e8 22 f0          	callw  8778 <_readinput+0x17>
    9756:	ff                   	(bad)  
    9757:	ff 66 83             	jmp    *-0x7d(%esi)
    975a:	c4 04 67             	les    (%edi,%eiz,2),%eax
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    int i = 1;
    while(i){
    975d:	66 83 7d fc 00       	cmpw   $0x0,-0x4(%ebp)
    9762:	75 dc                	jne    9740 <read_and_print_input+0x14>
        char savechar = _readinput();
        _showchar(savechar);
    }
}
    9764:	66 c9                	leavew 
    9766:	66 c3                	retw   

00009768 <getch>:
//====================================================
//        等待用户输入函数，返回用户输入在缓冲区中
//====================================================
char getch(){
    9768:	66 55                	push   %bp
    976a:	66 89 e5             	mov    %sp,%bp
    976d:	66 83 ec 04          	sub    $0x4,%sp
	char result = _readinput();
    9771:	66 e8 ea ef          	callw  875f <_printchar+0x22>
    9775:	ff                   	(bad)  
    9776:	ff 67 88             	jmp    *-0x78(%edi)
    9779:	45                   	inc    %ebp
    977a:	ff 67 8a             	jmp    *-0x76(%edi)
	return result;
    977d:	45                   	inc    %ebp
    977e:	ff 66 c9             	jmp    *-0x37(%esi)
}
    9781:	66 c3                	retw   

00009783 <getline>:
void  getline(char str[],int length){
    9783:	66 55                	push   %bp
    9785:	66 89 e5             	mov    %sp,%bp
    9788:	66 83 ec 08          	sub    $0x8,%sp
	char save = getch();
    978c:	66 e8 d6 ff          	callw  9766 <read_and_print_input+0x3a>
    9790:	ff                   	(bad)  
    9791:	ff 67 88             	jmp    *-0x78(%edi)
    9794:	45                   	inc    %ebp
    9795:	ff 67 66             	jmp    *0x66(%edi)
	int index = 0;
    9798:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while(save != 13 && index < length){
    979f:	eb 46                	jmp    97e7 <getline+0x64>
		printc(save);
    97a1:	67 66 0f be 45 ff    	movsbw -0x1(%di),%ax
    97a7:	66 50                	push   %ax
    97a9:	66 e8 ef fd          	callw  959c <prints+0x50>
    97ad:	ff                   	(bad)  
    97ae:	ff 66 83             	jmp    *-0x7d(%esi)
    97b1:	c4 04 67             	les    (%edi,%eiz,2),%eax
		str[index] = save;
    97b4:	66 8b 55 f8          	mov    -0x8(%ebp),%dx
    97b8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    97bd:	66 01 c2             	add    %ax,%dx
    97c0:	67 8a 45 ff          	mov    -0x1(%di),%al
    97c4:	67 88 02             	mov    %al,(%bp,%si)
		index ++;
    97c7:	67 66 ff 45 f8       	incw   -0x8(%di)
		str[index] = 0;
    97cc:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    97d1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    97d6:	66 01 d0             	add    %dx,%ax
    97d9:	67 c6 00 00          	movb   $0x0,(%bx,%si)
		save = getch();
    97dd:	66 e8 85 ff          	callw  9766 <read_and_print_input+0x3a>
    97e1:	ff                   	(bad)  
    97e2:	ff 67 88             	jmp    *-0x78(%edi)
    97e5:	45                   	inc    %ebp
    97e6:	ff 67 80             	jmp    *-0x80(%edi)
	return result;
}
void  getline(char str[],int length){
	char save = getch();
	int index = 0;
	while(save != 13 && index < length){
    97e9:	7d ff                	jge    97ea <getline+0x67>
    97eb:	0d 74 0c 67 66       	or     $0x66670c74,%eax
    97f0:	8b 45 f8             	mov    -0x8(%ebp),%eax
    97f3:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    97f8:	7c a7                	jl     97a1 <getline+0x1e>
		str[index] = save;
		index ++;
		str[index] = 0;
		save = getch();
	}
	return;
    97fa:	90                   	nop
}
    97fb:	66 c9                	leavew 
    97fd:	66 c3                	retw   

000097ff <print_different_color>:
void print_different_color(char const* Messeage,int row,int colume,int color){
    97ff:	66 55                	push   %bp
    9801:	66 89 e5             	mov    %sp,%bp
    9804:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    9808:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    980d:	66 89 d0             	mov    %dx,%ax
    9810:	66 c1 e0 02          	shl    $0x2,%ax
    9814:	66 01 d0             	add    %dx,%ax
    9817:	66 c1 e0 04          	shl    $0x4,%ax
    981b:	66 89 c2             	mov    %ax,%dx
    981e:	67 66 8b 45 10       	mov    0x10(%di),%ax
    9823:	66 01 d0             	add    %dx,%ax
    9826:	66 01 c0             	add    %ax,%ax
    9829:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    982e:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    9835:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    9837:	eb 35                	jmp    986e <print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    9839:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    983e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9843:	66 01 d0             	add    %dx,%ax
    9846:	67 8a 00             	mov    (%bx,%si),%al
    9849:	66 0f be c0          	movsbw %al,%ax
    984d:	67 66 ff 75 14       	pushw  0x14(%di)
    9852:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9857:	66 50                	push   %ax
    9859:	66 e8 de ee          	callw  873b <_clearscreen+0x7>
    985d:	ff                   	(bad)  
    985e:	ff 66 83             	jmp    *-0x7d(%esi)
    9861:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    9864:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    9868:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    986e:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9873:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9878:	66 01 d0             	add    %dx,%ax
    987b:	67 8a 00             	mov    (%bx,%si),%al
    987e:	84 c0                	test   %al,%al
    9880:	75 b7                	jne    9839 <print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    9882:	90                   	nop
}
    9883:	66 c9                	leavew 
    9885:	66 c3                	retw   

00009887 <strcmp>:
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
    9887:	66 55                	push   %bp
    9889:	66 89 e5             	mov    %sp,%bp
    988c:	66 83 ec 04          	sub    $0x4,%sp
	int i = 0;
    9890:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9897:	00 00                	add    %al,(%eax)
	while(m1[i] != 0 && m2[i]!= 0){
    9899:	eb 31                	jmp    98cc <strcmp+0x45>
		if(m1[i] != m2[i]){
    989b:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    98a0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    98a5:	66 01 d0             	add    %dx,%ax
    98a8:	67 8a 10             	mov    (%bx,%si),%dl
    98ab:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    98b0:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    98b5:	66 01 c8             	add    %cx,%ax
    98b8:	67 8a 00             	mov    (%bx,%si),%al
    98bb:	38 c2                	cmp    %al,%dl
    98bd:	74 08                	je     98c7 <strcmp+0x40>
			return 0;
    98bf:	66 b8 00 00          	mov    $0x0,%ax
    98c3:	00 00                	add    %al,(%eax)
    98c5:	eb 63                	jmp    992a <strcmp+0xa3>
		}
		i++;
    98c7:	67 66 ff 45 fc       	incw   -0x4(%di)
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
	int i = 0;
	while(m1[i] != 0 && m2[i]!= 0){
    98cc:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    98d1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    98d6:	66 01 d0             	add    %dx,%ax
    98d9:	67 8a 00             	mov    (%bx,%si),%al
    98dc:	84 c0                	test   %al,%al
    98de:	74 14                	je     98f4 <strcmp+0x6d>
    98e0:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    98e5:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    98ea:	66 01 d0             	add    %dx,%ax
    98ed:	67 8a 00             	mov    (%bx,%si),%al
    98f0:	84 c0                	test   %al,%al
    98f2:	75 a7                	jne    989b <strcmp+0x14>
		if(m1[i] != m2[i]){
			return 0;
		}
		i++;
	}
	if(m1[i] != 0 || m2[i] != 0){
    98f4:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    98f9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    98fe:	66 01 d0             	add    %dx,%ax
    9901:	67 8a 00             	mov    (%bx,%si),%al
    9904:	84 c0                	test   %al,%al
    9906:	75 14                	jne    991c <strcmp+0x95>
    9908:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    990d:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9912:	66 01 d0             	add    %dx,%ax
    9915:	67 8a 00             	mov    (%bx,%si),%al
    9918:	84 c0                	test   %al,%al
    991a:	74 08                	je     9924 <strcmp+0x9d>
		return 0;
    991c:	66 b8 00 00          	mov    $0x0,%ax
    9920:	00 00                	add    %al,(%eax)
    9922:	eb 06                	jmp    992a <strcmp+0xa3>
	}
	return 1;
    9924:	66 b8 01 00          	mov    $0x1,%ax
    9928:	00 00                	add    %al,(%eax)
}
    992a:	66 c9                	leavew 
    992c:	66 c3                	retw   

0000992e <strcpy>:
//====================================================
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
    992e:	66 55                	push   %bp
    9930:	66 89 e5             	mov    %sp,%bp
    9933:	66 83 ec 08          	sub    $0x8,%sp
	int len = strlen(src);
    9937:	67 66 ff 75 08       	pushw  0x8(%di)
    993c:	66 e8 a6 fd          	callw  96e6 <print_next_line+0x27>
    9940:	ff                   	(bad)  
    9941:	ff 66 83             	jmp    *-0x7d(%esi)
    9944:	c4 04 67             	les    (%edi,%eiz,2),%eax
    9947:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	int i = 0;
    994b:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9952:	00 00                	add    %al,(%eax)
	for(i = 0;i < len;i ++){
    9954:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    995b:	00 00                	add    %al,(%eax)
    995d:	eb 3b                	jmp    999a <strcpy+0x6c>
    	des[i] =  src[i];
    995f:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9964:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9969:	66 01 c2             	add    %ax,%dx
    996c:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    9971:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9976:	66 01 c8             	add    %cx,%ax
    9979:	67 8a 00             	mov    (%bx,%si),%al
    997c:	67 88 02             	mov    %al,(%bp,%si)
        des[i+1] = 0;
    997f:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9984:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    9989:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    998e:	66 01 d0             	add    %dx,%ax
    9991:	67 c6 00 00          	movb   $0x0,(%bx,%si)
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
	int len = strlen(src);
	int i = 0;
	for(i = 0;i < len;i ++){
    9995:	67 66 ff 45 fc       	incw   -0x4(%di)
    999a:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    999f:	67 66 3b 45 f8       	cmp    -0x8(%di),%ax
    99a4:	7c b9                	jl     995f <strcpy+0x31>
    	des[i] =  src[i];
        des[i+1] = 0;
	}
    99a6:	66 c9                	leavew 
    99a8:	66 c3                	retw   

000099aa <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
    99aa:	66 55                	push   %bp
    99ac:	66 89 e5             	mov    %sp,%bp
    99af:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    99b3:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    99b8:	66 89 d0             	mov    %dx,%ax
    99bb:	66 c1 e0 02          	shl    $0x2,%ax
    99bf:	66 01 d0             	add    %dx,%ax
    99c2:	66 c1 e0 04          	shl    $0x4,%ax
    99c6:	66 89 c2             	mov    %ax,%dx
    99c9:	67 66 8b 45 10       	mov    0x10(%di),%ax
    99ce:	66 01 d0             	add    %dx,%ax
    99d1:	66 01 c0             	add    %ax,%ax
    99d4:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    99d9:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    99e0:	00 00                	add    %al,(%eax)
	int index = 0;
    99e2:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    99e9:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    99eb:	eb 35                	jmp    9a22 <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
    99ed:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    99f2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    99f7:	66 01 d0             	add    %dx,%ax
    99fa:	67 8a 00             	mov    (%bx,%si),%al
    99fd:	66 0f be c0          	movsbw %al,%ax
    9a01:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9a06:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9a0b:	66 50                	push   %ax
    9a0d:	66 e8 2a ed          	callw  873b <_clearscreen+0x7>
    9a11:	ff                   	(bad)  
    9a12:	ff 66 83             	jmp    *-0x7d(%esi)
    9a15:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    9a18:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    9a1c:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    9a22:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9a27:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9a2c:	66 01 d0             	add    %dx,%ax
    9a2f:	67 8a 00             	mov    (%bx,%si),%al
    9a32:	84 c0                	test   %al,%al
    9a34:	75 b7                	jne    99ed <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    9a36:	90                   	nop
}
    9a37:	66 c9                	leavew 
    9a39:	66 c3                	retw   

00009a3b <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    9a3b:	66 55                	push   %bp
    9a3d:	66 89 e5             	mov    %sp,%bp
    9a40:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    9a44:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    9a49:	66 89 d0             	mov    %dx,%ax
    9a4c:	66 c1 e0 02          	shl    $0x2,%ax
    9a50:	66 01 d0             	add    %dx,%ax
    9a53:	66 c1 e0 04          	shl    $0x4,%ax
    9a57:	66 89 c2             	mov    %ax,%dx
    9a5a:	67 66 8b 45 10       	mov    0x10(%di),%ax
    9a5f:	66 01 d0             	add    %dx,%ax
    9a62:	66 01 c0             	add    %ax,%ax
    9a65:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    9a6a:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    9a71:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    9a73:	eb 35                	jmp    9aaa <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    9a75:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9a7a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9a7f:	66 01 d0             	add    %dx,%ax
    9a82:	67 8a 00             	mov    (%bx,%si),%al
    9a85:	66 0f be c0          	movsbw %al,%ax
    9a89:	67 66 ff 75 14       	pushw  0x14(%di)
    9a8e:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9a93:	66 50                	push   %ax
    9a95:	66 e8 a2 ec          	callw  873b <_clearscreen+0x7>
    9a99:	ff                   	(bad)  
    9a9a:	ff 66 83             	jmp    *-0x7d(%esi)
    9a9d:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    9aa0:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    9aa4:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    9aaa:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9aaf:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9ab4:	66 01 d0             	add    %dx,%ax
    9ab7:	67 8a 00             	mov    (%bx,%si),%al
    9aba:	84 c0                	test   %al,%al
    9abc:	75 b7                	jne    9a75 <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    9abe:	90                   	nop
}
    9abf:	66 c9                	leavew 
    9ac1:	66 c3                	retw   

00009ac3 <sys_showline>:
void sys_showline(){
    9ac3:	66 55                	push   %bp
    9ac5:	66 89 e5             	mov    %sp,%bp
    9ac8:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
    9acc:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
    9ad1:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
    9ad6:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
    9adb:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
    9ae0:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
    9ae5:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
    9aea:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
    9aef:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    9af6:	00 00                	add    %al,(%eax)
    int i = 0;
    9af8:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9aff:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
    9b01:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9b08:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
    9b0a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9b11:	00 00                	add    %al,(%eax)
    9b13:	eb 52                	jmp    9b67 <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
    9b15:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9b1a:	66 89 d0             	mov    %dx,%ax
    9b1d:	66 c1 e0 03          	shl    $0x3,%ax
    9b21:	66 01 d0             	add    %dx,%ax
    9b24:	67 66 8d 14          	lea    (%si),%dx
    9b28:	c5 00                	lds    (%eax),%eax
    9b2a:	00 00                	add    %al,(%eax)
    9b2c:	00 66 01             	add    %ah,0x1(%esi)
    9b2f:	d0 66 01             	shlb   0x1(%esi)
    9b32:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
    9b36:	45                   	inc    %ebp
    9b37:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
    9b3d:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9b42:	66 01 d0             	add    %dx,%ax
    9b45:	67 8a 00             	mov    (%bx,%si),%al
    9b48:	66 0f be c0          	movsbw %al,%ax
    9b4c:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9b51:	67 66 ff 75 f0       	pushw  -0x10(%di)
    9b56:	66 50                	push   %ax
    9b58:	66 e8 df eb          	callw  873b <_clearscreen+0x7>
    9b5c:	ff                   	(bad)  
    9b5d:	ff 66 83             	jmp    *-0x7d(%esi)
    9b60:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
    9b63:	66 ff 45 fc          	incw   -0x4(%ebp)
    9b67:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
    9b6d:	7e a6                	jle    9b15 <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
    9b6f:	66 c9                	leavew 
    9b71:	66 c3                	retw   

00009b73 <sys_printname>:

void sys_printname(){
    9b73:	66 55                	push   %bp
    9b75:	66 89 e5             	mov    %sp,%bp
    9b78:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
    9b7c:	67 66 c7 45 fc b4 a0 	movw   $0xa0b4,-0x4(%di)
    9b83:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
    9b85:	67 66 c7 45 f8 f8 a0 	movw   $0xa0f8,-0x8(%di)
    9b8c:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
    9b8e:	67 66 c7 45 f4 3c a1 	movw   $0xa13c,-0xc(%di)
    9b95:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
    9b97:	67 66 c7 45 f0 80 a1 	movw   $0xa180,-0x10(%di)
    9b9e:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
    9ba0:	67 66 c7 45 ec c4 a1 	movw   $0xa1c4,-0x14(%di)
    9ba7:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
    9ba9:	67 66 c7 45 e8 08 a2 	movw   $0xa208,-0x18(%di)
    9bb0:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
    9bb2:	67 66 c7 45 e4 4c a2 	movw   $0xa24c,-0x1c(%di)
    9bb9:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
    9bbb:	66 6a 0b             	pushw  $0xb
    9bbe:	66 6a 10             	pushw  $0x10
    9bc1:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9bc6:	66 e8 de fd          	callw  99a8 <strcpy+0x7a>
    9bca:	ff                   	(bad)  
    9bcb:	ff 66 83             	jmp    *-0x7d(%esi)
    9bce:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
    9bd1:	6a 0b                	push   $0xb
    9bd3:	66 6a 11             	pushw  $0x11
    9bd6:	67 66 ff 75 f8       	pushw  -0x8(%di)
    9bdb:	66 e8 c9 fd          	callw  99a8 <strcpy+0x7a>
    9bdf:	ff                   	(bad)  
    9be0:	ff 66 83             	jmp    *-0x7d(%esi)
    9be3:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
    9be6:	6a 0b                	push   $0xb
    9be8:	66 6a 12             	pushw  $0x12
    9beb:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9bf0:	66 e8 b4 fd          	callw  99a8 <strcpy+0x7a>
    9bf4:	ff                   	(bad)  
    9bf5:	ff 66 83             	jmp    *-0x7d(%esi)
    9bf8:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
    9bfb:	6a 0b                	push   $0xb
    9bfd:	66 6a 13             	pushw  $0x13
    9c00:	67 66 ff 75 f0       	pushw  -0x10(%di)
    9c05:	66 e8 9f fd          	callw  99a8 <strcpy+0x7a>
    9c09:	ff                   	(bad)  
    9c0a:	ff 66 83             	jmp    *-0x7d(%esi)
    9c0d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
    9c10:	6a 0b                	push   $0xb
    9c12:	66 6a 14             	pushw  $0x14
    9c15:	67 66 ff 75 ec       	pushw  -0x14(%di)
    9c1a:	66 e8 8a fd          	callw  99a8 <strcpy+0x7a>
    9c1e:	ff                   	(bad)  
    9c1f:	ff 66 83             	jmp    *-0x7d(%esi)
    9c22:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
    9c25:	6a 0b                	push   $0xb
    9c27:	66 6a 15             	pushw  $0x15
    9c2a:	67 66 ff 75 e8       	pushw  -0x18(%di)
    9c2f:	66 e8 75 fd          	callw  99a8 <strcpy+0x7a>
    9c33:	ff                   	(bad)  
    9c34:	ff 66 83             	jmp    *-0x7d(%esi)
    9c37:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
    9c3a:	6a 0b                	push   $0xb
    9c3c:	66 6a 16             	pushw  $0x16
    9c3f:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    9c44:	66 e8 60 fd          	callw  99a8 <strcpy+0x7a>
    9c48:	ff                   	(bad)  
    9c49:	ff 66 83             	jmp    *-0x7d(%esi)
    9c4c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    9c4f:	c9                   	leave  
    9c50:	66 c3                	retw   

00009c52 <sys_printpoem>:
void sys_printpoem(){
    9c52:	66 55                	push   %bp
    9c54:	66 89 e5             	mov    %sp,%bp
    9c57:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
    9c5b:	67 66 c7 45 f8 90 a2 	movw   $0xa290,-0x8(%di)
    9c62:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
    9c64:	67 66 c7 45 f4 a2 a2 	movw   $0xa2a2,-0xc(%di)
    9c6b:	00 00                	add    %al,(%eax)
    int i = 1;
    9c6d:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    9c74:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
    9c76:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    9c7d:	00 00                	add    %al,(%eax)
    9c7f:	eb 4b                	jmp    9ccc <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
    9c81:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9c86:	66 6a 0a             	pushw  $0xa
    9c89:	66 6a 0f             	pushw  $0xf
    9c8c:	67 66 ff 75 f8       	pushw  -0x8(%di)
    9c91:	66 e8 a4 fd          	callw  9a39 <sys_print_for_heart+0x8f>
    9c95:	ff                   	(bad)  
    9c96:	ff 66 83             	jmp    *-0x7d(%esi)
    9c99:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
    9c9b:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9ca0:	66 6a 0a             	pushw  $0xa
    9ca3:	66 6a 10             	pushw  $0x10
    9ca6:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9cab:	66 e8 8a fd          	callw  9a39 <sys_print_for_heart+0x8f>
    9caf:	ff                   	(bad)  
    9cb0:	ff 66 83             	jmp    *-0x7d(%esi)
    9cb3:	c4 10                	les    (%eax),%edx
        int j = 0;
    9cb5:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9cbc:	00 00                	add    %al,(%eax)
        int k = 0;
    9cbe:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    9cc5:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
    9cc7:	67 66 ff 45 fc       	incw   -0x4(%di)
    9ccc:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    9cd2:	7e ad                	jle    9c81 <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
    9cd4:	66 c9                	leavew 
    9cd6:	66 c3                	retw   

00009cd8 <sys_printheart>:
void sys_printheart(){
    9cd8:	66 55                	push   %bp
    9cda:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
    9cdd:	66 6a 28             	pushw  $0x28
    9ce0:	66 6a 00             	pushw  $0x0
    9ce3:	66 68 ab a2          	pushw  $0xa2ab
    9ce7:	00 00                	add    %al,(%eax)
    9ce9:	66 e8 bb fc          	callw  99a8 <strcpy+0x7a>
    9ced:	ff                   	(bad)  
    9cee:	ff 66 83             	jmp    *-0x7d(%esi)
    9cf1:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
    9cf4:	6a 28                	push   $0x28
    9cf6:	66 6a 01             	pushw  $0x1
    9cf9:	66 68 c3 a2          	pushw  $0xa2c3
    9cfd:	00 00                	add    %al,(%eax)
    9cff:	66 e8 a5 fc          	callw  99a8 <strcpy+0x7a>
    9d03:	ff                   	(bad)  
    9d04:	ff 66 83             	jmp    *-0x7d(%esi)
    9d07:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
    9d0a:	6a 28                	push   $0x28
    9d0c:	66 6a 02             	pushw  $0x2
    9d0f:	66 68 dc a2          	pushw  $0xa2dc
    9d13:	00 00                	add    %al,(%eax)
    9d15:	66 e8 8f fc          	callw  99a8 <strcpy+0x7a>
    9d19:	ff                   	(bad)  
    9d1a:	ff 66 83             	jmp    *-0x7d(%esi)
    9d1d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
    9d20:	6a 28                	push   $0x28
    9d22:	66 6a 03             	pushw  $0x3
    9d25:	66 68 f7 a2          	pushw  $0xa2f7
    9d29:	00 00                	add    %al,(%eax)
    9d2b:	66 e8 79 fc          	callw  99a8 <strcpy+0x7a>
    9d2f:	ff                   	(bad)  
    9d30:	ff 66 83             	jmp    *-0x7d(%esi)
    9d33:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
    9d36:	6a 28                	push   $0x28
    9d38:	66 6a 04             	pushw  $0x4
    9d3b:	66 68 10 a3          	pushw  $0xa310
    9d3f:	00 00                	add    %al,(%eax)
    9d41:	66 e8 63 fc          	callw  99a8 <strcpy+0x7a>
    9d45:	ff                   	(bad)  
    9d46:	ff 66 83             	jmp    *-0x7d(%esi)
    9d49:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
    9d4c:	6a 28                	push   $0x28
    9d4e:	66 6a 05             	pushw  $0x5
    9d51:	66 68 28 a3          	pushw  $0xa328
    9d55:	00 00                	add    %al,(%eax)
    9d57:	66 e8 4d fc          	callw  99a8 <strcpy+0x7a>
    9d5b:	ff                   	(bad)  
    9d5c:	ff 66 83             	jmp    *-0x7d(%esi)
    9d5f:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
    9d62:	6a 28                	push   $0x28
    9d64:	66 6a 06             	pushw  $0x6
    9d67:	66 68 3f a3          	pushw  $0xa33f
    9d6b:	00 00                	add    %al,(%eax)
    9d6d:	66 e8 37 fc          	callw  99a8 <strcpy+0x7a>
    9d71:	ff                   	(bad)  
    9d72:	ff 66 83             	jmp    *-0x7d(%esi)
    9d75:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
    9d78:	6a 28                	push   $0x28
    9d7a:	66 6a 07             	pushw  $0x7
    9d7d:	66 68 55 a3          	pushw  $0xa355
    9d81:	00 00                	add    %al,(%eax)
    9d83:	66 e8 21 fc          	callw  99a8 <strcpy+0x7a>
    9d87:	ff                   	(bad)  
    9d88:	ff 66 83             	jmp    *-0x7d(%esi)
    9d8b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    9d8e:	c9                   	leave  
    9d8f:	66 c3                	retw   

00009d91 <Get_Hours>:
#include "time.h"
#include "stdio.h"

int Get_Hours(){
    9d91:	66 55                	push   %bp
    9d93:	66 89 e5             	mov    %sp,%bp
    9d96:	66 53                	push   %bx
    9d98:	66 83 ec 04          	sub    $0x4,%sp
    int hours = _Get_Hours_1();
    9d9c:	66 e8 8b f1          	callw  8f2b <RTC_Timer+0xa3>
    9da0:	ff                   	(bad)  
    9da1:	ff 67 66             	jmp    *0x66(%edi)
    9da4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    hours = hours * 10 + _Get_Hours_2();
    9da7:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9dac:	66 89 d0             	mov    %dx,%ax
    9daf:	66 c1 e0 02          	shl    $0x2,%ax
    9db3:	66 01 d0             	add    %dx,%ax
    9db6:	66 01 c0             	add    %ax,%ax
    9db9:	66 89 c3             	mov    %ax,%bx
    9dbc:	66 e8 8c f1          	callw  8f4c <_Get_Hours_1+0x1f>
    9dc0:	ff                   	(bad)  
    9dc1:	ff 66 01             	jmp    *0x1(%esi)
    9dc4:	d8 67 66             	fsubs  0x66(%edi)
    9dc7:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return hours;
    9dca:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
   // printsint(hours);
}
    9dcf:	66 83 c4 04          	add    $0x4,%sp
    9dd3:	66 5b                	pop    %bx
    9dd5:	66 5d                	pop    %bp
    9dd7:	66 c3                	retw   

00009dd9 <Get_Minutes>:
int Get_Minutes(){
    9dd9:	66 55                	push   %bp
    9ddb:	66 89 e5             	mov    %sp,%bp
    9dde:	66 53                	push   %bx
    9de0:	66 83 ec 04          	sub    $0x4,%sp
    int minutes = _Get_Minutes_1();
    9de4:	66 e8 81 f1          	callw  8f69 <_Get_Hours_2+0x1b>
    9de8:	ff                   	(bad)  
    9de9:	ff 67 66             	jmp    *0x66(%edi)
    9dec:	89 45 f8             	mov    %eax,-0x8(%ebp)
    minutes = minutes * 10 + _Get_Minutes_2();
    9def:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9df4:	66 89 d0             	mov    %dx,%ax
    9df7:	66 c1 e0 02          	shl    $0x2,%ax
    9dfb:	66 01 d0             	add    %dx,%ax
    9dfe:	66 01 c0             	add    %ax,%ax
    9e01:	66 89 c3             	mov    %ax,%bx
    9e04:	66 e8 82 f1          	callw  8f8a <_Get_Minutes_1+0x1f>
    9e08:	ff                   	(bad)  
    9e09:	ff 66 01             	jmp    *0x1(%esi)
    9e0c:	d8 67 66             	fsubs  0x66(%edi)
    9e0f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return minutes;
    9e12:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    9e17:	66 83 c4 04          	add    $0x4,%sp
    9e1b:	66 5b                	pop    %bx
    9e1d:	66 5d                	pop    %bp
    9e1f:	66 c3                	retw   

00009e21 <printTime>:
void printTime(){
    9e21:	66 55                	push   %bp
    9e23:	66 89 e5             	mov    %sp,%bp
    9e26:	66 83 ec 08          	sub    $0x8,%sp
    int hour = Get_Hours();
    9e2a:	66 e8 61 ff          	callw  9d8f <sys_printheart+0xb7>
    9e2e:	ff                   	(bad)  
    9e2f:	ff 67 66             	jmp    *0x66(%edi)
    9e32:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int minute = Get_Minutes();
    9e35:	66 e8 9e ff          	callw  9dd7 <Get_Hours+0x46>
    9e39:	ff                   	(bad)  
    9e3a:	ff 67 66             	jmp    *0x66(%edi)
    9e3d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    printsint(hour);
    9e40:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9e45:	66 e8 7c f7          	callw  95c5 <printc+0x27>
    9e49:	ff                   	(bad)  
    9e4a:	ff 66 83             	jmp    *-0x7d(%esi)
    9e4d:	c4 04 66             	les    (%esi,%eiz,2),%eax
    prints("h : ");
    9e50:	68 6a a3 00 00       	push   $0xa36a
    9e55:	66 e8 f1 f6          	callw  954a <print+0x8f>
    9e59:	ff                   	(bad)  
    9e5a:	ff 66 83             	jmp    *-0x7d(%esi)
    9e5d:	c4 04 67             	les    (%edi,%eiz,2),%eax
    printsint(minute);
    9e60:	66 ff 75 f8          	pushw  -0x8(%ebp)
    9e64:	66 e8 5d f7          	callw  95c5 <printc+0x27>
    9e68:	ff                   	(bad)  
    9e69:	ff 66 83             	jmp    *-0x7d(%esi)
    9e6c:	c4 04 66             	les    (%esi,%eiz,2),%eax
    printc('m');
    9e6f:	6a 6d                	push   $0x6d
    9e71:	66 e8 27 f7          	callw  959c <prints+0x50>
    9e75:	ff                   	(bad)  
    9e76:	ff 66 83             	jmp    *-0x7d(%esi)
    9e79:	c4 04 66             	les    (%esi,%eiz,2),%eax

    9e7c:	c9                   	leave  
    9e7d:	66 c3                	retw   

00009e7f <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    9e7f:	66 55                	push   %bp
    9e81:	66 89 e5             	mov    %sp,%bp
    9e84:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    9e88:	66 e8 92 e9          	callw  881e <_Schedule_once+0x9>
    9e8c:	ff                   	(bad)  
    9e8d:	ff 67 66             	jmp    *0x66(%edi)
    9e90:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    9e93:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    9e98:	66 c9                	leavew 
    9e9a:	66 c3                	retw   

00009e9c <wait>:
char wait(){
    9e9c:	66 55                	push   %bp
    9e9e:	66 89 e5             	mov    %sp,%bp
    9ea1:	66 83 ec 08          	sub    $0x8,%sp
    int temp_ch = _wait();
    9ea5:	66 e8 8d e9          	callw  8836 <_Schedule+0xb>
    9ea9:	ff                   	(bad)  
    9eaa:	ff 67 66             	jmp    *0x66(%edi)
    9ead:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char ch = '0' + temp_ch;
    9eb0:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9eb5:	66 83 c0 30          	add    $0x30,%ax
    9eb9:	67 88 45 fb          	mov    %al,-0x5(%di)
    return ch;
    9ebd:	67 8a 45 fb          	mov    -0x5(%di),%al
    //_wait();
}
    9ec1:	66 c9                	leavew 
    9ec3:	66 c3                	retw   

00009ec5 <exit>:
void exit(char ch){
    9ec5:	66 55                	push   %bp
    9ec7:	66 89 e5             	mov    %sp,%bp
    9eca:	66 83 ec 04          	sub    $0x4,%sp
    9ece:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9ed3:	67 88 45 fc          	mov    %al,-0x4(%di)
    _exit(ch);
    9ed7:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    9edd:	66 50                	push   %ax
    9edf:	66 e8 5e e9          	callw  8841 <_wait+0x9>
    9ee3:	ff                   	(bad)  
    9ee4:	ff 66 83             	jmp    *-0x7d(%esi)
    9ee7:	c4 04 66             	les    (%esi,%eiz,2),%eax
    9eea:	c9                   	leave  
    9eeb:	66 c3                	retw   
