
kernel.elf:     file format elf32-i386


Disassembly of section .text:

00007d00 <_start>:
    7d00:	66 b8 00 00          	mov    $0x0,%ax
    7d04:	00 00                	add    %al,(%eax)
    7d06:	8e d8                	mov    %eax,%ds
    7d08:	8e c0                	mov    %eax,%es
    7d0a:	8e d0                	mov    %eax,%ss
    7d0c:	66 ea 14 7d 00 00    	ljmpw  $0x0,$0x7d14
	...

00007d14 <main>:
#include"kernel.h"
#include "../syscall/stdio.h"
#include "../syscall/schedule.h"
#include "../syscall/time.h"

int main(){
    7d14:	66 55                	push   %bp
    7d16:	66 89 e5             	mov    %sp,%bp
    7d19:	66 83 ec 0c          	sub    $0xc,%sp
    clearscreen();
    7d1d:	66 e8 e6 09          	callw  8707 <stack_copy+0x35>
    7d21:	00 00                	add    %al,(%eax)
   // char str[100] = {};
    //getline(str,10);
   // prints(str);
    Initial_Int();
    7d23:	66 e8 f0 09          	callw  8717 <clearscreen+0xe>
    7d27:	00 00                	add    %al,(%eax)
   // printTime();
    //Initial_Int_09h();
   // Set_PCB();
    loadProg(15,95,0x2000);
    7d29:	66 68 00 20          	pushw  $0x2000
    7d2d:	00 00                	add    %al,(%eax)
    7d2f:	66 6a 5f             	pushw  $0x5f
    7d32:	66 6a 0f             	pushw  $0xf
    7d35:	66 e8 0c 0a          	callw  8745 <Initial_Int_08h+0xd>
    7d39:	00 00                	add    %al,(%eax)
    7d3b:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(15,115,0x3000);
    7d3f:	66 68 00 30          	pushw  $0x3000
    7d43:	00 00                	add    %al,(%eax)
    7d45:	66 6a 73             	pushw  $0x73
    7d48:	66 6a 0f             	pushw  $0xf
    7d4b:	66 e8 f6 09          	callw  8745 <Initial_Int_08h+0xd>
    7d4f:	00 00                	add    %al,(%eax)
    7d51:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(15,135,0x4000);
    7d55:	66 68 00 40          	pushw  $0x4000
    7d59:	00 00                	add    %al,(%eax)
    7d5b:	66 68 87 00          	pushw  $0x87
    7d5f:	00 00                	add    %al,(%eax)
    7d61:	66 6a 0f             	pushw  $0xf
    7d64:	66 e8 dd 09          	callw  8745 <Initial_Int_08h+0xd>
    7d68:	00 00                	add    %al,(%eax)
    7d6a:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(15,155,0x5000);
    7d6e:	66 68 00 50          	pushw  $0x5000
    7d72:	00 00                	add    %al,(%eax)
    7d74:	66 68 9b 00          	pushw  $0x9b
    7d78:	00 00                	add    %al,(%eax)
    7d7a:	66 6a 0f             	pushw  $0xf
    7d7d:	66 e8 c4 09          	callw  8745 <Initial_Int_08h+0xd>
    7d81:	00 00                	add    %al,(%eax)
    7d83:	66 83 c4 0c          	add    $0xc,%sp
    _loadP(15,175,0x6000);
    7d87:	66 68 00 60          	pushw  $0x6000
    7d8b:	00 00                	add    %al,(%eax)
    7d8d:	66 68 af 00          	pushw  $0xaf
    7d91:	00 00                	add    %al,(%eax)
    7d93:	66 6a 0f             	pushw  $0xf
    7d96:	66 e8 ab 0a          	callw  8845 <_setPoint+0x15>
    7d9a:	00 00                	add    %al,(%eax)
    7d9c:	66 83 c4 0c          	add    $0xc,%sp
    _loadP(15,195,0x7000);
    7da0:	66 68 00 70          	pushw  $0x7000
    7da4:	00 00                	add    %al,(%eax)
    7da6:	66 68 c3 00          	pushw  $0xc3
    7daa:	00 00                	add    %al,(%eax)
    7dac:	66 6a 0f             	pushw  $0xf
    7daf:	66 e8 92 0a          	callw  8845 <_setPoint+0x15>
    7db3:	00 00                	add    %al,(%eax)
    7db5:	66 83 c4 0c          	add    $0xc,%sp
    initial_PCB(6);
    7db9:	66 6a 06             	pushw  $0x6
    7dbc:	66 e8 da 00          	callw  7e9a <savePCB+0xd>
    7dc0:	00 00                	add    %al,(%eax)
    7dc2:	66 83 c4 04          	add    $0x4,%sp
   _CurrentProg = PCB_list + 6;
    7dc6:	66 c7 06 40 bd       	movw   $0xbd40,(%esi)
    7dcb:	b8 bc 00 00 66       	mov    $0x660000bc,%eax
   // _CurrentProg = PCB_list;//important! mov dword ptr ds:0x9e60, 0x00009d20,把PCB_list的地址9d20存到ds的9e60处，此后就直接用9e60来织带PCB_list
    //Initial_Int_08h();
     _RunProgress(0x7000);
    7dd0:	68 00 70 00 00       	push   $0x7000
    7dd5:	66 e8 a3 0a          	callw  887c <_loadP+0x35>
    7dd9:	00 00                	add    %al,(%eax)
    7ddb:	66 83 c4 04          	add    $0x4,%sp


    char const *Messeage = "Built by Chen Hongyang on March 20, 2018";
    7ddf:	67 66 c7 45 fc 54 a0 	movw   $0xa054,-0x4(%di)
    7de6:	00 00                	add    %al,(%eax)
    print("===================================================",9,12);
    7de8:	66 6a 0c             	pushw  $0xc
    7deb:	66 6a 09             	pushw  $0x9
    7dee:	66 68 80 a0          	pushw  $0xa080
    7df2:	00 00                	add    %al,(%eax)
    7df4:	66 e8 28 18          	callw  9620 <run+0x129>
    7df8:	00 00                	add    %al,(%eax)
    7dfa:	66 83 c4 0c          	add    $0xc,%sp

    print("chenhyOS",10,32);
    7dfe:	66 6a 20             	pushw  $0x20
    7e01:	66 6a 0a             	pushw  $0xa
    7e04:	66 68 b4 a0          	pushw  $0xa0b4
    7e08:	00 00                	add    %al,(%eax)
    7e0a:	66 e8 12 18          	callw  9620 <run+0x129>
    7e0e:	00 00                	add    %al,(%eax)
    7e10:	66 83 c4 0c          	add    $0xc,%sp
   print(Messeage,11,16); //print the msg
    7e14:	66 6a 10             	pushw  $0x10
    7e17:	66 6a 0b             	pushw  $0xb
    7e1a:	67 66 ff 75 fc       	pushw  -0x4(%di)
    7e1f:	66 e8 fd 17          	callw  9620 <run+0x129>
    7e23:	00 00                	add    %al,(%eax)
    7e25:	66 83 c4 0c          	add    $0xc,%sp
   print("===================================================",12,12);
    7e29:	66 6a 0c             	pushw  $0xc
    7e2c:	66 6a 0c             	pushw  $0xc
    7e2f:	66 68 80 a0          	pushw  $0xa080
    7e33:	00 00                	add    %al,(%eax)
    7e35:	66 e8 e7 17          	callw  9620 <run+0x129>
    7e39:	00 00                	add    %al,(%eax)
    7e3b:	66 83 c4 0c          	add    $0xc,%sp
   

   char a = getch();
    7e3f:	66 e8 8a 1a          	callw  98cd <read_and_print_input+0x3a>
    7e43:	00 00                	add    %al,(%eax)
    7e45:	67 88 45 fb          	mov    %al,-0x5(%di)
   clearscreen(); 
    7e49:	66 e8 ba 08          	callw  8707 <stack_copy+0x35>
    7e4d:	00 00                	add    %al,(%eax)
    char const *Msg1 = "Press any key to get help\n\r";
    7e4f:	67 66 c7 45 f4 bd a0 	movw   $0xa0bd,-0xc(%di)
    7e56:	00 00                	add    %al,(%eax)
   prints(Msg1);
    7e58:	67 66 ff 75 f4       	pushw  -0xc(%di)
    7e5d:	66 e8 50 18          	callw  96b1 <print+0x8f>
    7e61:	00 00                	add    %al,(%eax)
    7e63:	66 83 c4 04          	add    $0x4,%sp
   print("!",13,39);
    7e67:	66 6a 27             	pushw  $0x27
    7e6a:	66 6a 0d             	pushw  $0xd
    7e6d:	66 68 d9 a0          	pushw  $0xa0d9
    7e71:	00 00                	add    %al,(%eax)
    7e73:	66 e8 a9 17          	callw  9620 <run+0x129>
    7e77:	00 00                	add    %al,(%eax)
    7e79:	66 83 c4 0c          	add    $0xc,%sp
   //Initial_Int();
    /*buildmap();还有待解决debug
    void *addr = (void*) 0xB100;
    _loadP(2,21,addr);
    showtable();*/
    terminal();
    7e7d:	66 e8 c6 11          	callw  9047 <_Get_Minutes_2+0x1b>
    7e81:	00 00                	add    %al,(%eax)
    return 0;
    7e83:	66 b8 00 00          	mov    $0x0,%ax
    7e87:	00 00                	add    %al,(%eax)
    7e89:	66 c9                	leavew 
    7e8b:	66 c3                	retw   

00007e8d <savePCB>:
#include "schedule.h"

void savePCB(){
    7e8d:	66 55                	push   %bp
    7e8f:	66 89 e5             	mov    %sp,%bp
    _save();
    7e92:	66 e8 c8 0f          	callw  8e5e <_initialInt_08h+0x39>
    7e96:	00 00                	add    %al,(%eax)
}
    7e98:	66 5d                	pop    %bp
    7e9a:	66 c3                	retw   

00007e9c <initial_PCB>:
void initial_PCB(int index){
    7e9c:	66 55                	push   %bp
    7e9e:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    7ea1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7ea6:	66 40                	inc    %ax
    7ea8:	66 c1 e0 0c          	shl    $0xc,%ax
    7eac:	66 89 c2             	mov    %ax,%dx
    7eaf:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7eb4:	66 c1 e0 02          	shl    $0x2,%ax
    7eb8:	66 89 c1             	mov    %ax,%cx
    7ebb:	66 c1 e1 04          	shl    $0x4,%cx
    7ebf:	66 01 c8             	add    %cx,%ax
    7ec2:	66 05 50 bb          	add    $0xbb50,%ax
    7ec6:	00 00                	add    %al,(%eax)
    7ec8:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    7ecc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7ed1:	66 40                	inc    %ax
    7ed3:	66 c1 e0 0c          	shl    $0xc,%ax
    7ed7:	66 89 c2             	mov    %ax,%dx
    7eda:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7edf:	66 c1 e0 02          	shl    $0x2,%ax
    7ee3:	66 89 c1             	mov    %ax,%cx
    7ee6:	66 c1 e1 04          	shl    $0x4,%cx
    7eea:	66 01 c8             	add    %cx,%ax
    7eed:	66 05 40 bb          	add    $0xbb40,%ax
    7ef1:	00 00                	add    %al,(%eax)
    7ef3:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
    7ef7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7efc:	66 40                	inc    %ax
    7efe:	66 c1 e0 0c          	shl    $0xc,%ax
    7f02:	66 89 c2             	mov    %ax,%dx
    7f05:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f0a:	66 c1 e0 02          	shl    $0x2,%ax
    7f0e:	66 89 c1             	mov    %ax,%cx
    7f11:	66 c1 e1 04          	shl    $0x4,%cx
    7f15:	66 01 c8             	add    %cx,%ax
    7f18:	66 05 40 bb          	add    $0xbb40,%ax
    7f1c:	00 00                	add    %al,(%eax)
    7f1e:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
    7f23:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f28:	66 c1 e0 02          	shl    $0x2,%ax
    7f2c:	66 89 c2             	mov    %ax,%dx
    7f2f:	66 c1 e2 04          	shl    $0x4,%dx
    7f33:	66 01 d0             	add    %dx,%ax
    7f36:	66 05 40 bb          	add    $0xbb40,%ax
    7f3a:	00 00                	add    %al,(%eax)
    7f3c:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
    7f43:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
    7f45:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f4a:	66 c1 e0 02          	shl    $0x2,%ax
    7f4e:	66 89 c2             	mov    %ax,%dx
    7f51:	66 c1 e2 04          	shl    $0x4,%dx
    7f55:	66 01 d0             	add    %dx,%ax
    7f58:	66 05 40 bb          	add    $0xbb40,%ax
    7f5c:	00 00                	add    %al,(%eax)
    7f5e:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    7f65:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = RUN;
    7f67:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f6c:	66 c1 e0 02          	shl    $0x2,%ax
    7f70:	66 89 c2             	mov    %ax,%dx
    7f73:	66 c1 e2 04          	shl    $0x4,%dx
    7f77:	66 01 d0             	add    %dx,%ax
    7f7a:	66 05 50 bb          	add    $0xbb50,%ax
    7f7e:	00 00                	add    %al,(%eax)
    7f80:	67 66 c7 40 08 01 00 	movw   $0x1,0x8(%bx,%si)
    7f87:	00 00                	add    %al,(%eax)
    PCB_list[index ].eflags = 512;
    7f89:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f8e:	66 c1 e0 02          	shl    $0x2,%ax
    7f92:	66 89 c2             	mov    %ax,%dx
    7f95:	66 c1 e2 04          	shl    $0x4,%dx
    7f99:	66 01 d0             	add    %dx,%ax
    7f9c:	66 05 50 bb          	add    $0xbb50,%ax
    7fa0:	00 00                	add    %al,(%eax)
    7fa2:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    7fa9:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    7fab:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7fb0:	66 c1 e0 02          	shl    $0x2,%ax
    7fb4:	66 89 c2             	mov    %ax,%dx
    7fb7:	66 c1 e2 04          	shl    $0x4,%dx
    7fbb:	66 01 d0             	add    %dx,%ax
    7fbe:	67 66 8d 90 50 bb    	lea    -0x44b0(%bx,%si),%dx
    7fc4:	00 00                	add    %al,(%eax)
    7fc6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7fcb:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 0;
    7fd0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7fd5:	66 c1 e0 02          	shl    $0x2,%ax
    7fd9:	66 89 c2             	mov    %ax,%dx
    7fdc:	66 c1 e2 04          	shl    $0x4,%dx
    7fe0:	66 01 d0             	add    %dx,%ax
    7fe3:	66 05 60 bb          	add    $0xbb60,%ax
    7fe7:	00 00                	add    %al,(%eax)
    7fe9:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    7fef:	00 00                	add    %al,(%eax)
}
    7ff1:	66 5d                	pop    %bp
    7ff3:	66 c3                	retw   

00007ff5 <Set_PCB>:
void Set_PCB(){
    7ff5:	66 55                	push   %bp
    7ff7:	66 89 e5             	mov    %sp,%bp
    7ffa:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    7ffe:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8005:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    8007:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    800e:	00 00                	add    %al,(%eax)
    8010:	eb 27                	jmp    8039 <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    8012:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8017:	66 c1 e0 02          	shl    $0x2,%ax
    801b:	66 89 c2             	mov    %ax,%dx
    801e:	66 c1 e2 04          	shl    $0x4,%dx
    8022:	66 01 d0             	add    %dx,%ax
    8025:	66 05 50 bb          	add    $0xbb50,%ax
    8029:	00 00                	add    %al,(%eax)
    802b:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    8032:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 0;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    8034:	67 66 ff 45 fc       	incw   -0x4(%di)
    8039:	67 66 83 7d fc 07    	cmpw   $0x7,-0x4(%di)
    803f:	7e d1                	jle    8012 <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    8041:	66 c9                	leavew 
    8043:	66 c3                	retw   

00008045 <sys_schedule>:
void sys_schedule(){
    8045:	66 55                	push   %bp
    8047:	66 89 e5             	mov    %sp,%bp
    804a:	66 83 ec 0c          	sub    $0xc,%sp
    int i,j;
    int index = -1;
    804e:	67 66 c7 45 f4 ff ff 	movw   $0xffff,-0xc(%di)
    8055:	ff                   	(bad)  
    8056:	ff 66 a1             	jmp    *-0x5f(%esi)
    i = _CurrentProg - PCB_list;
    8059:	40                   	inc    %eax
    805a:	bd 66 89 c2 66       	mov    $0x66c28966,%ebp
    805f:	b8 20 bb 00 00       	mov    $0xbb20,%eax
    8064:	66 29 c2             	sub    %ax,%dx
    8067:	66 89 d0             	mov    %dx,%ax
    806a:	66 c1 f8 02          	sar    $0x2,%ax
    806e:	66 89 c2             	mov    %ax,%dx
    8071:	66 89 d0             	mov    %dx,%ax
    8074:	66 01 c0             	add    %ax,%ax
    8077:	66 01 d0             	add    %dx,%ax
    807a:	67 66 8d 14          	lea    (%si),%dx
    807e:	85 00                	test   %eax,(%eax)
    8080:	00 00                	add    %al,(%eax)
    8082:	00 66 01             	add    %ah,0x1(%esi)
    8085:	d0 66 89             	shlb   -0x77(%esi)
    8088:	c2 66 c1             	ret    $0xc166
    808b:	e2 08                	loop   8095 <sys_schedule+0x50>
    808d:	66 01 d0             	add    %dx,%ax
    8090:	66 89 c2             	mov    %ax,%dx
    8093:	66 c1 e2 10          	shl    $0x10,%dx
    8097:	66 01 d0             	add    %dx,%ax
    809a:	66 f7 d8             	neg    %ax
    809d:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    for(j = 0;j < PCB_NUMMER;j ++){
    80a2:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    80a9:	00 00                	add    %al,(%eax)
    80ab:	e9 a6 00 67 66       	jmp    66678156 <_end+0x6666c412>
        if(i == PCB_NUMMER - 1){
    80b0:	83 7d fc 07          	cmpl   $0x7,-0x4(%ebp)
    80b4:	75 14                	jne    80ca <sys_schedule+0x85>
            _CurrentProg = PCB_list + 1;
    80b6:	66 c7 06 40 bd       	movw   $0xbd40,(%esi)
    80bb:	64                   	fs
    80bc:	bb 00 00 67 66       	mov    $0x66670000,%ebx
            i = 1;
    80c1:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    80c8:	eb 11                	jmp    80db <sys_schedule+0x96>
        }
        else{
            _CurrentProg ++;
    80ca:	66 a1 40 bd 66 83    	mov    0x8366bd40,%ax
    80d0:	c0 44 66 a3 40       	rolb   $0x40,-0x5d(%esi,%eiz,2)
    80d5:	bd 67 66 ff 45       	mov    $0x45ff6667,%ebp
            i ++;
    80da:	fc                   	cld    
        }
        if(_CurrentProg -> prg_status == RUN){
    80db:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    80e1:	8b 40 38             	mov    0x38(%eax),%eax
    80e4:	66 83 f8 01          	cmp    $0x1,%ax
    80e8:	75 03                	jne    80ed <sys_schedule+0xa8>
            return;
    80ea:	e9 c4 00 66 a1       	jmp    a16681b3 <_end+0xa165c46f>
        }
        if(_CurrentProg -> prg_status == READY && index == -1){
    80ef:	40                   	inc    %eax
    80f0:	bd 67 66 8b 40       	mov    $0x408b6667,%ebp
    80f5:	38 66 83             	cmp    %ah,-0x7d(%esi)
    80f8:	f8                   	clc    
    80f9:	03 75 53             	add    0x53(%ebp),%esi
    80fc:	67 66 83 7d f4 ff    	cmpw   $0xffff,-0xc(%di)
    8102:	75 4b                	jne    814f <sys_schedule+0x10a>
           index = _CurrentProg - PCB_list;
    8104:	66 a1 40 bd 66 89    	mov    0x8966bd40,%ax
    810a:	c2 66 b8             	ret    $0xb866
    810d:	20 bb 00 00 66 29    	and    %bh,0x29660000(%ebx)
    8113:	c2 66 89             	ret    $0x8966
    8116:	d0 66 c1             	shlb   -0x3f(%esi)
    8119:	f8                   	clc    
    811a:	02 66 89             	add    -0x77(%esi),%ah
    811d:	c2 66 89             	ret    $0x8966
    8120:	d0 66 01             	shlb   0x1(%esi)
    8123:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    8127:	67 66 8d 14          	lea    (%si),%dx
    812b:	85 00                	test   %eax,(%eax)
    812d:	00 00                	add    %al,(%eax)
    812f:	00 66 01             	add    %ah,0x1(%esi)
    8132:	d0 66 89             	shlb   -0x77(%esi)
    8135:	c2 66 c1             	ret    $0xc166
    8138:	e2 08                	loop   8142 <sys_schedule+0xfd>
    813a:	66 01 d0             	add    %dx,%ax
    813d:	66 89 c2             	mov    %ax,%dx
    8140:	66 c1 e2 10          	shl    $0x10,%dx
    8144:	66 01 d0             	add    %dx,%ax
    8147:	66 f7 d8             	neg    %ax
    814a:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
}
void sys_schedule(){
    int i,j;
    int index = -1;
    i = _CurrentProg - PCB_list;
    for(j = 0;j < PCB_NUMMER;j ++){
    814f:	67 66 ff 45 f8       	incw   -0x8(%di)
    8154:	67 66 83 7d f8 07    	cmpw   $0x7,-0x8(%di)
    815a:	0f 8e 50 ff 67 66    	jle    666880b0 <_end+0x6667c36c>
        }
        if(_CurrentProg -> prg_status == READY && index == -1){
           index = _CurrentProg - PCB_list;
        }
    }
    if(index != -1){
    8160:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
    8164:	74 41                	je     81a7 <sys_schedule+0x162>
        _CurrentProg = PCB_list + index;
    8166:	67 66 8b 45 f4       	mov    -0xc(%di),%ax
    816b:	66 c1 e0 02          	shl    $0x2,%ax
    816f:	66 89 c2             	mov    %ax,%dx
    8172:	66 c1 e2 04          	shl    $0x4,%dx
    8176:	66 01 d0             	add    %dx,%ax
    8179:	66 05 20 bb          	add    $0xbb20,%ax
    817d:	00 00                	add    %al,(%eax)
    817f:	66 a3 40 bd 67 66    	mov    %ax,0x6667bd40
        PCB_list[index].prg_status = RUN;
    8185:	8b 45 f4             	mov    -0xc(%ebp),%eax
    8188:	66 c1 e0 02          	shl    $0x2,%ax
    818c:	66 89 c2             	mov    %ax,%dx
    818f:	66 c1 e2 04          	shl    $0x4,%dx
    8193:	66 01 d0             	add    %dx,%ax
    8196:	66 05 50 bb          	add    $0xbb50,%ax
    819a:	00 00                	add    %al,(%eax)
    819c:	67 66 c7 40 08 01 00 	movw   $0x1,0x8(%bx,%si)
    81a3:	00 00                	add    %al,(%eax)
        return;
    81a5:	eb 0a                	jmp    81b1 <sys_schedule+0x16c>
    }
    _CurrentProg = PCB_list ;
    81a7:	66 c7 06 40 bd       	movw   $0xbd40,(%esi)
    81ac:	20 bb 00 00 90 66    	and    %bh,0x66900000(%ebx)
    return;
}
    81b2:	c9                   	leave  
    81b3:	66 c3                	retw   

000081b5 <sys_exit>:
void sys_exit(){
    81b5:	66 55                	push   %bp
    81b7:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    81ba:	fa                   	cli    
    _CurrentProg -> prg_status = EXIT;
    81bb:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    81c1:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    __asm__("sti\n");
    81c8:	fb                   	sti    
}
    81c9:	66 5d                	pop    %bp
    81cb:	66 c3                	retw   

000081cd <sys_exit_fork>:

void sys_exit_fork(char ch){
    81cd:	66 55                	push   %bp
    81cf:	66 89 e5             	mov    %sp,%bp
    81d2:	66 83 ec 08          	sub    $0x8,%sp
    81d6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    81db:	67 88 45 f8          	mov    %al,-0x8(%di)
    int index = _CurrentProg -> fid;
    81df:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    81e5:	8b 40 40             	mov    0x40(%eax),%eax
    81e8:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_wakeup(index);
    81ed:	67 66 ff 75 fc       	pushw  -0x4(%di)
    81f2:	66 e8 e4 00          	callw  82da <sys_bolocked+0x2b>
    81f6:	00 00                	add    %al,(%eax)
    81f8:	66 83 c4 04          	add    $0x4,%sp
    PCB_list[_CurrentProg -> fid].eax = ch;
    81fc:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    8202:	8b 40 40             	mov    0x40(%eax),%eax
    8205:	67 66 0f be 55 f8    	movsbw -0x8(%di),%dx
    820b:	66 c1 e0 02          	shl    $0x2,%ax
    820f:	66 89 c1             	mov    %ax,%cx
    8212:	66 c1 e1 04          	shl    $0x4,%cx
    8216:	66 01 c8             	add    %cx,%ax
    8219:	66 05 20 bb          	add    $0xbb20,%ax
    821d:	00 00                	add    %al,(%eax)
    821f:	67 66 89 10          	mov    %dx,(%bx,%si)
    _CurrentProg -> prg_status = EXIT;
    8223:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    8229:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    _Schedule();
    8230:	66 e8 95 06          	callw  88c9 <_fork_user+0x9>
    8234:	00 00                	add    %al,(%eax)
}
    8236:	66 c9                	leavew 
    8238:	66 c3                	retw   

0000823a <sys_wait>:
int sys_wait(){
    823a:	66 55                	push   %bp
    823c:	66 89 e5             	mov    %sp,%bp
    823f:	66 83 ec 04          	sub    $0x4,%sp
    int index = _CurrentProg - PCB_list;
    8243:	66 a1 40 bd 66 89    	mov    0x8966bd40,%ax
    8249:	c2 66 b8             	ret    $0xb866
    824c:	20 bb 00 00 66 29    	and    %bh,0x29660000(%ebx)
    8252:	c2 66 89             	ret    $0x8966
    8255:	d0 66 c1             	shlb   -0x3f(%esi)
    8258:	f8                   	clc    
    8259:	02 66 89             	add    -0x77(%esi),%ah
    825c:	c2 66 89             	ret    $0x8966
    825f:	d0 66 01             	shlb   0x1(%esi)
    8262:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    8266:	67 66 8d 14          	lea    (%si),%dx
    826a:	85 00                	test   %eax,(%eax)
    826c:	00 00                	add    %al,(%eax)
    826e:	00 66 01             	add    %ah,0x1(%esi)
    8271:	d0 66 89             	shlb   -0x77(%esi)
    8274:	c2 66 c1             	ret    $0xc166
    8277:	e2 08                	loop   8281 <sys_wait+0x47>
    8279:	66 01 d0             	add    %dx,%ax
    827c:	66 89 c2             	mov    %ax,%dx
    827f:	66 c1 e2 10          	shl    $0x10,%dx
    8283:	66 01 d0             	add    %dx,%ax
    8286:	66 f7 d8             	neg    %ax
    8289:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_bolocked(index);
    828e:	67 66 ff 75 fc       	pushw  -0x4(%di)
    8293:	66 e8 16 00          	callw  82ad <sys_wait+0x73>
    8297:	00 00                	add    %al,(%eax)
    8299:	66 83 c4 04          	add    $0x4,%sp
    _Schedule();
    829d:	66 e8 28 06          	callw  88c9 <_fork_user+0x9>
    82a1:	00 00                	add    %al,(%eax)
    return _CurrentProg -> eax;
    82a3:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    82a9:	8b 00                	mov    (%eax),%eax
}
    82ab:	66 c9                	leavew 
    82ad:	66 c3                	retw   

000082af <sys_bolocked>:
void sys_bolocked(int index){
    82af:	66 55                	push   %bp
    82b1:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    82b4:	fa                   	cli    
    PCB_list[index].prg_status = BLOCKED;
    82b5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    82ba:	66 c1 e0 02          	shl    $0x2,%ax
    82be:	66 89 c2             	mov    %ax,%dx
    82c1:	66 c1 e2 04          	shl    $0x4,%dx
    82c5:	66 01 d0             	add    %dx,%ax
    82c8:	66 05 50 bb          	add    $0xbb50,%ax
    82cc:	00 00                	add    %al,(%eax)
    82ce:	67 66 c7 40 08 02 00 	movw   $0x2,0x8(%bx,%si)
    82d5:	00 00                	add    %al,(%eax)
    __asm__("sti\n");
    82d7:	fb                   	sti    
}
    82d8:	66 5d                	pop    %bp
    82da:	66 c3                	retw   

000082dc <sys_wakeup>:
void sys_wakeup(int index){
    82dc:	66 55                	push   %bp
    82de:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    82e1:	fa                   	cli    
    PCB_list[index].prg_status = READY;
    82e2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    82e7:	66 c1 e0 02          	shl    $0x2,%ax
    82eb:	66 89 c2             	mov    %ax,%dx
    82ee:	66 c1 e2 04          	shl    $0x4,%dx
    82f2:	66 01 d0             	add    %dx,%ax
    82f5:	66 05 50 bb          	add    $0xbb50,%ax
    82f9:	00 00                	add    %al,(%eax)
    82fb:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    8302:	00 00                	add    %al,(%eax)
    __asm__("sti\n");
    8304:	fb                   	sti    
}
    8305:	66 5d                	pop    %bp
    8307:	66 c3                	retw   

00008309 <sys_run>:
void sys_run(){
    8309:	66 55                	push   %bp
    830b:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    830e:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    8314:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    831b:	66 5d                	pop    %bp
    831d:	66 c3                	retw   

0000831f <do_fork>:

int do_fork(){
    831f:	66 55                	push   %bp
    8321:	66 89 e5             	mov    %sp,%bp
    8324:	66 83 ec 04          	sub    $0x4,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    8328:	67 66 c7 45 fc 64 bb 	movw   $0xbb64,-0x4(%di)
    832f:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN )    fork_prg = fork_prg + 1;//应该增加used位，防止被覆盖
    8331:	eb 06                	jmp    8339 <do_fork+0x1a>
    8333:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    8339:	67 66 81 7d fc 40 bd 	cmpw   $0xbd40,-0x4(%di)
    8340:	00 00                	add    %al,(%eax)
    8342:	73 10                	jae    8354 <do_fork+0x35>
    8344:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8349:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    834e:	66 83 f8 01          	cmp    $0x1,%ax
    8352:	74 df                	je     8333 <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    8354:	67 66 81 7d fc fc bc 	cmpw   $0xbcfc,-0x4(%di)
    835b:	00 00                	add    %al,(%eax)
    835d:	76 0f                	jbe    836e <do_fork+0x4f>
    835f:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    8365:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    836b:	e9 dc 01 66 e8       	jmp    e866854c <_end+0xe865c808>
    else{
        _Schedule_once();
    8370:	41                   	inc    %ecx
    8371:	05 00 00 66 83       	add    $0x83660000,%eax
        __asm__("sub $6,%esp");
    8376:	ec                   	in     (%dx),%al
    8377:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    8378:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    837e:	ff 75 fc             	pushl  -0x4(%ebp)
    8381:	66 50                	push   %ax
    8383:	66 e8 3e 02          	callw  85c5 <counter+0x62>
    8387:	00 00                	add    %al,(%eax)
    8389:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    838d:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    8391:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8396:	66 b8 20 bb          	mov    $0xbb20,%ax
    839a:	00 00                	add    %al,(%eax)
    839c:	66 29 c2             	sub    %ax,%dx
    839f:	66 89 d0             	mov    %dx,%ax
    83a2:	66 c1 f8 02          	sar    $0x2,%ax
    83a6:	66 89 c2             	mov    %ax,%dx
    83a9:	66 89 d0             	mov    %dx,%ax
    83ac:	66 01 c0             	add    %ax,%ax
    83af:	66 01 d0             	add    %dx,%ax
    83b2:	67 66 8d 14          	lea    (%si),%dx
    83b6:	85 00                	test   %eax,(%eax)
    83b8:	00 00                	add    %al,(%eax)
    83ba:	00 66 01             	add    %ah,0x1(%esi)
    83bd:	d0 66 89             	shlb   -0x77(%esi)
    83c0:	c2 66 c1             	ret    $0xc166
    83c3:	e2 08                	loop   83cd <do_fork+0xae>
    83c5:	66 01 d0             	add    %dx,%ax
    83c8:	66 89 c2             	mov    %ax,%dx
    83cb:	66 c1 e2 10          	shl    $0x10,%dx
    83cf:	66 01 d0             	add    %dx,%ax
    83d2:	66 f7 d8             	neg    %ax
    83d5:	66 89 c2             	mov    %ax,%dx
    83d8:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    83dd:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    83e2:	66 a1 40 bd 66 89    	mov    0x8966bd40,%ax
    83e8:	c2 66 b8             	ret    $0xb866
    83eb:	20 bb 00 00 66 29    	and    %bh,0x29660000(%ebx)
    83f1:	c2 66 89             	ret    $0x8966
    83f4:	d0 66 c1             	shlb   -0x3f(%esi)
    83f7:	f8                   	clc    
    83f8:	02 66 89             	add    -0x77(%esi),%ah
    83fb:	c2 66 89             	ret    $0x8966
    83fe:	d0 66 01             	shlb   0x1(%esi)
    8401:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    8405:	67 66 8d 14          	lea    (%si),%dx
    8409:	85 00                	test   %eax,(%eax)
    840b:	00 00                	add    %al,(%eax)
    840d:	00 66 01             	add    %ah,0x1(%esi)
    8410:	d0 66 89             	shlb   -0x77(%esi)
    8413:	c2 66 c1             	ret    $0xc166
    8416:	e2 08                	loop   8420 <do_fork+0x101>
    8418:	66 01 d0             	add    %dx,%ax
    841b:	66 89 c2             	mov    %ax,%dx
    841e:	66 c1 e2 10          	shl    $0x10,%dx
    8422:	66 01 d0             	add    %dx,%ax
    8425:	66 f7 d8             	neg    %ax
    8428:	66 89 c2             	mov    %ax,%dx
    842b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8430:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    8435:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    843b:	8b 50 20             	mov    0x20(%eax),%edx
    843e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8443:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    8448:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    844d:	66 b8 20 bb          	mov    $0xbb20,%ax
    8451:	00 00                	add    %al,(%eax)
    8453:	66 29 c2             	sub    %ax,%dx
    8456:	66 89 d0             	mov    %dx,%ax
    8459:	66 c1 f8 02          	sar    $0x2,%ax
    845d:	66 89 c2             	mov    %ax,%dx
    8460:	66 89 d0             	mov    %dx,%ax
    8463:	66 01 c0             	add    %ax,%ax
    8466:	66 01 d0             	add    %dx,%ax
    8469:	67 66 8d 14          	lea    (%si),%dx
    846d:	85 00                	test   %eax,(%eax)
    846f:	00 00                	add    %al,(%eax)
    8471:	00 66 01             	add    %ah,0x1(%esi)
    8474:	d0 66 89             	shlb   -0x77(%esi)
    8477:	c2 66 c1             	ret    $0xc166
    847a:	e2 08                	loop   8484 <do_fork+0x165>
    847c:	66 01 d0             	add    %dx,%ax
    847f:	66 89 c2             	mov    %ax,%dx
    8482:	66 c1 e2 10          	shl    $0x10,%dx
    8486:	66 01 d0             	add    %dx,%ax
    8489:	66 f7 d8             	neg    %ax
    848c:	66 83 c0 02          	add    $0x2,%ax
    8490:	66 c1 e0 0c          	shl    $0xc,%ax
    8494:	66 89 c2             	mov    %ax,%dx
    8497:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    849c:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    84a1:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    84a7:	8b 50 30             	mov    0x30(%eax),%edx
    84aa:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    84af:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    84b4:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    84b9:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    84c0:	00 00                	add    %al,(%eax)
       // __asm__("enter $0,$0");
        _Schedule_once();
    84c2:	66 e8 ed 03          	callw  88b3 <S+0x14>
    84c6:	00 00                	add    %al,(%eax)
        __asm__("sub $6,%esp");
    84c8:	66 83 ec 06          	sub    $0x6,%sp
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    84cc:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    84d1:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    84d6:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    84dc:	8b 50 28             	mov    0x28(%eax),%edx
    84df:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    84e5:	8b 40 24             	mov    0x24(%eax),%eax
    84e8:	66 51                	push   %cx
    84ea:	66 52                	push   %dx
    84ec:	66 50                	push   %ax
    84ee:	66 e8 b1 02          	callw  87a3 <Message31+0x4>
    84f2:	00 00                	add    %al,(%eax)
    84f4:	66 83 c4 0c          	add    $0xc,%sp
        __asm__("add $6,%esp");
    84f8:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> ip = _CurrentProg -> ip;
    84fc:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    8502:	8b 50 2c             	mov    0x2c(%eax),%edx
    8505:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    850a:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    850f:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8514:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    851a:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    851c:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    8522:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    8525:	75 08                	jne    852f <do_fork+0x210>
            return 0;
    8527:	66 b8 00 00          	mov    $0x0,%ax
    852b:	00 00                	add    %al,(%eax)
    852d:	eb 1b                	jmp    854a <do_fork+0x22b>
        }
        _CurrentProg -> eax = _CurrentProg -> id;
    852f:	66 a1 40 bd 66 8b    	mov    0x8b66bd40,%ax
    8535:	16                   	push   %ss
    8536:	40                   	inc    %eax
    8537:	bd 67 66 8b 52       	mov    $0x528b6667,%ebp
    853c:	3c 67                	cmp    $0x67,%al
    853e:	66 89 10             	mov    %dx,(%eax)
        return _CurrentProg -> eax;
    8541:	66 a1 40 bd 67 66    	mov    0x6667bd40,%ax
    8547:	8b 00                	mov    (%eax),%eax
    8549:	90                   	nop
    }
}
    854a:	66 c9                	leavew 
    854c:	66 c3                	retw   

0000854e <thread_join>:
void thread_join(){
    854e:	66 55                	push   %bp
    8550:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    8553:	90                   	nop
    8554:	66 e8 09 00          	callw  8561 <thread_join+0x13>
    8558:	00 00                	add    %al,(%eax)
    855a:	66 85 c0             	test   %ax,%ax
    855d:	75 f5                	jne    8554 <thread_join+0x6>
    }
}
    855f:	66 5d                	pop    %bp
    8561:	66 c3                	retw   

00008563 <counter>:
int counter(){
    8563:	66 55                	push   %bp
    8565:	66 89 e5             	mov    %sp,%bp
    8568:	66 83 ec 08          	sub    $0x8,%sp
    int i = 0;
    856c:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8573:	00 00                	add    %al,(%eax)
    int count = 0;
    8575:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    857c:	00 00                	add    %al,(%eax)
    for(i = 1;i < PCB_NUMMER;i ++){
    857e:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    8585:	00 00                	add    %al,(%eax)
    8587:	eb 2d                	jmp    85b6 <counter+0x53>
        if(PCB_list[i].prg_status != EXIT){
    8589:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    858e:	66 c1 e0 02          	shl    $0x2,%ax
    8592:	66 89 c2             	mov    %ax,%dx
    8595:	66 c1 e2 04          	shl    $0x4,%dx
    8599:	66 01 d0             	add    %dx,%ax
    859c:	66 05 50 bb          	add    $0xbb50,%ax
    85a0:	00 00                	add    %al,(%eax)
    85a2:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    85a7:	66 85 c0             	test   %ax,%ax
    85aa:	74 05                	je     85b1 <counter+0x4e>
            count ++;
    85ac:	67 66 ff 45 f8       	incw   -0x8(%di)
    }
}
int counter(){
    int i = 0;
    int count = 0;
    for(i = 1;i < PCB_NUMMER;i ++){
    85b1:	67 66 ff 45 fc       	incw   -0x4(%di)
    85b6:	67 66 83 7d fc 07    	cmpw   $0x7,-0x4(%di)
    85bc:	7e cb                	jle    8589 <counter+0x26>
        if(PCB_list[i].prg_status != EXIT){
            count ++;
        }
    }
    return count;
    85be:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    85c3:	66 c9                	leavew 
    85c5:	66 c3                	retw   

000085c7 <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    85c7:	66 55                	push   %bp
    85c9:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    85cc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    85d1:	67 66 8b 10          	mov    (%bx,%si),%dx
    85d5:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    85da:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    85de:	67 66 8b 45 08       	mov    0x8(%di),%ax
    85e3:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    85e8:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    85ed:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    85f2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    85f7:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    85fc:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8601:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    8606:	67 66 8b 45 08       	mov    0x8(%di),%ax
    860b:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    8610:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8615:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    861a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    861f:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    8624:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8629:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    862e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8633:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    8638:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    863d:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    8642:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8647:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    864c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8651:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    8656:	67 66 8b 45 08       	mov    0x8(%di),%ax
    865b:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    8660:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8665:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    866a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    866f:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    8674:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8679:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    867e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8683:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    8688:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    868d:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    8692:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8697:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    869c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    86a1:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    86a6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    86ab:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    86b0:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    86b5:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    86ba:	67 66 8b 45 08       	mov    0x8(%di),%ax
    86bf:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    86c4:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    86c9:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    86ce:	66 5d                	pop    %bp
    86d0:	66 c3                	retw   

000086d2 <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    86d2:	66 55                	push   %bp
    86d4:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    86d7:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    86dc:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    86e1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    86e6:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    86eb:	67 66 8b 45 08       	mov    0x8(%di),%ax
    86f0:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    86f5:	66 51                	push   %cx
    86f7:	66 52                	push   %dx
    86f9:	66 50                	push   %ax
    86fb:	66 e8 a4 00          	callw  87a3 <Message31+0x4>
    86ff:	00 00                	add    %al,(%eax)
    8701:	66 83 c4 0c          	add    $0xc,%sp
}
    8705:	66 c9                	leavew 
    8707:	66 c3                	retw   

00008709 <clearscreen>:
#include "use.h"
//====================================================
//                封装清屏函数
//====================================================
void clearscreen(){
    8709:	66 55                	push   %bp
    870b:	66 89 e5             	mov    %sp,%bp
	_clearscreen();//C调用汇编时会压入四个字节，必须考虑到这个，写出newret，是pop edx,而非 pop dx；
    870e:	66 e8 c0 00          	callw  87d2 <end_for_copy+0x5>
    8712:	00 00                	add    %al,(%eax)
	//__asm__("pop %ax");
	return ;
    8714:	90                   	nop
}
    8715:	66 5d                	pop    %bp
    8717:	66 c3                	retw   

00008719 <Initial_Int>:
	}
}*/
//====================================================
//                封装中断初始化函数
//====================================================
void Initial_Int(){
    8719:	66 55                	push   %bp
    871b:	66 89 e5             	mov    %sp,%bp
	_initialInt();
    871e:	66 e8 dd 04          	callw  8bff <_SetINT3Ah+0x17>
    8722:	00 00                	add    %al,(%eax)
	return;
    8724:	90                   	nop
}
    8725:	66 5d                	pop    %bp
    8727:	66 c3                	retw   

00008729 <Initial_Int_09h>:
void Initial_Int_09h(){
    8729:	66 55                	push   %bp
    872b:	66 89 e5             	mov    %sp,%bp
	_initialInt_09h();
    872e:	66 e8 b7 06          	callw  8de9 <_initialInt+0x1e8>
    8732:	00 00                	add    %al,(%eax)
}
    8734:	66 5d                	pop    %bp
    8736:	66 c3                	retw   

00008738 <Initial_Int_08h>:
void Initial_Int_08h(){
    8738:	66 55                	push   %bp
    873a:	66 89 e5             	mov    %sp,%bp
	_initialInt_08h();
    873d:	66 e8 e2 06          	callw  8e23 <_initialInt_09h+0x38>
    8741:	00 00                	add    %al,(%eax)
}
    8743:	66 5d                	pop    %bp
    8745:	66 c3                	retw   

00008747 <loadProg>:
void loadProg(int count,int begin,int memory_postion){
    8747:	66 55                	push   %bp
    8749:	66 89 e5             	mov    %sp,%bp
    _loadP(count,begin,memory_postion);
    874c:	67 66 ff 75 10       	pushw  0x10(%di)
    8751:	67 66 ff 75 0c       	pushw  0xc(%di)
    8756:	67 66 ff 75 08       	pushw  0x8(%di)
    875b:	66 e8 e6 00          	callw  8845 <_setPoint+0x15>
    875f:	00 00                	add    %al,(%eax)
    8761:	66 83 c4 0c          	add    $0xc,%sp
    8765:	66 c9                	leavew 
    8767:	66 c3                	retw   
    8769:	66 90                	xchg   %ax,%ax
    876b:	66 90                	xchg   %ax,%ax
    876d:	66 90                	xchg   %ax,%ax
    876f:	90                   	nop

00008770 <count>:
    8770:	08 2d 00 00 00 00    	or     %ch,0x0

00008771 <alpha>:
    8771:	2d 00 00 00 00       	sub    $0x0,%eax

00008772 <int_09_saved>:
    8772:	00 00                	add    %al,(%eax)
	...

00008776 <program_saved>:
    8776:	70 00                	jo     8778 <program_saved+0x2>
	...

0000877a <ds_saved>:
    877a:	7c 00                	jl     877c <ds_saved+0x2>
	...

0000877e <return_save>:
    877e:	88 00                	mov    %al,(%eax)

00008780 <esi_save>:
    8780:	96                   	xchg   %eax,%esi
    8781:	00 00                	add    %al,(%eax)
	...

00008784 <temp>:
    8784:	e8 03 b4 00 00       	call   13b8c <_end+0x7e48>

00008786 <kernelesp_saved>:
    8786:	b4 00                	mov    $0x0,%ah
	...

0000878a <esp_saved_inkernel>:
    878a:	c8 00 00 00          	enter  $0x0,$0x0

0000878e <esp_saved_in_user>:
    878e:	f0 00 00             	lock add %al,(%eax)
	...

00008792 <ss_saved_in_user>:
    8792:	2c 01                	sub    $0x1,%al
	...

00008796 <color>:
    8796:	01 c2                	add    %eax,%edx

00008797 <ss_saved_fork>:
    8797:	c2 01 00             	ret    $0x1
	...

0000879b <retaddr>:
    879b:	58                   	pop    %eax
    879c:	02 00                	add    (%eax),%al
	...

0000879f <Message31>:
    879f:	74 69                	je     880a <_readinput+0x9>
    87a1:	6d                   	insl   (%dx),%es:(%edi)
    87a2:	65 3a 20             	cmp    %gs:(%eax),%ah

000087a5 <_sys_stack_copy>:
    87a5:	c8 00 00 00          	enter  $0x0,$0x0
    87a9:	8e d0                	mov    %eax,%ss
    87ab:	60                   	pusha  
    87ac:	1e                   	push   %ds
    87ad:	8b 46 06             	mov    0x6(%esi),%eax
    87b0:	8b 56 0a             	mov    0xa(%esi),%edx
    87b3:	8b 4e 0e             	mov    0xe(%esi),%ecx
    87b6:	8c db                	mov    %ds,%ebx

000087b8 <while_loop1>:
    87b8:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
    87be:	8e d8                	mov    %eax,%ds
    87c0:	67 8b 1a             	mov    (%bp,%si),%ebx
    87c3:	8e d9                	mov    %ecx,%ds
    87c5:	67 89 1a             	mov    %ebx,(%bp,%si)
    87c8:	83 c2 02             	add    $0x2,%edx
    87cb:	eb eb                	jmp    87b8 <while_loop1>

000087cd <end_for_copy>:
    87cd:	1f                   	pop    %ds
    87ce:	61                   	popa   
    87cf:	c9                   	leave  
    87d0:	66 5a                	pop    %dx
    87d2:	ff e2                	jmp    *%edx

000087d4 <_clearscreen>:
    87d4:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    87d9:	66 5a                	pop    %dx
    87db:	ff e2                	jmp    *%edx

000087dd <_printchar>:
    87dd:	c8 00 00 00          	enter  $0x0,$0x0
    87e1:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
    87e6:	57                   	push   %edi
    87e7:	66 8b 4e 06          	mov    0x6(%esi),%cx
    87eb:	66 8b 7e 0a          	mov    0xa(%esi),%di
    87ef:	66 8b 56 0e          	mov    0xe(%esi),%dx
    87f3:	88 d5                	mov    %dl,%ch
    87f5:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
    87fc:	00 66 5a             	add    %ah,0x5a(%esi)
    87ff:	ff e2                	jmp    *%edx

00008801 <_readinput>:
    8801:	c8 04 00 00          	enter  $0x4,$0x0
    8805:	b4 00                	mov    $0x0,%ah
    8807:	cd 16                	int    $0x16
    8809:	b4 00                	mov    $0x0,%ah
    880b:	66 67 89 04          	mov    %ax,(%si)
    880f:	24 66                	and    $0x66,%al
    8811:	67 8b 04             	mov    (%si),%eax
    8814:	24 c9                	and    $0xc9,%al
    8816:	66 5a                	pop    %dx
    8818:	ff e2                	jmp    *%edx

0000881a <_showchar>:
    881a:	c8 00 00 00          	enter  $0x0,$0x0
    881e:	50                   	push   %eax
    881f:	53                   	push   %ebx
    8820:	8b 46 06             	mov    0x6(%esi),%eax
    8823:	b4 0e                	mov    $0xe,%ah
    8825:	b3 00                	mov    $0x0,%bl
    8827:	cd 10                	int    $0x10
    8829:	5b                   	pop    %ebx
    882a:	58                   	pop    %eax
    882b:	c9                   	leave  
    882c:	66 5a                	pop    %dx
    882e:	ff e2                	jmp    *%edx

00008830 <_setPoint>:
    8830:	c8 00 00 00          	enter  $0x0,$0x0
    8834:	53                   	push   %ebx
    8835:	b7 00                	mov    $0x0,%bh
    8837:	8a 77 06             	mov    0x6(%edi),%dh
    883a:	8a 57 0a             	mov    0xa(%edi),%dl
    883d:	b4 02                	mov    $0x2,%ah
    883f:	cd 10                	int    $0x10
    8841:	5b                   	pop    %ebx
    8842:	c9                   	leave  
    8843:	66 5a                	pop    %dx
    8845:	ff e2                	jmp    *%edx

00008847 <_loadP>:
    8847:	c8 00 00 00          	enter  $0x0,$0x0
    884b:	60                   	pusha  
    884c:	06                   	push   %es
    884d:	1e                   	push   %ds
    884e:	8c c8                	mov    %cs,%eax
    8850:	8e d8                	mov    %eax,%ds
    8852:	8b 46 0e             	mov    0xe(%esi),%eax
    8855:	8e c0                	mov    %eax,%es
    8857:	b2 00                	mov    $0x0,%dl
    8859:	8b 46 0a             	mov    0xa(%esi),%eax
    885c:	b3 12                	mov    $0x12,%bl
    885e:	f6 f3                	div    %bl
    8860:	88 e1                	mov    %ah,%cl
    8862:	30 e4                	xor    %ah,%ah
    8864:	b3 02                	mov    $0x2,%bl
    8866:	f6 f3                	div    %bl
    8868:	88 e6                	mov    %ah,%dh
    886a:	88 c5                	mov    %al,%ch
    886c:	8a 46 06             	mov    0x6(%esi),%al
    886f:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
    8874:	cd 13                	int    $0x13
    8876:	1f                   	pop    %ds
    8877:	07                   	pop    %es
    8878:	61                   	popa   
    8879:	c9                   	leave  
    887a:	66 5a                	pop    %dx
    887c:	ff e2                	jmp    *%edx

0000887e <_RunProgress>:
    887e:	c8 00 00 00          	enter  $0x0,$0x0
    8882:	8c c8                	mov    %cs,%eax
    8884:	8e d8                	mov    %eax,%ds
    8886:	8e c0                	mov    %eax,%es
    8888:	8b 5e 06             	mov    0x6(%esi),%ebx
    888b:	c7 06 76 87 00 01    	movl   $0x1008776,(%esi)
    8891:	89 1e                	mov    %ebx,(%esi)
    8893:	78 87                	js     881c <_showchar+0x2>
    8895:	66 89 26             	mov    %sp,(%esi)
    8898:	8a 87 26 ff 1e 76    	mov    0x761eff26(%edi),%al
    889e:	87 8c c8 8e d8 8e c0 	xchg   %ecx,-0x3f712772(%eax,%ecx,8)

0000889f <S>:
    889f:	8c c8                	mov    %cs,%eax
    88a1:	8e d8                	mov    %eax,%ds
    88a3:	8e c0                	mov    %eax,%es
    88a5:	8e d0                	mov    %eax,%ss
    88a7:	66 8b 26             	mov    (%esi),%sp
    88aa:	8a 87 b4 00 cd 16    	mov    0x16cd00b4(%edi),%al
    88b0:	c9                   	leave  
    88b1:	66 5a                	pop    %dx
    88b3:	ff e2                	jmp    *%edx

000088b5 <_Schedule_once>:
    88b5:	c8 00 00 00          	enter  $0x0,$0x0
    88b9:	cd 41                	int    $0x41
    88bb:	c9                   	leave  
    88bc:	66 5a                	pop    %dx
    88be:	ff e2                	jmp    *%edx

000088c0 <_fork_user>:
    88c0:	c8 00 00 00          	enter  $0x0,$0x0
    88c4:	cd 39                	int    $0x39
    88c6:	c9                   	leave  
    88c7:	66 5a                	pop    %dx
    88c9:	ff e2                	jmp    *%edx

000088cb <_Schedule>:
    88cb:	c8 00 00 00          	enter  $0x0,$0x0
    88cf:	16                   	push   %ss
    88d0:	cd 42                	int    $0x42
    88d2:	17                   	pop    %ss
    88d3:	c9                   	leave  
    88d4:	66 5a                	pop    %dx
    88d6:	ff e2                	jmp    *%edx

000088d8 <_wait>:
    88d8:	c8 00 00 00          	enter  $0x0,$0x0
    88dc:	cd 43                	int    $0x43
    88de:	c9                   	leave  
    88df:	66 5a                	pop    %dx
    88e1:	ff e2                	jmp    *%edx

000088e3 <_exit>:
    88e3:	c8 00 00 00          	enter  $0x0,$0x0
    88e7:	66 67 8b 45 06       	mov    0x6(%di),%ax
    88ec:	66 50                	push   %ax
    88ee:	cd 3a                	int    $0x3a
    88f0:	c9                   	leave  
    88f1:	66 5a                	pop    %dx
    88f3:	ff e2                	jmp    *%edx

000088f5 <_SetINT20h>:
    88f5:	fa                   	cli    
    88f6:	1e                   	push   %ds
    88f7:	06                   	push   %es
    88f8:	8c c8                	mov    %cs,%eax
    88fa:	8e d8                	mov    %eax,%ds
    88fc:	8e c0                	mov    %eax,%es
    88fe:	8c 16                	mov    %ss,(%esi)
    8900:	92                   	xchg   %eax,%edx
    8901:	87 8e d0 66 89 26    	xchg   %ecx,0x268966d0(%esi)
    8907:	8e 87 66 8b 26 8a    	mov    -0x75d9749a(%edi),%es
    890d:	87 53 51             	xchg   %edx,0x51(%ebx)
    8910:	52                   	push   %edx
    8911:	b4 01                	mov    $0x1,%ah
    8913:	cd 16                	int    $0x16
    8915:	5a                   	pop    %edx
    8916:	59                   	pop    %ecx
    8917:	5b                   	pop    %ebx
    8918:	8e 16                	mov    (%esi),%ss
    891a:	92                   	xchg   %eax,%edx
    891b:	87 66 8b             	xchg   %esp,-0x75(%esi)
    891e:	26 8e 87 07 1f 74 0a 	mov    %es:0xa741f07(%edi),%es
    8925:	50                   	push   %eax
    8926:	b4 00                	mov    $0x0,%ah
    8928:	cd 16                	int    $0x16
    892a:	58                   	pop    %eax
    892b:	fb                   	sti    
    892c:	cd 38                	int    $0x38
    892e:	cf                   	iret   

0000892f <going_on>:
    892f:	fb                   	sti    
    8930:	cf                   	iret   

00008931 <_SetINT08h_turn_around>:
    8931:	fa                   	cli    
    8932:	e8 2b 05 6a 00       	call   6a8e62 <_end+0x69d11e>
    8937:	e8 0b f7 e8 97       	call   97e98047 <_end+0x97e8c303>
    893c:	05 b0 20 e6 20       	add    $0x20e620b0,%eax
    8941:	e6 a0                	out    %al,$0xa0
    8943:	fb                   	sti    
    8944:	cf                   	iret   

00008945 <_SetINT08h>:
    8945:	60                   	pusha  
    8946:	0f a8                	push   %gs
    8948:	1e                   	push   %ds
    8949:	06                   	push   %es
    894a:	16                   	push   %ss
    894b:	8c c8                	mov    %cs,%eax
    894d:	8e c0                	mov    %eax,%es
    894f:	8e d8                	mov    %eax,%ds
    8951:	8e d0                	mov    %eax,%ss
    8953:	fe 0e                	decb   (%esi)
    8955:	70 87                	jo     88de <_wait+0x6>
    8957:	75 4f                	jne    89a8 <end>

00008959 <notc>:
    8959:	80 3e 71             	cmpb   $0x71,(%esi)
    895c:	87 2d 75 07 c6 06    	xchg   %ebp,0x6c60775
    8962:	71 87                	jno    88eb <_exit+0x8>
    8964:	5c                   	pop    %esp
    8965:	eb 2a                	jmp    8991 <show>

00008967 <changleft>:
    8967:	80 3e 71             	cmpb   $0x71,(%esi)
    896a:	87 5c 75 07          	xchg   %ebx,0x7(%ebp,%esi,2)
    896e:	c6 06 71             	movb   $0x71,(%esi)
    8971:	87 7c eb 1c          	xchg   %edi,0x1c(%ebx,%ebp,8)

00008975 <changright>:
    8975:	80 3e 71             	cmpb   $0x71,(%esi)
    8978:	87 7c 75 07          	xchg   %edi,0x7(%ebp,%esi,2)
    897c:	c6 06 71             	movb   $0x71,(%esi)
    897f:	87 2f                	xchg   %ebp,(%edi)
    8981:	eb 0e                	jmp    8991 <show>

00008983 <changheng>:
    8983:	80 3e 71             	cmpb   $0x71,(%esi)
    8986:	87 2f                	xchg   %ebp,(%edi)
    8988:	75 cf                	jne    8959 <notc>
    898a:	c6 06 71             	movb   $0x71,(%esi)
    898d:	87 2d eb 00 b9 00    	xchg   %ebp,0xb900eb

00008991 <show>:
    8991:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    8996:	b4 09                	mov    $0x9,%ah
    8998:	8a 26                	mov    (%esi),%ah
    899a:	96                   	xchg   %eax,%esi
    899b:	87 a0 71 87 65 a3    	xchg   %esp,-0x5c9a788f(%eax)
    89a1:	8e 00                	mov    (%eax),%es
    89a3:	c6 06 70             	movb   $0x70,(%esi)
    89a6:	87 08                	xchg   %ecx,(%eax)

000089a8 <end>:
    89a8:	b0 20                	mov    $0x20,%al
    89aa:	e6 20                	out    %al,$0x20
    89ac:	e6 a0                	out    %al,$0xa0
    89ae:	17                   	pop    %ss
    89af:	07                   	pop    %es
    89b0:	1f                   	pop    %ds
    89b1:	0f a9                	pop    %gs
    89b3:	61                   	popa   
    89b4:	fb                   	sti    
    89b5:	cf                   	iret   

000089b6 <_SetINT09h>:
    89b6:	fa                   	cli    
    89b7:	1e                   	push   %ds
    89b8:	06                   	push   %es
    89b9:	8c c8                	mov    %cs,%eax
    89bb:	8e d8                	mov    %eax,%ds
    89bd:	8e c0                	mov    %eax,%es
    89bf:	8e d0                	mov    %eax,%ss
    89c1:	8c 16                	mov    %ss,(%esi)
    89c3:	92                   	xchg   %eax,%edx
    89c4:	87 8e d0 66 89 26    	xchg   %ecx,0x268966d0(%esi)
    89ca:	8e 87 66 8b 26 8a    	mov    -0x75d9749a(%edi),%es
    89d0:	87 60 b9             	xchg   %esp,-0x47(%eax)
    89d3:	00 b8 8e e9 8a 26    	add    %bh,0x268ae98e(%eax)
    89d9:	96                   	xchg   %eax,%esi
    89da:	87 b0 4f 65 a3 78    	xchg   %esi,0x78a3654f(%eax)
    89e0:	00 b0 55 65 a3 7a    	add    %dh,0x7aa36555(%eax)
    89e6:	00 b0 43 65 a3 7c    	add    %dh,0x7ca36543(%eax)
    89ec:	00 b0 48 65 a3 7e    	add    %dh,0x7ea36548(%eax)
    89f2:	00 b0 53 65 a3 80    	add    %dh,-0x7f5c9aad(%eax)
    89f8:	00 b0 21 65 a3 82    	add    %dh,-0x7d5c9adf(%eax)
    89fe:	00 b0 4f 65 a3 84    	add    %dh,-0x7b5c9ab1(%eax)
    8a04:	00 b0 55 65 a3 86    	add    %dh,-0x795c9aab(%eax)
    8a0a:	00 b0 43 65 a3 88    	add    %dh,-0x775c9abd(%eax)
    8a10:	00 b0 48 65 a3 8a    	add    %dh,-0x755c9ab8(%eax)
    8a16:	00 b0 21 65 a3 8c    	add    %dh,-0x735c9adf(%eax)
    8a1c:	00 61 80             	add    %ah,-0x80(%ecx)
    8a1f:	fc                   	cld    
    8a20:	06                   	push   %es
    8a21:	75 06                	jne    8a29 <cont>
    8a23:	b4 01                	mov    $0x1,%ah
    8a25:	88 26                	mov    %ah,(%esi)
    8a27:	96                   	xchg   %eax,%esi
    8a28:	87 fe                	xchg   %edi,%esi

00008a29 <cont>:
    8a29:	fe 06                	incb   (%esi)
    8a2b:	96                   	xchg   %eax,%esi
    8a2c:	87 8c c8 8e c0 fb 9c 	xchg   %ecx,-0x63043f72(%eax,%ecx,8)
    8a33:	26 ff 1e             	lcall  *%es:(%esi)
    8a36:	72 87                	jb     89bf <_SetINT09h+0x9>
    8a38:	8e 16                	mov    (%esi),%ss
    8a3a:	92                   	xchg   %eax,%edx
    8a3b:	87 66 8b             	xchg   %esp,-0x75(%esi)
    8a3e:	26 8e 87 07 1f cf fa 	mov    %es:-0x530e0f9(%edi),%es

00008a44 <_SetINT33h>:
    8a44:	fa                   	cli    
    8a45:	c8 00 00 00          	enter  $0x0,$0x0
    8a49:	60                   	pusha  
    8a4a:	1e                   	push   %ds
    8a4b:	0f a8                	push   %gs
    8a4d:	06                   	push   %es
    8a4e:	8c c8                	mov    %cs,%eax
    8a50:	8e c0                	mov    %eax,%es
    8a52:	8e d8                	mov    %eax,%ds
    8a54:	8c 16                	mov    %ss,(%esi)
    8a56:	92                   	xchg   %eax,%edx
    8a57:	87 8e d0 66 89 26    	xchg   %ecx,0x268966d0(%esi)
    8a5d:	8e 87 66 8b 26 8a    	mov    -0x75d9749a(%edi),%es
    8a63:	87 6a 00             	xchg   %ebp,0x0(%edx)
    8a66:	e8 c1 11 8e 16       	call   168e9c2c <_end+0x168ddee8>
    8a6b:	92                   	xchg   %eax,%edx
    8a6c:	87 66 8b             	xchg   %esp,-0x75(%esi)
    8a6f:	26 8e 87 07 0f a9 1f 	mov    %es:0x1fa90f07(%edi),%es
    8a76:	61                   	popa   
    8a77:	fb                   	sti    
    8a78:	c9                   	leave  
    8a79:	cf                   	iret   

00008a7a <_SetINT34h>:
    8a7a:	fa                   	cli    
    8a7b:	c8 00 00 00          	enter  $0x0,$0x0
    8a7f:	60                   	pusha  
    8a80:	1e                   	push   %ds
    8a81:	0f a8                	push   %gs
    8a83:	06                   	push   %es
    8a84:	8c c8                	mov    %cs,%eax
    8a86:	8e c0                	mov    %eax,%es
    8a88:	8e d8                	mov    %eax,%ds
    8a8a:	8c 16                	mov    %ss,(%esi)
    8a8c:	92                   	xchg   %eax,%edx
    8a8d:	87 8e d0 66 89 26    	xchg   %ecx,0x268966d0(%esi)
    8a93:	8e 87 66 8b 26 8a    	mov    -0x75d9749a(%edi),%es
    8a99:	87 6a 00             	xchg   %ebp,0x0(%edx)
    8a9c:	e8 3b 12 8e 16       	call   168e9cdc <_end+0x168ddf98>
    8aa1:	92                   	xchg   %eax,%edx
    8aa2:	87 66 8b             	xchg   %esp,-0x75(%esi)
    8aa5:	26 8e 87 07 0f a9 1f 	mov    %es:0x1fa90f07(%edi),%es
    8aac:	61                   	popa   
    8aad:	fb                   	sti    
    8aae:	c9                   	leave  
    8aaf:	cf                   	iret   

00008ab0 <_SetINT35h>:
    8ab0:	60                   	pusha  
    8ab1:	1e                   	push   %ds
    8ab2:	0f a8                	push   %gs
    8ab4:	06                   	push   %es
    8ab5:	8c c8                	mov    %cs,%eax
    8ab7:	8e c0                	mov    %eax,%es
    8ab9:	8e d8                	mov    %eax,%ds
    8abb:	8c 16                	mov    %ss,(%esi)
    8abd:	92                   	xchg   %eax,%edx
    8abe:	87 8e d0 66 89 26    	xchg   %ecx,0x268966d0(%esi)
    8ac4:	8e 87 66 8b 26 8a    	mov    -0x75d9749a(%edi),%es
    8aca:	87 6a 00             	xchg   %ebp,0x0(%edx)
    8acd:	e8 e9 12 8e 16       	call   168e9dbb <_end+0x168de077>
    8ad2:	92                   	xchg   %eax,%edx
    8ad3:	87 66 8b             	xchg   %esp,-0x75(%esi)
    8ad6:	26 8e 87 07 0f a9 1f 	mov    %es:0x1fa90f07(%edi),%es
    8add:	61                   	popa   
    8ade:	fb                   	sti    
    8adf:	cf                   	iret   

00008ae0 <_SetINT36h>:
    8ae0:	60                   	pusha  
    8ae1:	1e                   	push   %ds
    8ae2:	0f a8                	push   %gs
    8ae4:	06                   	push   %es
    8ae5:	8c c8                	mov    %cs,%eax
    8ae7:	8e c0                	mov    %eax,%es
    8ae9:	8e d8                	mov    %eax,%ds
    8aeb:	8c 16                	mov    %ss,(%esi)
    8aed:	92                   	xchg   %eax,%edx
    8aee:	87 8e d0 66 89 26    	xchg   %ecx,0x268966d0(%esi)
    8af4:	8e 87 66 8b 26 8a    	mov    -0x75d9749a(%edi),%es
    8afa:	87 6a 00             	xchg   %ebp,0x0(%edx)
    8afd:	e8 3f 13 8e 16       	call   168e9e41 <_end+0x168de0fd>
    8b02:	92                   	xchg   %eax,%edx
    8b03:	87 66 8b             	xchg   %esp,-0x75(%esi)
    8b06:	26 8e 87 07 0f a9 1f 	mov    %es:0x1fa90f07(%edi),%es
    8b0d:	61                   	popa   
    8b0e:	fb                   	sti    
    8b0f:	cf                   	iret   

00008b10 <_SetINT21h>:
    8b10:	c8 00 00 00          	enter  $0x0,$0x0
    8b14:	60                   	pusha  
    8b15:	1e                   	push   %ds
    8b16:	0f a8                	push   %gs
    8b18:	06                   	push   %es
    8b19:	8c c8                	mov    %cs,%eax
    8b1b:	8e c0                	mov    %eax,%es
    8b1d:	8e d8                	mov    %eax,%ds
    8b1f:	8b 46 08             	mov    0x8(%esi),%eax
    8b22:	80 fc 00             	cmp    $0x0,%ah
    8b25:	74 16                	je     8b3d <fn0>
    8b27:	80 fc 01             	cmp    $0x1,%ah
    8b2a:	74 21                	je     8b4d <fn1>
    8b2c:	80 fc 02             	cmp    $0x2,%ah
    8b2f:	74 3d                	je     8b6e <fn2>
    8b31:	80 fc 03             	cmp    $0x3,%ah
    8b34:	74 5f                	je     8b95 <fn3>
    8b36:	07                   	pop    %es
    8b37:	0f a9                	pop    %gs
    8b39:	1f                   	pop    %ds
    8b3a:	61                   	popa   
    8b3b:	c9                   	leave  
    8b3c:	cf                   	iret   

00008b3d <fn0>:
    8b3d:	8b 46 0a             	mov    0xa(%esi),%eax
    8b40:	b4 0e                	mov    $0xe,%ah
    8b42:	b3 00                	mov    $0x0,%bl
    8b44:	cd 10                	int    $0x10
    8b46:	07                   	pop    %es
    8b47:	0f a9                	pop    %gs
    8b49:	1f                   	pop    %ds
    8b4a:	61                   	popa   
    8b4b:	c9                   	leave  
    8b4c:	cf                   	iret   

00008b4d <fn1>:
    8b4d:	66 83 ec 04          	sub    $0x4,%sp
    8b51:	b4 00                	mov    $0x0,%ah
    8b53:	cd 16                	int    $0x16
    8b55:	b4 00                	mov    $0x0,%ah
    8b57:	66 67 89 04          	mov    %ax,(%si)
    8b5b:	24 66                	and    $0x66,%al
    8b5d:	67 8b 04             	mov    (%si),%eax
    8b60:	24 66                	and    $0x66,%al
    8b62:	83 c4 04             	add    $0x4,%esp
    8b65:	8e e0                	mov    %eax,%fs
    8b67:	07                   	pop    %es
    8b68:	0f a9                	pop    %gs
    8b6a:	1f                   	pop    %ds
    8b6b:	61                   	popa   
    8b6c:	c9                   	leave  
    8b6d:	cf                   	iret   

00008b6e <fn2>:
    8b6e:	66 83 ec 04          	sub    $0x4,%sp
    8b72:	b4 00                	mov    $0x0,%ah
    8b74:	cd 16                	int    $0x16
    8b76:	b4 00                	mov    $0x0,%ah
    8b78:	66 67 89 04          	mov    %ax,(%si)
    8b7c:	24 66                	and    $0x66,%al
    8b7e:	67 8b 04             	mov    (%si),%eax
    8b81:	24 b4                	and    $0xb4,%al
    8b83:	0e                   	push   %cs
    8b84:	b3 00                	mov    $0x0,%bl
    8b86:	cd 10                	int    $0x10
    8b88:	66 83 c4 04          	add    $0x4,%sp
    8b8c:	8e e0                	mov    %eax,%fs
    8b8e:	07                   	pop    %es
    8b8f:	0f a9                	pop    %gs
    8b91:	1f                   	pop    %ds
    8b92:	61                   	popa   
    8b93:	c9                   	leave  
    8b94:	cf                   	iret   

00008b95 <fn3>:
    8b95:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    8b9a:	07                   	pop    %es
    8b9b:	0f a9                	pop    %gs
    8b9d:	1f                   	pop    %ds
    8b9e:	61                   	popa   
    8b9f:	c9                   	leave  
    8ba0:	cf                   	iret   

00008ba1 <_SetINT37h>:
    8ba1:	fa                   	cli    
    8ba2:	e8 83 03 cf fa       	call   facf8f2a <_end+0xfaced1e6>

00008ba6 <_SetINT38h>:
    8ba6:	fa                   	cli    
    8ba7:	50                   	push   %eax
    8ba8:	1e                   	push   %ds
    8ba9:	8c c8                	mov    %cs,%eax
    8bab:	8e d8                	mov    %eax,%ds
    8bad:	6a 00                	push   $0x0
    8baf:	e8 03 f6 1f 58       	call   582081b7 <_end+0x581fc473>
    8bb4:	cf                   	iret   

00008bb5 <_SetINT39h>:
    8bb5:	fa                   	cli    
    8bb6:	c8 00 00 00          	enter  $0x0,$0x0
    8bba:	1e                   	push   %ds
    8bbb:	6a 00                	push   $0x0
    8bbd:	8c c8                	mov    %cs,%eax
    8bbf:	8e d8                	mov    %eax,%ds
    8bc1:	e8 5b f7 1f c9       	call   c9208321 <_end+0xc91fc5dd>
    8bc6:	cf                   	iret   

00008bc7 <_SetINT41h>:
    8bc7:	fa                   	cli    
    8bc8:	e8 95 02 e8 06       	call   6e88e62 <_end+0x6e7d11e>
    8bcd:	03 b0 20 e6 20 e6    	add    -0x19df19e0(%eax),%esi
    8bd3:	a0 fb cf fa c8       	mov    0xc8facffb,%al

00008bd6 <_SetINT43h>:
    8bd6:	fa                   	cli    
    8bd7:	c8 00 00 00          	enter  $0x0,$0x0
    8bdb:	1e                   	push   %ds
    8bdc:	6a 00                	push   $0x0
    8bde:	8c c8                	mov    %cs,%eax
    8be0:	8e d8                	mov    %eax,%ds
    8be2:	e8 55 f6 1f c9       	call   c920823c <_end+0xc91fc4f8>
    8be7:	cf                   	iret   

00008be8 <_SetINT3Ah>:
    8be8:	fa                   	cli    
    8be9:	c8 00 00 00          	enter  $0x0,$0x0
    8bed:	1e                   	push   %ds
    8bee:	66 67 8b 45 08       	mov    0x8(%di),%ax
    8bf3:	66 50                	push   %ax
    8bf5:	6a 00                	push   $0x0
    8bf7:	8c c8                	mov    %cs,%eax
    8bf9:	8e d8                	mov    %eax,%ds
    8bfb:	e8 cf f5 1f c9       	call   c92081cf <_end+0xc91fc48b>
    8c00:	cf                   	iret   

00008c01 <_initialInt>:
    8c01:	c8 00 00 00          	enter  $0x0,$0x0
    8c05:	60                   	pusha  
    8c06:	06                   	push   %es
    8c07:	1e                   	push   %ds
    8c08:	8c c8                	mov    %cs,%eax
    8c0a:	8e d8                	mov    %eax,%ds
    8c0c:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8c11:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
    8c16:	00 f7                	add    %dh,%bh
    8c18:	e3 89                	jecxz  8ba3 <_SetINT37h+0x2>
    8c1a:	c7                   	(bad)  
    8c1b:	b8 f5 88 26 89       	mov    $0x892688f5,%eax
    8c20:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c25:	45                   	inc    %ebp
    8c26:	02 1f                	add    (%edi),%bl
    8c28:	07                   	pop    %es
    8c29:	61                   	popa   
    8c2a:	60                   	pusha  
    8c2b:	06                   	push   %es
    8c2c:	1e                   	push   %ds
    8c2d:	8c c8                	mov    %cs,%eax
    8c2f:	8e d8                	mov    %eax,%ds
    8c31:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8c36:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
    8c3b:	00 f7                	add    %dh,%bh
    8c3d:	e3 89                	jecxz  8bc8 <_SetINT41h+0x1>
    8c3f:	c7                   	(bad)  
    8c40:	b8 44 8a 26 89       	mov    $0x89268a44,%eax
    8c45:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c4a:	45                   	inc    %ebp
    8c4b:	02 1f                	add    (%edi),%bl
    8c4d:	07                   	pop    %es
    8c4e:	61                   	popa   
    8c4f:	60                   	pusha  
    8c50:	06                   	push   %es
    8c51:	1e                   	push   %ds
    8c52:	8c c8                	mov    %cs,%eax
    8c54:	8e d8                	mov    %eax,%ds
    8c56:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8c5b:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
    8c60:	00 f7                	add    %dh,%bh
    8c62:	e3 89                	jecxz  8bed <_SetINT3Ah+0x5>
    8c64:	c7                   	(bad)  
    8c65:	b8 7a 8a 26 89       	mov    $0x89268a7a,%eax
    8c6a:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c6f:	45                   	inc    %ebp
    8c70:	02 1f                	add    (%edi),%bl
    8c72:	07                   	pop    %es
    8c73:	61                   	popa   
    8c74:	60                   	pusha  
    8c75:	06                   	push   %es
    8c76:	1e                   	push   %ds
    8c77:	8c c8                	mov    %cs,%eax
    8c79:	8e d8                	mov    %eax,%ds
    8c7b:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8c80:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
    8c85:	00 f7                	add    %dh,%bh
    8c87:	e3 89                	jecxz  8c12 <_initialInt+0x11>
    8c89:	c7                   	(bad)  
    8c8a:	b8 b0 8a 26 89       	mov    $0x89268ab0,%eax
    8c8f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c94:	45                   	inc    %ebp
    8c95:	02 1f                	add    (%edi),%bl
    8c97:	07                   	pop    %es
    8c98:	61                   	popa   
    8c99:	60                   	pusha  
    8c9a:	06                   	push   %es
    8c9b:	1e                   	push   %ds
    8c9c:	8c c8                	mov    %cs,%eax
    8c9e:	8e d8                	mov    %eax,%ds
    8ca0:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8ca5:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
    8caa:	00 f7                	add    %dh,%bh
    8cac:	e3 89                	jecxz  8c37 <_initialInt+0x36>
    8cae:	c7                   	(bad)  
    8caf:	b8 e0 8a 26 89       	mov    $0x89268ae0,%eax
    8cb4:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8cb9:	45                   	inc    %ebp
    8cba:	02 1f                	add    (%edi),%bl
    8cbc:	07                   	pop    %es
    8cbd:	61                   	popa   
    8cbe:	60                   	pusha  
    8cbf:	06                   	push   %es
    8cc0:	1e                   	push   %ds
    8cc1:	8c c8                	mov    %cs,%eax
    8cc3:	8e d8                	mov    %eax,%ds
    8cc5:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8cca:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
    8ccf:	00 f7                	add    %dh,%bh
    8cd1:	e3 89                	jecxz  8c5c <_initialInt+0x5b>
    8cd3:	c7                   	(bad)  
    8cd4:	b8 10 8b 26 89       	mov    $0x89268b10,%eax
    8cd9:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8cde:	45                   	inc    %ebp
    8cdf:	02 1f                	add    (%edi),%bl
    8ce1:	07                   	pop    %es
    8ce2:	61                   	popa   
    8ce3:	60                   	pusha  
    8ce4:	06                   	push   %es
    8ce5:	1e                   	push   %ds
    8ce6:	8c c8                	mov    %cs,%eax
    8ce8:	8e d8                	mov    %eax,%ds
    8cea:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8cef:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
    8cf4:	00 f7                	add    %dh,%bh
    8cf6:	e3 89                	jecxz  8c81 <_initialInt+0x80>
    8cf8:	c7                   	(bad)  
    8cf9:	b8 a1 8b 26 89       	mov    $0x89268ba1,%eax
    8cfe:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8d03:	45                   	inc    %ebp
    8d04:	02 1f                	add    (%edi),%bl
    8d06:	07                   	pop    %es
    8d07:	61                   	popa   
    8d08:	60                   	pusha  
    8d09:	06                   	push   %es
    8d0a:	1e                   	push   %ds
    8d0b:	8c c8                	mov    %cs,%eax
    8d0d:	8e d8                	mov    %eax,%ds
    8d0f:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8d14:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
    8d19:	00 f7                	add    %dh,%bh
    8d1b:	e3 89                	jecxz  8ca6 <_initialInt+0xa5>
    8d1d:	c7                   	(bad)  
    8d1e:	b8 a6 8b 26 89       	mov    $0x89268ba6,%eax
    8d23:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8d28:	45                   	inc    %ebp
    8d29:	02 1f                	add    (%edi),%bl
    8d2b:	07                   	pop    %es
    8d2c:	61                   	popa   
    8d2d:	60                   	pusha  
    8d2e:	06                   	push   %es
    8d2f:	1e                   	push   %ds
    8d30:	8c c8                	mov    %cs,%eax
    8d32:	8e d8                	mov    %eax,%ds
    8d34:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8d39:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
    8d3e:	00 f7                	add    %dh,%bh
    8d40:	e3 89                	jecxz  8ccb <_initialInt+0xca>
    8d42:	c7                   	(bad)  
    8d43:	b8 b5 8b 26 89       	mov    $0x89268bb5,%eax
    8d48:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8d4d:	45                   	inc    %ebp
    8d4e:	02 1f                	add    (%edi),%bl
    8d50:	07                   	pop    %es
    8d51:	61                   	popa   
    8d52:	60                   	pusha  
    8d53:	06                   	push   %es
    8d54:	1e                   	push   %ds
    8d55:	8c c8                	mov    %cs,%eax
    8d57:	8e d8                	mov    %eax,%ds
    8d59:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8d5e:	b8 3a 00 bb 04       	mov    $0x4bb003a,%eax
    8d63:	00 f7                	add    %dh,%bh
    8d65:	e3 89                	jecxz  8cf0 <_initialInt+0xef>
    8d67:	c7                   	(bad)  
    8d68:	b8 e8 8b 26 89       	mov    $0x89268be8,%eax
    8d6d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8d72:	45                   	inc    %ebp
    8d73:	02 1f                	add    (%edi),%bl
    8d75:	07                   	pop    %es
    8d76:	61                   	popa   
    8d77:	60                   	pusha  
    8d78:	06                   	push   %es
    8d79:	1e                   	push   %ds
    8d7a:	8c c8                	mov    %cs,%eax
    8d7c:	8e d8                	mov    %eax,%ds
    8d7e:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8d83:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
    8d88:	00 f7                	add    %dh,%bh
    8d8a:	e3 89                	jecxz  8d15 <_initialInt+0x114>
    8d8c:	c7                   	(bad)  
    8d8d:	b8 c7 8b 26 89       	mov    $0x89268bc7,%eax
    8d92:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8d97:	45                   	inc    %ebp
    8d98:	02 1f                	add    (%edi),%bl
    8d9a:	07                   	pop    %es
    8d9b:	61                   	popa   
    8d9c:	60                   	pusha  
    8d9d:	06                   	push   %es
    8d9e:	1e                   	push   %ds
    8d9f:	8c c8                	mov    %cs,%eax
    8da1:	8e d8                	mov    %eax,%ds
    8da3:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8da8:	b8 42 00 bb 04       	mov    $0x4bb0042,%eax
    8dad:	00 f7                	add    %dh,%bh
    8daf:	e3 89                	jecxz  8d3a <_initialInt+0x139>
    8db1:	c7                   	(bad)  
    8db2:	b8 31 89 26 89       	mov    $0x89268931,%eax
    8db7:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8dbc:	45                   	inc    %ebp
    8dbd:	02 1f                	add    (%edi),%bl
    8dbf:	07                   	pop    %es
    8dc0:	61                   	popa   
    8dc1:	60                   	pusha  
    8dc2:	06                   	push   %es
    8dc3:	1e                   	push   %ds
    8dc4:	8c c8                	mov    %cs,%eax
    8dc6:	8e d8                	mov    %eax,%ds
    8dc8:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8dcd:	b8 43 00 bb 04       	mov    $0x4bb0043,%eax
    8dd2:	00 f7                	add    %dh,%bh
    8dd4:	e3 89                	jecxz  8d5f <_initialInt+0x15e>
    8dd6:	c7                   	(bad)  
    8dd7:	b8 d6 8b 26 89       	mov    $0x89268bd6,%eax
    8ddc:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8de1:	45                   	inc    %ebp
    8de2:	02 1f                	add    (%edi),%bl
    8de4:	07                   	pop    %es
    8de5:	61                   	popa   
    8de6:	c9                   	leave  
    8de7:	66 5a                	pop    %dx
    8de9:	ff e2                	jmp    *%edx

00008deb <_initialInt_09h>:
    8deb:	c8 00 00 00          	enter  $0x0,$0x0
    8def:	a1 24 00 a3 72       	mov    0x72a30024,%eax
    8df4:	87 a1 26 00 a3 74    	xchg   %esp,0x74a30026(%ecx)
    8dfa:	87 60 06             	xchg   %esp,0x6(%eax)
    8dfd:	1e                   	push   %ds
    8dfe:	8c c8                	mov    %cs,%eax
    8e00:	8e d8                	mov    %eax,%ds
    8e02:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8e07:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
    8e0c:	00 f7                	add    %dh,%bh
    8e0e:	e3 89                	jecxz  8d99 <_initialInt+0x198>
    8e10:	c7                   	(bad)  
    8e11:	b8 b6 89 26 89       	mov    $0x892689b6,%eax
    8e16:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8e1b:	45                   	inc    %ebp
    8e1c:	02 1f                	add    (%edi),%bl
    8e1e:	07                   	pop    %es
    8e1f:	61                   	popa   
    8e20:	c9                   	leave  
    8e21:	66 5a                	pop    %dx
    8e23:	ff e2                	jmp    *%edx

00008e25 <_initialInt_08h>:
    8e25:	c8 00 00 00          	enter  $0x0,$0x0
    8e29:	b0 40                	mov    $0x40,%al
    8e2b:	e6 43                	out    %al,$0x43
    8e2d:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
    8e32:	88 e0                	mov    %ah,%al
    8e34:	e6 40                	out    %al,$0x40
    8e36:	60                   	pusha  
    8e37:	06                   	push   %es
    8e38:	1e                   	push   %ds
    8e39:	8c c8                	mov    %cs,%eax
    8e3b:	8e d8                	mov    %eax,%ds
    8e3d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8e42:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
    8e47:	00 f7                	add    %dh,%bh
    8e49:	e3 89                	jecxz  8dd4 <_initialInt+0x1d3>
    8e4b:	c7                   	(bad)  
    8e4c:	b8 31 89 26 89       	mov    $0x89268931,%eax
    8e51:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8e56:	45                   	inc    %ebp
    8e57:	02 1f                	add    (%edi),%bl
    8e59:	07                   	pop    %es
    8e5a:	61                   	popa   
    8e5b:	c9                   	leave  
    8e5c:	66 5a                	pop    %dx
    8e5e:	ff e2                	jmp    *%edx

00008e60 <_save>:
    8e60:	66 89 26             	mov    %sp,(%esi)
    8e63:	8a 87 1e 0e 1f 8f    	mov    -0x70e0f1e2(%edi),%al
    8e69:	06                   	push   %es
    8e6a:	7a 87                	jp     8df3 <_initialInt_09h+0x8>
    8e6c:	8f 06                	popl   (%esi)
    8e6e:	7e 87                	jle    8df7 <_initialInt_09h+0xc>
    8e70:	66 89 26             	mov    %sp,(%esi)
    8e73:	86 87 66 89 36 80    	xchg   %al,-0x7fc9769a(%edi)
    8e79:	87 66 8b             	xchg   %esp,-0x75(%esi)
    8e7c:	36                   	ss
    8e7d:	40                   	inc    %eax
    8e7e:	bd 66 83 c6 2c       	mov    $0x2cc68366,%ebp
    8e83:	67 8f 06 67 8f       	popl   -0x7099
    8e88:	46                   	inc    %esi
    8e89:	04 67                	add    $0x67,%al
    8e8b:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
    8e92:	46                   	inc    %esi
    8e93:	08 67 c7             	or     %ah,-0x39(%edi)
    8e96:	46                   	inc    %esi
    8e97:	0a 00                	or     (%eax),%al
    8e99:	00 66 67             	add    %ah,0x67(%esi)
    8e9c:	89 66 fc             	mov    %esp,-0x4(%esi)
    8e9f:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
    8ea3:	8c de                	mov    %ds,%esi
    8ea5:	8e d6                	mov    %esi,%ss
    8ea7:	66 8b 26             	mov    (%esi),%sp
    8eaa:	40                   	inc    %eax
    8eab:	bd 66 83 c4 24       	mov    $0x24c48366,%ebp
    8eb0:	6a 00                	push   $0x0
    8eb2:	ff 36                	pushl  (%esi)
    8eb4:	7a 87                	jp     8e3d <_initialInt_08h+0x18>
    8eb6:	6a 00                	push   $0x0
    8eb8:	06                   	push   %es
    8eb9:	66 55                	push   %bp
    8ebb:	66 57                	push   %di
    8ebd:	66 ff 36             	pushw  (%esi)
    8ec0:	80 87 66 52 66 51 66 	addb   $0x66,0x51665266(%edi)
    8ec7:	53                   	push   %ebx
    8ec8:	66 50                	push   %ax
    8eca:	66 8b 26             	mov    (%esi),%sp
    8ecd:	86 87 a1 7e 87 ff    	xchg   %al,-0x78815f(%edi)
    8ed3:	e0 66                	loopne 8f3b <RTC_Timer+0x13>

00008ed4 <_restart>:
    8ed4:	66 89 26             	mov    %sp,(%esi)
    8ed7:	86 87 66 8b 26 40    	xchg   %al,0x40268b66(%edi)
    8edd:	bd 66 58 66 5b       	mov    $0x5b665866,%ebp
    8ee2:	66 59                	pop    %cx
    8ee4:	66 5a                	pop    %dx
    8ee6:	66 5e                	pop    %si
    8ee8:	66 5f                	pop    %di
    8eea:	66 5d                	pop    %bp
    8eec:	07                   	pop    %es
    8eed:	8f 06                	popl   (%esi)
    8eef:	84 87 8f 06 7a 87    	test   %al,-0x7885f971(%edi)
    8ef5:	8f 06                	popl   (%esi)
    8ef7:	84 87 66 89 36 80    	test   %al,-0x7fc9769a(%edi)
    8efd:	87 17                	xchg   %edx,(%edi)
    8eff:	8f 06                	popl   (%esi)
    8f01:	84 87 66 89 e6 66    	test   %al,0x66e68966(%edi)
    8f07:	67 8b 26 67 ff       	mov    -0x99,%esp
    8f0c:	76 0c                	jbe    8f1a <_restart+0x46>
    8f0e:	67 ff 76 08          	pushl  0x8(%bp)
    8f12:	67 ff 76 04          	pushl  0x4(%bp)
    8f16:	66 8b 36             	mov    (%esi),%si
    8f19:	80 87 8e 1e 7a 87 50 	addb   $0x50,-0x7885e172(%edi)
    8f20:	b0 20                	mov    $0x20,%al
    8f22:	e6 20                	out    %al,$0x20
    8f24:	e6 a0                	out    %al,$0xa0
    8f26:	58                   	pop    %eax
    8f27:	cf                   	iret   

00008f28 <RTC_Timer>:
    8f28:	c8 00 00 00          	enter  $0x0,$0x0
    8f2c:	1e                   	push   %ds
    8f2d:	06                   	push   %es
    8f2e:	60                   	pusha  
    8f2f:	8c c8                	mov    %cs,%eax
    8f31:	8e d8                	mov    %eax,%ds
    8f33:	8c c8                	mov    %cs,%eax
    8f35:	8e c0                	mov    %eax,%es
    8f37:	bf 00 bb b4 02       	mov    $0x2b4bb00,%edi
    8f3c:	cd 1a                	int    $0x1a
    8f3e:	88 e8                	mov    %ch,%al
    8f40:	b4 00                	mov    $0x0,%ah
    8f42:	b3 10                	mov    $0x10,%bl
    8f44:	f6 f3                	div    %bl
    8f46:	04 30                	add    $0x30,%al
    8f48:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
    8f4e:	88 e8                	mov    %ch,%al
    8f50:	24 0f                	and    $0xf,%al
    8f52:	04 30                	add    $0x30,%al
    8f54:	88 45 01             	mov    %al,0x1(%ebp)
    8f57:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
    8f5b:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
    8f5f:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
    8f63:	b4 02                	mov    $0x2,%ah
    8f65:	cd 1a                	int    $0x1a
    8f67:	88 c8                	mov    %cl,%al
    8f69:	b4 00                	mov    $0x0,%ah
    8f6b:	b3 10                	mov    $0x10,%bl
    8f6d:	f6 f3                	div    %bl
    8f6f:	04 30                	add    $0x30,%al
    8f71:	88 45 05             	mov    %al,0x5(%ebp)
    8f74:	b4 02                	mov    $0x2,%ah
    8f76:	cd 1a                	int    $0x1a
    8f78:	88 c8                	mov    %cl,%al
    8f7a:	24 0f                	and    $0xf,%al
    8f7c:	04 30                	add    $0x30,%al
    8f7e:	88 45 06             	mov    %al,0x6(%ebp)
    8f81:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
    8f85:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
    8f89:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
    8f8d:	8c c8                	mov    %cs,%eax
    8f8f:	8e d8                	mov    %eax,%ds
    8f91:	8e c0                	mov    %eax,%es
    8f93:	bd 9f 87 8c d8       	mov    $0xd88c879f,%ebp
    8f98:	8e c0                	mov    %eax,%es
    8f9a:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
    8f9f:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
    8fa5:	b2 0a                	mov    $0xa,%dl
    8fa7:	cd 10                	int    $0x10
    8fa9:	8c c8                	mov    %cs,%eax
    8fab:	8e d8                	mov    %eax,%ds
    8fad:	8e c0                	mov    %eax,%es
    8faf:	bd 00 bb 8c d8       	mov    $0xd88cbb00,%ebp
    8fb4:	8e c0                	mov    %eax,%es
    8fb6:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
    8fbb:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
    8fc1:	b2 1e                	mov    $0x1e,%dl
    8fc3:	cd 10                	int    $0x10
    8fc5:	61                   	popa   
    8fc6:	07                   	pop    %es
    8fc7:	1f                   	pop    %ds
    8fc8:	c9                   	leave  
    8fc9:	66 5a                	pop    %dx
    8fcb:	ff e2                	jmp    *%edx

00008fcd <_Get_Hours_1>:
    8fcd:	c8 04 00 00          	enter  $0x4,$0x0
    8fd1:	b4 02                	mov    $0x2,%ah
    8fd3:	cd 1a                	int    $0x1a
    8fd5:	88 e8                	mov    %ch,%al
    8fd7:	b4 00                	mov    $0x0,%ah
    8fd9:	b3 10                	mov    $0x10,%bl
    8fdb:	f6 f3                	div    %bl
    8fdd:	30 e4                	xor    %ah,%ah
    8fdf:	66 67 89 04          	mov    %ax,(%si)
    8fe3:	24 66                	and    $0x66,%al
    8fe5:	67 8b 04             	mov    (%si),%eax
    8fe8:	24 c9                	and    $0xc9,%al
    8fea:	66 5a                	pop    %dx
    8fec:	ff e2                	jmp    *%edx

00008fee <_Get_Hours_2>:
    8fee:	c8 04 00 00          	enter  $0x4,$0x0
    8ff2:	b4 02                	mov    $0x2,%ah
    8ff4:	cd 1a                	int    $0x1a
    8ff6:	88 e8                	mov    %ch,%al
    8ff8:	24 0f                	and    $0xf,%al
    8ffa:	30 e4                	xor    %ah,%ah
    8ffc:	66 67 89 04          	mov    %ax,(%si)
    9000:	24 66                	and    $0x66,%al
    9002:	67 8b 04             	mov    (%si),%eax
    9005:	24 c9                	and    $0xc9,%al
    9007:	66 5a                	pop    %dx
    9009:	ff e2                	jmp    *%edx

0000900b <_Get_Minutes_1>:
    900b:	c8 04 00 00          	enter  $0x4,$0x0
    900f:	b4 02                	mov    $0x2,%ah
    9011:	cd 1a                	int    $0x1a
    9013:	88 c8                	mov    %cl,%al
    9015:	b4 00                	mov    $0x0,%ah
    9017:	b3 10                	mov    $0x10,%bl
    9019:	f6 f3                	div    %bl
    901b:	30 e4                	xor    %ah,%ah
    901d:	66 67 89 04          	mov    %ax,(%si)
    9021:	24 66                	and    $0x66,%al
    9023:	67 8b 04             	mov    (%si),%eax
    9026:	24 c9                	and    $0xc9,%al
    9028:	66 5a                	pop    %dx
    902a:	ff e2                	jmp    *%edx

0000902c <_Get_Minutes_2>:
    902c:	c8 04 00 00          	enter  $0x4,$0x0
    9030:	b4 02                	mov    $0x2,%ah
    9032:	cd 1a                	int    $0x1a
    9034:	88 c8                	mov    %cl,%al
    9036:	24 0f                	and    $0xf,%al
    9038:	30 e4                	xor    %ah,%ah
    903a:	66 67 89 04          	mov    %ax,(%si)
    903e:	24 66                	and    $0x66,%al
    9040:	67 8b 04             	mov    (%si),%eax
    9043:	24 c9                	and    $0xc9,%al
    9045:	66 5a                	pop    %dx
    9047:	ff e2                	jmp    *%edx

00009049 <terminal>:
#include "../syscall/use.h"
#include "command.h"
#include "../syscall/stdio.h"
#include "../syscall/time.h"
void run(int queue[],int size);
int terminal(){
    9049:	66 55                	push   %bp
    904b:	66 89 e5             	mov    %sp,%bp
    904e:	66 57                	push   %di
    9050:	66 56                	push   %si
    9052:	66 53                	push   %bx
    9054:	66 83 ec 60          	sub    $0x60,%sp
    9058:	66 89 e0             	mov    %sp,%ax
    905b:	66 89 c6             	mov    %ax,%si
    char const *help = "help";
    905e:	67 66 c7 45 e4 dc a0 	movw   $0xa0dc,-0x1c(%di)
    9065:	00 00                	add    %al,(%eax)
    char const *quit = "quit";
    9067:	67 66 c7 45 e0 e1 a0 	movw   $0xa0e1,-0x20(%di)
    906e:	00 00                	add    %al,(%eax)
    char const *lst = "ls";
    9070:	67 66 c7 45 dc e6 a0 	movw   $0xa0e6,-0x24(%di)
    9077:	00 00                	add    %al,(%eax)
    char const *CMDHead = "hongyangchendeMacBook-Air:chenhyOS users$ ";
    9079:	67 66 c7 45 d8 ec a0 	movw   $0xa0ec,-0x28(%di)
    9080:	00 00                	add    %al,(%eax)
    char const *controlMsg1 = "The queue is full,waiting for the Enter Key.";
    9082:	67 66 c7 45 d4 18 a1 	movw   $0xa118,-0x2c(%di)
    9089:	00 00                	add    %al,(%eax)
    char const *controlMsg2 = "The queue is empty!";
    908b:	67 66 c7 45 d0 45 a1 	movw   $0xa145,-0x30(%di)
    9092:	00 00                	add    %al,(%eax)
    char const *ByeByeMsg = "ByeBye";
    9094:	67 66 c7 45 cc 59 a1 	movw   $0xa159,-0x34(%di)
    909b:	00 00                	add    %al,(%eax)
    char const *filelist = "Program1 upleft   Program2 upright  \r\nProgram3 downleft  Program4 downright";
    909d:	67 66 c7 45 c8 60 a1 	movw   $0xa160,-0x38(%di)
    90a4:	00 00                	add    %al,(%eax)
    char const *HelpMsg1 = "Enter 1,2,3,4 to run the program\n\rEnter quit,to quit\n\rEnter help to print this script again";
    90a6:	67 66 c7 45 c4 ac a1 	movw   $0xa1ac,-0x3c(%di)
    90ad:	00 00                	add    %al,(%eax)
    int Maxsize = 10;
    90af:	67 66 c7 45 c0 0a 00 	movw   $0xa,-0x40(%di)
    90b6:	00 00                	add    %al,(%eax)
    print_next_line(HelpMsg1);
    90b8:	67 66 ff 75 c4       	pushw  -0x3c(%di)
    90bd:	66 e8 63 07          	callw  9824 <printsint+0xf6>
    90c1:	00 00                	add    %al,(%eax)
    90c3:	66 83 c4 04          	add    $0x4,%sp
    
            // _RunProgress(0xC000);
   prints(CMDHead);
    90c7:	67 66 ff 75 d8       	pushw  -0x28(%di)
    90cc:	66 e8 e1 05          	callw  96b1 <print+0x8f>
    90d0:	00 00                	add    %al,(%eax)
    90d2:	66 83 c4 04          	add    $0x4,%sp
    char recived[10] = {};
    90d6:	67 66 8d 5d 96       	lea    -0x6a(%di),%bx
    90db:	66 ba 0a 00          	mov    $0xa,%dx
    90df:	00 00                	add    %al,(%eax)
    90e1:	b0 00                	mov    $0x0,%al
    90e3:	66 89 df             	mov    %bx,%di
    90e6:	66 89 d1             	mov    %dx,%cx
    90e9:	f3 aa                	rep stos %al,%es:(%edi)
    recived[0] = 0;
    90eb:	67 c6 45 96 00       	movb   $0x0,-0x6a(%di)
    int index_of_str = 0;
    90f0:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    90f7:	00 00                	add    %al,(%eax)
    int i = 1;
    90f9:	67 66 c7 45 bc 01 00 	movw   $0x1,-0x44(%di)
    9100:	00 00                	add    %al,(%eax)
    int queue[Maxsize];
    9102:	67 66 8b 45 c0       	mov    -0x40(%di),%ax
    9107:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    910c:	67 66 89 55 b8       	mov    %dx,-0x48(%di)
    9111:	66 c1 e0 02          	shl    $0x2,%ax
    9115:	67 66 8d 50 03       	lea    0x3(%bx,%si),%dx
    911a:	66 b8 04 00          	mov    $0x4,%ax
    911e:	00 00                	add    %al,(%eax)
    9120:	66 48                	dec    %ax
    9122:	66 01 d0             	add    %dx,%ax
    9125:	66 bb 04 00          	mov    $0x4,%bx
    9129:	00 00                	add    %al,(%eax)
    912b:	66 ba 00 00          	mov    $0x0,%dx
    912f:	00 00                	add    %al,(%eax)
    9131:	66 f7 f3             	div    %bx
    9134:	66 6b c0 04          	imul   $0x4,%ax,%ax
    9138:	66 29 c4             	sub    %ax,%sp
    913b:	66 89 e0             	mov    %sp,%ax
    913e:	66 83 c0 03          	add    $0x3,%ax
    9142:	66 c1 e8 02          	shr    $0x2,%ax
    9146:	66 c1 e0 02          	shl    $0x2,%ax
    914a:	67 66 89 45 b4       	mov    %ax,-0x4c(%di)
    int num_of_queue = 0;
    914f:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    9156:	00 00                	add    %al,(%eax)
    int number = 0;
    9158:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    915f:	00 00                	add    %al,(%eax)
    int k = 0;
    9161:	67 66 c7 45 b0 00 00 	movw   $0x0,-0x50(%di)
    9168:	00 00                	add    %al,(%eax)
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    916a:	e9 6e 03 66 e8       	jmp    e86694dd <_end+0xe865d799>
        char save = getch();
    916f:	5c                   	pop    %esp
    9170:	07                   	pop    %es
    9171:	00 00                	add    %al,(%eax)
    9173:	67 88 45 af          	mov    %al,-0x51(%di)
        if(save == 32){//空格
    9177:	67 80 7d af 20       	cmpb   $0x20,-0x51(%di)
    917c:	75 74                	jne    91f2 <terminal+0x1a9>
            if(num_of_queue == Maxsize){
    917e:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    9183:	67 66 3b 45 c0       	cmp    -0x40(%di),%ax
    9188:	75 31                	jne    91bb <terminal+0x172>
                prints("\n\r");
    918a:	66 68 08 a2          	pushw  $0xa208
    918e:	00 00                	add    %al,(%eax)
    9190:	66 e8 1d 05          	callw  96b1 <print+0x8f>
    9194:	00 00                	add    %al,(%eax)
    9196:	66 83 c4 04          	add    $0x4,%sp
                print_next_line(controlMsg1);
    919a:	67 66 ff 75 d4       	pushw  -0x2c(%di)
    919f:	66 e8 81 06          	callw  9824 <printsint+0xf6>
    91a3:	00 00                	add    %al,(%eax)
    91a5:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    91a9:	67 66 ff 75 d8       	pushw  -0x28(%di)
    91ae:	66 e8 ff 04          	callw  96b1 <print+0x8f>
    91b2:	00 00                	add    %al,(%eax)
    91b4:	66 83 c4 04          	add    $0x4,%sp
                continue;
    91b8:	e9 20 03 67 66       	jmp    666794dd <_end+0x6666d799>
            }
            printc(save);
    91bd:	0f be 45 af          	movsbl -0x51(%ebp),%eax
    91c1:	66 50                	push   %ax
    91c3:	66 e8 3c 05          	callw  9703 <prints+0x50>
    91c7:	00 00                	add    %al,(%eax)
    91c9:	66 83 c4 04          	add    $0x4,%sp
            queue[num_of_queue] = number;
    91cd:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    91d2:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    91d7:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    91dc:	67 66 89 0c          	mov    %cx,(%si)
    91e0:	90                   	nop
            num_of_queue ++;
    91e1:	67 66 ff 45 ec       	incw   -0x14(%di)
            number = 0;
    91e6:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    91ed:	00 00                	add    %al,(%eax)
            continue;
    91ef:	e9 e9 02 67 80       	jmp    806794dd <_end+0x8066d799>
        }
       else  if(save == 13){//回车
    91f4:	7d af                	jge    91a5 <terminal+0x15c>
    91f6:	0d 0f 85 39 02       	or     $0x239850f,%eax
            int strcmp1 = strcmp(recived,quit);
    91fb:	67 66 ff 75 e0       	pushw  -0x20(%di)
    9200:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    9205:	66 50                	push   %ax
    9207:	66 e8 e1 07          	callw  99ec <print_different_color+0x86>
    920b:	00 00                	add    %al,(%eax)
    920d:	66 83 c4 08          	add    $0x8,%sp
    9211:	67 66 89 45 a8       	mov    %ax,-0x58(%di)
            int strcmp2 = strcmp(recived,help);
    9216:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    921b:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    9220:	66 50                	push   %ax
    9222:	66 e8 c6 07          	callw  99ec <print_different_color+0x86>
    9226:	00 00                	add    %al,(%eax)
    9228:	66 83 c4 08          	add    $0x8,%sp
    922c:	67 66 89 45 a4       	mov    %ax,-0x5c(%di)
            int strcmp3 = strcmp(recived,lst);
    9231:	67 66 ff 75 dc       	pushw  -0x24(%di)
    9236:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    923b:	66 50                	push   %ax
    923d:	66 e8 ab 07          	callw  99ec <print_different_color+0x86>
    9241:	00 00                	add    %al,(%eax)
    9243:	66 83 c4 08          	add    $0x8,%sp
    9247:	67 66 89 45 a0       	mov    %ax,-0x60(%di)
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
    924c:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    9252:	75 22                	jne    9276 <terminal+0x22d>
    9254:	67 66 83 7d e8 00    	cmpw   $0x0,-0x18(%di)
    925a:	75 1a                	jne    9276 <terminal+0x22d>
    925c:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    9262:	74 12                	je     9276 <terminal+0x22d>
    9264:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    926a:	74 0a                	je     9276 <terminal+0x22d>
    926c:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    9272:	0f 85 73 01 67 66    	jne    666793eb <_end+0x6666d6a7>
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    9278:	83 7d a8 01          	cmpl   $0x1,-0x58(%ebp)
    927c:	74 12                	je     9290 <terminal+0x247>
    927e:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    9284:	74 0a                	je     9290 <terminal+0x247>
    9286:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    928c:	0f 85 b9 00 66 68    	jne    6866934b <_end+0x6865d607>
                    print_next_line("");
    9292:	0b a2 00 00 66 e8    	or     -0x179a0000(%edx),%esp
    9298:	8a 05 00 00 66 83    	mov    0x83660000,%al
    929e:	c4 04 67             	les    (%edi,%eiz,2),%eax
                    if(strcmp1 == 1){
    92a1:	66 83 7d a8 01       	cmpw   $0x1,-0x58(%ebp)
    92a6:	75 2b                	jne    92d3 <terminal+0x28a>
                        print_next_line(ByeByeMsg);
    92a8:	67 66 ff 75 cc       	pushw  -0x34(%di)
    92ad:	66 e8 73 05          	callw  9824 <printsint+0xf6>
    92b1:	00 00                	add    %al,(%eax)
    92b3:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    92b7:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    92be:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    92c0:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    92c5:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    92ca:	66 01 d0             	add    %dx,%ax
    92cd:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    92d1:	eb 64                	jmp    9337 <terminal+0x2ee>
                    }                  
                   else if(strcmp2 == 1){
    92d3:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    92d9:	75 2b                	jne    9306 <terminal+0x2bd>
                         print_next_line(HelpMsg1);
    92db:	67 66 ff 75 c4       	pushw  -0x3c(%di)
    92e0:	66 e8 40 05          	callw  9824 <printsint+0xf6>
    92e4:	00 00                	add    %al,(%eax)
    92e6:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    92ea:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    92f1:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    92f3:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    92f8:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    92fd:	66 01 d0             	add    %dx,%ax
    9300:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    9304:	eb 31                	jmp    9337 <terminal+0x2ee>
                    }
                    else if(strcmp3 == 1){
    9306:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    930c:	75 29                	jne    9337 <terminal+0x2ee>
                        print_next_line(filelist);
    930e:	67 66 ff 75 c8       	pushw  -0x38(%di)
    9313:	66 e8 0d 05          	callw  9824 <printsint+0xf6>
    9317:	00 00                	add    %al,(%eax)
    9319:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    931d:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9324:	00 00                	add    %al,(%eax)
                      recived[index_of_str] = 0;
    9326:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    932b:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    9330:	66 01 d0             	add    %dx,%ax
    9333:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    }
                        //prints(recived);
                    prints(CMDHead);
    9337:	67 66 ff 75 d8       	pushw  -0x28(%di)
    933c:	66 e8 71 03          	callw  96b1 <print+0x8f>
    9340:	00 00                	add    %al,(%eax)
    9342:	66 83 c4 04          	add    $0x4,%sp
                    continue;
    9346:	e9 92 01 67 66       	jmp    666794dd <_end+0x6666d799>
                }
            
                else if(number != 0||num_of_queue != 0){
    934b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    934f:	75 0a                	jne    935b <terminal+0x312>
    9351:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    9357:	0f 84 8a 00 67 66    	je     666793e7 <_end+0x6666d6a3>
                    if(number != 0 ){
    935d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    9361:	74 28                	je     938b <terminal+0x342>
                         printsint(number);
    9363:	67 66 ff 75 e8       	pushw  -0x18(%di)
    9368:	66 e8 c0 03          	callw  972c <printc+0x27>
    936c:	00 00                	add    %al,(%eax)
    936e:	66 83 c4 04          	add    $0x4,%sp
                        queue[num_of_queue] = number;
    9372:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    9377:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    937c:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    9381:	67 66 89 0c          	mov    %cx,(%si)
    9385:	90                   	nop
                        num_of_queue++;
    9386:	67 66 ff 45 ec       	incw   -0x14(%di)
                    }
                    run(queue,num_of_queue);
    938b:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    9390:	67 66 ff 75 ec       	pushw  -0x14(%di)
    9395:	66 50                	push   %ax
    9397:	66 e8 5a 01          	callw  94f5 <terminal+0x4ac>
    939b:	00 00                	add    %al,(%eax)
    939d:	66 83 c4 08          	add    $0x8,%sp
                    num_of_queue = 0;
    93a1:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    93a8:	00 00                	add    %al,(%eax)
                    number = 0;
    93aa:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    93b1:	00 00                	add    %al,(%eax)
                    clearscreen();
    93b3:	66 e8 50 f3          	callw  8707 <stack_copy+0x35>
    93b7:	ff                   	(bad)  
    93b8:	ff 67 66             	jmp    *0x66(%edi)
                    prints(CMDHead);
    93bb:	ff 75 d8             	pushl  -0x28(%ebp)
    93be:	66 e8 ef 02          	callw  96b1 <print+0x8f>
    93c2:	00 00                	add    %al,(%eax)
    93c4:	66 83 c4 04          	add    $0x4,%sp
                    index_of_str = 0;
    93c8:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    93cf:	00 00                	add    %al,(%eax)
                    recived[index_of_str] = 0;
    93d1:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    93d6:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    93db:	66 01 d0             	add    %dx,%ax
    93de:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    continue;
    93e2:	e9 f6 00 90 e9       	jmp    e99094dd <_end+0xe98fd799>
            int strcmp1 = strcmp(recived,quit);
            int strcmp2 = strcmp(recived,help);
            int strcmp3 = strcmp(recived,lst);
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    93e7:	f2 00 66 68          	repnz add %ah,0x68(%esi)
                    recived[index_of_str] = 0;
                    continue;
                }
            }
            else{
                 prints("\n\r");
    93eb:	08 a2 00 00 66 e8    	or     %ah,-0x179a0000(%edx)
    93f1:	be 02 00 00 66       	mov    $0x66000002,%esi
    93f6:	83 c4 04             	add    $0x4,%esp
                print_next_line(controlMsg2);
    93f9:	67 66 ff 75 d0       	pushw  -0x30(%di)
    93fe:	66 e8 22 04          	callw  9824 <printsint+0xf6>
    9402:	00 00                	add    %al,(%eax)
    9404:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    9408:	67 66 ff 75 d8       	pushw  -0x28(%di)
    940d:	66 e8 a0 02          	callw  96b1 <print+0x8f>
    9411:	00 00                	add    %al,(%eax)
    9413:	66 83 c4 04          	add    $0x4,%sp
                index_of_str = 0;
    9417:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    941e:	00 00                	add    %al,(%eax)
                recived[index_of_str] = 0;
    9420:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    9425:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    942a:	66 01 d0             	add    %dx,%ax
    942d:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                continue;
    9431:	e9 a7 00 67 80       	jmp    806794dd <_end+0x8066d799>
            }
        }
        else if(save >= '0' && save <='9'){
    9436:	7d af                	jge    93e7 <terminal+0x39e>
    9438:	2f                   	das    
    9439:	7e 42                	jle    947d <terminal+0x434>
    943b:	67 80 7d af 39       	cmpb   $0x39,-0x51(%di)
    9440:	7f 3b                	jg     947d <terminal+0x434>
           printc(save);
    9442:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    9448:	66 50                	push   %ax
    944a:	66 e8 b5 02          	callw  9703 <prints+0x50>
    944e:	00 00                	add    %al,(%eax)
    9450:	66 83 c4 04          	add    $0x4,%sp
            number = number * 10 + save -'0';
    9454:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
    9459:	66 89 d0             	mov    %dx,%ax
    945c:	66 c1 e0 02          	shl    $0x2,%ax
    9460:	66 01 d0             	add    %dx,%ax
    9463:	66 01 c0             	add    %ax,%ax
    9466:	66 89 c2             	mov    %ax,%dx
    9469:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    946f:	66 01 d0             	add    %dx,%ax
    9472:	66 83 e8 30          	sub    $0x30,%ax
    9476:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
           // printsint(number);
            continue;
    947b:	eb 5e                	jmp    94db <terminal+0x492>
        }
        else{
           printc(save);
    947d:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    9483:	66 50                	push   %ax
    9485:	66 e8 7a 02          	callw  9703 <prints+0x50>
    9489:	00 00                	add    %al,(%eax)
    948b:	66 83 c4 04          	add    $0x4,%sp
           // if(save == '-' || save == 'q' || save == 'h' || save == 'l' || save =='s'){
            if(index_of_str < 10){
    948f:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    9495:	7f 2c                	jg     94c3 <terminal+0x47a>
                recived[index_of_str] =  save;
    9497:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    949c:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    94a1:	66 01 c2             	add    %ax,%dx
    94a4:	67 8a 45 af          	mov    -0x51(%di),%al
    94a8:	67 88 02             	mov    %al,(%bp,%si)
                index_of_str ++;
    94ab:	67 66 ff 45 f0       	incw   -0x10(%di)
                recived[index_of_str] = 0;
    94b0:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    94b5:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    94ba:	66 01 d0             	add    %dx,%ax
    94bd:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    94c1:	eb 18                	jmp    94db <terminal+0x492>
            }
            else if(index_of_str >= 10){
    94c3:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    94c9:	7e 10                	jle    94db <terminal+0x492>
                prints("not added");
    94cb:	66 68 0c a2          	pushw  $0xa20c
    94cf:	00 00                	add    %al,(%eax)
    94d1:	66 e8 dc 01          	callw  96b1 <print+0x8f>
    94d5:	00 00                	add    %al,(%eax)
    94d7:	66 83 c4 04          	add    $0x4,%sp
    int number = 0;
    int k = 0;
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    94db:	67 66 83 7d bc 00    	cmpw   $0x0,-0x44(%di)
    94e1:	0f 85 88 fc 66 89    	jne    8967916f <_end+0x8966d42b>
    94e7:	f4                   	hlt    
            else if(index_of_str >= 10){
                prints("not added");
            }
        }
    }
}
    94e8:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    94ed:	66 5b                	pop    %bx
    94ef:	66 5e                	pop    %si
    94f1:	66 5f                	pop    %di
    94f3:	66 5d                	pop    %bp
    94f5:	66 c3                	retw   

000094f7 <run>:
void run(int queue[],int size){
    94f7:	66 55                	push   %bp
    94f9:	66 89 e5             	mov    %sp,%bp
    94fc:	66 83 ec 04          	sub    $0x4,%sp
    int j = 0;
    9500:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9507:	00 00                	add    %al,(%eax)
    clearscreen();
    9509:	66 e8 fa f1          	callw  8707 <stack_copy+0x35>
    950d:	ff                   	(bad)  
    950e:	ff 67 66             	jmp    *0x66(%edi)
    for(j = 0;j < size;j ++){
    9511:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    9518:	e9 f5 00 67 66       	jmp    66679612 <_end+0x6666d8ce>
        //_delay();
        //_load_userProgram(queue[j]);
        //_delay();
        if(queue[j] == 1){
    951d:	8b 45 fc             	mov    -0x4(%ebp),%eax
    9520:	67 66 8d 14          	lea    (%si),%dx
    9524:	85 00                	test   %eax,(%eax)
    9526:	00 00                	add    %al,(%eax)
    9528:	00 67 66             	add    %ah,0x66(%edi)
    952b:	8b 45 08             	mov    0x8(%ebp),%eax
    952e:	66 01 d0             	add    %dx,%ax
    9531:	67 66 8b 00          	mov    (%bx,%si),%ax
    9535:	66 83 f8 01          	cmp    $0x1,%ax
    9539:	75 10                	jne    954b <run+0x54>
           // _loadP(10,25,0x1000);
             _RunProgress(0x1000);
    953b:	66 68 00 10          	pushw  $0x1000
    953f:	00 00                	add    %al,(%eax)
    9541:	66 e8 37 f3          	callw  887c <_loadP+0x35>
    9545:	ff                   	(bad)  
    9546:	ff 66 83             	jmp    *-0x7d(%esi)
    9549:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
        if(queue[j] == 2){
    954c:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
    9550:	67 66 8d 14          	lea    (%si),%dx
    9554:	85 00                	test   %eax,(%eax)
    9556:	00 00                	add    %al,(%eax)
    9558:	00 67 66             	add    %ah,0x66(%edi)
    955b:	8b 45 08             	mov    0x8(%ebp),%eax
    955e:	66 01 d0             	add    %dx,%ax
    9561:	67 66 8b 00          	mov    (%bx,%si),%ax
    9565:	66 83 f8 02          	cmp    $0x2,%ax
    9569:	75 10                	jne    957b <run+0x84>
            //_loadP(10,35,0x2000);
            _RunProgress(0x2000);
    956b:	66 68 00 20          	pushw  $0x2000
    956f:	00 00                	add    %al,(%eax)
    9571:	66 e8 07 f3          	callw  887c <_loadP+0x35>
    9575:	ff                   	(bad)  
    9576:	ff 66 83             	jmp    *-0x7d(%esi)
    9579:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
        if(queue[j] == 3){
    957c:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
    9580:	67 66 8d 14          	lea    (%si),%dx
    9584:	85 00                	test   %eax,(%eax)
    9586:	00 00                	add    %al,(%eax)
    9588:	00 67 66             	add    %ah,0x66(%edi)
    958b:	8b 45 08             	mov    0x8(%ebp),%eax
    958e:	66 01 d0             	add    %dx,%ax
    9591:	67 66 8b 00          	mov    (%bx,%si),%ax
    9595:	66 83 f8 03          	cmp    $0x3,%ax
    9599:	75 10                	jne    95ab <run+0xb4>
           // _loadP(10,45,0x3000);
            _RunProgress(0x3000);
    959b:	66 68 00 30          	pushw  $0x3000
    959f:	00 00                	add    %al,(%eax)
    95a1:	66 e8 d7 f2          	callw  887c <_loadP+0x35>
    95a5:	ff                   	(bad)  
    95a6:	ff 66 83             	jmp    *-0x7d(%esi)
    95a9:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
        if(queue[j] == 4){
    95ac:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
    95b0:	67 66 8d 14          	lea    (%si),%dx
    95b4:	85 00                	test   %eax,(%eax)
    95b6:	00 00                	add    %al,(%eax)
    95b8:	00 67 66             	add    %ah,0x66(%edi)
    95bb:	8b 45 08             	mov    0x8(%ebp),%eax
    95be:	66 01 d0             	add    %dx,%ax
    95c1:	67 66 8b 00          	mov    (%bx,%si),%ax
    95c5:	66 83 f8 04          	cmp    $0x4,%ax
    95c9:	75 10                	jne    95db <run+0xe4>
            //_loadP(10,55,0x4000);
            _RunProgress(0x4000);
    95cb:	66 68 00 40          	pushw  $0x4000
    95cf:	00 00                	add    %al,(%eax)
    95d1:	66 e8 a7 f2          	callw  887c <_loadP+0x35>
    95d5:	ff                   	(bad)  
    95d6:	ff 66 83             	jmp    *-0x7d(%esi)
    95d9:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
        if(queue[j] == 6){
    95dc:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
    95e0:	67 66 8d 14          	lea    (%si),%dx
    95e4:	85 00                	test   %eax,(%eax)
    95e6:	00 00                	add    %al,(%eax)
    95e8:	00 67 66             	add    %ah,0x66(%edi)
    95eb:	8b 45 08             	mov    0x8(%ebp),%eax
    95ee:	66 01 d0             	add    %dx,%ax
    95f1:	67 66 8b 00          	mov    (%bx,%si),%ax
    95f5:	66 83 f8 06          	cmp    $0x6,%ax
    95f9:	75 10                	jne    960b <run+0x114>
            _RunProgress(0x7000);
    95fb:	66 68 00 70          	pushw  $0x7000
    95ff:	00 00                	add    %al,(%eax)
    9601:	66 e8 77 f2          	callw  887c <_loadP+0x35>
    9605:	ff                   	(bad)  
    9606:	ff 66 83             	jmp    *-0x7d(%esi)
    9609:	c4 04 67             	les    (%edi,%eiz,2),%eax
    }
}
void run(int queue[],int size){
    int j = 0;
    clearscreen();
    for(j = 0;j < size;j ++){
    960c:	66 ff 45 fc          	incw   -0x4(%ebp)
    9610:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9615:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    961a:	0f 8c fd fe 66 c9    	jl     c967951d <_end+0xc966d7d9>
    //}
    
   // clearscreen();;
   // thread_join();
    //Initial_Int_08h();
    9620:	66 c3                	retw   

00009622 <print>:
#include "stdio.h"
//====================================================
//              显示字符串函数，可以指定位置
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
    9622:	66 55                	push   %bp
    9624:	66 89 e5             	mov    %sp,%bp
    9627:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    962b:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    9630:	66 89 d0             	mov    %dx,%ax
    9633:	66 c1 e0 02          	shl    $0x2,%ax
    9637:	66 01 d0             	add    %dx,%ax
    963a:	66 c1 e0 04          	shl    $0x4,%ax
    963e:	66 89 c2             	mov    %ax,%dx
    9641:	67 66 8b 45 10       	mov    0x10(%di),%ax
    9646:	66 01 d0             	add    %dx,%ax
    9649:	66 01 c0             	add    %ax,%ax
    964c:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    9651:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    9658:	00 00                	add    %al,(%eax)
	int index = 0;
    965a:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    9661:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    9663:	eb 35                	jmp    969a <print+0x78>
		_printchar(Messeage[index],pos,color);
    9665:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    966a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    966f:	66 01 d0             	add    %dx,%ax
    9672:	67 8a 00             	mov    (%bx,%si),%al
    9675:	66 0f be c0          	movsbw %al,%ax
    9679:	67 66 ff 75 f4       	pushw  -0xc(%di)
    967e:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9683:	66 50                	push   %ax
    9685:	66 e8 52 f1          	callw  87db <_clearscreen+0x7>
    9689:	ff                   	(bad)  
    968a:	ff 66 83             	jmp    *-0x7d(%esi)
    968d:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    9690:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    9694:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    969a:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    969f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    96a4:	66 01 d0             	add    %dx,%ax
    96a7:	67 8a 00             	mov    (%bx,%si),%al
    96aa:	84 c0                	test   %al,%al
    96ac:	75 b7                	jne    9665 <print+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    96ae:	90                   	nop
}
    96af:	66 c9                	leavew 
    96b1:	66 c3                	retw   

000096b3 <prints>:
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input
    96b3:	66 55                	push   %bp
    96b5:	66 89 e5             	mov    %sp,%bp
    96b8:	66 83 ec 04          	sub    $0x4,%sp
	int index = 0;
    96bc:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    96c3:	00 00                	add    %al,(%eax)
	while(Messeage[index]){
    96c5:	eb 25                	jmp    96ec <prints+0x39>
		_showchar(Messeage[index]);
    96c7:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    96cc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    96d1:	66 01 d0             	add    %dx,%ax
    96d4:	67 8a 00             	mov    (%bx,%si),%al
    96d7:	66 0f be c0          	movsbw %al,%ax
    96db:	66 50                	push   %ax
    96dd:	66 e8 37 f1          	callw  8818 <_readinput+0x17>
    96e1:	ff                   	(bad)  
    96e2:	ff 66 83             	jmp    *-0x7d(%esi)
    96e5:	c4 04 67             	les    (%edi,%eiz,2),%eax
		index++;
    96e8:	66 ff 45 fc          	incw   -0x4(%ebp)
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input
	int index = 0;
	while(Messeage[index]){
    96ec:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    96f1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    96f6:	66 01 d0             	add    %dx,%ax
    96f9:	67 8a 00             	mov    (%bx,%si),%al
    96fc:	84 c0                	test   %al,%al
    96fe:	75 c7                	jne    96c7 <prints+0x14>
		_showchar(Messeage[index]);
		index++;
	}
	return;
    9700:	90                   	nop
}
    9701:	66 c9                	leavew 
    9703:	66 c3                	retw   

00009705 <printc>:
//====================================================
//                显示字符函数
//====================================================
void printc(char alpha){
    9705:	66 55                	push   %bp
    9707:	66 89 e5             	mov    %sp,%bp
    970a:	66 83 ec 04          	sub    $0x4,%sp
    970e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9713:	67 88 45 fc          	mov    %al,-0x4(%di)
	_showchar(alpha);
    9717:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    971d:	66 50                	push   %ax
    971f:	66 e8 f5 f0          	callw  8818 <_readinput+0x17>
    9723:	ff                   	(bad)  
    9724:	ff 66 83             	jmp    *-0x7d(%esi)
    9727:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    972a:	66 c9                	leavew 
    972c:	66 c3                	retw   

0000972e <printsint>:
//====================================================
//                数字转字符函数
//====================================================
void printsint(int num){
    972e:	66 55                	push   %bp
    9730:	66 89 e5             	mov    %sp,%bp
    9733:	66 83 ec 2c          	sub    $0x2c,%sp
	 int save = num;
    9737:	67 66 8b 45 08       	mov    0x8(%di),%ax
    973c:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	 int count = 0;
    9741:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9748:	00 00                	add    %al,(%eax)
	 char number[30];
	 number[count] = 0;
    974a:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    974f:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9754:	66 01 d0             	add    %dx,%ax
    9757:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	if(num < 0){
    975b:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    9761:	79 14                	jns    9777 <printsint+0x49>
		printc('-');
    9763:	66 6a 2d             	pushw  $0x2d
    9766:	66 e8 99 ff          	callw  9703 <prints+0x50>
    976a:	ff                   	(bad)  
    976b:	ff 66 83             	jmp    *-0x7d(%esi)
    976e:	c4 04 67             	les    (%edi,%eiz,2),%eax
		num = -num;
    9771:	66 f7 5d 08          	negw   0x8(%ebp)
    9775:	eb 15                	jmp    978c <printsint+0x5e>
	}
	else if(num == 0){
    9777:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    977d:	75 0d                	jne    978c <printsint+0x5e>
		printc('0');
    977f:	66 6a 30             	pushw  $0x30
    9782:	66 e8 7d ff          	callw  9703 <prints+0x50>
    9786:	ff                   	(bad)  
    9787:	ff 66 83             	jmp    *-0x7d(%esi)
    978a:	c4 04 eb             	les    (%ebx,%ebp,8),%eax
	}
	while(num > 0){
    978d:	50                   	push   %eax
		number[count] = num % 10 + '0';
    978e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9793:	66 b9 0a 00          	mov    $0xa,%cx
    9797:	00 00                	add    %al,(%eax)
    9799:	66 99                	cwtd   
    979b:	66 f7 f9             	idiv   %cx
    979e:	66 89 d0             	mov    %dx,%ax
    97a1:	66 83 c0 30          	add    $0x30,%ax
    97a5:	67 66 8d 4d d6       	lea    -0x2a(%di),%cx
    97aa:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    97af:	66 01 ca             	add    %cx,%dx
    97b2:	67 88 02             	mov    %al,(%bp,%si)
		num  = num / 10;
    97b5:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    97ba:	66 b8 67 66          	mov    $0x6667,%ax
    97be:	66 66 66 f7 e9       	data32 data32 imul %cx
    97c3:	66 c1 fa 02          	sar    $0x2,%dx
    97c7:	66 89 c8             	mov    %cx,%ax
    97ca:	66 c1 f8 1f          	sar    $0x1f,%ax
    97ce:	66 29 c2             	sub    %ax,%dx
    97d1:	66 89 d0             	mov    %dx,%ax
    97d4:	67 66 89 45 08       	mov    %ax,0x8(%di)
		count ++;
    97d9:	67 66 ff 45 fc       	incw   -0x4(%di)
		num = -num;
	}
	else if(num == 0){
		printc('0');
	}
	while(num > 0){
    97de:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    97e4:	7f a8                	jg     978e <printsint+0x60>
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    97e6:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    97eb:	66 48                	dec    %ax
    97ed:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    97f2:	eb 25                	jmp    9819 <printsint+0xeb>
		printc(number[i]);
    97f4:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    97f9:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    97fe:	66 01 d0             	add    %dx,%ax
    9801:	67 8a 00             	mov    (%bx,%si),%al
    9804:	66 0f be c0          	movsbw %al,%ax
    9808:	66 50                	push   %ax
    980a:	66 e8 f5 fe          	callw  9703 <prints+0x50>
    980e:	ff                   	(bad)  
    980f:	ff 66 83             	jmp    *-0x7d(%esi)
    9812:	c4 04 67             	les    (%edi,%eiz,2),%eax
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    9815:	66 ff 4d f8          	decw   -0x8(%ebp)
    9819:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    981f:	79 d3                	jns    97f4 <printsint+0xc6>
		printc(number[i]);
	}
	return;
    9821:	90                   	nop
}
    9822:	66 c9                	leavew 
    9824:	66 c3                	retw   

00009826 <print_next_line>:
//====================================================
//                显示字符串并换行函数
//====================================================
 void print_next_line(char const* Messeage){
    9826:	66 55                	push   %bp
    9828:	66 89 e5             	mov    %sp,%bp
	prints(Messeage);
    982b:	67 66 ff 75 08       	pushw  0x8(%di)
    9830:	66 e8 7d fe          	callw  96b1 <print+0x8f>
    9834:	ff                   	(bad)  
    9835:	ff 66 83             	jmp    *-0x7d(%esi)
    9838:	c4 04 66             	les    (%esi,%eiz,2),%eax
	prints("\n\r");
    983b:	68 16 a2 00 00       	push   $0xa216
    9840:	66 e8 6d fe          	callw  96b1 <print+0x8f>
    9844:	ff                   	(bad)  
    9845:	ff 66 83             	jmp    *-0x7d(%esi)
    9848:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    984b:	66 c9                	leavew 
    984d:	66 c3                	retw   

0000984f <strlen>:
//====================================================
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
    984f:	66 55                	push   %bp
    9851:	66 89 e5             	mov    %sp,%bp
    9854:	66 83 ec 08          	sub    $0x8,%sp
	int i = 0;
    9858:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    985f:	00 00                	add    %al,(%eax)
	int count = 0;
    9861:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    9868:	00 00                	add    %al,(%eax)
	while(Messeage[i] != 0){
    986a:	eb 0a                	jmp    9876 <strlen+0x27>
		i++;
    986c:	67 66 ff 45 fc       	incw   -0x4(%di)
		count++;
    9871:	67 66 ff 45 f8       	incw   -0x8(%di)
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
	int i = 0;
	int count = 0;
	while(Messeage[i] != 0){
    9876:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    987b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9880:	66 01 d0             	add    %dx,%ax
    9883:	67 8a 00             	mov    (%bx,%si),%al
    9886:	84 c0                	test   %al,%al
    9888:	75 e2                	jne    986c <strlen+0x1d>
		i++;
		count++;
	}
	return count;
    988a:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    988f:	66 c9                	leavew 
    9891:	66 c3                	retw   

00009893 <read_and_print_input>:
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    9893:	66 55                	push   %bp
    9895:	66 89 e5             	mov    %sp,%bp
    9898:	66 83 ec 08          	sub    $0x8,%sp
    int i = 1;
    989c:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    98a3:	00 00                	add    %al,(%eax)
    while(i){
    98a5:	eb 1c                	jmp    98c3 <read_and_print_input+0x30>
        char savechar = _readinput();
    98a7:	66 e8 54 ef          	callw  87ff <_printchar+0x22>
    98ab:	ff                   	(bad)  
    98ac:	ff 67 88             	jmp    *-0x78(%edi)
    98af:	45                   	inc    %ebp
    98b0:	fb                   	sti    
        _showchar(savechar);
    98b1:	67 66 0f be 45 fb    	movsbw -0x5(%di),%ax
    98b7:	66 50                	push   %ax
    98b9:	66 e8 5b ef          	callw  8818 <_readinput+0x17>
    98bd:	ff                   	(bad)  
    98be:	ff 66 83             	jmp    *-0x7d(%esi)
    98c1:	c4 04 67             	les    (%edi,%eiz,2),%eax
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    int i = 1;
    while(i){
    98c4:	66 83 7d fc 00       	cmpw   $0x0,-0x4(%ebp)
    98c9:	75 dc                	jne    98a7 <read_and_print_input+0x14>
        char savechar = _readinput();
        _showchar(savechar);
    }
}
    98cb:	66 c9                	leavew 
    98cd:	66 c3                	retw   

000098cf <getch>:
//====================================================
//        等待用户输入函数，返回用户输入在缓冲区中
//====================================================
char getch(){
    98cf:	66 55                	push   %bp
    98d1:	66 89 e5             	mov    %sp,%bp
    98d4:	66 83 ec 04          	sub    $0x4,%sp
	char result = _readinput();
    98d8:	66 e8 23 ef          	callw  87ff <_printchar+0x22>
    98dc:	ff                   	(bad)  
    98dd:	ff 67 88             	jmp    *-0x78(%edi)
    98e0:	45                   	inc    %ebp
    98e1:	ff 67 8a             	jmp    *-0x76(%edi)
	return result;
    98e4:	45                   	inc    %ebp
    98e5:	ff 66 c9             	jmp    *-0x37(%esi)
}
    98e8:	66 c3                	retw   

000098ea <getline>:
void  getline(char str[],int length){
    98ea:	66 55                	push   %bp
    98ec:	66 89 e5             	mov    %sp,%bp
    98ef:	66 83 ec 08          	sub    $0x8,%sp
	char save = getch();
    98f3:	66 e8 d6 ff          	callw  98cd <read_and_print_input+0x3a>
    98f7:	ff                   	(bad)  
    98f8:	ff 67 88             	jmp    *-0x78(%edi)
    98fb:	45                   	inc    %ebp
    98fc:	ff 67 66             	jmp    *0x66(%edi)
	int index = 0;
    98ff:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while(save != 13 && index < length){
    9906:	eb 46                	jmp    994e <getline+0x64>
		printc(save);
    9908:	67 66 0f be 45 ff    	movsbw -0x1(%di),%ax
    990e:	66 50                	push   %ax
    9910:	66 e8 ef fd          	callw  9703 <prints+0x50>
    9914:	ff                   	(bad)  
    9915:	ff 66 83             	jmp    *-0x7d(%esi)
    9918:	c4 04 67             	les    (%edi,%eiz,2),%eax
		str[index] = save;
    991b:	66 8b 55 f8          	mov    -0x8(%ebp),%dx
    991f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9924:	66 01 c2             	add    %ax,%dx
    9927:	67 8a 45 ff          	mov    -0x1(%di),%al
    992b:	67 88 02             	mov    %al,(%bp,%si)
		index ++;
    992e:	67 66 ff 45 f8       	incw   -0x8(%di)
		str[index] = 0;
    9933:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9938:	67 66 8b 45 08       	mov    0x8(%di),%ax
    993d:	66 01 d0             	add    %dx,%ax
    9940:	67 c6 00 00          	movb   $0x0,(%bx,%si)
		save = getch();
    9944:	66 e8 85 ff          	callw  98cd <read_and_print_input+0x3a>
    9948:	ff                   	(bad)  
    9949:	ff 67 88             	jmp    *-0x78(%edi)
    994c:	45                   	inc    %ebp
    994d:	ff 67 80             	jmp    *-0x80(%edi)
	return result;
}
void  getline(char str[],int length){
	char save = getch();
	int index = 0;
	while(save != 13 && index < length){
    9950:	7d ff                	jge    9951 <getline+0x67>
    9952:	0d 74 0c 67 66       	or     $0x66670c74,%eax
    9957:	8b 45 f8             	mov    -0x8(%ebp),%eax
    995a:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    995f:	7c a7                	jl     9908 <getline+0x1e>
		str[index] = save;
		index ++;
		str[index] = 0;
		save = getch();
	}
	return;
    9961:	90                   	nop
}
    9962:	66 c9                	leavew 
    9964:	66 c3                	retw   

00009966 <print_different_color>:
void print_different_color(char const* Messeage,int row,int colume,int color){
    9966:	66 55                	push   %bp
    9968:	66 89 e5             	mov    %sp,%bp
    996b:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    996f:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    9974:	66 89 d0             	mov    %dx,%ax
    9977:	66 c1 e0 02          	shl    $0x2,%ax
    997b:	66 01 d0             	add    %dx,%ax
    997e:	66 c1 e0 04          	shl    $0x4,%ax
    9982:	66 89 c2             	mov    %ax,%dx
    9985:	67 66 8b 45 10       	mov    0x10(%di),%ax
    998a:	66 01 d0             	add    %dx,%ax
    998d:	66 01 c0             	add    %ax,%ax
    9990:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    9995:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    999c:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    999e:	eb 35                	jmp    99d5 <print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    99a0:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    99a5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    99aa:	66 01 d0             	add    %dx,%ax
    99ad:	67 8a 00             	mov    (%bx,%si),%al
    99b0:	66 0f be c0          	movsbw %al,%ax
    99b4:	67 66 ff 75 14       	pushw  0x14(%di)
    99b9:	67 66 ff 75 fc       	pushw  -0x4(%di)
    99be:	66 50                	push   %ax
    99c0:	66 e8 17 ee          	callw  87db <_clearscreen+0x7>
    99c4:	ff                   	(bad)  
    99c5:	ff 66 83             	jmp    *-0x7d(%esi)
    99c8:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    99cb:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    99cf:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    99d5:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    99da:	67 66 8b 45 08       	mov    0x8(%di),%ax
    99df:	66 01 d0             	add    %dx,%ax
    99e2:	67 8a 00             	mov    (%bx,%si),%al
    99e5:	84 c0                	test   %al,%al
    99e7:	75 b7                	jne    99a0 <print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    99e9:	90                   	nop
}
    99ea:	66 c9                	leavew 
    99ec:	66 c3                	retw   

000099ee <strcmp>:
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
    99ee:	66 55                	push   %bp
    99f0:	66 89 e5             	mov    %sp,%bp
    99f3:	66 83 ec 04          	sub    $0x4,%sp
	int i = 0;
    99f7:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    99fe:	00 00                	add    %al,(%eax)
	while(m1[i] != 0 && m2[i]!= 0){
    9a00:	eb 31                	jmp    9a33 <strcmp+0x45>
		if(m1[i] != m2[i]){
    9a02:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9a07:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9a0c:	66 01 d0             	add    %dx,%ax
    9a0f:	67 8a 10             	mov    (%bx,%si),%dl
    9a12:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    9a17:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9a1c:	66 01 c8             	add    %cx,%ax
    9a1f:	67 8a 00             	mov    (%bx,%si),%al
    9a22:	38 c2                	cmp    %al,%dl
    9a24:	74 08                	je     9a2e <strcmp+0x40>
			return 0;
    9a26:	66 b8 00 00          	mov    $0x0,%ax
    9a2a:	00 00                	add    %al,(%eax)
    9a2c:	eb 63                	jmp    9a91 <strcmp+0xa3>
		}
		i++;
    9a2e:	67 66 ff 45 fc       	incw   -0x4(%di)
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
	int i = 0;
	while(m1[i] != 0 && m2[i]!= 0){
    9a33:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9a38:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9a3d:	66 01 d0             	add    %dx,%ax
    9a40:	67 8a 00             	mov    (%bx,%si),%al
    9a43:	84 c0                	test   %al,%al
    9a45:	74 14                	je     9a5b <strcmp+0x6d>
    9a47:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9a4c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9a51:	66 01 d0             	add    %dx,%ax
    9a54:	67 8a 00             	mov    (%bx,%si),%al
    9a57:	84 c0                	test   %al,%al
    9a59:	75 a7                	jne    9a02 <strcmp+0x14>
		if(m1[i] != m2[i]){
			return 0;
		}
		i++;
	}
	if(m1[i] != 0 || m2[i] != 0){
    9a5b:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9a60:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9a65:	66 01 d0             	add    %dx,%ax
    9a68:	67 8a 00             	mov    (%bx,%si),%al
    9a6b:	84 c0                	test   %al,%al
    9a6d:	75 14                	jne    9a83 <strcmp+0x95>
    9a6f:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9a74:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9a79:	66 01 d0             	add    %dx,%ax
    9a7c:	67 8a 00             	mov    (%bx,%si),%al
    9a7f:	84 c0                	test   %al,%al
    9a81:	74 08                	je     9a8b <strcmp+0x9d>
		return 0;
    9a83:	66 b8 00 00          	mov    $0x0,%ax
    9a87:	00 00                	add    %al,(%eax)
    9a89:	eb 06                	jmp    9a91 <strcmp+0xa3>
	}
	return 1;
    9a8b:	66 b8 01 00          	mov    $0x1,%ax
    9a8f:	00 00                	add    %al,(%eax)
}
    9a91:	66 c9                	leavew 
    9a93:	66 c3                	retw   

00009a95 <strcpy>:
//====================================================
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
    9a95:	66 55                	push   %bp
    9a97:	66 89 e5             	mov    %sp,%bp
    9a9a:	66 83 ec 08          	sub    $0x8,%sp
	int len = strlen(src);
    9a9e:	67 66 ff 75 08       	pushw  0x8(%di)
    9aa3:	66 e8 a6 fd          	callw  984d <print_next_line+0x27>
    9aa7:	ff                   	(bad)  
    9aa8:	ff 66 83             	jmp    *-0x7d(%esi)
    9aab:	c4 04 67             	les    (%edi,%eiz,2),%eax
    9aae:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	int i = 0;
    9ab2:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9ab9:	00 00                	add    %al,(%eax)
	for(i = 0;i < len;i ++){
    9abb:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9ac2:	00 00                	add    %al,(%eax)
    9ac4:	eb 3b                	jmp    9b01 <strcpy+0x6c>
    	des[i] =  src[i];
    9ac6:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9acb:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9ad0:	66 01 c2             	add    %ax,%dx
    9ad3:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    9ad8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9add:	66 01 c8             	add    %cx,%ax
    9ae0:	67 8a 00             	mov    (%bx,%si),%al
    9ae3:	67 88 02             	mov    %al,(%bp,%si)
        des[i+1] = 0;
    9ae6:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9aeb:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    9af0:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9af5:	66 01 d0             	add    %dx,%ax
    9af8:	67 c6 00 00          	movb   $0x0,(%bx,%si)
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
	int len = strlen(src);
	int i = 0;
	for(i = 0;i < len;i ++){
    9afc:	67 66 ff 45 fc       	incw   -0x4(%di)
    9b01:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9b06:	67 66 3b 45 f8       	cmp    -0x8(%di),%ax
    9b0b:	7c b9                	jl     9ac6 <strcpy+0x31>
    	des[i] =  src[i];
        des[i+1] = 0;
	}
    9b0d:	66 c9                	leavew 
    9b0f:	66 c3                	retw   

00009b11 <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
    9b11:	66 55                	push   %bp
    9b13:	66 89 e5             	mov    %sp,%bp
    9b16:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    9b1a:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    9b1f:	66 89 d0             	mov    %dx,%ax
    9b22:	66 c1 e0 02          	shl    $0x2,%ax
    9b26:	66 01 d0             	add    %dx,%ax
    9b29:	66 c1 e0 04          	shl    $0x4,%ax
    9b2d:	66 89 c2             	mov    %ax,%dx
    9b30:	67 66 8b 45 10       	mov    0x10(%di),%ax
    9b35:	66 01 d0             	add    %dx,%ax
    9b38:	66 01 c0             	add    %ax,%ax
    9b3b:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    9b40:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    9b47:	00 00                	add    %al,(%eax)
	int index = 0;
    9b49:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    9b50:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    9b52:	eb 35                	jmp    9b89 <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
    9b54:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9b59:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9b5e:	66 01 d0             	add    %dx,%ax
    9b61:	67 8a 00             	mov    (%bx,%si),%al
    9b64:	66 0f be c0          	movsbw %al,%ax
    9b68:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9b6d:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9b72:	66 50                	push   %ax
    9b74:	66 e8 63 ec          	callw  87db <_clearscreen+0x7>
    9b78:	ff                   	(bad)  
    9b79:	ff 66 83             	jmp    *-0x7d(%esi)
    9b7c:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    9b7f:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    9b83:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    9b89:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9b8e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9b93:	66 01 d0             	add    %dx,%ax
    9b96:	67 8a 00             	mov    (%bx,%si),%al
    9b99:	84 c0                	test   %al,%al
    9b9b:	75 b7                	jne    9b54 <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    9b9d:	90                   	nop
}
    9b9e:	66 c9                	leavew 
    9ba0:	66 c3                	retw   

00009ba2 <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    9ba2:	66 55                	push   %bp
    9ba4:	66 89 e5             	mov    %sp,%bp
    9ba7:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    9bab:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    9bb0:	66 89 d0             	mov    %dx,%ax
    9bb3:	66 c1 e0 02          	shl    $0x2,%ax
    9bb7:	66 01 d0             	add    %dx,%ax
    9bba:	66 c1 e0 04          	shl    $0x4,%ax
    9bbe:	66 89 c2             	mov    %ax,%dx
    9bc1:	67 66 8b 45 10       	mov    0x10(%di),%ax
    9bc6:	66 01 d0             	add    %dx,%ax
    9bc9:	66 01 c0             	add    %ax,%ax
    9bcc:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    9bd1:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    9bd8:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    9bda:	eb 35                	jmp    9c11 <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    9bdc:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9be1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9be6:	66 01 d0             	add    %dx,%ax
    9be9:	67 8a 00             	mov    (%bx,%si),%al
    9bec:	66 0f be c0          	movsbw %al,%ax
    9bf0:	67 66 ff 75 14       	pushw  0x14(%di)
    9bf5:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9bfa:	66 50                	push   %ax
    9bfc:	66 e8 db eb          	callw  87db <_clearscreen+0x7>
    9c00:	ff                   	(bad)  
    9c01:	ff 66 83             	jmp    *-0x7d(%esi)
    9c04:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    9c07:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    9c0b:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    9c11:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9c16:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9c1b:	66 01 d0             	add    %dx,%ax
    9c1e:	67 8a 00             	mov    (%bx,%si),%al
    9c21:	84 c0                	test   %al,%al
    9c23:	75 b7                	jne    9bdc <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    9c25:	90                   	nop
}
    9c26:	66 c9                	leavew 
    9c28:	66 c3                	retw   

00009c2a <sys_showline>:
void sys_showline(){
    9c2a:	66 55                	push   %bp
    9c2c:	66 89 e5             	mov    %sp,%bp
    9c2f:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
    9c33:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
    9c38:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
    9c3d:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
    9c42:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
    9c47:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
    9c4c:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
    9c51:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
    9c56:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    9c5d:	00 00                	add    %al,(%eax)
    int i = 0;
    9c5f:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9c66:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
    9c68:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9c6f:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
    9c71:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9c78:	00 00                	add    %al,(%eax)
    9c7a:	eb 52                	jmp    9cce <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
    9c7c:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9c81:	66 89 d0             	mov    %dx,%ax
    9c84:	66 c1 e0 03          	shl    $0x3,%ax
    9c88:	66 01 d0             	add    %dx,%ax
    9c8b:	67 66 8d 14          	lea    (%si),%dx
    9c8f:	c5 00                	lds    (%eax),%eax
    9c91:	00 00                	add    %al,(%eax)
    9c93:	00 66 01             	add    %ah,0x1(%esi)
    9c96:	d0 66 01             	shlb   0x1(%esi)
    9c99:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
    9c9d:	45                   	inc    %ebp
    9c9e:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
    9ca4:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9ca9:	66 01 d0             	add    %dx,%ax
    9cac:	67 8a 00             	mov    (%bx,%si),%al
    9caf:	66 0f be c0          	movsbw %al,%ax
    9cb3:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9cb8:	67 66 ff 75 f0       	pushw  -0x10(%di)
    9cbd:	66 50                	push   %ax
    9cbf:	66 e8 18 eb          	callw  87db <_clearscreen+0x7>
    9cc3:	ff                   	(bad)  
    9cc4:	ff 66 83             	jmp    *-0x7d(%esi)
    9cc7:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
    9cca:	66 ff 45 fc          	incw   -0x4(%ebp)
    9cce:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
    9cd4:	7e a6                	jle    9c7c <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
    9cd6:	66 c9                	leavew 
    9cd8:	66 c3                	retw   

00009cda <sys_printname>:

void sys_printname(){
    9cda:	66 55                	push   %bp
    9cdc:	66 89 e5             	mov    %sp,%bp
    9cdf:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
    9ce3:	67 66 c7 45 fc 1c a2 	movw   $0xa21c,-0x4(%di)
    9cea:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
    9cec:	67 66 c7 45 f8 60 a2 	movw   $0xa260,-0x8(%di)
    9cf3:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
    9cf5:	67 66 c7 45 f4 a4 a2 	movw   $0xa2a4,-0xc(%di)
    9cfc:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
    9cfe:	67 66 c7 45 f0 e8 a2 	movw   $0xa2e8,-0x10(%di)
    9d05:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
    9d07:	67 66 c7 45 ec 2c a3 	movw   $0xa32c,-0x14(%di)
    9d0e:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
    9d10:	67 66 c7 45 e8 70 a3 	movw   $0xa370,-0x18(%di)
    9d17:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
    9d19:	67 66 c7 45 e4 b4 a3 	movw   $0xa3b4,-0x1c(%di)
    9d20:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
    9d22:	66 6a 0b             	pushw  $0xb
    9d25:	66 6a 10             	pushw  $0x10
    9d28:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9d2d:	66 e8 de fd          	callw  9b0f <strcpy+0x7a>
    9d31:	ff                   	(bad)  
    9d32:	ff 66 83             	jmp    *-0x7d(%esi)
    9d35:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
    9d38:	6a 0b                	push   $0xb
    9d3a:	66 6a 11             	pushw  $0x11
    9d3d:	67 66 ff 75 f8       	pushw  -0x8(%di)
    9d42:	66 e8 c9 fd          	callw  9b0f <strcpy+0x7a>
    9d46:	ff                   	(bad)  
    9d47:	ff 66 83             	jmp    *-0x7d(%esi)
    9d4a:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
    9d4d:	6a 0b                	push   $0xb
    9d4f:	66 6a 12             	pushw  $0x12
    9d52:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9d57:	66 e8 b4 fd          	callw  9b0f <strcpy+0x7a>
    9d5b:	ff                   	(bad)  
    9d5c:	ff 66 83             	jmp    *-0x7d(%esi)
    9d5f:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
    9d62:	6a 0b                	push   $0xb
    9d64:	66 6a 13             	pushw  $0x13
    9d67:	67 66 ff 75 f0       	pushw  -0x10(%di)
    9d6c:	66 e8 9f fd          	callw  9b0f <strcpy+0x7a>
    9d70:	ff                   	(bad)  
    9d71:	ff 66 83             	jmp    *-0x7d(%esi)
    9d74:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
    9d77:	6a 0b                	push   $0xb
    9d79:	66 6a 14             	pushw  $0x14
    9d7c:	67 66 ff 75 ec       	pushw  -0x14(%di)
    9d81:	66 e8 8a fd          	callw  9b0f <strcpy+0x7a>
    9d85:	ff                   	(bad)  
    9d86:	ff 66 83             	jmp    *-0x7d(%esi)
    9d89:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
    9d8c:	6a 0b                	push   $0xb
    9d8e:	66 6a 15             	pushw  $0x15
    9d91:	67 66 ff 75 e8       	pushw  -0x18(%di)
    9d96:	66 e8 75 fd          	callw  9b0f <strcpy+0x7a>
    9d9a:	ff                   	(bad)  
    9d9b:	ff 66 83             	jmp    *-0x7d(%esi)
    9d9e:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
    9da1:	6a 0b                	push   $0xb
    9da3:	66 6a 16             	pushw  $0x16
    9da6:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    9dab:	66 e8 60 fd          	callw  9b0f <strcpy+0x7a>
    9daf:	ff                   	(bad)  
    9db0:	ff 66 83             	jmp    *-0x7d(%esi)
    9db3:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    9db6:	c9                   	leave  
    9db7:	66 c3                	retw   

00009db9 <sys_printpoem>:
void sys_printpoem(){
    9db9:	66 55                	push   %bp
    9dbb:	66 89 e5             	mov    %sp,%bp
    9dbe:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
    9dc2:	67 66 c7 45 f8 f8 a3 	movw   $0xa3f8,-0x8(%di)
    9dc9:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
    9dcb:	67 66 c7 45 f4 0a a4 	movw   $0xa40a,-0xc(%di)
    9dd2:	00 00                	add    %al,(%eax)
    int i = 1;
    9dd4:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    9ddb:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
    9ddd:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    9de4:	00 00                	add    %al,(%eax)
    9de6:	eb 4b                	jmp    9e33 <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
    9de8:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9ded:	66 6a 0a             	pushw  $0xa
    9df0:	66 6a 0f             	pushw  $0xf
    9df3:	67 66 ff 75 f8       	pushw  -0x8(%di)
    9df8:	66 e8 a4 fd          	callw  9ba0 <sys_print_for_heart+0x8f>
    9dfc:	ff                   	(bad)  
    9dfd:	ff 66 83             	jmp    *-0x7d(%esi)
    9e00:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
    9e02:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9e07:	66 6a 0a             	pushw  $0xa
    9e0a:	66 6a 10             	pushw  $0x10
    9e0d:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9e12:	66 e8 8a fd          	callw  9ba0 <sys_print_for_heart+0x8f>
    9e16:	ff                   	(bad)  
    9e17:	ff 66 83             	jmp    *-0x7d(%esi)
    9e1a:	c4 10                	les    (%eax),%edx
        int j = 0;
    9e1c:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9e23:	00 00                	add    %al,(%eax)
        int k = 0;
    9e25:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    9e2c:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
    9e2e:	67 66 ff 45 fc       	incw   -0x4(%di)
    9e33:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    9e39:	7e ad                	jle    9de8 <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
    9e3b:	66 c9                	leavew 
    9e3d:	66 c3                	retw   

00009e3f <sys_printheart>:
void sys_printheart(){
    9e3f:	66 55                	push   %bp
    9e41:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
    9e44:	66 6a 28             	pushw  $0x28
    9e47:	66 6a 00             	pushw  $0x0
    9e4a:	66 68 13 a4          	pushw  $0xa413
    9e4e:	00 00                	add    %al,(%eax)
    9e50:	66 e8 bb fc          	callw  9b0f <strcpy+0x7a>
    9e54:	ff                   	(bad)  
    9e55:	ff 66 83             	jmp    *-0x7d(%esi)
    9e58:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
    9e5b:	6a 28                	push   $0x28
    9e5d:	66 6a 01             	pushw  $0x1
    9e60:	66 68 2b a4          	pushw  $0xa42b
    9e64:	00 00                	add    %al,(%eax)
    9e66:	66 e8 a5 fc          	callw  9b0f <strcpy+0x7a>
    9e6a:	ff                   	(bad)  
    9e6b:	ff 66 83             	jmp    *-0x7d(%esi)
    9e6e:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
    9e71:	6a 28                	push   $0x28
    9e73:	66 6a 02             	pushw  $0x2
    9e76:	66 68 44 a4          	pushw  $0xa444
    9e7a:	00 00                	add    %al,(%eax)
    9e7c:	66 e8 8f fc          	callw  9b0f <strcpy+0x7a>
    9e80:	ff                   	(bad)  
    9e81:	ff 66 83             	jmp    *-0x7d(%esi)
    9e84:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
    9e87:	6a 28                	push   $0x28
    9e89:	66 6a 03             	pushw  $0x3
    9e8c:	66 68 5f a4          	pushw  $0xa45f
    9e90:	00 00                	add    %al,(%eax)
    9e92:	66 e8 79 fc          	callw  9b0f <strcpy+0x7a>
    9e96:	ff                   	(bad)  
    9e97:	ff 66 83             	jmp    *-0x7d(%esi)
    9e9a:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
    9e9d:	6a 28                	push   $0x28
    9e9f:	66 6a 04             	pushw  $0x4
    9ea2:	66 68 78 a4          	pushw  $0xa478
    9ea6:	00 00                	add    %al,(%eax)
    9ea8:	66 e8 63 fc          	callw  9b0f <strcpy+0x7a>
    9eac:	ff                   	(bad)  
    9ead:	ff 66 83             	jmp    *-0x7d(%esi)
    9eb0:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
    9eb3:	6a 28                	push   $0x28
    9eb5:	66 6a 05             	pushw  $0x5
    9eb8:	66 68 90 a4          	pushw  $0xa490
    9ebc:	00 00                	add    %al,(%eax)
    9ebe:	66 e8 4d fc          	callw  9b0f <strcpy+0x7a>
    9ec2:	ff                   	(bad)  
    9ec3:	ff 66 83             	jmp    *-0x7d(%esi)
    9ec6:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
    9ec9:	6a 28                	push   $0x28
    9ecb:	66 6a 06             	pushw  $0x6
    9ece:	66 68 a7 a4          	pushw  $0xa4a7
    9ed2:	00 00                	add    %al,(%eax)
    9ed4:	66 e8 37 fc          	callw  9b0f <strcpy+0x7a>
    9ed8:	ff                   	(bad)  
    9ed9:	ff 66 83             	jmp    *-0x7d(%esi)
    9edc:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
    9edf:	6a 28                	push   $0x28
    9ee1:	66 6a 07             	pushw  $0x7
    9ee4:	66 68 bd a4          	pushw  $0xa4bd
    9ee8:	00 00                	add    %al,(%eax)
    9eea:	66 e8 21 fc          	callw  9b0f <strcpy+0x7a>
    9eee:	ff                   	(bad)  
    9eef:	ff 66 83             	jmp    *-0x7d(%esi)
    9ef2:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    9ef5:	c9                   	leave  
    9ef6:	66 c3                	retw   

00009ef8 <Get_Hours>:
#include "time.h"
#include "stdio.h"

int Get_Hours(){
    9ef8:	66 55                	push   %bp
    9efa:	66 89 e5             	mov    %sp,%bp
    9efd:	66 53                	push   %bx
    9eff:	66 83 ec 04          	sub    $0x4,%sp
    int hours = _Get_Hours_1();
    9f03:	66 e8 c4 f0          	callw  8fcb <RTC_Timer+0xa3>
    9f07:	ff                   	(bad)  
    9f08:	ff 67 66             	jmp    *0x66(%edi)
    9f0b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    hours = hours * 10 + _Get_Hours_2();
    9f0e:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9f13:	66 89 d0             	mov    %dx,%ax
    9f16:	66 c1 e0 02          	shl    $0x2,%ax
    9f1a:	66 01 d0             	add    %dx,%ax
    9f1d:	66 01 c0             	add    %ax,%ax
    9f20:	66 89 c3             	mov    %ax,%bx
    9f23:	66 e8 c5 f0          	callw  8fec <_Get_Hours_1+0x1f>
    9f27:	ff                   	(bad)  
    9f28:	ff 66 01             	jmp    *0x1(%esi)
    9f2b:	d8 67 66             	fsubs  0x66(%edi)
    9f2e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return hours;
    9f31:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
   // printsint(hours);
}
    9f36:	66 83 c4 04          	add    $0x4,%sp
    9f3a:	66 5b                	pop    %bx
    9f3c:	66 5d                	pop    %bp
    9f3e:	66 c3                	retw   

00009f40 <Get_Minutes>:
int Get_Minutes(){
    9f40:	66 55                	push   %bp
    9f42:	66 89 e5             	mov    %sp,%bp
    9f45:	66 53                	push   %bx
    9f47:	66 83 ec 04          	sub    $0x4,%sp
    int minutes = _Get_Minutes_1();
    9f4b:	66 e8 ba f0          	callw  9009 <_Get_Hours_2+0x1b>
    9f4f:	ff                   	(bad)  
    9f50:	ff 67 66             	jmp    *0x66(%edi)
    9f53:	89 45 f8             	mov    %eax,-0x8(%ebp)
    minutes = minutes * 10 + _Get_Minutes_2();
    9f56:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9f5b:	66 89 d0             	mov    %dx,%ax
    9f5e:	66 c1 e0 02          	shl    $0x2,%ax
    9f62:	66 01 d0             	add    %dx,%ax
    9f65:	66 01 c0             	add    %ax,%ax
    9f68:	66 89 c3             	mov    %ax,%bx
    9f6b:	66 e8 bb f0          	callw  902a <_Get_Minutes_1+0x1f>
    9f6f:	ff                   	(bad)  
    9f70:	ff 66 01             	jmp    *0x1(%esi)
    9f73:	d8 67 66             	fsubs  0x66(%edi)
    9f76:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return minutes;
    9f79:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    9f7e:	66 83 c4 04          	add    $0x4,%sp
    9f82:	66 5b                	pop    %bx
    9f84:	66 5d                	pop    %bp
    9f86:	66 c3                	retw   

00009f88 <printTime>:
void printTime(){
    9f88:	66 55                	push   %bp
    9f8a:	66 89 e5             	mov    %sp,%bp
    9f8d:	66 83 ec 08          	sub    $0x8,%sp
    int hour = Get_Hours();
    9f91:	66 e8 61 ff          	callw  9ef6 <sys_printheart+0xb7>
    9f95:	ff                   	(bad)  
    9f96:	ff 67 66             	jmp    *0x66(%edi)
    9f99:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int minute = Get_Minutes();
    9f9c:	66 e8 9e ff          	callw  9f3e <Get_Hours+0x46>
    9fa0:	ff                   	(bad)  
    9fa1:	ff 67 66             	jmp    *0x66(%edi)
    9fa4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    printsint(hour);
    9fa7:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9fac:	66 e8 7c f7          	callw  972c <printc+0x27>
    9fb0:	ff                   	(bad)  
    9fb1:	ff 66 83             	jmp    *-0x7d(%esi)
    9fb4:	c4 04 66             	les    (%esi,%eiz,2),%eax
    prints("h : ");
    9fb7:	68 d2 a4 00 00       	push   $0xa4d2
    9fbc:	66 e8 f1 f6          	callw  96b1 <print+0x8f>
    9fc0:	ff                   	(bad)  
    9fc1:	ff 66 83             	jmp    *-0x7d(%esi)
    9fc4:	c4 04 67             	les    (%edi,%eiz,2),%eax
    printsint(minute);
    9fc7:	66 ff 75 f8          	pushw  -0x8(%ebp)
    9fcb:	66 e8 5d f7          	callw  972c <printc+0x27>
    9fcf:	ff                   	(bad)  
    9fd0:	ff 66 83             	jmp    *-0x7d(%esi)
    9fd3:	c4 04 66             	les    (%esi,%eiz,2),%eax
    printc('m');
    9fd6:	6a 6d                	push   $0x6d
    9fd8:	66 e8 27 f7          	callw  9703 <prints+0x50>
    9fdc:	ff                   	(bad)  
    9fdd:	ff 66 83             	jmp    *-0x7d(%esi)
    9fe0:	c4 04 66             	les    (%esi,%eiz,2),%eax

    9fe3:	c9                   	leave  
    9fe4:	66 c3                	retw   

00009fe6 <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    9fe6:	66 55                	push   %bp
    9fe8:	66 89 e5             	mov    %sp,%bp
    9feb:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    9fef:	66 e8 cb e8          	callw  88be <_Schedule_once+0x9>
    9ff3:	ff                   	(bad)  
    9ff4:	ff 67 66             	jmp    *0x66(%edi)
    9ff7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    9ffa:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    9fff:	66 c9                	leavew 
    a001:	66 c3                	retw   

0000a003 <wait>:
char wait(){
    a003:	66 55                	push   %bp
    a005:	66 89 e5             	mov    %sp,%bp
    a008:	66 83 ec 08          	sub    $0x8,%sp
    int temp_ch = _wait();
    a00c:	66 e8 c6 e8          	callw  88d6 <_Schedule+0xb>
    a010:	ff                   	(bad)  
    a011:	ff 67 66             	jmp    *0x66(%edi)
    a014:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char ch = '0' + temp_ch;
    a017:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    a01c:	66 83 c0 30          	add    $0x30,%ax
    a020:	67 88 45 fb          	mov    %al,-0x5(%di)
    return ch;
    a024:	67 8a 45 fb          	mov    -0x5(%di),%al
    //_wait();
}
    a028:	66 c9                	leavew 
    a02a:	66 c3                	retw   

0000a02c <exit>:
void exit(char ch){
    a02c:	66 55                	push   %bp
    a02e:	66 89 e5             	mov    %sp,%bp
    a031:	66 83 ec 04          	sub    $0x4,%sp
    a035:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a03a:	67 88 45 fc          	mov    %al,-0x4(%di)
    _exit(ch);
    a03e:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    a044:	66 50                	push   %ax
    a046:	66 e8 97 e8          	callw  88e1 <_wait+0x9>
    a04a:	ff                   	(bad)  
    a04b:	ff 66 83             	jmp    *-0x7d(%esi)
    a04e:	c4 04 66             	les    (%esi,%eiz,2),%eax
    a051:	c9                   	leave  
    a052:	66 c3                	retw   
