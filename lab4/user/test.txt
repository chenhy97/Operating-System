
test.elf:     file format elf32-i386


Disassembly of section .text:

0000c000 <test>:
    c000:	8c c8                	mov    %cs,%eax
    c002:	8e d8                	mov    %eax,%ds
    c004:	8e d0                	mov    %eax,%ss
    c006:	b8 00 01 89 c4       	mov    $0xc4890100,%eax
    c00b:	31 c0                	xor    %eax,%eax
    c00d:	cd 34                	int    $0x34
    c00f:	eb fe                	jmp    c00f <test+0xf>
    c011:	66 90                	xchg   %ax,%ax
    c013:	66 90                	xchg   %ax,%ax
    c015:	66 90                	xchg   %ax,%ax
    c017:	66 90                	xchg   %ax,%ax
    c019:	66 90                	xchg   %ax,%ax
    c01b:	66 90                	xchg   %ax,%ax
    c01d:	66 90                	xchg   %ax,%ax
    c01f:	90                   	nop

0000c020 <Pg_Segment>:
	...

0000c022 <Pg_Offset>:
    c022:	00 c0                	add    %al,%al

0000c024 <info_Segment>:
	...

0000c026 <info_Offset>:
    c026:	00 b1 08 00 00 00    	add    %dh,0x8(%ecx)

0000c028 <count>:
    c028:	08 00                	or     %al,(%eax)

0000c029 <x>:
	...

0000c02b <y>:
	...

0000c02d <xdul>:
    c02d:	01 00                	add    %eax,(%eax)

0000c02f <ydul>:
    c02f:	01 00                	add    %eax,(%eax)

0000c031 <alpha>:
    c031:	2d 00 00 00 00       	sub    $0x0,%eax

0000c032 <int_09_saved>:
    c032:	00 00                	add    %al,(%eax)
	...

0000c036 <color>:
    c036:	01 b8 03 00 cd 10    	add    %edi,0x10cd0003(%eax)

0000c037 <_clearscreen>:
    c037:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    c03c:	66 5a                	pop    %dx
    c03e:	ff e2                	jmp    *%edx

0000c040 <_printchar>:
    c040:	c8 00 00 00          	enter  $0x0,$0x0
    c044:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
    c049:	57                   	push   %edi
    c04a:	66 8b 4e 06          	mov    0x6(%esi),%cx
    c04e:	66 8b 7e 0a          	mov    0xa(%esi),%di
    c052:	66 8b 56 0e          	mov    0xe(%esi),%dx
    c056:	88 d5                	mov    %dl,%ch
    c058:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
    c05f:	00 66 5a             	add    %ah,0x5a(%esi)
    c062:	ff e2                	jmp    *%edx

0000c064 <_readinput>:
    c064:	c8 04 00 00          	enter  $0x4,$0x0
    c068:	b4 00                	mov    $0x0,%ah
    c06a:	cd 16                	int    $0x16
    c06c:	b4 00                	mov    $0x0,%ah
    c06e:	66 67 89 04          	mov    %ax,(%si)
    c072:	24 66                	and    $0x66,%al
    c074:	67 8b 04             	mov    (%si),%eax
    c077:	24 c9                	and    $0xc9,%al
    c079:	66 5a                	pop    %dx
    c07b:	ff e2                	jmp    *%edx

0000c07d <_showchar>:
    c07d:	c8 00 00 00          	enter  $0x0,$0x0
    c081:	8b 46 06             	mov    0x6(%esi),%eax
    c084:	b4 0e                	mov    $0xe,%ah
    c086:	b3 00                	mov    $0x0,%bl
    c088:	cd 10                	int    $0x10
    c08a:	c9                   	leave  
    c08b:	66 5a                	pop    %dx
    c08d:	ff e2                	jmp    *%edx

0000c08f <_setPoint>:
    c08f:	c8 00 00 00          	enter  $0x0,$0x0
    c093:	53                   	push   %ebx
    c094:	b7 00                	mov    $0x0,%bh
    c096:	8a 77 06             	mov    0x6(%edi),%dh
    c099:	8a 57 0a             	mov    0xa(%edi),%dl
    c09c:	b4 02                	mov    $0x2,%ah
    c09e:	cd 10                	int    $0x10
    c0a0:	5b                   	pop    %ebx
    c0a1:	c9                   	leave  
    c0a2:	66 5a                	pop    %dx
    c0a4:	ff e2                	jmp    *%edx

0000c0a6 <_loadP>:
    c0a6:	c8 00 00 00          	enter  $0x0,$0x0
    c0aa:	60                   	pusha  
    c0ab:	06                   	push   %es
    c0ac:	1e                   	push   %ds
    c0ad:	52                   	push   %edx
    c0ae:	8c c8                	mov    %cs,%eax
    c0b0:	8e d8                	mov    %eax,%ds
    c0b2:	8e c0                	mov    %eax,%es
    c0b4:	b2 00                	mov    $0x0,%dl
    c0b6:	8b 46 0a             	mov    0xa(%esi),%eax
    c0b9:	b3 12                	mov    $0x12,%bl
    c0bb:	f6 f3                	div    %bl
    c0bd:	88 e1                	mov    %ah,%cl
    c0bf:	30 e4                	xor    %ah,%ah
    c0c1:	b3 02                	mov    $0x2,%bl
    c0c3:	f6 f3                	div    %bl
    c0c5:	88 e6                	mov    %ah,%dh
    c0c7:	88 c5                	mov    %al,%ch
    c0c9:	8a 46 06             	mov    0x6(%esi),%al
    c0cc:	8b 5e 0e             	mov    0xe(%esi),%ebx
    c0cf:	b4 02                	mov    $0x2,%ah
    c0d1:	cd 13                	int    $0x13
    c0d3:	5a                   	pop    %edx
    c0d4:	1f                   	pop    %ds
    c0d5:	07                   	pop    %es
    c0d6:	61                   	popa   
    c0d7:	c9                   	leave  
    c0d8:	66 5a                	pop    %dx
    c0da:	ff e2                	jmp    *%edx

0000c0dc <_RunProgress>:
    c0dc:	c8 00 00 00          	enter  $0x0,$0x0
    c0e0:	06                   	push   %es
    c0e1:	60                   	pusha  
    c0e2:	06                   	push   %es
    c0e3:	8c c8                	mov    %cs,%eax
    c0e5:	8e d8                	mov    %eax,%ds
    c0e7:	8e c0                	mov    %eax,%es
    c0e9:	8b 5e 06             	mov    0x6(%esi),%ebx
    c0ec:	ff d3                	call   *%ebx
    c0ee:	07                   	pop    %es
    c0ef:	61                   	popa   

0000c0f0 <S>:
    c0f0:	b4 00                	mov    $0x0,%ah
    c0f2:	cd 16                	int    $0x16
    c0f4:	b8 00 04 50 cd       	mov    $0xcd500400,%eax
    c0f9:	21 07                	and    %eax,(%edi)
    c0fb:	c9                   	leave  
    c0fc:	66 5a                	pop    %dx
    c0fe:	ff e2                	jmp    *%edx

0000c100 <_SetINT20h>:
    c100:	53                   	push   %ebx
    c101:	51                   	push   %ecx
    c102:	52                   	push   %edx
    c103:	b4 01                	mov    $0x1,%ah
    c105:	cd 16                	int    $0x16
    c107:	5a                   	pop    %edx
    c108:	59                   	pop    %ecx
    c109:	5b                   	pop    %ebx
    c10a:	75 e4                	jne    c0f0 <S>
    c10c:	cf                   	iret   

0000c10d <_SetINT08h>:
    c10d:	60                   	pusha  
    c10e:	0f a8                	push   %gs
    c110:	fe 0e                	decb   (%esi)
    c112:	28 c0                	sub    %al,%al
    c114:	75 4f                	jne    c165 <end>

0000c116 <notc>:
    c116:	80 3e 31             	cmpb   $0x31,(%esi)
    c119:	c0 2d 75 07 c6 06 31 	shrb   $0x31,0x6c60775
    c120:	c0 5c eb 2a 80       	rcrb   $0x80,0x2a(%ebx,%ebp,8)

0000c124 <changleft>:
    c124:	80 3e 31             	cmpb   $0x31,(%esi)
    c127:	c0 5c 75 07 c6       	rcrb   $0xc6,0x7(%ebp,%esi,2)
    c12c:	06                   	push   %es
    c12d:	31 c0                	xor    %eax,%eax
    c12f:	7c eb                	jl     c11c <notc+0x6>
    c131:	1c 80                	sbb    $0x80,%al

0000c132 <changright>:
    c132:	80 3e 31             	cmpb   $0x31,(%esi)
    c135:	c0 7c 75 07 c6       	sarb   $0xc6,0x7(%ebp,%esi,2)
    c13a:	06                   	push   %es
    c13b:	31 c0                	xor    %eax,%eax
    c13d:	2f                   	das    
    c13e:	eb 0e                	jmp    c14e <show>

0000c140 <changheng>:
    c140:	80 3e 31             	cmpb   $0x31,(%esi)
    c143:	c0 2f 75             	shrb   $0x75,(%edi)
    c146:	cf                   	iret   
    c147:	c6 06 31             	movb   $0x31,(%esi)
    c14a:	c0 2d eb 00 b9 00 b8 	shrb   $0xb8,0xb900eb

0000c14e <show>:
    c14e:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    c153:	b4 09                	mov    $0x9,%ah
    c155:	8a 26                	mov    (%esi),%ah
    c157:	36 c0 a0 31 c0 65 a3 	shlb   $0xdc,%ss:-0x5c9a3fcf(%eax)
    c15e:	dc 
    c15f:	00 c6                	add    %al,%dh
    c161:	06                   	push   %es
    c162:	28 c0                	sub    %al,%al
    c164:	08 b0 20 e6 20 e6    	or     %dh,-0x19df19e0(%eax)

0000c165 <end>:
    c165:	b0 20                	mov    $0x20,%al
    c167:	e6 20                	out    %al,$0x20
    c169:	e6 a0                	out    %al,$0xa0
    c16b:	0f a9                	pop    %gs
    c16d:	61                   	popa   
    c16e:	cf                   	iret   

0000c16f <_SetINT09h>:
    c16f:	60                   	pusha  
    c170:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    c175:	8a 26                	mov    (%esi),%ah
    c177:	36                   	ss
    c178:	c0                   	(bad)  
    c179:	b0 4f                	mov    $0x4f,%al
    c17b:	65 a3 00 00 b0 55    	mov    %eax,%gs:0x55b00000
    c181:	65 a3 02 00 b0 43    	mov    %eax,%gs:0x43b00002
    c187:	65 a3 04 00 b0 48    	mov    %eax,%gs:0x48b00004
    c18d:	65 a3 06 00 b0 53    	mov    %eax,%gs:0x53b00006
    c193:	65 a3 08 00 b0 21    	mov    %eax,%gs:0x21b00008
    c199:	65 a3 0a 00 b0 4f    	mov    %eax,%gs:0x4fb0000a
    c19f:	65 a3 0c 00 b0 55    	mov    %eax,%gs:0x55b0000c
    c1a5:	65 a3 0e 00 b0 43    	mov    %eax,%gs:0x43b0000e
    c1ab:	65 a3 10 00 b0 48    	mov    %eax,%gs:0x48b00010
    c1b1:	65 a3 12 00 b0 21    	mov    %eax,%gs:0x21b00012
    c1b7:	65 a3 14 00 61 80    	mov    %eax,%gs:0x80610014
    c1bd:	fc                   	cld    
    c1be:	06                   	push   %es
    c1bf:	75 08                	jne    c1c9 <cont>
    c1c1:	50                   	push   %eax
    c1c2:	b4 01                	mov    $0x1,%ah
    c1c4:	88 26                	mov    %ah,(%esi)
    c1c6:	36 c0 58 fe 06       	rcrb   $0x6,%ss:-0x2(%eax)

0000c1c9 <cont>:
    c1c9:	fe 06                	incb   (%esi)
    c1cb:	36 c0 06 50          	rolb   $0x50,%ss:(%esi)
    c1cf:	8c c8                	mov    %cs,%eax
    c1d1:	8e c0                	mov    %eax,%es
    c1d3:	fb                   	sti    
    c1d4:	9c                   	pushf  
    c1d5:	26 ff 1e             	lcall  *%es:(%esi)
    c1d8:	32 c0                	xor    %al,%al
    c1da:	58                   	pop    %eax
    c1db:	07                   	pop    %es
    c1dc:	cf                   	iret   

0000c1dd <_SetINT33h>:
    c1dd:	c8 00 00 00          	enter  $0x0,$0x0
    c1e1:	60                   	pusha  
    c1e2:	1e                   	push   %ds
    c1e3:	0f a8                	push   %gs
    c1e5:	6a 00                	push   $0x0
    c1e7:	e8 6d 02 0f a9       	call   a90fc459 <_end+0xa90eed71>
    c1ec:	1f                   	pop    %ds
    c1ed:	61                   	popa   
    c1ee:	c9                   	leave  
    c1ef:	cf                   	iret   

0000c1f0 <_SetINT34h>:
    c1f0:	60                   	pusha  
    c1f1:	1e                   	push   %ds
    c1f2:	0f a8                	push   %gs
    c1f4:	6a 00                	push   $0x0
    c1f6:	e8 9f 03 0f a9       	call   a90fc59a <_end+0xa90eeeb2>
    c1fb:	1f                   	pop    %ds
    c1fc:	61                   	popa   
    c1fd:	cf                   	iret   

0000c1fe <_SetINT35h>:
    c1fe:	c8 04 00 00          	enter  $0x4,$0x0
    c202:	60                   	pusha  
    c203:	1e                   	push   %ds
    c204:	0f a8                	push   %gs
    c206:	8b 46 08             	mov    0x8(%esi),%eax
    c209:	50                   	push   %eax
    c20a:	6a 00                	push   $0x0
    c20c:	e8 b4 03 66 67       	call   6766c5c5 <_end+0x6765eedd>
    c211:	89 04 24             	mov    %eax,(%esp)
    c214:	66 67 8b 04          	mov    (%si),%ax
    c218:	24 0f                	and    $0xf,%al
    c21a:	a9 1f 61 c9 cf       	test   $0xcfc9611f,%eax

0000c21f <_SetINT21h>:
    c21f:	c8 00 00 00          	enter  $0x0,$0x0
    c223:	60                   	pusha  
    c224:	8b 46 08             	mov    0x8(%esi),%eax
    c227:	80 fc 00             	cmp    $0x0,%ah
    c22a:	74 17                	je     c243 <showc>
    c22c:	80 fc 01             	cmp    $0x1,%ah
    c22f:	74 1e                	je     c24f <inputc>
    c231:	80 fc 02             	cmp    $0x2,%ah
    c234:	74 36                	je     c26c <input_and_readc>
    c236:	80 fc 03             	cmp    $0x3,%ah
    c239:	74 54                	je     c28f <clr>
    c23b:	80 fc 04             	cmp    $0x4,%ah
    c23e:	74 57                	je     c297 <ouch>
    c240:	61                   	popa   
    c241:	c9                   	leave  
    c242:	cf                   	iret   

0000c243 <showc>:
    c243:	8b 46 0a             	mov    0xa(%esi),%eax
    c246:	b4 0e                	mov    $0xe,%ah
    c248:	b3 00                	mov    $0x0,%bl
    c24a:	cd 10                	int    $0x10
    c24c:	61                   	popa   
    c24d:	c9                   	leave  
    c24e:	cf                   	iret   

0000c24f <inputc>:
    c24f:	66 83 ec 04          	sub    $0x4,%sp
    c253:	b4 00                	mov    $0x0,%ah
    c255:	cd 16                	int    $0x16
    c257:	b4 00                	mov    $0x0,%ah
    c259:	66 67 89 04          	mov    %ax,(%si)
    c25d:	24 66                	and    $0x66,%al
    c25f:	67 8b 04             	mov    (%si),%eax
    c262:	24 66                	and    $0x66,%al
    c264:	83 c4 04             	add    $0x4,%esp
    c267:	8e e0                	mov    %eax,%fs
    c269:	61                   	popa   
    c26a:	c9                   	leave  
    c26b:	cf                   	iret   

0000c26c <input_and_readc>:
    c26c:	66 83 ec 04          	sub    $0x4,%sp
    c270:	b4 00                	mov    $0x0,%ah
    c272:	cd 16                	int    $0x16
    c274:	b4 00                	mov    $0x0,%ah
    c276:	66 67 89 04          	mov    %ax,(%si)
    c27a:	24 66                	and    $0x66,%al
    c27c:	67 8b 04             	mov    (%si),%eax
    c27f:	24 b4                	and    $0xb4,%al
    c281:	0e                   	push   %cs
    c282:	b3 00                	mov    $0x0,%bl
    c284:	cd 10                	int    $0x10
    c286:	66 83 c4 04          	add    $0x4,%sp
    c28a:	8e e0                	mov    %eax,%fs
    c28c:	61                   	popa   
    c28d:	c9                   	leave  
    c28e:	cf                   	iret   

0000c28f <clr>:
    c28f:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    c294:	61                   	popa   
    c295:	c9                   	leave  
    c296:	cf                   	iret   

0000c297 <ouch>:
    c297:	06                   	push   %es
    c298:	b8 00 b8 8e c0       	mov    $0xc08eb800,%eax
    c29d:	bf 28 00 57 66       	mov    $0x66570028,%edi
    c2a2:	b9 6f 00 00 00       	mov    $0x6f,%ecx
    c2a7:	b5 07                	mov    $0x7,%ch
    c2a9:	66 bf 28 00          	mov    $0x28,%di
    c2ad:	00 00                	add    %al,(%eax)
    c2af:	26 89 0d 66 b9 75 00 	mov    %ecx,%es:0x75b966
    c2b6:	00 00                	add    %al,(%eax)
    c2b8:	b5 07                	mov    $0x7,%ch
    c2ba:	66 bf 2a 00          	mov    $0x2a,%di
    c2be:	00 00                	add    %al,(%eax)
    c2c0:	26 89 0d 66 b9 63 00 	mov    %ecx,%es:0x63b966
    c2c7:	00 00                	add    %al,(%eax)
    c2c9:	b5 07                	mov    $0x7,%ch
    c2cb:	66 bf 2c 00          	mov    $0x2c,%di
    c2cf:	00 00                	add    %al,(%eax)
    c2d1:	26 89 0d 66 b9 68 00 	mov    %ecx,%es:0x68b966
    c2d8:	00 00                	add    %al,(%eax)
    c2da:	b5 07                	mov    $0x7,%ch
    c2dc:	66 bf 2e 00          	mov    $0x2e,%di
    c2e0:	00 00                	add    %al,(%eax)
    c2e2:	26 89 0d 5f 07 61 c9 	mov    %ecx,%es:0xc961075f
    c2e9:	cf                   	iret   

0000c2ea <_initialInt>:
    c2ea:	c8 00 00 00          	enter  $0x0,$0x0
    c2ee:	60                   	pusha  
    c2ef:	06                   	push   %es
    c2f0:	1e                   	push   %ds
    c2f1:	8c c8                	mov    %cs,%eax
    c2f3:	8e d8                	mov    %eax,%ds
    c2f5:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    c2fa:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
    c2ff:	00 f7                	add    %dh,%bh
    c301:	e3 89                	jecxz  c28c <input_and_readc+0x20>
    c303:	c7                   	(bad)  
    c304:	b8 fe c1 26 89       	mov    $0x8926c1fe,%eax
    c309:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    c30e:	45                   	inc    %ebp
    c30f:	02 1f                	add    (%edi),%bl
    c311:	07                   	pop    %es
    c312:	61                   	popa   
    c313:	60                   	pusha  
    c314:	06                   	push   %es
    c315:	1e                   	push   %ds
    c316:	8c c8                	mov    %cs,%eax
    c318:	8e d8                	mov    %eax,%ds
    c31a:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    c31f:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
    c324:	00 f7                	add    %dh,%bh
    c326:	e3 89                	jecxz  c2b1 <ouch+0x1a>
    c328:	c7                   	(bad)  
    c329:	b8 00 c1 26 89       	mov    $0x8926c100,%eax
    c32e:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    c333:	45                   	inc    %ebp
    c334:	02 1f                	add    (%edi),%bl
    c336:	07                   	pop    %es
    c337:	61                   	popa   
    c338:	60                   	pusha  
    c339:	06                   	push   %es
    c33a:	1e                   	push   %ds
    c33b:	8c c8                	mov    %cs,%eax
    c33d:	8e d8                	mov    %eax,%ds
    c33f:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    c344:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
    c349:	00 f7                	add    %dh,%bh
    c34b:	e3 89                	jecxz  c2d6 <ouch+0x3f>
    c34d:	c7                   	(bad)  
    c34e:	b8 0d c1 26 89       	mov    $0x8926c10d,%eax
    c353:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    c358:	45                   	inc    %ebp
    c359:	02 1f                	add    (%edi),%bl
    c35b:	07                   	pop    %es
    c35c:	61                   	popa   
    c35d:	60                   	pusha  
    c35e:	06                   	push   %es
    c35f:	1e                   	push   %ds
    c360:	8c c8                	mov    %cs,%eax
    c362:	8e d8                	mov    %eax,%ds
    c364:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    c369:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
    c36e:	00 f7                	add    %dh,%bh
    c370:	e3 89                	jecxz  c2fb <_initialInt+0x11>
    c372:	c7                   	(bad)  
    c373:	b8 dd c1 26 89       	mov    $0x8926c1dd,%eax
    c378:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    c37d:	45                   	inc    %ebp
    c37e:	02 1f                	add    (%edi),%bl
    c380:	07                   	pop    %es
    c381:	61                   	popa   
    c382:	60                   	pusha  
    c383:	06                   	push   %es
    c384:	1e                   	push   %ds
    c385:	8c c8                	mov    %cs,%eax
    c387:	8e d8                	mov    %eax,%ds
    c389:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    c38e:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
    c393:	00 f7                	add    %dh,%bh
    c395:	e3 89                	jecxz  c320 <_initialInt+0x36>
    c397:	c7                   	(bad)  
    c398:	b8 f0 c1 26 89       	mov    $0x8926c1f0,%eax
    c39d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    c3a2:	45                   	inc    %ebp
    c3a3:	02 1f                	add    (%edi),%bl
    c3a5:	07                   	pop    %es
    c3a6:	61                   	popa   
    c3a7:	c9                   	leave  
    c3a8:	66 5a                	pop    %dx
    c3aa:	ff e2                	jmp    *%edx

0000c3ac <_initialInt_09h>:
    c3ac:	c8 00 00 00          	enter  $0x0,$0x0
    c3b0:	a1 24 00 a3 32       	mov    0x32a30024,%eax
    c3b5:	c0 a1 26 00 a3 34 c0 	shlb   $0xc0,0x34a30026(%ecx)
    c3bc:	60                   	pusha  
    c3bd:	06                   	push   %es
    c3be:	1e                   	push   %ds
    c3bf:	8c c8                	mov    %cs,%eax
    c3c1:	8e d8                	mov    %eax,%ds
    c3c3:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    c3c8:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
    c3cd:	00 f7                	add    %dh,%bh
    c3cf:	e3 89                	jecxz  c35a <_initialInt+0x70>
    c3d1:	c7                   	(bad)  
    c3d2:	b8 6f c1 26 89       	mov    $0x8926c16f,%eax
    c3d7:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    c3dc:	45                   	inc    %ebp
    c3dd:	02 1f                	add    (%edi),%bl
    c3df:	07                   	pop    %es
    c3e0:	61                   	popa   
    c3e1:	c9                   	leave  
    c3e2:	66 5a                	pop    %dx
    c3e4:	ff e2                	jmp    *%edx

0000c3e6 <_test>:
    c3e6:	60                   	pusha  
    c3e7:	50                   	push   %eax
    c3e8:	53                   	push   %ebx
    c3e9:	51                   	push   %ecx
    c3ea:	52                   	push   %edx
    c3eb:	0f a8                	push   %gs
    c3ed:	a1 29 c0 50 6a       	mov    0x6a50c029,%eax
    c3f2:	00 ff                	add    %bh,%bh
    c3f4:	06                   	push   %es
    c3f5:	29 c0                	sub    %eax,%eax
    c3f7:	a1 2b c0 50 6a       	mov    0x6a50c02b,%eax
    c3fc:	00 ff                	add    %bh,%bh
    c3fe:	06                   	push   %es
    c3ff:	2b c0                	sub    %eax,%eax
    c401:	e8 0e 00 66 58       	call   5866c414 <_end+0x5865ed2c>
    c406:	58                   	pop    %eax
    c407:	0f a9                	pop    %gs
    c409:	5a                   	pop    %edx
    c40a:	59                   	pop    %ecx
    c40b:	5b                   	pop    %ebx
    c40c:	58                   	pop    %eax
    c40d:	61                   	popa   
    c40e:	66 5a                	pop    %dx
    c410:	ff e2                	jmp    *%edx

0000c412 <printcircle>:
#include "use.h"
void printcircle(char alpha){
    c412:	66 55                	push   %bp
    c414:	66 89 e5             	mov    %sp,%bp
    c417:	66 83 ec 0c          	sub    $0xc,%sp
    c41b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    c420:	67 88 45 f4          	mov    %al,-0xc(%di)
    int pos = (80 * 15 + 20)*2;
    c424:	67 66 c7 45 fc 88 09 	movw   $0x988,-0x4(%di)
    c42b:	00 00                	add    %al,(%eax)
    int color = 3;
    c42d:	67 66 c7 45 f8 03 00 	movw   $0x3,-0x8(%di)
    c434:	00 00                	add    %al,(%eax)
	_printchar(alpha,pos,color);
    c436:	67 66 0f be 45 f4    	movsbw -0xc(%di),%ax
    c43c:	67 66 ff 75 f8       	pushw  -0x8(%di)
    c441:	67 66 ff 75 fc       	pushw  -0x4(%di)
    c446:	66 50                	push   %ax
    c448:	66 e8 f2 fb          	callw  c03e <_clearscreen+0x7>
    c44c:	ff                   	(bad)  
    c44d:	ff 66 83             	jmp    *-0x7d(%esi)
    c450:	c4 0c 90             	les    (%eax,%edx,4),%ecx
    return;
}
    c453:	66 c9                	leavew 
    c455:	66 c3                	retw   

0000c457 <showline>:
void showline(){
    c457:	66 55                	push   %bp
    c459:	66 89 e5             	mov    %sp,%bp
    c45c:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
    c460:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
    c465:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
    c46a:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
    c46f:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
    c474:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
    c479:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
    c47e:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
    c483:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    c48a:	00 00                	add    %al,(%eax)
    int i = 0;
    c48c:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    c493:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
    c495:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    c49c:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
    c49e:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    c4a5:	00 00                	add    %al,(%eax)
    c4a7:	eb 52                	jmp    c4fb <showline+0xa4>
        pos = (80 * i + i) * 2;
    c4a9:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    c4ae:	66 89 d0             	mov    %dx,%ax
    c4b1:	66 c1 e0 03          	shl    $0x3,%ax
    c4b5:	66 01 d0             	add    %dx,%ax
    c4b8:	67 66 8d 14          	lea    (%si),%dx
    c4bc:	c5 00                	lds    (%eax),%eax
    c4be:	00 00                	add    %al,(%eax)
    c4c0:	00 66 01             	add    %ah,0x1(%esi)
    c4c3:	d0 66 01             	shlb   0x1(%esi)
    c4c6:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
    c4ca:	45                   	inc    %ebp
    c4cb:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
    c4d1:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    c4d6:	66 01 d0             	add    %dx,%ax
    c4d9:	67 8a 00             	mov    (%bx,%si),%al
    c4dc:	66 0f be c0          	movsbw %al,%ax
    c4e0:	67 66 ff 75 f4       	pushw  -0xc(%di)
    c4e5:	67 66 ff 75 f0       	pushw  -0x10(%di)
    c4ea:	66 50                	push   %ax
    c4ec:	66 e8 4e fb          	callw  c03e <_clearscreen+0x7>
    c4f0:	ff                   	(bad)  
    c4f1:	ff 66 83             	jmp    *-0x7d(%esi)
    c4f4:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
    c4f7:	66 ff 45 fc          	incw   -0x4(%ebp)
    c4fb:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
    c501:	7e a6                	jle    c4a9 <showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
    c503:	66 c9                	leavew 
    c505:	66 c3                	retw   

0000c507 <printpos>:
void printpos(char const* Messeage,int row,int colume){//need the pos
    c507:	66 55                	push   %bp
    c509:	66 89 e5             	mov    %sp,%bp
    c50c:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    c510:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    c515:	66 89 d0             	mov    %dx,%ax
    c518:	66 c1 e0 02          	shl    $0x2,%ax
    c51c:	66 01 d0             	add    %dx,%ax
    c51f:	66 c1 e0 04          	shl    $0x4,%ax
    c523:	66 89 c2             	mov    %ax,%dx
    c526:	67 66 8b 45 10       	mov    0x10(%di),%ax
    c52b:	66 01 d0             	add    %dx,%ax
    c52e:	66 01 c0             	add    %ax,%ax
    c531:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    c536:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    c53d:	00 00                	add    %al,(%eax)
	int index = 0;
    c53f:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    c546:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    c548:	eb 35                	jmp    c57f <printpos+0x78>
		_printchar(Messeage[index],pos,color);
    c54a:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    c54f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    c554:	66 01 d0             	add    %dx,%ax
    c557:	67 8a 00             	mov    (%bx,%si),%al
    c55a:	66 0f be c0          	movsbw %al,%ax
    c55e:	67 66 ff 75 f4       	pushw  -0xc(%di)
    c563:	67 66 ff 75 fc       	pushw  -0x4(%di)
    c568:	66 50                	push   %ax
    c56a:	66 e8 d0 fa          	callw  c03e <_clearscreen+0x7>
    c56e:	ff                   	(bad)  
    c56f:	ff 66 83             	jmp    *-0x7d(%esi)
    c572:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    c575:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    c579:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
}
void printpos(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    c57f:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    c584:	67 66 8b 45 08       	mov    0x8(%di),%ax
    c589:	66 01 d0             	add    %dx,%ax
    c58c:	67 8a 00             	mov    (%bx,%si),%al
    c58f:	84 c0                	test   %al,%al
    c591:	75 b7                	jne    c54a <printpos+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    c593:	90                   	nop
}
    c594:	66 c9                	leavew 
    c596:	66 c3                	retw   

0000c598 <printname>:
void printname(){
    c598:	66 55                	push   %bp
    c59a:	66 89 e5             	mov    %sp,%bp
    c59d:	66 83 ec 04          	sub    $0x4,%sp
    char const* Messeage = "chenhy";
    c5a1:	67 66 c7 45 fc 20 c6 	movw   $0xc620,-0x4(%di)
    c5a8:	00 00                	add    %al,(%eax)
    printpos(Messeage,15,10);
    c5aa:	66 6a 0a             	pushw  $0xa
    c5ad:	66 6a 0f             	pushw  $0xf
    c5b0:	67 66 ff 75 fc       	pushw  -0x4(%di)
    c5b5:	66 e8 4c ff          	callw  c505 <showline+0xae>
    c5b9:	ff                   	(bad)  
    c5ba:	ff 66 83             	jmp    *-0x7d(%esi)
    c5bd:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    c5c0:	c9                   	leave  
    c5c1:	66 c3                	retw   

0000c5c3 <upper>:
char* upper(char *Messeage){
    c5c3:	66 55                	push   %bp
    c5c5:	66 89 e5             	mov    %sp,%bp
    c5c8:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    c5cc:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    c5d3:	00 00                	add    %al,(%eax)
    while(Messeage[i] >= 'a' && Messeage <= 'z'){
    c5d5:	eb 24                	jmp    c5fb <upper+0x38>
        Messeage[i] = Messeage[i] + 'A' - 'a';
    c5d7:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    c5dc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    c5e1:	66 01 c2             	add    %ax,%dx
    c5e4:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    c5e9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    c5ee:	66 01 c8             	add    %cx,%ax
    c5f1:	67 8a 00             	mov    (%bx,%si),%al
    c5f4:	66 83 e8 20          	sub    $0x20,%ax
    c5f8:	67 88 02             	mov    %al,(%bp,%si)
    char const* Messeage = "chenhy";
    printpos(Messeage,15,10);
}
char* upper(char *Messeage){
    int i = 0;
    while(Messeage[i] >= 'a' && Messeage <= 'z'){
    c5fb:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    c600:	67 66 8b 45 08       	mov    0x8(%di),%ax
    c605:	66 01 d0             	add    %dx,%ax
    c608:	67 8a 00             	mov    (%bx,%si),%al
    c60b:	3c 60                	cmp    $0x60,%al
    c60d:	7e 08                	jle    c617 <upper+0x54>
    c60f:	67 66 83 7d 08 7a    	cmpw   $0x7a,0x8(%di)
    c615:	76 c0                	jbe    c5d7 <upper+0x14>
        Messeage[i] = Messeage[i] + 'A' - 'a';
    }
    return Messeage;
    c617:	67 66 8b 45 08       	mov    0x8(%di),%ax
}
    c61c:	66 c9                	leavew 
    c61e:	66 c3                	retw   
