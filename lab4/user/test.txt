
test.elf:     file format elf32-i386


Disassembly of section .text:

0000c000 <test>:
    c000:	8c c8                	mov    %cs,%eax
    c002:	8e d8                	mov    %eax,%ds
    c004:	8e d0                	mov    %eax,%ss
    c006:	b8 00 01 89 c4       	mov    $0xc4890100,%eax
    c00b:	31 c0                	xor    %eax,%eax
    c00d:	cd 33                	int    $0x33
    c00f:	cd 34                	int    $0x34
    c011:	eb fe                	jmp    c011 <test+0x11>
    c013:	66 90                	xchg   %ax,%ax
    c015:	66 90                	xchg   %ax,%ax
    c017:	66 90                	xchg   %ax,%ax
    c019:	66 90                	xchg   %ax,%ax
    c01b:	66 90                	xchg   %ax,%ax
    c01d:	66 90                	xchg   %ax,%ax
    c01f:	90                   	nop

0000c020 <Pg_Segment>:
	...

0000c022 <Pg_Offset>:
    c022:	00 c0                	add    %al,%al

0000c024 <info_Segment>:
	...

0000c026 <info_Offset>:
    c026:	00 b1 08 00 00 00    	add    %dh,0x8(%ecx)

0000c028 <count>:
    c028:	08 00                	or     %al,(%eax)

0000c029 <x>:
	...

0000c02b <y>:
	...

0000c02d <xdul>:
    c02d:	01 00                	add    %eax,(%eax)

0000c02f <ydul>:
    c02f:	01 00                	add    %eax,(%eax)

0000c031 <alpha>:
    c031:	2d 00 c8 00 00       	sub    $0xc800,%eax

0000c033 <_clearscreen>:
    c033:	c8 00 00 00          	enter  $0x0,$0x0
    c037:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    c03c:	c9                   	leave  
    c03d:	66 5a                	pop    %dx
    c03f:	ff e2                	jmp    *%edx

0000c041 <_printchar>:
    c041:	c8 00 00 00          	enter  $0x0,$0x0
    c045:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
    c04a:	57                   	push   %edi
    c04b:	66 8b 4e 06          	mov    0x6(%esi),%cx
    c04f:	66 8b 7e 0a          	mov    0xa(%esi),%di
    c053:	66 8b 56 0e          	mov    0xe(%esi),%dx
    c057:	88 d5                	mov    %dl,%ch
    c059:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
    c060:	00 66 5a             	add    %ah,0x5a(%esi)
    c063:	ff e2                	jmp    *%edx

0000c065 <_readinput>:
    c065:	c8 04 00 00          	enter  $0x4,$0x0
    c069:	b4 00                	mov    $0x0,%ah
    c06b:	cd 16                	int    $0x16
    c06d:	b4 00                	mov    $0x0,%ah
    c06f:	66 67 89 04          	mov    %ax,(%si)
    c073:	24 66                	and    $0x66,%al
    c075:	67 8b 04             	mov    (%si),%eax
    c078:	24 c9                	and    $0xc9,%al
    c07a:	66 5a                	pop    %dx
    c07c:	ff e2                	jmp    *%edx

0000c07e <_showchar>:
    c07e:	c8 00 00 00          	enter  $0x0,$0x0
    c082:	8b 46 06             	mov    0x6(%esi),%eax
    c085:	b4 0e                	mov    $0xe,%ah
    c087:	b3 00                	mov    $0x0,%bl
    c089:	cd 10                	int    $0x10
    c08b:	c9                   	leave  
    c08c:	66 5a                	pop    %dx
    c08e:	ff e2                	jmp    *%edx

0000c090 <_setPoint>:
    c090:	c8 00 00 00          	enter  $0x0,$0x0
    c094:	53                   	push   %ebx
    c095:	b7 00                	mov    $0x0,%bh
    c097:	8a 77 06             	mov    0x6(%edi),%dh
    c09a:	8a 57 0a             	mov    0xa(%edi),%dl
    c09d:	b4 02                	mov    $0x2,%ah
    c09f:	cd 10                	int    $0x10
    c0a1:	5b                   	pop    %ebx
    c0a2:	c9                   	leave  
    c0a3:	66 5a                	pop    %dx
    c0a5:	ff e2                	jmp    *%edx

0000c0a7 <_loadP>:
    c0a7:	c8 00 00 00          	enter  $0x0,$0x0
    c0ab:	60                   	pusha  
    c0ac:	06                   	push   %es
    c0ad:	1e                   	push   %ds
    c0ae:	52                   	push   %edx
    c0af:	8c c8                	mov    %cs,%eax
    c0b1:	8e d8                	mov    %eax,%ds
    c0b3:	8e c0                	mov    %eax,%es
    c0b5:	b2 00                	mov    $0x0,%dl
    c0b7:	8b 46 0a             	mov    0xa(%esi),%eax
    c0ba:	b3 12                	mov    $0x12,%bl
    c0bc:	f6 f3                	div    %bl
    c0be:	88 e1                	mov    %ah,%cl
    c0c0:	30 e4                	xor    %ah,%ah
    c0c2:	b3 02                	mov    $0x2,%bl
    c0c4:	f6 f3                	div    %bl
    c0c6:	88 e6                	mov    %ah,%dh
    c0c8:	88 c5                	mov    %al,%ch
    c0ca:	8a 46 06             	mov    0x6(%esi),%al
    c0cd:	8b 5e 0e             	mov    0xe(%esi),%ebx
    c0d0:	b4 02                	mov    $0x2,%ah
    c0d2:	cd 13                	int    $0x13
    c0d4:	5a                   	pop    %edx
    c0d5:	1f                   	pop    %ds
    c0d6:	07                   	pop    %es
    c0d7:	61                   	popa   
    c0d8:	c9                   	leave  
    c0d9:	66 5a                	pop    %dx
    c0db:	ff e2                	jmp    *%edx

0000c0dd <_RunProgress>:
    c0dd:	c8 00 00 00          	enter  $0x0,$0x0
    c0e1:	06                   	push   %es
    c0e2:	60                   	pusha  
    c0e3:	06                   	push   %es
    c0e4:	8c c8                	mov    %cs,%eax
    c0e6:	8e d8                	mov    %eax,%ds
    c0e8:	8e c0                	mov    %eax,%es
    c0ea:	8b 5e 06             	mov    0x6(%esi),%ebx
    c0ed:	ff d3                	call   *%ebx
    c0ef:	07                   	pop    %es
    c0f0:	61                   	popa   

0000c0f1 <S>:
    c0f1:	b4 00                	mov    $0x0,%ah
    c0f3:	cd 16                	int    $0x16
    c0f5:	07                   	pop    %es
    c0f6:	c9                   	leave  
    c0f7:	66 5a                	pop    %dx
    c0f9:	ff e2                	jmp    *%edx

0000c0fb <_SetINT20h>:
    c0fb:	53                   	push   %ebx
    c0fc:	51                   	push   %ecx
    c0fd:	52                   	push   %edx
    c0fe:	b4 01                	mov    $0x1,%ah
    c100:	cd 16                	int    $0x16
    c102:	5a                   	pop    %edx
    c103:	59                   	pop    %ecx
    c104:	5b                   	pop    %ebx
    c105:	75 ea                	jne    c0f1 <S>
    c107:	cf                   	iret   

0000c108 <_SetINT08h>:
    c108:	60                   	pusha  
    c109:	52                   	push   %edx
    c10a:	0f a8                	push   %gs
    c10c:	fe 0e                	decb   (%esi)
    c10e:	28 c0                	sub    %al,%al
    c110:	75 4b                	jne    c15d <end>

0000c112 <notc>:
    c112:	83 3e 31             	cmpl   $0x31,(%esi)
    c115:	c0 2d 75 08 c7 06 31 	shrb   $0x31,0x6c70875
    c11c:	c0 5c 00 eb 2d       	rcrb   $0x2d,-0x15(%eax,%eax,1)

0000c121 <changleft>:
    c121:	83 3e 31             	cmpl   $0x31,(%esi)
    c124:	c0 5c 75 08 c7       	rcrb   $0xc7,0x8(%ebp,%esi,2)
    c129:	06                   	push   %es
    c12a:	31 c0                	xor    %eax,%eax
    c12c:	7c 00                	jl     c12e <changleft+0xd>
    c12e:	eb 1e                	jmp    c14e <show>

0000c130 <changright>:
    c130:	83 3e 31             	cmpl   $0x31,(%esi)
    c133:	c0 7c 75 08 c7       	sarb   $0xc7,0x8(%ebp,%esi,2)
    c138:	06                   	push   %es
    c139:	31 c0                	xor    %eax,%eax
    c13b:	2f                   	das    
    c13c:	00 eb                	add    %ch,%bl
    c13e:	0f 83 3e 31 c0 2f    	jae    2fc0f282 <__bss_start+0x2fc01e0a>

0000c13f <changheng>:
    c13f:	83 3e 31             	cmpl   $0x31,(%esi)
    c142:	c0 2f 75             	shrb   $0x75,(%edi)
    c145:	cc                   	int3   
    c146:	c7 06 31 c0 2d 00    	movl   $0x2dc031,(%esi)
    c14c:	eb 00                	jmp    c14e <show>

0000c14e <show>:
    c14e:	ff 36                	pushl  (%esi)
    c150:	31 c0                	xor    %eax,%eax
    c152:	6a 00                	push   $0x0
    c154:	e8 fc 00 58 c6       	call   c658c255 <__bss_start+0xc657eddd>
    c159:	06                   	push   %es
    c15a:	28 c0                	sub    %al,%al
    c15c:	08 b0 20 e6 20 e6    	or     %dh,-0x19df19e0(%eax)

0000c15d <end>:
    c15d:	b0 20                	mov    $0x20,%al
    c15f:	e6 20                	out    %al,$0x20
    c161:	e6 a0                	out    %al,$0xa0
    c163:	0f a9                	pop    %gs
    c165:	5a                   	pop    %edx
    c166:	61                   	popa   
    c167:	cf                   	iret   

0000c168 <_SetINT33h>:
    c168:	60                   	pusha  
    c169:	1e                   	push   %ds
    c16a:	0f a8                	push   %gs
    c16c:	6a 00                	push   $0x0
    c16e:	e8 27 01 0f a9       	call   a90fc29a <__bss_start+0xa90eee22>
    c173:	1f                   	pop    %ds
    c174:	61                   	popa   
    c175:	b0 20                	mov    $0x20,%al
    c177:	e6 20                	out    %al,$0x20
    c179:	e6 a0                	out    %al,$0xa0
    c17b:	cf                   	iret   

0000c17c <_SetINT34h>:
    c17c:	60                   	pusha  
    c17d:	1e                   	push   %ds
    c17e:	0f a8                	push   %gs
    c180:	6a 00                	push   $0x0
    c182:	e8 28 02 0f a9       	call   a90fc3af <__bss_start+0xa90eef37>
    c187:	1f                   	pop    %ds
    c188:	61                   	popa   
    c189:	cf                   	iret   

0000c18a <_initialInt>:
    c18a:	c8 00 00 00          	enter  $0x0,$0x0
    c18e:	60                   	pusha  
    c18f:	06                   	push   %es
    c190:	1e                   	push   %ds
    c191:	8c c8                	mov    %cs,%eax
    c193:	8e d8                	mov    %eax,%ds
    c195:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    c19a:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
    c19f:	00 f7                	add    %dh,%bh
    c1a1:	e3 89                	jecxz  c12c <changleft+0xb>
    c1a3:	c7                   	(bad)  
    c1a4:	b8 fb c0 26 89       	mov    $0x8926c0fb,%eax
    c1a9:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    c1ae:	45                   	inc    %ebp
    c1af:	02 1f                	add    (%edi),%bl
    c1b1:	07                   	pop    %es
    c1b2:	61                   	popa   
    c1b3:	60                   	pusha  
    c1b4:	06                   	push   %es
    c1b5:	1e                   	push   %ds
    c1b6:	8c c8                	mov    %cs,%eax
    c1b8:	8e d8                	mov    %eax,%ds
    c1ba:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    c1bf:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
    c1c4:	00 f7                	add    %dh,%bh
    c1c6:	e3 89                	jecxz  c151 <show+0x3>
    c1c8:	c7                   	(bad)  
    c1c9:	b8 08 c1 26 89       	mov    $0x8926c108,%eax
    c1ce:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    c1d3:	45                   	inc    %ebp
    c1d4:	02 1f                	add    (%edi),%bl
    c1d6:	07                   	pop    %es
    c1d7:	61                   	popa   
    c1d8:	60                   	pusha  
    c1d9:	06                   	push   %es
    c1da:	1e                   	push   %ds
    c1db:	8c c8                	mov    %cs,%eax
    c1dd:	8e d8                	mov    %eax,%ds
    c1df:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    c1e4:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
    c1e9:	00 f7                	add    %dh,%bh
    c1eb:	e3 89                	jecxz  c176 <_SetINT33h+0xe>
    c1ed:	c7                   	(bad)  
    c1ee:	b8 68 c1 26 89       	mov    $0x8926c168,%eax
    c1f3:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    c1f8:	45                   	inc    %ebp
    c1f9:	02 1f                	add    (%edi),%bl
    c1fb:	07                   	pop    %es
    c1fc:	61                   	popa   
    c1fd:	60                   	pusha  
    c1fe:	06                   	push   %es
    c1ff:	1e                   	push   %ds
    c200:	8c c8                	mov    %cs,%eax
    c202:	8e d8                	mov    %eax,%ds
    c204:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    c209:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
    c20e:	00 f7                	add    %dh,%bh
    c210:	e3 89                	jecxz  c19b <_initialInt+0x11>
    c212:	c7                   	(bad)  
    c213:	b8 7c c1 26 89       	mov    $0x8926c17c,%eax
    c218:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    c21d:	45                   	inc    %ebp
    c21e:	02 1f                	add    (%edi),%bl
    c220:	07                   	pop    %es
    c221:	61                   	popa   
    c222:	c9                   	leave  
    c223:	66 5a                	pop    %dx
    c225:	ff e2                	jmp    *%edx

0000c227 <_test>:
    c227:	60                   	pusha  
    c228:	50                   	push   %eax
    c229:	53                   	push   %ebx
    c22a:	51                   	push   %ecx
    c22b:	52                   	push   %edx
    c22c:	0f a8                	push   %gs
    c22e:	a1 29 c0 50 6a       	mov    0x6a50c029,%eax
    c233:	00 ff                	add    %bh,%bh
    c235:	06                   	push   %es
    c236:	29 c0                	sub    %eax,%eax
    c238:	a1 2b c0 50 6a       	mov    0x6a50c02b,%eax
    c23d:	00 ff                	add    %bh,%bh
    c23f:	06                   	push   %es
    c240:	2b c0                	sub    %eax,%eax
    c242:	e8 0e 00 66 58       	call   5866c255 <__bss_start+0x5865eddd>
    c247:	58                   	pop    %eax
    c248:	0f a9                	pop    %gs
    c24a:	5a                   	pop    %edx
    c24b:	59                   	pop    %ecx
    c24c:	5b                   	pop    %ebx
    c24d:	58                   	pop    %eax
    c24e:	61                   	popa   
    c24f:	66 5a                	pop    %dx
    c251:	ff e2                	jmp    *%edx

0000c253 <printcircle>:
#include "use.h"
void printcircle(char alpha){
    c253:	66 55                	push   %bp
    c255:	66 89 e5             	mov    %sp,%bp
    c258:	66 83 ec 0c          	sub    $0xc,%sp
    c25c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    c261:	67 88 45 f4          	mov    %al,-0xc(%di)
    int pos = (80 * 15 + 20)*2;
    c265:	67 66 c7 45 fc 88 09 	movw   $0x988,-0x4(%di)
    c26c:	00 00                	add    %al,(%eax)
    int color = 3;
    c26e:	67 66 c7 45 f8 03 00 	movw   $0x3,-0x8(%di)
    c275:	00 00                	add    %al,(%eax)
	_printchar(alpha,pos,color);
    c277:	67 66 0f be 45 f4    	movsbw -0xc(%di),%ax
    c27d:	67 66 ff 75 f8       	pushw  -0x8(%di)
    c282:	67 66 ff 75 fc       	pushw  -0x4(%di)
    c287:	66 50                	push   %ax
    c289:	66 e8 b2 fd          	callw  c03f <_clearscreen+0xc>
    c28d:	ff                   	(bad)  
    c28e:	ff 66 83             	jmp    *-0x7d(%esi)
    c291:	c4 0c 90             	les    (%eax,%edx,4),%ecx
    return;
}
    c294:	66 c9                	leavew 
    c296:	66 c3                	retw   

0000c298 <showline>:
void showline(){
    c298:	66 55                	push   %bp
    c29a:	66 89 e5             	mov    %sp,%bp
    c29d:	66 83 ec 10          	sub    $0x10,%sp
    char alpha = 'a';
    c2a1:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    int color = 3;
    c2a6:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    c2ad:	00 00                	add    %al,(%eax)
    int i = 0;
    c2af:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    c2b6:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
    c2b8:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    c2bf:	00 00                	add    %al,(%eax)
    for(i = 0;i < 10;i ++){
    c2c1:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    c2c8:	00 00                	add    %al,(%eax)
    c2ca:	eb 44                	jmp    c310 <showline+0x78>
        pos = (80 * i + i) * 2;
    c2cc:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    c2d1:	66 89 d0             	mov    %dx,%ax
    c2d4:	66 c1 e0 03          	shl    $0x3,%ax
    c2d8:	66 01 d0             	add    %dx,%ax
    c2db:	67 66 8d 14          	lea    (%si),%dx
    c2df:	c5 00                	lds    (%eax),%eax
    c2e1:	00 00                	add    %al,(%eax)
    c2e3:	00 66 01             	add    %ah,0x1(%esi)
    c2e6:	d0 66 01             	shlb   0x1(%esi)
    c2e9:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
    c2ed:	45                   	inc    %ebp
    c2ee:	f0 67 66 0f be 45 fb 	lock movsbw -0x5(%di),%ax
        _printchar(alpha,pos,color);
    c2f5:	67 66 ff 75 f4       	pushw  -0xc(%di)
    c2fa:	67 66 ff 75 f0       	pushw  -0x10(%di)
    c2ff:	66 50                	push   %ax
    c301:	66 e8 3a fd          	callw  c03f <_clearscreen+0xc>
    c305:	ff                   	(bad)  
    c306:	ff 66 83             	jmp    *-0x7d(%esi)
    c309:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
void showline(){
    char alpha = 'a';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 10;i ++){
    c30c:	66 ff 45 fc          	incw   -0x4(%ebp)
    c310:	67 66 83 7d fc 09    	cmpw   $0x9,-0x4(%di)
    c316:	7e b4                	jle    c2cc <showline+0x34>
        pos = (80 * i + i) * 2;
        _printchar(alpha,pos,color);
    }
}
    c318:	66 c9                	leavew 
    c31a:	66 c3                	retw   

0000c31c <printpos>:
void printpos(char const* Messeage,int row,int colume){//need the pos
    c31c:	66 55                	push   %bp
    c31e:	66 89 e5             	mov    %sp,%bp
    c321:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    c325:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    c32a:	66 89 d0             	mov    %dx,%ax
    c32d:	66 c1 e0 02          	shl    $0x2,%ax
    c331:	66 01 d0             	add    %dx,%ax
    c334:	66 c1 e0 04          	shl    $0x4,%ax
    c338:	66 89 c2             	mov    %ax,%dx
    c33b:	67 66 8b 45 10       	mov    0x10(%di),%ax
    c340:	66 01 d0             	add    %dx,%ax
    c343:	66 01 c0             	add    %ax,%ax
    c346:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    c34b:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    c352:	00 00                	add    %al,(%eax)
	int index = 0;
    c354:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    c35b:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    c35d:	eb 35                	jmp    c394 <printpos+0x78>
		_printchar(Messeage[index],pos,color);
    c35f:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    c364:	67 66 8b 45 08       	mov    0x8(%di),%ax
    c369:	66 01 d0             	add    %dx,%ax
    c36c:	67 8a 00             	mov    (%bx,%si),%al
    c36f:	66 0f be c0          	movsbw %al,%ax
    c373:	67 66 ff 75 f4       	pushw  -0xc(%di)
    c378:	67 66 ff 75 fc       	pushw  -0x4(%di)
    c37d:	66 50                	push   %ax
    c37f:	66 e8 bc fc          	callw  c03f <_clearscreen+0xc>
    c383:	ff                   	(bad)  
    c384:	ff 66 83             	jmp    *-0x7d(%esi)
    c387:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    c38a:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    c38e:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
}
void printpos(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    c394:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    c399:	67 66 8b 45 08       	mov    0x8(%di),%ax
    c39e:	66 01 d0             	add    %dx,%ax
    c3a1:	67 8a 00             	mov    (%bx,%si),%al
    c3a4:	84 c0                	test   %al,%al
    c3a6:	75 b7                	jne    c35f <printpos+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    c3a8:	90                   	nop
}
    c3a9:	66 c9                	leavew 
    c3ab:	66 c3                	retw   

0000c3ad <printname>:
void printname(){
    c3ad:	66 55                	push   %bp
    c3af:	66 89 e5             	mov    %sp,%bp
    c3b2:	66 83 ec 04          	sub    $0x4,%sp
    char const* Message = "chenhy";
    c3b6:	67 66 c7 45 fc d8 c3 	movw   $0xc3d8,-0x4(%di)
    c3bd:	00 00                	add    %al,(%eax)
    printpos(Message,15,10);
    c3bf:	66 6a 0a             	pushw  $0xa
    c3c2:	66 6a 0f             	pushw  $0xf
    c3c5:	67 66 ff 75 fc       	pushw  -0x4(%di)
    c3ca:	66 e8 4c ff          	callw  c31a <showline+0x82>
    c3ce:	ff                   	(bad)  
    c3cf:	ff 66 83             	jmp    *-0x7d(%esi)
    c3d2:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    c3d5:	c9                   	leave  
    c3d6:	66 c3                	retw   
