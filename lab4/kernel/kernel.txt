
kernel.elf:     file format elf32-i386


Disassembly of section .text:

00007d00 <_start>:
    7d00:	66 b8 00 00          	mov    $0x0,%ax
    7d04:	00 00                	add    %al,(%eax)
    7d06:	8e d8                	mov    %eax,%ds
    7d08:	8e c0                	mov    %eax,%es
    7d0a:	66 ea 12 7d 00 00    	ljmpw  $0x0,$0x7d12
	...

00007d12 <main>:
#include"../syscall/use.h"
#include"../shell/command.h"
#include"kernel.h"
int main(){
    7d12:	66 55                	push   %bp
    7d14:	66 89 e5             	mov    %sp,%bp
    7d17:	66 83 ec 0c          	sub    $0xc,%sp
     Initial_Int();
    7d1b:	66 e8 d5 04          	callw  81f4 <strcpy+0x7a>
    7d1f:	00 00                	add    %al,(%eax)
    clearscreen();
    7d21:	66 e8 d4 00          	callw  7df9 <main+0xe7>
    7d25:	00 00                	add    %al,(%eax)
   // _loadP(4,23,0xC000);
     _loadP(4,21,0xC000);
    7d27:	66 68 00 c0          	pushw  $0xc000
    7d2b:	00 00                	add    %al,(%eax)
    7d2d:	66 6a 15             	pushw  $0x15
    7d30:	66 6a 04             	pushw  $0x4
    7d33:	66 e8 59 05          	callw  8290 <_setPoint+0x15>
    7d37:	00 00                	add    %al,(%eax)
    7d39:	66 83 c4 0c          	add    $0xc,%sp
     _RunProgress(0xC000);
    7d3d:	66 68 00 c0          	pushw  $0xc000
    7d41:	00 00                	add    %al,(%eax)
    7d43:	66 e8 7f 05          	callw  82c6 <_loadP+0x34>
    7d47:	00 00                	add    %al,(%eax)
    7d49:	66 83 c4 04          	add    $0x4,%sp
    char const *Messeage = "Built by Chen Hongyang on March 20, 2018";
    7d4d:	67 66 c7 45 fc f0 8c 	movw   $0x8cf0,-0x4(%di)
    7d54:	00 00                	add    %al,(%eax)
    print("===================================================",9,12);
    7d56:	66 6a 0c             	pushw  $0xc
    7d59:	66 6a 09             	pushw  $0x9
    7d5c:	66 68 1c 8d          	pushw  $0x8d1c
    7d60:	00 00                	add    %al,(%eax)
    7d62:	66 e8 a3 00          	callw  7e09 <clearscreen+0xe>
    7d66:	00 00                	add    %al,(%eax)
    7d68:	66 83 c4 0c          	add    $0xc,%sp

    print("chenhyOS",10,32);
    7d6c:	66 6a 20             	pushw  $0x20
    7d6f:	66 6a 0a             	pushw  $0xa
    7d72:	66 68 50 8d          	pushw  $0x8d50
    7d76:	00 00                	add    %al,(%eax)
    7d78:	66 e8 8d 00          	callw  7e09 <clearscreen+0xe>
    7d7c:	00 00                	add    %al,(%eax)
    7d7e:	66 83 c4 0c          	add    $0xc,%sp
   print(Messeage,11,16); //print the msg
    7d82:	66 6a 10             	pushw  $0x10
    7d85:	66 6a 0b             	pushw  $0xb
    7d88:	67 66 ff 75 fc       	pushw  -0x4(%di)
    7d8d:	66 e8 78 00          	callw  7e09 <clearscreen+0xe>
    7d91:	00 00                	add    %al,(%eax)
    7d93:	66 83 c4 0c          	add    $0xc,%sp
   print("===================================================",12,12);
    7d97:	66 6a 0c             	pushw  $0xc
    7d9a:	66 6a 0c             	pushw  $0xc
    7d9d:	66 68 1c 8d          	pushw  $0x8d1c
    7da1:	00 00                	add    %al,(%eax)
    7da3:	66 e8 62 00          	callw  7e09 <clearscreen+0xe>
    7da7:	00 00                	add    %al,(%eax)
    7da9:	66 83 c4 0c          	add    $0xc,%sp
   

   clearscreen(); 
    7dad:	66 e8 48 00          	callw  7df9 <main+0xe7>
    7db1:	00 00                	add    %al,(%eax)
    char const *Msg1 = "Press any key to get help\n\r";
    7db3:	67 66 c7 45 f8 59 8d 	movw   $0x8d59,-0x8(%di)
    7dba:	00 00                	add    %al,(%eax)
   prints(Msg1);
    7dbc:	67 66 ff 75 f8       	pushw  -0x8(%di)
    7dc1:	66 e8 d5 00          	callw  7e9a <print+0x8f>
    7dc5:	00 00                	add    %al,(%eax)
    7dc7:	66 83 c4 04          	add    $0x4,%sp
   print("!",13,39);
    7dcb:	66 6a 27             	pushw  $0x27
    7dce:	66 6a 0d             	pushw  $0xd
    7dd1:	66 68 75 8d          	pushw  $0x8d75
    7dd5:	00 00                	add    %al,(%eax)
    7dd7:	66 e8 2e 00          	callw  7e09 <clearscreen+0xe>
    7ddb:	00 00                	add    %al,(%eax)
    7ddd:	66 83 c4 0c          	add    $0xc,%sp
   
   char a = waitforinput();  
    7de1:	66 e8 d1 02          	callw  80b6 <read_and_print_input+0x3a>
    7de5:	00 00                	add    %al,(%eax)
    7de7:	67 88 45 f7          	mov    %al,-0x9(%di)
    
    /*buildmap();还有待解决debug
    void *addr = (void*) 0xB100;
    _loadP(2,21,addr);
    showtable();*/
    terminal();
    7deb:	66 e8 ee 08          	callw  86dd <printname+0x29>
    7def:	00 00                	add    %al,(%eax)
    return 0;
    7df1:	66 b8 00 00          	mov    $0x0,%ax
    7df5:	00 00                	add    %al,(%eax)
    7df7:	66 c9                	leavew 
    7df9:	66 c3                	retw   

00007dfb <clearscreen>:
#include "use.h"
void clearscreen(){
    7dfb:	66 55                	push   %bp
    7dfd:	66 89 e5             	mov    %sp,%bp
	_clearscreen();//C调用汇编时会压入四个字节，必须考虑到这个，写出newret，是pop edx,而非 pop dx；
    7e00:	66 e8 1d 04          	callw  8221 <alpha>
    7e04:	00 00                	add    %al,(%eax)
	//__asm__("pop %ax");
	return ;
    7e06:	90                   	nop
}
    7e07:	66 5d                	pop    %bp
    7e09:	66 c3                	retw   

00007e0b <print>:
void print(char const* Messeage,int row,int colume){//need the pos
    7e0b:	66 55                	push   %bp
    7e0d:	66 89 e5             	mov    %sp,%bp
    7e10:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    7e14:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    7e19:	66 89 d0             	mov    %dx,%ax
    7e1c:	66 c1 e0 02          	shl    $0x2,%ax
    7e20:	66 01 d0             	add    %dx,%ax
    7e23:	66 c1 e0 04          	shl    $0x4,%ax
    7e27:	66 89 c2             	mov    %ax,%dx
    7e2a:	67 66 8b 45 10       	mov    0x10(%di),%ax
    7e2f:	66 01 d0             	add    %dx,%ax
    7e32:	66 01 c0             	add    %ax,%ax
    7e35:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    7e3a:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    7e41:	00 00                	add    %al,(%eax)
	int index = 0;
    7e43:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    7e4a:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    7e4c:	eb 35                	jmp    7e83 <print+0x78>
		_printchar(Messeage[index],pos,color);
    7e4e:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    7e53:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7e58:	66 01 d0             	add    %dx,%ax
    7e5b:	67 8a 00             	mov    (%bx,%si),%al
    7e5e:	66 0f be c0          	movsbw %al,%ax
    7e62:	67 66 ff 75 f4       	pushw  -0xc(%di)
    7e67:	67 66 ff 75 fc       	pushw  -0x4(%di)
    7e6c:	66 50                	push   %ax
    7e6e:	66 e8 b8 03          	callw  822a <_clearscreen+0x7>
    7e72:	00 00                	add    %al,(%eax)
    7e74:	66 83 c4 0c          	add    $0xc,%sp
		index++;
    7e78:	67 66 ff 45 f8       	incw   -0x8(%di)
		pos = pos + 2;
    7e7d:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
}
void print(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    7e83:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    7e88:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7e8d:	66 01 d0             	add    %dx,%ax
    7e90:	67 8a 00             	mov    (%bx,%si),%al
    7e93:	84 c0                	test   %al,%al
    7e95:	75 b7                	jne    7e4e <print+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    7e97:	90                   	nop
}
    7e98:	66 c9                	leavew 
    7e9a:	66 c3                	retw   

00007e9c <prints>:
void prints(char const *Messeage){//can follow the position of your input
    7e9c:	66 55                	push   %bp
    7e9e:	66 89 e5             	mov    %sp,%bp
    7ea1:	66 83 ec 04          	sub    $0x4,%sp
	int index = 0;
    7ea5:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    7eac:	00 00                	add    %al,(%eax)
	while(Messeage[index]){
    7eae:	eb 25                	jmp    7ed5 <prints+0x39>
		_showchar(Messeage[index]);
    7eb0:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    7eb5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7eba:	66 01 d0             	add    %dx,%ax
    7ebd:	67 8a 00             	mov    (%bx,%si),%al
    7ec0:	66 0f be c0          	movsbw %al,%ax
    7ec4:	66 50                	push   %ax
    7ec6:	66 e8 9d 03          	callw  8267 <_readinput+0x17>
    7eca:	00 00                	add    %al,(%eax)
    7ecc:	66 83 c4 04          	add    $0x4,%sp
		index++;
    7ed0:	67 66 ff 45 fc       	incw   -0x4(%di)
	}
	return;
}
void prints(char const *Messeage){//can follow the position of your input
	int index = 0;
	while(Messeage[index]){
    7ed5:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    7eda:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7edf:	66 01 d0             	add    %dx,%ax
    7ee2:	67 8a 00             	mov    (%bx,%si),%al
    7ee5:	84 c0                	test   %al,%al
    7ee7:	75 c7                	jne    7eb0 <prints+0x14>
		_showchar(Messeage[index]);
		index++;
	}
	return;
    7ee9:	90                   	nop
}
    7eea:	66 c9                	leavew 
    7eec:	66 c3                	retw   

00007eee <printc>:
void printc(char alpha){
    7eee:	66 55                	push   %bp
    7ef0:	66 89 e5             	mov    %sp,%bp
    7ef3:	66 83 ec 04          	sub    $0x4,%sp
    7ef7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7efc:	67 88 45 fc          	mov    %al,-0x4(%di)
	_showchar(alpha);
    7f00:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    7f06:	66 50                	push   %ax
    7f08:	66 e8 5b 03          	callw  8267 <_readinput+0x17>
    7f0c:	00 00                	add    %al,(%eax)
    7f0e:	66 83 c4 04          	add    $0x4,%sp
	return;
    7f12:	90                   	nop
}
    7f13:	66 c9                	leavew 
    7f15:	66 c3                	retw   

00007f17 <printsint>:
void printsint(int num){
    7f17:	66 55                	push   %bp
    7f19:	66 89 e5             	mov    %sp,%bp
    7f1c:	66 83 ec 2c          	sub    $0x2c,%sp
	 int save = num;
    7f20:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f25:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	 int count = 0;
    7f2a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    7f31:	00 00                	add    %al,(%eax)
	 char number[30];
	 number[count] = 0;
    7f33:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    7f38:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    7f3d:	66 01 d0             	add    %dx,%ax
    7f40:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	if(num < 0){
    7f44:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    7f4a:	79 14                	jns    7f60 <printsint+0x49>
		printc('-');
    7f4c:	66 6a 2d             	pushw  $0x2d
    7f4f:	66 e8 99 ff          	callw  7eec <prints+0x50>
    7f53:	ff                   	(bad)  
    7f54:	ff 66 83             	jmp    *-0x7d(%esi)
    7f57:	c4 04 67             	les    (%edi,%eiz,2),%eax
		num = -num;
    7f5a:	66 f7 5d 08          	negw   0x8(%ebp)
    7f5e:	eb 15                	jmp    7f75 <printsint+0x5e>
	}
	else if(num == 0){
    7f60:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    7f66:	75 0d                	jne    7f75 <printsint+0x5e>
		printc('0');
    7f68:	66 6a 30             	pushw  $0x30
    7f6b:	66 e8 7d ff          	callw  7eec <prints+0x50>
    7f6f:	ff                   	(bad)  
    7f70:	ff 66 83             	jmp    *-0x7d(%esi)
    7f73:	c4 04 eb             	les    (%ebx,%ebp,8),%eax
	}
	while(num > 0){
    7f76:	50                   	push   %eax
		number[count] = num % 10 + '0';
    7f77:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f7c:	66 b9 0a 00          	mov    $0xa,%cx
    7f80:	00 00                	add    %al,(%eax)
    7f82:	66 99                	cwtd   
    7f84:	66 f7 f9             	idiv   %cx
    7f87:	66 89 d0             	mov    %dx,%ax
    7f8a:	66 83 c0 30          	add    $0x30,%ax
    7f8e:	67 66 8d 4d d6       	lea    -0x2a(%di),%cx
    7f93:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    7f98:	66 01 ca             	add    %cx,%dx
    7f9b:	67 88 02             	mov    %al,(%bp,%si)
		num  = num / 10;
    7f9e:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    7fa3:	66 b8 67 66          	mov    $0x6667,%ax
    7fa7:	66 66 66 f7 e9       	data32 data32 imul %cx
    7fac:	66 c1 fa 02          	sar    $0x2,%dx
    7fb0:	66 89 c8             	mov    %cx,%ax
    7fb3:	66 c1 f8 1f          	sar    $0x1f,%ax
    7fb7:	66 29 c2             	sub    %ax,%dx
    7fba:	66 89 d0             	mov    %dx,%ax
    7fbd:	67 66 89 45 08       	mov    %ax,0x8(%di)
		count ++;
    7fc2:	67 66 ff 45 fc       	incw   -0x4(%di)
		num = -num;
	}
	else if(num == 0){
		printc('0');
	}
	while(num > 0){
    7fc7:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    7fcd:	7f a8                	jg     7f77 <printsint+0x60>
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    7fcf:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    7fd4:	66 48                	dec    %ax
    7fd6:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    7fdb:	eb 25                	jmp    8002 <printsint+0xeb>
		printc(number[i]);
    7fdd:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    7fe2:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    7fe7:	66 01 d0             	add    %dx,%ax
    7fea:	67 8a 00             	mov    (%bx,%si),%al
    7fed:	66 0f be c0          	movsbw %al,%ax
    7ff1:	66 50                	push   %ax
    7ff3:	66 e8 f5 fe          	callw  7eec <prints+0x50>
    7ff7:	ff                   	(bad)  
    7ff8:	ff 66 83             	jmp    *-0x7d(%esi)
    7ffb:	c4 04 67             	les    (%edi,%eiz,2),%eax
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    7ffe:	66 ff 4d f8          	decw   -0x8(%ebp)
    8002:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    8008:	79 d3                	jns    7fdd <printsint+0xc6>
		printc(number[i]);
	}
	return;
    800a:	90                   	nop
}
    800b:	66 c9                	leavew 
    800d:	66 c3                	retw   

0000800f <print_next_line>:
 void print_next_line(char const* Messeage){
    800f:	66 55                	push   %bp
    8011:	66 89 e5             	mov    %sp,%bp
	prints(Messeage);
    8014:	67 66 ff 75 08       	pushw  0x8(%di)
    8019:	66 e8 7d fe          	callw  7e9a <print+0x8f>
    801d:	ff                   	(bad)  
    801e:	ff 66 83             	jmp    *-0x7d(%esi)
    8021:	c4 04 66             	les    (%esi,%eiz,2),%eax
	prints("\n\r");
    8024:	68 77 8d 00 00       	push   $0x8d77
    8029:	66 e8 6d fe          	callw  7e9a <print+0x8f>
    802d:	ff                   	(bad)  
    802e:	ff 66 83             	jmp    *-0x7d(%esi)
    8031:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    8034:	66 c9                	leavew 
    8036:	66 c3                	retw   

00008038 <strlen>:
 int strlen(char const *Messeage){
    8038:	66 55                	push   %bp
    803a:	66 89 e5             	mov    %sp,%bp
    803d:	66 83 ec 08          	sub    $0x8,%sp
	int i = 0;
    8041:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8048:	00 00                	add    %al,(%eax)
	int count = 0;
    804a:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8051:	00 00                	add    %al,(%eax)
	while(Messeage[i] != 0){
    8053:	eb 0a                	jmp    805f <strlen+0x27>
		i++;
    8055:	67 66 ff 45 fc       	incw   -0x4(%di)
		count++;
    805a:	67 66 ff 45 f8       	incw   -0x8(%di)
	return;
}
 int strlen(char const *Messeage){
	int i = 0;
	int count = 0;
	while(Messeage[i] != 0){
    805f:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8064:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8069:	66 01 d0             	add    %dx,%ax
    806c:	67 8a 00             	mov    (%bx,%si),%al
    806f:	84 c0                	test   %al,%al
    8071:	75 e2                	jne    8055 <strlen+0x1d>
		i++;
		count++;
	}
	return count;
    8073:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    8078:	66 c9                	leavew 
    807a:	66 c3                	retw   

0000807c <read_and_print_input>:
 void read_and_print_input(){
    807c:	66 55                	push   %bp
    807e:	66 89 e5             	mov    %sp,%bp
    8081:	66 83 ec 08          	sub    $0x8,%sp
    int i = 1;
    8085:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    808c:	00 00                	add    %al,(%eax)
    while(i){
    808e:	eb 1c                	jmp    80ac <read_and_print_input+0x30>
        char savechar = _readinput();
    8090:	66 e8 ba 01          	callw  824e <_printchar+0x22>
    8094:	00 00                	add    %al,(%eax)
    8096:	67 88 45 fb          	mov    %al,-0x5(%di)
        _showchar(savechar);
    809a:	67 66 0f be 45 fb    	movsbw -0x5(%di),%ax
    80a0:	66 50                	push   %ax
    80a2:	66 e8 c1 01          	callw  8267 <_readinput+0x17>
    80a6:	00 00                	add    %al,(%eax)
    80a8:	66 83 c4 04          	add    $0x4,%sp
	}
	return count;
}
 void read_and_print_input(){
    int i = 1;
    while(i){
    80ac:	67 66 83 7d fc 00    	cmpw   $0x0,-0x4(%di)
    80b2:	75 dc                	jne    8090 <read_and_print_input+0x14>
        char savechar = _readinput();
        _showchar(savechar);
    }
}
    80b4:	66 c9                	leavew 
    80b6:	66 c3                	retw   

000080b8 <waitforinput>:
 char waitforinput(){
    80b8:	66 55                	push   %bp
    80ba:	66 89 e5             	mov    %sp,%bp
    80bd:	66 83 ec 04          	sub    $0x4,%sp
	char result = _readinput();
    80c1:	66 e8 89 01          	callw  824e <_printchar+0x22>
    80c5:	00 00                	add    %al,(%eax)
    80c7:	67 88 45 ff          	mov    %al,-0x1(%di)
	return result;
    80cb:	67 8a 45 ff          	mov    -0x1(%di),%al
}
    80cf:	66 c9                	leavew 
    80d1:	66 c3                	retw   

000080d3 <strcmp>:
int strcmp(char *m1,char const* m2){
    80d3:	66 55                	push   %bp
    80d5:	66 89 e5             	mov    %sp,%bp
    80d8:	66 83 ec 04          	sub    $0x4,%sp
		if(m1[i] != m2[i]){
			return 0;
		}
	}
	return 1;*/
	int i = 0;
    80dc:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    80e3:	00 00                	add    %al,(%eax)
	while(m1[i] != 0 && m2[i]!= 0){
    80e5:	eb 31                	jmp    8118 <strcmp+0x45>
		if(m1[i] != m2[i]){
    80e7:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    80ec:	67 66 8b 45 08       	mov    0x8(%di),%ax
    80f1:	66 01 d0             	add    %dx,%ax
    80f4:	67 8a 10             	mov    (%bx,%si),%dl
    80f7:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    80fc:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8101:	66 01 c8             	add    %cx,%ax
    8104:	67 8a 00             	mov    (%bx,%si),%al
    8107:	38 c2                	cmp    %al,%dl
    8109:	74 08                	je     8113 <strcmp+0x40>
			return 0;
    810b:	66 b8 00 00          	mov    $0x0,%ax
    810f:	00 00                	add    %al,(%eax)
    8111:	eb 63                	jmp    8176 <strcmp+0xa3>
		}
		i++;
    8113:	67 66 ff 45 fc       	incw   -0x4(%di)
			return 0;
		}
	}
	return 1;*/
	int i = 0;
	while(m1[i] != 0 && m2[i]!= 0){
    8118:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    811d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8122:	66 01 d0             	add    %dx,%ax
    8125:	67 8a 00             	mov    (%bx,%si),%al
    8128:	84 c0                	test   %al,%al
    812a:	74 14                	je     8140 <strcmp+0x6d>
    812c:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8131:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8136:	66 01 d0             	add    %dx,%ax
    8139:	67 8a 00             	mov    (%bx,%si),%al
    813c:	84 c0                	test   %al,%al
    813e:	75 a7                	jne    80e7 <strcmp+0x14>
		if(m1[i] != m2[i]){
			return 0;
		}
		i++;
	}
	if(m1[i] != 0 || m2[i] != 0){
    8140:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8145:	67 66 8b 45 08       	mov    0x8(%di),%ax
    814a:	66 01 d0             	add    %dx,%ax
    814d:	67 8a 00             	mov    (%bx,%si),%al
    8150:	84 c0                	test   %al,%al
    8152:	75 14                	jne    8168 <strcmp+0x95>
    8154:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8159:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    815e:	66 01 d0             	add    %dx,%ax
    8161:	67 8a 00             	mov    (%bx,%si),%al
    8164:	84 c0                	test   %al,%al
    8166:	74 08                	je     8170 <strcmp+0x9d>
		return 0;
    8168:	66 b8 00 00          	mov    $0x0,%ax
    816c:	00 00                	add    %al,(%eax)
    816e:	eb 06                	jmp    8176 <strcmp+0xa3>
	}
	return 1;
    8170:	66 b8 01 00          	mov    $0x1,%ax
    8174:	00 00                	add    %al,(%eax)
}
    8176:	66 c9                	leavew 
    8178:	66 c3                	retw   

0000817a <strcpy>:
void strcpy(char const *src,char *des){
    817a:	66 55                	push   %bp
    817c:	66 89 e5             	mov    %sp,%bp
    817f:	66 83 ec 08          	sub    $0x8,%sp
	int len = strlen(src);
    8183:	67 66 ff 75 08       	pushw  0x8(%di)
    8188:	66 e8 aa fe          	callw  8036 <print_next_line+0x27>
    818c:	ff                   	(bad)  
    818d:	ff 66 83             	jmp    *-0x7d(%esi)
    8190:	c4 04 67             	les    (%edi,%eiz,2),%eax
    8193:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	int i = 0;
    8197:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    819e:	00 00                	add    %al,(%eax)
	for(i = 0;i < len;i ++){
    81a0:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    81a7:	00 00                	add    %al,(%eax)
    81a9:	eb 3b                	jmp    81e6 <strcpy+0x6c>
    	des[i] =  src[i];
    81ab:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    81b0:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    81b5:	66 01 c2             	add    %ax,%dx
    81b8:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    81bd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    81c2:	66 01 c8             	add    %cx,%ax
    81c5:	67 8a 00             	mov    (%bx,%si),%al
    81c8:	67 88 02             	mov    %al,(%bp,%si)
        des[i+1] = 0;
    81cb:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    81d0:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    81d5:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    81da:	66 01 d0             	add    %dx,%ax
    81dd:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	return 1;
}
void strcpy(char const *src,char *des){
	int len = strlen(src);
	int i = 0;
	for(i = 0;i < len;i ++){
    81e1:	67 66 ff 45 fc       	incw   -0x4(%di)
    81e6:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    81eb:	67 66 3b 45 f8       	cmp    -0x8(%di),%ax
    81f0:	7c b9                	jl     81ab <strcpy+0x31>
    	des[i] =  src[i];
        des[i+1] = 0;
	}
}
    81f2:	66 c9                	leavew 
    81f4:	66 c3                	retw   

000081f6 <Initial_Int>:
		printsint(map->size[i]);
		printsint(map->sector[i]);
		prints("\n\r");
	}
}*/
void Initial_Int(){
    81f6:	66 55                	push   %bp
    81f8:	66 89 e5             	mov    %sp,%bp
	_initialInt();
    81fb:	66 e8 3f 02          	callw  843e <ouch+0x51>
    81ff:	00 00                	add    %al,(%eax)
	return;
    8201:	90                   	nop
    8202:	66 5d                	pop    %bp
    8204:	66 c3                	retw   
    8206:	66 90                	xchg   %ax,%ax
    8208:	66 90                	xchg   %ax,%ax
    820a:	66 90                	xchg   %ax,%ax
    820c:	66 90                	xchg   %ax,%ax
    820e:	66 90                	xchg   %ax,%ax

00008210 <Pg_Segment>:
	...

00008212 <Pg_Offset>:
    8212:	00 c0                	add    %al,%al

00008214 <info_Segment>:
	...

00008216 <info_Offset>:
    8216:	00 b1 08 00 00 00    	add    %dh,0x8(%ecx)

00008218 <count>:
    8218:	08 00                	or     %al,(%eax)

00008219 <x>:
	...

0000821b <y>:
	...

0000821d <xdul>:
    821d:	01 00                	add    %eax,(%eax)

0000821f <ydul>:
    821f:	01 00                	add    %eax,(%eax)

00008221 <alpha>:
    8221:	2d 00 b8 03 00       	sub    $0x3b800,%eax

00008223 <_clearscreen>:
    8223:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    8228:	66 5a                	pop    %dx
    822a:	ff e2                	jmp    *%edx

0000822c <_printchar>:
    822c:	c8 00 00 00          	enter  $0x0,$0x0
    8230:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
    8235:	57                   	push   %edi
    8236:	66 8b 4e 06          	mov    0x6(%esi),%cx
    823a:	66 8b 7e 0a          	mov    0xa(%esi),%di
    823e:	66 8b 56 0e          	mov    0xe(%esi),%dx
    8242:	88 d5                	mov    %dl,%ch
    8244:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
    824b:	00 66 5a             	add    %ah,0x5a(%esi)
    824e:	ff e2                	jmp    *%edx

00008250 <_readinput>:
    8250:	c8 04 00 00          	enter  $0x4,$0x0
    8254:	b4 00                	mov    $0x0,%ah
    8256:	cd 16                	int    $0x16
    8258:	b4 00                	mov    $0x0,%ah
    825a:	66 67 89 04          	mov    %ax,(%si)
    825e:	24 66                	and    $0x66,%al
    8260:	67 8b 04             	mov    (%si),%eax
    8263:	24 c9                	and    $0xc9,%al
    8265:	66 5a                	pop    %dx
    8267:	ff e2                	jmp    *%edx

00008269 <_showchar>:
    8269:	c8 00 00 00          	enter  $0x0,$0x0
    826d:	8b 46 06             	mov    0x6(%esi),%eax
    8270:	b4 0e                	mov    $0xe,%ah
    8272:	b3 00                	mov    $0x0,%bl
    8274:	cd 10                	int    $0x10
    8276:	c9                   	leave  
    8277:	66 5a                	pop    %dx
    8279:	ff e2                	jmp    *%edx

0000827b <_setPoint>:
    827b:	c8 00 00 00          	enter  $0x0,$0x0
    827f:	53                   	push   %ebx
    8280:	b7 00                	mov    $0x0,%bh
    8282:	8a 77 06             	mov    0x6(%edi),%dh
    8285:	8a 57 0a             	mov    0xa(%edi),%dl
    8288:	b4 02                	mov    $0x2,%ah
    828a:	cd 10                	int    $0x10
    828c:	5b                   	pop    %ebx
    828d:	c9                   	leave  
    828e:	66 5a                	pop    %dx
    8290:	ff e2                	jmp    *%edx

00008292 <_loadP>:
    8292:	c8 00 00 00          	enter  $0x0,$0x0
    8296:	60                   	pusha  
    8297:	06                   	push   %es
    8298:	1e                   	push   %ds
    8299:	52                   	push   %edx
    829a:	8c c8                	mov    %cs,%eax
    829c:	8e d8                	mov    %eax,%ds
    829e:	8e c0                	mov    %eax,%es
    82a0:	b2 00                	mov    $0x0,%dl
    82a2:	8b 46 0a             	mov    0xa(%esi),%eax
    82a5:	b3 12                	mov    $0x12,%bl
    82a7:	f6 f3                	div    %bl
    82a9:	88 e1                	mov    %ah,%cl
    82ab:	30 e4                	xor    %ah,%ah
    82ad:	b3 02                	mov    $0x2,%bl
    82af:	f6 f3                	div    %bl
    82b1:	88 e6                	mov    %ah,%dh
    82b3:	88 c5                	mov    %al,%ch
    82b5:	8a 46 06             	mov    0x6(%esi),%al
    82b8:	8b 5e 0e             	mov    0xe(%esi),%ebx
    82bb:	b4 02                	mov    $0x2,%ah
    82bd:	cd 13                	int    $0x13
    82bf:	5a                   	pop    %edx
    82c0:	1f                   	pop    %ds
    82c1:	07                   	pop    %es
    82c2:	61                   	popa   
    82c3:	c9                   	leave  
    82c4:	66 5a                	pop    %dx
    82c6:	ff e2                	jmp    *%edx

000082c8 <_RunProgress>:
    82c8:	c8 00 00 00          	enter  $0x0,$0x0
    82cc:	06                   	push   %es
    82cd:	60                   	pusha  
    82ce:	06                   	push   %es
    82cf:	8c c8                	mov    %cs,%eax
    82d1:	8e d8                	mov    %eax,%ds
    82d3:	8e c0                	mov    %eax,%es
    82d5:	8b 5e 06             	mov    0x6(%esi),%ebx
    82d8:	ff d3                	call   *%ebx
    82da:	07                   	pop    %es
    82db:	61                   	popa   

000082dc <S>:
    82dc:	b4 00                	mov    $0x0,%ah
    82de:	cd 16                	int    $0x16
    82e0:	b8 00 04 50 cd       	mov    $0xcd500400,%eax
    82e5:	21 07                	and    %eax,(%edi)
    82e7:	c9                   	leave  
    82e8:	66 5a                	pop    %dx
    82ea:	ff e2                	jmp    *%edx

000082ec <_SetINT20h>:
    82ec:	53                   	push   %ebx
    82ed:	51                   	push   %ecx
    82ee:	52                   	push   %edx
    82ef:	b4 01                	mov    $0x1,%ah
    82f1:	cd 16                	int    $0x16
    82f3:	5a                   	pop    %edx
    82f4:	59                   	pop    %ecx
    82f5:	5b                   	pop    %ebx
    82f6:	75 e4                	jne    82dc <S>
    82f8:	cf                   	iret   

000082f9 <_SetINT08h>:
    82f9:	60                   	pusha  
    82fa:	52                   	push   %edx
    82fb:	0f a8                	push   %gs
    82fd:	fe 0e                	decb   (%esi)
    82ff:	18 82 75 4b 83 3e    	sbb    %al,0x3e834b75(%edx)

00008303 <notc>:
    8303:	83 3e 21             	cmpl   $0x21,(%esi)
    8306:	82                   	(bad)  
    8307:	2d 75 08 c7 06       	sub    $0x6c70875,%eax
    830c:	21 82 5c 00 eb 2d    	and    %eax,0x2deb005c(%edx)

00008312 <changleft>:
    8312:	83 3e 21             	cmpl   $0x21,(%esi)
    8315:	82                   	(bad)  
    8316:	5c                   	pop    %esp
    8317:	75 08                	jne    8321 <changright>
    8319:	c7 06 21 82 7c 00    	movl   $0x7c8221,(%esi)
    831f:	eb 1e                	jmp    833f <show>

00008321 <changright>:
    8321:	83 3e 21             	cmpl   $0x21,(%esi)
    8324:	82                   	(bad)  
    8325:	7c 75                	jl     839c <showc+0x3>
    8327:	08 c7                	or     %al,%bh
    8329:	06                   	push   %es
    832a:	21 82 2f 00 eb 0f    	and    %eax,0xfeb002f(%edx)

00008330 <changheng>:
    8330:	83 3e 21             	cmpl   $0x21,(%esi)
    8333:	82                   	(bad)  
    8334:	2f                   	das    
    8335:	75 cc                	jne    8303 <notc>
    8337:	c7 06 21 82 2d 00    	movl   $0x2d8221,(%esi)
    833d:	eb 00                	jmp    833f <show>

0000833f <show>:
    833f:	ff 36                	pushl  (%esi)
    8341:	21 82 6a 00 e8 e6    	and    %eax,-0x1917ff96(%edx)
    8347:	01 58 c6             	add    %ebx,-0x3a(%eax)
    834a:	06                   	push   %es
    834b:	18 82 08 b0 20 e6    	sbb    %al,-0x19df4ff8(%edx)

0000834e <end>:
    834e:	b0 20                	mov    $0x20,%al
    8350:	e6 20                	out    %al,$0x20
    8352:	e6 a0                	out    %al,$0xa0
    8354:	0f a9                	pop    %gs
    8356:	5a                   	pop    %edx
    8357:	61                   	popa   
    8358:	cf                   	iret   

00008359 <_SetINT33h>:
    8359:	60                   	pusha  
    835a:	1e                   	push   %ds
    835b:	0f a8                	push   %gs
    835d:	6a 00                	push   $0x0
    835f:	e8 11 02 0f a9       	call   a90f8575 <__bss_start+0xa90ee42d>
    8364:	1f                   	pop    %ds
    8365:	61                   	popa   
    8366:	cf                   	iret   

00008367 <_SetINT34h>:
    8367:	60                   	pusha  
    8368:	1e                   	push   %ds
    8369:	0f a8                	push   %gs
    836b:	6a 00                	push   $0x0
    836d:	e8 44 03 0f a9       	call   a90f86b6 <__bss_start+0xa90ee56e>
    8372:	1f                   	pop    %ds
    8373:	61                   	popa   
    8374:	cf                   	iret   

00008375 <_SetINT21h>:
    8375:	c8 00 00 00          	enter  $0x0,$0x0
    8379:	60                   	pusha  
    837a:	8b 46 08             	mov    0x8(%esi),%eax
    837d:	80 fc 00             	cmp    $0x0,%ah
    8380:	74 17                	je     8399 <showc>
    8382:	80 fc 01             	cmp    $0x1,%ah
    8385:	74 1e                	je     83a5 <inputc>
    8387:	80 fc 02             	cmp    $0x2,%ah
    838a:	74 36                	je     83c2 <input_and_readc>
    838c:	80 fc 03             	cmp    $0x3,%ah
    838f:	74 54                	je     83e5 <clr>
    8391:	80 fc 04             	cmp    $0x4,%ah
    8394:	74 57                	je     83ed <ouch>
    8396:	61                   	popa   
    8397:	c9                   	leave  
    8398:	cf                   	iret   

00008399 <showc>:
    8399:	8b 46 0a             	mov    0xa(%esi),%eax
    839c:	b4 0e                	mov    $0xe,%ah
    839e:	b3 00                	mov    $0x0,%bl
    83a0:	cd 10                	int    $0x10
    83a2:	61                   	popa   
    83a3:	c9                   	leave  
    83a4:	cf                   	iret   

000083a5 <inputc>:
    83a5:	66 83 ec 04          	sub    $0x4,%sp
    83a9:	b4 00                	mov    $0x0,%ah
    83ab:	cd 16                	int    $0x16
    83ad:	b4 00                	mov    $0x0,%ah
    83af:	66 67 89 04          	mov    %ax,(%si)
    83b3:	24 66                	and    $0x66,%al
    83b5:	67 8b 04             	mov    (%si),%eax
    83b8:	24 66                	and    $0x66,%al
    83ba:	83 c4 04             	add    $0x4,%esp
    83bd:	8e e0                	mov    %eax,%fs
    83bf:	61                   	popa   
    83c0:	c9                   	leave  
    83c1:	cf                   	iret   

000083c2 <input_and_readc>:
    83c2:	66 83 ec 04          	sub    $0x4,%sp
    83c6:	b4 00                	mov    $0x0,%ah
    83c8:	cd 16                	int    $0x16
    83ca:	b4 00                	mov    $0x0,%ah
    83cc:	66 67 89 04          	mov    %ax,(%si)
    83d0:	24 66                	and    $0x66,%al
    83d2:	67 8b 04             	mov    (%si),%eax
    83d5:	24 b4                	and    $0xb4,%al
    83d7:	0e                   	push   %cs
    83d8:	b3 00                	mov    $0x0,%bl
    83da:	cd 10                	int    $0x10
    83dc:	66 83 c4 04          	add    $0x4,%sp
    83e0:	8e e0                	mov    %eax,%fs
    83e2:	61                   	popa   
    83e3:	c9                   	leave  
    83e4:	cf                   	iret   

000083e5 <clr>:
    83e5:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    83ea:	61                   	popa   
    83eb:	c9                   	leave  
    83ec:	cf                   	iret   

000083ed <ouch>:
    83ed:	06                   	push   %es
    83ee:	b8 00 b8 8e c0       	mov    $0xc08eb800,%eax
    83f3:	bf 28 00 57 66       	mov    $0x66570028,%edi
    83f8:	b9 6f 00 00 00       	mov    $0x6f,%ecx
    83fd:	b5 07                	mov    $0x7,%ch
    83ff:	66 bf 28 00          	mov    $0x28,%di
    8403:	00 00                	add    %al,(%eax)
    8405:	26 89 0d 66 b9 75 00 	mov    %ecx,%es:0x75b966
    840c:	00 00                	add    %al,(%eax)
    840e:	b5 07                	mov    $0x7,%ch
    8410:	66 bf 2a 00          	mov    $0x2a,%di
    8414:	00 00                	add    %al,(%eax)
    8416:	26 89 0d 66 b9 63 00 	mov    %ecx,%es:0x63b966
    841d:	00 00                	add    %al,(%eax)
    841f:	b5 07                	mov    $0x7,%ch
    8421:	66 bf 2c 00          	mov    $0x2c,%di
    8425:	00 00                	add    %al,(%eax)
    8427:	26 89 0d 66 b9 68 00 	mov    %ecx,%es:0x68b966
    842e:	00 00                	add    %al,(%eax)
    8430:	b5 07                	mov    $0x7,%ch
    8432:	66 bf 2e 00          	mov    $0x2e,%di
    8436:	00 00                	add    %al,(%eax)
    8438:	26 89 0d 5f 07 61 c9 	mov    %ecx,%es:0xc961075f
    843f:	cf                   	iret   

00008440 <_initialInt>:
    8440:	c8 00 00 00          	enter  $0x0,$0x0
    8444:	60                   	pusha  
    8445:	06                   	push   %es
    8446:	1e                   	push   %ds
    8447:	8c c8                	mov    %cs,%eax
    8449:	8e d8                	mov    %eax,%ds
    844b:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8450:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
    8455:	00 f7                	add    %dh,%bh
    8457:	e3 89                	jecxz  83e2 <input_and_readc+0x20>
    8459:	c7                   	(bad)  
    845a:	b8 ec 82 26 89       	mov    $0x892682ec,%eax
    845f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8464:	45                   	inc    %ebp
    8465:	02 1f                	add    (%edi),%bl
    8467:	07                   	pop    %es
    8468:	61                   	popa   
    8469:	60                   	pusha  
    846a:	06                   	push   %es
    846b:	1e                   	push   %ds
    846c:	8c c8                	mov    %cs,%eax
    846e:	8e d8                	mov    %eax,%ds
    8470:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8475:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
    847a:	00 f7                	add    %dh,%bh
    847c:	e3 89                	jecxz  8407 <ouch+0x1a>
    847e:	c7                   	(bad)  
    847f:	b8 f9 82 26 89       	mov    $0x892682f9,%eax
    8484:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8489:	45                   	inc    %ebp
    848a:	02 1f                	add    (%edi),%bl
    848c:	07                   	pop    %es
    848d:	61                   	popa   
    848e:	60                   	pusha  
    848f:	06                   	push   %es
    8490:	1e                   	push   %ds
    8491:	8c c8                	mov    %cs,%eax
    8493:	8e d8                	mov    %eax,%ds
    8495:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    849a:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
    849f:	00 f7                	add    %dh,%bh
    84a1:	e3 89                	jecxz  842c <ouch+0x3f>
    84a3:	c7                   	(bad)  
    84a4:	b8 59 83 26 89       	mov    $0x89268359,%eax
    84a9:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    84ae:	45                   	inc    %ebp
    84af:	02 1f                	add    (%edi),%bl
    84b1:	07                   	pop    %es
    84b2:	61                   	popa   
    84b3:	60                   	pusha  
    84b4:	06                   	push   %es
    84b5:	1e                   	push   %ds
    84b6:	8c c8                	mov    %cs,%eax
    84b8:	8e d8                	mov    %eax,%ds
    84ba:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    84bf:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
    84c4:	00 f7                	add    %dh,%bh
    84c6:	e3 89                	jecxz  8451 <_initialInt+0x11>
    84c8:	c7                   	(bad)  
    84c9:	b8 67 83 26 89       	mov    $0x89268367,%eax
    84ce:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    84d3:	45                   	inc    %ebp
    84d4:	02 1f                	add    (%edi),%bl
    84d6:	07                   	pop    %es
    84d7:	61                   	popa   
    84d8:	60                   	pusha  
    84d9:	06                   	push   %es
    84da:	1e                   	push   %ds
    84db:	8c c8                	mov    %cs,%eax
    84dd:	8e d8                	mov    %eax,%ds
    84df:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    84e4:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
    84e9:	00 f7                	add    %dh,%bh
    84eb:	e3 89                	jecxz  8476 <_initialInt+0x36>
    84ed:	c7                   	(bad)  
    84ee:	b8 75 83 26 89       	mov    $0x89268375,%eax
    84f3:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    84f8:	45                   	inc    %ebp
    84f9:	02 1f                	add    (%edi),%bl
    84fb:	07                   	pop    %es
    84fc:	61                   	popa   
    84fd:	c9                   	leave  
    84fe:	66 5a                	pop    %dx
    8500:	ff e2                	jmp    *%edx

00008502 <_test>:
    8502:	60                   	pusha  
    8503:	50                   	push   %eax
    8504:	53                   	push   %ebx
    8505:	51                   	push   %ecx
    8506:	52                   	push   %edx
    8507:	0f a8                	push   %gs
    8509:	a1 19 82 50 6a       	mov    0x6a508219,%eax
    850e:	00 ff                	add    %bh,%bh
    8510:	06                   	push   %es
    8511:	19 82 a1 1b 82 50    	sbb    %eax,0x50821ba1(%edx)
    8517:	6a 00                	push   $0x0
    8519:	ff 06                	incl   (%esi)
    851b:	1b 82 e8 0e 00 66    	sbb    0x66000ee8(%edx),%eax
    8521:	58                   	pop    %eax
    8522:	58                   	pop    %eax
    8523:	0f a9                	pop    %gs
    8525:	5a                   	pop    %edx
    8526:	59                   	pop    %ecx
    8527:	5b                   	pop    %ebx
    8528:	58                   	pop    %eax
    8529:	61                   	popa   
    852a:	66 5a                	pop    %dx
    852c:	ff e2                	jmp    *%edx

0000852e <printcircle>:
#include "use.h"
void printcircle(char alpha){
    852e:	66 55                	push   %bp
    8530:	66 89 e5             	mov    %sp,%bp
    8533:	66 83 ec 0c          	sub    $0xc,%sp
    8537:	67 66 8b 45 08       	mov    0x8(%di),%ax
    853c:	67 88 45 f4          	mov    %al,-0xc(%di)
    int pos = (80 * 15 + 20)*2;
    8540:	67 66 c7 45 fc 88 09 	movw   $0x988,-0x4(%di)
    8547:	00 00                	add    %al,(%eax)
    int color = 3;
    8549:	67 66 c7 45 f8 03 00 	movw   $0x3,-0x8(%di)
    8550:	00 00                	add    %al,(%eax)
	_printchar(alpha,pos,color);
    8552:	67 66 0f be 45 f4    	movsbw -0xc(%di),%ax
    8558:	67 66 ff 75 f8       	pushw  -0x8(%di)
    855d:	67 66 ff 75 fc       	pushw  -0x4(%di)
    8562:	66 50                	push   %ax
    8564:	66 e8 c2 fc          	callw  822a <_clearscreen+0x7>
    8568:	ff                   	(bad)  
    8569:	ff 66 83             	jmp    *-0x7d(%esi)
    856c:	c4 0c 90             	les    (%eax,%edx,4),%ecx
    return;
}
    856f:	66 c9                	leavew 
    8571:	66 c3                	retw   

00008573 <showline>:
void showline(){
    8573:	66 55                	push   %bp
    8575:	66 89 e5             	mov    %sp,%bp
    8578:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
    857c:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
    8581:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
    8586:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
    858b:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
    8590:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
    8595:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
    859a:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
    859f:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    85a6:	00 00                	add    %al,(%eax)
    int i = 0;
    85a8:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    85af:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
    85b1:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    85b8:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
    85ba:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    85c1:	00 00                	add    %al,(%eax)
    85c3:	eb 52                	jmp    8617 <showline+0xa4>
        pos = (80 * i + i) * 2;
    85c5:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    85ca:	66 89 d0             	mov    %dx,%ax
    85cd:	66 c1 e0 03          	shl    $0x3,%ax
    85d1:	66 01 d0             	add    %dx,%ax
    85d4:	67 66 8d 14          	lea    (%si),%dx
    85d8:	c5 00                	lds    (%eax),%eax
    85da:	00 00                	add    %al,(%eax)
    85dc:	00 66 01             	add    %ah,0x1(%esi)
    85df:	d0 66 01             	shlb   0x1(%esi)
    85e2:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
    85e6:	45                   	inc    %ebp
    85e7:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
    85ed:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    85f2:	66 01 d0             	add    %dx,%ax
    85f5:	67 8a 00             	mov    (%bx,%si),%al
    85f8:	66 0f be c0          	movsbw %al,%ax
    85fc:	67 66 ff 75 f4       	pushw  -0xc(%di)
    8601:	67 66 ff 75 f0       	pushw  -0x10(%di)
    8606:	66 50                	push   %ax
    8608:	66 e8 1e fc          	callw  822a <_clearscreen+0x7>
    860c:	ff                   	(bad)  
    860d:	ff 66 83             	jmp    *-0x7d(%esi)
    8610:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
    8613:	66 ff 45 fc          	incw   -0x4(%ebp)
    8617:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
    861d:	7e a6                	jle    85c5 <showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
    861f:	66 c9                	leavew 
    8621:	66 c3                	retw   

00008623 <printpos>:
void printpos(char const* Messeage,int row,int colume){//need the pos
    8623:	66 55                	push   %bp
    8625:	66 89 e5             	mov    %sp,%bp
    8628:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    862c:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    8631:	66 89 d0             	mov    %dx,%ax
    8634:	66 c1 e0 02          	shl    $0x2,%ax
    8638:	66 01 d0             	add    %dx,%ax
    863b:	66 c1 e0 04          	shl    $0x4,%ax
    863f:	66 89 c2             	mov    %ax,%dx
    8642:	67 66 8b 45 10       	mov    0x10(%di),%ax
    8647:	66 01 d0             	add    %dx,%ax
    864a:	66 01 c0             	add    %ax,%ax
    864d:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    8652:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    8659:	00 00                	add    %al,(%eax)
	int index = 0;
    865b:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8662:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    8664:	eb 35                	jmp    869b <printpos+0x78>
		_printchar(Messeage[index],pos,color);
    8666:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    866b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8670:	66 01 d0             	add    %dx,%ax
    8673:	67 8a 00             	mov    (%bx,%si),%al
    8676:	66 0f be c0          	movsbw %al,%ax
    867a:	67 66 ff 75 f4       	pushw  -0xc(%di)
    867f:	67 66 ff 75 fc       	pushw  -0x4(%di)
    8684:	66 50                	push   %ax
    8686:	66 e8 a0 fb          	callw  822a <_clearscreen+0x7>
    868a:	ff                   	(bad)  
    868b:	ff 66 83             	jmp    *-0x7d(%esi)
    868e:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    8691:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    8695:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
}
void printpos(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    869b:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    86a0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    86a5:	66 01 d0             	add    %dx,%ax
    86a8:	67 8a 00             	mov    (%bx,%si),%al
    86ab:	84 c0                	test   %al,%al
    86ad:	75 b7                	jne    8666 <printpos+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    86af:	90                   	nop
}
    86b0:	66 c9                	leavew 
    86b2:	66 c3                	retw   

000086b4 <printname>:
void printname(){
    86b4:	66 55                	push   %bp
    86b6:	66 89 e5             	mov    %sp,%bp
    86b9:	66 83 ec 04          	sub    $0x4,%sp
    char const* Message = "chenhy";
    86bd:	67 66 c7 45 fc 7a 8d 	movw   $0x8d7a,-0x4(%di)
    86c4:	00 00                	add    %al,(%eax)
    printpos(Message,15,10);
    86c6:	66 6a 0a             	pushw  $0xa
    86c9:	66 6a 0f             	pushw  $0xf
    86cc:	67 66 ff 75 fc       	pushw  -0x4(%di)
    86d1:	66 e8 4c ff          	callw  8621 <showline+0xae>
    86d5:	ff                   	(bad)  
    86d6:	ff 66 83             	jmp    *-0x7d(%esi)
    86d9:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    86dc:	c9                   	leave  
    86dd:	66 c3                	retw   

000086df <terminal>:
#include "../syscall/use.h"
#include "command.h"
void run(int queue[],int size);
int terminal(){
    86df:	66 55                	push   %bp
    86e1:	66 89 e5             	mov    %sp,%bp
    86e4:	66 57                	push   %di
    86e6:	66 56                	push   %si
    86e8:	66 53                	push   %bx
    86ea:	66 83 ec 60          	sub    $0x60,%sp
    86ee:	66 89 e0             	mov    %sp,%ax
    86f1:	66 89 c6             	mov    %ax,%si
    char const *CMDHead = "hongyangchendeMacBook-Air:chenhyOS users$ ";
    86f4:	67 66 c7 45 e4 84 8d 	movw   $0x8d84,-0x1c(%di)
    86fb:	00 00                	add    %al,(%eax)
    char const *controlMsg1 = "The queue is full,waiting for the Enter Key.";
    86fd:	67 66 c7 45 e0 b0 8d 	movw   $0x8db0,-0x20(%di)
    8704:	00 00                	add    %al,(%eax)
    char const *controlMsg2 = "The queue is empty!";
    8706:	67 66 c7 45 dc dd 8d 	movw   $0x8ddd,-0x24(%di)
    870d:	00 00                	add    %al,(%eax)
    char const *ByeByeMsg = "ByeBye";
    870f:	67 66 c7 45 d8 f1 8d 	movw   $0x8df1,-0x28(%di)
    8716:	00 00                	add    %al,(%eax)
    char const *filelist = "Program1 upleft   Program2 upright  \r\nProgram3 downleft  Program4 downright";
    8718:	67 66 c7 45 d4 f8 8d 	movw   $0x8df8,-0x2c(%di)
    871f:	00 00                	add    %al,(%eax)
    char const *HelpMsg1 = "Enter 1,2,3,4 to run the program\n\rEnter quit,to quit\n\rEnter help to print this script again";
    8721:	67 66 c7 45 d0 44 8e 	movw   $0x8e44,-0x30(%di)
    8728:	00 00                	add    %al,(%eax)
    char const *help = "help";
    872a:	67 66 c7 45 cc a0 8e 	movw   $0x8ea0,-0x34(%di)
    8731:	00 00                	add    %al,(%eax)
    char const *quit = "quit";
    8733:	67 66 c7 45 c8 a5 8e 	movw   $0x8ea5,-0x38(%di)
    873a:	00 00                	add    %al,(%eax)
    char const *lst = "ls";
    873c:	67 66 c7 45 c4 aa 8e 	movw   $0x8eaa,-0x3c(%di)
    8743:	00 00                	add    %al,(%eax)
    int Maxsize = 10;
    8745:	67 66 c7 45 c0 0a 00 	movw   $0xa,-0x40(%di)
    874c:	00 00                	add    %al,(%eax)
    print_next_line(HelpMsg1);
    874e:	67 66 ff 75 d0       	pushw  -0x30(%di)
    8753:	66 e8 b6 f8          	callw  800d <printsint+0xf6>
    8757:	ff                   	(bad)  
    8758:	ff 66 83             	jmp    *-0x7d(%esi)
    875b:	c4 04 67             	les    (%edi,%eiz,2),%eax
    
            // _RunProgress(0xC000);
   prints(CMDHead);
    875e:	66 ff 75 e4          	pushw  -0x1c(%ebp)
    8762:	66 e8 34 f7          	callw  7e9a <print+0x8f>
    8766:	ff                   	(bad)  
    8767:	ff 66 83             	jmp    *-0x7d(%esi)
    876a:	c4 04 67             	les    (%edi,%eiz,2),%eax
    char recived[10] = {};
    876d:	66 8d 5d 96          	lea    -0x6a(%ebp),%bx
    8771:	66 ba 0a 00          	mov    $0xa,%dx
    8775:	00 00                	add    %al,(%eax)
    8777:	b0 00                	mov    $0x0,%al
    8779:	66 89 df             	mov    %bx,%di
    877c:	66 89 d1             	mov    %dx,%cx
    877f:	f3 aa                	rep stos %al,%es:(%edi)
    recived[0] = 0;
    8781:	67 c6 45 96 00       	movb   $0x0,-0x6a(%di)
    int index_of_str = 0;
    8786:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    878d:	00 00                	add    %al,(%eax)
    int i = 1;
    878f:	67 66 c7 45 bc 01 00 	movw   $0x1,-0x44(%di)
    8796:	00 00                	add    %al,(%eax)
    int queue[Maxsize];
    8798:	67 66 8b 45 c0       	mov    -0x40(%di),%ax
    879d:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    87a2:	67 66 89 55 b8       	mov    %dx,-0x48(%di)
    87a7:	66 c1 e0 02          	shl    $0x2,%ax
    87ab:	67 66 8d 50 03       	lea    0x3(%bx,%si),%dx
    87b0:	66 b8 04 00          	mov    $0x4,%ax
    87b4:	00 00                	add    %al,(%eax)
    87b6:	66 48                	dec    %ax
    87b8:	66 01 d0             	add    %dx,%ax
    87bb:	66 bb 04 00          	mov    $0x4,%bx
    87bf:	00 00                	add    %al,(%eax)
    87c1:	66 ba 00 00          	mov    $0x0,%dx
    87c5:	00 00                	add    %al,(%eax)
    87c7:	66 f7 f3             	div    %bx
    87ca:	66 6b c0 04          	imul   $0x4,%ax,%ax
    87ce:	66 29 c4             	sub    %ax,%sp
    87d1:	66 89 e0             	mov    %sp,%ax
    87d4:	66 83 c0 03          	add    $0x3,%ax
    87d8:	66 c1 e8 02          	shr    $0x2,%ax
    87dc:	66 c1 e0 02          	shl    $0x2,%ax
    87e0:	67 66 89 45 b4       	mov    %ax,-0x4c(%di)
    int num_of_queue = 0;
    87e5:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    87ec:	00 00                	add    %al,(%eax)
    int number = 0;
    87ee:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    87f5:	00 00                	add    %al,(%eax)
    int k = 0;
    87f7:	67 66 c7 45 b0 00 00 	movw   $0x0,-0x50(%di)
    87fe:	00 00                	add    %al,(%eax)
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    8800:	e9 78 03 66 e8       	jmp    e8668b7d <__bss_start+0xe865ea35>
        char save = waitforinput();
    8805:	af                   	scas   %es:(%edi),%eax
    8806:	f8                   	clc    
    8807:	ff                   	(bad)  
    8808:	ff 67 88             	jmp    *-0x78(%edi)
    880b:	45                   	inc    %ebp
    880c:	af                   	scas   %es:(%edi),%eax
        if(save == 32){//空格
    880d:	67 80 7d af 20       	cmpb   $0x20,-0x51(%di)
    8812:	75 74                	jne    8888 <terminal+0x1a9>
            if(num_of_queue == Maxsize){
    8814:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    8819:	67 66 3b 45 c0       	cmp    -0x40(%di),%ax
    881e:	75 31                	jne    8851 <terminal+0x172>
                prints("\n\r");
    8820:	66 68 ad 8e          	pushw  $0x8ead
    8824:	00 00                	add    %al,(%eax)
    8826:	66 e8 70 f6          	callw  7e9a <print+0x8f>
    882a:	ff                   	(bad)  
    882b:	ff 66 83             	jmp    *-0x7d(%esi)
    882e:	c4 04 67             	les    (%edi,%eiz,2),%eax
                print_next_line(controlMsg1);
    8831:	66 ff 75 e0          	pushw  -0x20(%ebp)
    8835:	66 e8 d4 f7          	callw  800d <printsint+0xf6>
    8839:	ff                   	(bad)  
    883a:	ff 66 83             	jmp    *-0x7d(%esi)
    883d:	c4 04 67             	les    (%edi,%eiz,2),%eax
                prints(CMDHead);
    8840:	66 ff 75 e4          	pushw  -0x1c(%ebp)
    8844:	66 e8 52 f6          	callw  7e9a <print+0x8f>
    8848:	ff                   	(bad)  
    8849:	ff 66 83             	jmp    *-0x7d(%esi)
    884c:	c4 04 e9             	les    (%ecx,%ebp,8),%eax
                continue;
    884f:	2a 03                	sub    (%ebx),%al
            }
            printc(save);
    8851:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    8857:	66 50                	push   %ax
    8859:	66 e8 8f f6          	callw  7eec <prints+0x50>
    885d:	ff                   	(bad)  
    885e:	ff 66 83             	jmp    *-0x7d(%esi)
    8861:	c4 04 67             	les    (%edi,%eiz,2),%eax
            queue[num_of_queue] = number;
    8864:	66 8b 45 b4          	mov    -0x4c(%ebp),%ax
    8868:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    886d:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    8872:	67 66 89 0c          	mov    %cx,(%si)
    8876:	90                   	nop
            num_of_queue ++;
    8877:	67 66 ff 45 ec       	incw   -0x14(%di)
            number = 0;
    887c:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    8883:	00 00                	add    %al,(%eax)
            continue;
    8885:	e9 f3 02 67 80       	jmp    80678b7d <__bss_start+0x8066ea35>
        }
       else  if(save == 13){//回车
    888a:	7d af                	jge    883b <terminal+0x15c>
    888c:	0d 0f 85 43 02       	or     $0x243850f,%eax
            int strcmp1 = strcmp(recived,quit);
    8891:	67 66 ff 75 c8       	pushw  -0x38(%di)
    8896:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    889b:	66 50                	push   %ax
    889d:	66 e8 30 f8          	callw  80d1 <waitforinput+0x19>
    88a1:	ff                   	(bad)  
    88a2:	ff 66 83             	jmp    *-0x7d(%esi)
    88a5:	c4 08                	les    (%eax),%ecx
    88a7:	67 66 89 45 a8       	mov    %ax,-0x58(%di)
            int strcmp2 = strcmp(recived,help);
    88ac:	67 66 ff 75 cc       	pushw  -0x34(%di)
    88b1:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    88b6:	66 50                	push   %ax
    88b8:	66 e8 15 f8          	callw  80d1 <waitforinput+0x19>
    88bc:	ff                   	(bad)  
    88bd:	ff 66 83             	jmp    *-0x7d(%esi)
    88c0:	c4 08                	les    (%eax),%ecx
    88c2:	67 66 89 45 a4       	mov    %ax,-0x5c(%di)
            int strcmp3 = strcmp(recived,lst);
    88c7:	67 66 ff 75 c4       	pushw  -0x3c(%di)
    88cc:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    88d1:	66 50                	push   %ax
    88d3:	66 e8 fa f7          	callw  80d1 <waitforinput+0x19>
    88d7:	ff                   	(bad)  
    88d8:	ff 66 83             	jmp    *-0x7d(%esi)
    88db:	c4 08                	les    (%eax),%ecx
    88dd:	67 66 89 45 a0       	mov    %ax,-0x60(%di)
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
    88e2:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    88e8:	75 22                	jne    890c <terminal+0x22d>
    88ea:	67 66 83 7d e8 00    	cmpw   $0x0,-0x18(%di)
    88f0:	75 1a                	jne    890c <terminal+0x22d>
    88f2:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    88f8:	74 12                	je     890c <terminal+0x22d>
    88fa:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    8900:	74 0a                	je     890c <terminal+0x22d>
    8902:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    8908:	0f 85 7d 01 67 66    	jne    66678a8b <__bss_start+0x6666e943>
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    890e:	83 7d a8 01          	cmpl   $0x1,-0x58(%ebp)
    8912:	74 12                	je     8926 <terminal+0x247>
    8914:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    891a:	74 0a                	je     8926 <terminal+0x247>
    891c:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    8922:	0f 85 b9 00 66 68    	jne    686689e1 <__bss_start+0x6865e899>
                    //printsint(strcmp2);
                    print_next_line("");//换行
    8928:	b0 8e                	mov    $0x8e,%al
    892a:	00 00                	add    %al,(%eax)
    892c:	66 e8 dd f6          	callw  800d <printsint+0xf6>
    8930:	ff                   	(bad)  
    8931:	ff 66 83             	jmp    *-0x7d(%esi)
    8934:	c4 04 67             	les    (%edi,%eiz,2),%eax
                    //prints("");
                    //prints("");
                    //prints("");
                    //prints("");//important,I don't know why this need;
                    //prints(recived);
                    if(strcmp1 == 1){
    8937:	66 83 7d a8 01       	cmpw   $0x1,-0x58(%ebp)
    893c:	75 2b                	jne    8969 <terminal+0x28a>
                        print_next_line(ByeByeMsg);
    893e:	67 66 ff 75 d8       	pushw  -0x28(%di)
    8943:	66 e8 c6 f6          	callw  800d <printsint+0xf6>
    8947:	ff                   	(bad)  
    8948:	ff 66 83             	jmp    *-0x7d(%esi)
    894b:	c4 04 67             	les    (%edi,%eiz,2),%eax
                        index_of_str = 0;
    894e:	66 c7 45 f0 00 00    	movw   $0x0,-0x10(%ebp)
    8954:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    8956:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    895b:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8960:	66 01 d0             	add    %dx,%ax
    8963:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8967:	eb 64                	jmp    89cd <terminal+0x2ee>
                    }                  
                   else if(strcmp2 == 1){
    8969:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    896f:	75 2b                	jne    899c <terminal+0x2bd>
                         print_next_line(HelpMsg1);
    8971:	67 66 ff 75 d0       	pushw  -0x30(%di)
    8976:	66 e8 93 f6          	callw  800d <printsint+0xf6>
    897a:	ff                   	(bad)  
    897b:	ff 66 83             	jmp    *-0x7d(%esi)
    897e:	c4 04 67             	les    (%edi,%eiz,2),%eax
                        index_of_str = 0;
    8981:	66 c7 45 f0 00 00    	movw   $0x0,-0x10(%ebp)
    8987:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    8989:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    898e:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8993:	66 01 d0             	add    %dx,%ax
    8996:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    899a:	eb 31                	jmp    89cd <terminal+0x2ee>
                    }
                    else if(strcmp3 == 1){
    899c:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    89a2:	75 29                	jne    89cd <terminal+0x2ee>
                        print_next_line(filelist);
    89a4:	67 66 ff 75 d4       	pushw  -0x2c(%di)
    89a9:	66 e8 60 f6          	callw  800d <printsint+0xf6>
    89ad:	ff                   	(bad)  
    89ae:	ff 66 83             	jmp    *-0x7d(%esi)
    89b1:	c4 04 67             	les    (%edi,%eiz,2),%eax
                        index_of_str = 0;
    89b4:	66 c7 45 f0 00 00    	movw   $0x0,-0x10(%ebp)
    89ba:	00 00                	add    %al,(%eax)
                      recived[index_of_str] = 0;
    89bc:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    89c1:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    89c6:	66 01 d0             	add    %dx,%ax
    89c9:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    }
                        //prints(recived);
                    prints(CMDHead);
    89cd:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    89d2:	66 e8 c4 f4          	callw  7e9a <print+0x8f>
    89d6:	ff                   	(bad)  
    89d7:	ff 66 83             	jmp    *-0x7d(%esi)
    89da:	c4 04 e9             	les    (%ecx,%ebp,8),%eax
                    continue;
    89dd:	9c                   	pushf  
    89de:	01 67 66             	add    %esp,0x66(%edi)
                }
            
                else if(number != 0||num_of_queue != 0){
    89e1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    89e5:	75 0a                	jne    89f1 <terminal+0x312>
    89e7:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    89ed:	0f 84 84 00 67 66    	je     66678a77 <__bss_start+0x6666e92f>
                    if(number != 0 ){
    89f3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    89f7:	74 28                	je     8a21 <terminal+0x342>
                         printsint(number);
    89f9:	67 66 ff 75 e8       	pushw  -0x18(%di)
    89fe:	66 e8 13 f5          	callw  7f15 <printc+0x27>
    8a02:	ff                   	(bad)  
    8a03:	ff 66 83             	jmp    *-0x7d(%esi)
    8a06:	c4 04 67             	les    (%edi,%eiz,2),%eax
                        queue[num_of_queue] = number;
    8a09:	66 8b 45 b4          	mov    -0x4c(%ebp),%ax
    8a0d:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    8a12:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    8a17:	67 66 89 0c          	mov    %cx,(%si)
    8a1b:	90                   	nop
                        num_of_queue++;
    8a1c:	67 66 ff 45 ec       	incw   -0x14(%di)
                    }
                    run(queue,num_of_queue);
    8a21:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    8a26:	67 66 ff 75 ec       	pushw  -0x14(%di)
    8a2b:	66 50                	push   %ax
    8a2d:	66 e8 64 01          	callw  8b95 <terminal+0x4b6>
    8a31:	00 00                	add    %al,(%eax)
    8a33:	66 83 c4 08          	add    $0x8,%sp
                    num_of_queue = 0;
    8a37:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    8a3e:	00 00                	add    %al,(%eax)
                    number = 0;
    8a40:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    8a47:	00 00                	add    %al,(%eax)
                    prints(CMDHead);
    8a49:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    8a4e:	66 e8 48 f4          	callw  7e9a <print+0x8f>
    8a52:	ff                   	(bad)  
    8a53:	ff 66 83             	jmp    *-0x7d(%esi)
    8a56:	c4 04 67             	les    (%edi,%eiz,2),%eax
                    index_of_str = 0;
    8a59:	66 c7 45 f0 00 00    	movw   $0x0,-0x10(%ebp)
    8a5f:	00 00                	add    %al,(%eax)
                    recived[index_of_str] = 0;
    8a61:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8a66:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8a6b:	66 01 d0             	add    %dx,%ax
    8a6e:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    continue;
    8a72:	e9 06 01 66 68       	jmp    68668b7d <__bss_start+0x6865ea35>
                }
                else{
                    prints("fuck");
    8a77:	b1 8e                	mov    $0x8e,%cl
    8a79:	00 00                	add    %al,(%eax)
    8a7b:	66 e8 1b f4          	callw  7e9a <print+0x8f>
    8a7f:	ff                   	(bad)  
    8a80:	ff 66 83             	jmp    *-0x7d(%esi)
    8a83:	c4 04 90             	les    (%eax,%edx,4),%eax
            int strcmp1 = strcmp(recived,quit);
            int strcmp2 = strcmp(recived,help);
            int strcmp3 = strcmp(recived,lst);
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    8a86:	e9 f2 00 66 68       	jmp    68668b7d <__bss_start+0x6865ea35>
                else{
                    prints("fuck");
                }
            }
            else{
                 prints("\n\r");
    8a8b:	ad                   	lods   %ds:(%esi),%eax
    8a8c:	8e 00                	mov    (%eax),%es
    8a8e:	00 66 e8             	add    %ah,-0x18(%esi)
    8a91:	07                   	pop    %es
    8a92:	f4                   	hlt    
    8a93:	ff                   	(bad)  
    8a94:	ff 66 83             	jmp    *-0x7d(%esi)
    8a97:	c4 04 67             	les    (%edi,%eiz,2),%eax
                print_next_line(controlMsg2);
    8a9a:	66 ff 75 dc          	pushw  -0x24(%ebp)
    8a9e:	66 e8 6b f5          	callw  800d <printsint+0xf6>
    8aa2:	ff                   	(bad)  
    8aa3:	ff 66 83             	jmp    *-0x7d(%esi)
    8aa6:	c4 04 67             	les    (%edi,%eiz,2),%eax
                prints(CMDHead);
    8aa9:	66 ff 75 e4          	pushw  -0x1c(%ebp)
    8aad:	66 e8 e9 f3          	callw  7e9a <print+0x8f>
    8ab1:	ff                   	(bad)  
    8ab2:	ff 66 83             	jmp    *-0x7d(%esi)
    8ab5:	c4 04 67             	les    (%edi,%eiz,2),%eax
                index_of_str = 0;
    8ab8:	66 c7 45 f0 00 00    	movw   $0x0,-0x10(%ebp)
    8abe:	00 00                	add    %al,(%eax)
                recived[index_of_str] = 0;
    8ac0:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8ac5:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8aca:	66 01 d0             	add    %dx,%ax
    8acd:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                continue;
    8ad1:	e9 a7 00 67 80       	jmp    80678b7d <__bss_start+0x8066ea35>
            }

            
        }
        else if(save >= '0' && save <='9'){
    8ad6:	7d af                	jge    8a87 <terminal+0x3a8>
    8ad8:	2f                   	das    
    8ad9:	7e 42                	jle    8b1d <terminal+0x43e>
    8adb:	67 80 7d af 39       	cmpb   $0x39,-0x51(%di)
    8ae0:	7f 3b                	jg     8b1d <terminal+0x43e>
           printc(save);
    8ae2:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    8ae8:	66 50                	push   %ax
    8aea:	66 e8 fe f3          	callw  7eec <prints+0x50>
    8aee:	ff                   	(bad)  
    8aef:	ff 66 83             	jmp    *-0x7d(%esi)
    8af2:	c4 04 67             	les    (%edi,%eiz,2),%eax
            number = number * 10 + save -'0';
    8af5:	66 8b 55 e8          	mov    -0x18(%ebp),%dx
    8af9:	66 89 d0             	mov    %dx,%ax
    8afc:	66 c1 e0 02          	shl    $0x2,%ax
    8b00:	66 01 d0             	add    %dx,%ax
    8b03:	66 01 c0             	add    %ax,%ax
    8b06:	66 89 c2             	mov    %ax,%dx
    8b09:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    8b0f:	66 01 d0             	add    %dx,%ax
    8b12:	66 83 e8 30          	sub    $0x30,%ax
    8b16:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
           // printsint(number);
            continue;
    8b1b:	eb 5e                	jmp    8b7b <terminal+0x49c>
        }
        else{
           printc(save);
    8b1d:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    8b23:	66 50                	push   %ax
    8b25:	66 e8 c3 f3          	callw  7eec <prints+0x50>
    8b29:	ff                   	(bad)  
    8b2a:	ff 66 83             	jmp    *-0x7d(%esi)
    8b2d:	c4 04 67             	les    (%edi,%eiz,2),%eax
           // if(save == '-' || save == 'q' || save == 'h' || save == 'l' || save =='s'){
            if(index_of_str < 10){
    8b30:	66 83 7d f0 09       	cmpw   $0x9,-0x10(%ebp)
    8b35:	7f 2c                	jg     8b63 <terminal+0x484>
                recived[index_of_str] =  save;
    8b37:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8b3c:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8b41:	66 01 c2             	add    %ax,%dx
    8b44:	67 8a 45 af          	mov    -0x51(%di),%al
    8b48:	67 88 02             	mov    %al,(%bp,%si)
                index_of_str ++;
    8b4b:	67 66 ff 45 f0       	incw   -0x10(%di)
                recived[index_of_str] = 0;
    8b50:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8b55:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8b5a:	66 01 d0             	add    %dx,%ax
    8b5d:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8b61:	eb 18                	jmp    8b7b <terminal+0x49c>
            }
            else if(index_of_str >= 10){
    8b63:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    8b69:	7e 10                	jle    8b7b <terminal+0x49c>
                prints("not added");
    8b6b:	66 68 b6 8e          	pushw  $0x8eb6
    8b6f:	00 00                	add    %al,(%eax)
    8b71:	66 e8 25 f3          	callw  7e9a <print+0x8f>
    8b75:	ff                   	(bad)  
    8b76:	ff 66 83             	jmp    *-0x7d(%esi)
    8b79:	c4 04 67             	les    (%edi,%eiz,2),%eax
    int number = 0;
    int k = 0;
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    8b7c:	66 83 7d bc 00       	cmpw   $0x0,-0x44(%ebp)
    8b81:	0f 85 7e fc 66 89    	jne    89678805 <__bss_start+0x8966e6bd>
    8b87:	f4                   	hlt    
            else if(index_of_str >= 10){
                prints("not added");
            }
        }
    }
}
    8b88:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8b8d:	66 5b                	pop    %bx
    8b8f:	66 5e                	pop    %si
    8b91:	66 5f                	pop    %di
    8b93:	66 5d                	pop    %bp
    8b95:	66 c3                	retw   

00008b97 <run>:
void run(int queue[],int size){
    8b97:	66 55                	push   %bp
    8b99:	66 89 e5             	mov    %sp,%bp
    8b9c:	66 83 ec 04          	sub    $0x4,%sp
    int j = 0;
    8ba0:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8ba7:	00 00                	add    %al,(%eax)
    clearscreen();
    8ba9:	66 e8 4c f2          	callw  7df9 <main+0xe7>
    8bad:	ff                   	(bad)  
    8bae:	ff 67 66             	jmp    *0x66(%edi)
    for(j = 0;j < size;j ++){
    8bb1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    8bb8:	e9 1d 01 67 66       	jmp    66678cda <__bss_start+0x6666eb92>
        //_delay();
        //_load_userProgram(queue[j]);
        //_delay();
        if(queue[j] == 1){
    8bbd:	8b 45 fc             	mov    -0x4(%ebp),%eax
    8bc0:	67 66 8d 14          	lea    (%si),%dx
    8bc4:	85 00                	test   %eax,(%eax)
    8bc6:	00 00                	add    %al,(%eax)
    8bc8:	00 67 66             	add    %ah,0x66(%edi)
    8bcb:	8b 45 08             	mov    0x8(%ebp),%eax
    8bce:	66 01 d0             	add    %dx,%ax
    8bd1:	67 66 8b 00          	mov    (%bx,%si),%ax
    8bd5:	66 83 f8 01          	cmp    $0x1,%ax
    8bd9:	75 26                	jne    8c01 <run+0x6a>
            _loadP(4,23,0xC000);
    8bdb:	66 68 00 c0          	pushw  $0xc000
    8bdf:	00 00                	add    %al,(%eax)
    8be1:	66 6a 17             	pushw  $0x17
    8be4:	66 6a 04             	pushw  $0x4
    8be7:	66 e8 a5 f6          	callw  8290 <_setPoint+0x15>
    8beb:	ff                   	(bad)  
    8bec:	ff 66 83             	jmp    *-0x7d(%esi)
    8bef:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
             _RunProgress(0xC000);
    8bf2:	68 00 c0 00 00       	push   $0xc000
    8bf7:	66 e8 cb f6          	callw  82c6 <_loadP+0x34>
    8bfb:	ff                   	(bad)  
    8bfc:	ff 66 83             	jmp    *-0x7d(%esi)
    8bff:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
        if(queue[j] == 2){
    8c02:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
    8c06:	67 66 8d 14          	lea    (%si),%dx
    8c0a:	85 00                	test   %eax,(%eax)
    8c0c:	00 00                	add    %al,(%eax)
    8c0e:	00 67 66             	add    %ah,0x66(%edi)
    8c11:	8b 45 08             	mov    0x8(%ebp),%eax
    8c14:	66 01 d0             	add    %dx,%ax
    8c17:	67 66 8b 00          	mov    (%bx,%si),%ax
    8c1b:	66 83 f8 02          	cmp    $0x2,%ax
    8c1f:	75 26                	jne    8c47 <run+0xb0>
            _loadP(4,27,0xC000);
    8c21:	66 68 00 c0          	pushw  $0xc000
    8c25:	00 00                	add    %al,(%eax)
    8c27:	66 6a 1b             	pushw  $0x1b
    8c2a:	66 6a 04             	pushw  $0x4
    8c2d:	66 e8 5f f6          	callw  8290 <_setPoint+0x15>
    8c31:	ff                   	(bad)  
    8c32:	ff 66 83             	jmp    *-0x7d(%esi)
    8c35:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
            _RunProgress(0xC000);
    8c38:	68 00 c0 00 00       	push   $0xc000
    8c3d:	66 e8 85 f6          	callw  82c6 <_loadP+0x34>
    8c41:	ff                   	(bad)  
    8c42:	ff 66 83             	jmp    *-0x7d(%esi)
    8c45:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
        if(queue[j] == 3){
    8c48:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
    8c4c:	67 66 8d 14          	lea    (%si),%dx
    8c50:	85 00                	test   %eax,(%eax)
    8c52:	00 00                	add    %al,(%eax)
    8c54:	00 67 66             	add    %ah,0x66(%edi)
    8c57:	8b 45 08             	mov    0x8(%ebp),%eax
    8c5a:	66 01 d0             	add    %dx,%ax
    8c5d:	67 66 8b 00          	mov    (%bx,%si),%ax
    8c61:	66 83 f8 03          	cmp    $0x3,%ax
    8c65:	75 26                	jne    8c8d <run+0xf6>
            _loadP(4,31,0xC000);
    8c67:	66 68 00 c0          	pushw  $0xc000
    8c6b:	00 00                	add    %al,(%eax)
    8c6d:	66 6a 1f             	pushw  $0x1f
    8c70:	66 6a 04             	pushw  $0x4
    8c73:	66 e8 19 f6          	callw  8290 <_setPoint+0x15>
    8c77:	ff                   	(bad)  
    8c78:	ff 66 83             	jmp    *-0x7d(%esi)
    8c7b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
            _RunProgress(0xC000);
    8c7e:	68 00 c0 00 00       	push   $0xc000
    8c83:	66 e8 3f f6          	callw  82c6 <_loadP+0x34>
    8c87:	ff                   	(bad)  
    8c88:	ff 66 83             	jmp    *-0x7d(%esi)
    8c8b:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
        if(queue[j] == 4){
    8c8e:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
    8c92:	67 66 8d 14          	lea    (%si),%dx
    8c96:	85 00                	test   %eax,(%eax)
    8c98:	00 00                	add    %al,(%eax)
    8c9a:	00 67 66             	add    %ah,0x66(%edi)
    8c9d:	8b 45 08             	mov    0x8(%ebp),%eax
    8ca0:	66 01 d0             	add    %dx,%ax
    8ca3:	67 66 8b 00          	mov    (%bx,%si),%ax
    8ca7:	66 83 f8 04          	cmp    $0x4,%ax
    8cab:	75 26                	jne    8cd3 <run+0x13c>
            _loadP(4,35,0xC000);
    8cad:	66 68 00 c0          	pushw  $0xc000
    8cb1:	00 00                	add    %al,(%eax)
    8cb3:	66 6a 23             	pushw  $0x23
    8cb6:	66 6a 04             	pushw  $0x4
    8cb9:	66 e8 d3 f5          	callw  8290 <_setPoint+0x15>
    8cbd:	ff                   	(bad)  
    8cbe:	ff 66 83             	jmp    *-0x7d(%esi)
    8cc1:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
            _RunProgress(0xC000);
    8cc4:	68 00 c0 00 00       	push   $0xc000
    8cc9:	66 e8 f9 f5          	callw  82c6 <_loadP+0x34>
    8ccd:	ff                   	(bad)  
    8cce:	ff 66 83             	jmp    *-0x7d(%esi)
    8cd1:	c4 04 67             	les    (%edi,%eiz,2),%eax
    }
}
void run(int queue[],int size){
    int j = 0;
    clearscreen();
    for(j = 0;j < size;j ++){
    8cd4:	66 ff 45 fc          	incw   -0x4(%ebp)
    8cd8:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8cdd:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    8ce2:	0f 8c d5 fe 66 e8    	jl     e8678bbd <__bss_start+0xe866ea75>
        if(queue[j] == 4){
            _loadP(4,35,0xC000);
            _RunProgress(0xC000);
        }
    }
     clearscreen();
    8ce8:	0f f1 ff             	psllw  %mm7,%mm7
    8ceb:	ff 66 c9             	jmp    *-0x37(%esi)
    8cee:	66 c3                	retw   
