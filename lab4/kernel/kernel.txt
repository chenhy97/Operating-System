
kernel.elf:     file format elf32-i386


Disassembly of section .text:

00007d00 <_start>:
    7d00:	66 b8 00 00          	mov    $0x0,%ax
    7d04:	00 00                	add    %al,(%eax)
    7d06:	8e d8                	mov    %eax,%ds
    7d08:	8e c0                	mov    %eax,%es
    7d0a:	66 ea 12 7d 00 00    	ljmpw  $0x0,$0x7d12
	...

00007d12 <main>:
#include"../syscall/use.h"
#include"../shell/command.h"
#include"kernel.h"
int main(){
    7d12:	66 55                	push   %bp
    7d14:	66 89 e5             	mov    %sp,%bp
    7d17:	66 83 ec 0c          	sub    $0xc,%sp
     Initial_Int();
    7d1b:	66 e8 d5 04          	callw  81f4 <strcpy+0x7a>
    7d1f:	00 00                	add    %al,(%eax)
    clearscreen();
    7d21:	66 e8 d4 00          	callw  7df9 <main+0xe7>
    7d25:	00 00                	add    %al,(%eax)
    _loadP(4,23,0xC000);
    7d27:	66 68 00 c0          	pushw  $0xc000
    7d2b:	00 00                	add    %al,(%eax)
    7d2d:	66 6a 17             	pushw  $0x17
    7d30:	66 6a 04             	pushw  $0x4
    7d33:	66 e8 5e 05          	callw  8295 <_setPoint+0x15>
    7d37:	00 00                	add    %al,(%eax)
    7d39:	66 83 c4 0c          	add    $0xc,%sp
     //_loadP(4,23,0xC000);
     _RunProgress(0xC000);
    7d3d:	66 68 00 c0          	pushw  $0xc000
    7d41:	00 00                	add    %al,(%eax)
    7d43:	66 e8 84 05          	callw  82cb <_loadP+0x34>
    7d47:	00 00                	add    %al,(%eax)
    7d49:	66 83 c4 04          	add    $0x4,%sp
    char const *Messeage = "Built by Chen Hongyang on March 20, 2018";
    7d4d:	67 66 c7 45 fc dc 8b 	movw   $0x8bdc,-0x4(%di)
    7d54:	00 00                	add    %al,(%eax)
    print("===================================================",9,12);
    7d56:	66 6a 0c             	pushw  $0xc
    7d59:	66 6a 09             	pushw  $0x9
    7d5c:	66 68 08 8c          	pushw  $0x8c08
    7d60:	00 00                	add    %al,(%eax)
    7d62:	66 e8 a3 00          	callw  7e09 <clearscreen+0xe>
    7d66:	00 00                	add    %al,(%eax)
    7d68:	66 83 c4 0c          	add    $0xc,%sp

    print("chenhyOS",10,32);
    7d6c:	66 6a 20             	pushw  $0x20
    7d6f:	66 6a 0a             	pushw  $0xa
    7d72:	66 68 3c 8c          	pushw  $0x8c3c
    7d76:	00 00                	add    %al,(%eax)
    7d78:	66 e8 8d 00          	callw  7e09 <clearscreen+0xe>
    7d7c:	00 00                	add    %al,(%eax)
    7d7e:	66 83 c4 0c          	add    $0xc,%sp
   print(Messeage,11,16); //print the msg
    7d82:	66 6a 10             	pushw  $0x10
    7d85:	66 6a 0b             	pushw  $0xb
    7d88:	67 66 ff 75 fc       	pushw  -0x4(%di)
    7d8d:	66 e8 78 00          	callw  7e09 <clearscreen+0xe>
    7d91:	00 00                	add    %al,(%eax)
    7d93:	66 83 c4 0c          	add    $0xc,%sp
   print("===================================================",12,12);
    7d97:	66 6a 0c             	pushw  $0xc
    7d9a:	66 6a 0c             	pushw  $0xc
    7d9d:	66 68 08 8c          	pushw  $0x8c08
    7da1:	00 00                	add    %al,(%eax)
    7da3:	66 e8 62 00          	callw  7e09 <clearscreen+0xe>
    7da7:	00 00                	add    %al,(%eax)
    7da9:	66 83 c4 0c          	add    $0xc,%sp
   

    char const *Msg1 = "Press any key to get help\n\r";
    7dad:	67 66 c7 45 f8 45 8c 	movw   $0x8c45,-0x8(%di)
    7db4:	00 00                	add    %al,(%eax)
   prints(Msg1);
    7db6:	67 66 ff 75 f8       	pushw  -0x8(%di)
    7dbb:	66 e8 db 00          	callw  7e9a <print+0x8f>
    7dbf:	00 00                	add    %al,(%eax)
    7dc1:	66 83 c4 04          	add    $0x4,%sp
   print("!",13,39);
    7dc5:	66 6a 27             	pushw  $0x27
    7dc8:	66 6a 0d             	pushw  $0xd
    7dcb:	66 68 61 8c          	pushw  $0x8c61
    7dcf:	00 00                	add    %al,(%eax)
    7dd1:	66 e8 34 00          	callw  7e09 <clearscreen+0xe>
    7dd5:	00 00                	add    %al,(%eax)
    7dd7:	66 83 c4 0c          	add    $0xc,%sp
   
   char a = waitforinput();
    7ddb:	66 e8 d7 02          	callw  80b6 <read_and_print_input+0x3a>
    7ddf:	00 00                	add    %al,(%eax)
    7de1:	67 88 45 f7          	mov    %al,-0x9(%di)
   clearscreen();   
    7de5:	66 e8 10 00          	callw  7df9 <main+0xe7>
    7de9:	00 00                	add    %al,(%eax)
    
    /*buildmap();还有待解决debug
    void *addr = (void*) 0xB100;
    _loadP(2,21,addr);
    showtable();*/
    terminal();
    7deb:	66 e8 d7 07          	callw  85c6 <printname+0x29>
    7def:	00 00                	add    %al,(%eax)
    return 0;
    7df1:	66 b8 00 00          	mov    $0x0,%ax
    7df5:	00 00                	add    %al,(%eax)
    7df7:	66 c9                	leavew 
    7df9:	66 c3                	retw   

00007dfb <clearscreen>:
#include "use.h"
void clearscreen(){
    7dfb:	66 55                	push   %bp
    7dfd:	66 89 e5             	mov    %sp,%bp
	_clearscreen();//C调用汇编时会压入四个字节，必须考虑到这个，写出newret，是pop edx,而非 pop dx；
    7e00:	66 e8 1d 04          	callw  8221 <alpha>
    7e04:	00 00                	add    %al,(%eax)
	//__asm__("pop %ax");
	return ;
    7e06:	90                   	nop
}
    7e07:	66 5d                	pop    %bp
    7e09:	66 c3                	retw   

00007e0b <print>:
void print(char const* Messeage,int row,int colume){//need the pos
    7e0b:	66 55                	push   %bp
    7e0d:	66 89 e5             	mov    %sp,%bp
    7e10:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    7e14:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    7e19:	66 89 d0             	mov    %dx,%ax
    7e1c:	66 c1 e0 02          	shl    $0x2,%ax
    7e20:	66 01 d0             	add    %dx,%ax
    7e23:	66 c1 e0 04          	shl    $0x4,%ax
    7e27:	66 89 c2             	mov    %ax,%dx
    7e2a:	67 66 8b 45 10       	mov    0x10(%di),%ax
    7e2f:	66 01 d0             	add    %dx,%ax
    7e32:	66 01 c0             	add    %ax,%ax
    7e35:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    7e3a:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    7e41:	00 00                	add    %al,(%eax)
	int index = 0;
    7e43:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    7e4a:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    7e4c:	eb 35                	jmp    7e83 <print+0x78>
		_printchar(Messeage[index],pos,color);
    7e4e:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    7e53:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7e58:	66 01 d0             	add    %dx,%ax
    7e5b:	67 8a 00             	mov    (%bx,%si),%al
    7e5e:	66 0f be c0          	movsbw %al,%ax
    7e62:	67 66 ff 75 f4       	pushw  -0xc(%di)
    7e67:	67 66 ff 75 fc       	pushw  -0x4(%di)
    7e6c:	66 50                	push   %ax
    7e6e:	66 e8 bd 03          	callw  822f <_clearscreen+0xc>
    7e72:	00 00                	add    %al,(%eax)
    7e74:	66 83 c4 0c          	add    $0xc,%sp
		index++;
    7e78:	67 66 ff 45 f8       	incw   -0x8(%di)
		pos = pos + 2;
    7e7d:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
}
void print(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    7e83:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    7e88:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7e8d:	66 01 d0             	add    %dx,%ax
    7e90:	67 8a 00             	mov    (%bx,%si),%al
    7e93:	84 c0                	test   %al,%al
    7e95:	75 b7                	jne    7e4e <print+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    7e97:	90                   	nop
}
    7e98:	66 c9                	leavew 
    7e9a:	66 c3                	retw   

00007e9c <prints>:
void prints(char const *Messeage){//can follow the position of your input
    7e9c:	66 55                	push   %bp
    7e9e:	66 89 e5             	mov    %sp,%bp
    7ea1:	66 83 ec 04          	sub    $0x4,%sp
	int index = 0;
    7ea5:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    7eac:	00 00                	add    %al,(%eax)
	while(Messeage[index]){
    7eae:	eb 25                	jmp    7ed5 <prints+0x39>
		_showchar(Messeage[index]);
    7eb0:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    7eb5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7eba:	66 01 d0             	add    %dx,%ax
    7ebd:	67 8a 00             	mov    (%bx,%si),%al
    7ec0:	66 0f be c0          	movsbw %al,%ax
    7ec4:	66 50                	push   %ax
    7ec6:	66 e8 a2 03          	callw  826c <_readinput+0x17>
    7eca:	00 00                	add    %al,(%eax)
    7ecc:	66 83 c4 04          	add    $0x4,%sp
		index++;
    7ed0:	67 66 ff 45 fc       	incw   -0x4(%di)
	}
	return;
}
void prints(char const *Messeage){//can follow the position of your input
	int index = 0;
	while(Messeage[index]){
    7ed5:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    7eda:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7edf:	66 01 d0             	add    %dx,%ax
    7ee2:	67 8a 00             	mov    (%bx,%si),%al
    7ee5:	84 c0                	test   %al,%al
    7ee7:	75 c7                	jne    7eb0 <prints+0x14>
		_showchar(Messeage[index]);
		index++;
	}
	return;
    7ee9:	90                   	nop
}
    7eea:	66 c9                	leavew 
    7eec:	66 c3                	retw   

00007eee <printc>:
void printc(char alpha){
    7eee:	66 55                	push   %bp
    7ef0:	66 89 e5             	mov    %sp,%bp
    7ef3:	66 83 ec 04          	sub    $0x4,%sp
    7ef7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7efc:	67 88 45 fc          	mov    %al,-0x4(%di)
	_showchar(alpha);
    7f00:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    7f06:	66 50                	push   %ax
    7f08:	66 e8 60 03          	callw  826c <_readinput+0x17>
    7f0c:	00 00                	add    %al,(%eax)
    7f0e:	66 83 c4 04          	add    $0x4,%sp
	return;
    7f12:	90                   	nop
}
    7f13:	66 c9                	leavew 
    7f15:	66 c3                	retw   

00007f17 <printsint>:
void printsint(int num){
    7f17:	66 55                	push   %bp
    7f19:	66 89 e5             	mov    %sp,%bp
    7f1c:	66 83 ec 2c          	sub    $0x2c,%sp
	 int save = num;
    7f20:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f25:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	 int count = 0;
    7f2a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    7f31:	00 00                	add    %al,(%eax)
	 char number[30];
	 number[count] = 0;
    7f33:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    7f38:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    7f3d:	66 01 d0             	add    %dx,%ax
    7f40:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	if(num < 0){
    7f44:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    7f4a:	79 14                	jns    7f60 <printsint+0x49>
		printc('-');
    7f4c:	66 6a 2d             	pushw  $0x2d
    7f4f:	66 e8 99 ff          	callw  7eec <prints+0x50>
    7f53:	ff                   	(bad)  
    7f54:	ff 66 83             	jmp    *-0x7d(%esi)
    7f57:	c4 04 67             	les    (%edi,%eiz,2),%eax
		num = -num;
    7f5a:	66 f7 5d 08          	negw   0x8(%ebp)
    7f5e:	eb 15                	jmp    7f75 <printsint+0x5e>
	}
	else if(num == 0){
    7f60:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    7f66:	75 0d                	jne    7f75 <printsint+0x5e>
		printc('0');
    7f68:	66 6a 30             	pushw  $0x30
    7f6b:	66 e8 7d ff          	callw  7eec <prints+0x50>
    7f6f:	ff                   	(bad)  
    7f70:	ff 66 83             	jmp    *-0x7d(%esi)
    7f73:	c4 04 eb             	les    (%ebx,%ebp,8),%eax
	}
	while(num > 0){
    7f76:	50                   	push   %eax
		number[count] = num % 10 + '0';
    7f77:	67 66 8b 45 08       	mov    0x8(%di),%ax
    7f7c:	66 b9 0a 00          	mov    $0xa,%cx
    7f80:	00 00                	add    %al,(%eax)
    7f82:	66 99                	cwtd   
    7f84:	66 f7 f9             	idiv   %cx
    7f87:	66 89 d0             	mov    %dx,%ax
    7f8a:	66 83 c0 30          	add    $0x30,%ax
    7f8e:	67 66 8d 4d d6       	lea    -0x2a(%di),%cx
    7f93:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    7f98:	66 01 ca             	add    %cx,%dx
    7f9b:	67 88 02             	mov    %al,(%bp,%si)
		num  = num / 10;
    7f9e:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    7fa3:	66 b8 67 66          	mov    $0x6667,%ax
    7fa7:	66 66 66 f7 e9       	data32 data32 imul %cx
    7fac:	66 c1 fa 02          	sar    $0x2,%dx
    7fb0:	66 89 c8             	mov    %cx,%ax
    7fb3:	66 c1 f8 1f          	sar    $0x1f,%ax
    7fb7:	66 29 c2             	sub    %ax,%dx
    7fba:	66 89 d0             	mov    %dx,%ax
    7fbd:	67 66 89 45 08       	mov    %ax,0x8(%di)
		count ++;
    7fc2:	67 66 ff 45 fc       	incw   -0x4(%di)
		num = -num;
	}
	else if(num == 0){
		printc('0');
	}
	while(num > 0){
    7fc7:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    7fcd:	7f a8                	jg     7f77 <printsint+0x60>
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    7fcf:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    7fd4:	66 48                	dec    %ax
    7fd6:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    7fdb:	eb 25                	jmp    8002 <printsint+0xeb>
		printc(number[i]);
    7fdd:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    7fe2:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    7fe7:	66 01 d0             	add    %dx,%ax
    7fea:	67 8a 00             	mov    (%bx,%si),%al
    7fed:	66 0f be c0          	movsbw %al,%ax
    7ff1:	66 50                	push   %ax
    7ff3:	66 e8 f5 fe          	callw  7eec <prints+0x50>
    7ff7:	ff                   	(bad)  
    7ff8:	ff 66 83             	jmp    *-0x7d(%esi)
    7ffb:	c4 04 67             	les    (%edi,%eiz,2),%eax
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    7ffe:	66 ff 4d f8          	decw   -0x8(%ebp)
    8002:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    8008:	79 d3                	jns    7fdd <printsint+0xc6>
		printc(number[i]);
	}
	return;
    800a:	90                   	nop
}
    800b:	66 c9                	leavew 
    800d:	66 c3                	retw   

0000800f <print_next_line>:
 void print_next_line(char const* Messeage){
    800f:	66 55                	push   %bp
    8011:	66 89 e5             	mov    %sp,%bp
	prints(Messeage);
    8014:	67 66 ff 75 08       	pushw  0x8(%di)
    8019:	66 e8 7d fe          	callw  7e9a <print+0x8f>
    801d:	ff                   	(bad)  
    801e:	ff 66 83             	jmp    *-0x7d(%esi)
    8021:	c4 04 66             	les    (%esi,%eiz,2),%eax
	prints("\n\r");
    8024:	68 63 8c 00 00       	push   $0x8c63
    8029:	66 e8 6d fe          	callw  7e9a <print+0x8f>
    802d:	ff                   	(bad)  
    802e:	ff 66 83             	jmp    *-0x7d(%esi)
    8031:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    8034:	66 c9                	leavew 
    8036:	66 c3                	retw   

00008038 <strlen>:
 int strlen(char const *Messeage){
    8038:	66 55                	push   %bp
    803a:	66 89 e5             	mov    %sp,%bp
    803d:	66 83 ec 08          	sub    $0x8,%sp
	int i = 0;
    8041:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8048:	00 00                	add    %al,(%eax)
	int count = 0;
    804a:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8051:	00 00                	add    %al,(%eax)
	while(Messeage[i] != 0){
    8053:	eb 0a                	jmp    805f <strlen+0x27>
		i++;
    8055:	67 66 ff 45 fc       	incw   -0x4(%di)
		count++;
    805a:	67 66 ff 45 f8       	incw   -0x8(%di)
	return;
}
 int strlen(char const *Messeage){
	int i = 0;
	int count = 0;
	while(Messeage[i] != 0){
    805f:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8064:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8069:	66 01 d0             	add    %dx,%ax
    806c:	67 8a 00             	mov    (%bx,%si),%al
    806f:	84 c0                	test   %al,%al
    8071:	75 e2                	jne    8055 <strlen+0x1d>
		i++;
		count++;
	}
	return count;
    8073:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    8078:	66 c9                	leavew 
    807a:	66 c3                	retw   

0000807c <read_and_print_input>:
 void read_and_print_input(){
    807c:	66 55                	push   %bp
    807e:	66 89 e5             	mov    %sp,%bp
    8081:	66 83 ec 08          	sub    $0x8,%sp
    int i = 1;
    8085:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    808c:	00 00                	add    %al,(%eax)
    while(i){
    808e:	eb 1c                	jmp    80ac <read_and_print_input+0x30>
        char savechar = _readinput();
    8090:	66 e8 bf 01          	callw  8253 <_printchar+0x22>
    8094:	00 00                	add    %al,(%eax)
    8096:	67 88 45 fb          	mov    %al,-0x5(%di)
        _showchar(savechar);
    809a:	67 66 0f be 45 fb    	movsbw -0x5(%di),%ax
    80a0:	66 50                	push   %ax
    80a2:	66 e8 c6 01          	callw  826c <_readinput+0x17>
    80a6:	00 00                	add    %al,(%eax)
    80a8:	66 83 c4 04          	add    $0x4,%sp
	}
	return count;
}
 void read_and_print_input(){
    int i = 1;
    while(i){
    80ac:	67 66 83 7d fc 00    	cmpw   $0x0,-0x4(%di)
    80b2:	75 dc                	jne    8090 <read_and_print_input+0x14>
        char savechar = _readinput();
        _showchar(savechar);
    }
}
    80b4:	66 c9                	leavew 
    80b6:	66 c3                	retw   

000080b8 <waitforinput>:
 char waitforinput(){
    80b8:	66 55                	push   %bp
    80ba:	66 89 e5             	mov    %sp,%bp
    80bd:	66 83 ec 04          	sub    $0x4,%sp
	char result = _readinput();
    80c1:	66 e8 8e 01          	callw  8253 <_printchar+0x22>
    80c5:	00 00                	add    %al,(%eax)
    80c7:	67 88 45 ff          	mov    %al,-0x1(%di)
	return result;
    80cb:	67 8a 45 ff          	mov    -0x1(%di),%al
}
    80cf:	66 c9                	leavew 
    80d1:	66 c3                	retw   

000080d3 <strcmp>:
int strcmp(char *m1,char const* m2){
    80d3:	66 55                	push   %bp
    80d5:	66 89 e5             	mov    %sp,%bp
    80d8:	66 83 ec 04          	sub    $0x4,%sp
		if(m1[i] != m2[i]){
			return 0;
		}
	}
	return 1;*/
	int i = 0;
    80dc:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    80e3:	00 00                	add    %al,(%eax)
	while(m1[i] != 0 && m2[i]!= 0){
    80e5:	eb 31                	jmp    8118 <strcmp+0x45>
		if(m1[i] != m2[i]){
    80e7:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    80ec:	67 66 8b 45 08       	mov    0x8(%di),%ax
    80f1:	66 01 d0             	add    %dx,%ax
    80f4:	67 8a 10             	mov    (%bx,%si),%dl
    80f7:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    80fc:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8101:	66 01 c8             	add    %cx,%ax
    8104:	67 8a 00             	mov    (%bx,%si),%al
    8107:	38 c2                	cmp    %al,%dl
    8109:	74 08                	je     8113 <strcmp+0x40>
			return 0;
    810b:	66 b8 00 00          	mov    $0x0,%ax
    810f:	00 00                	add    %al,(%eax)
    8111:	eb 63                	jmp    8176 <strcmp+0xa3>
		}
		i++;
    8113:	67 66 ff 45 fc       	incw   -0x4(%di)
			return 0;
		}
	}
	return 1;*/
	int i = 0;
	while(m1[i] != 0 && m2[i]!= 0){
    8118:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    811d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8122:	66 01 d0             	add    %dx,%ax
    8125:	67 8a 00             	mov    (%bx,%si),%al
    8128:	84 c0                	test   %al,%al
    812a:	74 14                	je     8140 <strcmp+0x6d>
    812c:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8131:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8136:	66 01 d0             	add    %dx,%ax
    8139:	67 8a 00             	mov    (%bx,%si),%al
    813c:	84 c0                	test   %al,%al
    813e:	75 a7                	jne    80e7 <strcmp+0x14>
		if(m1[i] != m2[i]){
			return 0;
		}
		i++;
	}
	if(m1[i] != 0 || m2[i] != 0){
    8140:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8145:	67 66 8b 45 08       	mov    0x8(%di),%ax
    814a:	66 01 d0             	add    %dx,%ax
    814d:	67 8a 00             	mov    (%bx,%si),%al
    8150:	84 c0                	test   %al,%al
    8152:	75 14                	jne    8168 <strcmp+0x95>
    8154:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8159:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    815e:	66 01 d0             	add    %dx,%ax
    8161:	67 8a 00             	mov    (%bx,%si),%al
    8164:	84 c0                	test   %al,%al
    8166:	74 08                	je     8170 <strcmp+0x9d>
		return 0;
    8168:	66 b8 00 00          	mov    $0x0,%ax
    816c:	00 00                	add    %al,(%eax)
    816e:	eb 06                	jmp    8176 <strcmp+0xa3>
	}
	return 1;
    8170:	66 b8 01 00          	mov    $0x1,%ax
    8174:	00 00                	add    %al,(%eax)
}
    8176:	66 c9                	leavew 
    8178:	66 c3                	retw   

0000817a <strcpy>:
void strcpy(char const *src,char *des){
    817a:	66 55                	push   %bp
    817c:	66 89 e5             	mov    %sp,%bp
    817f:	66 83 ec 08          	sub    $0x8,%sp
	int len = strlen(src);
    8183:	67 66 ff 75 08       	pushw  0x8(%di)
    8188:	66 e8 aa fe          	callw  8036 <print_next_line+0x27>
    818c:	ff                   	(bad)  
    818d:	ff 66 83             	jmp    *-0x7d(%esi)
    8190:	c4 04 67             	les    (%edi,%eiz,2),%eax
    8193:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	int i = 0;
    8197:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    819e:	00 00                	add    %al,(%eax)
	for(i = 0;i < len;i ++){
    81a0:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    81a7:	00 00                	add    %al,(%eax)
    81a9:	eb 3b                	jmp    81e6 <strcpy+0x6c>
    	des[i] =  src[i];
    81ab:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    81b0:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    81b5:	66 01 c2             	add    %ax,%dx
    81b8:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    81bd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    81c2:	66 01 c8             	add    %cx,%ax
    81c5:	67 8a 00             	mov    (%bx,%si),%al
    81c8:	67 88 02             	mov    %al,(%bp,%si)
        des[i+1] = 0;
    81cb:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    81d0:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    81d5:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    81da:	66 01 d0             	add    %dx,%ax
    81dd:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	return 1;
}
void strcpy(char const *src,char *des){
	int len = strlen(src);
	int i = 0;
	for(i = 0;i < len;i ++){
    81e1:	67 66 ff 45 fc       	incw   -0x4(%di)
    81e6:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    81eb:	67 66 3b 45 f8       	cmp    -0x8(%di),%ax
    81f0:	7c b9                	jl     81ab <strcpy+0x31>
    	des[i] =  src[i];
        des[i+1] = 0;
	}
}
    81f2:	66 c9                	leavew 
    81f4:	66 c3                	retw   

000081f6 <Initial_Int>:
		printsint(map->size[i]);
		printsint(map->sector[i]);
		prints("\n\r");
	}
}*/
void Initial_Int(){
    81f6:	66 55                	push   %bp
    81f8:	66 89 e5             	mov    %sp,%bp
	_initialInt();
    81fb:	66 e8 79 01          	callw  8378 <_SetINT34h+0xc>
    81ff:	00 00                	add    %al,(%eax)
	return;
    8201:	90                   	nop
    8202:	66 5d                	pop    %bp
    8204:	66 c3                	retw   
    8206:	66 90                	xchg   %ax,%ax
    8208:	66 90                	xchg   %ax,%ax
    820a:	66 90                	xchg   %ax,%ax
    820c:	66 90                	xchg   %ax,%ax
    820e:	66 90                	xchg   %ax,%ax

00008210 <Pg_Segment>:
	...

00008212 <Pg_Offset>:
    8212:	00 c0                	add    %al,%al

00008214 <info_Segment>:
	...

00008216 <info_Offset>:
    8216:	00 b1 08 00 00 00    	add    %dh,0x8(%ecx)

00008218 <count>:
    8218:	08 00                	or     %al,(%eax)

00008219 <x>:
	...

0000821b <y>:
	...

0000821d <xdul>:
    821d:	01 00                	add    %eax,(%eax)

0000821f <ydul>:
    821f:	01 00                	add    %eax,(%eax)

00008221 <alpha>:
    8221:	2d 00 c8 00 00       	sub    $0xc800,%eax

00008223 <_clearscreen>:
    8223:	c8 00 00 00          	enter  $0x0,$0x0
    8227:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    822c:	c9                   	leave  
    822d:	66 5a                	pop    %dx
    822f:	ff e2                	jmp    *%edx

00008231 <_printchar>:
    8231:	c8 00 00 00          	enter  $0x0,$0x0
    8235:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
    823a:	57                   	push   %edi
    823b:	66 8b 4e 06          	mov    0x6(%esi),%cx
    823f:	66 8b 7e 0a          	mov    0xa(%esi),%di
    8243:	66 8b 56 0e          	mov    0xe(%esi),%dx
    8247:	88 d5                	mov    %dl,%ch
    8249:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
    8250:	00 66 5a             	add    %ah,0x5a(%esi)
    8253:	ff e2                	jmp    *%edx

00008255 <_readinput>:
    8255:	c8 04 00 00          	enter  $0x4,$0x0
    8259:	b4 00                	mov    $0x0,%ah
    825b:	cd 16                	int    $0x16
    825d:	b4 00                	mov    $0x0,%ah
    825f:	66 67 89 04          	mov    %ax,(%si)
    8263:	24 66                	and    $0x66,%al
    8265:	67 8b 04             	mov    (%si),%eax
    8268:	24 c9                	and    $0xc9,%al
    826a:	66 5a                	pop    %dx
    826c:	ff e2                	jmp    *%edx

0000826e <_showchar>:
    826e:	c8 00 00 00          	enter  $0x0,$0x0
    8272:	8b 46 06             	mov    0x6(%esi),%eax
    8275:	b4 0e                	mov    $0xe,%ah
    8277:	b3 00                	mov    $0x0,%bl
    8279:	cd 10                	int    $0x10
    827b:	c9                   	leave  
    827c:	66 5a                	pop    %dx
    827e:	ff e2                	jmp    *%edx

00008280 <_setPoint>:
    8280:	c8 00 00 00          	enter  $0x0,$0x0
    8284:	53                   	push   %ebx
    8285:	b7 00                	mov    $0x0,%bh
    8287:	8a 77 06             	mov    0x6(%edi),%dh
    828a:	8a 57 0a             	mov    0xa(%edi),%dl
    828d:	b4 02                	mov    $0x2,%ah
    828f:	cd 10                	int    $0x10
    8291:	5b                   	pop    %ebx
    8292:	c9                   	leave  
    8293:	66 5a                	pop    %dx
    8295:	ff e2                	jmp    *%edx

00008297 <_loadP>:
    8297:	c8 00 00 00          	enter  $0x0,$0x0
    829b:	60                   	pusha  
    829c:	06                   	push   %es
    829d:	1e                   	push   %ds
    829e:	52                   	push   %edx
    829f:	8c c8                	mov    %cs,%eax
    82a1:	8e d8                	mov    %eax,%ds
    82a3:	8e c0                	mov    %eax,%es
    82a5:	b2 00                	mov    $0x0,%dl
    82a7:	8b 46 0a             	mov    0xa(%esi),%eax
    82aa:	b3 12                	mov    $0x12,%bl
    82ac:	f6 f3                	div    %bl
    82ae:	88 e1                	mov    %ah,%cl
    82b0:	30 e4                	xor    %ah,%ah
    82b2:	b3 02                	mov    $0x2,%bl
    82b4:	f6 f3                	div    %bl
    82b6:	88 e6                	mov    %ah,%dh
    82b8:	88 c5                	mov    %al,%ch
    82ba:	8a 46 06             	mov    0x6(%esi),%al
    82bd:	8b 5e 0e             	mov    0xe(%esi),%ebx
    82c0:	b4 02                	mov    $0x2,%ah
    82c2:	cd 13                	int    $0x13
    82c4:	5a                   	pop    %edx
    82c5:	1f                   	pop    %ds
    82c6:	07                   	pop    %es
    82c7:	61                   	popa   
    82c8:	c9                   	leave  
    82c9:	66 5a                	pop    %dx
    82cb:	ff e2                	jmp    *%edx

000082cd <_RunProgress>:
    82cd:	c8 00 00 00          	enter  $0x0,$0x0
    82d1:	06                   	push   %es
    82d2:	60                   	pusha  
    82d3:	06                   	push   %es
    82d4:	8c c8                	mov    %cs,%eax
    82d6:	8e d8                	mov    %eax,%ds
    82d8:	8e c0                	mov    %eax,%es
    82da:	8b 5e 06             	mov    0x6(%esi),%ebx
    82dd:	ff d3                	call   *%ebx
    82df:	07                   	pop    %es
    82e0:	61                   	popa   

000082e1 <S>:
    82e1:	b4 00                	mov    $0x0,%ah
    82e3:	cd 16                	int    $0x16
    82e5:	07                   	pop    %es
    82e6:	c9                   	leave  
    82e7:	66 5a                	pop    %dx
    82e9:	ff e2                	jmp    *%edx

000082eb <_SetINT20h>:
    82eb:	53                   	push   %ebx
    82ec:	51                   	push   %ecx
    82ed:	52                   	push   %edx
    82ee:	b4 01                	mov    $0x1,%ah
    82f0:	cd 16                	int    $0x16
    82f2:	5a                   	pop    %edx
    82f3:	59                   	pop    %ecx
    82f4:	5b                   	pop    %ebx
    82f5:	75 ea                	jne    82e1 <S>
    82f7:	cf                   	iret   

000082f8 <_SetINT08h>:
    82f8:	60                   	pusha  
    82f9:	52                   	push   %edx
    82fa:	0f a8                	push   %gs
    82fc:	fe 0e                	decb   (%esi)
    82fe:	18 82 75 4b 83 3e    	sbb    %al,0x3e834b75(%edx)

00008302 <notc>:
    8302:	83 3e 21             	cmpl   $0x21,(%esi)
    8305:	82                   	(bad)  
    8306:	2d 75 08 c7 06       	sub    $0x6c70875,%eax
    830b:	21 82 5c 00 eb 2d    	and    %eax,0x2deb005c(%edx)

00008311 <changleft>:
    8311:	83 3e 21             	cmpl   $0x21,(%esi)
    8314:	82                   	(bad)  
    8315:	5c                   	pop    %esp
    8316:	75 08                	jne    8320 <changright>
    8318:	c7 06 21 82 7c 00    	movl   $0x7c8221,(%esi)
    831e:	eb 1e                	jmp    833e <show>

00008320 <changright>:
    8320:	83 3e 21             	cmpl   $0x21,(%esi)
    8323:	82                   	(bad)  
    8324:	7c 75                	jl     839b <_initialInt+0x21>
    8326:	08 c7                	or     %al,%bh
    8328:	06                   	push   %es
    8329:	21 82 2f 00 eb 0f    	and    %eax,0xfeb002f(%edx)

0000832f <changheng>:
    832f:	83 3e 21             	cmpl   $0x21,(%esi)
    8332:	82                   	(bad)  
    8333:	2f                   	das    
    8334:	75 cc                	jne    8302 <notc>
    8336:	c7 06 21 82 2d 00    	movl   $0x2d8221,(%esi)
    833c:	eb 00                	jmp    833e <show>

0000833e <show>:
    833e:	ff 36                	pushl  (%esi)
    8340:	21 82 6a 00 e8 fc    	and    %eax,-0x317ff96(%edx)
    8346:	00 58 c6             	add    %bl,-0x3a(%eax)
    8349:	06                   	push   %es
    834a:	18 82 08 b0 20 e6    	sbb    %al,-0x19df4ff8(%edx)

0000834d <end>:
    834d:	b0 20                	mov    $0x20,%al
    834f:	e6 20                	out    %al,$0x20
    8351:	e6 a0                	out    %al,$0xa0
    8353:	0f a9                	pop    %gs
    8355:	5a                   	pop    %edx
    8356:	61                   	popa   
    8357:	cf                   	iret   

00008358 <_SetINT33h>:
    8358:	60                   	pusha  
    8359:	1e                   	push   %ds
    835a:	0f a8                	push   %gs
    835c:	6a 00                	push   $0x0
    835e:	e8 27 01 0f a9       	call   a90f848a <__bss_start+0xa90ee456>
    8363:	1f                   	pop    %ds
    8364:	61                   	popa   
    8365:	b0 20                	mov    $0x20,%al
    8367:	e6 20                	out    %al,$0x20
    8369:	e6 a0                	out    %al,$0xa0
    836b:	cf                   	iret   

0000836c <_SetINT34h>:
    836c:	60                   	pusha  
    836d:	1e                   	push   %ds
    836e:	0f a8                	push   %gs
    8370:	6a 00                	push   $0x0
    8372:	e8 28 02 0f a9       	call   a90f859f <__bss_start+0xa90ee56b>
    8377:	1f                   	pop    %ds
    8378:	61                   	popa   
    8379:	cf                   	iret   

0000837a <_initialInt>:
    837a:	c8 00 00 00          	enter  $0x0,$0x0
    837e:	60                   	pusha  
    837f:	06                   	push   %es
    8380:	1e                   	push   %ds
    8381:	8c c8                	mov    %cs,%eax
    8383:	8e d8                	mov    %eax,%ds
    8385:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    838a:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
    838f:	00 f7                	add    %dh,%bh
    8391:	e3 89                	jecxz  831c <changleft+0xb>
    8393:	c7                   	(bad)  
    8394:	b8 eb 82 26 89       	mov    $0x892682eb,%eax
    8399:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    839e:	45                   	inc    %ebp
    839f:	02 1f                	add    (%edi),%bl
    83a1:	07                   	pop    %es
    83a2:	61                   	popa   
    83a3:	60                   	pusha  
    83a4:	06                   	push   %es
    83a5:	1e                   	push   %ds
    83a6:	8c c8                	mov    %cs,%eax
    83a8:	8e d8                	mov    %eax,%ds
    83aa:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    83af:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
    83b4:	00 f7                	add    %dh,%bh
    83b6:	e3 89                	jecxz  8341 <show+0x3>
    83b8:	c7                   	(bad)  
    83b9:	b8 f8 82 26 89       	mov    $0x892682f8,%eax
    83be:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    83c3:	45                   	inc    %ebp
    83c4:	02 1f                	add    (%edi),%bl
    83c6:	07                   	pop    %es
    83c7:	61                   	popa   
    83c8:	60                   	pusha  
    83c9:	06                   	push   %es
    83ca:	1e                   	push   %ds
    83cb:	8c c8                	mov    %cs,%eax
    83cd:	8e d8                	mov    %eax,%ds
    83cf:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    83d4:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
    83d9:	00 f7                	add    %dh,%bh
    83db:	e3 89                	jecxz  8366 <_SetINT33h+0xe>
    83dd:	c7                   	(bad)  
    83de:	b8 58 83 26 89       	mov    $0x89268358,%eax
    83e3:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    83e8:	45                   	inc    %ebp
    83e9:	02 1f                	add    (%edi),%bl
    83eb:	07                   	pop    %es
    83ec:	61                   	popa   
    83ed:	60                   	pusha  
    83ee:	06                   	push   %es
    83ef:	1e                   	push   %ds
    83f0:	8c c8                	mov    %cs,%eax
    83f2:	8e d8                	mov    %eax,%ds
    83f4:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    83f9:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
    83fe:	00 f7                	add    %dh,%bh
    8400:	e3 89                	jecxz  838b <_initialInt+0x11>
    8402:	c7                   	(bad)  
    8403:	b8 6c 83 26 89       	mov    $0x8926836c,%eax
    8408:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    840d:	45                   	inc    %ebp
    840e:	02 1f                	add    (%edi),%bl
    8410:	07                   	pop    %es
    8411:	61                   	popa   
    8412:	c9                   	leave  
    8413:	66 5a                	pop    %dx
    8415:	ff e2                	jmp    *%edx

00008417 <_test>:
    8417:	60                   	pusha  
    8418:	50                   	push   %eax
    8419:	53                   	push   %ebx
    841a:	51                   	push   %ecx
    841b:	52                   	push   %edx
    841c:	0f a8                	push   %gs
    841e:	a1 19 82 50 6a       	mov    0x6a508219,%eax
    8423:	00 ff                	add    %bh,%bh
    8425:	06                   	push   %es
    8426:	19 82 a1 1b 82 50    	sbb    %eax,0x50821ba1(%edx)
    842c:	6a 00                	push   $0x0
    842e:	ff 06                	incl   (%esi)
    8430:	1b 82 e8 0e 00 66    	sbb    0x66000ee8(%edx),%eax
    8436:	58                   	pop    %eax
    8437:	58                   	pop    %eax
    8438:	0f a9                	pop    %gs
    843a:	5a                   	pop    %edx
    843b:	59                   	pop    %ecx
    843c:	5b                   	pop    %ebx
    843d:	58                   	pop    %eax
    843e:	61                   	popa   
    843f:	66 5a                	pop    %dx
    8441:	ff e2                	jmp    *%edx

00008443 <printcircle>:
#include "use.h"
void printcircle(char alpha){
    8443:	66 55                	push   %bp
    8445:	66 89 e5             	mov    %sp,%bp
    8448:	66 83 ec 0c          	sub    $0xc,%sp
    844c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8451:	67 88 45 f4          	mov    %al,-0xc(%di)
    int pos = (80 * 15 + 20)*2;
    8455:	67 66 c7 45 fc 88 09 	movw   $0x988,-0x4(%di)
    845c:	00 00                	add    %al,(%eax)
    int color = 3;
    845e:	67 66 c7 45 f8 03 00 	movw   $0x3,-0x8(%di)
    8465:	00 00                	add    %al,(%eax)
	_printchar(alpha,pos,color);
    8467:	67 66 0f be 45 f4    	movsbw -0xc(%di),%ax
    846d:	67 66 ff 75 f8       	pushw  -0x8(%di)
    8472:	67 66 ff 75 fc       	pushw  -0x4(%di)
    8477:	66 50                	push   %ax
    8479:	66 e8 b2 fd          	callw  822f <_clearscreen+0xc>
    847d:	ff                   	(bad)  
    847e:	ff 66 83             	jmp    *-0x7d(%esi)
    8481:	c4 0c 90             	les    (%eax,%edx,4),%ecx
    return;
}
    8484:	66 c9                	leavew 
    8486:	66 c3                	retw   

00008488 <showline>:
void showline(){
    8488:	66 55                	push   %bp
    848a:	66 89 e5             	mov    %sp,%bp
    848d:	66 83 ec 10          	sub    $0x10,%sp
    char alpha = 'a';
    8491:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    int color = 3;
    8496:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    849d:	00 00                	add    %al,(%eax)
    int i = 0;
    849f:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    84a6:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
    84a8:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    84af:	00 00                	add    %al,(%eax)
    for(i = 0;i < 10;i ++){
    84b1:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    84b8:	00 00                	add    %al,(%eax)
    84ba:	eb 44                	jmp    8500 <showline+0x78>
        pos = (80 * i + i) * 2;
    84bc:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    84c1:	66 89 d0             	mov    %dx,%ax
    84c4:	66 c1 e0 03          	shl    $0x3,%ax
    84c8:	66 01 d0             	add    %dx,%ax
    84cb:	67 66 8d 14          	lea    (%si),%dx
    84cf:	c5 00                	lds    (%eax),%eax
    84d1:	00 00                	add    %al,(%eax)
    84d3:	00 66 01             	add    %ah,0x1(%esi)
    84d6:	d0 66 01             	shlb   0x1(%esi)
    84d9:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
    84dd:	45                   	inc    %ebp
    84de:	f0 67 66 0f be 45 fb 	lock movsbw -0x5(%di),%ax
        _printchar(alpha,pos,color);
    84e5:	67 66 ff 75 f4       	pushw  -0xc(%di)
    84ea:	67 66 ff 75 f0       	pushw  -0x10(%di)
    84ef:	66 50                	push   %ax
    84f1:	66 e8 3a fd          	callw  822f <_clearscreen+0xc>
    84f5:	ff                   	(bad)  
    84f6:	ff 66 83             	jmp    *-0x7d(%esi)
    84f9:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
void showline(){
    char alpha = 'a';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 10;i ++){
    84fc:	66 ff 45 fc          	incw   -0x4(%ebp)
    8500:	67 66 83 7d fc 09    	cmpw   $0x9,-0x4(%di)
    8506:	7e b4                	jle    84bc <showline+0x34>
        pos = (80 * i + i) * 2;
        _printchar(alpha,pos,color);
    }
}
    8508:	66 c9                	leavew 
    850a:	66 c3                	retw   

0000850c <printpos>:
void printpos(char const* Messeage,int row,int colume){//need the pos
    850c:	66 55                	push   %bp
    850e:	66 89 e5             	mov    %sp,%bp
    8511:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    8515:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    851a:	66 89 d0             	mov    %dx,%ax
    851d:	66 c1 e0 02          	shl    $0x2,%ax
    8521:	66 01 d0             	add    %dx,%ax
    8524:	66 c1 e0 04          	shl    $0x4,%ax
    8528:	66 89 c2             	mov    %ax,%dx
    852b:	67 66 8b 45 10       	mov    0x10(%di),%ax
    8530:	66 01 d0             	add    %dx,%ax
    8533:	66 01 c0             	add    %ax,%ax
    8536:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    853b:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    8542:	00 00                	add    %al,(%eax)
	int index = 0;
    8544:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    854b:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    854d:	eb 35                	jmp    8584 <printpos+0x78>
		_printchar(Messeage[index],pos,color);
    854f:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8554:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8559:	66 01 d0             	add    %dx,%ax
    855c:	67 8a 00             	mov    (%bx,%si),%al
    855f:	66 0f be c0          	movsbw %al,%ax
    8563:	67 66 ff 75 f4       	pushw  -0xc(%di)
    8568:	67 66 ff 75 fc       	pushw  -0x4(%di)
    856d:	66 50                	push   %ax
    856f:	66 e8 bc fc          	callw  822f <_clearscreen+0xc>
    8573:	ff                   	(bad)  
    8574:	ff 66 83             	jmp    *-0x7d(%esi)
    8577:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    857a:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    857e:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
}
void printpos(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    8584:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8589:	67 66 8b 45 08       	mov    0x8(%di),%ax
    858e:	66 01 d0             	add    %dx,%ax
    8591:	67 8a 00             	mov    (%bx,%si),%al
    8594:	84 c0                	test   %al,%al
    8596:	75 b7                	jne    854f <printpos+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    8598:	90                   	nop
}
    8599:	66 c9                	leavew 
    859b:	66 c3                	retw   

0000859d <printname>:
void printname(){
    859d:	66 55                	push   %bp
    859f:	66 89 e5             	mov    %sp,%bp
    85a2:	66 83 ec 04          	sub    $0x4,%sp
    char const* Message = "chenhy";
    85a6:	67 66 c7 45 fc 66 8c 	movw   $0x8c66,-0x4(%di)
    85ad:	00 00                	add    %al,(%eax)
    printpos(Message,15,10);
    85af:	66 6a 0a             	pushw  $0xa
    85b2:	66 6a 0f             	pushw  $0xf
    85b5:	67 66 ff 75 fc       	pushw  -0x4(%di)
    85ba:	66 e8 4c ff          	callw  850a <showline+0x82>
    85be:	ff                   	(bad)  
    85bf:	ff 66 83             	jmp    *-0x7d(%esi)
    85c2:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    85c5:	c9                   	leave  
    85c6:	66 c3                	retw   

000085c8 <terminal>:
#include "../syscall/use.h"
#include "command.h"
void run(int queue[],int size);
int terminal(){
    85c8:	66 55                	push   %bp
    85ca:	66 89 e5             	mov    %sp,%bp
    85cd:	66 57                	push   %di
    85cf:	66 56                	push   %si
    85d1:	66 53                	push   %bx
    85d3:	66 83 ec 60          	sub    $0x60,%sp
    85d7:	66 89 e0             	mov    %sp,%ax
    85da:	66 89 c6             	mov    %ax,%si
    char const *CMDHead = "hongyangchendeMacBook-Air:chenhyOS users$ ";
    85dd:	67 66 c7 45 e4 70 8c 	movw   $0x8c70,-0x1c(%di)
    85e4:	00 00                	add    %al,(%eax)
    char const *controlMsg1 = "The queue is full,waiting for the Enter Key.";
    85e6:	67 66 c7 45 e0 9c 8c 	movw   $0x8c9c,-0x20(%di)
    85ed:	00 00                	add    %al,(%eax)
    char const *controlMsg2 = "The queue is empty!";
    85ef:	67 66 c7 45 dc c9 8c 	movw   $0x8cc9,-0x24(%di)
    85f6:	00 00                	add    %al,(%eax)
    char const *ByeByeMsg = "ByeBye";
    85f8:	67 66 c7 45 d8 dd 8c 	movw   $0x8cdd,-0x28(%di)
    85ff:	00 00                	add    %al,(%eax)
    char const *filelist = "Program1 upleft   Program2 upright  \r\nProgram3 downleft  Program4 downright";
    8601:	67 66 c7 45 d4 e4 8c 	movw   $0x8ce4,-0x2c(%di)
    8608:	00 00                	add    %al,(%eax)
    char const *HelpMsg1 = "Enter 1,2,3,4 to run the program\n\rEnter quit,to quit\n\rEnter help to print this script again";
    860a:	67 66 c7 45 d0 30 8d 	movw   $0x8d30,-0x30(%di)
    8611:	00 00                	add    %al,(%eax)
    char const *help = "help";
    8613:	67 66 c7 45 cc 8c 8d 	movw   $0x8d8c,-0x34(%di)
    861a:	00 00                	add    %al,(%eax)
    char const *quit = "quit";
    861c:	67 66 c7 45 c8 91 8d 	movw   $0x8d91,-0x38(%di)
    8623:	00 00                	add    %al,(%eax)
    char const *lst = "ls";
    8625:	67 66 c7 45 c4 96 8d 	movw   $0x8d96,-0x3c(%di)
    862c:	00 00                	add    %al,(%eax)
    int Maxsize = 10;
    862e:	67 66 c7 45 c0 0a 00 	movw   $0xa,-0x40(%di)
    8635:	00 00                	add    %al,(%eax)
    print_next_line(HelpMsg1);
    8637:	67 66 ff 75 d0       	pushw  -0x30(%di)
    863c:	66 e8 cd f9          	callw  800d <printsint+0xf6>
    8640:	ff                   	(bad)  
    8641:	ff 66 83             	jmp    *-0x7d(%esi)
    8644:	c4 04 67             	les    (%edi,%eiz,2),%eax
    
            // _RunProgress(0xC000);
   prints(CMDHead);
    8647:	66 ff 75 e4          	pushw  -0x1c(%ebp)
    864b:	66 e8 4b f8          	callw  7e9a <print+0x8f>
    864f:	ff                   	(bad)  
    8650:	ff 66 83             	jmp    *-0x7d(%esi)
    8653:	c4 04 67             	les    (%edi,%eiz,2),%eax
    char recived[10] = {};
    8656:	66 8d 5d 96          	lea    -0x6a(%ebp),%bx
    865a:	66 ba 0a 00          	mov    $0xa,%dx
    865e:	00 00                	add    %al,(%eax)
    8660:	b0 00                	mov    $0x0,%al
    8662:	66 89 df             	mov    %bx,%di
    8665:	66 89 d1             	mov    %dx,%cx
    8668:	f3 aa                	rep stos %al,%es:(%edi)
    recived[0] = 0;
    866a:	67 c6 45 96 00       	movb   $0x0,-0x6a(%di)
    int index_of_str = 0;
    866f:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8676:	00 00                	add    %al,(%eax)
    int i = 1;
    8678:	67 66 c7 45 bc 01 00 	movw   $0x1,-0x44(%di)
    867f:	00 00                	add    %al,(%eax)
    int queue[Maxsize];
    8681:	67 66 8b 45 c0       	mov    -0x40(%di),%ax
    8686:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    868b:	67 66 89 55 b8       	mov    %dx,-0x48(%di)
    8690:	66 c1 e0 02          	shl    $0x2,%ax
    8694:	67 66 8d 50 03       	lea    0x3(%bx,%si),%dx
    8699:	66 b8 04 00          	mov    $0x4,%ax
    869d:	00 00                	add    %al,(%eax)
    869f:	66 48                	dec    %ax
    86a1:	66 01 d0             	add    %dx,%ax
    86a4:	66 bb 04 00          	mov    $0x4,%bx
    86a8:	00 00                	add    %al,(%eax)
    86aa:	66 ba 00 00          	mov    $0x0,%dx
    86ae:	00 00                	add    %al,(%eax)
    86b0:	66 f7 f3             	div    %bx
    86b3:	66 6b c0 04          	imul   $0x4,%ax,%ax
    86b7:	66 29 c4             	sub    %ax,%sp
    86ba:	66 89 e0             	mov    %sp,%ax
    86bd:	66 83 c0 03          	add    $0x3,%ax
    86c1:	66 c1 e8 02          	shr    $0x2,%ax
    86c5:	66 c1 e0 02          	shl    $0x2,%ax
    86c9:	67 66 89 45 b4       	mov    %ax,-0x4c(%di)
    int num_of_queue = 0;
    86ce:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    86d5:	00 00                	add    %al,(%eax)
    int number = 0;
    86d7:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    86de:	00 00                	add    %al,(%eax)
    int k = 0;
    86e0:	67 66 c7 45 b0 00 00 	movw   $0x0,-0x50(%di)
    86e7:	00 00                	add    %al,(%eax)
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    86e9:	e9 78 03 66 e8       	jmp    e8668a66 <__bss_start+0xe865ea32>
        char save = waitforinput();
    86ee:	c6                   	(bad)  
    86ef:	f9                   	stc    
    86f0:	ff                   	(bad)  
    86f1:	ff 67 88             	jmp    *-0x78(%edi)
    86f4:	45                   	inc    %ebp
    86f5:	af                   	scas   %es:(%edi),%eax
        if(save == 32){//空格
    86f6:	67 80 7d af 20       	cmpb   $0x20,-0x51(%di)
    86fb:	75 74                	jne    8771 <terminal+0x1a9>
            if(num_of_queue == Maxsize){
    86fd:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    8702:	67 66 3b 45 c0       	cmp    -0x40(%di),%ax
    8707:	75 31                	jne    873a <terminal+0x172>
                prints("\n\r");
    8709:	66 68 99 8d          	pushw  $0x8d99
    870d:	00 00                	add    %al,(%eax)
    870f:	66 e8 87 f7          	callw  7e9a <print+0x8f>
    8713:	ff                   	(bad)  
    8714:	ff 66 83             	jmp    *-0x7d(%esi)
    8717:	c4 04 67             	les    (%edi,%eiz,2),%eax
                print_next_line(controlMsg1);
    871a:	66 ff 75 e0          	pushw  -0x20(%ebp)
    871e:	66 e8 eb f8          	callw  800d <printsint+0xf6>
    8722:	ff                   	(bad)  
    8723:	ff 66 83             	jmp    *-0x7d(%esi)
    8726:	c4 04 67             	les    (%edi,%eiz,2),%eax
                prints(CMDHead);
    8729:	66 ff 75 e4          	pushw  -0x1c(%ebp)
    872d:	66 e8 69 f7          	callw  7e9a <print+0x8f>
    8731:	ff                   	(bad)  
    8732:	ff 66 83             	jmp    *-0x7d(%esi)
    8735:	c4 04 e9             	les    (%ecx,%ebp,8),%eax
                continue;
    8738:	2a 03                	sub    (%ebx),%al
            }
            printc(save);
    873a:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    8740:	66 50                	push   %ax
    8742:	66 e8 a6 f7          	callw  7eec <prints+0x50>
    8746:	ff                   	(bad)  
    8747:	ff 66 83             	jmp    *-0x7d(%esi)
    874a:	c4 04 67             	les    (%edi,%eiz,2),%eax
            queue[num_of_queue] = number;
    874d:	66 8b 45 b4          	mov    -0x4c(%ebp),%ax
    8751:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    8756:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    875b:	67 66 89 0c          	mov    %cx,(%si)
    875f:	90                   	nop
            num_of_queue ++;
    8760:	67 66 ff 45 ec       	incw   -0x14(%di)
            number = 0;
    8765:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    876c:	00 00                	add    %al,(%eax)
            continue;
    876e:	e9 f3 02 67 80       	jmp    80678a66 <__bss_start+0x8066ea32>
        }
       else  if(save == 13){//回车
    8773:	7d af                	jge    8724 <terminal+0x15c>
    8775:	0d 0f 85 43 02       	or     $0x243850f,%eax
            int strcmp1 = strcmp(recived,quit);
    877a:	67 66 ff 75 c8       	pushw  -0x38(%di)
    877f:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    8784:	66 50                	push   %ax
    8786:	66 e8 47 f9          	callw  80d1 <waitforinput+0x19>
    878a:	ff                   	(bad)  
    878b:	ff 66 83             	jmp    *-0x7d(%esi)
    878e:	c4 08                	les    (%eax),%ecx
    8790:	67 66 89 45 a8       	mov    %ax,-0x58(%di)
            int strcmp2 = strcmp(recived,help);
    8795:	67 66 ff 75 cc       	pushw  -0x34(%di)
    879a:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    879f:	66 50                	push   %ax
    87a1:	66 e8 2c f9          	callw  80d1 <waitforinput+0x19>
    87a5:	ff                   	(bad)  
    87a6:	ff 66 83             	jmp    *-0x7d(%esi)
    87a9:	c4 08                	les    (%eax),%ecx
    87ab:	67 66 89 45 a4       	mov    %ax,-0x5c(%di)
            int strcmp3 = strcmp(recived,lst);
    87b0:	67 66 ff 75 c4       	pushw  -0x3c(%di)
    87b5:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    87ba:	66 50                	push   %ax
    87bc:	66 e8 11 f9          	callw  80d1 <waitforinput+0x19>
    87c0:	ff                   	(bad)  
    87c1:	ff 66 83             	jmp    *-0x7d(%esi)
    87c4:	c4 08                	les    (%eax),%ecx
    87c6:	67 66 89 45 a0       	mov    %ax,-0x60(%di)
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
    87cb:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    87d1:	75 22                	jne    87f5 <terminal+0x22d>
    87d3:	67 66 83 7d e8 00    	cmpw   $0x0,-0x18(%di)
    87d9:	75 1a                	jne    87f5 <terminal+0x22d>
    87db:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    87e1:	74 12                	je     87f5 <terminal+0x22d>
    87e3:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    87e9:	74 0a                	je     87f5 <terminal+0x22d>
    87eb:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    87f1:	0f 85 7d 01 67 66    	jne    66678974 <__bss_start+0x6666e940>
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    87f7:	83 7d a8 01          	cmpl   $0x1,-0x58(%ebp)
    87fb:	74 12                	je     880f <terminal+0x247>
    87fd:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    8803:	74 0a                	je     880f <terminal+0x247>
    8805:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    880b:	0f 85 b9 00 66 68    	jne    686688ca <__bss_start+0x6865e896>
                    //printsint(strcmp2);
                    print_next_line("");//换行
    8811:	9c                   	pushf  
    8812:	8d 00                	lea    (%eax),%eax
    8814:	00 66 e8             	add    %ah,-0x18(%esi)
    8817:	f4                   	hlt    
    8818:	f7 ff                	idiv   %edi
    881a:	ff 66 83             	jmp    *-0x7d(%esi)
    881d:	c4 04 67             	les    (%edi,%eiz,2),%eax
                    //prints("");
                    //prints("");
                    //prints("");
                    //prints("");//important,I don't know why this need;
                    //prints(recived);
                    if(strcmp1 == 1){
    8820:	66 83 7d a8 01       	cmpw   $0x1,-0x58(%ebp)
    8825:	75 2b                	jne    8852 <terminal+0x28a>
                        print_next_line(ByeByeMsg);
    8827:	67 66 ff 75 d8       	pushw  -0x28(%di)
    882c:	66 e8 dd f7          	callw  800d <printsint+0xf6>
    8830:	ff                   	(bad)  
    8831:	ff 66 83             	jmp    *-0x7d(%esi)
    8834:	c4 04 67             	les    (%edi,%eiz,2),%eax
                        index_of_str = 0;
    8837:	66 c7 45 f0 00 00    	movw   $0x0,-0x10(%ebp)
    883d:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    883f:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8844:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8849:	66 01 d0             	add    %dx,%ax
    884c:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8850:	eb 64                	jmp    88b6 <terminal+0x2ee>
                    }                  
                   else if(strcmp2 == 1){
    8852:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    8858:	75 2b                	jne    8885 <terminal+0x2bd>
                         print_next_line(HelpMsg1);
    885a:	67 66 ff 75 d0       	pushw  -0x30(%di)
    885f:	66 e8 aa f7          	callw  800d <printsint+0xf6>
    8863:	ff                   	(bad)  
    8864:	ff 66 83             	jmp    *-0x7d(%esi)
    8867:	c4 04 67             	les    (%edi,%eiz,2),%eax
                        index_of_str = 0;
    886a:	66 c7 45 f0 00 00    	movw   $0x0,-0x10(%ebp)
    8870:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    8872:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8877:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    887c:	66 01 d0             	add    %dx,%ax
    887f:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8883:	eb 31                	jmp    88b6 <terminal+0x2ee>
                    }
                    else if(strcmp3 == 1){
    8885:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    888b:	75 29                	jne    88b6 <terminal+0x2ee>
                        print_next_line(filelist);
    888d:	67 66 ff 75 d4       	pushw  -0x2c(%di)
    8892:	66 e8 77 f7          	callw  800d <printsint+0xf6>
    8896:	ff                   	(bad)  
    8897:	ff 66 83             	jmp    *-0x7d(%esi)
    889a:	c4 04 67             	les    (%edi,%eiz,2),%eax
                        index_of_str = 0;
    889d:	66 c7 45 f0 00 00    	movw   $0x0,-0x10(%ebp)
    88a3:	00 00                	add    %al,(%eax)
                      recived[index_of_str] = 0;
    88a5:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    88aa:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    88af:	66 01 d0             	add    %dx,%ax
    88b2:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    }
                        //prints(recived);
                    prints(CMDHead);
    88b6:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    88bb:	66 e8 db f5          	callw  7e9a <print+0x8f>
    88bf:	ff                   	(bad)  
    88c0:	ff 66 83             	jmp    *-0x7d(%esi)
    88c3:	c4 04 e9             	les    (%ecx,%ebp,8),%eax
                    continue;
    88c6:	9c                   	pushf  
    88c7:	01 67 66             	add    %esp,0x66(%edi)
                }
            
                else if(number != 0||num_of_queue != 0){
    88ca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    88ce:	75 0a                	jne    88da <terminal+0x312>
    88d0:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    88d6:	0f 84 84 00 67 66    	je     66678960 <__bss_start+0x6666e92c>
                    if(number != 0 ){
    88dc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    88e0:	74 28                	je     890a <terminal+0x342>
                         printsint(number);
    88e2:	67 66 ff 75 e8       	pushw  -0x18(%di)
    88e7:	66 e8 2a f6          	callw  7f15 <printc+0x27>
    88eb:	ff                   	(bad)  
    88ec:	ff 66 83             	jmp    *-0x7d(%esi)
    88ef:	c4 04 67             	les    (%edi,%eiz,2),%eax
                        queue[num_of_queue] = number;
    88f2:	66 8b 45 b4          	mov    -0x4c(%ebp),%ax
    88f6:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    88fb:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    8900:	67 66 89 0c          	mov    %cx,(%si)
    8904:	90                   	nop
                        num_of_queue++;
    8905:	67 66 ff 45 ec       	incw   -0x14(%di)
                    }
                    run(queue,num_of_queue);
    890a:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    890f:	67 66 ff 75 ec       	pushw  -0x14(%di)
    8914:	66 50                	push   %ax
    8916:	66 e8 64 01          	callw  8a7e <terminal+0x4b6>
    891a:	00 00                	add    %al,(%eax)
    891c:	66 83 c4 08          	add    $0x8,%sp
                    num_of_queue = 0;
    8920:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    8927:	00 00                	add    %al,(%eax)
                    number = 0;
    8929:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    8930:	00 00                	add    %al,(%eax)
                    prints(CMDHead);
    8932:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    8937:	66 e8 5f f5          	callw  7e9a <print+0x8f>
    893b:	ff                   	(bad)  
    893c:	ff 66 83             	jmp    *-0x7d(%esi)
    893f:	c4 04 67             	les    (%edi,%eiz,2),%eax
                    index_of_str = 0;
    8942:	66 c7 45 f0 00 00    	movw   $0x0,-0x10(%ebp)
    8948:	00 00                	add    %al,(%eax)
                    recived[index_of_str] = 0;
    894a:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    894f:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8954:	66 01 d0             	add    %dx,%ax
    8957:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    continue;
    895b:	e9 06 01 66 68       	jmp    68668a66 <__bss_start+0x6865ea32>
                }
                else{
                    prints("fuck");
    8960:	9d                   	popf   
    8961:	8d 00                	lea    (%eax),%eax
    8963:	00 66 e8             	add    %ah,-0x18(%esi)
    8966:	32 f5                	xor    %ch,%dh
    8968:	ff                   	(bad)  
    8969:	ff 66 83             	jmp    *-0x7d(%esi)
    896c:	c4 04 90             	les    (%eax,%edx,4),%eax
            int strcmp1 = strcmp(recived,quit);
            int strcmp2 = strcmp(recived,help);
            int strcmp3 = strcmp(recived,lst);
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    896f:	e9 f2 00 66 68       	jmp    68668a66 <__bss_start+0x6865ea32>
                else{
                    prints("fuck");
                }
            }
            else{
                 prints("\n\r");
    8974:	99                   	cltd   
    8975:	8d 00                	lea    (%eax),%eax
    8977:	00 66 e8             	add    %ah,-0x18(%esi)
    897a:	1e                   	push   %ds
    897b:	f5                   	cmc    
    897c:	ff                   	(bad)  
    897d:	ff 66 83             	jmp    *-0x7d(%esi)
    8980:	c4 04 67             	les    (%edi,%eiz,2),%eax
                print_next_line(controlMsg2);
    8983:	66 ff 75 dc          	pushw  -0x24(%ebp)
    8987:	66 e8 82 f6          	callw  800d <printsint+0xf6>
    898b:	ff                   	(bad)  
    898c:	ff 66 83             	jmp    *-0x7d(%esi)
    898f:	c4 04 67             	les    (%edi,%eiz,2),%eax
                prints(CMDHead);
    8992:	66 ff 75 e4          	pushw  -0x1c(%ebp)
    8996:	66 e8 00 f5          	callw  7e9a <print+0x8f>
    899a:	ff                   	(bad)  
    899b:	ff 66 83             	jmp    *-0x7d(%esi)
    899e:	c4 04 67             	les    (%edi,%eiz,2),%eax
                index_of_str = 0;
    89a1:	66 c7 45 f0 00 00    	movw   $0x0,-0x10(%ebp)
    89a7:	00 00                	add    %al,(%eax)
                recived[index_of_str] = 0;
    89a9:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    89ae:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    89b3:	66 01 d0             	add    %dx,%ax
    89b6:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                continue;
    89ba:	e9 a7 00 67 80       	jmp    80678a66 <__bss_start+0x8066ea32>
            }

            
        }
        else if(save >= '0' && save <='9'){
    89bf:	7d af                	jge    8970 <terminal+0x3a8>
    89c1:	2f                   	das    
    89c2:	7e 42                	jle    8a06 <terminal+0x43e>
    89c4:	67 80 7d af 39       	cmpb   $0x39,-0x51(%di)
    89c9:	7f 3b                	jg     8a06 <terminal+0x43e>
           printc(save);
    89cb:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    89d1:	66 50                	push   %ax
    89d3:	66 e8 15 f5          	callw  7eec <prints+0x50>
    89d7:	ff                   	(bad)  
    89d8:	ff 66 83             	jmp    *-0x7d(%esi)
    89db:	c4 04 67             	les    (%edi,%eiz,2),%eax
            number = number * 10 + save -'0';
    89de:	66 8b 55 e8          	mov    -0x18(%ebp),%dx
    89e2:	66 89 d0             	mov    %dx,%ax
    89e5:	66 c1 e0 02          	shl    $0x2,%ax
    89e9:	66 01 d0             	add    %dx,%ax
    89ec:	66 01 c0             	add    %ax,%ax
    89ef:	66 89 c2             	mov    %ax,%dx
    89f2:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    89f8:	66 01 d0             	add    %dx,%ax
    89fb:	66 83 e8 30          	sub    $0x30,%ax
    89ff:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
           // printsint(number);
            continue;
    8a04:	eb 5e                	jmp    8a64 <terminal+0x49c>
        }
        else{
           printc(save);
    8a06:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    8a0c:	66 50                	push   %ax
    8a0e:	66 e8 da f4          	callw  7eec <prints+0x50>
    8a12:	ff                   	(bad)  
    8a13:	ff 66 83             	jmp    *-0x7d(%esi)
    8a16:	c4 04 67             	les    (%edi,%eiz,2),%eax
           // if(save == '-' || save == 'q' || save == 'h' || save == 'l' || save =='s'){
            if(index_of_str < 10){
    8a19:	66 83 7d f0 09       	cmpw   $0x9,-0x10(%ebp)
    8a1e:	7f 2c                	jg     8a4c <terminal+0x484>
                recived[index_of_str] =  save;
    8a20:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8a25:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8a2a:	66 01 c2             	add    %ax,%dx
    8a2d:	67 8a 45 af          	mov    -0x51(%di),%al
    8a31:	67 88 02             	mov    %al,(%bp,%si)
                index_of_str ++;
    8a34:	67 66 ff 45 f0       	incw   -0x10(%di)
                recived[index_of_str] = 0;
    8a39:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8a3e:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8a43:	66 01 d0             	add    %dx,%ax
    8a46:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8a4a:	eb 18                	jmp    8a64 <terminal+0x49c>
            }
            else if(index_of_str >= 10){
    8a4c:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    8a52:	7e 10                	jle    8a64 <terminal+0x49c>
                prints("not added");
    8a54:	66 68 a2 8d          	pushw  $0x8da2
    8a58:	00 00                	add    %al,(%eax)
    8a5a:	66 e8 3c f4          	callw  7e9a <print+0x8f>
    8a5e:	ff                   	(bad)  
    8a5f:	ff 66 83             	jmp    *-0x7d(%esi)
    8a62:	c4 04 67             	les    (%edi,%eiz,2),%eax
    int number = 0;
    int k = 0;
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    8a65:	66 83 7d bc 00       	cmpw   $0x0,-0x44(%ebp)
    8a6a:	0f 85 7e fc 66 89    	jne    896786ee <__bss_start+0x8966e6ba>
    8a70:	f4                   	hlt    
            else if(index_of_str >= 10){
                prints("not added");
            }
        }
    }
}
    8a71:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8a76:	66 5b                	pop    %bx
    8a78:	66 5e                	pop    %si
    8a7a:	66 5f                	pop    %di
    8a7c:	66 5d                	pop    %bp
    8a7e:	66 c3                	retw   

00008a80 <run>:
void run(int queue[],int size){
    8a80:	66 55                	push   %bp
    8a82:	66 89 e5             	mov    %sp,%bp
    8a85:	66 83 ec 04          	sub    $0x4,%sp
    int j = 0;
    8a89:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8a90:	00 00                	add    %al,(%eax)
    clearscreen();
    8a92:	66 e8 63 f3          	callw  7df9 <main+0xe7>
    8a96:	ff                   	(bad)  
    8a97:	ff 67 66             	jmp    *0x66(%edi)
    for(j = 0;j < size;j ++){
    8a9a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    8aa1:	e9 1d 01 67 66       	jmp    66678bc3 <__bss_start+0x6666eb8f>
        //_delay();
        //_load_userProgram(queue[j]);
        //_delay();
        if(queue[j] == 1){
    8aa6:	8b 45 fc             	mov    -0x4(%ebp),%eax
    8aa9:	67 66 8d 14          	lea    (%si),%dx
    8aad:	85 00                	test   %eax,(%eax)
    8aaf:	00 00                	add    %al,(%eax)
    8ab1:	00 67 66             	add    %ah,0x66(%edi)
    8ab4:	8b 45 08             	mov    0x8(%ebp),%eax
    8ab7:	66 01 d0             	add    %dx,%ax
    8aba:	67 66 8b 00          	mov    (%bx,%si),%ax
    8abe:	66 83 f8 01          	cmp    $0x1,%ax
    8ac2:	75 26                	jne    8aea <run+0x6a>
            _loadP(4,23,0xC000);
    8ac4:	66 68 00 c0          	pushw  $0xc000
    8ac8:	00 00                	add    %al,(%eax)
    8aca:	66 6a 17             	pushw  $0x17
    8acd:	66 6a 04             	pushw  $0x4
    8ad0:	66 e8 c1 f7          	callw  8295 <_setPoint+0x15>
    8ad4:	ff                   	(bad)  
    8ad5:	ff 66 83             	jmp    *-0x7d(%esi)
    8ad8:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
             _RunProgress(0xC000);
    8adb:	68 00 c0 00 00       	push   $0xc000
    8ae0:	66 e8 e7 f7          	callw  82cb <_loadP+0x34>
    8ae4:	ff                   	(bad)  
    8ae5:	ff 66 83             	jmp    *-0x7d(%esi)
    8ae8:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
        if(queue[j] == 2){
    8aeb:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
    8aef:	67 66 8d 14          	lea    (%si),%dx
    8af3:	85 00                	test   %eax,(%eax)
    8af5:	00 00                	add    %al,(%eax)
    8af7:	00 67 66             	add    %ah,0x66(%edi)
    8afa:	8b 45 08             	mov    0x8(%ebp),%eax
    8afd:	66 01 d0             	add    %dx,%ax
    8b00:	67 66 8b 00          	mov    (%bx,%si),%ax
    8b04:	66 83 f8 02          	cmp    $0x2,%ax
    8b08:	75 26                	jne    8b30 <run+0xb0>
            _loadP(4,27,0xC000);
    8b0a:	66 68 00 c0          	pushw  $0xc000
    8b0e:	00 00                	add    %al,(%eax)
    8b10:	66 6a 1b             	pushw  $0x1b
    8b13:	66 6a 04             	pushw  $0x4
    8b16:	66 e8 7b f7          	callw  8295 <_setPoint+0x15>
    8b1a:	ff                   	(bad)  
    8b1b:	ff 66 83             	jmp    *-0x7d(%esi)
    8b1e:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
            _RunProgress(0xC000);
    8b21:	68 00 c0 00 00       	push   $0xc000
    8b26:	66 e8 a1 f7          	callw  82cb <_loadP+0x34>
    8b2a:	ff                   	(bad)  
    8b2b:	ff 66 83             	jmp    *-0x7d(%esi)
    8b2e:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
        if(queue[j] == 3){
    8b31:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
    8b35:	67 66 8d 14          	lea    (%si),%dx
    8b39:	85 00                	test   %eax,(%eax)
    8b3b:	00 00                	add    %al,(%eax)
    8b3d:	00 67 66             	add    %ah,0x66(%edi)
    8b40:	8b 45 08             	mov    0x8(%ebp),%eax
    8b43:	66 01 d0             	add    %dx,%ax
    8b46:	67 66 8b 00          	mov    (%bx,%si),%ax
    8b4a:	66 83 f8 03          	cmp    $0x3,%ax
    8b4e:	75 26                	jne    8b76 <run+0xf6>
            _loadP(4,31,0xC000);
    8b50:	66 68 00 c0          	pushw  $0xc000
    8b54:	00 00                	add    %al,(%eax)
    8b56:	66 6a 1f             	pushw  $0x1f
    8b59:	66 6a 04             	pushw  $0x4
    8b5c:	66 e8 35 f7          	callw  8295 <_setPoint+0x15>
    8b60:	ff                   	(bad)  
    8b61:	ff 66 83             	jmp    *-0x7d(%esi)
    8b64:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
            _RunProgress(0xC000);
    8b67:	68 00 c0 00 00       	push   $0xc000
    8b6c:	66 e8 5b f7          	callw  82cb <_loadP+0x34>
    8b70:	ff                   	(bad)  
    8b71:	ff 66 83             	jmp    *-0x7d(%esi)
    8b74:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
        if(queue[j] == 4){
    8b77:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
    8b7b:	67 66 8d 14          	lea    (%si),%dx
    8b7f:	85 00                	test   %eax,(%eax)
    8b81:	00 00                	add    %al,(%eax)
    8b83:	00 67 66             	add    %ah,0x66(%edi)
    8b86:	8b 45 08             	mov    0x8(%ebp),%eax
    8b89:	66 01 d0             	add    %dx,%ax
    8b8c:	67 66 8b 00          	mov    (%bx,%si),%ax
    8b90:	66 83 f8 04          	cmp    $0x4,%ax
    8b94:	75 26                	jne    8bbc <run+0x13c>
            _loadP(4,35,0xC000);
    8b96:	66 68 00 c0          	pushw  $0xc000
    8b9a:	00 00                	add    %al,(%eax)
    8b9c:	66 6a 23             	pushw  $0x23
    8b9f:	66 6a 04             	pushw  $0x4
    8ba2:	66 e8 ef f6          	callw  8295 <_setPoint+0x15>
    8ba6:	ff                   	(bad)  
    8ba7:	ff 66 83             	jmp    *-0x7d(%esi)
    8baa:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
            _RunProgress(0xC000);
    8bad:	68 00 c0 00 00       	push   $0xc000
    8bb2:	66 e8 15 f7          	callw  82cb <_loadP+0x34>
    8bb6:	ff                   	(bad)  
    8bb7:	ff 66 83             	jmp    *-0x7d(%esi)
    8bba:	c4 04 67             	les    (%edi,%eiz,2),%eax
    }
}
void run(int queue[],int size){
    int j = 0;
    clearscreen();
    for(j = 0;j < size;j ++){
    8bbd:	66 ff 45 fc          	incw   -0x4(%ebp)
    8bc1:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8bc6:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    8bcb:	0f 8c d5 fe 66 e8    	jl     e8678aa6 <__bss_start+0xe866ea72>
        if(queue[j] == 4){
            _loadP(4,35,0xC000);
            _RunProgress(0xC000);
        }
    }
     clearscreen();
    8bd1:	26                   	es
    8bd2:	f2 ff                	repnz (bad) 
    8bd4:	ff 66 c9             	jmp    *-0x37(%esi)
    8bd7:	66 c3                	retw   
