
user1.elf:     file format elf32-i386


Disassembly of section .text:

00000100 <user1>:
     100:	8c c8                	mov    %cs,%eax
     102:	8e d8                	mov    %eax,%ds
     104:	8e d0                	mov    %eax,%ss
     106:	bc 00 01 b8 00       	mov    $0xb80100,%esp
     10b:	b8 8e c0 14 00       	mov    $0x14c08e,%eax

0000010e <record>:
     10e:	14 00                	adc    $0x0,%al
     110:	c7 06 0e 01 50 00    	movl   $0x50010e,(%esi)

00000116 <start>:
     116:	e8 5c 01 a1 08       	call   8a10277 <delay+0x8a03f27>
     11b:	30 a3 02 30 a1 0a    	xor    %ah,0xaa13002(%ebx)
     121:	30 a3 04 30 a0 06    	xor    %ah,0x6a03004(%ebx)
     127:	30 a2 00 30 a0 07    	xor    %ah,0x7a03000(%edx)
     12d:	30 a2 01 30 a0 0c    	xor    %ah,0xca03001(%edx)
     133:	30 a2 0f 00 a0 0d    	xor    %ah,0xda0000f(%edx)
     139:	30 a2 22 30 e8 7d    	xor    %ah,0x7de83022(%edx)
     13f:	00 fe                	add    %bh,%dh
     141:	06                   	push   %es
     142:	0f 00 a1 02 30 a3 08 	verr   0x8a33002(%ecx)
     149:	30 a1 04 30 a3 0a    	xor    %ah,0xaa33004(%ecx)
     14f:	30 a0 00 30 a2 06    	xor    %ah,0x6a23000(%eax)
     155:	30 a0 01 30 a2 07    	xor    %ah,0x7a23001(%eax)
     15b:	30 a0 0f 00 a2 0c    	xor    %ah,0xca2000f(%eax)
     161:	30 a1 10 30 a3 02    	xor    %ah,0x2a33010(%ecx)
     167:	30 a1 12 30 a3 04    	xor    %ah,0x4a33012(%ecx)
     16d:	30 a0 0e 30 a2 00    	xor    %ah,0xa2300e(%eax)
     173:	30 a0 0f 30 a2 01    	xor    %ah,0x1a2300f(%eax)
     179:	30 a0 14 30 a2 0f    	xor    %ah,0xfa23014(%eax)
     17f:	00 a0 15 30 a2 22    	add    %ah,0x22a23015(%eax)
     185:	30 e8                	xor    %ch,%al
     187:	34 00                	xor    $0x0,%al
     189:	fe 06                	incb   (%esi)
     18b:	0f 00 a1 02 30 a3 10 	verr   0x10a33002(%ecx)
     192:	30 a1 04 30 a3 12    	xor    %ah,0x12a33004(%ecx)
     198:	30 a0 00 30 a2 0e    	xor    %ah,0xea23000(%eax)
     19e:	30 a0 01 30 a2 0f    	xor    %ah,0xfa23001(%eax)
     1a4:	30 a0 0f 00 a2 14    	xor    %ah,0x14a2000f(%eax)
     1aa:	30 cd                	xor    %cl,%ch
     1ac:	33 ff                	xor    %edi,%edi
     1ae:	0e                   	push   %cs
     1af:	0e                   	push   %cs
     1b0:	01 83 3e 0e 01 01    	add    %eax,0x1010e3e(%ebx)
     1b6:	75 02                	jne    1ba <again>
     1b8:	cd 38                	int    $0x38

000001ba <again>:
     1ba:	e9 59 ff e8 7e       	jmp    7ee90118 <delay+0x7ee83dc8>

000001bd <move>:
     1bd:	e8 7e 00 e8 ab       	call   abe80240 <delay+0xabe73ef0>
     1c2:	00 e8                	add    %ch,%al
     1c4:	07                   	pop    %es
     1c5:	00 e8                	add    %ch,%al
     1c7:	75 00                	jne    1c9 <move+0xc>
     1c9:	e8 88 00 c3 a0       	call   a0c30256 <delay+0xa0c23f06>

000001cd <update>:
     1cd:	a0 00 30 e8 07       	mov    0x7e83000,%al
     1d2:	00 a0 01 30 e8 33    	add    %ah,0x33e83001(%eax)
     1d8:	00 c3                	add    %al,%bl

000001da <handlex>:
     1da:	3c 01                	cmp    $0x1,%al
     1dc:	75 17                	jne    1f5 <dec1>
     1de:	ff 06                	incl   (%esi)
     1e0:	02 30                	add    (%eax),%dh
     1e2:	83 3e 02             	cmpl   $0x2,(%esi)
     1e5:	30 0f                	xor    %cl,(%edi)
     1e7:	75 54                	jne    23d <notchange>
     1e9:	c7 06 02 30 0d 00    	movl   $0xd3002,(%esi)
     1ef:	c6 06 00             	movb   $0x0,(%esi)
     1f2:	30 00                	xor    %al,(%eax)
     1f4:	c3                   	ret    

000001f5 <dec1>:
     1f5:	ff 0e                	decl   (%esi)
     1f7:	02 30                	add    (%eax),%dh
     1f9:	83 3e 02             	cmpl   $0x2,(%esi)
     1fc:	30 ff                	xor    %bh,%bh
     1fe:	75 3d                	jne    23d <notchange>
     200:	c7 06 02 30 01 00    	movl   $0x13002,(%esi)
     206:	c6 06 00             	movb   $0x0,(%esi)
     209:	30 01                	xor    %al,(%ecx)
     20b:	c3                   	ret    

0000020c <handley>:
     20c:	3c 01                	cmp    $0x1,%al
     20e:	75 17                	jne    227 <dec2>
     210:	ff 06                	incl   (%esi)
     212:	04 30                	add    $0x30,%al
     214:	83 3e 04             	cmpl   $0x4,(%esi)
     217:	30 28                	xor    %ch,(%eax)
     219:	75 22                	jne    23d <notchange>
     21b:	c7 06 04 30 26 00    	movl   $0x263004,(%esi)
     221:	c6 06 01             	movb   $0x1,(%esi)
     224:	30 00                	xor    %al,(%eax)
     226:	c3                   	ret    

00000227 <dec2>:
     227:	ff 0e                	decl   (%esi)
     229:	04 30                	add    $0x30,%al
     22b:	83 3e 04             	cmpl   $0x4,(%esi)
     22e:	30 ff                	xor    %bh,%bh
     230:	75 0b                	jne    23d <notchange>
     232:	c7 06 04 30 01 00    	movl   $0x13004,(%esi)
     238:	c6 06 01             	movb   $0x1,(%esi)
     23b:	30 01                	xor    %al,(%ecx)

0000023d <notchange>:
     23d:	c3                   	ret    

0000023e <Setpoint>:
     23e:	31 c0                	xor    %eax,%eax
     240:	a1 02 30 bb 50       	mov    0x50bb3002,%eax
     245:	00 f7                	add    %dh,%bh
     247:	e3 03                	jecxz  24c <Setpoint+0xe>
     249:	06                   	push   %es
     24a:	04 30                	add    $0x30,%al
     24c:	bb 02 00 f7 e3       	mov    $0xe3f70002,%ebx
     251:	89 c3                	mov    %eax,%ebx
     253:	c3                   	ret    

00000254 <show>:
     254:	8a 26                	mov    (%esi),%ah
     256:	0f 00 a0 22 30 26 89 	verr   -0x76d9cfde(%eax)
     25d:	07                   	pop    %es
     25e:	8a 1e                	mov    (%esi),%bl
     260:	0f 00 80 fb 10 75 06 	sldt   0x67510fb(%eax)
     267:	b3 01                	mov    $0x1,%bl
     269:	88 1e                	mov    %bl,(%esi)
     26b:	0f 00 c3             	sldt   %ebx

0000026d <c>:
     26d:	c3                   	ret    

0000026e <kill>:
     26e:	b8 00 00 26 89       	mov    $0x89260000,%eax
     273:	07                   	pop    %es
     274:	c3                   	ret    

00000275 <loop1>:
     275:	8b 0e                	mov    (%esi),%ecx
     277:	16                   	push   %ss
     278:	30 a1 18 30 48 7f    	xor    %ah,0x7f483018(%ecx)

00000279 <LOOP1>:
     279:	a1 18 30 48 7f       	mov    0x7f483018,%eax

0000027c <LOOP2>:
     27c:	48                   	dec    %eax
     27d:	7f fd                	jg     27c <LOOP2>
     27f:	e2 f8                	loop   279 <LOOP1>
     281:	c3                   	ret    

00000282 <showname>:
     282:	06                   	push   %es
     283:	53                   	push   %ebx
     284:	66 55                	push   %bp
     286:	8c d8                	mov    %ds,%eax
     288:	8e c0                	mov    %eax,%es
     28a:	b8 1a 30 89 c5       	mov    $0xc589301a,%eax
     28f:	b8 01 13 b6 0c       	mov    $0xcb61301,%eax
     294:	b2 28                	mov    $0x28,%dl
     296:	b9 08 00 b7 00       	mov    $0xb70008,%ecx
     29b:	8a 1e                	mov    (%esi),%bl
     29d:	0f 00 cd             	str    %ebp
     2a0:	10 66 5d             	adc    %ah,0x5d(%esi)
     2a3:	5b                   	pop    %ebx
     2a4:	07                   	pop    %es
     2a5:	c3                   	ret    
     2a6:	66 90                	xchg   %ax,%ax
     2a8:	66 90                	xchg   %ax,%ax
     2aa:	66 90                	xchg   %ax,%ax
     2ac:	66 90                	xchg   %ax,%ax
     2ae:	66 90                	xchg   %ax,%ax

000002b0 <count>:
     2b0:	08 2d 00 00 00 00    	or     %ch,0x0

000002b1 <alpha>:
     2b1:	2d 00 00 00 00       	sub    $0x0,%eax

000002b2 <int_09_saved>:
     2b2:	00 00                	add    %al,(%eax)
	...

000002b6 <program_saved>:
     2b6:	70 00                	jo     2b8 <program_saved+0x2>
	...

000002ba <ds_saved>:
     2ba:	7c 00                	jl     2bc <ds_saved+0x2>
	...

000002be <return_save>:
     2be:	88 00                	mov    %al,(%eax)

000002c0 <esi_save>:
     2c0:	96                   	xchg   %eax,%esi
     2c1:	00 00                	add    %al,(%eax)
	...

000002c4 <temp>:
     2c4:	e8 03 b4 00 00       	call   b6cc <BOOTSEG2+0x3acc>

000002c6 <kernelesp_saved>:
     2c6:	b4 00                	mov    $0x0,%ah
	...

000002ca <esp_saved_inkernel>:
     2ca:	c8 00 00 00          	enter  $0x0,$0x0

000002ce <esp_saved_in_user>:
     2ce:	f0 00 00             	lock add %al,(%eax)
	...

000002d2 <ss_saved_in_user>:
     2d2:	2c 01                	sub    $0x1,%al
	...

000002d6 <color>:
     2d6:	01 c2                	add    %eax,%edx

000002d7 <ss_saved_fork>:
     2d7:	c2 01 00             	ret    $0x1
	...

000002db <retaddr>:
     2db:	58                   	pop    %eax
     2dc:	02 00                	add    (%eax),%al
	...

000002df <Message31>:
     2df:	74 69                	je     34a <_readinput+0x9>
     2e1:	6d                   	insl   (%dx),%es:(%edi)
     2e2:	65 3a 20             	cmp    %gs:(%eax),%ah

000002e5 <_sys_stack_copy>:
     2e5:	c8 00 00 00          	enter  $0x0,$0x0
     2e9:	8e d0                	mov    %eax,%ss
     2eb:	60                   	pusha  
     2ec:	1e                   	push   %ds
     2ed:	8b 46 06             	mov    0x6(%esi),%eax
     2f0:	8b 56 0a             	mov    0xa(%esi),%edx
     2f3:	8b 4e 0e             	mov    0xe(%esi),%ecx
     2f6:	8c db                	mov    %ds,%ebx

000002f8 <while_loop1>:
     2f8:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
     2fe:	8e d8                	mov    %eax,%ds
     300:	67 8b 1a             	mov    (%bp,%si),%ebx
     303:	8e d9                	mov    %ecx,%ds
     305:	67 89 1a             	mov    %ebx,(%bp,%si)
     308:	83 c2 02             	add    $0x2,%edx
     30b:	eb eb                	jmp    2f8 <while_loop1>

0000030d <end_for_copy>:
     30d:	1f                   	pop    %ds
     30e:	61                   	popa   
     30f:	c9                   	leave  
     310:	66 5a                	pop    %dx
     312:	ff e2                	jmp    *%edx

00000314 <_clearscreen>:
     314:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     319:	66 5a                	pop    %dx
     31b:	ff e2                	jmp    *%edx

0000031d <_printchar>:
     31d:	c8 00 00 00          	enter  $0x0,$0x0
     321:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
     326:	57                   	push   %edi
     327:	66 8b 4e 06          	mov    0x6(%esi),%cx
     32b:	66 8b 7e 0a          	mov    0xa(%esi),%di
     32f:	66 8b 56 0e          	mov    0xe(%esi),%dx
     333:	88 d5                	mov    %dl,%ch
     335:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
     33c:	00 66 5a             	add    %ah,0x5a(%esi)
     33f:	ff e2                	jmp    *%edx

00000341 <_readinput>:
     341:	c8 04 00 00          	enter  $0x4,$0x0
     345:	b4 00                	mov    $0x0,%ah
     347:	cd 16                	int    $0x16
     349:	b4 00                	mov    $0x0,%ah
     34b:	66 67 89 04          	mov    %ax,(%si)
     34f:	24 66                	and    $0x66,%al
     351:	67 8b 04             	mov    (%si),%eax
     354:	24 c9                	and    $0xc9,%al
     356:	66 5a                	pop    %dx
     358:	ff e2                	jmp    *%edx

0000035a <_showchar>:
     35a:	c8 00 00 00          	enter  $0x0,$0x0
     35e:	50                   	push   %eax
     35f:	53                   	push   %ebx
     360:	8b 46 06             	mov    0x6(%esi),%eax
     363:	b4 0e                	mov    $0xe,%ah
     365:	b3 00                	mov    $0x0,%bl
     367:	cd 10                	int    $0x10
     369:	5b                   	pop    %ebx
     36a:	58                   	pop    %eax
     36b:	c9                   	leave  
     36c:	66 5a                	pop    %dx
     36e:	ff e2                	jmp    *%edx

00000370 <_setPoint>:
     370:	c8 00 00 00          	enter  $0x0,$0x0
     374:	53                   	push   %ebx
     375:	b7 00                	mov    $0x0,%bh
     377:	8a 77 06             	mov    0x6(%edi),%dh
     37a:	8a 57 0a             	mov    0xa(%edi),%dl
     37d:	b4 02                	mov    $0x2,%ah
     37f:	cd 10                	int    $0x10
     381:	5b                   	pop    %ebx
     382:	c9                   	leave  
     383:	66 5a                	pop    %dx
     385:	ff e2                	jmp    *%edx

00000387 <_loadP>:
     387:	c8 00 00 00          	enter  $0x0,$0x0
     38b:	60                   	pusha  
     38c:	06                   	push   %es
     38d:	1e                   	push   %ds
     38e:	8c c8                	mov    %cs,%eax
     390:	8e d8                	mov    %eax,%ds
     392:	8b 46 0e             	mov    0xe(%esi),%eax
     395:	8e c0                	mov    %eax,%es
     397:	b2 00                	mov    $0x0,%dl
     399:	8b 46 0a             	mov    0xa(%esi),%eax
     39c:	b3 12                	mov    $0x12,%bl
     39e:	f6 f3                	div    %bl
     3a0:	88 e1                	mov    %ah,%cl
     3a2:	30 e4                	xor    %ah,%ah
     3a4:	b3 02                	mov    $0x2,%bl
     3a6:	f6 f3                	div    %bl
     3a8:	88 e6                	mov    %ah,%dh
     3aa:	88 c5                	mov    %al,%ch
     3ac:	8a 46 06             	mov    0x6(%esi),%al
     3af:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
     3b4:	cd 13                	int    $0x13
     3b6:	1f                   	pop    %ds
     3b7:	07                   	pop    %es
     3b8:	61                   	popa   
     3b9:	c9                   	leave  
     3ba:	66 5a                	pop    %dx
     3bc:	ff e2                	jmp    *%edx

000003be <_RunProgress>:
     3be:	c8 00 00 00          	enter  $0x0,$0x0
     3c2:	8c c8                	mov    %cs,%eax
     3c4:	8e d8                	mov    %eax,%ds
     3c6:	8e c0                	mov    %eax,%es
     3c8:	8b 5e 06             	mov    0x6(%esi),%ebx
     3cb:	c7 06 b6 02 00 01    	movl   $0x10002b6,(%esi)
     3d1:	89 1e                	mov    %ebx,(%esi)
     3d3:	b8 02 66 89 26       	mov    $0x26896602,%eax
     3d8:	ca 02 26             	lret   $0x2602
     3db:	ff 1e                	lcall  *(%esi)
     3dd:	b6 02                	mov    $0x2,%dh

000003df <S>:
     3df:	8c c8                	mov    %cs,%eax
     3e1:	8e d8                	mov    %eax,%ds
     3e3:	8e c0                	mov    %eax,%es
     3e5:	8e d0                	mov    %eax,%ss
     3e7:	66 8b 26             	mov    (%esi),%sp
     3ea:	ca 02 b4             	lret   $0xb402
     3ed:	00 cd                	add    %cl,%ch
     3ef:	16                   	push   %ss
     3f0:	c9                   	leave  
     3f1:	66 5a                	pop    %dx
     3f3:	ff e2                	jmp    *%edx

000003f5 <_Schedule_once>:
     3f5:	c8 00 00 00          	enter  $0x0,$0x0
     3f9:	cd 41                	int    $0x41
     3fb:	c9                   	leave  
     3fc:	66 5a                	pop    %dx
     3fe:	ff e2                	jmp    *%edx

00000400 <_fork_user>:
     400:	c8 00 00 00          	enter  $0x0,$0x0
     404:	cd 39                	int    $0x39
     406:	c9                   	leave  
     407:	66 5a                	pop    %dx
     409:	ff e2                	jmp    *%edx

0000040b <_Schedule>:
     40b:	c8 00 00 00          	enter  $0x0,$0x0
     40f:	16                   	push   %ss
     410:	cd 42                	int    $0x42
     412:	17                   	pop    %ss
     413:	c9                   	leave  
     414:	66 5a                	pop    %dx
     416:	ff e2                	jmp    *%edx

00000418 <_wait>:
     418:	c8 00 00 00          	enter  $0x0,$0x0
     41c:	cd 3b                	int    $0x3b
     41e:	c9                   	leave  
     41f:	66 5a                	pop    %dx
     421:	ff e2                	jmp    *%edx

00000423 <_exit>:
     423:	c8 00 00 00          	enter  $0x0,$0x0
     427:	66 67 8b 45 06       	mov    0x6(%di),%ax
     42c:	66 50                	push   %ax
     42e:	cd 2a                	int    $0x2a
     430:	c9                   	leave  
     431:	66 5a                	pop    %dx
     433:	ff e2                	jmp    *%edx

00000435 <_GetSem>:
     435:	c8 00 00 00          	enter  $0x0,$0x0
     439:	66 67 8b 45 06       	mov    0x6(%di),%ax
     43e:	66 50                	push   %ax
     440:	cd 3c                	int    $0x3c
     442:	c9                   	leave  
     443:	66 5a                	pop    %dx
     445:	ff e2                	jmp    *%edx

00000447 <_FreeSem>:
     447:	c8 00 00 00          	enter  $0x0,$0x0
     44b:	66 67 8b 45 06       	mov    0x6(%di),%ax
     450:	66 50                	push   %ax
     452:	cd 3d                	int    $0x3d
     454:	c9                   	leave  
     455:	66 5a                	pop    %dx
     457:	ff e2                	jmp    *%edx

00000459 <_P>:
     459:	c8 00 00 00          	enter  $0x0,$0x0
     45d:	66 67 8b 45 06       	mov    0x6(%di),%ax
     462:	66 50                	push   %ax
     464:	cd 3e                	int    $0x3e
     466:	c9                   	leave  
     467:	66 5a                	pop    %dx
     469:	ff e2                	jmp    *%edx

0000046b <_V>:
     46b:	c8 00 00 00          	enter  $0x0,$0x0
     46f:	66 67 8b 45 06       	mov    0x6(%di),%ax
     474:	66 50                	push   %ax
     476:	cd 3f                	int    $0x3f
     478:	c9                   	leave  
     479:	66 5a                	pop    %dx
     47b:	ff e2                	jmp    *%edx

0000047d <_SetINT20h>:
     47d:	fa                   	cli    
     47e:	1e                   	push   %ds
     47f:	06                   	push   %es
     480:	8c c8                	mov    %cs,%eax
     482:	8e d8                	mov    %eax,%ds
     484:	8e c0                	mov    %eax,%es
     486:	8c 16                	mov    %ss,(%esi)
     488:	d2 02                	rolb   %cl,(%edx)
     48a:	8e d0                	mov    %eax,%ss
     48c:	66 89 26             	mov    %sp,(%esi)
     48f:	ce                   	into   
     490:	02 66 8b             	add    -0x75(%esi),%ah
     493:	26                   	es
     494:	ca 02 53             	lret   $0x5302
     497:	51                   	push   %ecx
     498:	52                   	push   %edx
     499:	b4 01                	mov    $0x1,%ah
     49b:	cd 16                	int    $0x16
     49d:	5a                   	pop    %edx
     49e:	59                   	pop    %ecx
     49f:	5b                   	pop    %ebx
     4a0:	8e 16                	mov    (%esi),%ss
     4a2:	d2 02                	rolb   %cl,(%edx)
     4a4:	66 8b 26             	mov    (%esi),%sp
     4a7:	ce                   	into   
     4a8:	02 07                	add    (%edi),%al
     4aa:	1f                   	pop    %ds
     4ab:	74 0a                	je     4b7 <going_on>
     4ad:	50                   	push   %eax
     4ae:	b4 00                	mov    $0x0,%ah
     4b0:	cd 16                	int    $0x16
     4b2:	58                   	pop    %eax
     4b3:	fb                   	sti    
     4b4:	cd 38                	int    $0x38
     4b6:	cf                   	iret   

000004b7 <going_on>:
     4b7:	fb                   	sti    
     4b8:	cf                   	iret   

000004b9 <_SetINT08h_turn_around>:
     4b9:	e8 3d 06 fa 6a       	call   6afa0afb <delay+0x6af947ab>
     4be:	00 e8                	add    %ch,%al
     4c0:	c5 0d e8 a8 06 b0    	lds    0xb006a8e8,%ecx
     4c6:	20 e6                	and    %ah,%dh
     4c8:	20 e6                	and    %ah,%dh
     4ca:	a0 fb cf 60 0f       	mov    0xf60cffb,%al

000004cd <_SetINT08h>:
     4cd:	60                   	pusha  
     4ce:	0f a8                	push   %gs
     4d0:	1e                   	push   %ds
     4d1:	06                   	push   %es
     4d2:	16                   	push   %ss
     4d3:	8c c8                	mov    %cs,%eax
     4d5:	8e c0                	mov    %eax,%es
     4d7:	8e d8                	mov    %eax,%ds
     4d9:	8e d0                	mov    %eax,%ss
     4db:	fe 0e                	decb   (%esi)
     4dd:	b0 02                	mov    $0x2,%al
     4df:	75 4f                	jne    530 <end>

000004e1 <notc>:
     4e1:	80 3e b1             	cmpb   $0xb1,(%esi)
     4e4:	02 2d 75 07 c6 06    	add    0x6c60775,%ch
     4ea:	b1 02                	mov    $0x2,%cl
     4ec:	5c                   	pop    %esp
     4ed:	eb 2a                	jmp    519 <show>

000004ef <changleft>:
     4ef:	80 3e b1             	cmpb   $0xb1,(%esi)
     4f2:	02 5c 75 07          	add    0x7(%ebp,%esi,2),%bl
     4f6:	c6 06 b1             	movb   $0xb1,(%esi)
     4f9:	02 7c eb 1c          	add    0x1c(%ebx,%ebp,8),%bh

000004fd <changright>:
     4fd:	80 3e b1             	cmpb   $0xb1,(%esi)
     500:	02 7c 75 07          	add    0x7(%ebp,%esi,2),%bh
     504:	c6 06 b1             	movb   $0xb1,(%esi)
     507:	02 2f                	add    (%edi),%ch
     509:	eb 0e                	jmp    519 <show>

0000050b <changheng>:
     50b:	80 3e b1             	cmpb   $0xb1,(%esi)
     50e:	02 2f                	add    (%edi),%ch
     510:	75 cf                	jne    4e1 <notc>
     512:	c6 06 b1             	movb   $0xb1,(%esi)
     515:	02 2d eb 00 b9 00    	add    0xb900eb,%ch

00000519 <show>:
     519:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     51e:	b4 09                	mov    $0x9,%ah
     520:	8a 26                	mov    (%esi),%ah
     522:	d6                   	(bad)  
     523:	02 a0 b1 02 65 a3    	add    -0x5c9afd4f(%eax),%ah
     529:	8e 00                	mov    (%eax),%es
     52b:	c6 06 b0             	movb   $0xb0,(%esi)
     52e:	02 08                	add    (%eax),%cl

00000530 <end>:
     530:	b0 20                	mov    $0x20,%al
     532:	e6 20                	out    %al,$0x20
     534:	e6 a0                	out    %al,$0xa0
     536:	17                   	pop    %ss
     537:	07                   	pop    %es
     538:	1f                   	pop    %ds
     539:	0f a9                	pop    %gs
     53b:	61                   	popa   
     53c:	fb                   	sti    
     53d:	cf                   	iret   

0000053e <_SetINT09h>:
     53e:	fa                   	cli    
     53f:	1e                   	push   %ds
     540:	06                   	push   %es
     541:	8c c8                	mov    %cs,%eax
     543:	8e d8                	mov    %eax,%ds
     545:	8e c0                	mov    %eax,%es
     547:	8e d0                	mov    %eax,%ss
     549:	8c 16                	mov    %ss,(%esi)
     54b:	d2 02                	rolb   %cl,(%edx)
     54d:	8e d0                	mov    %eax,%ss
     54f:	66 89 26             	mov    %sp,(%esi)
     552:	ce                   	into   
     553:	02 66 8b             	add    -0x75(%esi),%ah
     556:	26                   	es
     557:	ca 02 60             	lret   $0x6002
     55a:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     55f:	8a 26                	mov    (%esi),%ah
     561:	d6                   	(bad)  
     562:	02 b0 4f 65 a3 78    	add    0x78a3654f(%eax),%dh
     568:	00 b0 55 65 a3 7a    	add    %dh,0x7aa36555(%eax)
     56e:	00 b0 43 65 a3 7c    	add    %dh,0x7ca36543(%eax)
     574:	00 b0 48 65 a3 7e    	add    %dh,0x7ea36548(%eax)
     57a:	00 b0 53 65 a3 80    	add    %dh,-0x7f5c9aad(%eax)
     580:	00 b0 21 65 a3 82    	add    %dh,-0x7d5c9adf(%eax)
     586:	00 b0 4f 65 a3 84    	add    %dh,-0x7b5c9ab1(%eax)
     58c:	00 b0 55 65 a3 86    	add    %dh,-0x795c9aab(%eax)
     592:	00 b0 43 65 a3 88    	add    %dh,-0x775c9abd(%eax)
     598:	00 b0 48 65 a3 8a    	add    %dh,-0x755c9ab8(%eax)
     59e:	00 b0 21 65 a3 8c    	add    %dh,-0x735c9adf(%eax)
     5a4:	00 61 80             	add    %ah,-0x80(%ecx)
     5a7:	fc                   	cld    
     5a8:	06                   	push   %es
     5a9:	75 06                	jne    5b1 <cont>
     5ab:	b4 01                	mov    $0x1,%ah
     5ad:	88 26                	mov    %ah,(%esi)
     5af:	d6                   	(bad)  
     5b0:	02 fe                	add    %dh,%bh

000005b1 <cont>:
     5b1:	fe 06                	incb   (%esi)
     5b3:	d6                   	(bad)  
     5b4:	02 8c c8 8e c0 fb 9c 	add    -0x63043f72(%eax,%ecx,8),%cl
     5bb:	26 ff 1e             	lcall  *%es:(%esi)
     5be:	b2 02                	mov    $0x2,%dl
     5c0:	8e 16                	mov    (%esi),%ss
     5c2:	d2 02                	rolb   %cl,(%edx)
     5c4:	66 8b 26             	mov    (%esi),%sp
     5c7:	ce                   	into   
     5c8:	02 07                	add    (%edi),%al
     5ca:	1f                   	pop    %ds
     5cb:	cf                   	iret   

000005cc <_SetINT33h>:
     5cc:	fa                   	cli    
     5cd:	c8 00 00 00          	enter  $0x0,$0x0
     5d1:	60                   	pusha  
     5d2:	1e                   	push   %ds
     5d3:	0f a8                	push   %gs
     5d5:	06                   	push   %es
     5d6:	8c c8                	mov    %cs,%eax
     5d8:	8e c0                	mov    %eax,%es
     5da:	8e d8                	mov    %eax,%ds
     5dc:	8c 16                	mov    %ss,(%esi)
     5de:	d2 02                	rolb   %cl,(%edx)
     5e0:	8e d0                	mov    %eax,%ss
     5e2:	66 89 26             	mov    %sp,(%esi)
     5e5:	ce                   	into   
     5e6:	02 66 8b             	add    -0x75(%esi),%ah
     5e9:	26                   	es
     5ea:	ca 02 6a             	lret   $0x6a02
     5ed:	00 e8                	add    %ch,%al
     5ef:	0a 08                	or     (%eax),%cl
     5f1:	8e 16                	mov    (%esi),%ss
     5f3:	d2 02                	rolb   %cl,(%edx)
     5f5:	66 8b 26             	mov    (%esi),%sp
     5f8:	ce                   	into   
     5f9:	02 07                	add    (%edi),%al
     5fb:	0f a9                	pop    %gs
     5fd:	1f                   	pop    %ds
     5fe:	61                   	popa   
     5ff:	fb                   	sti    
     600:	c9                   	leave  
     601:	cf                   	iret   

00000602 <_SetINT34h>:
     602:	fa                   	cli    
     603:	c8 00 00 00          	enter  $0x0,$0x0
     607:	60                   	pusha  
     608:	1e                   	push   %ds
     609:	0f a8                	push   %gs
     60b:	06                   	push   %es
     60c:	8c c8                	mov    %cs,%eax
     60e:	8e c0                	mov    %eax,%es
     610:	8e d8                	mov    %eax,%ds
     612:	8c 16                	mov    %ss,(%esi)
     614:	d2 02                	rolb   %cl,(%edx)
     616:	8e d0                	mov    %eax,%ss
     618:	66 89 26             	mov    %sp,(%esi)
     61b:	ce                   	into   
     61c:	02 66 8b             	add    -0x75(%esi),%ah
     61f:	26                   	es
     620:	ca 02 6a             	lret   $0x6a02
     623:	00 e8                	add    %ch,%al
     625:	84 08                	test   %cl,(%eax)
     627:	8e 16                	mov    (%esi),%ss
     629:	d2 02                	rolb   %cl,(%edx)
     62b:	66 8b 26             	mov    (%esi),%sp
     62e:	ce                   	into   
     62f:	02 07                	add    (%edi),%al
     631:	0f a9                	pop    %gs
     633:	1f                   	pop    %ds
     634:	61                   	popa   
     635:	fb                   	sti    
     636:	c9                   	leave  
     637:	cf                   	iret   

00000638 <_SetINT35h>:
     638:	60                   	pusha  
     639:	1e                   	push   %ds
     63a:	0f a8                	push   %gs
     63c:	06                   	push   %es
     63d:	8c c8                	mov    %cs,%eax
     63f:	8e c0                	mov    %eax,%es
     641:	8e d8                	mov    %eax,%ds
     643:	8c 16                	mov    %ss,(%esi)
     645:	d2 02                	rolb   %cl,(%edx)
     647:	8e d0                	mov    %eax,%ss
     649:	66 89 26             	mov    %sp,(%esi)
     64c:	ce                   	into   
     64d:	02 66 8b             	add    -0x75(%esi),%ah
     650:	26                   	es
     651:	ca 02 6a             	lret   $0x6a02
     654:	00 e8                	add    %ch,%al
     656:	32 09                	xor    (%ecx),%cl
     658:	8e 16                	mov    (%esi),%ss
     65a:	d2 02                	rolb   %cl,(%edx)
     65c:	66 8b 26             	mov    (%esi),%sp
     65f:	ce                   	into   
     660:	02 07                	add    (%edi),%al
     662:	0f a9                	pop    %gs
     664:	1f                   	pop    %ds
     665:	61                   	popa   
     666:	fb                   	sti    
     667:	cf                   	iret   

00000668 <_SetINT36h>:
     668:	60                   	pusha  
     669:	1e                   	push   %ds
     66a:	0f a8                	push   %gs
     66c:	06                   	push   %es
     66d:	8c c8                	mov    %cs,%eax
     66f:	8e c0                	mov    %eax,%es
     671:	8e d8                	mov    %eax,%ds
     673:	8c 16                	mov    %ss,(%esi)
     675:	d2 02                	rolb   %cl,(%edx)
     677:	8e d0                	mov    %eax,%ss
     679:	66 89 26             	mov    %sp,(%esi)
     67c:	ce                   	into   
     67d:	02 66 8b             	add    -0x75(%esi),%ah
     680:	26                   	es
     681:	ca 02 6a             	lret   $0x6a02
     684:	00 e8                	add    %ch,%al
     686:	88 09                	mov    %cl,(%ecx)
     688:	8e 16                	mov    (%esi),%ss
     68a:	d2 02                	rolb   %cl,(%edx)
     68c:	66 8b 26             	mov    (%esi),%sp
     68f:	ce                   	into   
     690:	02 07                	add    (%edi),%al
     692:	0f a9                	pop    %gs
     694:	1f                   	pop    %ds
     695:	61                   	popa   
     696:	fb                   	sti    
     697:	cf                   	iret   

00000698 <_SetINT21h>:
     698:	c8 00 00 00          	enter  $0x0,$0x0
     69c:	60                   	pusha  
     69d:	1e                   	push   %ds
     69e:	0f a8                	push   %gs
     6a0:	06                   	push   %es
     6a1:	8c c8                	mov    %cs,%eax
     6a3:	8e c0                	mov    %eax,%es
     6a5:	8e d8                	mov    %eax,%ds
     6a7:	8b 46 08             	mov    0x8(%esi),%eax
     6aa:	80 fc 00             	cmp    $0x0,%ah
     6ad:	74 16                	je     6c5 <fn0>
     6af:	80 fc 01             	cmp    $0x1,%ah
     6b2:	74 21                	je     6d5 <fn1>
     6b4:	80 fc 02             	cmp    $0x2,%ah
     6b7:	74 3d                	je     6f6 <fn2>
     6b9:	80 fc 03             	cmp    $0x3,%ah
     6bc:	74 5f                	je     71d <fn3>
     6be:	07                   	pop    %es
     6bf:	0f a9                	pop    %gs
     6c1:	1f                   	pop    %ds
     6c2:	61                   	popa   
     6c3:	c9                   	leave  
     6c4:	cf                   	iret   

000006c5 <fn0>:
     6c5:	8b 46 0a             	mov    0xa(%esi),%eax
     6c8:	b4 0e                	mov    $0xe,%ah
     6ca:	b3 00                	mov    $0x0,%bl
     6cc:	cd 10                	int    $0x10
     6ce:	07                   	pop    %es
     6cf:	0f a9                	pop    %gs
     6d1:	1f                   	pop    %ds
     6d2:	61                   	popa   
     6d3:	c9                   	leave  
     6d4:	cf                   	iret   

000006d5 <fn1>:
     6d5:	66 83 ec 04          	sub    $0x4,%sp
     6d9:	b4 00                	mov    $0x0,%ah
     6db:	cd 16                	int    $0x16
     6dd:	b4 00                	mov    $0x0,%ah
     6df:	66 67 89 04          	mov    %ax,(%si)
     6e3:	24 66                	and    $0x66,%al
     6e5:	67 8b 04             	mov    (%si),%eax
     6e8:	24 66                	and    $0x66,%al
     6ea:	83 c4 04             	add    $0x4,%esp
     6ed:	8e e0                	mov    %eax,%fs
     6ef:	07                   	pop    %es
     6f0:	0f a9                	pop    %gs
     6f2:	1f                   	pop    %ds
     6f3:	61                   	popa   
     6f4:	c9                   	leave  
     6f5:	cf                   	iret   

000006f6 <fn2>:
     6f6:	66 83 ec 04          	sub    $0x4,%sp
     6fa:	b4 00                	mov    $0x0,%ah
     6fc:	cd 16                	int    $0x16
     6fe:	b4 00                	mov    $0x0,%ah
     700:	66 67 89 04          	mov    %ax,(%si)
     704:	24 66                	and    $0x66,%al
     706:	67 8b 04             	mov    (%si),%eax
     709:	24 b4                	and    $0xb4,%al
     70b:	0e                   	push   %cs
     70c:	b3 00                	mov    $0x0,%bl
     70e:	cd 10                	int    $0x10
     710:	66 83 c4 04          	add    $0x4,%sp
     714:	8e e0                	mov    %eax,%fs
     716:	07                   	pop    %es
     717:	0f a9                	pop    %gs
     719:	1f                   	pop    %ds
     71a:	61                   	popa   
     71b:	c9                   	leave  
     71c:	cf                   	iret   

0000071d <fn3>:
     71d:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     722:	07                   	pop    %es
     723:	0f a9                	pop    %gs
     725:	1f                   	pop    %ds
     726:	61                   	popa   
     727:	c9                   	leave  
     728:	cf                   	iret   

00000729 <_SetINT37h>:
     729:	fa                   	cli    
     72a:	e8 94 04 cf fa       	call   facf0bc3 <delay+0xface4873>

0000072e <_SetINT38h>:
     72e:	fa                   	cli    
     72f:	50                   	push   %eax
     730:	1e                   	push   %ds
     731:	8c c8                	mov    %cs,%eax
     733:	8e d8                	mov    %eax,%ds
     735:	6a 00                	push   $0x0
     737:	e8 58 0c 1f 58       	call   581f1394 <delay+0x581e5044>
     73c:	fb                   	sti    
     73d:	cf                   	iret   

0000073e <_SetINT39h>:
     73e:	fa                   	cli    
     73f:	c8 00 00 00          	enter  $0x0,$0x0
     743:	1e                   	push   %ds
     744:	6a 00                	push   $0x0
     746:	8c c8                	mov    %cs,%eax
     748:	8e d8                	mov    %eax,%ds
     74a:	e8 41 0e 1f c9       	call   c91f1590 <delay+0xc91e5240>
     74f:	fb                   	sti    
     750:	cf                   	iret   

00000751 <_SetINT41h>:
     751:	fa                   	cli    
     752:	e8 a4 03 e8 15       	call   15e80afb <delay+0x15e747ab>
     757:	04 b0                	add    $0xb0,%al
     759:	20 e6                	and    %ah,%dh
     75b:	20 e6                	and    %ah,%dh
     75d:	a0 fb cf fa c8       	mov    0xc8facffb,%al

00000760 <_SetINT2Ah>:
     760:	fa                   	cli    
     761:	c8 00 00 00          	enter  $0x0,$0x0
     765:	1e                   	push   %ds
     766:	66 67 8b 45 08       	mov    0x8(%di),%ax
     76b:	66 50                	push   %ax
     76d:	6a 00                	push   $0x0
     76f:	8c c8                	mov    %cs,%eax
     771:	8e d8                	mov    %eax,%ds
     773:	e8 ad 10 58 1f       	call   1f581825 <delay+0x1f5754d5>
     778:	c9                   	leave  
     779:	fb                   	sti    
     77a:	cf                   	iret   

0000077b <_SetINT3Bh>:
     77b:	fa                   	cli    
     77c:	c8 00 00 00          	enter  $0x0,$0x0
     780:	1e                   	push   %ds
     781:	6a 00                	push   $0x0
     783:	8c c8                	mov    %cs,%eax
     785:	8e d8                	mov    %eax,%ds
     787:	e8 66 11 1f c9       	call   c91f18f2 <delay+0xc91e55a2>
     78c:	fb                   	sti    
     78d:	cf                   	iret   

0000078e <_SetINT3Ch>:
     78e:	fa                   	cli    
     78f:	c8 00 00 00          	enter  $0x0,$0x0
     793:	1e                   	push   %ds
     794:	66 67 8b 45 08       	mov    0x8(%di),%ax
     799:	66 50                	push   %ax
     79b:	6a 00                	push   $0x0
     79d:	8c c8                	mov    %cs,%eax
     79f:	8e d8                	mov    %eax,%ds
     7a1:	e8 c6 15 66 83       	call   83661d6c <delay+0x83655a1c>
     7a6:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     7a9:	c9                   	leave  
     7aa:	fb                   	sti    
     7ab:	cf                   	iret   

000007ac <_SetINT3Dh>:
     7ac:	fa                   	cli    
     7ad:	c8 00 00 00          	enter  $0x0,$0x0
     7b1:	1e                   	push   %ds
     7b2:	66 67 8b 45 08       	mov    0x8(%di),%ax
     7b7:	66 50                	push   %ax
     7b9:	6a 00                	push   $0x0
     7bb:	8c c8                	mov    %cs,%eax
     7bd:	8e d8                	mov    %eax,%ds
     7bf:	e8 69 16 66 83       	call   83661e2d <delay+0x83655add>
     7c4:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     7c7:	c9                   	leave  
     7c8:	fb                   	sti    
     7c9:	cf                   	iret   

000007ca <_SetINT3Eh>:
     7ca:	fa                   	cli    
     7cb:	c8 00 00 00          	enter  $0x0,$0x0
     7cf:	1e                   	push   %ds
     7d0:	66 67 8b 45 08       	mov    0x8(%di),%ax
     7d5:	66 50                	push   %ax
     7d7:	6a 00                	push   $0x0
     7d9:	8c c8                	mov    %cs,%eax
     7db:	8e d8                	mov    %eax,%ds
     7dd:	e8 82 16 66 83       	call   83661e64 <delay+0x83655b14>
     7e2:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     7e5:	c9                   	leave  
     7e6:	fb                   	sti    
     7e7:	cf                   	iret   

000007e8 <_SetINT3Fh>:
     7e8:	fa                   	cli    
     7e9:	c8 00 00 00          	enter  $0x0,$0x0
     7ed:	1e                   	push   %ds
     7ee:	66 67 8b 45 08       	mov    0x8(%di),%ax
     7f3:	66 50                	push   %ax
     7f5:	6a 00                	push   $0x0
     7f7:	8c c8                	mov    %cs,%eax
     7f9:	8e d8                	mov    %eax,%ds
     7fb:	e8 a9 17 66 83       	call   83661fa9 <delay+0x83655c59>
     800:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     803:	c9                   	leave  
     804:	fb                   	sti    
     805:	cf                   	iret   

00000806 <_initialInt>:
     806:	c8 00 00 00          	enter  $0x0,$0x0
     80a:	60                   	pusha  
     80b:	06                   	push   %es
     80c:	1e                   	push   %ds
     80d:	8c c8                	mov    %cs,%eax
     80f:	8e d8                	mov    %eax,%ds
     811:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     816:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
     81b:	00 f7                	add    %dh,%bh
     81d:	e3 89                	jecxz  7a8 <_SetINT3Ch+0x1a>
     81f:	c7                   	(bad)  
     820:	b8 7d 04 26 89       	mov    $0x8926047d,%eax
     825:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     82a:	45                   	inc    %ebp
     82b:	02 1f                	add    (%edi),%bl
     82d:	07                   	pop    %es
     82e:	61                   	popa   
     82f:	60                   	pusha  
     830:	06                   	push   %es
     831:	1e                   	push   %ds
     832:	8c c8                	mov    %cs,%eax
     834:	8e d8                	mov    %eax,%ds
     836:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     83b:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
     840:	00 f7                	add    %dh,%bh
     842:	e3 89                	jecxz  7cd <_SetINT3Eh+0x3>
     844:	c7                   	(bad)  
     845:	b8 cc 05 26 89       	mov    $0x892605cc,%eax
     84a:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     84f:	45                   	inc    %ebp
     850:	02 1f                	add    (%edi),%bl
     852:	07                   	pop    %es
     853:	61                   	popa   
     854:	60                   	pusha  
     855:	06                   	push   %es
     856:	1e                   	push   %ds
     857:	8c c8                	mov    %cs,%eax
     859:	8e d8                	mov    %eax,%ds
     85b:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     860:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
     865:	00 f7                	add    %dh,%bh
     867:	e3 89                	jecxz  7f2 <_SetINT3Fh+0xa>
     869:	c7                   	(bad)  
     86a:	b8 02 06 26 89       	mov    $0x89260602,%eax
     86f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     874:	45                   	inc    %ebp
     875:	02 1f                	add    (%edi),%bl
     877:	07                   	pop    %es
     878:	61                   	popa   
     879:	60                   	pusha  
     87a:	06                   	push   %es
     87b:	1e                   	push   %ds
     87c:	8c c8                	mov    %cs,%eax
     87e:	8e d8                	mov    %eax,%ds
     880:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     885:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
     88a:	00 f7                	add    %dh,%bh
     88c:	e3 89                	jecxz  817 <_initialInt+0x11>
     88e:	c7                   	(bad)  
     88f:	b8 38 06 26 89       	mov    $0x89260638,%eax
     894:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     899:	45                   	inc    %ebp
     89a:	02 1f                	add    (%edi),%bl
     89c:	07                   	pop    %es
     89d:	61                   	popa   
     89e:	60                   	pusha  
     89f:	06                   	push   %es
     8a0:	1e                   	push   %ds
     8a1:	8c c8                	mov    %cs,%eax
     8a3:	8e d8                	mov    %eax,%ds
     8a5:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8aa:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
     8af:	00 f7                	add    %dh,%bh
     8b1:	e3 89                	jecxz  83c <_initialInt+0x36>
     8b3:	c7                   	(bad)  
     8b4:	b8 68 06 26 89       	mov    $0x89260668,%eax
     8b9:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8be:	45                   	inc    %ebp
     8bf:	02 1f                	add    (%edi),%bl
     8c1:	07                   	pop    %es
     8c2:	61                   	popa   
     8c3:	60                   	pusha  
     8c4:	06                   	push   %es
     8c5:	1e                   	push   %ds
     8c6:	8c c8                	mov    %cs,%eax
     8c8:	8e d8                	mov    %eax,%ds
     8ca:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8cf:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
     8d4:	00 f7                	add    %dh,%bh
     8d6:	e3 89                	jecxz  861 <_initialInt+0x5b>
     8d8:	c7                   	(bad)  
     8d9:	b8 98 06 26 89       	mov    $0x89260698,%eax
     8de:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8e3:	45                   	inc    %ebp
     8e4:	02 1f                	add    (%edi),%bl
     8e6:	07                   	pop    %es
     8e7:	61                   	popa   
     8e8:	60                   	pusha  
     8e9:	06                   	push   %es
     8ea:	1e                   	push   %ds
     8eb:	8c c8                	mov    %cs,%eax
     8ed:	8e d8                	mov    %eax,%ds
     8ef:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8f4:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
     8f9:	00 f7                	add    %dh,%bh
     8fb:	e3 89                	jecxz  886 <_initialInt+0x80>
     8fd:	c7                   	(bad)  
     8fe:	b8 29 07 26 89       	mov    $0x89260729,%eax
     903:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     908:	45                   	inc    %ebp
     909:	02 1f                	add    (%edi),%bl
     90b:	07                   	pop    %es
     90c:	61                   	popa   
     90d:	60                   	pusha  
     90e:	06                   	push   %es
     90f:	1e                   	push   %ds
     910:	8c c8                	mov    %cs,%eax
     912:	8e d8                	mov    %eax,%ds
     914:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     919:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
     91e:	00 f7                	add    %dh,%bh
     920:	e3 89                	jecxz  8ab <_initialInt+0xa5>
     922:	c7                   	(bad)  
     923:	b8 2e 07 26 89       	mov    $0x8926072e,%eax
     928:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     92d:	45                   	inc    %ebp
     92e:	02 1f                	add    (%edi),%bl
     930:	07                   	pop    %es
     931:	61                   	popa   
     932:	60                   	pusha  
     933:	06                   	push   %es
     934:	1e                   	push   %ds
     935:	8c c8                	mov    %cs,%eax
     937:	8e d8                	mov    %eax,%ds
     939:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     93e:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
     943:	00 f7                	add    %dh,%bh
     945:	e3 89                	jecxz  8d0 <_initialInt+0xca>
     947:	c7                   	(bad)  
     948:	b8 3e 07 26 89       	mov    $0x8926073e,%eax
     94d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     952:	45                   	inc    %ebp
     953:	02 1f                	add    (%edi),%bl
     955:	07                   	pop    %es
     956:	61                   	popa   
     957:	60                   	pusha  
     958:	06                   	push   %es
     959:	1e                   	push   %ds
     95a:	8c c8                	mov    %cs,%eax
     95c:	8e d8                	mov    %eax,%ds
     95e:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     963:	b8 2a 00 bb 04       	mov    $0x4bb002a,%eax
     968:	00 f7                	add    %dh,%bh
     96a:	e3 89                	jecxz  8f5 <_initialInt+0xef>
     96c:	c7                   	(bad)  
     96d:	b8 60 07 26 89       	mov    $0x89260760,%eax
     972:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     977:	45                   	inc    %ebp
     978:	02 1f                	add    (%edi),%bl
     97a:	07                   	pop    %es
     97b:	61                   	popa   
     97c:	60                   	pusha  
     97d:	06                   	push   %es
     97e:	1e                   	push   %ds
     97f:	8c c8                	mov    %cs,%eax
     981:	8e d8                	mov    %eax,%ds
     983:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     988:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
     98d:	00 f7                	add    %dh,%bh
     98f:	e3 89                	jecxz  91a <_initialInt+0x114>
     991:	c7                   	(bad)  
     992:	b8 51 07 26 89       	mov    $0x89260751,%eax
     997:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     99c:	45                   	inc    %ebp
     99d:	02 1f                	add    (%edi),%bl
     99f:	07                   	pop    %es
     9a0:	61                   	popa   
     9a1:	60                   	pusha  
     9a2:	06                   	push   %es
     9a3:	1e                   	push   %ds
     9a4:	8c c8                	mov    %cs,%eax
     9a6:	8e d8                	mov    %eax,%ds
     9a8:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     9ad:	b8 42 00 bb 04       	mov    $0x4bb0042,%eax
     9b2:	00 f7                	add    %dh,%bh
     9b4:	e3 89                	jecxz  93f <_initialInt+0x139>
     9b6:	c7                   	(bad)  
     9b7:	b8 b9 04 26 89       	mov    $0x892604b9,%eax
     9bc:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9c1:	45                   	inc    %ebp
     9c2:	02 1f                	add    (%edi),%bl
     9c4:	07                   	pop    %es
     9c5:	61                   	popa   
     9c6:	60                   	pusha  
     9c7:	06                   	push   %es
     9c8:	1e                   	push   %ds
     9c9:	8c c8                	mov    %cs,%eax
     9cb:	8e d8                	mov    %eax,%ds
     9cd:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     9d2:	b8 3b 00 bb 04       	mov    $0x4bb003b,%eax
     9d7:	00 f7                	add    %dh,%bh
     9d9:	e3 89                	jecxz  964 <_initialInt+0x15e>
     9db:	c7                   	(bad)  
     9dc:	b8 7b 07 26 89       	mov    $0x8926077b,%eax
     9e1:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9e6:	45                   	inc    %ebp
     9e7:	02 1f                	add    (%edi),%bl
     9e9:	07                   	pop    %es
     9ea:	61                   	popa   
     9eb:	60                   	pusha  
     9ec:	06                   	push   %es
     9ed:	1e                   	push   %ds
     9ee:	8c c8                	mov    %cs,%eax
     9f0:	8e d8                	mov    %eax,%ds
     9f2:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     9f7:	b8 3c 00 bb 04       	mov    $0x4bb003c,%eax
     9fc:	00 f7                	add    %dh,%bh
     9fe:	e3 89                	jecxz  989 <_initialInt+0x183>
     a00:	c7                   	(bad)  
     a01:	b8 8e 07 26 89       	mov    $0x8926078e,%eax
     a06:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a0b:	45                   	inc    %ebp
     a0c:	02 1f                	add    (%edi),%bl
     a0e:	07                   	pop    %es
     a0f:	61                   	popa   
     a10:	60                   	pusha  
     a11:	06                   	push   %es
     a12:	1e                   	push   %ds
     a13:	8c c8                	mov    %cs,%eax
     a15:	8e d8                	mov    %eax,%ds
     a17:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a1c:	b8 3d 00 bb 04       	mov    $0x4bb003d,%eax
     a21:	00 f7                	add    %dh,%bh
     a23:	e3 89                	jecxz  9ae <_initialInt+0x1a8>
     a25:	c7                   	(bad)  
     a26:	b8 ac 07 26 89       	mov    $0x892607ac,%eax
     a2b:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a30:	45                   	inc    %ebp
     a31:	02 1f                	add    (%edi),%bl
     a33:	07                   	pop    %es
     a34:	61                   	popa   
     a35:	60                   	pusha  
     a36:	06                   	push   %es
     a37:	1e                   	push   %ds
     a38:	8c c8                	mov    %cs,%eax
     a3a:	8e d8                	mov    %eax,%ds
     a3c:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a41:	b8 3e 00 bb 04       	mov    $0x4bb003e,%eax
     a46:	00 f7                	add    %dh,%bh
     a48:	e3 89                	jecxz  9d3 <_initialInt+0x1cd>
     a4a:	c7                   	(bad)  
     a4b:	b8 ca 07 26 89       	mov    $0x892607ca,%eax
     a50:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a55:	45                   	inc    %ebp
     a56:	02 1f                	add    (%edi),%bl
     a58:	07                   	pop    %es
     a59:	61                   	popa   
     a5a:	60                   	pusha  
     a5b:	06                   	push   %es
     a5c:	1e                   	push   %ds
     a5d:	8c c8                	mov    %cs,%eax
     a5f:	8e d8                	mov    %eax,%ds
     a61:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a66:	b8 3f 00 bb 04       	mov    $0x4bb003f,%eax
     a6b:	00 f7                	add    %dh,%bh
     a6d:	e3 89                	jecxz  9f8 <_initialInt+0x1f2>
     a6f:	c7                   	(bad)  
     a70:	b8 e8 07 26 89       	mov    $0x892607e8,%eax
     a75:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a7a:	45                   	inc    %ebp
     a7b:	02 1f                	add    (%edi),%bl
     a7d:	07                   	pop    %es
     a7e:	61                   	popa   
     a7f:	c9                   	leave  
     a80:	66 5a                	pop    %dx
     a82:	ff e2                	jmp    *%edx

00000a84 <_initialInt_09h>:
     a84:	c8 00 00 00          	enter  $0x0,$0x0
     a88:	a1 24 00 a3 b2       	mov    0xb2a30024,%eax
     a8d:	02 a1 26 00 a3 b4    	add    -0x4b5cffda(%ecx),%ah
     a93:	02 60 06             	add    0x6(%eax),%ah
     a96:	1e                   	push   %ds
     a97:	8c c8                	mov    %cs,%eax
     a99:	8e d8                	mov    %eax,%ds
     a9b:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     aa0:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
     aa5:	00 f7                	add    %dh,%bh
     aa7:	e3 89                	jecxz  a32 <BOOTSEG+0x22>
     aa9:	c7                   	(bad)  
     aaa:	b8 3e 05 26 89       	mov    $0x8926053e,%eax
     aaf:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     ab4:	45                   	inc    %ebp
     ab5:	02 1f                	add    (%edi),%bl
     ab7:	07                   	pop    %es
     ab8:	61                   	popa   
     ab9:	c9                   	leave  
     aba:	66 5a                	pop    %dx
     abc:	ff e2                	jmp    *%edx

00000abe <_initialInt_08h>:
     abe:	c8 00 00 00          	enter  $0x0,$0x0
     ac2:	b0 40                	mov    $0x40,%al
     ac4:	e6 43                	out    %al,$0x43
     ac6:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
     acb:	88 e0                	mov    %ah,%al
     acd:	e6 40                	out    %al,$0x40
     acf:	60                   	pusha  
     ad0:	06                   	push   %es
     ad1:	1e                   	push   %ds
     ad2:	8c c8                	mov    %cs,%eax
     ad4:	8e d8                	mov    %eax,%ds
     ad6:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     adb:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
     ae0:	00 f7                	add    %dh,%bh
     ae2:	e3 89                	jecxz  a6d <BOOTSEG+0x5d>
     ae4:	c7                   	(bad)  
     ae5:	b8 b9 04 26 89       	mov    $0x892604b9,%eax
     aea:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     aef:	45                   	inc    %ebp
     af0:	02 1f                	add    (%edi),%bl
     af2:	07                   	pop    %es
     af3:	61                   	popa   
     af4:	c9                   	leave  
     af5:	66 5a                	pop    %dx
     af7:	ff e2                	jmp    *%edx

00000af9 <_save>:
     af9:	66 89 26             	mov    %sp,(%esi)
     afc:	ca 02 1e             	lret   $0x1e02
     aff:	0e                   	push   %cs
     b00:	1f                   	pop    %ds
     b01:	8f 06                	popl   (%esi)
     b03:	ba 02 8f 06 be       	mov    $0xbe068f02,%edx
     b08:	02 66 89             	add    -0x77(%esi),%ah
     b0b:	26 c6 02 66          	movb   $0x66,%es:(%edx)
     b0f:	89 36                	mov    %esi,(%esi)
     b11:	c0 02 66             	rolb   $0x66,(%edx)
     b14:	8b 36                	mov    (%esi),%esi
     b16:	7c 37                	jl     b4f <_save+0x56>
     b18:	66 83 c6 2c          	add    $0x2c,%si
     b1c:	67 8f 06 67 8f       	popl   -0x7099
     b21:	46                   	inc    %esi
     b22:	04 67                	add    $0x67,%al
     b24:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
     b2b:	46                   	inc    %esi
     b2c:	08 67 c7             	or     %ah,-0x39(%edi)
     b2f:	46                   	inc    %esi
     b30:	0a 00                	or     (%eax),%al
     b32:	00 66 67             	add    %ah,0x67(%esi)
     b35:	89 66 fc             	mov    %esp,-0x4(%esi)
     b38:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
     b3c:	8c de                	mov    %ds,%esi
     b3e:	8e d6                	mov    %esi,%ss
     b40:	66 8b 26             	mov    (%esi),%sp
     b43:	7c 37                	jl     b7c <_restart+0xf>
     b45:	66 83 c4 24          	add    $0x24,%sp
     b49:	6a 00                	push   $0x0
     b4b:	ff 36                	pushl  (%esi)
     b4d:	ba 02 6a 00 06       	mov    $0x6006a02,%edx
     b52:	66 55                	push   %bp
     b54:	66 57                	push   %di
     b56:	66 ff 36             	pushw  (%esi)
     b59:	c0 02 66             	rolb   $0x66,(%edx)
     b5c:	52                   	push   %edx
     b5d:	66 51                	push   %cx
     b5f:	66 53                	push   %bx
     b61:	66 50                	push   %ax
     b63:	66 8b 26             	mov    (%esi),%sp
     b66:	c6 02 a1             	movb   $0xa1,(%edx)
     b69:	be 02 ff e0 66       	mov    $0x66e0ff02,%esi

00000b6d <_restart>:
     b6d:	66 89 26             	mov    %sp,(%esi)
     b70:	c6 02 66             	movb   $0x66,(%edx)
     b73:	8b 26                	mov    (%esi),%esp
     b75:	7c 37                	jl     bae <_restart+0x41>
     b77:	66 58                	pop    %ax
     b79:	66 5b                	pop    %bx
     b7b:	66 59                	pop    %cx
     b7d:	66 5a                	pop    %dx
     b7f:	66 5e                	pop    %si
     b81:	66 5f                	pop    %di
     b83:	66 5d                	pop    %bp
     b85:	07                   	pop    %es
     b86:	8f 06                	popl   (%esi)
     b88:	c4 02                	les    (%edx),%eax
     b8a:	8f 06                	popl   (%esi)
     b8c:	ba 02 8f 06 c4       	mov    $0xc4068f02,%edx
     b91:	02 66 89             	add    -0x77(%esi),%ah
     b94:	36 c0 02 17          	rolb   $0x17,%ss:(%edx)
     b98:	8f 06                	popl   (%esi)
     b9a:	c4 02                	les    (%edx),%eax
     b9c:	66 89 e6             	mov    %sp,%si
     b9f:	66 67 8b 26 67 ff    	mov    -0x99,%sp
     ba5:	76 0c                	jbe    bb3 <_restart+0x46>
     ba7:	67 ff 76 08          	pushl  0x8(%bp)
     bab:	67 ff 76 04          	pushl  0x4(%bp)
     baf:	66 8b 36             	mov    (%esi),%si
     bb2:	c0 02 8e             	rolb   $0x8e,(%edx)
     bb5:	1e                   	push   %ds
     bb6:	ba 02 50 b0 20       	mov    $0x20b05002,%edx
     bbb:	e6 20                	out    %al,$0x20
     bbd:	e6 a0                	out    %al,$0xa0
     bbf:	58                   	pop    %eax
     bc0:	cf                   	iret   

00000bc1 <RTC_Timer>:
     bc1:	c8 00 00 00          	enter  $0x0,$0x0
     bc5:	1e                   	push   %ds
     bc6:	06                   	push   %es
     bc7:	60                   	pusha  
     bc8:	8c c8                	mov    %cs,%eax
     bca:	8e d8                	mov    %eax,%ds
     bcc:	8c c8                	mov    %cs,%eax
     bce:	8e c0                	mov    %eax,%es
     bd0:	bf 40 30 b4 02       	mov    $0x2b43040,%edi
     bd5:	cd 1a                	int    $0x1a
     bd7:	88 e8                	mov    %ch,%al
     bd9:	b4 00                	mov    $0x0,%ah
     bdb:	b3 10                	mov    $0x10,%bl
     bdd:	f6 f3                	div    %bl
     bdf:	04 30                	add    $0x30,%al
     be1:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
     be7:	88 e8                	mov    %ch,%al
     be9:	24 0f                	and    $0xf,%al
     beb:	04 30                	add    $0x30,%al
     bed:	88 45 01             	mov    %al,0x1(%ebp)
     bf0:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
     bf4:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
     bf8:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
     bfc:	b4 02                	mov    $0x2,%ah
     bfe:	cd 1a                	int    $0x1a
     c00:	88 c8                	mov    %cl,%al
     c02:	b4 00                	mov    $0x0,%ah
     c04:	b3 10                	mov    $0x10,%bl
     c06:	f6 f3                	div    %bl
     c08:	04 30                	add    $0x30,%al
     c0a:	88 45 05             	mov    %al,0x5(%ebp)
     c0d:	b4 02                	mov    $0x2,%ah
     c0f:	cd 1a                	int    $0x1a
     c11:	88 c8                	mov    %cl,%al
     c13:	24 0f                	and    $0xf,%al
     c15:	04 30                	add    $0x30,%al
     c17:	88 45 06             	mov    %al,0x6(%ebp)
     c1a:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
     c1e:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
     c22:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
     c26:	8c c8                	mov    %cs,%eax
     c28:	8e d8                	mov    %eax,%ds
     c2a:	8e c0                	mov    %eax,%es
     c2c:	bd df 02 8c d8       	mov    $0xd88c02df,%ebp
     c31:	8e c0                	mov    %eax,%es
     c33:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
     c38:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     c3e:	b2 0a                	mov    $0xa,%dl
     c40:	cd 10                	int    $0x10
     c42:	8c c8                	mov    %cs,%eax
     c44:	8e d8                	mov    %eax,%ds
     c46:	8e c0                	mov    %eax,%es
     c48:	bd 40 30 8c d8       	mov    $0xd88c3040,%ebp
     c4d:	8e c0                	mov    %eax,%es
     c4f:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
     c54:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     c5a:	b2 1e                	mov    $0x1e,%dl
     c5c:	cd 10                	int    $0x10
     c5e:	61                   	popa   
     c5f:	07                   	pop    %es
     c60:	1f                   	pop    %ds
     c61:	c9                   	leave  
     c62:	66 5a                	pop    %dx
     c64:	ff e2                	jmp    *%edx

00000c66 <_Get_Hours_1>:
     c66:	c8 04 00 00          	enter  $0x4,$0x0
     c6a:	b4 02                	mov    $0x2,%ah
     c6c:	cd 1a                	int    $0x1a
     c6e:	88 e8                	mov    %ch,%al
     c70:	b4 00                	mov    $0x0,%ah
     c72:	b3 10                	mov    $0x10,%bl
     c74:	f6 f3                	div    %bl
     c76:	30 e4                	xor    %ah,%ah
     c78:	66 67 89 04          	mov    %ax,(%si)
     c7c:	24 66                	and    $0x66,%al
     c7e:	67 8b 04             	mov    (%si),%eax
     c81:	24 c9                	and    $0xc9,%al
     c83:	66 5a                	pop    %dx
     c85:	ff e2                	jmp    *%edx

00000c87 <_Get_Hours_2>:
     c87:	c8 04 00 00          	enter  $0x4,$0x0
     c8b:	b4 02                	mov    $0x2,%ah
     c8d:	cd 1a                	int    $0x1a
     c8f:	88 e8                	mov    %ch,%al
     c91:	24 0f                	and    $0xf,%al
     c93:	30 e4                	xor    %ah,%ah
     c95:	66 67 89 04          	mov    %ax,(%si)
     c99:	24 66                	and    $0x66,%al
     c9b:	67 8b 04             	mov    (%si),%eax
     c9e:	24 c9                	and    $0xc9,%al
     ca0:	66 5a                	pop    %dx
     ca2:	ff e2                	jmp    *%edx

00000ca4 <_Get_Minutes_1>:
     ca4:	c8 04 00 00          	enter  $0x4,$0x0
     ca8:	b4 02                	mov    $0x2,%ah
     caa:	cd 1a                	int    $0x1a
     cac:	88 c8                	mov    %cl,%al
     cae:	b4 00                	mov    $0x0,%ah
     cb0:	b3 10                	mov    $0x10,%bl
     cb2:	f6 f3                	div    %bl
     cb4:	30 e4                	xor    %ah,%ah
     cb6:	66 67 89 04          	mov    %ax,(%si)
     cba:	24 66                	and    $0x66,%al
     cbc:	67 8b 04             	mov    (%si),%eax
     cbf:	24 c9                	and    $0xc9,%al
     cc1:	66 5a                	pop    %dx
     cc3:	ff e2                	jmp    *%edx

00000cc5 <_Get_Minutes_2>:
     cc5:	c8 04 00 00          	enter  $0x4,$0x0
     cc9:	b4 02                	mov    $0x2,%ah
     ccb:	cd 1a                	int    $0x1a
     ccd:	88 c8                	mov    %cl,%al
     ccf:	24 0f                	and    $0xf,%al
     cd1:	30 e4                	xor    %ah,%ah
     cd3:	66 67 89 04          	mov    %ax,(%si)
     cd7:	24 66                	and    $0x66,%al
     cd9:	67 8b 04             	mov    (%si),%eax
     cdc:	24 c9                	and    $0xc9,%al
     cde:	66 5a                	pop    %dx
     ce0:	ff e2                	jmp    *%edx

00000ce2 <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
     ce2:	66 55                	push   %bp
     ce4:	66 89 e5             	mov    %sp,%bp
     ce7:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
     ceb:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     cf0:	66 89 d0             	mov    %dx,%ax
     cf3:	66 c1 e0 02          	shl    $0x2,%ax
     cf7:	66 01 d0             	add    %dx,%ax
     cfa:	66 c1 e0 04          	shl    $0x4,%ax
     cfe:	66 89 c2             	mov    %ax,%dx
     d01:	67 66 8b 45 10       	mov    0x10(%di),%ax
     d06:	66 01 d0             	add    %dx,%ax
     d09:	66 01 c0             	add    %ax,%ax
     d0c:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
     d11:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     d18:	00 00                	add    %al,(%eax)
	int index = 0;
     d1a:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     d21:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     d23:	eb 35                	jmp    d5a <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
     d25:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     d2a:	67 66 8b 45 08       	mov    0x8(%di),%ax
     d2f:	66 01 d0             	add    %dx,%ax
     d32:	67 8a 00             	mov    (%bx,%si),%al
     d35:	66 0f be c0          	movsbw %al,%ax
     d39:	67 66 ff 75 f4       	pushw  -0xc(%di)
     d3e:	67 66 ff 75 fc       	pushw  -0x4(%di)
     d43:	66 50                	push   %ax
     d45:	66 e8 d2 f5          	callw  31b <_clearscreen+0x7>
     d49:	ff                   	(bad)  
     d4a:	ff 66 83             	jmp    *-0x7d(%esi)
     d4d:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     d50:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     d54:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
     d5a:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     d5f:	67 66 8b 45 08       	mov    0x8(%di),%ax
     d64:	66 01 d0             	add    %dx,%ax
     d67:	67 8a 00             	mov    (%bx,%si),%al
     d6a:	84 c0                	test   %al,%al
     d6c:	75 b7                	jne    d25 <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     d6e:	90                   	nop
}
     d6f:	66 c9                	leavew 
     d71:	66 c3                	retw   

00000d73 <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
     d73:	66 55                	push   %bp
     d75:	66 89 e5             	mov    %sp,%bp
     d78:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
     d7c:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     d81:	66 89 d0             	mov    %dx,%ax
     d84:	66 c1 e0 02          	shl    $0x2,%ax
     d88:	66 01 d0             	add    %dx,%ax
     d8b:	66 c1 e0 04          	shl    $0x4,%ax
     d8f:	66 89 c2             	mov    %ax,%dx
     d92:	67 66 8b 45 10       	mov    0x10(%di),%ax
     d97:	66 01 d0             	add    %dx,%ax
     d9a:	66 01 c0             	add    %ax,%ax
     d9d:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
     da2:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     da9:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     dab:	eb 35                	jmp    de2 <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
     dad:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     db2:	67 66 8b 45 08       	mov    0x8(%di),%ax
     db7:	66 01 d0             	add    %dx,%ax
     dba:	67 8a 00             	mov    (%bx,%si),%al
     dbd:	66 0f be c0          	movsbw %al,%ax
     dc1:	67 66 ff 75 14       	pushw  0x14(%di)
     dc6:	67 66 ff 75 fc       	pushw  -0x4(%di)
     dcb:	66 50                	push   %ax
     dcd:	66 e8 4a f5          	callw  31b <_clearscreen+0x7>
     dd1:	ff                   	(bad)  
     dd2:	ff 66 83             	jmp    *-0x7d(%esi)
     dd5:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     dd8:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     ddc:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
     de2:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     de7:	67 66 8b 45 08       	mov    0x8(%di),%ax
     dec:	66 01 d0             	add    %dx,%ax
     def:	67 8a 00             	mov    (%bx,%si),%al
     df2:	84 c0                	test   %al,%al
     df4:	75 b7                	jne    dad <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     df6:	90                   	nop
}
     df7:	66 c9                	leavew 
     df9:	66 c3                	retw   

00000dfb <sys_showline>:
void sys_showline(){
     dfb:	66 55                	push   %bp
     dfd:	66 89 e5             	mov    %sp,%bp
     e00:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
     e04:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
     e09:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
     e0e:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
     e13:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
     e18:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
     e1d:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
     e22:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
     e27:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     e2e:	00 00                	add    %al,(%eax)
    int i = 0;
     e30:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     e37:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
     e39:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     e40:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
     e42:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     e49:	00 00                	add    %al,(%eax)
     e4b:	eb 52                	jmp    e9f <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
     e4d:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     e52:	66 89 d0             	mov    %dx,%ax
     e55:	66 c1 e0 03          	shl    $0x3,%ax
     e59:	66 01 d0             	add    %dx,%ax
     e5c:	67 66 8d 14          	lea    (%si),%dx
     e60:	c5 00                	lds    (%eax),%eax
     e62:	00 00                	add    %al,(%eax)
     e64:	00 66 01             	add    %ah,0x1(%esi)
     e67:	d0 66 01             	shlb   0x1(%esi)
     e6a:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
     e6e:	45                   	inc    %ebp
     e6f:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
     e75:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     e7a:	66 01 d0             	add    %dx,%ax
     e7d:	67 8a 00             	mov    (%bx,%si),%al
     e80:	66 0f be c0          	movsbw %al,%ax
     e84:	67 66 ff 75 f4       	pushw  -0xc(%di)
     e89:	67 66 ff 75 f0       	pushw  -0x10(%di)
     e8e:	66 50                	push   %ax
     e90:	66 e8 87 f4          	callw  31b <_clearscreen+0x7>
     e94:	ff                   	(bad)  
     e95:	ff 66 83             	jmp    *-0x7d(%esi)
     e98:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
     e9b:	66 ff 45 fc          	incw   -0x4(%ebp)
     e9f:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
     ea5:	7e a6                	jle    e4d <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
     ea7:	66 c9                	leavew 
     ea9:	66 c3                	retw   

00000eab <sys_printname>:

void sys_printname(){
     eab:	66 55                	push   %bp
     ead:	66 89 e5             	mov    %sp,%bp
     eb0:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
     eb4:	67 66 c7 45 fc 8c 21 	movw   $0x218c,-0x4(%di)
     ebb:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
     ebd:	67 66 c7 45 f8 d0 21 	movw   $0x21d0,-0x8(%di)
     ec4:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
     ec6:	67 66 c7 45 f4 14 22 	movw   $0x2214,-0xc(%di)
     ecd:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
     ecf:	67 66 c7 45 f0 58 22 	movw   $0x2258,-0x10(%di)
     ed6:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
     ed8:	67 66 c7 45 ec 9c 22 	movw   $0x229c,-0x14(%di)
     edf:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
     ee1:	67 66 c7 45 e8 e0 22 	movw   $0x22e0,-0x18(%di)
     ee8:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
     eea:	67 66 c7 45 e4 24 23 	movw   $0x2324,-0x1c(%di)
     ef1:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
     ef3:	66 6a 0b             	pushw  $0xb
     ef6:	66 6a 10             	pushw  $0x10
     ef9:	67 66 ff 75 fc       	pushw  -0x4(%di)
     efe:	66 e8 de fd          	callw  ce0 <_Get_Minutes_2+0x1b>
     f02:	ff                   	(bad)  
     f03:	ff 66 83             	jmp    *-0x7d(%esi)
     f06:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
     f09:	6a 0b                	push   $0xb
     f0b:	66 6a 11             	pushw  $0x11
     f0e:	67 66 ff 75 f8       	pushw  -0x8(%di)
     f13:	66 e8 c9 fd          	callw  ce0 <_Get_Minutes_2+0x1b>
     f17:	ff                   	(bad)  
     f18:	ff 66 83             	jmp    *-0x7d(%esi)
     f1b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
     f1e:	6a 0b                	push   $0xb
     f20:	66 6a 12             	pushw  $0x12
     f23:	67 66 ff 75 f4       	pushw  -0xc(%di)
     f28:	66 e8 b4 fd          	callw  ce0 <_Get_Minutes_2+0x1b>
     f2c:	ff                   	(bad)  
     f2d:	ff 66 83             	jmp    *-0x7d(%esi)
     f30:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
     f33:	6a 0b                	push   $0xb
     f35:	66 6a 13             	pushw  $0x13
     f38:	67 66 ff 75 f0       	pushw  -0x10(%di)
     f3d:	66 e8 9f fd          	callw  ce0 <_Get_Minutes_2+0x1b>
     f41:	ff                   	(bad)  
     f42:	ff 66 83             	jmp    *-0x7d(%esi)
     f45:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
     f48:	6a 0b                	push   $0xb
     f4a:	66 6a 14             	pushw  $0x14
     f4d:	67 66 ff 75 ec       	pushw  -0x14(%di)
     f52:	66 e8 8a fd          	callw  ce0 <_Get_Minutes_2+0x1b>
     f56:	ff                   	(bad)  
     f57:	ff 66 83             	jmp    *-0x7d(%esi)
     f5a:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
     f5d:	6a 0b                	push   $0xb
     f5f:	66 6a 15             	pushw  $0x15
     f62:	67 66 ff 75 e8       	pushw  -0x18(%di)
     f67:	66 e8 75 fd          	callw  ce0 <_Get_Minutes_2+0x1b>
     f6b:	ff                   	(bad)  
     f6c:	ff 66 83             	jmp    *-0x7d(%esi)
     f6f:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
     f72:	6a 0b                	push   $0xb
     f74:	66 6a 16             	pushw  $0x16
     f77:	67 66 ff 75 e4       	pushw  -0x1c(%di)
     f7c:	66 e8 60 fd          	callw  ce0 <_Get_Minutes_2+0x1b>
     f80:	ff                   	(bad)  
     f81:	ff 66 83             	jmp    *-0x7d(%esi)
     f84:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
     f87:	c9                   	leave  
     f88:	66 c3                	retw   

00000f8a <sys_printpoem>:
void sys_printpoem(){
     f8a:	66 55                	push   %bp
     f8c:	66 89 e5             	mov    %sp,%bp
     f8f:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
     f93:	67 66 c7 45 f8 68 23 	movw   $0x2368,-0x8(%di)
     f9a:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
     f9c:	67 66 c7 45 f4 7a 23 	movw   $0x237a,-0xc(%di)
     fa3:	00 00                	add    %al,(%eax)
    int i = 1;
     fa5:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     fac:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
     fae:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     fb5:	00 00                	add    %al,(%eax)
     fb7:	eb 4b                	jmp    1004 <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
     fb9:	67 66 ff 75 fc       	pushw  -0x4(%di)
     fbe:	66 6a 0a             	pushw  $0xa
     fc1:	66 6a 0f             	pushw  $0xf
     fc4:	67 66 ff 75 f8       	pushw  -0x8(%di)
     fc9:	66 e8 a4 fd          	callw  d71 <sys_print_for_heart+0x8f>
     fcd:	ff                   	(bad)  
     fce:	ff 66 83             	jmp    *-0x7d(%esi)
     fd1:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
     fd3:	67 66 ff 75 fc       	pushw  -0x4(%di)
     fd8:	66 6a 0a             	pushw  $0xa
     fdb:	66 6a 10             	pushw  $0x10
     fde:	67 66 ff 75 f4       	pushw  -0xc(%di)
     fe3:	66 e8 8a fd          	callw  d71 <sys_print_for_heart+0x8f>
     fe7:	ff                   	(bad)  
     fe8:	ff 66 83             	jmp    *-0x7d(%esi)
     feb:	c4 10                	les    (%eax),%edx
        int j = 0;
     fed:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     ff4:	00 00                	add    %al,(%eax)
        int k = 0;
     ff6:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
     ffd:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
     fff:	67 66 ff 45 fc       	incw   -0x4(%di)
    1004:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    100a:	7e ad                	jle    fb9 <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
    100c:	66 c9                	leavew 
    100e:	66 c3                	retw   

00001010 <sys_printheart>:
void sys_printheart(){
    1010:	66 55                	push   %bp
    1012:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
    1015:	66 6a 28             	pushw  $0x28
    1018:	66 6a 00             	pushw  $0x0
    101b:	66 68 83 23          	pushw  $0x2383
    101f:	00 00                	add    %al,(%eax)
    1021:	66 e8 bb fc          	callw  ce0 <_Get_Minutes_2+0x1b>
    1025:	ff                   	(bad)  
    1026:	ff 66 83             	jmp    *-0x7d(%esi)
    1029:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
    102c:	6a 28                	push   $0x28
    102e:	66 6a 01             	pushw  $0x1
    1031:	66 68 9b 23          	pushw  $0x239b
    1035:	00 00                	add    %al,(%eax)
    1037:	66 e8 a5 fc          	callw  ce0 <_Get_Minutes_2+0x1b>
    103b:	ff                   	(bad)  
    103c:	ff 66 83             	jmp    *-0x7d(%esi)
    103f:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
    1042:	6a 28                	push   $0x28
    1044:	66 6a 02             	pushw  $0x2
    1047:	66 68 b4 23          	pushw  $0x23b4
    104b:	00 00                	add    %al,(%eax)
    104d:	66 e8 8f fc          	callw  ce0 <_Get_Minutes_2+0x1b>
    1051:	ff                   	(bad)  
    1052:	ff 66 83             	jmp    *-0x7d(%esi)
    1055:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
    1058:	6a 28                	push   $0x28
    105a:	66 6a 03             	pushw  $0x3
    105d:	66 68 cf 23          	pushw  $0x23cf
    1061:	00 00                	add    %al,(%eax)
    1063:	66 e8 79 fc          	callw  ce0 <_Get_Minutes_2+0x1b>
    1067:	ff                   	(bad)  
    1068:	ff 66 83             	jmp    *-0x7d(%esi)
    106b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
    106e:	6a 28                	push   $0x28
    1070:	66 6a 04             	pushw  $0x4
    1073:	66 68 e8 23          	pushw  $0x23e8
    1077:	00 00                	add    %al,(%eax)
    1079:	66 e8 63 fc          	callw  ce0 <_Get_Minutes_2+0x1b>
    107d:	ff                   	(bad)  
    107e:	ff 66 83             	jmp    *-0x7d(%esi)
    1081:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
    1084:	6a 28                	push   $0x28
    1086:	66 6a 05             	pushw  $0x5
    1089:	66 68 00 24          	pushw  $0x2400
    108d:	00 00                	add    %al,(%eax)
    108f:	66 e8 4d fc          	callw  ce0 <_Get_Minutes_2+0x1b>
    1093:	ff                   	(bad)  
    1094:	ff 66 83             	jmp    *-0x7d(%esi)
    1097:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
    109a:	6a 28                	push   $0x28
    109c:	66 6a 06             	pushw  $0x6
    109f:	66 68 17 24          	pushw  $0x2417
    10a3:	00 00                	add    %al,(%eax)
    10a5:	66 e8 37 fc          	callw  ce0 <_Get_Minutes_2+0x1b>
    10a9:	ff                   	(bad)  
    10aa:	ff 66 83             	jmp    *-0x7d(%esi)
    10ad:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
    10b0:	6a 28                	push   $0x28
    10b2:	66 6a 07             	pushw  $0x7
    10b5:	66 68 2d 24          	pushw  $0x242d
    10b9:	00 00                	add    %al,(%eax)
    10bb:	66 e8 21 fc          	callw  ce0 <_Get_Minutes_2+0x1b>
    10bf:	ff                   	(bad)  
    10c0:	ff 66 83             	jmp    *-0x7d(%esi)
    10c3:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    10c6:	c9                   	leave  
    10c7:	66 c3                	retw   

000010c9 <initial_PCB>:
#include "schedule.h"
#include "use.h"
void initial_PCB(int index){
    10c9:	66 55                	push   %bp
    10cb:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    10ce:	67 66 8b 45 08       	mov    0x8(%di),%ax
    10d3:	66 40                	inc    %ax
    10d5:	66 c1 e0 0c          	shl    $0xc,%ax
    10d9:	66 89 c2             	mov    %ax,%dx
    10dc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    10e1:	66 c1 e0 02          	shl    $0x2,%ax
    10e5:	66 89 c1             	mov    %ax,%cx
    10e8:	66 c1 e1 04          	shl    $0x4,%cx
    10ec:	66 01 c8             	add    %cx,%ax
    10ef:	66 05 50 32          	add    $0x3250,%ax
    10f3:	00 00                	add    %al,(%eax)
    10f5:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    10f9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    10fe:	66 40                	inc    %ax
    1100:	66 c1 e0 0c          	shl    $0xc,%ax
    1104:	66 89 c2             	mov    %ax,%dx
    1107:	67 66 8b 45 08       	mov    0x8(%di),%ax
    110c:	66 c1 e0 02          	shl    $0x2,%ax
    1110:	66 89 c1             	mov    %ax,%cx
    1113:	66 c1 e1 04          	shl    $0x4,%cx
    1117:	66 01 c8             	add    %cx,%ax
    111a:	66 05 40 32          	add    $0x3240,%ax
    111e:	00 00                	add    %al,(%eax)
    1120:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
    1124:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1129:	66 40                	inc    %ax
    112b:	66 c1 e0 0c          	shl    $0xc,%ax
    112f:	66 89 c2             	mov    %ax,%dx
    1132:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1137:	66 c1 e0 02          	shl    $0x2,%ax
    113b:	66 89 c1             	mov    %ax,%cx
    113e:	66 c1 e1 04          	shl    $0x4,%cx
    1142:	66 01 c8             	add    %cx,%ax
    1145:	66 05 40 32          	add    $0x3240,%ax
    1149:	00 00                	add    %al,(%eax)
    114b:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
    1150:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1155:	66 c1 e0 02          	shl    $0x2,%ax
    1159:	66 89 c2             	mov    %ax,%dx
    115c:	66 c1 e2 04          	shl    $0x4,%dx
    1160:	66 01 d0             	add    %dx,%ax
    1163:	66 05 40 32          	add    $0x3240,%ax
    1167:	00 00                	add    %al,(%eax)
    1169:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
    1170:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
    1172:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1177:	66 c1 e0 02          	shl    $0x2,%ax
    117b:	66 89 c2             	mov    %ax,%dx
    117e:	66 c1 e2 04          	shl    $0x4,%dx
    1182:	66 01 d0             	add    %dx,%ax
    1185:	66 05 40 32          	add    $0x3240,%ax
    1189:	00 00                	add    %al,(%eax)
    118b:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    1192:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = READY;
    1194:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1199:	66 c1 e0 02          	shl    $0x2,%ax
    119d:	66 89 c2             	mov    %ax,%dx
    11a0:	66 c1 e2 04          	shl    $0x4,%dx
    11a4:	66 01 d0             	add    %dx,%ax
    11a7:	66 05 50 32          	add    $0x3250,%ax
    11ab:	00 00                	add    %al,(%eax)
    11ad:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    11b4:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    11b6:	67 66 ff 75 08       	pushw  0x8(%di)
    11bb:	66 68 e0 68          	pushw  $0x68e0
    11bf:	00 00                	add    %al,(%eax)
    11c1:	66 e8 8b 09          	callw  1b50 <size+0x11>
    11c5:	00 00                	add    %al,(%eax)
    11c7:	66 83 c4 08          	add    $0x8,%sp
    PCB_list[index ].eflags = 512;
    11cb:	67 66 8b 45 08       	mov    0x8(%di),%ax
    11d0:	66 c1 e0 02          	shl    $0x2,%ax
    11d4:	66 89 c2             	mov    %ax,%dx
    11d7:	66 c1 e2 04          	shl    $0x4,%dx
    11db:	66 01 d0             	add    %dx,%ax
    11de:	66 05 50 32          	add    $0x3250,%ax
    11e2:	00 00                	add    %al,(%eax)
    11e4:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    11eb:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    11ed:	67 66 8b 45 08       	mov    0x8(%di),%ax
    11f2:	66 c1 e0 02          	shl    $0x2,%ax
    11f6:	66 89 c2             	mov    %ax,%dx
    11f9:	66 c1 e2 04          	shl    $0x4,%dx
    11fd:	66 01 d0             	add    %dx,%ax
    1200:	67 66 8d 90 50 32    	lea    0x3250(%bx,%si),%dx
    1206:	00 00                	add    %al,(%eax)
    1208:	67 66 8b 45 08       	mov    0x8(%di),%ax
    120d:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 0;
    1212:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1217:	66 c1 e0 02          	shl    $0x2,%ax
    121b:	66 89 c2             	mov    %ax,%dx
    121e:	66 c1 e2 04          	shl    $0x4,%dx
    1222:	66 01 d0             	add    %dx,%ax
    1225:	66 05 60 32          	add    $0x3260,%ax
    1229:	00 00                	add    %al,(%eax)
    122b:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1231:	00 00                	add    %al,(%eax)
}
    1233:	66 c9                	leavew 
    1235:	66 c3                	retw   

00001237 <Set_PCB>:
void Set_PCB(){
    1237:	66 55                	push   %bp
    1239:	66 89 e5             	mov    %sp,%bp
    123c:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    1240:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1247:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    1249:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1250:	00 00                	add    %al,(%eax)
    1252:	eb 27                	jmp    127b <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    1254:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1259:	66 c1 e0 02          	shl    $0x2,%ax
    125d:	66 89 c2             	mov    %ax,%dx
    1260:	66 c1 e2 04          	shl    $0x4,%dx
    1264:	66 01 d0             	add    %dx,%ax
    1267:	66 05 50 32          	add    $0x3250,%ax
    126b:	00 00                	add    %al,(%eax)
    126d:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    1274:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 0;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    1276:	67 66 ff 45 fc       	incw   -0x4(%di)
    127b:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    1281:	7e d1                	jle    1254 <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    1283:	66 c9                	leavew 
    1285:	66 c3                	retw   

00001287 <sys_schedule>:
int sch_index;
int current_index ;
void sys_schedule(){
    1287:	66 55                	push   %bp
    1289:	66 89 e5             	mov    %sp,%bp
    int i,j;
    if(isempty(&readyqueue) != 1){
    128c:	66 68 e0 68          	pushw  $0x68e0
    1290:	00 00                	add    %al,(%eax)
    1292:	66 e8 8a 08          	callw  1b20 <stack_copy+0x35>
    1296:	00 00                	add    %al,(%eax)
    1298:	66 83 c4 04          	add    $0x4,%sp
    129c:	66 83 f8 01          	cmp    $0x1,%ax
    12a0:	0f 84 e0 00 66 a1    	je     a1661386 <delay+0xa1655036>
        current_index = _CurrentProg - PCB_list;
    12a6:	7c 37                	jl     12df <sys_schedule+0x58>
    12a8:	66 89 c2             	mov    %ax,%dx
    12ab:	66 b8 20 32          	mov    $0x3220,%ax
    12af:	00 00                	add    %al,(%eax)
    12b1:	66 29 c2             	sub    %ax,%dx
    12b4:	66 89 d0             	mov    %dx,%ax
    12b7:	66 c1 f8 02          	sar    $0x2,%ax
    12bb:	66 89 c2             	mov    %ax,%dx
    12be:	66 89 d0             	mov    %dx,%ax
    12c1:	66 01 c0             	add    %ax,%ax
    12c4:	66 01 d0             	add    %dx,%ax
    12c7:	67 66 8d 14          	lea    (%si),%dx
    12cb:	85 00                	test   %eax,(%eax)
    12cd:	00 00                	add    %al,(%eax)
    12cf:	00 66 01             	add    %ah,0x1(%esi)
    12d2:	d0 66 89             	shlb   -0x77(%esi)
    12d5:	c2 66 c1             	ret    $0xc166
    12d8:	e2 08                	loop   12e2 <sys_schedule+0x5b>
    12da:	66 01 d0             	add    %dx,%ax
    12dd:	66 89 c2             	mov    %ax,%dx
    12e0:	66 c1 e2 10          	shl    $0x10,%dx
    12e4:	66 01 d0             	add    %dx,%ax
    12e7:	66 f7 d8             	neg    %ax
    12ea:	66 a3 80 37 66 a1    	mov    %ax,0xa1663780
        if(_CurrentProg -> prg_status == RUN){
    12f0:	7c 37                	jl     1329 <sys_schedule+0xa2>
    12f2:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    12f7:	66 83 f8 01          	cmp    $0x1,%ax
    12fb:	75 23                	jne    1320 <sys_schedule+0x99>
            _CurrentProg -> prg_status = READY;
    12fd:	66 a1 7c 37 67 66    	mov    0x6667377c,%ax
    1303:	c7 40 38 03 00 00 00 	movl   $0x3,0x38(%eax)
            enqueue(&readyqueue,current_index);
    130a:	66 a1 80 37 66 50    	mov    0x50663780,%ax
    1310:	66 68 e0 68          	pushw  $0x68e0
    1314:	00 00                	add    %al,(%eax)
    1316:	66 e8 36 08          	callw  1b50 <size+0x11>
    131a:	00 00                	add    %al,(%eax)
    131c:	66 83 c4 08          	add    $0x8,%sp
        }
        dequeue(&readyqueue,&sch_index);
    1320:	66 68 70 37          	pushw  $0x3770
    1324:	00 00                	add    %al,(%eax)
    1326:	66 68 e0 68          	pushw  $0x68e0
    132a:	00 00                	add    %al,(%eax)
    132c:	66 e8 8c 08          	callw  1bbc <enqueue+0x6a>
    1330:	00 00                	add    %al,(%eax)
    1332:	66 83 c4 08          	add    $0x8,%sp
        if(PCB_list[sch_index].prg_status == READY){
    1336:	66 a1 70 37 66 c1    	mov    0xc1663770,%ax
    133c:	e0 02                	loopne 1340 <sys_schedule+0xb9>
    133e:	66 89 c2             	mov    %ax,%dx
    1341:	66 c1 e2 04          	shl    $0x4,%dx
    1345:	66 01 d0             	add    %dx,%ax
    1348:	66 05 50 32          	add    $0x3250,%ax
    134c:	00 00                	add    %al,(%eax)
    134e:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1353:	66 83 f8 03          	cmp    $0x3,%ax
    1357:	75 2b                	jne    1384 <sys_schedule+0xfd>
            _CurrentProg = PCB_list + sch_index;
    1359:	66 a1 70 37 66 c1    	mov    0xc1663770,%ax
    135f:	e0 02                	loopne 1363 <sys_schedule+0xdc>
    1361:	66 89 c2             	mov    %ax,%dx
    1364:	66 c1 e2 04          	shl    $0x4,%dx
    1368:	66 01 d0             	add    %dx,%ax
    136b:	66 05 20 32          	add    $0x3220,%ax
    136f:	00 00                	add    %al,(%eax)
    1371:	66 a3 7c 37 66 a1    	mov    %ax,0xa166377c
            _CurrentProg -> prg_status = RUN;
    1377:	7c 37                	jl     13b0 <sys_exit+0x1e>
    1379:	67 66 c7 40 38 01 00 	movw   $0x1,0x38(%bx,%si)
    1380:	00 00                	add    %al,(%eax)
            return;
    1382:	eb 0a                	jmp    138e <sys_schedule+0x107>
        }
    }
    _CurrentProg = PCB_list ;
    1384:	66 c7 06 7c 37       	movw   $0x377c,(%esi)
    1389:	20 32                	and    %dh,(%edx)
    138b:	00 00                	add    %al,(%eax)
    return;
    138d:	90                   	nop
    
}
    138e:	66 c9                	leavew 
    1390:	66 c3                	retw   

00001392 <sys_exit>:
void sys_exit(){
    1392:	66 55                	push   %bp
    1394:	66 89 e5             	mov    %sp,%bp
    1397:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    139b:	fa                   	cli    
    int index = _CurrentProg - PCB_list;
    139c:	66 a1 7c 37 66 89    	mov    0x8966377c,%ax
    13a2:	c2 66 b8             	ret    $0xb866
    13a5:	20 32                	and    %dh,(%edx)
    13a7:	00 00                	add    %al,(%eax)
    13a9:	66 29 c2             	sub    %ax,%dx
    13ac:	66 89 d0             	mov    %dx,%ax
    13af:	66 c1 f8 02          	sar    $0x2,%ax
    13b3:	66 89 c2             	mov    %ax,%dx
    13b6:	66 89 d0             	mov    %dx,%ax
    13b9:	66 01 c0             	add    %ax,%ax
    13bc:	66 01 d0             	add    %dx,%ax
    13bf:	67 66 8d 14          	lea    (%si),%dx
    13c3:	85 00                	test   %eax,(%eax)
    13c5:	00 00                	add    %al,(%eax)
    13c7:	00 66 01             	add    %ah,0x1(%esi)
    13ca:	d0 66 89             	shlb   -0x77(%esi)
    13cd:	c2 66 c1             	ret    $0xc166
    13d0:	e2 08                	loop   13da <sys_exit+0x48>
    13d2:	66 01 d0             	add    %dx,%ax
    13d5:	66 89 c2             	mov    %ax,%dx
    13d8:	66 c1 e2 10          	shl    $0x10,%dx
    13dc:	66 01 d0             	add    %dx,%ax
    13df:	66 f7 d8             	neg    %ax
    13e2:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    rmele(&readyqueue,index);
    13e7:	67 66 ff 75 fc       	pushw  -0x4(%di)
    13ec:	66 68 e0 68          	pushw  $0x68e0
    13f0:	00 00                	add    %al,(%eax)
    13f2:	66 e8 6a 08          	callw  1c60 <init_queue+0x30>
    13f6:	00 00                	add    %al,(%eax)
    13f8:	66 83 c4 08          	add    $0x8,%sp
    _CurrentProg -> prg_status = EXIT;
    13fc:	66 a1 7c 37 67 66    	mov    0x6667377c,%ax
    1402:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    __asm__("sti\n");
    1409:	fb                   	sti    
}
    140a:	66 c9                	leavew 
    140c:	66 c3                	retw   

0000140e <sys_bolocked>:



int queuesize,tmp;//一定要是全局，否则dequeue无法将tmp修改
void sys_bolocked(int index){
    140e:	66 55                	push   %bp
    1410:	66 89 e5             	mov    %sp,%bp
    1413:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    1417:	fa                   	cli    
    PCB_list[index].prg_status = BLOCKED;
    1418:	67 66 8b 45 08       	mov    0x8(%di),%ax
    141d:	66 c1 e0 02          	shl    $0x2,%ax
    1421:	66 89 c2             	mov    %ax,%dx
    1424:	66 c1 e2 04          	shl    $0x4,%dx
    1428:	66 01 d0             	add    %dx,%ax
    142b:	66 05 50 32          	add    $0x3250,%ax
    142f:	00 00                	add    %al,(%eax)
    1431:	67 66 c7 40 08 02 00 	movw   $0x2,0x8(%bx,%si)
    1438:	00 00                	add    %al,(%eax)
    enqueue(&blockqueue,index);
    143a:	67 66 ff 75 08       	pushw  0x8(%di)
    143f:	66 68 80 30          	pushw  $0x3080
    1443:	00 00                	add    %al,(%eax)
    1445:	66 e8 07 07          	callw  1b50 <size+0x11>
    1449:	00 00                	add    %al,(%eax)
    144b:	66 83 c4 08          	add    $0x8,%sp
    queuesize = size(&readyqueue);
    144f:	66 68 e0 68          	pushw  $0x68e0
    1453:	00 00                	add    %al,(%eax)
    1455:	66 e8 e4 06          	callw  1b3d <isempty+0x1b>
    1459:	00 00                	add    %al,(%eax)
    145b:	66 83 c4 04          	add    $0x4,%sp
    145f:	66 a3 64 30 67 66    	mov    %ax,0x66673064
    int i = 0;
    1465:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    146c:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1473:	00 00                	add    %al,(%eax)
    1475:	eb 3c                	jmp    14b3 <sys_bolocked+0xa5>
        dequeue(&readyqueue,&tmp);
    1477:	66 68 60 30          	pushw  $0x3060
    147b:	00 00                	add    %al,(%eax)
    147d:	66 68 e0 68          	pushw  $0x68e0
    1481:	00 00                	add    %al,(%eax)
    1483:	66 e8 35 07          	callw  1bbc <enqueue+0x6a>
    1487:	00 00                	add    %al,(%eax)
    1489:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    148d:	66 a1 60 30 67 66    	mov    0x66673060,%ax
    1493:	39 45 08             	cmp    %eax,0x8(%ebp)
    1496:	74 16                	je     14ae <sys_bolocked+0xa0>
            enqueue(&readyqueue,tmp);
    1498:	66 a1 60 30 66 50    	mov    0x50663060,%ax
    149e:	66 68 e0 68          	pushw  $0x68e0
    14a2:	00 00                	add    %al,(%eax)
    14a4:	66 e8 a8 06          	callw  1b50 <size+0x11>
    14a8:	00 00                	add    %al,(%eax)
    14aa:	66 83 c4 08          	add    $0x8,%sp
    __asm__("cli\n");
    PCB_list[index].prg_status = BLOCKED;
    enqueue(&blockqueue,index);
    queuesize = size(&readyqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    14ae:	67 66 ff 45 fc       	incw   -0x4(%di)
    14b3:	66 a1 64 30 67 66    	mov    0x66673064,%ax
    14b9:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    14bc:	7c b9                	jl     1477 <sys_bolocked+0x69>
        dequeue(&readyqueue,&tmp);
        if(index != tmp){
            enqueue(&readyqueue,tmp);
        }
    }
    __asm__("sti\n");
    14be:	fb                   	sti    
}
    14bf:	66 c9                	leavew 
    14c1:	66 c3                	retw   

000014c3 <sys_wakeup>:
void sys_wakeup(int index){
    14c3:	66 55                	push   %bp
    14c5:	66 89 e5             	mov    %sp,%bp
    14c8:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    14cc:	fa                   	cli    
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    14cd:	66 68 80 30          	pushw  $0x3080
    14d1:	00 00                	add    %al,(%eax)
    14d3:	66 e8 66 06          	callw  1b3d <isempty+0x1b>
    14d7:	00 00                	add    %al,(%eax)
    14d9:	66 83 c4 04          	add    $0x4,%sp
    14dd:	66 a3 64 30 67 66    	mov    %ax,0x66673064
    int i = 0;
    14e3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    14ea:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    14f1:	00 00                	add    %al,(%eax)
    14f3:	eb 3c                	jmp    1531 <sys_wakeup+0x6e>
        dequeue(&blockqueue,&tmp);
    14f5:	66 68 60 30          	pushw  $0x3060
    14f9:	00 00                	add    %al,(%eax)
    14fb:	66 68 80 30          	pushw  $0x3080
    14ff:	00 00                	add    %al,(%eax)
    1501:	66 e8 b7 06          	callw  1bbc <enqueue+0x6a>
    1505:	00 00                	add    %al,(%eax)
    1507:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    150b:	66 a1 60 30 67 66    	mov    0x66673060,%ax
    1511:	39 45 08             	cmp    %eax,0x8(%ebp)
    1514:	74 16                	je     152c <sys_wakeup+0x69>
            enqueue(&blockqueue,tmp);
    1516:	66 a1 60 30 66 50    	mov    0x50663060,%ax
    151c:	66 68 80 30          	pushw  $0x3080
    1520:	00 00                	add    %al,(%eax)
    1522:	66 e8 2a 06          	callw  1b50 <size+0x11>
    1526:	00 00                	add    %al,(%eax)
    1528:	66 83 c4 08          	add    $0x8,%sp
void sys_wakeup(int index){
    __asm__("cli\n");
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    152c:	67 66 ff 45 fc       	incw   -0x4(%di)
    1531:	66 a1 64 30 67 66    	mov    0x66673064,%ax
    1537:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    153a:	7c b9                	jl     14f5 <sys_wakeup+0x32>
        dequeue(&blockqueue,&tmp);
        if(index != tmp){
            enqueue(&blockqueue,tmp);
        }
    }
    PCB_list[index].prg_status = READY;
    153c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1541:	66 c1 e0 02          	shl    $0x2,%ax
    1545:	66 89 c2             	mov    %ax,%dx
    1548:	66 c1 e2 04          	shl    $0x4,%dx
    154c:	66 01 d0             	add    %dx,%ax
    154f:	66 05 50 32          	add    $0x3250,%ax
    1553:	00 00                	add    %al,(%eax)
    1555:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    155c:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    155e:	67 66 ff 75 08       	pushw  0x8(%di)
    1563:	66 68 e0 68          	pushw  $0x68e0
    1567:	00 00                	add    %al,(%eax)
    1569:	66 e8 e3 05          	callw  1b50 <size+0x11>
    156d:	00 00                	add    %al,(%eax)
    156f:	66 83 c4 08          	add    $0x8,%sp
    __asm__("sti\n");
    1573:	fb                   	sti    
}
    1574:	66 c9                	leavew 
    1576:	66 c3                	retw   

00001578 <sys_run>:
void sys_run(){
    1578:	66 55                	push   %bp
    157a:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    157d:	66 a1 7c 37 67 66    	mov    0x6667377c,%ax
    1583:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    158a:	66 5d                	pop    %bp
    158c:	66 c3                	retw   

0000158e <do_fork>:

int do_fork(){
    158e:	66 55                	push   %bp
    1590:	66 89 e5             	mov    %sp,%bp
    1593:	66 83 ec 08          	sub    $0x8,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    1597:	67 66 c7 45 fc 64 32 	movw   $0x3264,-0x4(%di)
    159e:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN )    fork_prg = fork_prg + 1;//应该增加used位，防止被覆盖
    15a0:	eb 06                	jmp    15a8 <do_fork+0x1a>
    15a2:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    15a8:	67 66 81 7d fc 70 37 	cmpw   $0x3770,-0x4(%di)
    15af:	00 00                	add    %al,(%eax)
    15b1:	73 10                	jae    15c3 <do_fork+0x35>
    15b3:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    15b8:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    15bd:	66 83 f8 01          	cmp    $0x1,%ax
    15c1:	74 df                	je     15a2 <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    15c3:	67 66 81 7d fc 2c 37 	cmpw   $0x372c,-0x4(%di)
    15ca:	00 00                	add    %al,(%eax)
    15cc:	76 0f                	jbe    15dd <do_fork+0x4f>
    15ce:	66 a1 7c 37 67 66    	mov    0x6667377c,%ax
    15d4:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    15da:	e9 42 02 66 e8       	jmp    e8661821 <delay+0xe86554d1>
    else{
        _Schedule_once();
    15df:	12 ee                	adc    %dh,%ch
    15e1:	ff                   	(bad)  
    15e2:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    15e5:	ec                   	in     (%dx),%al
    15e6:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    15e7:	66 a1 7c 37 67 66    	mov    0x6667377c,%ax
    15ed:	ff 75 fc             	pushl  -0x4(%ebp)
    15f0:	66 50                	push   %ax
    15f2:	66 e8 e8 03          	callw  19de <counter+0x64>
    15f6:	00 00                	add    %al,(%eax)
    15f8:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    15fc:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    1600:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1605:	66 b8 20 32          	mov    $0x3220,%ax
    1609:	00 00                	add    %al,(%eax)
    160b:	66 29 c2             	sub    %ax,%dx
    160e:	66 89 d0             	mov    %dx,%ax
    1611:	66 c1 f8 02          	sar    $0x2,%ax
    1615:	66 89 c2             	mov    %ax,%dx
    1618:	66 89 d0             	mov    %dx,%ax
    161b:	66 01 c0             	add    %ax,%ax
    161e:	66 01 d0             	add    %dx,%ax
    1621:	67 66 8d 14          	lea    (%si),%dx
    1625:	85 00                	test   %eax,(%eax)
    1627:	00 00                	add    %al,(%eax)
    1629:	00 66 01             	add    %ah,0x1(%esi)
    162c:	d0 66 89             	shlb   -0x77(%esi)
    162f:	c2 66 c1             	ret    $0xc166
    1632:	e2 08                	loop   163c <do_fork+0xae>
    1634:	66 01 d0             	add    %dx,%ax
    1637:	66 89 c2             	mov    %ax,%dx
    163a:	66 c1 e2 10          	shl    $0x10,%dx
    163e:	66 01 d0             	add    %dx,%ax
    1641:	66 f7 d8             	neg    %ax
    1644:	66 89 c2             	mov    %ax,%dx
    1647:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    164c:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    1651:	66 a1 7c 37 66 89    	mov    0x8966377c,%ax
    1657:	c2 66 b8             	ret    $0xb866
    165a:	20 32                	and    %dh,(%edx)
    165c:	00 00                	add    %al,(%eax)
    165e:	66 29 c2             	sub    %ax,%dx
    1661:	66 89 d0             	mov    %dx,%ax
    1664:	66 c1 f8 02          	sar    $0x2,%ax
    1668:	66 89 c2             	mov    %ax,%dx
    166b:	66 89 d0             	mov    %dx,%ax
    166e:	66 01 c0             	add    %ax,%ax
    1671:	66 01 d0             	add    %dx,%ax
    1674:	67 66 8d 14          	lea    (%si),%dx
    1678:	85 00                	test   %eax,(%eax)
    167a:	00 00                	add    %al,(%eax)
    167c:	00 66 01             	add    %ah,0x1(%esi)
    167f:	d0 66 89             	shlb   -0x77(%esi)
    1682:	c2 66 c1             	ret    $0xc166
    1685:	e2 08                	loop   168f <do_fork+0x101>
    1687:	66 01 d0             	add    %dx,%ax
    168a:	66 89 c2             	mov    %ax,%dx
    168d:	66 c1 e2 10          	shl    $0x10,%dx
    1691:	66 01 d0             	add    %dx,%ax
    1694:	66 f7 d8             	neg    %ax
    1697:	66 89 c2             	mov    %ax,%dx
    169a:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    169f:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    16a4:	66 a1 7c 37 67 66    	mov    0x6667377c,%ax
    16aa:	8b 50 20             	mov    0x20(%eax),%edx
    16ad:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    16b2:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    16b7:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    16bc:	66 b8 20 32          	mov    $0x3220,%ax
    16c0:	00 00                	add    %al,(%eax)
    16c2:	66 29 c2             	sub    %ax,%dx
    16c5:	66 89 d0             	mov    %dx,%ax
    16c8:	66 c1 f8 02          	sar    $0x2,%ax
    16cc:	66 89 c2             	mov    %ax,%dx
    16cf:	66 89 d0             	mov    %dx,%ax
    16d2:	66 01 c0             	add    %ax,%ax
    16d5:	66 01 d0             	add    %dx,%ax
    16d8:	67 66 8d 14          	lea    (%si),%dx
    16dc:	85 00                	test   %eax,(%eax)
    16de:	00 00                	add    %al,(%eax)
    16e0:	00 66 01             	add    %ah,0x1(%esi)
    16e3:	d0 66 89             	shlb   -0x77(%esi)
    16e6:	c2 66 c1             	ret    $0xc166
    16e9:	e2 08                	loop   16f3 <do_fork+0x165>
    16eb:	66 01 d0             	add    %dx,%ax
    16ee:	66 89 c2             	mov    %ax,%dx
    16f1:	66 c1 e2 10          	shl    $0x10,%dx
    16f5:	66 01 d0             	add    %dx,%ax
    16f8:	66 f7 d8             	neg    %ax
    16fb:	66 83 c0 02          	add    $0x2,%ax
    16ff:	66 c1 e0 0c          	shl    $0xc,%ax
    1703:	66 89 c2             	mov    %ax,%dx
    1706:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    170b:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    1710:	66 a1 7c 37 67 66    	mov    0x6667377c,%ax
    1716:	8b 50 30             	mov    0x30(%eax),%edx
    1719:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    171e:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    1723:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1728:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    172f:	00 00                	add    %al,(%eax)
        
        int index = fork_prg - PCB_list;
    1731:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1736:	66 b8 20 32          	mov    $0x3220,%ax
    173a:	00 00                	add    %al,(%eax)
    173c:	66 29 c2             	sub    %ax,%dx
    173f:	66 89 d0             	mov    %dx,%ax
    1742:	66 c1 f8 02          	sar    $0x2,%ax
    1746:	66 89 c2             	mov    %ax,%dx
    1749:	66 89 d0             	mov    %dx,%ax
    174c:	66 01 c0             	add    %ax,%ax
    174f:	66 01 d0             	add    %dx,%ax
    1752:	67 66 8d 14          	lea    (%si),%dx
    1756:	85 00                	test   %eax,(%eax)
    1758:	00 00                	add    %al,(%eax)
    175a:	00 66 01             	add    %ah,0x1(%esi)
    175d:	d0 66 89             	shlb   -0x77(%esi)
    1760:	c2 66 c1             	ret    $0xc166
    1763:	e2 08                	loop   176d <do_fork+0x1df>
    1765:	66 01 d0             	add    %dx,%ax
    1768:	66 89 c2             	mov    %ax,%dx
    176b:	66 c1 e2 10          	shl    $0x10,%dx
    176f:	66 01 d0             	add    %dx,%ax
    1772:	66 f7 d8             	neg    %ax
    1775:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
        __asm__("sub $6,%esp");
    177a:	66 83 ec 06          	sub    $0x6,%sp
        enqueue(&readyqueue,index); 
    177e:	67 66 ff 75 f8       	pushw  -0x8(%di)
    1783:	66 68 e0 68          	pushw  $0x68e0
    1787:	00 00                	add    %al,(%eax)
    1789:	66 e8 c3 03          	callw  1b50 <size+0x11>
    178d:	00 00                	add    %al,(%eax)
    178f:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    1793:	66 83 c4 06          	add    $0x6,%sp
        _Schedule_once();
    1797:	66 e8 58 ec          	callw  3f3 <S+0x14>
    179b:	ff                   	(bad)  
    179c:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    179f:	ec                   	in     (%dx),%al
    17a0:	06                   	push   %es
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    17a1:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    17a6:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    17ab:	66 a1 7c 37 67 66    	mov    0x6667377c,%ax
    17b1:	8b 50 28             	mov    0x28(%eax),%edx
    17b4:	66 a1 7c 37 67 66    	mov    0x6667377c,%ax
    17ba:	8b 40 24             	mov    0x24(%eax),%eax
    17bd:	66 51                	push   %cx
    17bf:	66 52                	push   %dx
    17c1:	66 50                	push   %ax
    17c3:	66 e8 1c eb          	callw  2e3 <Message31+0x4>
    17c7:	ff                   	(bad)  
    17c8:	ff 66 83             	jmp    *-0x7d(%esi)
    17cb:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
        __asm__("add $6,%esp");
    17ce:	83 c4 06             	add    $0x6,%esp
        fork_prg -> ip = _CurrentProg -> ip;
    17d1:	66 a1 7c 37 67 66    	mov    0x6667377c,%ax
    17d7:	8b 50 2c             	mov    0x2c(%eax),%edx
    17da:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    17df:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    17e4:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    17e9:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    17ef:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    17f1:	66 a1 7c 37 67 66    	mov    0x6667377c,%ax
    17f7:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    17fa:	75 08                	jne    1804 <do_fork+0x276>
            return 0;
    17fc:	66 b8 00 00          	mov    $0x0,%ax
    1800:	00 00                	add    %al,(%eax)
    1802:	eb 1b                	jmp    181f <do_fork+0x291>
        }
        _CurrentProg -> eax = _CurrentProg -> id;
    1804:	66 a1 7c 37 66 8b    	mov    0x8b66377c,%ax
    180a:	16                   	push   %ss
    180b:	7c 37                	jl     1844 <sys_exit_fork+0x21>
    180d:	67 66 8b 52 3c       	mov    0x3c(%bp,%si),%dx
    1812:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    1816:	66 a1 7c 37 67 66    	mov    0x6667377c,%ax
    181c:	8b 00                	mov    (%eax),%eax
    181e:	90                   	nop
    }
}
    181f:	66 c9                	leavew 
    1821:	66 c3                	retw   

00001823 <sys_exit_fork>:
void sys_exit_fork(char ch){
    1823:	66 55                	push   %bp
    1825:	66 89 e5             	mov    %sp,%bp
    1828:	66 83 ec 0c          	sub    $0xc,%sp
    182c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1831:	67 88 45 f4          	mov    %al,-0xc(%di)
    int current_id = _CurrentProg - PCB_list;
    1835:	66 a1 7c 37 66 89    	mov    0x8966377c,%ax
    183b:	c2 66 b8             	ret    $0xb866
    183e:	20 32                	and    %dh,(%edx)
    1840:	00 00                	add    %al,(%eax)
    1842:	66 29 c2             	sub    %ax,%dx
    1845:	66 89 d0             	mov    %dx,%ax
    1848:	66 c1 f8 02          	sar    $0x2,%ax
    184c:	66 89 c2             	mov    %ax,%dx
    184f:	66 89 d0             	mov    %dx,%ax
    1852:	66 01 c0             	add    %ax,%ax
    1855:	66 01 d0             	add    %dx,%ax
    1858:	67 66 8d 14          	lea    (%si),%dx
    185c:	85 00                	test   %eax,(%eax)
    185e:	00 00                	add    %al,(%eax)
    1860:	00 66 01             	add    %ah,0x1(%esi)
    1863:	d0 66 89             	shlb   -0x77(%esi)
    1866:	c2 66 c1             	ret    $0xc166
    1869:	e2 08                	loop   1873 <sys_exit_fork+0x50>
    186b:	66 01 d0             	add    %dx,%ax
    186e:	66 89 c2             	mov    %ax,%dx
    1871:	66 c1 e2 10          	shl    $0x10,%dx
    1875:	66 01 d0             	add    %dx,%ax
    1878:	66 f7 d8             	neg    %ax
    187b:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    int index = _CurrentProg -> fid;
    1880:	66 a1 7c 37 67 66    	mov    0x6667377c,%ax
    1886:	8b 40 40             	mov    0x40(%eax),%eax
    1889:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    sys_wakeup(index);
    188e:	67 66 ff 75 f8       	pushw  -0x8(%di)
    1893:	66 e8 2a fc          	callw  14c1 <sys_bolocked+0xb3>
    1897:	ff                   	(bad)  
    1898:	ff 66 83             	jmp    *-0x7d(%esi)
    189b:	c4 04 66             	les    (%esi,%eiz,2),%eax
    PCB_list[_CurrentProg -> fid].eax = ch;
    189e:	a1 7c 37 67 66       	mov    0x6667377c,%eax
    18a3:	8b 40 40             	mov    0x40(%eax),%eax
    18a6:	67 66 0f be 55 f4    	movsbw -0xc(%di),%dx
    18ac:	66 c1 e0 02          	shl    $0x2,%ax
    18b0:	66 89 c1             	mov    %ax,%cx
    18b3:	66 c1 e1 04          	shl    $0x4,%cx
    18b7:	66 01 c8             	add    %cx,%ax
    18ba:	66 05 20 32          	add    $0x3220,%ax
    18be:	00 00                	add    %al,(%eax)
    18c0:	67 66 89 10          	mov    %dx,(%bx,%si)
    _CurrentProg -> prg_status = EXIT;
    18c4:	66 a1 7c 37 67 66    	mov    0x6667377c,%ax
    18ca:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    rmele(&readyqueue,current_id);
    18d1:	67 66 ff 75 fc       	pushw  -0x4(%di)
    18d6:	66 68 e0 68          	pushw  $0x68e0
    18da:	00 00                	add    %al,(%eax)
    18dc:	66 e8 80 03          	callw  1c60 <init_queue+0x30>
    18e0:	00 00                	add    %al,(%eax)
    18e2:	66 83 c4 08          	add    $0x8,%sp
    _Schedule();
    18e6:	66 e8 1f eb          	callw  409 <_fork_user+0x9>
    18ea:	ff                   	(bad)  
    18eb:	ff 66 c9             	jmp    *-0x37(%esi)
}
    18ee:	66 c3                	retw   

000018f0 <sys_wait>:
int sys_wait(){
    18f0:	66 55                	push   %bp
    18f2:	66 89 e5             	mov    %sp,%bp
    18f5:	66 83 ec 04          	sub    $0x4,%sp
    int index = _CurrentProg - PCB_list;
    18f9:	66 a1 7c 37 66 89    	mov    0x8966377c,%ax
    18ff:	c2 66 b8             	ret    $0xb866
    1902:	20 32                	and    %dh,(%edx)
    1904:	00 00                	add    %al,(%eax)
    1906:	66 29 c2             	sub    %ax,%dx
    1909:	66 89 d0             	mov    %dx,%ax
    190c:	66 c1 f8 02          	sar    $0x2,%ax
    1910:	66 89 c2             	mov    %ax,%dx
    1913:	66 89 d0             	mov    %dx,%ax
    1916:	66 01 c0             	add    %ax,%ax
    1919:	66 01 d0             	add    %dx,%ax
    191c:	67 66 8d 14          	lea    (%si),%dx
    1920:	85 00                	test   %eax,(%eax)
    1922:	00 00                	add    %al,(%eax)
    1924:	00 66 01             	add    %ah,0x1(%esi)
    1927:	d0 66 89             	shlb   -0x77(%esi)
    192a:	c2 66 c1             	ret    $0xc166
    192d:	e2 08                	loop   1937 <sys_wait+0x47>
    192f:	66 01 d0             	add    %dx,%ax
    1932:	66 89 c2             	mov    %ax,%dx
    1935:	66 c1 e2 10          	shl    $0x10,%dx
    1939:	66 01 d0             	add    %dx,%ax
    193c:	66 f7 d8             	neg    %ax
    193f:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_bolocked(index);
    1944:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1949:	66 e8 bf fa          	callw  140c <sys_exit+0x7a>
    194d:	ff                   	(bad)  
    194e:	ff 66 83             	jmp    *-0x7d(%esi)
    1951:	c4 04 66             	les    (%esi,%eiz,2),%eax
    _Schedule();
    1954:	e8 b2 ea ff ff       	call   40b <_Schedule>
    return _CurrentProg -> eax;
    1959:	66 a1 7c 37 67 66    	mov    0x6667377c,%ax
    195f:	8b 00                	mov    (%eax),%eax
}
    1961:	66 c9                	leavew 
    1963:	66 c3                	retw   

00001965 <thread_join>:
void thread_join(){
    1965:	66 55                	push   %bp
    1967:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    196a:	90                   	nop
    196b:	66 e8 09 00          	callw  1978 <thread_join+0x13>
    196f:	00 00                	add    %al,(%eax)
    1971:	66 85 c0             	test   %ax,%ax
    1974:	75 f5                	jne    196b <thread_join+0x6>
    }
}
    1976:	66 5d                	pop    %bp
    1978:	66 c3                	retw   

0000197a <counter>:
int counter(){
    197a:	66 55                	push   %bp
    197c:	66 89 e5             	mov    %sp,%bp
    197f:	66 83 ec 08          	sub    $0x8,%sp
    __asm__("cli\n");
    1983:	fa                   	cli    
    int i = 0;
    1984:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    198b:	00 00                	add    %al,(%eax)
    int count = 0;
    198d:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    1994:	00 00                	add    %al,(%eax)
    for(i = 1;i < PCB_NUMMER;i ++){
    1996:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    199d:	00 00                	add    %al,(%eax)
    199f:	eb 2d                	jmp    19ce <counter+0x54>
        if(PCB_list[i].prg_status != EXIT){
    19a1:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    19a6:	66 c1 e0 02          	shl    $0x2,%ax
    19aa:	66 89 c2             	mov    %ax,%dx
    19ad:	66 c1 e2 04          	shl    $0x4,%dx
    19b1:	66 01 d0             	add    %dx,%ax
    19b4:	66 05 50 32          	add    $0x3250,%ax
    19b8:	00 00                	add    %al,(%eax)
    19ba:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    19bf:	66 85 c0             	test   %ax,%ax
    19c2:	74 05                	je     19c9 <counter+0x4f>
            count ++;
    19c4:	67 66 ff 45 f8       	incw   -0x8(%di)
}
int counter(){
    __asm__("cli\n");
    int i = 0;
    int count = 0;
    for(i = 1;i < PCB_NUMMER;i ++){
    19c9:	67 66 ff 45 fc       	incw   -0x4(%di)
    19ce:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    19d4:	7e cb                	jle    19a1 <counter+0x27>
        if(PCB_list[i].prg_status != EXIT){
            count ++;
        }
    }
    __asm__("sti\n");
    19d6:	fb                   	sti    
    return count;
    19d7:	67 66 8b 45 f8       	mov    -0x8(%di),%ax

}
    19dc:	66 c9                	leavew 
    19de:	66 c3                	retw   

000019e0 <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    19e0:	66 55                	push   %bp
    19e2:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    19e5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19ea:	67 66 8b 10          	mov    (%bx,%si),%dx
    19ee:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    19f3:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    19f7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19fc:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    1a01:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a06:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    1a0b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a10:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    1a15:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a1a:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    1a1f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a24:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    1a29:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a2e:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    1a33:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a38:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    1a3d:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a42:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    1a47:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a4c:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    1a51:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a56:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    1a5b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a60:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    1a65:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a6a:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    1a6f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a74:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    1a79:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a7e:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    1a83:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a88:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    1a8d:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a92:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    1a97:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a9c:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    1aa1:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1aa6:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    1aab:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ab0:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    1ab5:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1aba:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    1abf:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ac4:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    1ac9:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1ace:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    1ad3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ad8:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    1add:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1ae2:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    1ae7:	66 5d                	pop    %bp
    1ae9:	66 c3                	retw   

00001aeb <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    1aeb:	66 55                	push   %bp
    1aed:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    1af0:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1af5:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1afa:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1aff:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    1b04:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b09:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    1b0e:	66 51                	push   %cx
    1b10:	66 52                	push   %dx
    1b12:	66 50                	push   %ax
    1b14:	66 e8 cb e7          	callw  2e3 <Message31+0x4>
    1b18:	ff                   	(bad)  
    1b19:	ff 66 83             	jmp    *-0x7d(%esi)
    1b1c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    1b1f:	c9                   	leave  
    1b20:	66 c3                	retw   

00001b22 <isempty>:
int isempty(struct Queue *queue){
    1b22:	66 55                	push   %bp
    1b24:	66 89 e5             	mov    %sp,%bp
    
    return (queue -> size == 0);
    1b27:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b2c:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1b31:	66 85 c0             	test   %ax,%ax
    1b34:	0f 94 c0             	sete   %al
    1b37:	66 0f b6 c0          	movzbw %al,%ax

}
    1b3b:	66 5d                	pop    %bp
    1b3d:	66 c3                	retw   

00001b3f <size>:
int size(struct Queue *queue){
    1b3f:	66 55                	push   %bp
    1b41:	66 89 e5             	mov    %sp,%bp
    return queue -> size ;
    1b44:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b49:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
}
    1b4e:	66 5d                	pop    %bp
    1b50:	66 c3                	retw   

00001b52 <enqueue>:
void enqueue(struct Queue *queue,int data){
    1b52:	66 55                	push   %bp
    1b54:	66 89 e5             	mov    %sp,%bp

    if(queue -> size >= MAX){
    1b57:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b5c:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1b61:	66 83 f8 63          	cmp    $0x63,%ax
    1b65:	7e 02                	jle    1b69 <enqueue+0x17>
        return;
    1b67:	eb 51                	jmp    1bba <enqueue+0x68>
    }
    queue -> size ++;
    1b69:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b6e:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1b73:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    1b78:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b7d:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    queue -> tail = (queue -> tail + 1) % MAX;
    1b82:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b87:	67 66 8b 00          	mov    (%bx,%si),%ax
    1b8b:	66 40                	inc    %ax
    1b8d:	66 b9 64 00          	mov    $0x64,%cx
    1b91:	00 00                	add    %al,(%eax)
    1b93:	66 99                	cwtd   
    1b95:	66 f7 f9             	idiv   %cx
    1b98:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b9d:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> array[queue -> tail] = data;
    1ba1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ba6:	67 66 8b 10          	mov    (%bx,%si),%dx
    1baa:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1baf:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    1bb4:	67 66 89 4c 90       	mov    %cx,-0x70(%si)
    1bb9:	0c 66                	or     $0x66,%al

}
    1bbb:	5d                   	pop    %ebp
    1bbc:	66 c3                	retw   

00001bbe <dequeue>:
void dequeue(struct Queue *queue,int * data){
    1bbe:	66 55                	push   %bp
    1bc0:	66 89 e5             	mov    %sp,%bp

    if(queue -> size <= 0){
    1bc3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1bc8:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1bcd:	66 85 c0             	test   %ax,%ax
    1bd0:	7f 02                	jg     1bd4 <dequeue+0x16>
        return;
    1bd2:	eb 58                	jmp    1c2c <dequeue+0x6e>
    }
    queue -> size --;
    1bd4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1bd9:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1bde:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    1be3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1be8:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    *data = queue -> array[queue -> head];
    1bed:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1bf2:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    1bf7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1bfc:	67 66 8b 54 90       	mov    -0x70(%si),%dx
    1c01:	0c 67                	or     $0x67,%al
    1c03:	66 8b 45 0c          	mov    0xc(%ebp),%ax
    1c07:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> head = (queue -> head + 1) % MAX;
    1c0b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1c10:	67 66 8b 40 04       	mov    0x4(%bx,%si),%ax
    1c15:	66 40                	inc    %ax
    1c17:	66 b9 64 00          	mov    $0x64,%cx
    1c1b:	00 00                	add    %al,(%eax)
    1c1d:	66 99                	cwtd   
    1c1f:	66 f7 f9             	idiv   %cx
    1c22:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1c27:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)

}
    1c2c:	66 5d                	pop    %bp
    1c2e:	66 c3                	retw   

00001c30 <init_queue>:
void init_queue(struct Queue *queue){
    1c30:	66 55                	push   %bp
    1c32:	66 89 e5             	mov    %sp,%bp
    queue -> size = 0;
    1c35:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1c3a:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    1c41:	00 00                	add    %al,(%eax)
    queue -> tail = -1;
    1c43:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1c48:	67 66 c7 00 ff ff    	movw   $0xffff,(%bx,%si)
    1c4e:	ff                   	(bad)  
    1c4f:	ff 67 66             	jmp    *0x66(%edi)
    queue -> head = 0;
    1c52:	8b 45 08             	mov    0x8(%ebp),%eax
    1c55:	67 66 c7 40 04 00 00 	movw   $0x0,0x4(%bx,%si)
    1c5c:	00 00                	add    %al,(%eax)
}
    1c5e:	66 5d                	pop    %bp
    1c60:	66 c3                	retw   

00001c62 <rmele>:
int rm_tmp;
int ii;
void rmele(struct Queue *queue,int data){
    1c62:	66 55                	push   %bp
    1c64:	66 89 e5             	mov    %sp,%bp
    1c67:	66 83 ec 04          	sub    $0x4,%sp
    int size_of_rmqueue= size(queue);
    1c6b:	67 66 ff 75 08       	pushw  0x8(%di)
    1c70:	66 e8 c9 fe          	callw  1b3d <isempty+0x1b>
    1c74:	ff                   	(bad)  
    1c75:	ff 66 83             	jmp    *-0x7d(%esi)
    1c78:	c4 04 67             	les    (%edi,%eiz,2),%eax
    1c7b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    1c7f:	66 c7 06 78 37       	movw   $0x3778,(%esi)
    1c84:	00 00                	add    %al,(%eax)
    1c86:	00 00                	add    %al,(%eax)
    1c88:	eb 3f                	jmp    1cc9 <rmele+0x67>
        dequeue(queue,&rm_tmp);
    1c8a:	66 68 d8 68          	pushw  $0x68d8
    1c8e:	00 00                	add    %al,(%eax)
    1c90:	67 66 ff 75 08       	pushw  0x8(%di)
    1c95:	66 e8 23 ff          	callw  1bbc <enqueue+0x6a>
    1c99:	ff                   	(bad)  
    1c9a:	ff 66 83             	jmp    *-0x7d(%esi)
    1c9d:	c4 08                	les    (%eax),%ecx
        if(rm_tmp != data){
    1c9f:	66 a1 d8 68 67 66    	mov    0x666768d8,%ax
    1ca5:	3b 45 0c             	cmp    0xc(%ebp),%eax
    1ca8:	74 15                	je     1cbf <rmele+0x5d>
            enqueue(queue,rm_tmp);
    1caa:	66 a1 d8 68 66 50    	mov    0x506668d8,%ax
    1cb0:	67 66 ff 75 08       	pushw  0x8(%di)
    1cb5:	66 e8 97 fe          	callw  1b50 <size+0x11>
    1cb9:	ff                   	(bad)  
    1cba:	ff 66 83             	jmp    *-0x7d(%esi)
    1cbd:	c4 08                	les    (%eax),%ecx
}
int rm_tmp;
int ii;
void rmele(struct Queue *queue,int data){
    int size_of_rmqueue= size(queue);
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    1cbf:	66 a1 78 37 66 40    	mov    0x40663778,%ax
    1cc5:	66 a3 78 37 66 a1    	mov    %ax,0xa1663778
    1ccb:	78 37                	js     1d04 <init_Semlist+0x2c>
    1ccd:	67 66 3b 45 fc       	cmp    -0x4(%di),%ax
    1cd2:	7c b6                	jl     1c8a <rmele+0x28>
        dequeue(queue,&rm_tmp);
        if(rm_tmp != data){
            enqueue(queue,rm_tmp);
        }
    }
}
    1cd4:	66 c9                	leavew 
    1cd6:	66 c3                	retw   

00001cd8 <init_Semlist>:
void init_Semlist(){
    1cd8:	66 55                	push   %bp
    1cda:	66 89 e5             	mov    %sp,%bp
    1cdd:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    1ce1:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1ce8:	00 00                	add    %al,(%eax)
    for(i = 0;i < SemMax;i ++){
    1cea:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1cf1:	00 00                	add    %al,(%eax)
    1cf3:	eb 69                	jmp    1d5e <init_Semlist+0x86>
        SEM_list[i].used = 0;
    1cf5:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1cfa:	66 89 d0             	mov    %dx,%ax
    1cfd:	66 01 c0             	add    %ax,%ax
    1d00:	66 01 d0             	add    %dx,%ax
    1d03:	66 c1 e0 02          	shl    $0x2,%ax
    1d07:	66 01 d0             	add    %dx,%ax
    1d0a:	66 c1 e0 03          	shl    $0x3,%ax
    1d0e:	66 01 d0             	add    %dx,%ax
    1d11:	66 c1 e0 02          	shl    $0x2,%ax
    1d15:	66 05 40 39          	add    $0x3940,%ax
    1d19:	00 00                	add    %al,(%eax)
    1d1b:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1d21:	00 00                	add    %al,(%eax)
        init_queue(&SEM_list[i].semaque);
    1d23:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1d28:	66 89 d0             	mov    %dx,%ax
    1d2b:	66 01 c0             	add    %ax,%ax
    1d2e:	66 01 d0             	add    %dx,%ax
    1d31:	66 c1 e0 02          	shl    $0x2,%ax
    1d35:	66 01 d0             	add    %dx,%ax
    1d38:	66 c1 e0 03          	shl    $0x3,%ax
    1d3c:	66 01 d0             	add    %dx,%ax
    1d3f:	66 c1 e0 02          	shl    $0x2,%ax
    1d43:	66 05 a0 37          	add    $0x37a0,%ax
    1d47:	00 00                	add    %al,(%eax)
    1d49:	66 83 c0 04          	add    $0x4,%ax
    1d4d:	66 50                	push   %ax
    1d4f:	66 e8 db fe          	callw  1c2e <dequeue+0x70>
    1d53:	ff                   	(bad)  
    1d54:	ff 66 83             	jmp    *-0x7d(%esi)
    1d57:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
    }
}
void init_Semlist(){
    int i = 0;
    for(i = 0;i < SemMax;i ++){
    1d5a:	66 ff 45 fc          	incw   -0x4(%ebp)
    1d5e:	67 66 83 7d fc 1d    	cmpw   $0x1d,-0x4(%di)
    1d64:	7e 8f                	jle    1cf5 <init_Semlist+0x1d>
        SEM_list[i].used = 0;
        init_queue(&SEM_list[i].semaque);
    }
}
    1d66:	66 c9                	leavew 
    1d68:	66 c3                	retw   

00001d6a <do_SemGet>:
int do_SemGet(int value){
    1d6a:	66 55                	push   %bp
    1d6c:	66 89 e5             	mov    %sp,%bp
    1d6f:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    1d73:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1d7a:	00 00                	add    %al,(%eax)
    while(SEM_list[i].used == 1){
    1d7c:	eb 05                	jmp    1d83 <do_SemGet+0x19>
        i ++;
    1d7e:	67 66 ff 45 fc       	incw   -0x4(%di)
        init_queue(&SEM_list[i].semaque);
    }
}
int do_SemGet(int value){
    int i = 0;
    while(SEM_list[i].used == 1){
    1d83:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1d88:	66 89 d0             	mov    %dx,%ax
    1d8b:	66 01 c0             	add    %ax,%ax
    1d8e:	66 01 d0             	add    %dx,%ax
    1d91:	66 c1 e0 02          	shl    $0x2,%ax
    1d95:	66 01 d0             	add    %dx,%ax
    1d98:	66 c1 e0 03          	shl    $0x3,%ax
    1d9c:	66 01 d0             	add    %dx,%ax
    1d9f:	66 c1 e0 02          	shl    $0x2,%ax
    1da3:	66 05 40 39          	add    $0x3940,%ax
    1da7:	00 00                	add    %al,(%eax)
    1da9:	67 66 8b 00          	mov    (%bx,%si),%ax
    1dad:	66 83 f8 01          	cmp    $0x1,%ax
    1db1:	74 cb                	je     1d7e <do_SemGet+0x14>
        i ++;
    }
    if(i < SemMax){
    1db3:	67 66 83 7d fc 1d    	cmpw   $0x1d,-0x4(%di)
    1db9:	7f 66                	jg     1e21 <do_SemGet+0xb7>
        SEM_list[i].used = 1;
    1dbb:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1dc0:	66 89 d0             	mov    %dx,%ax
    1dc3:	66 01 c0             	add    %ax,%ax
    1dc6:	66 01 d0             	add    %dx,%ax
    1dc9:	66 c1 e0 02          	shl    $0x2,%ax
    1dcd:	66 01 d0             	add    %dx,%ax
    1dd0:	66 c1 e0 03          	shl    $0x3,%ax
    1dd4:	66 01 d0             	add    %dx,%ax
    1dd7:	66 c1 e0 02          	shl    $0x2,%ax
    1ddb:	66 05 40 39          	add    $0x3940,%ax
    1ddf:	00 00                	add    %al,(%eax)
    1de1:	67 66 c7 00 01 00    	movw   $0x1,(%bx,%si)
    1de7:	00 00                	add    %al,(%eax)
        SEM_list[i].count = value;
    1de9:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1dee:	66 89 d0             	mov    %dx,%ax
    1df1:	66 01 c0             	add    %ax,%ax
    1df4:	66 01 d0             	add    %dx,%ax
    1df7:	66 c1 e0 02          	shl    $0x2,%ax
    1dfb:	66 01 d0             	add    %dx,%ax
    1dfe:	66 c1 e0 03          	shl    $0x3,%ax
    1e02:	66 01 d0             	add    %dx,%ax
    1e05:	66 c1 e0 02          	shl    $0x2,%ax
    1e09:	67 66 8d 90 a0 37    	lea    0x37a0(%bx,%si),%dx
    1e0f:	00 00                	add    %al,(%eax)
    1e11:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1e16:	67 66 89 02          	mov    %ax,(%bp,%si)
        return i;
    1e1a:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1e1f:	eb 06                	jmp    1e27 <do_SemGet+0xbd>
    }
    else 
        return -1;
    1e21:	66 b8 ff ff          	mov    $0xffff,%ax
    1e25:	ff                   	(bad)  
    1e26:	ff 66 c9             	jmp    *-0x37(%esi)
}
    1e29:	66 c3                	retw   

00001e2b <do_SemFree>:
void do_SemFree(int s){
    1e2b:	66 55                	push   %bp
    1e2d:	66 89 e5             	mov    %sp,%bp
    SEM_list[s].used = 0;
    1e30:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1e35:	66 89 d0             	mov    %dx,%ax
    1e38:	66 01 c0             	add    %ax,%ax
    1e3b:	66 01 d0             	add    %dx,%ax
    1e3e:	66 c1 e0 02          	shl    $0x2,%ax
    1e42:	66 01 d0             	add    %dx,%ax
    1e45:	66 c1 e0 03          	shl    $0x3,%ax
    1e49:	66 01 d0             	add    %dx,%ax
    1e4c:	66 c1 e0 02          	shl    $0x2,%ax
    1e50:	66 05 40 39          	add    $0x3940,%ax
    1e54:	00 00                	add    %al,(%eax)
    1e56:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1e5c:	00 00                	add    %al,(%eax)
}
    1e5e:	66 5d                	pop    %bp
    1e60:	66 c3                	retw   

00001e62 <do_P>:
int sem_index;
void do_P(int s){
    1e62:	66 55                	push   %bp
    1e64:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    1e67:	fa                   	cli    
    SEM_list[s].count = SEM_list[s].count - 1;
    1e68:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1e6d:	66 89 d0             	mov    %dx,%ax
    1e70:	66 01 c0             	add    %ax,%ax
    1e73:	66 01 d0             	add    %dx,%ax
    1e76:	66 c1 e0 02          	shl    $0x2,%ax
    1e7a:	66 01 d0             	add    %dx,%ax
    1e7d:	66 c1 e0 03          	shl    $0x3,%ax
    1e81:	66 01 d0             	add    %dx,%ax
    1e84:	66 c1 e0 02          	shl    $0x2,%ax
    1e88:	66 05 a0 37          	add    $0x37a0,%ax
    1e8c:	00 00                	add    %al,(%eax)
    1e8e:	67 66 8b 00          	mov    (%bx,%si),%ax
    1e92:	67 66 8d 48 ff       	lea    -0x1(%bx,%si),%cx
    1e97:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1e9c:	66 89 d0             	mov    %dx,%ax
    1e9f:	66 01 c0             	add    %ax,%ax
    1ea2:	66 01 d0             	add    %dx,%ax
    1ea5:	66 c1 e0 02          	shl    $0x2,%ax
    1ea9:	66 01 d0             	add    %dx,%ax
    1eac:	66 c1 e0 03          	shl    $0x3,%ax
    1eb0:	66 01 d0             	add    %dx,%ax
    1eb3:	66 c1 e0 02          	shl    $0x2,%ax
    1eb7:	66 05 a0 37          	add    $0x37a0,%ax
    1ebb:	00 00                	add    %al,(%eax)
    1ebd:	67 66 89 08          	mov    %cx,(%bx,%si)
    if(SEM_list[s].count < 0){
    1ec1:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1ec6:	66 89 d0             	mov    %dx,%ax
    1ec9:	66 01 c0             	add    %ax,%ax
    1ecc:	66 01 d0             	add    %dx,%ax
    1ecf:	66 c1 e0 02          	shl    $0x2,%ax
    1ed3:	66 01 d0             	add    %dx,%ax
    1ed6:	66 c1 e0 03          	shl    $0x3,%ax
    1eda:	66 01 d0             	add    %dx,%ax
    1edd:	66 c1 e0 02          	shl    $0x2,%ax
    1ee1:	66 05 a0 37          	add    $0x37a0,%ax
    1ee5:	00 00                	add    %al,(%eax)
    1ee7:	67 66 8b 00          	mov    (%bx,%si),%ax
    1eeb:	66 85 c0             	test   %ax,%ax
    1eee:	0f 89 b0 00 66 a1    	jns    a1661fa4 <delay+0xa1655c54>
        _CurrentProg->prg_status = BLOCKED;
    1ef4:	7c 37                	jl     1f2d <do_P+0xcb>
    1ef6:	67 66 c7 40 38 02 00 	movw   $0x2,0x38(%bx,%si)
    1efd:	00 00                	add    %al,(%eax)
        sem_index = _CurrentProg - PCB_list;
    1eff:	66 a1 7c 37 66 89    	mov    0x8966377c,%ax
    1f05:	c2 66 b8             	ret    $0xb866
    1f08:	20 32                	and    %dh,(%edx)
    1f0a:	00 00                	add    %al,(%eax)
    1f0c:	66 29 c2             	sub    %ax,%dx
    1f0f:	66 89 d0             	mov    %dx,%ax
    1f12:	66 c1 f8 02          	sar    $0x2,%ax
    1f16:	66 89 c2             	mov    %ax,%dx
    1f19:	66 89 d0             	mov    %dx,%ax
    1f1c:	66 01 c0             	add    %ax,%ax
    1f1f:	66 01 d0             	add    %dx,%ax
    1f22:	67 66 8d 14          	lea    (%si),%dx
    1f26:	85 00                	test   %eax,(%eax)
    1f28:	00 00                	add    %al,(%eax)
    1f2a:	00 66 01             	add    %ah,0x1(%esi)
    1f2d:	d0 66 89             	shlb   -0x77(%esi)
    1f30:	c2 66 c1             	ret    $0xc166
    1f33:	e2 08                	loop   1f3d <do_P+0xdb>
    1f35:	66 01 d0             	add    %dx,%ax
    1f38:	66 89 c2             	mov    %ax,%dx
    1f3b:	66 c1 e2 10          	shl    $0x10,%dx
    1f3f:	66 01 d0             	add    %dx,%ax
    1f42:	66 f7 d8             	neg    %ax
    1f45:	66 a3 dc 68 66 a1    	mov    %ax,0xa16668dc
        rmele(&readyqueue,sem_index);
    1f4b:	dc 68 66             	fsubrl 0x66(%eax)
    1f4e:	50                   	push   %eax
    1f4f:	66 68 e0 68          	pushw  $0x68e0
    1f53:	00 00                	add    %al,(%eax)
    1f55:	66 e8 07 fd          	callw  1c60 <init_queue+0x30>
    1f59:	ff                   	(bad)  
    1f5a:	ff 66 83             	jmp    *-0x7d(%esi)
    1f5d:	c4 08                	les    (%eax),%ecx
        enqueue(&(SEM_list[s].semaque),sem_index);
    1f5f:	66 8b 0e             	mov    (%esi),%cx
    1f62:	dc 68 67             	fsubrl 0x67(%eax)
    1f65:	66 8b 55 08          	mov    0x8(%ebp),%dx
    1f69:	66 89 d0             	mov    %dx,%ax
    1f6c:	66 01 c0             	add    %ax,%ax
    1f6f:	66 01 d0             	add    %dx,%ax
    1f72:	66 c1 e0 02          	shl    $0x2,%ax
    1f76:	66 01 d0             	add    %dx,%ax
    1f79:	66 c1 e0 03          	shl    $0x3,%ax
    1f7d:	66 01 d0             	add    %dx,%ax
    1f80:	66 c1 e0 02          	shl    $0x2,%ax
    1f84:	66 05 a0 37          	add    $0x37a0,%ax
    1f88:	00 00                	add    %al,(%eax)
    1f8a:	66 83 c0 04          	add    $0x4,%ax
    1f8e:	66 51                	push   %cx
    1f90:	66 50                	push   %ax
    1f92:	66 e8 ba fb          	callw  1b50 <size+0x11>
    1f96:	ff                   	(bad)  
    1f97:	ff 66 83             	jmp    *-0x7d(%esi)
    1f9a:	c4 08                	les    (%eax),%ecx
        _Schedule_once();
    1f9c:	66 e8 53 e4          	callw  3f3 <S+0x14>
    1fa0:	ff                   	(bad)  
    1fa1:	ff                   	(bad)  
    }
    __asm("sti\n");
    1fa2:	fb                   	sti    
}
    1fa3:	66 c9                	leavew 
    1fa5:	66 c3                	retw   

00001fa7 <do_V>:
int v_res;
void do_V(int s){
    1fa7:	66 55                	push   %bp
    1fa9:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    1fac:	fa                   	cli    
    SEM_list[s].count  = SEM_list[s].count + 1;
    1fad:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1fb2:	66 89 d0             	mov    %dx,%ax
    1fb5:	66 01 c0             	add    %ax,%ax
    1fb8:	66 01 d0             	add    %dx,%ax
    1fbb:	66 c1 e0 02          	shl    $0x2,%ax
    1fbf:	66 01 d0             	add    %dx,%ax
    1fc2:	66 c1 e0 03          	shl    $0x3,%ax
    1fc6:	66 01 d0             	add    %dx,%ax
    1fc9:	66 c1 e0 02          	shl    $0x2,%ax
    1fcd:	66 05 a0 37          	add    $0x37a0,%ax
    1fd1:	00 00                	add    %al,(%eax)
    1fd3:	67 66 8b 00          	mov    (%bx,%si),%ax
    1fd7:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    1fdc:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1fe1:	66 89 d0             	mov    %dx,%ax
    1fe4:	66 01 c0             	add    %ax,%ax
    1fe7:	66 01 d0             	add    %dx,%ax
    1fea:	66 c1 e0 02          	shl    $0x2,%ax
    1fee:	66 01 d0             	add    %dx,%ax
    1ff1:	66 c1 e0 03          	shl    $0x3,%ax
    1ff5:	66 01 d0             	add    %dx,%ax
    1ff8:	66 c1 e0 02          	shl    $0x2,%ax
    1ffc:	66 05 a0 37          	add    $0x37a0,%ax
    2000:	00 00                	add    %al,(%eax)
    2002:	67 66 89 08          	mov    %cx,(%bx,%si)
    if(SEM_list[s].count <= 0){
    2006:	67 66 8b 55 08       	mov    0x8(%di),%dx
    200b:	66 89 d0             	mov    %dx,%ax
    200e:	66 01 c0             	add    %ax,%ax
    2011:	66 01 d0             	add    %dx,%ax
    2014:	66 c1 e0 02          	shl    $0x2,%ax
    2018:	66 01 d0             	add    %dx,%ax
    201b:	66 c1 e0 03          	shl    $0x3,%ax
    201f:	66 01 d0             	add    %dx,%ax
    2022:	66 c1 e0 02          	shl    $0x2,%ax
    2026:	66 05 a0 37          	add    $0x37a0,%ax
    202a:	00 00                	add    %al,(%eax)
    202c:	67 66 8b 00          	mov    (%bx,%si),%ax
    2030:	66 85 c0             	test   %ax,%ax
    2033:	7f 73                	jg     20a8 <do_V+0x101>
        dequeue(&(SEM_list[s].semaque),&v_res);
    2035:	67 66 8b 55 08       	mov    0x8(%di),%dx
    203a:	66 89 d0             	mov    %dx,%ax
    203d:	66 01 c0             	add    %ax,%ax
    2040:	66 01 d0             	add    %dx,%ax
    2043:	66 c1 e0 02          	shl    $0x2,%ax
    2047:	66 01 d0             	add    %dx,%ax
    204a:	66 c1 e0 03          	shl    $0x3,%ax
    204e:	66 01 d0             	add    %dx,%ax
    2051:	66 c1 e0 02          	shl    $0x2,%ax
    2055:	66 05 a0 37          	add    $0x37a0,%ax
    2059:	00 00                	add    %al,(%eax)
    205b:	66 83 c0 04          	add    $0x4,%ax
    205f:	66 68 74 37          	pushw  $0x3774
    2063:	00 00                	add    %al,(%eax)
    2065:	66 50                	push   %ax
    2067:	66 e8 51 fb          	callw  1bbc <enqueue+0x6a>
    206b:	ff                   	(bad)  
    206c:	ff 66 83             	jmp    *-0x7d(%esi)
    206f:	c4 08                	les    (%eax),%ecx
        PCB_list[v_res].prg_status = READY;
    2071:	66 a1 74 37 66 c1    	mov    0xc1663774,%ax
    2077:	e0 02                	loopne 207b <do_V+0xd4>
    2079:	66 89 c2             	mov    %ax,%dx
    207c:	66 c1 e2 04          	shl    $0x4,%dx
    2080:	66 01 d0             	add    %dx,%ax
    2083:	66 05 50 32          	add    $0x3250,%ax
    2087:	00 00                	add    %al,(%eax)
    2089:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    2090:	00 00                	add    %al,(%eax)
        enqueue(&readyqueue,v_res);
    2092:	66 a1 74 37 66 50    	mov    0x50663774,%ax
    2098:	66 68 e0 68          	pushw  $0x68e0
    209c:	00 00                	add    %al,(%eax)
    209e:	66 e8 ae fa          	callw  1b50 <size+0x11>
    20a2:	ff                   	(bad)  
    20a3:	ff 66 83             	jmp    *-0x7d(%esi)
    20a6:	c4 08                	les    (%eax),%ecx
    }
    __asm__("sti\n");
    20a8:	fb                   	sti    

    20a9:	66 c9                	leavew 
    20ab:	66 c3                	retw   

000020ad <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    20ad:	66 55                	push   %bp
    20af:	66 89 e5             	mov    %sp,%bp
    20b2:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    20b6:	66 e8 44 e3          	callw  3fe <_Schedule_once+0x9>
    20ba:	ff                   	(bad)  
    20bb:	ff 67 66             	jmp    *0x66(%edi)
    20be:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    20c1:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    20c6:	66 c9                	leavew 
    20c8:	66 c3                	retw   

000020ca <wait>:
char wait(){
    20ca:	66 55                	push   %bp
    20cc:	66 89 e5             	mov    %sp,%bp
    20cf:	66 83 ec 08          	sub    $0x8,%sp
    int temp_ch = _wait();
    20d3:	66 e8 3f e3          	callw  416 <_Schedule+0xb>
    20d7:	ff                   	(bad)  
    20d8:	ff 67 66             	jmp    *0x66(%edi)
    20db:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char ch = '0' + temp_ch;
    20de:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    20e3:	66 83 c0 30          	add    $0x30,%ax
    20e7:	67 88 45 fb          	mov    %al,-0x5(%di)
    return ch;
    20eb:	67 8a 45 fb          	mov    -0x5(%di),%al
    //_wait();
}
    20ef:	66 c9                	leavew 
    20f1:	66 c3                	retw   

000020f3 <exit>:
void exit(char ch){
    20f3:	66 55                	push   %bp
    20f5:	66 89 e5             	mov    %sp,%bp
    20f8:	66 83 ec 04          	sub    $0x4,%sp
    20fc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2101:	67 88 45 fc          	mov    %al,-0x4(%di)
    _exit(ch);
    2105:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    210b:	66 50                	push   %ax
    210d:	66 e8 10 e3          	callw  421 <_wait+0x9>
    2111:	ff                   	(bad)  
    2112:	ff 66 83             	jmp    *-0x7d(%esi)
    2115:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2118:	c9                   	leave  
    2119:	66 c3                	retw   

0000211b <GetSem>:
int GetSem(int value){
    211b:	66 55                	push   %bp
    211d:	66 89 e5             	mov    %sp,%bp
    2120:	66 83 ec 04          	sub    $0x4,%sp
    int sema = _GetSem(value);
    2124:	67 66 ff 75 08       	pushw  0x8(%di)
    2129:	66 e8 06 e3          	callw  433 <_exit+0x10>
    212d:	ff                   	(bad)  
    212e:	ff 66 83             	jmp    *-0x7d(%esi)
    2131:	c4 04 67             	les    (%edi,%eiz,2),%eax
    2134:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return sema;
    2138:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    213d:	66 c9                	leavew 
    213f:	66 c3                	retw   

00002141 <SemFree>:
void SemFree(int value){
    2141:	66 55                	push   %bp
    2143:	66 89 e5             	mov    %sp,%bp
    _FreeSem(value);
    2146:	67 66 ff 75 08       	pushw  0x8(%di)
    214b:	66 e8 f6 e2          	callw  445 <_GetSem+0x10>
    214f:	ff                   	(bad)  
    2150:	ff 66 83             	jmp    *-0x7d(%esi)
    2153:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2156:	c9                   	leave  
    2157:	66 c3                	retw   

00002159 <P>:
void P(int s){   
    2159:	66 55                	push   %bp
    215b:	66 89 e5             	mov    %sp,%bp
    _P(s);
    215e:	67 66 ff 75 08       	pushw  0x8(%di)
    2163:	66 e8 f0 e2          	callw  457 <_FreeSem+0x10>
    2167:	ff                   	(bad)  
    2168:	ff 66 83             	jmp    *-0x7d(%esi)
    216b:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    216e:	c9                   	leave  
    216f:	66 c3                	retw   

00002171 <V>:
void V(int s){
    2171:	66 55                	push   %bp
    2173:	66 89 e5             	mov    %sp,%bp
    _V(s);
    2176:	67 66 ff 75 08       	pushw  0x8(%di)
    217b:	66 e8 ea e2          	callw  469 <_P+0x10>
    217f:	ff                   	(bad)  
    2180:	ff 66 83             	jmp    *-0x7d(%esi)
    2183:	c4 04 66             	les    (%esi,%eiz,2),%eax
    2186:	c9                   	leave  
    2187:	66 c3                	retw   
