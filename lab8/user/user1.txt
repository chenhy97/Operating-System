
user1.elf:     file format elf32-i386


Disassembly of section .text:

00000100 <user1>:
     100:	8c c8                	mov    %cs,%eax
     102:	8e d8                	mov    %eax,%ds
     104:	8e d0                	mov    %eax,%ss
     106:	bc 00 01 b8 00       	mov    $0xb80100,%esp
     10b:	b8 8e c0 14 00       	mov    $0x14c08e,%eax

0000010e <record>:
     10e:	14 00                	adc    $0x0,%al
     110:	c7 06 0e 01 50 00    	movl   $0x50010e,(%esi)

00000116 <start>:
     116:	e8 5c 01 a1 08       	call   8a10277 <delay+0x8a03f27>
     11b:	30 a3 02 30 a1 0a    	xor    %ah,0xaa13002(%ebx)
     121:	30 a3 04 30 a0 06    	xor    %ah,0x6a03004(%ebx)
     127:	30 a2 00 30 a0 07    	xor    %ah,0x7a03000(%edx)
     12d:	30 a2 01 30 a0 0c    	xor    %ah,0xca03001(%edx)
     133:	30 a2 0f 00 a0 0d    	xor    %ah,0xda0000f(%edx)
     139:	30 a2 22 30 e8 7d    	xor    %ah,0x7de83022(%edx)
     13f:	00 fe                	add    %bh,%dh
     141:	06                   	push   %es
     142:	0f 00 a1 02 30 a3 08 	verr   0x8a33002(%ecx)
     149:	30 a1 04 30 a3 0a    	xor    %ah,0xaa33004(%ecx)
     14f:	30 a0 00 30 a2 06    	xor    %ah,0x6a23000(%eax)
     155:	30 a0 01 30 a2 07    	xor    %ah,0x7a23001(%eax)
     15b:	30 a0 0f 00 a2 0c    	xor    %ah,0xca2000f(%eax)
     161:	30 a1 10 30 a3 02    	xor    %ah,0x2a33010(%ecx)
     167:	30 a1 12 30 a3 04    	xor    %ah,0x4a33012(%ecx)
     16d:	30 a0 0e 30 a2 00    	xor    %ah,0xa2300e(%eax)
     173:	30 a0 0f 30 a2 01    	xor    %ah,0x1a2300f(%eax)
     179:	30 a0 14 30 a2 0f    	xor    %ah,0xfa23014(%eax)
     17f:	00 a0 15 30 a2 22    	add    %ah,0x22a23015(%eax)
     185:	30 e8                	xor    %ch,%al
     187:	34 00                	xor    $0x0,%al
     189:	fe 06                	incb   (%esi)
     18b:	0f 00 a1 02 30 a3 10 	verr   0x10a33002(%ecx)
     192:	30 a1 04 30 a3 12    	xor    %ah,0x12a33004(%ecx)
     198:	30 a0 00 30 a2 0e    	xor    %ah,0xea23000(%eax)
     19e:	30 a0 01 30 a2 0f    	xor    %ah,0xfa23001(%eax)
     1a4:	30 a0 0f 00 a2 14    	xor    %ah,0x14a2000f(%eax)
     1aa:	30 cd                	xor    %cl,%ch
     1ac:	33 ff                	xor    %edi,%edi
     1ae:	0e                   	push   %cs
     1af:	0e                   	push   %cs
     1b0:	01 83 3e 0e 01 01    	add    %eax,0x1010e3e(%ebx)
     1b6:	75 02                	jne    1ba <again>
     1b8:	cd 38                	int    $0x38

000001ba <again>:
     1ba:	e9 59 ff e8 7e       	jmp    7ee90118 <delay+0x7ee83dc8>

000001bd <move>:
     1bd:	e8 7e 00 e8 ab       	call   abe80240 <delay+0xabe73ef0>
     1c2:	00 e8                	add    %ch,%al
     1c4:	07                   	pop    %es
     1c5:	00 e8                	add    %ch,%al
     1c7:	75 00                	jne    1c9 <move+0xc>
     1c9:	e8 88 00 c3 a0       	call   a0c30256 <delay+0xa0c23f06>

000001cd <update>:
     1cd:	a0 00 30 e8 07       	mov    0x7e83000,%al
     1d2:	00 a0 01 30 e8 33    	add    %ah,0x33e83001(%eax)
     1d8:	00 c3                	add    %al,%bl

000001da <handlex>:
     1da:	3c 01                	cmp    $0x1,%al
     1dc:	75 17                	jne    1f5 <dec1>
     1de:	ff 06                	incl   (%esi)
     1e0:	02 30                	add    (%eax),%dh
     1e2:	83 3e 02             	cmpl   $0x2,(%esi)
     1e5:	30 0f                	xor    %cl,(%edi)
     1e7:	75 54                	jne    23d <notchange>
     1e9:	c7 06 02 30 0d 00    	movl   $0xd3002,(%esi)
     1ef:	c6 06 00             	movb   $0x0,(%esi)
     1f2:	30 00                	xor    %al,(%eax)
     1f4:	c3                   	ret    

000001f5 <dec1>:
     1f5:	ff 0e                	decl   (%esi)
     1f7:	02 30                	add    (%eax),%dh
     1f9:	83 3e 02             	cmpl   $0x2,(%esi)
     1fc:	30 ff                	xor    %bh,%bh
     1fe:	75 3d                	jne    23d <notchange>
     200:	c7 06 02 30 01 00    	movl   $0x13002,(%esi)
     206:	c6 06 00             	movb   $0x0,(%esi)
     209:	30 01                	xor    %al,(%ecx)
     20b:	c3                   	ret    

0000020c <handley>:
     20c:	3c 01                	cmp    $0x1,%al
     20e:	75 17                	jne    227 <dec2>
     210:	ff 06                	incl   (%esi)
     212:	04 30                	add    $0x30,%al
     214:	83 3e 04             	cmpl   $0x4,(%esi)
     217:	30 28                	xor    %ch,(%eax)
     219:	75 22                	jne    23d <notchange>
     21b:	c7 06 04 30 26 00    	movl   $0x263004,(%esi)
     221:	c6 06 01             	movb   $0x1,(%esi)
     224:	30 00                	xor    %al,(%eax)
     226:	c3                   	ret    

00000227 <dec2>:
     227:	ff 0e                	decl   (%esi)
     229:	04 30                	add    $0x30,%al
     22b:	83 3e 04             	cmpl   $0x4,(%esi)
     22e:	30 ff                	xor    %bh,%bh
     230:	75 0b                	jne    23d <notchange>
     232:	c7 06 04 30 01 00    	movl   $0x13004,(%esi)
     238:	c6 06 01             	movb   $0x1,(%esi)
     23b:	30 01                	xor    %al,(%ecx)

0000023d <notchange>:
     23d:	c3                   	ret    

0000023e <Setpoint>:
     23e:	31 c0                	xor    %eax,%eax
     240:	a1 02 30 bb 50       	mov    0x50bb3002,%eax
     245:	00 f7                	add    %dh,%bh
     247:	e3 03                	jecxz  24c <Setpoint+0xe>
     249:	06                   	push   %es
     24a:	04 30                	add    $0x30,%al
     24c:	bb 02 00 f7 e3       	mov    $0xe3f70002,%ebx
     251:	89 c3                	mov    %eax,%ebx
     253:	c3                   	ret    

00000254 <show>:
     254:	8a 26                	mov    (%esi),%ah
     256:	0f 00 a0 22 30 26 89 	verr   -0x76d9cfde(%eax)
     25d:	07                   	pop    %es
     25e:	8a 1e                	mov    (%esi),%bl
     260:	0f 00 80 fb 10 75 06 	sldt   0x67510fb(%eax)
     267:	b3 01                	mov    $0x1,%bl
     269:	88 1e                	mov    %bl,(%esi)
     26b:	0f 00 c3             	sldt   %ebx

0000026d <c>:
     26d:	c3                   	ret    

0000026e <kill>:
     26e:	b8 00 00 26 89       	mov    $0x89260000,%eax
     273:	07                   	pop    %es
     274:	c3                   	ret    

00000275 <loop1>:
     275:	8b 0e                	mov    (%esi),%ecx
     277:	16                   	push   %ss
     278:	30 a1 18 30 48 7f    	xor    %ah,0x7f483018(%ecx)

00000279 <LOOP1>:
     279:	a1 18 30 48 7f       	mov    0x7f483018,%eax

0000027c <LOOP2>:
     27c:	48                   	dec    %eax
     27d:	7f fd                	jg     27c <LOOP2>
     27f:	e2 f8                	loop   279 <LOOP1>
     281:	c3                   	ret    

00000282 <showname>:
     282:	06                   	push   %es
     283:	53                   	push   %ebx
     284:	66 55                	push   %bp
     286:	8c d8                	mov    %ds,%eax
     288:	8e c0                	mov    %eax,%es
     28a:	b8 1a 30 89 c5       	mov    $0xc589301a,%eax
     28f:	b8 01 13 b6 0c       	mov    $0xcb61301,%eax
     294:	b2 28                	mov    $0x28,%dl
     296:	b9 08 00 b7 00       	mov    $0xb70008,%ecx
     29b:	8a 1e                	mov    (%esi),%bl
     29d:	0f 00 cd             	str    %ebp
     2a0:	10 66 5d             	adc    %ah,0x5d(%esi)
     2a3:	5b                   	pop    %ebx
     2a4:	07                   	pop    %es
     2a5:	c3                   	ret    
     2a6:	66 90                	xchg   %ax,%ax
     2a8:	66 90                	xchg   %ax,%ax
     2aa:	66 90                	xchg   %ax,%ax
     2ac:	66 90                	xchg   %ax,%ax
     2ae:	66 90                	xchg   %ax,%ax

000002b0 <count>:
     2b0:	08 2d 00 00 00 00    	or     %ch,0x0

000002b1 <alpha>:
     2b1:	2d 00 00 00 00       	sub    $0x0,%eax

000002b2 <int_09_saved>:
     2b2:	00 00                	add    %al,(%eax)
	...

000002b6 <program_saved>:
     2b6:	70 00                	jo     2b8 <program_saved+0x2>
	...

000002ba <ds_saved>:
     2ba:	7c 00                	jl     2bc <ds_saved+0x2>
	...

000002be <return_save>:
     2be:	88 00                	mov    %al,(%eax)

000002c0 <esi_save>:
     2c0:	96                   	xchg   %eax,%esi
     2c1:	00 00                	add    %al,(%eax)
	...

000002c4 <temp>:
     2c4:	e8 03 b4 00 00       	call   b6cc <BOOTSEG2+0x3acc>

000002c6 <kernelesp_saved>:
     2c6:	b4 00                	mov    $0x0,%ah
	...

000002ca <esp_saved_inkernel>:
     2ca:	c8 00 00 00          	enter  $0x0,$0x0

000002ce <esp_saved_in_user>:
     2ce:	f0 00 00             	lock add %al,(%eax)
	...

000002d2 <ss_saved_in_user>:
     2d2:	2c 01                	sub    $0x1,%al
	...

000002d6 <color>:
     2d6:	01 c2                	add    %eax,%edx

000002d7 <ss_saved_fork>:
     2d7:	c2 01 00             	ret    $0x1
	...

000002db <retaddr>:
     2db:	58                   	pop    %eax
     2dc:	02 00                	add    (%eax),%al
	...

000002df <Message31>:
     2df:	74 69                	je     34a <_readinput+0x9>
     2e1:	6d                   	insl   (%dx),%es:(%edi)
     2e2:	65 3a 20             	cmp    %gs:(%eax),%ah

000002e5 <_sys_stack_copy>:
     2e5:	c8 00 00 00          	enter  $0x0,$0x0
     2e9:	8e d0                	mov    %eax,%ss
     2eb:	60                   	pusha  
     2ec:	1e                   	push   %ds
     2ed:	8b 46 06             	mov    0x6(%esi),%eax
     2f0:	8b 56 0a             	mov    0xa(%esi),%edx
     2f3:	8b 4e 0e             	mov    0xe(%esi),%ecx
     2f6:	8c db                	mov    %ds,%ebx

000002f8 <while_loop1>:
     2f8:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
     2fe:	8e d8                	mov    %eax,%ds
     300:	67 8b 1a             	mov    (%bp,%si),%ebx
     303:	8e d9                	mov    %ecx,%ds
     305:	67 89 1a             	mov    %ebx,(%bp,%si)
     308:	83 c2 02             	add    $0x2,%edx
     30b:	eb eb                	jmp    2f8 <while_loop1>

0000030d <end_for_copy>:
     30d:	1f                   	pop    %ds
     30e:	61                   	popa   
     30f:	c9                   	leave  
     310:	66 5a                	pop    %dx
     312:	ff e2                	jmp    *%edx

00000314 <_clearscreen>:
     314:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     319:	66 5a                	pop    %dx
     31b:	ff e2                	jmp    *%edx

0000031d <_printchar>:
     31d:	c8 00 00 00          	enter  $0x0,$0x0
     321:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
     326:	57                   	push   %edi
     327:	66 8b 4e 06          	mov    0x6(%esi),%cx
     32b:	66 8b 7e 0a          	mov    0xa(%esi),%di
     32f:	66 8b 56 0e          	mov    0xe(%esi),%dx
     333:	88 d5                	mov    %dl,%ch
     335:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
     33c:	00 66 5a             	add    %ah,0x5a(%esi)
     33f:	ff e2                	jmp    *%edx

00000341 <_readinput>:
     341:	c8 04 00 00          	enter  $0x4,$0x0
     345:	b4 00                	mov    $0x0,%ah
     347:	cd 16                	int    $0x16
     349:	b4 00                	mov    $0x0,%ah
     34b:	66 67 89 04          	mov    %ax,(%si)
     34f:	24 66                	and    $0x66,%al
     351:	67 8b 04             	mov    (%si),%eax
     354:	24 c9                	and    $0xc9,%al
     356:	66 5a                	pop    %dx
     358:	ff e2                	jmp    *%edx

0000035a <_showchar>:
     35a:	c8 00 00 00          	enter  $0x0,$0x0
     35e:	50                   	push   %eax
     35f:	53                   	push   %ebx
     360:	8b 46 06             	mov    0x6(%esi),%eax
     363:	b4 0e                	mov    $0xe,%ah
     365:	b3 00                	mov    $0x0,%bl
     367:	cd 10                	int    $0x10
     369:	fa                   	cli    
     36a:	5b                   	pop    %ebx
     36b:	58                   	pop    %eax
     36c:	c9                   	leave  
     36d:	66 5a                	pop    %dx
     36f:	ff e2                	jmp    *%edx

00000371 <_setPoint>:
     371:	c8 00 00 00          	enter  $0x0,$0x0
     375:	53                   	push   %ebx
     376:	b7 00                	mov    $0x0,%bh
     378:	8a 77 06             	mov    0x6(%edi),%dh
     37b:	8a 57 0a             	mov    0xa(%edi),%dl
     37e:	b4 02                	mov    $0x2,%ah
     380:	cd 10                	int    $0x10
     382:	5b                   	pop    %ebx
     383:	c9                   	leave  
     384:	66 5a                	pop    %dx
     386:	ff e2                	jmp    *%edx

00000388 <_loadP>:
     388:	c8 00 00 00          	enter  $0x0,$0x0
     38c:	60                   	pusha  
     38d:	06                   	push   %es
     38e:	1e                   	push   %ds
     38f:	8c c8                	mov    %cs,%eax
     391:	8e d8                	mov    %eax,%ds
     393:	8b 46 0e             	mov    0xe(%esi),%eax
     396:	8e c0                	mov    %eax,%es
     398:	b2 00                	mov    $0x0,%dl
     39a:	8b 46 0a             	mov    0xa(%esi),%eax
     39d:	b3 12                	mov    $0x12,%bl
     39f:	f6 f3                	div    %bl
     3a1:	88 e1                	mov    %ah,%cl
     3a3:	30 e4                	xor    %ah,%ah
     3a5:	b3 02                	mov    $0x2,%bl
     3a7:	f6 f3                	div    %bl
     3a9:	88 e6                	mov    %ah,%dh
     3ab:	88 c5                	mov    %al,%ch
     3ad:	8a 46 06             	mov    0x6(%esi),%al
     3b0:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
     3b5:	cd 13                	int    $0x13
     3b7:	1f                   	pop    %ds
     3b8:	07                   	pop    %es
     3b9:	61                   	popa   
     3ba:	c9                   	leave  
     3bb:	66 5a                	pop    %dx
     3bd:	ff e2                	jmp    *%edx

000003bf <_RunProgress>:
     3bf:	c8 00 00 00          	enter  $0x0,$0x0
     3c3:	8c c8                	mov    %cs,%eax
     3c5:	8e d8                	mov    %eax,%ds
     3c7:	8e c0                	mov    %eax,%es
     3c9:	8b 5e 06             	mov    0x6(%esi),%ebx
     3cc:	c7 06 b6 02 00 01    	movl   $0x10002b6,(%esi)
     3d2:	89 1e                	mov    %ebx,(%esi)
     3d4:	b8 02 66 89 26       	mov    $0x26896602,%eax
     3d9:	ca 02 26             	lret   $0x2602
     3dc:	ff 1e                	lcall  *(%esi)
     3de:	b6 02                	mov    $0x2,%dh

000003e0 <S>:
     3e0:	8c c8                	mov    %cs,%eax
     3e2:	8e d8                	mov    %eax,%ds
     3e4:	8e c0                	mov    %eax,%es
     3e6:	8e d0                	mov    %eax,%ss
     3e8:	66 8b 26             	mov    (%esi),%sp
     3eb:	ca 02 b4             	lret   $0xb402
     3ee:	00 cd                	add    %cl,%ch
     3f0:	16                   	push   %ss
     3f1:	c9                   	leave  
     3f2:	66 5a                	pop    %dx
     3f4:	ff e2                	jmp    *%edx

000003f6 <_Schedule_once>:
     3f6:	c8 00 00 00          	enter  $0x0,$0x0
     3fa:	cd 41                	int    $0x41
     3fc:	c9                   	leave  
     3fd:	66 5a                	pop    %dx
     3ff:	ff e2                	jmp    *%edx

00000401 <_fork_user>:
     401:	c8 00 00 00          	enter  $0x0,$0x0
     405:	cd 39                	int    $0x39
     407:	c9                   	leave  
     408:	66 5a                	pop    %dx
     40a:	ff e2                	jmp    *%edx

0000040c <_Schedule>:
     40c:	c8 00 00 00          	enter  $0x0,$0x0
     410:	16                   	push   %ss
     411:	cd 23                	int    $0x23
     413:	17                   	pop    %ss
     414:	c9                   	leave  
     415:	66 5a                	pop    %dx
     417:	ff e2                	jmp    *%edx

00000419 <_wait>:
     419:	c8 00 00 00          	enter  $0x0,$0x0
     41d:	cd 3b                	int    $0x3b
     41f:	c9                   	leave  
     420:	66 5a                	pop    %dx
     422:	ff e2                	jmp    *%edx

00000424 <_exit>:
     424:	c8 00 00 00          	enter  $0x0,$0x0
     428:	66 67 8b 45 06       	mov    0x6(%di),%ax
     42d:	66 50                	push   %ax
     42f:	cd 2a                	int    $0x2a
     431:	c9                   	leave  
     432:	66 5a                	pop    %dx
     434:	ff e2                	jmp    *%edx

00000436 <_GetSem>:
     436:	c8 00 00 00          	enter  $0x0,$0x0
     43a:	66 67 8b 45 06       	mov    0x6(%di),%ax
     43f:	66 50                	push   %ax
     441:	cd 3c                	int    $0x3c
     443:	c9                   	leave  
     444:	66 5a                	pop    %dx
     446:	ff e2                	jmp    *%edx

00000448 <_FreeSem>:
     448:	c8 00 00 00          	enter  $0x0,$0x0
     44c:	66 67 8b 45 06       	mov    0x6(%di),%ax
     451:	66 50                	push   %ax
     453:	cd 3d                	int    $0x3d
     455:	c9                   	leave  
     456:	66 5a                	pop    %dx
     458:	ff e2                	jmp    *%edx

0000045a <_Pr>:
     45a:	c8 00 00 00          	enter  $0x0,$0x0
     45e:	66 67 8b 45 06       	mov    0x6(%di),%ax
     463:	66 50                	push   %ax
     465:	cd 3e                	int    $0x3e
     467:	c9                   	leave  
     468:	66 5a                	pop    %dx
     46a:	ff e2                	jmp    *%edx

0000046c <_Vr>:
     46c:	c8 00 00 00          	enter  $0x0,$0x0
     470:	66 67 8b 45 06       	mov    0x6(%di),%ax
     475:	66 50                	push   %ax
     477:	cd 3f                	int    $0x3f
     479:	c9                   	leave  
     47a:	66 5a                	pop    %dx
     47c:	ff e2                	jmp    *%edx

0000047e <_Schedule_PV>:
     47e:	c8 00 00 00          	enter  $0x0,$0x0
     482:	cd 23                	int    $0x23
     484:	c9                   	leave  
     485:	66 5a                	pop    %dx
     487:	ff e2                	jmp    *%edx

00000489 <_SetINT20h>:
     489:	fa                   	cli    
     48a:	1e                   	push   %ds
     48b:	06                   	push   %es
     48c:	8c c8                	mov    %cs,%eax
     48e:	8e d8                	mov    %eax,%ds
     490:	8e c0                	mov    %eax,%es
     492:	8c 16                	mov    %ss,(%esi)
     494:	d2 02                	rolb   %cl,(%edx)
     496:	8e d0                	mov    %eax,%ss
     498:	66 89 26             	mov    %sp,(%esi)
     49b:	ce                   	into   
     49c:	02 66 8b             	add    -0x75(%esi),%ah
     49f:	26                   	es
     4a0:	ca 02 53             	lret   $0x5302
     4a3:	51                   	push   %ecx
     4a4:	52                   	push   %edx
     4a5:	b4 01                	mov    $0x1,%ah
     4a7:	cd 16                	int    $0x16
     4a9:	5a                   	pop    %edx
     4aa:	59                   	pop    %ecx
     4ab:	5b                   	pop    %ebx
     4ac:	8e 16                	mov    (%esi),%ss
     4ae:	d2 02                	rolb   %cl,(%edx)
     4b0:	66 8b 26             	mov    (%esi),%sp
     4b3:	ce                   	into   
     4b4:	02 07                	add    (%edi),%al
     4b6:	1f                   	pop    %ds
     4b7:	74 0a                	je     4c3 <going_on>
     4b9:	50                   	push   %eax
     4ba:	b4 00                	mov    $0x0,%ah
     4bc:	cd 16                	int    $0x16
     4be:	58                   	pop    %eax
     4bf:	fb                   	sti    
     4c0:	cd 38                	int    $0x38
     4c2:	cf                   	iret   

000004c3 <going_on>:
     4c3:	fb                   	sti    
     4c4:	cf                   	iret   

000004c5 <_SetINT08h_turn_around>:
     4c5:	e8 39 06 fa 6a       	call   6afa0b03 <delay+0x6af947b3>
     4ca:	00 e8                	add    %ch,%al
     4cc:	c1 0d e8 a4 06 b0 20 	rorl   $0x20,0xb006a4e8
     4d3:	e6 20                	out    %al,$0x20
     4d5:	e6 a0                	out    %al,$0xa0
     4d7:	fb                   	sti    
     4d8:	cf                   	iret   

000004d9 <_SetINT08h>:
     4d9:	60                   	pusha  
     4da:	0f a8                	push   %gs
     4dc:	1e                   	push   %ds
     4dd:	06                   	push   %es
     4de:	16                   	push   %ss
     4df:	8c c8                	mov    %cs,%eax
     4e1:	8e c0                	mov    %eax,%es
     4e3:	8e d8                	mov    %eax,%ds
     4e5:	8e d0                	mov    %eax,%ss
     4e7:	fe 0e                	decb   (%esi)
     4e9:	b0 02                	mov    $0x2,%al
     4eb:	75 4f                	jne    53c <end>

000004ed <notc>:
     4ed:	80 3e b1             	cmpb   $0xb1,(%esi)
     4f0:	02 2d 75 07 c6 06    	add    0x6c60775,%ch
     4f6:	b1 02                	mov    $0x2,%cl
     4f8:	5c                   	pop    %esp
     4f9:	eb 2a                	jmp    525 <show>

000004fb <changleft>:
     4fb:	80 3e b1             	cmpb   $0xb1,(%esi)
     4fe:	02 5c 75 07          	add    0x7(%ebp,%esi,2),%bl
     502:	c6 06 b1             	movb   $0xb1,(%esi)
     505:	02 7c eb 1c          	add    0x1c(%ebx,%ebp,8),%bh

00000509 <changright>:
     509:	80 3e b1             	cmpb   $0xb1,(%esi)
     50c:	02 7c 75 07          	add    0x7(%ebp,%esi,2),%bh
     510:	c6 06 b1             	movb   $0xb1,(%esi)
     513:	02 2f                	add    (%edi),%ch
     515:	eb 0e                	jmp    525 <show>

00000517 <changheng>:
     517:	80 3e b1             	cmpb   $0xb1,(%esi)
     51a:	02 2f                	add    (%edi),%ch
     51c:	75 cf                	jne    4ed <notc>
     51e:	c6 06 b1             	movb   $0xb1,(%esi)
     521:	02 2d eb 00 b9 00    	add    0xb900eb,%ch

00000525 <show>:
     525:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     52a:	b4 09                	mov    $0x9,%ah
     52c:	8a 26                	mov    (%esi),%ah
     52e:	d6                   	(bad)  
     52f:	02 a0 b1 02 65 a3    	add    -0x5c9afd4f(%eax),%ah
     535:	8e 00                	mov    (%eax),%es
     537:	c6 06 b0             	movb   $0xb0,(%esi)
     53a:	02 08                	add    (%eax),%cl

0000053c <end>:
     53c:	b0 20                	mov    $0x20,%al
     53e:	e6 20                	out    %al,$0x20
     540:	e6 a0                	out    %al,$0xa0
     542:	17                   	pop    %ss
     543:	07                   	pop    %es
     544:	1f                   	pop    %ds
     545:	0f a9                	pop    %gs
     547:	61                   	popa   
     548:	fb                   	sti    
     549:	cf                   	iret   

0000054a <_SetINT09h>:
     54a:	fa                   	cli    
     54b:	1e                   	push   %ds
     54c:	06                   	push   %es
     54d:	8c c8                	mov    %cs,%eax
     54f:	8e d8                	mov    %eax,%ds
     551:	8e c0                	mov    %eax,%es
     553:	8e d0                	mov    %eax,%ss
     555:	8c 16                	mov    %ss,(%esi)
     557:	d2 02                	rolb   %cl,(%edx)
     559:	8e d0                	mov    %eax,%ss
     55b:	66 89 26             	mov    %sp,(%esi)
     55e:	ce                   	into   
     55f:	02 66 8b             	add    -0x75(%esi),%ah
     562:	26                   	es
     563:	ca 02 60             	lret   $0x6002
     566:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     56b:	8a 26                	mov    (%esi),%ah
     56d:	d6                   	(bad)  
     56e:	02 b0 4f 65 a3 78    	add    0x78a3654f(%eax),%dh
     574:	00 b0 55 65 a3 7a    	add    %dh,0x7aa36555(%eax)
     57a:	00 b0 43 65 a3 7c    	add    %dh,0x7ca36543(%eax)
     580:	00 b0 48 65 a3 7e    	add    %dh,0x7ea36548(%eax)
     586:	00 b0 53 65 a3 80    	add    %dh,-0x7f5c9aad(%eax)
     58c:	00 b0 21 65 a3 82    	add    %dh,-0x7d5c9adf(%eax)
     592:	00 b0 4f 65 a3 84    	add    %dh,-0x7b5c9ab1(%eax)
     598:	00 b0 55 65 a3 86    	add    %dh,-0x795c9aab(%eax)
     59e:	00 b0 43 65 a3 88    	add    %dh,-0x775c9abd(%eax)
     5a4:	00 b0 48 65 a3 8a    	add    %dh,-0x755c9ab8(%eax)
     5aa:	00 b0 21 65 a3 8c    	add    %dh,-0x735c9adf(%eax)
     5b0:	00 61 80             	add    %ah,-0x80(%ecx)
     5b3:	fc                   	cld    
     5b4:	06                   	push   %es
     5b5:	75 06                	jne    5bd <cont>
     5b7:	b4 01                	mov    $0x1,%ah
     5b9:	88 26                	mov    %ah,(%esi)
     5bb:	d6                   	(bad)  
     5bc:	02 fe                	add    %dh,%bh

000005bd <cont>:
     5bd:	fe 06                	incb   (%esi)
     5bf:	d6                   	(bad)  
     5c0:	02 8c c8 8e c0 fb 9c 	add    -0x63043f72(%eax,%ecx,8),%cl
     5c7:	26 ff 1e             	lcall  *%es:(%esi)
     5ca:	b2 02                	mov    $0x2,%dl
     5cc:	8e 16                	mov    (%esi),%ss
     5ce:	d2 02                	rolb   %cl,(%edx)
     5d0:	66 8b 26             	mov    (%esi),%sp
     5d3:	ce                   	into   
     5d4:	02 07                	add    (%edi),%al
     5d6:	1f                   	pop    %ds
     5d7:	cf                   	iret   

000005d8 <_SetINT33h>:
     5d8:	fa                   	cli    
     5d9:	c8 00 00 00          	enter  $0x0,$0x0
     5dd:	60                   	pusha  
     5de:	1e                   	push   %ds
     5df:	0f a8                	push   %gs
     5e1:	06                   	push   %es
     5e2:	8c c8                	mov    %cs,%eax
     5e4:	8e c0                	mov    %eax,%es
     5e6:	8e d8                	mov    %eax,%ds
     5e8:	8c 16                	mov    %ss,(%esi)
     5ea:	d2 02                	rolb   %cl,(%edx)
     5ec:	8e d0                	mov    %eax,%ss
     5ee:	66 89 26             	mov    %sp,(%esi)
     5f1:	ce                   	into   
     5f2:	02 66 8b             	add    -0x75(%esi),%ah
     5f5:	26                   	es
     5f6:	ca 02 6a             	lret   $0x6a02
     5f9:	00 e8                	add    %ch,%al
     5fb:	06                   	push   %es
     5fc:	08 8e 16 d2 02 66    	or     %cl,0x6602d216(%esi)
     602:	8b 26                	mov    (%esi),%esp
     604:	ce                   	into   
     605:	02 07                	add    (%edi),%al
     607:	0f a9                	pop    %gs
     609:	1f                   	pop    %ds
     60a:	61                   	popa   
     60b:	fb                   	sti    
     60c:	c9                   	leave  
     60d:	cf                   	iret   

0000060e <_SetINT34h>:
     60e:	fa                   	cli    
     60f:	c8 00 00 00          	enter  $0x0,$0x0
     613:	60                   	pusha  
     614:	1e                   	push   %ds
     615:	0f a8                	push   %gs
     617:	06                   	push   %es
     618:	8c c8                	mov    %cs,%eax
     61a:	8e c0                	mov    %eax,%es
     61c:	8e d8                	mov    %eax,%ds
     61e:	8c 16                	mov    %ss,(%esi)
     620:	d2 02                	rolb   %cl,(%edx)
     622:	8e d0                	mov    %eax,%ss
     624:	66 89 26             	mov    %sp,(%esi)
     627:	ce                   	into   
     628:	02 66 8b             	add    -0x75(%esi),%ah
     62b:	26                   	es
     62c:	ca 02 6a             	lret   $0x6a02
     62f:	00 e8                	add    %ch,%al
     631:	80 08 8e             	orb    $0x8e,(%eax)
     634:	16                   	push   %ss
     635:	d2 02                	rolb   %cl,(%edx)
     637:	66 8b 26             	mov    (%esi),%sp
     63a:	ce                   	into   
     63b:	02 07                	add    (%edi),%al
     63d:	0f a9                	pop    %gs
     63f:	1f                   	pop    %ds
     640:	61                   	popa   
     641:	fb                   	sti    
     642:	c9                   	leave  
     643:	cf                   	iret   

00000644 <_SetINT35h>:
     644:	60                   	pusha  
     645:	1e                   	push   %ds
     646:	0f a8                	push   %gs
     648:	06                   	push   %es
     649:	8c c8                	mov    %cs,%eax
     64b:	8e c0                	mov    %eax,%es
     64d:	8e d8                	mov    %eax,%ds
     64f:	8c 16                	mov    %ss,(%esi)
     651:	d2 02                	rolb   %cl,(%edx)
     653:	8e d0                	mov    %eax,%ss
     655:	66 89 26             	mov    %sp,(%esi)
     658:	ce                   	into   
     659:	02 66 8b             	add    -0x75(%esi),%ah
     65c:	26                   	es
     65d:	ca 02 6a             	lret   $0x6a02
     660:	00 e8                	add    %ch,%al
     662:	2e 09 8e 16 d2 02 66 	or     %ecx,%cs:0x6602d216(%esi)
     669:	8b 26                	mov    (%esi),%esp
     66b:	ce                   	into   
     66c:	02 07                	add    (%edi),%al
     66e:	0f a9                	pop    %gs
     670:	1f                   	pop    %ds
     671:	61                   	popa   
     672:	fb                   	sti    
     673:	cf                   	iret   

00000674 <_SetINT36h>:
     674:	60                   	pusha  
     675:	1e                   	push   %ds
     676:	0f a8                	push   %gs
     678:	06                   	push   %es
     679:	8c c8                	mov    %cs,%eax
     67b:	8e c0                	mov    %eax,%es
     67d:	8e d8                	mov    %eax,%ds
     67f:	8c 16                	mov    %ss,(%esi)
     681:	d2 02                	rolb   %cl,(%edx)
     683:	8e d0                	mov    %eax,%ss
     685:	66 89 26             	mov    %sp,(%esi)
     688:	ce                   	into   
     689:	02 66 8b             	add    -0x75(%esi),%ah
     68c:	26                   	es
     68d:	ca 02 6a             	lret   $0x6a02
     690:	00 e8                	add    %ch,%al
     692:	84 09                	test   %cl,(%ecx)
     694:	8e 16                	mov    (%esi),%ss
     696:	d2 02                	rolb   %cl,(%edx)
     698:	66 8b 26             	mov    (%esi),%sp
     69b:	ce                   	into   
     69c:	02 07                	add    (%edi),%al
     69e:	0f a9                	pop    %gs
     6a0:	1f                   	pop    %ds
     6a1:	61                   	popa   
     6a2:	fb                   	sti    
     6a3:	cf                   	iret   

000006a4 <_SetINT21h>:
     6a4:	c8 00 00 00          	enter  $0x0,$0x0
     6a8:	60                   	pusha  
     6a9:	1e                   	push   %ds
     6aa:	0f a8                	push   %gs
     6ac:	06                   	push   %es
     6ad:	8c c8                	mov    %cs,%eax
     6af:	8e c0                	mov    %eax,%es
     6b1:	8e d8                	mov    %eax,%ds
     6b3:	8b 46 08             	mov    0x8(%esi),%eax
     6b6:	80 fc 00             	cmp    $0x0,%ah
     6b9:	74 16                	je     6d1 <fn0>
     6bb:	80 fc 01             	cmp    $0x1,%ah
     6be:	74 21                	je     6e1 <fn1>
     6c0:	80 fc 02             	cmp    $0x2,%ah
     6c3:	74 3d                	je     702 <fn2>
     6c5:	80 fc 03             	cmp    $0x3,%ah
     6c8:	74 5f                	je     729 <fn3>
     6ca:	07                   	pop    %es
     6cb:	0f a9                	pop    %gs
     6cd:	1f                   	pop    %ds
     6ce:	61                   	popa   
     6cf:	c9                   	leave  
     6d0:	cf                   	iret   

000006d1 <fn0>:
     6d1:	8b 46 0a             	mov    0xa(%esi),%eax
     6d4:	b4 0e                	mov    $0xe,%ah
     6d6:	b3 00                	mov    $0x0,%bl
     6d8:	cd 10                	int    $0x10
     6da:	07                   	pop    %es
     6db:	0f a9                	pop    %gs
     6dd:	1f                   	pop    %ds
     6de:	61                   	popa   
     6df:	c9                   	leave  
     6e0:	cf                   	iret   

000006e1 <fn1>:
     6e1:	66 83 ec 04          	sub    $0x4,%sp
     6e5:	b4 00                	mov    $0x0,%ah
     6e7:	cd 16                	int    $0x16
     6e9:	b4 00                	mov    $0x0,%ah
     6eb:	66 67 89 04          	mov    %ax,(%si)
     6ef:	24 66                	and    $0x66,%al
     6f1:	67 8b 04             	mov    (%si),%eax
     6f4:	24 66                	and    $0x66,%al
     6f6:	83 c4 04             	add    $0x4,%esp
     6f9:	8e e0                	mov    %eax,%fs
     6fb:	07                   	pop    %es
     6fc:	0f a9                	pop    %gs
     6fe:	1f                   	pop    %ds
     6ff:	61                   	popa   
     700:	c9                   	leave  
     701:	cf                   	iret   

00000702 <fn2>:
     702:	66 83 ec 04          	sub    $0x4,%sp
     706:	b4 00                	mov    $0x0,%ah
     708:	cd 16                	int    $0x16
     70a:	b4 00                	mov    $0x0,%ah
     70c:	66 67 89 04          	mov    %ax,(%si)
     710:	24 66                	and    $0x66,%al
     712:	67 8b 04             	mov    (%si),%eax
     715:	24 b4                	and    $0xb4,%al
     717:	0e                   	push   %cs
     718:	b3 00                	mov    $0x0,%bl
     71a:	cd 10                	int    $0x10
     71c:	66 83 c4 04          	add    $0x4,%sp
     720:	8e e0                	mov    %eax,%fs
     722:	07                   	pop    %es
     723:	0f a9                	pop    %gs
     725:	1f                   	pop    %ds
     726:	61                   	popa   
     727:	c9                   	leave  
     728:	cf                   	iret   

00000729 <fn3>:
     729:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     72e:	07                   	pop    %es
     72f:	0f a9                	pop    %gs
     731:	1f                   	pop    %ds
     732:	61                   	popa   
     733:	c9                   	leave  
     734:	cf                   	iret   

00000735 <_SetINT37h>:
     735:	fa                   	cli    
     736:	e8 90 04 cf fa       	call   facf0bcb <delay+0xface487b>

0000073a <_SetINT38h>:
     73a:	fa                   	cli    
     73b:	50                   	push   %eax
     73c:	1e                   	push   %ds
     73d:	8c c8                	mov    %cs,%eax
     73f:	8e d8                	mov    %eax,%ds
     741:	6a 00                	push   $0x0
     743:	e8 54 0c 1f 58       	call   581f139c <delay+0x581e504c>
     748:	fb                   	sti    
     749:	cf                   	iret   

0000074a <_SetINT39h>:
     74a:	fa                   	cli    
     74b:	c8 00 00 00          	enter  $0x0,$0x0
     74f:	1e                   	push   %ds
     750:	6a 00                	push   $0x0
     752:	8c c8                	mov    %cs,%eax
     754:	8e d8                	mov    %eax,%ds
     756:	e8 3d 0e 1f c9       	call   c91f1598 <delay+0xc91e5248>
     75b:	fb                   	sti    
     75c:	cf                   	iret   

0000075d <_SetINT41h>:
     75d:	fa                   	cli    
     75e:	e8 a0 03 e8 11       	call   11e80b03 <delay+0x11e747b3>
     763:	04 b0                	add    $0xb0,%al
     765:	20 e6                	and    %ah,%dh
     767:	20 e6                	and    %ah,%dh
     769:	a0 fb cf fa c8       	mov    0xc8facffb,%al

0000076c <_SetINT2Ah>:
     76c:	fa                   	cli    
     76d:	c8 00 00 00          	enter  $0x0,$0x0
     771:	1e                   	push   %ds
     772:	66 67 8b 45 08       	mov    0x8(%di),%ax
     777:	66 50                	push   %ax
     779:	6a 00                	push   $0x0
     77b:	8c c8                	mov    %cs,%eax
     77d:	8e d8                	mov    %eax,%ds
     77f:	e8 a9 10 58 1f       	call   1f58182d <delay+0x1f5754dd>
     784:	c9                   	leave  
     785:	fb                   	sti    
     786:	cf                   	iret   

00000787 <_SetINT3Bh>:
     787:	fa                   	cli    
     788:	c8 00 00 00          	enter  $0x0,$0x0
     78c:	1e                   	push   %ds
     78d:	6a 00                	push   $0x0
     78f:	8c c8                	mov    %cs,%eax
     791:	8e d8                	mov    %eax,%ds
     793:	e8 62 11 1f c9       	call   c91f18fa <delay+0xc91e55aa>
     798:	fb                   	sti    
     799:	cf                   	iret   

0000079a <_SetINT3Ch>:
     79a:	fa                   	cli    
     79b:	c8 00 00 00          	enter  $0x0,$0x0
     79f:	1e                   	push   %ds
     7a0:	66 67 8b 45 08       	mov    0x8(%di),%ax
     7a5:	66 50                	push   %ax
     7a7:	6a 00                	push   $0x0
     7a9:	8c c8                	mov    %cs,%eax
     7ab:	8e d8                	mov    %eax,%ds
     7ad:	e8 9d 15 66 83       	call   83661d4f <delay+0x836559ff>
     7b2:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     7b5:	c9                   	leave  
     7b6:	fb                   	sti    
     7b7:	cf                   	iret   

000007b8 <_SetINT3Dh>:
     7b8:	fa                   	cli    
     7b9:	c8 00 00 00          	enter  $0x0,$0x0
     7bd:	1e                   	push   %ds
     7be:	66 67 8b 45 08       	mov    0x8(%di),%ax
     7c3:	66 50                	push   %ax
     7c5:	6a 00                	push   $0x0
     7c7:	8c c8                	mov    %cs,%eax
     7c9:	8e d8                	mov    %eax,%ds
     7cb:	e8 57 16 66 83       	call   83661e27 <delay+0x83655ad7>
     7d0:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     7d3:	c9                   	leave  
     7d4:	fb                   	sti    
     7d5:	cf                   	iret   

000007d6 <_SetINT3Eh>:
     7d6:	c8 00 00 00          	enter  $0x0,$0x0
     7da:	1e                   	push   %ds
     7db:	66 67 8b 45 08       	mov    0x8(%di),%ax
     7e0:	66 50                	push   %ax
     7e2:	6a 00                	push   $0x0
     7e4:	8c c8                	mov    %cs,%eax
     7e6:	8e d8                	mov    %eax,%ds
     7e8:	e8 74 16 66 83       	call   83661e61 <delay+0x83655b11>
     7ed:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     7f0:	c9                   	leave  
     7f1:	cf                   	iret   

000007f2 <_SetINT3Fh>:
     7f2:	c8 00 00 00          	enter  $0x0,$0x0
     7f6:	1e                   	push   %ds
     7f7:	66 67 8b 45 08       	mov    0x8(%di),%ax
     7fc:	66 50                	push   %ax
     7fe:	6a 00                	push   $0x0
     800:	8c c8                	mov    %cs,%eax
     802:	8e d8                	mov    %eax,%ds
     804:	e8 a4 17 66 83       	call   83661fad <delay+0x83655c5d>
     809:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     80c:	c9                   	leave  
     80d:	cf                   	iret   

0000080e <_initialInt>:
     80e:	c8 00 00 00          	enter  $0x0,$0x0
     812:	60                   	pusha  
     813:	06                   	push   %es
     814:	1e                   	push   %ds
     815:	8c c8                	mov    %cs,%eax
     817:	8e d8                	mov    %eax,%ds
     819:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     81e:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
     823:	00 f7                	add    %dh,%bh
     825:	e3 89                	jecxz  7b0 <_SetINT3Ch+0x16>
     827:	c7                   	(bad)  
     828:	b8 89 04 26 89       	mov    $0x89260489,%eax
     82d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     832:	45                   	inc    %ebp
     833:	02 1f                	add    (%edi),%bl
     835:	07                   	pop    %es
     836:	61                   	popa   
     837:	60                   	pusha  
     838:	06                   	push   %es
     839:	1e                   	push   %ds
     83a:	8c c8                	mov    %cs,%eax
     83c:	8e d8                	mov    %eax,%ds
     83e:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     843:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
     848:	00 f7                	add    %dh,%bh
     84a:	e3 89                	jecxz  7d5 <ddelay+0x5>
     84c:	c7                   	(bad)  
     84d:	b8 d8 05 26 89       	mov    $0x892605d8,%eax
     852:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     857:	45                   	inc    %ebp
     858:	02 1f                	add    (%edi),%bl
     85a:	07                   	pop    %es
     85b:	61                   	popa   
     85c:	60                   	pusha  
     85d:	06                   	push   %es
     85e:	1e                   	push   %ds
     85f:	8c c8                	mov    %cs,%eax
     861:	8e d8                	mov    %eax,%ds
     863:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     868:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
     86d:	00 f7                	add    %dh,%bh
     86f:	e3 89                	jecxz  7fa <_SetINT3Fh+0x8>
     871:	c7                   	(bad)  
     872:	b8 0e 06 26 89       	mov    $0x8926060e,%eax
     877:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     87c:	45                   	inc    %ebp
     87d:	02 1f                	add    (%edi),%bl
     87f:	07                   	pop    %es
     880:	61                   	popa   
     881:	60                   	pusha  
     882:	06                   	push   %es
     883:	1e                   	push   %ds
     884:	8c c8                	mov    %cs,%eax
     886:	8e d8                	mov    %eax,%ds
     888:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     88d:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
     892:	00 f7                	add    %dh,%bh
     894:	e3 89                	jecxz  81f <_initialInt+0x11>
     896:	c7                   	(bad)  
     897:	b8 44 06 26 89       	mov    $0x89260644,%eax
     89c:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8a1:	45                   	inc    %ebp
     8a2:	02 1f                	add    (%edi),%bl
     8a4:	07                   	pop    %es
     8a5:	61                   	popa   
     8a6:	60                   	pusha  
     8a7:	06                   	push   %es
     8a8:	1e                   	push   %ds
     8a9:	8c c8                	mov    %cs,%eax
     8ab:	8e d8                	mov    %eax,%ds
     8ad:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8b2:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
     8b7:	00 f7                	add    %dh,%bh
     8b9:	e3 89                	jecxz  844 <_initialInt+0x36>
     8bb:	c7                   	(bad)  
     8bc:	b8 74 06 26 89       	mov    $0x89260674,%eax
     8c1:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8c6:	45                   	inc    %ebp
     8c7:	02 1f                	add    (%edi),%bl
     8c9:	07                   	pop    %es
     8ca:	61                   	popa   
     8cb:	60                   	pusha  
     8cc:	06                   	push   %es
     8cd:	1e                   	push   %ds
     8ce:	8c c8                	mov    %cs,%eax
     8d0:	8e d8                	mov    %eax,%ds
     8d2:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8d7:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
     8dc:	00 f7                	add    %dh,%bh
     8de:	e3 89                	jecxz  869 <_initialInt+0x5b>
     8e0:	c7                   	(bad)  
     8e1:	b8 a4 06 26 89       	mov    $0x892606a4,%eax
     8e6:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8eb:	45                   	inc    %ebp
     8ec:	02 1f                	add    (%edi),%bl
     8ee:	07                   	pop    %es
     8ef:	61                   	popa   
     8f0:	60                   	pusha  
     8f1:	06                   	push   %es
     8f2:	1e                   	push   %ds
     8f3:	8c c8                	mov    %cs,%eax
     8f5:	8e d8                	mov    %eax,%ds
     8f7:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8fc:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
     901:	00 f7                	add    %dh,%bh
     903:	e3 89                	jecxz  88e <_initialInt+0x80>
     905:	c7                   	(bad)  
     906:	b8 35 07 26 89       	mov    $0x89260735,%eax
     90b:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     910:	45                   	inc    %ebp
     911:	02 1f                	add    (%edi),%bl
     913:	07                   	pop    %es
     914:	61                   	popa   
     915:	60                   	pusha  
     916:	06                   	push   %es
     917:	1e                   	push   %ds
     918:	8c c8                	mov    %cs,%eax
     91a:	8e d8                	mov    %eax,%ds
     91c:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     921:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
     926:	00 f7                	add    %dh,%bh
     928:	e3 89                	jecxz  8b3 <_initialInt+0xa5>
     92a:	c7                   	(bad)  
     92b:	b8 3a 07 26 89       	mov    $0x8926073a,%eax
     930:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     935:	45                   	inc    %ebp
     936:	02 1f                	add    (%edi),%bl
     938:	07                   	pop    %es
     939:	61                   	popa   
     93a:	60                   	pusha  
     93b:	06                   	push   %es
     93c:	1e                   	push   %ds
     93d:	8c c8                	mov    %cs,%eax
     93f:	8e d8                	mov    %eax,%ds
     941:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     946:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
     94b:	00 f7                	add    %dh,%bh
     94d:	e3 89                	jecxz  8d8 <_initialInt+0xca>
     94f:	c7                   	(bad)  
     950:	b8 4a 07 26 89       	mov    $0x8926074a,%eax
     955:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     95a:	45                   	inc    %ebp
     95b:	02 1f                	add    (%edi),%bl
     95d:	07                   	pop    %es
     95e:	61                   	popa   
     95f:	60                   	pusha  
     960:	06                   	push   %es
     961:	1e                   	push   %ds
     962:	8c c8                	mov    %cs,%eax
     964:	8e d8                	mov    %eax,%ds
     966:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     96b:	b8 2a 00 bb 04       	mov    $0x4bb002a,%eax
     970:	00 f7                	add    %dh,%bh
     972:	e3 89                	jecxz  8fd <_initialInt+0xef>
     974:	c7                   	(bad)  
     975:	b8 6c 07 26 89       	mov    $0x8926076c,%eax
     97a:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     97f:	45                   	inc    %ebp
     980:	02 1f                	add    (%edi),%bl
     982:	07                   	pop    %es
     983:	61                   	popa   
     984:	60                   	pusha  
     985:	06                   	push   %es
     986:	1e                   	push   %ds
     987:	8c c8                	mov    %cs,%eax
     989:	8e d8                	mov    %eax,%ds
     98b:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     990:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
     995:	00 f7                	add    %dh,%bh
     997:	e3 89                	jecxz  922 <_initialInt+0x114>
     999:	c7                   	(bad)  
     99a:	b8 5d 07 26 89       	mov    $0x8926075d,%eax
     99f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9a4:	45                   	inc    %ebp
     9a5:	02 1f                	add    (%edi),%bl
     9a7:	07                   	pop    %es
     9a8:	61                   	popa   
     9a9:	60                   	pusha  
     9aa:	06                   	push   %es
     9ab:	1e                   	push   %ds
     9ac:	8c c8                	mov    %cs,%eax
     9ae:	8e d8                	mov    %eax,%ds
     9b0:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     9b5:	b8 23 00 bb 04       	mov    $0x4bb0023,%eax
     9ba:	00 f7                	add    %dh,%bh
     9bc:	e3 89                	jecxz  947 <_initialInt+0x139>
     9be:	c7                   	(bad)  
     9bf:	b8 c5 04 26 89       	mov    $0x892604c5,%eax
     9c4:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9c9:	45                   	inc    %ebp
     9ca:	02 1f                	add    (%edi),%bl
     9cc:	07                   	pop    %es
     9cd:	61                   	popa   
     9ce:	60                   	pusha  
     9cf:	06                   	push   %es
     9d0:	1e                   	push   %ds
     9d1:	8c c8                	mov    %cs,%eax
     9d3:	8e d8                	mov    %eax,%ds
     9d5:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     9da:	b8 3b 00 bb 04       	mov    $0x4bb003b,%eax
     9df:	00 f7                	add    %dh,%bh
     9e1:	e3 89                	jecxz  96c <_initialInt+0x15e>
     9e3:	c7                   	(bad)  
     9e4:	b8 87 07 26 89       	mov    $0x89260787,%eax
     9e9:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9ee:	45                   	inc    %ebp
     9ef:	02 1f                	add    (%edi),%bl
     9f1:	07                   	pop    %es
     9f2:	61                   	popa   
     9f3:	60                   	pusha  
     9f4:	06                   	push   %es
     9f5:	1e                   	push   %ds
     9f6:	8c c8                	mov    %cs,%eax
     9f8:	8e d8                	mov    %eax,%ds
     9fa:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     9ff:	b8 3c 00 bb 04       	mov    $0x4bb003c,%eax
     a04:	00 f7                	add    %dh,%bh
     a06:	e3 89                	jecxz  991 <_initialInt+0x183>
     a08:	c7                   	(bad)  
     a09:	b8 9a 07 26 89       	mov    $0x8926079a,%eax
     a0e:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a13:	45                   	inc    %ebp
     a14:	02 1f                	add    (%edi),%bl
     a16:	07                   	pop    %es
     a17:	61                   	popa   
     a18:	60                   	pusha  
     a19:	06                   	push   %es
     a1a:	1e                   	push   %ds
     a1b:	8c c8                	mov    %cs,%eax
     a1d:	8e d8                	mov    %eax,%ds
     a1f:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a24:	b8 3d 00 bb 04       	mov    $0x4bb003d,%eax
     a29:	00 f7                	add    %dh,%bh
     a2b:	e3 89                	jecxz  9b6 <_initialInt+0x1a8>
     a2d:	c7                   	(bad)  
     a2e:	b8 b8 07 26 89       	mov    $0x892607b8,%eax
     a33:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a38:	45                   	inc    %ebp
     a39:	02 1f                	add    (%edi),%bl
     a3b:	07                   	pop    %es
     a3c:	61                   	popa   
     a3d:	60                   	pusha  
     a3e:	06                   	push   %es
     a3f:	1e                   	push   %ds
     a40:	8c c8                	mov    %cs,%eax
     a42:	8e d8                	mov    %eax,%ds
     a44:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a49:	b8 3e 00 bb 04       	mov    $0x4bb003e,%eax
     a4e:	00 f7                	add    %dh,%bh
     a50:	e3 89                	jecxz  9db <_initialInt+0x1cd>
     a52:	c7                   	(bad)  
     a53:	b8 d6 07 26 89       	mov    $0x892607d6,%eax
     a58:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a5d:	45                   	inc    %ebp
     a5e:	02 1f                	add    (%edi),%bl
     a60:	07                   	pop    %es
     a61:	61                   	popa   
     a62:	60                   	pusha  
     a63:	06                   	push   %es
     a64:	1e                   	push   %ds
     a65:	8c c8                	mov    %cs,%eax
     a67:	8e d8                	mov    %eax,%ds
     a69:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a6e:	b8 3f 00 bb 04       	mov    $0x4bb003f,%eax
     a73:	00 f7                	add    %dh,%bh
     a75:	e3 89                	jecxz  a00 <_initialInt+0x1f2>
     a77:	c7                   	(bad)  
     a78:	b8 f2 07 26 89       	mov    $0x892607f2,%eax
     a7d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a82:	45                   	inc    %ebp
     a83:	02 1f                	add    (%edi),%bl
     a85:	07                   	pop    %es
     a86:	61                   	popa   
     a87:	c9                   	leave  
     a88:	66 5a                	pop    %dx
     a8a:	ff e2                	jmp    *%edx

00000a8c <_initialInt_09h>:
     a8c:	c8 00 00 00          	enter  $0x0,$0x0
     a90:	a1 24 00 a3 b2       	mov    0xb2a30024,%eax
     a95:	02 a1 26 00 a3 b4    	add    -0x4b5cffda(%ecx),%ah
     a9b:	02 60 06             	add    0x6(%eax),%ah
     a9e:	1e                   	push   %ds
     a9f:	8c c8                	mov    %cs,%eax
     aa1:	8e d8                	mov    %eax,%ds
     aa3:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     aa8:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
     aad:	00 f7                	add    %dh,%bh
     aaf:	e3 89                	jecxz  a3a <BOOTSEG+0x2a>
     ab1:	c7                   	(bad)  
     ab2:	b8 4a 05 26 89       	mov    $0x8926054a,%eax
     ab7:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     abc:	45                   	inc    %ebp
     abd:	02 1f                	add    (%edi),%bl
     abf:	07                   	pop    %es
     ac0:	61                   	popa   
     ac1:	c9                   	leave  
     ac2:	66 5a                	pop    %dx
     ac4:	ff e2                	jmp    *%edx

00000ac6 <_initialInt_08h>:
     ac6:	c8 00 00 00          	enter  $0x0,$0x0
     aca:	b0 40                	mov    $0x40,%al
     acc:	e6 43                	out    %al,$0x43
     ace:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
     ad3:	88 e0                	mov    %ah,%al
     ad5:	e6 40                	out    %al,$0x40
     ad7:	60                   	pusha  
     ad8:	06                   	push   %es
     ad9:	1e                   	push   %ds
     ada:	8c c8                	mov    %cs,%eax
     adc:	8e d8                	mov    %eax,%ds
     ade:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     ae3:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
     ae8:	00 f7                	add    %dh,%bh
     aea:	e3 89                	jecxz  a75 <BOOTSEG+0x65>
     aec:	c7                   	(bad)  
     aed:	b8 c5 04 26 89       	mov    $0x892604c5,%eax
     af2:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     af7:	45                   	inc    %ebp
     af8:	02 1f                	add    (%edi),%bl
     afa:	07                   	pop    %es
     afb:	61                   	popa   
     afc:	c9                   	leave  
     afd:	66 5a                	pop    %dx
     aff:	ff e2                	jmp    *%edx

00000b01 <_save>:
     b01:	66 89 26             	mov    %sp,(%esi)
     b04:	ca 02 1e             	lret   $0x1e02
     b07:	0e                   	push   %cs
     b08:	1f                   	pop    %ds
     b09:	8f 06                	popl   (%esi)
     b0b:	ba 02 8f 06 be       	mov    $0xbe068f02,%edx
     b10:	02 66 89             	add    -0x77(%esi),%ah
     b13:	26 c6 02 66          	movb   $0x66,%es:(%edx)
     b17:	89 36                	mov    %esi,(%esi)
     b19:	c0 02 66             	rolb   $0x66,(%edx)
     b1c:	8b 36                	mov    (%esi),%esi
     b1e:	84 36                	test   %dh,(%esi)
     b20:	66 83 c6 2c          	add    $0x2c,%si
     b24:	67 8f 06 67 8f       	popl   -0x7099
     b29:	46                   	inc    %esi
     b2a:	04 67                	add    $0x67,%al
     b2c:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
     b33:	46                   	inc    %esi
     b34:	08 67 c7             	or     %ah,-0x39(%edi)
     b37:	46                   	inc    %esi
     b38:	0a 00                	or     (%eax),%al
     b3a:	00 66 67             	add    %ah,0x67(%esi)
     b3d:	89 66 fc             	mov    %esp,-0x4(%esi)
     b40:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
     b44:	8c de                	mov    %ds,%esi
     b46:	8e d6                	mov    %esi,%ss
     b48:	66 8b 26             	mov    (%esi),%sp
     b4b:	84 36                	test   %dh,(%esi)
     b4d:	66 83 c4 24          	add    $0x24,%sp
     b51:	6a 00                	push   $0x0
     b53:	ff 36                	pushl  (%esi)
     b55:	ba 02 6a 00 06       	mov    $0x6006a02,%edx
     b5a:	66 55                	push   %bp
     b5c:	66 57                	push   %di
     b5e:	66 ff 36             	pushw  (%esi)
     b61:	c0 02 66             	rolb   $0x66,(%edx)
     b64:	52                   	push   %edx
     b65:	66 51                	push   %cx
     b67:	66 53                	push   %bx
     b69:	66 50                	push   %ax
     b6b:	66 8b 26             	mov    (%esi),%sp
     b6e:	c6 02 a1             	movb   $0xa1,(%edx)
     b71:	be 02 ff e0 66       	mov    $0x66e0ff02,%esi

00000b75 <_restart>:
     b75:	66 89 26             	mov    %sp,(%esi)
     b78:	c6 02 66             	movb   $0x66,(%edx)
     b7b:	8b 26                	mov    (%esi),%esp
     b7d:	84 36                	test   %dh,(%esi)
     b7f:	66 58                	pop    %ax
     b81:	66 5b                	pop    %bx
     b83:	66 59                	pop    %cx
     b85:	66 5a                	pop    %dx
     b87:	66 5e                	pop    %si
     b89:	66 5f                	pop    %di
     b8b:	66 5d                	pop    %bp
     b8d:	07                   	pop    %es
     b8e:	8f 06                	popl   (%esi)
     b90:	c4 02                	les    (%edx),%eax
     b92:	8f 06                	popl   (%esi)
     b94:	ba 02 8f 06 c4       	mov    $0xc4068f02,%edx
     b99:	02 66 89             	add    -0x77(%esi),%ah
     b9c:	36 c0 02 17          	rolb   $0x17,%ss:(%edx)
     ba0:	8f 06                	popl   (%esi)
     ba2:	c4 02                	les    (%edx),%eax
     ba4:	66 89 e6             	mov    %sp,%si
     ba7:	66 67 8b 26 67 ff    	mov    -0x99,%sp
     bad:	76 0c                	jbe    bbb <_restart+0x46>
     baf:	67 ff 76 08          	pushl  0x8(%bp)
     bb3:	67 ff 76 04          	pushl  0x4(%bp)
     bb7:	66 8b 36             	mov    (%esi),%si
     bba:	c0 02 8e             	rolb   $0x8e,(%edx)
     bbd:	1e                   	push   %ds
     bbe:	ba 02 50 b0 20       	mov    $0x20b05002,%edx
     bc3:	e6 20                	out    %al,$0x20
     bc5:	e6 a0                	out    %al,$0xa0
     bc7:	58                   	pop    %eax
     bc8:	cf                   	iret   

00000bc9 <RTC_Timer>:
     bc9:	c8 00 00 00          	enter  $0x0,$0x0
     bcd:	1e                   	push   %ds
     bce:	06                   	push   %es
     bcf:	60                   	pusha  
     bd0:	8c c8                	mov    %cs,%eax
     bd2:	8e d8                	mov    %eax,%ds
     bd4:	8c c8                	mov    %cs,%eax
     bd6:	8e c0                	mov    %eax,%es
     bd8:	bf 40 30 b4 02       	mov    $0x2b43040,%edi
     bdd:	cd 1a                	int    $0x1a
     bdf:	88 e8                	mov    %ch,%al
     be1:	b4 00                	mov    $0x0,%ah
     be3:	b3 10                	mov    $0x10,%bl
     be5:	f6 f3                	div    %bl
     be7:	04 30                	add    $0x30,%al
     be9:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
     bef:	88 e8                	mov    %ch,%al
     bf1:	24 0f                	and    $0xf,%al
     bf3:	04 30                	add    $0x30,%al
     bf5:	88 45 01             	mov    %al,0x1(%ebp)
     bf8:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
     bfc:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
     c00:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
     c04:	b4 02                	mov    $0x2,%ah
     c06:	cd 1a                	int    $0x1a
     c08:	88 c8                	mov    %cl,%al
     c0a:	b4 00                	mov    $0x0,%ah
     c0c:	b3 10                	mov    $0x10,%bl
     c0e:	f6 f3                	div    %bl
     c10:	04 30                	add    $0x30,%al
     c12:	88 45 05             	mov    %al,0x5(%ebp)
     c15:	b4 02                	mov    $0x2,%ah
     c17:	cd 1a                	int    $0x1a
     c19:	88 c8                	mov    %cl,%al
     c1b:	24 0f                	and    $0xf,%al
     c1d:	04 30                	add    $0x30,%al
     c1f:	88 45 06             	mov    %al,0x6(%ebp)
     c22:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
     c26:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
     c2a:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
     c2e:	8c c8                	mov    %cs,%eax
     c30:	8e d8                	mov    %eax,%ds
     c32:	8e c0                	mov    %eax,%es
     c34:	bd df 02 8c d8       	mov    $0xd88c02df,%ebp
     c39:	8e c0                	mov    %eax,%es
     c3b:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
     c40:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     c46:	b2 0a                	mov    $0xa,%dl
     c48:	cd 10                	int    $0x10
     c4a:	8c c8                	mov    %cs,%eax
     c4c:	8e d8                	mov    %eax,%ds
     c4e:	8e c0                	mov    %eax,%es
     c50:	bd 40 30 8c d8       	mov    $0xd88c3040,%ebp
     c55:	8e c0                	mov    %eax,%es
     c57:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
     c5c:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     c62:	b2 1e                	mov    $0x1e,%dl
     c64:	cd 10                	int    $0x10
     c66:	61                   	popa   
     c67:	07                   	pop    %es
     c68:	1f                   	pop    %ds
     c69:	c9                   	leave  
     c6a:	66 5a                	pop    %dx
     c6c:	ff e2                	jmp    *%edx

00000c6e <_Get_Hours_1>:
     c6e:	c8 04 00 00          	enter  $0x4,$0x0
     c72:	b4 02                	mov    $0x2,%ah
     c74:	cd 1a                	int    $0x1a
     c76:	88 e8                	mov    %ch,%al
     c78:	b4 00                	mov    $0x0,%ah
     c7a:	b3 10                	mov    $0x10,%bl
     c7c:	f6 f3                	div    %bl
     c7e:	30 e4                	xor    %ah,%ah
     c80:	66 67 89 04          	mov    %ax,(%si)
     c84:	24 66                	and    $0x66,%al
     c86:	67 8b 04             	mov    (%si),%eax
     c89:	24 c9                	and    $0xc9,%al
     c8b:	66 5a                	pop    %dx
     c8d:	ff e2                	jmp    *%edx

00000c8f <_Get_Hours_2>:
     c8f:	c8 04 00 00          	enter  $0x4,$0x0
     c93:	b4 02                	mov    $0x2,%ah
     c95:	cd 1a                	int    $0x1a
     c97:	88 e8                	mov    %ch,%al
     c99:	24 0f                	and    $0xf,%al
     c9b:	30 e4                	xor    %ah,%ah
     c9d:	66 67 89 04          	mov    %ax,(%si)
     ca1:	24 66                	and    $0x66,%al
     ca3:	67 8b 04             	mov    (%si),%eax
     ca6:	24 c9                	and    $0xc9,%al
     ca8:	66 5a                	pop    %dx
     caa:	ff e2                	jmp    *%edx

00000cac <_Get_Minutes_1>:
     cac:	c8 04 00 00          	enter  $0x4,$0x0
     cb0:	b4 02                	mov    $0x2,%ah
     cb2:	cd 1a                	int    $0x1a
     cb4:	88 c8                	mov    %cl,%al
     cb6:	b4 00                	mov    $0x0,%ah
     cb8:	b3 10                	mov    $0x10,%bl
     cba:	f6 f3                	div    %bl
     cbc:	30 e4                	xor    %ah,%ah
     cbe:	66 67 89 04          	mov    %ax,(%si)
     cc2:	24 66                	and    $0x66,%al
     cc4:	67 8b 04             	mov    (%si),%eax
     cc7:	24 c9                	and    $0xc9,%al
     cc9:	66 5a                	pop    %dx
     ccb:	ff e2                	jmp    *%edx

00000ccd <_Get_Minutes_2>:
     ccd:	c8 04 00 00          	enter  $0x4,$0x0
     cd1:	b4 02                	mov    $0x2,%ah
     cd3:	cd 1a                	int    $0x1a
     cd5:	88 c8                	mov    %cl,%al
     cd7:	24 0f                	and    $0xf,%al
     cd9:	30 e4                	xor    %ah,%ah
     cdb:	66 67 89 04          	mov    %ax,(%si)
     cdf:	24 66                	and    $0x66,%al
     ce1:	67 8b 04             	mov    (%si),%eax
     ce4:	24 c9                	and    $0xc9,%al
     ce6:	66 5a                	pop    %dx
     ce8:	ff e2                	jmp    *%edx

00000cea <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
     cea:	66 55                	push   %bp
     cec:	66 89 e5             	mov    %sp,%bp
     cef:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
     cf3:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     cf8:	66 89 d0             	mov    %dx,%ax
     cfb:	66 c1 e0 02          	shl    $0x2,%ax
     cff:	66 01 d0             	add    %dx,%ax
     d02:	66 c1 e0 04          	shl    $0x4,%ax
     d06:	66 89 c2             	mov    %ax,%dx
     d09:	67 66 8b 45 10       	mov    0x10(%di),%ax
     d0e:	66 01 d0             	add    %dx,%ax
     d11:	66 01 c0             	add    %ax,%ax
     d14:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
     d19:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     d20:	00 00                	add    %al,(%eax)
	int index = 0;
     d22:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     d29:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     d2b:	eb 35                	jmp    d62 <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
     d2d:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     d32:	67 66 8b 45 08       	mov    0x8(%di),%ax
     d37:	66 01 d0             	add    %dx,%ax
     d3a:	67 8a 00             	mov    (%bx,%si),%al
     d3d:	66 0f be c0          	movsbw %al,%ax
     d41:	67 66 ff 75 f4       	pushw  -0xc(%di)
     d46:	67 66 ff 75 fc       	pushw  -0x4(%di)
     d4b:	66 50                	push   %ax
     d4d:	66 e8 ca f5          	callw  31b <_clearscreen+0x7>
     d51:	ff                   	(bad)  
     d52:	ff 66 83             	jmp    *-0x7d(%esi)
     d55:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     d58:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     d5c:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
     d62:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     d67:	67 66 8b 45 08       	mov    0x8(%di),%ax
     d6c:	66 01 d0             	add    %dx,%ax
     d6f:	67 8a 00             	mov    (%bx,%si),%al
     d72:	84 c0                	test   %al,%al
     d74:	75 b7                	jne    d2d <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     d76:	90                   	nop
}
     d77:	66 c9                	leavew 
     d79:	66 c3                	retw   

00000d7b <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
     d7b:	66 55                	push   %bp
     d7d:	66 89 e5             	mov    %sp,%bp
     d80:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
     d84:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     d89:	66 89 d0             	mov    %dx,%ax
     d8c:	66 c1 e0 02          	shl    $0x2,%ax
     d90:	66 01 d0             	add    %dx,%ax
     d93:	66 c1 e0 04          	shl    $0x4,%ax
     d97:	66 89 c2             	mov    %ax,%dx
     d9a:	67 66 8b 45 10       	mov    0x10(%di),%ax
     d9f:	66 01 d0             	add    %dx,%ax
     da2:	66 01 c0             	add    %ax,%ax
     da5:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
     daa:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     db1:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     db3:	eb 35                	jmp    dea <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
     db5:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     dba:	67 66 8b 45 08       	mov    0x8(%di),%ax
     dbf:	66 01 d0             	add    %dx,%ax
     dc2:	67 8a 00             	mov    (%bx,%si),%al
     dc5:	66 0f be c0          	movsbw %al,%ax
     dc9:	67 66 ff 75 14       	pushw  0x14(%di)
     dce:	67 66 ff 75 fc       	pushw  -0x4(%di)
     dd3:	66 50                	push   %ax
     dd5:	66 e8 42 f5          	callw  31b <_clearscreen+0x7>
     dd9:	ff                   	(bad)  
     dda:	ff 66 83             	jmp    *-0x7d(%esi)
     ddd:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     de0:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     de4:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
     dea:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     def:	67 66 8b 45 08       	mov    0x8(%di),%ax
     df4:	66 01 d0             	add    %dx,%ax
     df7:	67 8a 00             	mov    (%bx,%si),%al
     dfa:	84 c0                	test   %al,%al
     dfc:	75 b7                	jne    db5 <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     dfe:	90                   	nop
}
     dff:	66 c9                	leavew 
     e01:	66 c3                	retw   

00000e03 <sys_showline>:
void sys_showline(){
     e03:	66 55                	push   %bp
     e05:	66 89 e5             	mov    %sp,%bp
     e08:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
     e0c:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
     e11:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
     e16:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
     e1b:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
     e20:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
     e25:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
     e2a:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
     e2f:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     e36:	00 00                	add    %al,(%eax)
    int i = 0;
     e38:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     e3f:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
     e41:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     e48:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
     e4a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     e51:	00 00                	add    %al,(%eax)
     e53:	eb 52                	jmp    ea7 <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
     e55:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     e5a:	66 89 d0             	mov    %dx,%ax
     e5d:	66 c1 e0 03          	shl    $0x3,%ax
     e61:	66 01 d0             	add    %dx,%ax
     e64:	67 66 8d 14          	lea    (%si),%dx
     e68:	c5 00                	lds    (%eax),%eax
     e6a:	00 00                	add    %al,(%eax)
     e6c:	00 66 01             	add    %ah,0x1(%esi)
     e6f:	d0 66 01             	shlb   0x1(%esi)
     e72:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
     e76:	45                   	inc    %ebp
     e77:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
     e7d:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     e82:	66 01 d0             	add    %dx,%ax
     e85:	67 8a 00             	mov    (%bx,%si),%al
     e88:	66 0f be c0          	movsbw %al,%ax
     e8c:	67 66 ff 75 f4       	pushw  -0xc(%di)
     e91:	67 66 ff 75 f0       	pushw  -0x10(%di)
     e96:	66 50                	push   %ax
     e98:	66 e8 7f f4          	callw  31b <_clearscreen+0x7>
     e9c:	ff                   	(bad)  
     e9d:	ff 66 83             	jmp    *-0x7d(%esi)
     ea0:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
     ea3:	66 ff 45 fc          	incw   -0x4(%ebp)
     ea7:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
     ead:	7e a6                	jle    e55 <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
     eaf:	66 c9                	leavew 
     eb1:	66 c3                	retw   

00000eb3 <sys_printname>:

void sys_printname(){
     eb3:	66 55                	push   %bp
     eb5:	66 89 e5             	mov    %sp,%bp
     eb8:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
     ebc:	67 66 c7 45 fc 94 21 	movw   $0x2194,-0x4(%di)
     ec3:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
     ec5:	67 66 c7 45 f8 d8 21 	movw   $0x21d8,-0x8(%di)
     ecc:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
     ece:	67 66 c7 45 f4 1c 22 	movw   $0x221c,-0xc(%di)
     ed5:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
     ed7:	67 66 c7 45 f0 60 22 	movw   $0x2260,-0x10(%di)
     ede:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
     ee0:	67 66 c7 45 ec a4 22 	movw   $0x22a4,-0x14(%di)
     ee7:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
     ee9:	67 66 c7 45 e8 e8 22 	movw   $0x22e8,-0x18(%di)
     ef0:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
     ef2:	67 66 c7 45 e4 2c 23 	movw   $0x232c,-0x1c(%di)
     ef9:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
     efb:	66 6a 0b             	pushw  $0xb
     efe:	66 6a 10             	pushw  $0x10
     f01:	67 66 ff 75 fc       	pushw  -0x4(%di)
     f06:	66 e8 de fd          	callw  ce8 <_Get_Minutes_2+0x1b>
     f0a:	ff                   	(bad)  
     f0b:	ff 66 83             	jmp    *-0x7d(%esi)
     f0e:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
     f11:	6a 0b                	push   $0xb
     f13:	66 6a 11             	pushw  $0x11
     f16:	67 66 ff 75 f8       	pushw  -0x8(%di)
     f1b:	66 e8 c9 fd          	callw  ce8 <_Get_Minutes_2+0x1b>
     f1f:	ff                   	(bad)  
     f20:	ff 66 83             	jmp    *-0x7d(%esi)
     f23:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
     f26:	6a 0b                	push   $0xb
     f28:	66 6a 12             	pushw  $0x12
     f2b:	67 66 ff 75 f4       	pushw  -0xc(%di)
     f30:	66 e8 b4 fd          	callw  ce8 <_Get_Minutes_2+0x1b>
     f34:	ff                   	(bad)  
     f35:	ff 66 83             	jmp    *-0x7d(%esi)
     f38:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
     f3b:	6a 0b                	push   $0xb
     f3d:	66 6a 13             	pushw  $0x13
     f40:	67 66 ff 75 f0       	pushw  -0x10(%di)
     f45:	66 e8 9f fd          	callw  ce8 <_Get_Minutes_2+0x1b>
     f49:	ff                   	(bad)  
     f4a:	ff 66 83             	jmp    *-0x7d(%esi)
     f4d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
     f50:	6a 0b                	push   $0xb
     f52:	66 6a 14             	pushw  $0x14
     f55:	67 66 ff 75 ec       	pushw  -0x14(%di)
     f5a:	66 e8 8a fd          	callw  ce8 <_Get_Minutes_2+0x1b>
     f5e:	ff                   	(bad)  
     f5f:	ff 66 83             	jmp    *-0x7d(%esi)
     f62:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
     f65:	6a 0b                	push   $0xb
     f67:	66 6a 15             	pushw  $0x15
     f6a:	67 66 ff 75 e8       	pushw  -0x18(%di)
     f6f:	66 e8 75 fd          	callw  ce8 <_Get_Minutes_2+0x1b>
     f73:	ff                   	(bad)  
     f74:	ff 66 83             	jmp    *-0x7d(%esi)
     f77:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
     f7a:	6a 0b                	push   $0xb
     f7c:	66 6a 16             	pushw  $0x16
     f7f:	67 66 ff 75 e4       	pushw  -0x1c(%di)
     f84:	66 e8 60 fd          	callw  ce8 <_Get_Minutes_2+0x1b>
     f88:	ff                   	(bad)  
     f89:	ff 66 83             	jmp    *-0x7d(%esi)
     f8c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
     f8f:	c9                   	leave  
     f90:	66 c3                	retw   

00000f92 <sys_printpoem>:
void sys_printpoem(){
     f92:	66 55                	push   %bp
     f94:	66 89 e5             	mov    %sp,%bp
     f97:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
     f9b:	67 66 c7 45 f8 70 23 	movw   $0x2370,-0x8(%di)
     fa2:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
     fa4:	67 66 c7 45 f4 82 23 	movw   $0x2382,-0xc(%di)
     fab:	00 00                	add    %al,(%eax)
    int i = 1;
     fad:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     fb4:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
     fb6:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     fbd:	00 00                	add    %al,(%eax)
     fbf:	eb 4b                	jmp    100c <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
     fc1:	67 66 ff 75 fc       	pushw  -0x4(%di)
     fc6:	66 6a 0a             	pushw  $0xa
     fc9:	66 6a 0f             	pushw  $0xf
     fcc:	67 66 ff 75 f8       	pushw  -0x8(%di)
     fd1:	66 e8 a4 fd          	callw  d79 <sys_print_for_heart+0x8f>
     fd5:	ff                   	(bad)  
     fd6:	ff 66 83             	jmp    *-0x7d(%esi)
     fd9:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
     fdb:	67 66 ff 75 fc       	pushw  -0x4(%di)
     fe0:	66 6a 0a             	pushw  $0xa
     fe3:	66 6a 10             	pushw  $0x10
     fe6:	67 66 ff 75 f4       	pushw  -0xc(%di)
     feb:	66 e8 8a fd          	callw  d79 <sys_print_for_heart+0x8f>
     fef:	ff                   	(bad)  
     ff0:	ff 66 83             	jmp    *-0x7d(%esi)
     ff3:	c4 10                	les    (%eax),%edx
        int j = 0;
     ff5:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     ffc:	00 00                	add    %al,(%eax)
        int k = 0;
     ffe:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    1005:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
    1007:	67 66 ff 45 fc       	incw   -0x4(%di)
    100c:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    1012:	7e ad                	jle    fc1 <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
    1014:	66 c9                	leavew 
    1016:	66 c3                	retw   

00001018 <sys_printheart>:
void sys_printheart(){
    1018:	66 55                	push   %bp
    101a:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
    101d:	66 6a 28             	pushw  $0x28
    1020:	66 6a 00             	pushw  $0x0
    1023:	66 68 8b 23          	pushw  $0x238b
    1027:	00 00                	add    %al,(%eax)
    1029:	66 e8 bb fc          	callw  ce8 <_Get_Minutes_2+0x1b>
    102d:	ff                   	(bad)  
    102e:	ff 66 83             	jmp    *-0x7d(%esi)
    1031:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
    1034:	6a 28                	push   $0x28
    1036:	66 6a 01             	pushw  $0x1
    1039:	66 68 a3 23          	pushw  $0x23a3
    103d:	00 00                	add    %al,(%eax)
    103f:	66 e8 a5 fc          	callw  ce8 <_Get_Minutes_2+0x1b>
    1043:	ff                   	(bad)  
    1044:	ff 66 83             	jmp    *-0x7d(%esi)
    1047:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
    104a:	6a 28                	push   $0x28
    104c:	66 6a 02             	pushw  $0x2
    104f:	66 68 bc 23          	pushw  $0x23bc
    1053:	00 00                	add    %al,(%eax)
    1055:	66 e8 8f fc          	callw  ce8 <_Get_Minutes_2+0x1b>
    1059:	ff                   	(bad)  
    105a:	ff 66 83             	jmp    *-0x7d(%esi)
    105d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
    1060:	6a 28                	push   $0x28
    1062:	66 6a 03             	pushw  $0x3
    1065:	66 68 d7 23          	pushw  $0x23d7
    1069:	00 00                	add    %al,(%eax)
    106b:	66 e8 79 fc          	callw  ce8 <_Get_Minutes_2+0x1b>
    106f:	ff                   	(bad)  
    1070:	ff 66 83             	jmp    *-0x7d(%esi)
    1073:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
    1076:	6a 28                	push   $0x28
    1078:	66 6a 04             	pushw  $0x4
    107b:	66 68 f0 23          	pushw  $0x23f0
    107f:	00 00                	add    %al,(%eax)
    1081:	66 e8 63 fc          	callw  ce8 <_Get_Minutes_2+0x1b>
    1085:	ff                   	(bad)  
    1086:	ff 66 83             	jmp    *-0x7d(%esi)
    1089:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
    108c:	6a 28                	push   $0x28
    108e:	66 6a 05             	pushw  $0x5
    1091:	66 68 08 24          	pushw  $0x2408
    1095:	00 00                	add    %al,(%eax)
    1097:	66 e8 4d fc          	callw  ce8 <_Get_Minutes_2+0x1b>
    109b:	ff                   	(bad)  
    109c:	ff 66 83             	jmp    *-0x7d(%esi)
    109f:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
    10a2:	6a 28                	push   $0x28
    10a4:	66 6a 06             	pushw  $0x6
    10a7:	66 68 1f 24          	pushw  $0x241f
    10ab:	00 00                	add    %al,(%eax)
    10ad:	66 e8 37 fc          	callw  ce8 <_Get_Minutes_2+0x1b>
    10b1:	ff                   	(bad)  
    10b2:	ff 66 83             	jmp    *-0x7d(%esi)
    10b5:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
    10b8:	6a 28                	push   $0x28
    10ba:	66 6a 07             	pushw  $0x7
    10bd:	66 68 35 24          	pushw  $0x2435
    10c1:	00 00                	add    %al,(%eax)
    10c3:	66 e8 21 fc          	callw  ce8 <_Get_Minutes_2+0x1b>
    10c7:	ff                   	(bad)  
    10c8:	ff 66 83             	jmp    *-0x7d(%esi)
    10cb:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    10ce:	c9                   	leave  
    10cf:	66 c3                	retw   

000010d1 <initial_PCB>:
#include "schedule.h"
#include "use.h"

void initial_PCB(int index){
    10d1:	66 55                	push   %bp
    10d3:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    10d6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    10db:	66 40                	inc    %ax
    10dd:	66 c1 e0 0c          	shl    $0xc,%ax
    10e1:	66 89 c2             	mov    %ax,%dx
    10e4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    10e9:	66 c1 e0 02          	shl    $0x2,%ax
    10ed:	66 89 c1             	mov    %ax,%cx
    10f0:	66 c1 e1 04          	shl    $0x4,%cx
    10f4:	66 01 c8             	add    %cx,%ax
    10f7:	66 05 50 31          	add    $0x3150,%ax
    10fb:	00 00                	add    %al,(%eax)
    10fd:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    1101:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1106:	66 40                	inc    %ax
    1108:	66 c1 e0 0c          	shl    $0xc,%ax
    110c:	66 89 c2             	mov    %ax,%dx
    110f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1114:	66 c1 e0 02          	shl    $0x2,%ax
    1118:	66 89 c1             	mov    %ax,%cx
    111b:	66 c1 e1 04          	shl    $0x4,%cx
    111f:	66 01 c8             	add    %cx,%ax
    1122:	66 05 40 31          	add    $0x3140,%ax
    1126:	00 00                	add    %al,(%eax)
    1128:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
    112c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1131:	66 40                	inc    %ax
    1133:	66 c1 e0 0c          	shl    $0xc,%ax
    1137:	66 89 c2             	mov    %ax,%dx
    113a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    113f:	66 c1 e0 02          	shl    $0x2,%ax
    1143:	66 89 c1             	mov    %ax,%cx
    1146:	66 c1 e1 04          	shl    $0x4,%cx
    114a:	66 01 c8             	add    %cx,%ax
    114d:	66 05 40 31          	add    $0x3140,%ax
    1151:	00 00                	add    %al,(%eax)
    1153:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
    1158:	67 66 8b 45 08       	mov    0x8(%di),%ax
    115d:	66 c1 e0 02          	shl    $0x2,%ax
    1161:	66 89 c2             	mov    %ax,%dx
    1164:	66 c1 e2 04          	shl    $0x4,%dx
    1168:	66 01 d0             	add    %dx,%ax
    116b:	66 05 40 31          	add    $0x3140,%ax
    116f:	00 00                	add    %al,(%eax)
    1171:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
    1178:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
    117a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    117f:	66 c1 e0 02          	shl    $0x2,%ax
    1183:	66 89 c2             	mov    %ax,%dx
    1186:	66 c1 e2 04          	shl    $0x4,%dx
    118a:	66 01 d0             	add    %dx,%ax
    118d:	66 05 40 31          	add    $0x3140,%ax
    1191:	00 00                	add    %al,(%eax)
    1193:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    119a:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = READY;
    119c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    11a1:	66 c1 e0 02          	shl    $0x2,%ax
    11a5:	66 89 c2             	mov    %ax,%dx
    11a8:	66 c1 e2 04          	shl    $0x4,%dx
    11ac:	66 01 d0             	add    %dx,%ax
    11af:	66 05 50 31          	add    $0x3150,%ax
    11b3:	00 00                	add    %al,(%eax)
    11b5:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    11bc:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    11be:	67 66 ff 75 08       	pushw  0x8(%di)
    11c3:	66 68 20 47          	pushw  $0x4720
    11c7:	00 00                	add    %al,(%eax)
    11c9:	66 e8 89 09          	callw  1b56 <size+0x11>
    11cd:	00 00                	add    %al,(%eax)
    11cf:	66 83 c4 08          	add    $0x8,%sp
    PCB_list[index ].eflags = 512;
    11d3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    11d8:	66 c1 e0 02          	shl    $0x2,%ax
    11dc:	66 89 c2             	mov    %ax,%dx
    11df:	66 c1 e2 04          	shl    $0x4,%dx
    11e3:	66 01 d0             	add    %dx,%ax
    11e6:	66 05 50 31          	add    $0x3150,%ax
    11ea:	00 00                	add    %al,(%eax)
    11ec:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    11f3:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    11f5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    11fa:	66 c1 e0 02          	shl    $0x2,%ax
    11fe:	66 89 c2             	mov    %ax,%dx
    1201:	66 c1 e2 04          	shl    $0x4,%dx
    1205:	66 01 d0             	add    %dx,%ax
    1208:	67 66 8d 90 50 31    	lea    0x3150(%bx,%si),%dx
    120e:	00 00                	add    %al,(%eax)
    1210:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1215:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 0;
    121a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    121f:	66 c1 e0 02          	shl    $0x2,%ax
    1223:	66 89 c2             	mov    %ax,%dx
    1226:	66 c1 e2 04          	shl    $0x4,%dx
    122a:	66 01 d0             	add    %dx,%ax
    122d:	66 05 60 31          	add    $0x3160,%ax
    1231:	00 00                	add    %al,(%eax)
    1233:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1239:	00 00                	add    %al,(%eax)
}
    123b:	66 c9                	leavew 
    123d:	66 c3                	retw   

0000123f <Set_PCB>:
void Set_PCB(){
    123f:	66 55                	push   %bp
    1241:	66 89 e5             	mov    %sp,%bp
    1244:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    1248:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    124f:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    1251:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1258:	00 00                	add    %al,(%eax)
    125a:	eb 27                	jmp    1283 <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    125c:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1261:	66 c1 e0 02          	shl    $0x2,%ax
    1265:	66 89 c2             	mov    %ax,%dx
    1268:	66 c1 e2 04          	shl    $0x4,%dx
    126c:	66 01 d0             	add    %dx,%ax
    126f:	66 05 50 31          	add    $0x3150,%ax
    1273:	00 00                	add    %al,(%eax)
    1275:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    127c:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 0;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    127e:	67 66 ff 45 fc       	incw   -0x4(%di)
    1283:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    1289:	7e d1                	jle    125c <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    128b:	66 c9                	leavew 
    128d:	66 c3                	retw   

0000128f <sys_schedule>:
int sch_index;
int current_index ;
void sys_schedule(){
    128f:	66 55                	push   %bp
    1291:	66 89 e5             	mov    %sp,%bp
    int i,j;
    if(isempty(&readyqueue) != 1){
    1294:	66 68 20 47          	pushw  $0x4720
    1298:	00 00                	add    %al,(%eax)
    129a:	66 e8 88 08          	callw  1b26 <stack_copy+0x35>
    129e:	00 00                	add    %al,(%eax)
    12a0:	66 83 c4 04          	add    $0x4,%sp
    12a4:	66 83 f8 01          	cmp    $0x1,%ax
    12a8:	0f 84 e0 00 66 a1    	je     a166138e <delay+0xa165503e>
        current_index = _CurrentProg - PCB_list;
    12ae:	84 36                	test   %dh,(%esi)
    12b0:	66 89 c2             	mov    %ax,%dx
    12b3:	66 b8 20 31          	mov    $0x3120,%ax
    12b7:	00 00                	add    %al,(%eax)
    12b9:	66 29 c2             	sub    %ax,%dx
    12bc:	66 89 d0             	mov    %dx,%ax
    12bf:	66 c1 f8 02          	sar    $0x2,%ax
    12c3:	66 89 c2             	mov    %ax,%dx
    12c6:	66 89 d0             	mov    %dx,%ax
    12c9:	66 01 c0             	add    %ax,%ax
    12cc:	66 01 d0             	add    %dx,%ax
    12cf:	67 66 8d 14          	lea    (%si),%dx
    12d3:	85 00                	test   %eax,(%eax)
    12d5:	00 00                	add    %al,(%eax)
    12d7:	00 66 01             	add    %ah,0x1(%esi)
    12da:	d0 66 89             	shlb   -0x77(%esi)
    12dd:	c2 66 c1             	ret    $0xc166
    12e0:	e2 08                	loop   12ea <sys_schedule+0x5b>
    12e2:	66 01 d0             	add    %dx,%ax
    12e5:	66 89 c2             	mov    %ax,%dx
    12e8:	66 c1 e2 10          	shl    $0x10,%dx
    12ec:	66 01 d0             	add    %dx,%ax
    12ef:	66 f7 d8             	neg    %ax
    12f2:	66 a3 88 36 66 a1    	mov    %ax,0xa1663688
        if(_CurrentProg -> prg_status == RUN){
    12f8:	84 36                	test   %dh,(%esi)
    12fa:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    12ff:	66 83 f8 01          	cmp    $0x1,%ax
    1303:	75 23                	jne    1328 <sys_schedule+0x99>
            _CurrentProg -> prg_status = READY;
    1305:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    130b:	c7 40 38 03 00 00 00 	movl   $0x3,0x38(%eax)
            enqueue(&readyqueue,current_index);
    1312:	66 a1 88 36 66 50    	mov    0x50663688,%ax
    1318:	66 68 20 47          	pushw  $0x4720
    131c:	00 00                	add    %al,(%eax)
    131e:	66 e8 34 08          	callw  1b56 <size+0x11>
    1322:	00 00                	add    %al,(%eax)
    1324:	66 83 c4 08          	add    $0x8,%sp
        }
        dequeue(&readyqueue,&sch_index);
    1328:	66 68 70 36          	pushw  $0x3670
    132c:	00 00                	add    %al,(%eax)
    132e:	66 68 20 47          	pushw  $0x4720
    1332:	00 00                	add    %al,(%eax)
    1334:	66 e8 8a 08          	callw  1bc2 <enqueue+0x6a>
    1338:	00 00                	add    %al,(%eax)
    133a:	66 83 c4 08          	add    $0x8,%sp
        if(PCB_list[sch_index].prg_status == READY){
    133e:	66 a1 70 36 66 c1    	mov    0xc1663670,%ax
    1344:	e0 02                	loopne 1348 <sys_schedule+0xb9>
    1346:	66 89 c2             	mov    %ax,%dx
    1349:	66 c1 e2 04          	shl    $0x4,%dx
    134d:	66 01 d0             	add    %dx,%ax
    1350:	66 05 50 31          	add    $0x3150,%ax
    1354:	00 00                	add    %al,(%eax)
    1356:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    135b:	66 83 f8 03          	cmp    $0x3,%ax
    135f:	75 2b                	jne    138c <sys_schedule+0xfd>
            _CurrentProg = PCB_list + sch_index;
    1361:	66 a1 70 36 66 c1    	mov    0xc1663670,%ax
    1367:	e0 02                	loopne 136b <sys_schedule+0xdc>
    1369:	66 89 c2             	mov    %ax,%dx
    136c:	66 c1 e2 04          	shl    $0x4,%dx
    1370:	66 01 d0             	add    %dx,%ax
    1373:	66 05 20 31          	add    $0x3120,%ax
    1377:	00 00                	add    %al,(%eax)
    1379:	66 a3 84 36 66 a1    	mov    %ax,0xa1663684
            _CurrentProg -> prg_status = RUN;
    137f:	84 36                	test   %dh,(%esi)
    1381:	67 66 c7 40 38 01 00 	movw   $0x1,0x38(%bx,%si)
    1388:	00 00                	add    %al,(%eax)
            return;
    138a:	eb 0a                	jmp    1396 <sys_schedule+0x107>
        }
    }
    _CurrentProg = PCB_list ;
    138c:	66 c7 06 84 36       	movw   $0x3684,(%esi)
    1391:	20 31                	and    %dh,(%ecx)
    1393:	00 00                	add    %al,(%eax)
    return;
    1395:	90                   	nop
    
}
    1396:	66 c9                	leavew 
    1398:	66 c3                	retw   

0000139a <sys_exit>:
void sys_exit(){
    139a:	66 55                	push   %bp
    139c:	66 89 e5             	mov    %sp,%bp
    139f:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    13a3:	fa                   	cli    
    int index = _CurrentProg - PCB_list;
    13a4:	66 a1 84 36 66 89    	mov    0x89663684,%ax
    13aa:	c2 66 b8             	ret    $0xb866
    13ad:	20 31                	and    %dh,(%ecx)
    13af:	00 00                	add    %al,(%eax)
    13b1:	66 29 c2             	sub    %ax,%dx
    13b4:	66 89 d0             	mov    %dx,%ax
    13b7:	66 c1 f8 02          	sar    $0x2,%ax
    13bb:	66 89 c2             	mov    %ax,%dx
    13be:	66 89 d0             	mov    %dx,%ax
    13c1:	66 01 c0             	add    %ax,%ax
    13c4:	66 01 d0             	add    %dx,%ax
    13c7:	67 66 8d 14          	lea    (%si),%dx
    13cb:	85 00                	test   %eax,(%eax)
    13cd:	00 00                	add    %al,(%eax)
    13cf:	00 66 01             	add    %ah,0x1(%esi)
    13d2:	d0 66 89             	shlb   -0x77(%esi)
    13d5:	c2 66 c1             	ret    $0xc166
    13d8:	e2 08                	loop   13e2 <sys_exit+0x48>
    13da:	66 01 d0             	add    %dx,%ax
    13dd:	66 89 c2             	mov    %ax,%dx
    13e0:	66 c1 e2 10          	shl    $0x10,%dx
    13e4:	66 01 d0             	add    %dx,%ax
    13e7:	66 f7 d8             	neg    %ax
    13ea:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    rmele(&readyqueue,index);
    13ef:	67 66 ff 75 fc       	pushw  -0x4(%di)
    13f4:	66 68 20 47          	pushw  $0x4720
    13f8:	00 00                	add    %al,(%eax)
    13fa:	66 e8 68 08          	callw  1c66 <init_queue+0x30>
    13fe:	00 00                	add    %al,(%eax)
    1400:	66 83 c4 08          	add    $0x8,%sp
    _CurrentProg -> prg_status = EXIT;
    1404:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    140a:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    __asm__("sti\n");
    1411:	fb                   	sti    
}
    1412:	66 c9                	leavew 
    1414:	66 c3                	retw   

00001416 <sys_bolocked>:



int queuesize,tmp;//一定要是全局，否则dequeue无法将tmp修改
void sys_bolocked(int index){
    1416:	66 55                	push   %bp
    1418:	66 89 e5             	mov    %sp,%bp
    141b:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    141f:	fa                   	cli    
    PCB_list[index].prg_status = BLOCKED;
    1420:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1425:	66 c1 e0 02          	shl    $0x2,%ax
    1429:	66 89 c2             	mov    %ax,%dx
    142c:	66 c1 e2 04          	shl    $0x4,%dx
    1430:	66 01 d0             	add    %dx,%ax
    1433:	66 05 50 31          	add    $0x3150,%ax
    1437:	00 00                	add    %al,(%eax)
    1439:	67 66 c7 40 08 02 00 	movw   $0x2,0x8(%bx,%si)
    1440:	00 00                	add    %al,(%eax)
    enqueue(&blockqueue,index);
    1442:	67 66 ff 75 08       	pushw  0x8(%di)
    1447:	66 68 80 30          	pushw  $0x3080
    144b:	00 00                	add    %al,(%eax)
    144d:	66 e8 05 07          	callw  1b56 <size+0x11>
    1451:	00 00                	add    %al,(%eax)
    1453:	66 83 c4 08          	add    $0x8,%sp
    queuesize = size(&readyqueue);
    1457:	66 68 20 47          	pushw  $0x4720
    145b:	00 00                	add    %al,(%eax)
    145d:	66 e8 e2 06          	callw  1b43 <isempty+0x1b>
    1461:	00 00                	add    %al,(%eax)
    1463:	66 83 c4 04          	add    $0x4,%sp
    1467:	66 a3 68 30 67 66    	mov    %ax,0x66673068
    int i = 0;
    146d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    1474:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    147b:	00 00                	add    %al,(%eax)
    147d:	eb 3c                	jmp    14bb <sys_bolocked+0xa5>
        dequeue(&readyqueue,&tmp);
    147f:	66 68 64 30          	pushw  $0x3064
    1483:	00 00                	add    %al,(%eax)
    1485:	66 68 20 47          	pushw  $0x4720
    1489:	00 00                	add    %al,(%eax)
    148b:	66 e8 33 07          	callw  1bc2 <enqueue+0x6a>
    148f:	00 00                	add    %al,(%eax)
    1491:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    1495:	66 a1 64 30 67 66    	mov    0x66673064,%ax
    149b:	39 45 08             	cmp    %eax,0x8(%ebp)
    149e:	74 16                	je     14b6 <sys_bolocked+0xa0>
            enqueue(&readyqueue,tmp);
    14a0:	66 a1 64 30 66 50    	mov    0x50663064,%ax
    14a6:	66 68 20 47          	pushw  $0x4720
    14aa:	00 00                	add    %al,(%eax)
    14ac:	66 e8 a6 06          	callw  1b56 <size+0x11>
    14b0:	00 00                	add    %al,(%eax)
    14b2:	66 83 c4 08          	add    $0x8,%sp
    __asm__("cli\n");
    PCB_list[index].prg_status = BLOCKED;
    enqueue(&blockqueue,index);
    queuesize = size(&readyqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    14b6:	67 66 ff 45 fc       	incw   -0x4(%di)
    14bb:	66 a1 68 30 67 66    	mov    0x66673068,%ax
    14c1:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    14c4:	7c b9                	jl     147f <sys_bolocked+0x69>
        dequeue(&readyqueue,&tmp);
        if(index != tmp){
            enqueue(&readyqueue,tmp);
        }
    }
    __asm__("sti\n");
    14c6:	fb                   	sti    
}
    14c7:	66 c9                	leavew 
    14c9:	66 c3                	retw   

000014cb <sys_wakeup>:
void sys_wakeup(int index){
    14cb:	66 55                	push   %bp
    14cd:	66 89 e5             	mov    %sp,%bp
    14d0:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    14d4:	fa                   	cli    
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    14d5:	66 68 80 30          	pushw  $0x3080
    14d9:	00 00                	add    %al,(%eax)
    14db:	66 e8 64 06          	callw  1b43 <isempty+0x1b>
    14df:	00 00                	add    %al,(%eax)
    14e1:	66 83 c4 04          	add    $0x4,%sp
    14e5:	66 a3 68 30 67 66    	mov    %ax,0x66673068
    int i = 0;
    14eb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    14f2:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    14f9:	00 00                	add    %al,(%eax)
    14fb:	eb 3c                	jmp    1539 <sys_wakeup+0x6e>
        dequeue(&blockqueue,&tmp);
    14fd:	66 68 64 30          	pushw  $0x3064
    1501:	00 00                	add    %al,(%eax)
    1503:	66 68 80 30          	pushw  $0x3080
    1507:	00 00                	add    %al,(%eax)
    1509:	66 e8 b5 06          	callw  1bc2 <enqueue+0x6a>
    150d:	00 00                	add    %al,(%eax)
    150f:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    1513:	66 a1 64 30 67 66    	mov    0x66673064,%ax
    1519:	39 45 08             	cmp    %eax,0x8(%ebp)
    151c:	74 16                	je     1534 <sys_wakeup+0x69>
            enqueue(&blockqueue,tmp);
    151e:	66 a1 64 30 66 50    	mov    0x50663064,%ax
    1524:	66 68 80 30          	pushw  $0x3080
    1528:	00 00                	add    %al,(%eax)
    152a:	66 e8 28 06          	callw  1b56 <size+0x11>
    152e:	00 00                	add    %al,(%eax)
    1530:	66 83 c4 08          	add    $0x8,%sp
void sys_wakeup(int index){
    __asm__("cli\n");
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    1534:	67 66 ff 45 fc       	incw   -0x4(%di)
    1539:	66 a1 68 30 67 66    	mov    0x66673068,%ax
    153f:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1542:	7c b9                	jl     14fd <sys_wakeup+0x32>
        dequeue(&blockqueue,&tmp);
        if(index != tmp){
            enqueue(&blockqueue,tmp);
        }
    }
    PCB_list[index].prg_status = READY;
    1544:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1549:	66 c1 e0 02          	shl    $0x2,%ax
    154d:	66 89 c2             	mov    %ax,%dx
    1550:	66 c1 e2 04          	shl    $0x4,%dx
    1554:	66 01 d0             	add    %dx,%ax
    1557:	66 05 50 31          	add    $0x3150,%ax
    155b:	00 00                	add    %al,(%eax)
    155d:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    1564:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    1566:	67 66 ff 75 08       	pushw  0x8(%di)
    156b:	66 68 20 47          	pushw  $0x4720
    156f:	00 00                	add    %al,(%eax)
    1571:	66 e8 e1 05          	callw  1b56 <size+0x11>
    1575:	00 00                	add    %al,(%eax)
    1577:	66 83 c4 08          	add    $0x8,%sp
    __asm__("sti\n");
    157b:	fb                   	sti    
}
    157c:	66 c9                	leavew 
    157e:	66 c3                	retw   

00001580 <sys_run>:
void sys_run(){
    1580:	66 55                	push   %bp
    1582:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    1585:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    158b:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    1592:	66 5d                	pop    %bp
    1594:	66 c3                	retw   

00001596 <do_fork>:

int do_fork(){
    1596:	66 55                	push   %bp
    1598:	66 89 e5             	mov    %sp,%bp
    159b:	66 83 ec 08          	sub    $0x8,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    159f:	67 66 c7 45 fc 64 31 	movw   $0x3164,-0x4(%di)
    15a6:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN )    fork_prg = fork_prg + 1;//应该增加used位，防止被覆盖
    15a8:	eb 06                	jmp    15b0 <do_fork+0x1a>
    15aa:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    15b0:	67 66 81 7d fc 70 36 	cmpw   $0x3670,-0x4(%di)
    15b7:	00 00                	add    %al,(%eax)
    15b9:	73 10                	jae    15cb <do_fork+0x35>
    15bb:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    15c0:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    15c5:	66 83 f8 01          	cmp    $0x1,%ax
    15c9:	74 df                	je     15aa <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    15cb:	67 66 81 7d fc 2c 36 	cmpw   $0x362c,-0x4(%di)
    15d2:	00 00                	add    %al,(%eax)
    15d4:	76 0f                	jbe    15e5 <do_fork+0x4f>
    15d6:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    15dc:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    15e2:	e9 42 02 66 e8       	jmp    e8661829 <delay+0xe86554d9>
    else{
        _Schedule_once();
    15e7:	0b ee                	or     %esi,%ebp
    15e9:	ff                   	(bad)  
    15ea:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    15ed:	ec                   	in     (%dx),%al
    15ee:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    15ef:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    15f5:	ff 75 fc             	pushl  -0x4(%ebp)
    15f8:	66 50                	push   %ax
    15fa:	66 e8 e6 03          	callw  19e4 <counter+0x62>
    15fe:	00 00                	add    %al,(%eax)
    1600:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    1604:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    1608:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    160d:	66 b8 20 31          	mov    $0x3120,%ax
    1611:	00 00                	add    %al,(%eax)
    1613:	66 29 c2             	sub    %ax,%dx
    1616:	66 89 d0             	mov    %dx,%ax
    1619:	66 c1 f8 02          	sar    $0x2,%ax
    161d:	66 89 c2             	mov    %ax,%dx
    1620:	66 89 d0             	mov    %dx,%ax
    1623:	66 01 c0             	add    %ax,%ax
    1626:	66 01 d0             	add    %dx,%ax
    1629:	67 66 8d 14          	lea    (%si),%dx
    162d:	85 00                	test   %eax,(%eax)
    162f:	00 00                	add    %al,(%eax)
    1631:	00 66 01             	add    %ah,0x1(%esi)
    1634:	d0 66 89             	shlb   -0x77(%esi)
    1637:	c2 66 c1             	ret    $0xc166
    163a:	e2 08                	loop   1644 <do_fork+0xae>
    163c:	66 01 d0             	add    %dx,%ax
    163f:	66 89 c2             	mov    %ax,%dx
    1642:	66 c1 e2 10          	shl    $0x10,%dx
    1646:	66 01 d0             	add    %dx,%ax
    1649:	66 f7 d8             	neg    %ax
    164c:	66 89 c2             	mov    %ax,%dx
    164f:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1654:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    1659:	66 a1 84 36 66 89    	mov    0x89663684,%ax
    165f:	c2 66 b8             	ret    $0xb866
    1662:	20 31                	and    %dh,(%ecx)
    1664:	00 00                	add    %al,(%eax)
    1666:	66 29 c2             	sub    %ax,%dx
    1669:	66 89 d0             	mov    %dx,%ax
    166c:	66 c1 f8 02          	sar    $0x2,%ax
    1670:	66 89 c2             	mov    %ax,%dx
    1673:	66 89 d0             	mov    %dx,%ax
    1676:	66 01 c0             	add    %ax,%ax
    1679:	66 01 d0             	add    %dx,%ax
    167c:	67 66 8d 14          	lea    (%si),%dx
    1680:	85 00                	test   %eax,(%eax)
    1682:	00 00                	add    %al,(%eax)
    1684:	00 66 01             	add    %ah,0x1(%esi)
    1687:	d0 66 89             	shlb   -0x77(%esi)
    168a:	c2 66 c1             	ret    $0xc166
    168d:	e2 08                	loop   1697 <do_fork+0x101>
    168f:	66 01 d0             	add    %dx,%ax
    1692:	66 89 c2             	mov    %ax,%dx
    1695:	66 c1 e2 10          	shl    $0x10,%dx
    1699:	66 01 d0             	add    %dx,%ax
    169c:	66 f7 d8             	neg    %ax
    169f:	66 89 c2             	mov    %ax,%dx
    16a2:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    16a7:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    16ac:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    16b2:	8b 50 20             	mov    0x20(%eax),%edx
    16b5:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    16ba:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    16bf:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    16c4:	66 b8 20 31          	mov    $0x3120,%ax
    16c8:	00 00                	add    %al,(%eax)
    16ca:	66 29 c2             	sub    %ax,%dx
    16cd:	66 89 d0             	mov    %dx,%ax
    16d0:	66 c1 f8 02          	sar    $0x2,%ax
    16d4:	66 89 c2             	mov    %ax,%dx
    16d7:	66 89 d0             	mov    %dx,%ax
    16da:	66 01 c0             	add    %ax,%ax
    16dd:	66 01 d0             	add    %dx,%ax
    16e0:	67 66 8d 14          	lea    (%si),%dx
    16e4:	85 00                	test   %eax,(%eax)
    16e6:	00 00                	add    %al,(%eax)
    16e8:	00 66 01             	add    %ah,0x1(%esi)
    16eb:	d0 66 89             	shlb   -0x77(%esi)
    16ee:	c2 66 c1             	ret    $0xc166
    16f1:	e2 08                	loop   16fb <do_fork+0x165>
    16f3:	66 01 d0             	add    %dx,%ax
    16f6:	66 89 c2             	mov    %ax,%dx
    16f9:	66 c1 e2 10          	shl    $0x10,%dx
    16fd:	66 01 d0             	add    %dx,%ax
    1700:	66 f7 d8             	neg    %ax
    1703:	66 83 c0 02          	add    $0x2,%ax
    1707:	66 c1 e0 0c          	shl    $0xc,%ax
    170b:	66 89 c2             	mov    %ax,%dx
    170e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1713:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    1718:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    171e:	8b 50 30             	mov    0x30(%eax),%edx
    1721:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1726:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    172b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1730:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    1737:	00 00                	add    %al,(%eax)
        
        int index = fork_prg - PCB_list;
    1739:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    173e:	66 b8 20 31          	mov    $0x3120,%ax
    1742:	00 00                	add    %al,(%eax)
    1744:	66 29 c2             	sub    %ax,%dx
    1747:	66 89 d0             	mov    %dx,%ax
    174a:	66 c1 f8 02          	sar    $0x2,%ax
    174e:	66 89 c2             	mov    %ax,%dx
    1751:	66 89 d0             	mov    %dx,%ax
    1754:	66 01 c0             	add    %ax,%ax
    1757:	66 01 d0             	add    %dx,%ax
    175a:	67 66 8d 14          	lea    (%si),%dx
    175e:	85 00                	test   %eax,(%eax)
    1760:	00 00                	add    %al,(%eax)
    1762:	00 66 01             	add    %ah,0x1(%esi)
    1765:	d0 66 89             	shlb   -0x77(%esi)
    1768:	c2 66 c1             	ret    $0xc166
    176b:	e2 08                	loop   1775 <do_fork+0x1df>
    176d:	66 01 d0             	add    %dx,%ax
    1770:	66 89 c2             	mov    %ax,%dx
    1773:	66 c1 e2 10          	shl    $0x10,%dx
    1777:	66 01 d0             	add    %dx,%ax
    177a:	66 f7 d8             	neg    %ax
    177d:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
        __asm__("sub $6,%esp");
    1782:	66 83 ec 06          	sub    $0x6,%sp
        enqueue(&readyqueue,index); 
    1786:	67 66 ff 75 f8       	pushw  -0x8(%di)
    178b:	66 68 20 47          	pushw  $0x4720
    178f:	00 00                	add    %al,(%eax)
    1791:	66 e8 c1 03          	callw  1b56 <size+0x11>
    1795:	00 00                	add    %al,(%eax)
    1797:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    179b:	66 83 c4 06          	add    $0x6,%sp
        _Schedule_once();
    179f:	66 e8 51 ec          	callw  3f4 <S+0x14>
    17a3:	ff                   	(bad)  
    17a4:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    17a7:	ec                   	in     (%dx),%al
    17a8:	06                   	push   %es
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    17a9:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    17ae:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    17b3:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    17b9:	8b 50 28             	mov    0x28(%eax),%edx
    17bc:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    17c2:	8b 40 24             	mov    0x24(%eax),%eax
    17c5:	66 51                	push   %cx
    17c7:	66 52                	push   %dx
    17c9:	66 50                	push   %ax
    17cb:	66 e8 14 eb          	callw  2e3 <Message31+0x4>
    17cf:	ff                   	(bad)  
    17d0:	ff 66 83             	jmp    *-0x7d(%esi)
    17d3:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
        __asm__("add $6,%esp");
    17d6:	83 c4 06             	add    $0x6,%esp
        fork_prg -> ip = _CurrentProg -> ip;
    17d9:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    17df:	8b 50 2c             	mov    0x2c(%eax),%edx
    17e2:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    17e7:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    17ec:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    17f1:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    17f7:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    17f9:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    17ff:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1802:	75 08                	jne    180c <do_fork+0x276>
            return 0;
    1804:	66 b8 00 00          	mov    $0x0,%ax
    1808:	00 00                	add    %al,(%eax)
    180a:	eb 1b                	jmp    1827 <do_fork+0x291>
        }
        _CurrentProg -> eax = _CurrentProg -> id;
    180c:	66 a1 84 36 66 8b    	mov    0x8b663684,%ax
    1812:	16                   	push   %ss
    1813:	84 36                	test   %dh,(%esi)
    1815:	67 66 8b 52 3c       	mov    0x3c(%bp,%si),%dx
    181a:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    181e:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    1824:	8b 00                	mov    (%eax),%eax
    1826:	90                   	nop
    }
}
    1827:	66 c9                	leavew 
    1829:	66 c3                	retw   

0000182b <sys_exit_fork>:
void sys_exit_fork(char ch){
    182b:	66 55                	push   %bp
    182d:	66 89 e5             	mov    %sp,%bp
    1830:	66 83 ec 0c          	sub    $0xc,%sp
    1834:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1839:	67 88 45 f4          	mov    %al,-0xc(%di)
    int current_id = _CurrentProg - PCB_list;
    183d:	66 a1 84 36 66 89    	mov    0x89663684,%ax
    1843:	c2 66 b8             	ret    $0xb866
    1846:	20 31                	and    %dh,(%ecx)
    1848:	00 00                	add    %al,(%eax)
    184a:	66 29 c2             	sub    %ax,%dx
    184d:	66 89 d0             	mov    %dx,%ax
    1850:	66 c1 f8 02          	sar    $0x2,%ax
    1854:	66 89 c2             	mov    %ax,%dx
    1857:	66 89 d0             	mov    %dx,%ax
    185a:	66 01 c0             	add    %ax,%ax
    185d:	66 01 d0             	add    %dx,%ax
    1860:	67 66 8d 14          	lea    (%si),%dx
    1864:	85 00                	test   %eax,(%eax)
    1866:	00 00                	add    %al,(%eax)
    1868:	00 66 01             	add    %ah,0x1(%esi)
    186b:	d0 66 89             	shlb   -0x77(%esi)
    186e:	c2 66 c1             	ret    $0xc166
    1871:	e2 08                	loop   187b <sys_exit_fork+0x50>
    1873:	66 01 d0             	add    %dx,%ax
    1876:	66 89 c2             	mov    %ax,%dx
    1879:	66 c1 e2 10          	shl    $0x10,%dx
    187d:	66 01 d0             	add    %dx,%ax
    1880:	66 f7 d8             	neg    %ax
    1883:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    int index = _CurrentProg -> fid;
    1888:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    188e:	8b 40 40             	mov    0x40(%eax),%eax
    1891:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    sys_wakeup(index);
    1896:	67 66 ff 75 f8       	pushw  -0x8(%di)
    189b:	66 e8 2a fc          	callw  14c9 <sys_bolocked+0xb3>
    189f:	ff                   	(bad)  
    18a0:	ff 66 83             	jmp    *-0x7d(%esi)
    18a3:	c4 04 66             	les    (%esi,%eiz,2),%eax
    PCB_list[_CurrentProg -> fid].eax = ch;
    18a6:	a1 84 36 67 66       	mov    0x66673684,%eax
    18ab:	8b 40 40             	mov    0x40(%eax),%eax
    18ae:	67 66 0f be 55 f4    	movsbw -0xc(%di),%dx
    18b4:	66 c1 e0 02          	shl    $0x2,%ax
    18b8:	66 89 c1             	mov    %ax,%cx
    18bb:	66 c1 e1 04          	shl    $0x4,%cx
    18bf:	66 01 c8             	add    %cx,%ax
    18c2:	66 05 20 31          	add    $0x3120,%ax
    18c6:	00 00                	add    %al,(%eax)
    18c8:	67 66 89 10          	mov    %dx,(%bx,%si)
    _CurrentProg -> prg_status = EXIT;
    18cc:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    18d2:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    rmele(&readyqueue,current_id);
    18d9:	67 66 ff 75 fc       	pushw  -0x4(%di)
    18de:	66 68 20 47          	pushw  $0x4720
    18e2:	00 00                	add    %al,(%eax)
    18e4:	66 e8 7e 03          	callw  1c66 <init_queue+0x30>
    18e8:	00 00                	add    %al,(%eax)
    18ea:	66 83 c4 08          	add    $0x8,%sp
    _Schedule();
    18ee:	66 e8 18 eb          	callw  40a <_fork_user+0x9>
    18f2:	ff                   	(bad)  
    18f3:	ff 66 c9             	jmp    *-0x37(%esi)
}
    18f6:	66 c3                	retw   

000018f8 <sys_wait>:
int sys_wait(){
    18f8:	66 55                	push   %bp
    18fa:	66 89 e5             	mov    %sp,%bp
    18fd:	66 83 ec 04          	sub    $0x4,%sp
    int index = _CurrentProg - PCB_list;
    1901:	66 a1 84 36 66 89    	mov    0x89663684,%ax
    1907:	c2 66 b8             	ret    $0xb866
    190a:	20 31                	and    %dh,(%ecx)
    190c:	00 00                	add    %al,(%eax)
    190e:	66 29 c2             	sub    %ax,%dx
    1911:	66 89 d0             	mov    %dx,%ax
    1914:	66 c1 f8 02          	sar    $0x2,%ax
    1918:	66 89 c2             	mov    %ax,%dx
    191b:	66 89 d0             	mov    %dx,%ax
    191e:	66 01 c0             	add    %ax,%ax
    1921:	66 01 d0             	add    %dx,%ax
    1924:	67 66 8d 14          	lea    (%si),%dx
    1928:	85 00                	test   %eax,(%eax)
    192a:	00 00                	add    %al,(%eax)
    192c:	00 66 01             	add    %ah,0x1(%esi)
    192f:	d0 66 89             	shlb   -0x77(%esi)
    1932:	c2 66 c1             	ret    $0xc166
    1935:	e2 08                	loop   193f <sys_wait+0x47>
    1937:	66 01 d0             	add    %dx,%ax
    193a:	66 89 c2             	mov    %ax,%dx
    193d:	66 c1 e2 10          	shl    $0x10,%dx
    1941:	66 01 d0             	add    %dx,%ax
    1944:	66 f7 d8             	neg    %ax
    1947:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_bolocked(index);
    194c:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1951:	66 e8 bf fa          	callw  1414 <sys_exit+0x7a>
    1955:	ff                   	(bad)  
    1956:	ff 66 83             	jmp    *-0x7d(%esi)
    1959:	c4 04 66             	les    (%esi,%eiz,2),%eax
    _Schedule();
    195c:	e8 ab ea ff ff       	call   40c <_Schedule>
    return _CurrentProg -> eax;
    1961:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    1967:	8b 00                	mov    (%eax),%eax
}
    1969:	66 c9                	leavew 
    196b:	66 c3                	retw   

0000196d <thread_join>:
void thread_join(){
    196d:	66 55                	push   %bp
    196f:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    1972:	90                   	nop
    1973:	66 e8 09 00          	callw  1980 <thread_join+0x13>
    1977:	00 00                	add    %al,(%eax)
    1979:	66 85 c0             	test   %ax,%ax
    197c:	75 f5                	jne    1973 <thread_join+0x6>
    }
}
    197e:	66 5d                	pop    %bp
    1980:	66 c3                	retw   

00001982 <counter>:
int counter(){
    1982:	66 55                	push   %bp
    1984:	66 89 e5             	mov    %sp,%bp
    1987:	66 83 ec 08          	sub    $0x8,%sp
   // __asm__("cli\n");
    int i = 0;
    198b:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1992:	00 00                	add    %al,(%eax)
    int count = 0;
    1994:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    199b:	00 00                	add    %al,(%eax)
    for(i = 1;i < PCB_NUMMER;i ++){
    199d:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    19a4:	00 00                	add    %al,(%eax)
    19a6:	eb 2d                	jmp    19d5 <counter+0x53>
        if(PCB_list[i].prg_status != EXIT){
    19a8:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    19ad:	66 c1 e0 02          	shl    $0x2,%ax
    19b1:	66 89 c2             	mov    %ax,%dx
    19b4:	66 c1 e2 04          	shl    $0x4,%dx
    19b8:	66 01 d0             	add    %dx,%ax
    19bb:	66 05 50 31          	add    $0x3150,%ax
    19bf:	00 00                	add    %al,(%eax)
    19c1:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    19c6:	66 85 c0             	test   %ax,%ax
    19c9:	74 05                	je     19d0 <counter+0x4e>
            count ++;
    19cb:	67 66 ff 45 f8       	incw   -0x8(%di)
}
int counter(){
   // __asm__("cli\n");
    int i = 0;
    int count = 0;
    for(i = 1;i < PCB_NUMMER;i ++){
    19d0:	67 66 ff 45 fc       	incw   -0x4(%di)
    19d5:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    19db:	7e cb                	jle    19a8 <counter+0x26>
        if(PCB_list[i].prg_status != EXIT){
            count ++;
        }
    }
    //__asm__("sti\n");
    return count;
    19dd:	67 66 8b 45 f8       	mov    -0x8(%di),%ax

}
    19e2:	66 c9                	leavew 
    19e4:	66 c3                	retw   

000019e6 <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    19e6:	66 55                	push   %bp
    19e8:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    19eb:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19f0:	67 66 8b 10          	mov    (%bx,%si),%dx
    19f4:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    19f9:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    19fd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a02:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    1a07:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a0c:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    1a11:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a16:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    1a1b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a20:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    1a25:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a2a:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    1a2f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a34:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    1a39:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a3e:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    1a43:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a48:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    1a4d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a52:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    1a57:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a5c:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    1a61:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a66:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    1a6b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a70:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    1a75:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a7a:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    1a7f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a84:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    1a89:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a8e:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    1a93:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1a98:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    1a9d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1aa2:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    1aa7:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1aac:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    1ab1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ab6:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    1abb:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1ac0:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    1ac5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1aca:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    1acf:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1ad4:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    1ad9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ade:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    1ae3:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1ae8:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    1aed:	66 5d                	pop    %bp
    1aef:	66 c3                	retw   

00001af1 <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    1af1:	66 55                	push   %bp
    1af3:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    1af6:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1afb:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1b00:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b05:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    1b0a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b0f:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    1b14:	66 51                	push   %cx
    1b16:	66 52                	push   %dx
    1b18:	66 50                	push   %ax
    1b1a:	66 e8 c5 e7          	callw  2e3 <Message31+0x4>
    1b1e:	ff                   	(bad)  
    1b1f:	ff 66 83             	jmp    *-0x7d(%esi)
    1b22:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    1b25:	c9                   	leave  
    1b26:	66 c3                	retw   

00001b28 <isempty>:
int isempty(struct Queue *queue){
    1b28:	66 55                	push   %bp
    1b2a:	66 89 e5             	mov    %sp,%bp
    
    return (queue -> size == 0);
    1b2d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b32:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1b37:	66 85 c0             	test   %ax,%ax
    1b3a:	0f 94 c0             	sete   %al
    1b3d:	66 0f b6 c0          	movzbw %al,%ax

}
    1b41:	66 5d                	pop    %bp
    1b43:	66 c3                	retw   

00001b45 <size>:
int size(struct Queue *queue){
    1b45:	66 55                	push   %bp
    1b47:	66 89 e5             	mov    %sp,%bp
    return queue -> size ;
    1b4a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b4f:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
}
    1b54:	66 5d                	pop    %bp
    1b56:	66 c3                	retw   

00001b58 <enqueue>:
void enqueue(struct Queue *queue,int data){
    1b58:	66 55                	push   %bp
    1b5a:	66 89 e5             	mov    %sp,%bp
    if(queue -> size >= MAX){
    1b5d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b62:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1b67:	66 83 f8 1d          	cmp    $0x1d,%ax
    1b6b:	7e 02                	jle    1b6f <enqueue+0x17>
        return;
    1b6d:	eb 51                	jmp    1bc0 <enqueue+0x68>
    }
    queue -> size ++;
    1b6f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b74:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1b79:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    1b7e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b83:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    queue -> tail = (queue -> tail + 1) % MAX;
    1b88:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b8d:	67 66 8b 00          	mov    (%bx,%si),%ax
    1b91:	66 40                	inc    %ax
    1b93:	66 b9 1e 00          	mov    $0x1e,%cx
    1b97:	00 00                	add    %al,(%eax)
    1b99:	66 99                	cwtd   
    1b9b:	66 f7 f9             	idiv   %cx
    1b9e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ba3:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> array[queue -> tail] = data;
    1ba7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1bac:	67 66 8b 10          	mov    (%bx,%si),%dx
    1bb0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1bb5:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    1bba:	67 66 89 4c 90       	mov    %cx,-0x70(%si)
    1bbf:	0c 66                	or     $0x66,%al

}
    1bc1:	5d                   	pop    %ebp
    1bc2:	66 c3                	retw   

00001bc4 <dequeue>:
void dequeue(struct Queue *queue,int * data){
    1bc4:	66 55                	push   %bp
    1bc6:	66 89 e5             	mov    %sp,%bp

    if(queue -> size <= 0){
    1bc9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1bce:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1bd3:	66 85 c0             	test   %ax,%ax
    1bd6:	7f 02                	jg     1bda <dequeue+0x16>
        return;
    1bd8:	eb 58                	jmp    1c32 <dequeue+0x6e>
    }
    queue -> size --;
    1bda:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1bdf:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1be4:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    1be9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1bee:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    *data = queue -> array[queue -> head];
    1bf3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1bf8:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    1bfd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1c02:	67 66 8b 54 90       	mov    -0x70(%si),%dx
    1c07:	0c 67                	or     $0x67,%al
    1c09:	66 8b 45 0c          	mov    0xc(%ebp),%ax
    1c0d:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> head = (queue -> head + 1) % MAX;
    1c11:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1c16:	67 66 8b 40 04       	mov    0x4(%bx,%si),%ax
    1c1b:	66 40                	inc    %ax
    1c1d:	66 b9 1e 00          	mov    $0x1e,%cx
    1c21:	00 00                	add    %al,(%eax)
    1c23:	66 99                	cwtd   
    1c25:	66 f7 f9             	idiv   %cx
    1c28:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1c2d:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)

}
    1c32:	66 5d                	pop    %bp
    1c34:	66 c3                	retw   

00001c36 <init_queue>:
void init_queue(struct Queue *queue){
    1c36:	66 55                	push   %bp
    1c38:	66 89 e5             	mov    %sp,%bp
    queue -> size = 0;
    1c3b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1c40:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    1c47:	00 00                	add    %al,(%eax)
    queue -> tail = MAX - 1;
    1c49:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1c4e:	67 66 c7 00 1d 00    	movw   $0x1d,(%bx,%si)
    1c54:	00 00                	add    %al,(%eax)
    queue -> head = 0;
    1c56:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1c5b:	67 66 c7 40 04 00 00 	movw   $0x0,0x4(%bx,%si)
    1c62:	00 00                	add    %al,(%eax)
}
    1c64:	66 5d                	pop    %bp
    1c66:	66 c3                	retw   

00001c68 <rmele>:
int rm_tmp;
int ii;
int size_of_rmqueue;
void rmele(struct Queue *queue,int data){
    1c68:	66 55                	push   %bp
    1c6a:	66 89 e5             	mov    %sp,%bp
    size_of_rmqueue= size(queue);
    1c6d:	67 66 ff 75 08       	pushw  0x8(%di)
    1c72:	66 e8 cd fe          	callw  1b43 <isempty+0x1b>
    1c76:	ff                   	(bad)  
    1c77:	ff 66 83             	jmp    *-0x7d(%esi)
    1c7a:	c4 04 66             	les    (%esi,%eiz,2),%eax
    1c7d:	a3 78 36 66 c7       	mov    %eax,0xc7663678
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    1c82:	06                   	push   %es
    1c83:	7c 36                	jl     1cbb <rmele+0x53>
    1c85:	00 00                	add    %al,(%eax)
    1c87:	00 00                	add    %al,(%eax)
    1c89:	eb 3f                	jmp    1cca <rmele+0x62>
        dequeue(queue,&rm_tmp);
    1c8b:	66 68 08 47          	pushw  $0x4708
    1c8f:	00 00                	add    %al,(%eax)
    1c91:	67 66 ff 75 08       	pushw  0x8(%di)
    1c96:	66 e8 28 ff          	callw  1bc2 <enqueue+0x6a>
    1c9a:	ff                   	(bad)  
    1c9b:	ff 66 83             	jmp    *-0x7d(%esi)
    1c9e:	c4 08                	les    (%eax),%ecx
        if(rm_tmp != data){
    1ca0:	66 a1 08 47 67 66    	mov    0x66674708,%ax
    1ca6:	3b 45 0c             	cmp    0xc(%ebp),%eax
    1ca9:	74 15                	je     1cc0 <rmele+0x58>
            enqueue(queue,rm_tmp);
    1cab:	66 a1 08 47 66 50    	mov    0x50664708,%ax
    1cb1:	67 66 ff 75 08       	pushw  0x8(%di)
    1cb6:	66 e8 9c fe          	callw  1b56 <size+0x11>
    1cba:	ff                   	(bad)  
    1cbb:	ff 66 83             	jmp    *-0x7d(%esi)
    1cbe:	c4 08                	les    (%eax),%ecx
int rm_tmp;
int ii;
int size_of_rmqueue;
void rmele(struct Queue *queue,int data){
    size_of_rmqueue= size(queue);
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    1cc0:	66 a1 7c 36 66 40    	mov    0x4066367c,%ax
    1cc6:	66 a3 7c 36 66 8b    	mov    %ax,0x8b66367c
    1ccc:	16                   	push   %ss
    1ccd:	7c 36                	jl     1d05 <init_Semlist+0x29>
    1ccf:	66 a1 78 36 66 39    	mov    0x39663678,%ax
    1cd5:	c2 7c b3             	ret    $0xb37c
        dequeue(queue,&rm_tmp);
        if(rm_tmp != data){
            enqueue(queue,rm_tmp);
        }
    }
}
    1cd8:	66 c9                	leavew 
    1cda:	66 c3                	retw   

00001cdc <init_Semlist>:
void init_Semlist(int index){
    1cdc:	66 55                	push   %bp
    1cde:	66 89 e5             	mov    %sp,%bp
    SEM_list[index].used = 0;
    1ce1:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1ce6:	66 89 d0             	mov    %dx,%ax
    1ce9:	66 c1 e0 02          	shl    $0x2,%ax
    1ced:	66 01 d0             	add    %dx,%ax
    1cf0:	66 c1 e0 02          	shl    $0x2,%ax
    1cf4:	67 66 8d 14          	lea    (%si),%dx
    1cf8:	c5 00                	lds    (%eax),%eax
    1cfa:	00 00                	add    %al,(%eax)
    1cfc:	00 66 29             	add    %ah,0x29(%esi)
    1cff:	c2 66 89             	ret    $0x8966
    1d02:	d0 66 05             	shlb   0x5(%esi)
    1d05:	20 37                	and    %dh,(%edi)
    1d07:	00 00                	add    %al,(%eax)
    1d09:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    1d10:	00 00                	add    %al,(%eax)
    init_queue(&SEM_list[index].semaque);
    1d12:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1d17:	66 89 d0             	mov    %dx,%ax
    1d1a:	66 c1 e0 02          	shl    $0x2,%ax
    1d1e:	66 01 d0             	add    %dx,%ax
    1d21:	66 c1 e0 02          	shl    $0x2,%ax
    1d25:	67 66 8d 14          	lea    (%si),%dx
    1d29:	c5 00                	lds    (%eax),%eax
    1d2b:	00 00                	add    %al,(%eax)
    1d2d:	00 66 29             	add    %ah,0x29(%esi)
    1d30:	c2 67 66             	ret    $0x6667
    1d33:	8d 82 a0 36 00 00    	lea    0x36a0(%edx),%eax
    1d39:	66 83 c0 04          	add    $0x4,%ax
    1d3d:	66 50                	push   %ax
    1d3f:	66 e8 f1 fe          	callw  1c34 <dequeue+0x70>
    1d43:	ff                   	(bad)  
    1d44:	ff 66 83             	jmp    *-0x7d(%esi)
    1d47:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    1d4a:	c9                   	leave  
    1d4b:	66 c3                	retw   

00001d4d <do_SemGet>:
int do_SemGet(int value){
    1d4d:	66 55                	push   %bp
    1d4f:	66 89 e5             	mov    %sp,%bp
    1d52:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    1d56:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1d5d:	00 00                	add    %al,(%eax)
    while(SEM_list[i].used == 1){
    1d5f:	eb 05                	jmp    1d66 <do_SemGet+0x19>
        i ++;
    1d61:	67 66 ff 45 fc       	incw   -0x4(%di)
    SEM_list[index].used = 0;
    init_queue(&SEM_list[index].semaque);
}
int do_SemGet(int value){
    int i = 0;
    while(SEM_list[i].used == 1){
    1d66:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1d6b:	66 89 d0             	mov    %dx,%ax
    1d6e:	66 c1 e0 02          	shl    $0x2,%ax
    1d72:	66 01 d0             	add    %dx,%ax
    1d75:	66 c1 e0 02          	shl    $0x2,%ax
    1d79:	67 66 8d 14          	lea    (%si),%dx
    1d7d:	c5 00                	lds    (%eax),%eax
    1d7f:	00 00                	add    %al,(%eax)
    1d81:	00 66 29             	add    %ah,0x29(%esi)
    1d84:	c2 66 89             	ret    $0x8966
    1d87:	d0 66 05             	shlb   0x5(%esi)
    1d8a:	20 37                	and    %dh,(%edi)
    1d8c:	00 00                	add    %al,(%eax)
    1d8e:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1d93:	66 83 f8 01          	cmp    $0x1,%ax
    1d97:	74 c8                	je     1d61 <do_SemGet+0x14>
        i ++;
    }
    if(i < SemMax){
    1d99:	67 66 83 7d fc 1d    	cmpw   $0x1d,-0x4(%di)
    1d9f:	7f 7a                	jg     1e1b <do_SemGet+0xce>
        init_Semlist(i);
    1da1:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1da6:	66 e8 30 ff          	callw  1cda <rmele+0x72>
    1daa:	ff                   	(bad)  
    1dab:	ff 66 83             	jmp    *-0x7d(%esi)
    1dae:	c4 04 67             	les    (%edi,%eiz,2),%eax
        SEM_list[i].used = 1;
    1db1:	66 8b 55 fc          	mov    -0x4(%ebp),%dx
    1db5:	66 89 d0             	mov    %dx,%ax
    1db8:	66 c1 e0 02          	shl    $0x2,%ax
    1dbc:	66 01 d0             	add    %dx,%ax
    1dbf:	66 c1 e0 02          	shl    $0x2,%ax
    1dc3:	67 66 8d 14          	lea    (%si),%dx
    1dc7:	c5 00                	lds    (%eax),%eax
    1dc9:	00 00                	add    %al,(%eax)
    1dcb:	00 66 29             	add    %ah,0x29(%esi)
    1dce:	c2 66 89             	ret    $0x8966
    1dd1:	d0 66 05             	shlb   0x5(%esi)
    1dd4:	20 37                	and    %dh,(%edi)
    1dd6:	00 00                	add    %al,(%eax)
    1dd8:	67 66 c7 40 08 01 00 	movw   $0x1,0x8(%bx,%si)
    1ddf:	00 00                	add    %al,(%eax)
        SEM_list[i].count = value;
    1de1:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1de6:	66 89 d0             	mov    %dx,%ax
    1de9:	66 c1 e0 02          	shl    $0x2,%ax
    1ded:	66 01 d0             	add    %dx,%ax
    1df0:	66 c1 e0 02          	shl    $0x2,%ax
    1df4:	67 66 8d 14          	lea    (%si),%dx
    1df8:	c5 00                	lds    (%eax),%eax
    1dfa:	00 00                	add    %al,(%eax)
    1dfc:	00 66 29             	add    %ah,0x29(%esi)
    1dff:	c2 66 89             	ret    $0x8966
    1e02:	d0 67 66             	shlb   0x66(%edi)
    1e05:	8d 90 a0 36 00 00    	lea    0x36a0(%eax),%edx
    1e0b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1e10:	67 66 89 02          	mov    %ax,(%bp,%si)
        return i;
    1e14:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1e19:	eb 06                	jmp    1e21 <do_SemGet+0xd4>
    }
    else 
        return -1;
    1e1b:	66 b8 ff ff          	mov    $0xffff,%ax
    1e1f:	ff                   	(bad)  
    1e20:	ff 66 c9             	jmp    *-0x37(%esi)
}
    1e23:	66 c3                	retw   

00001e25 <do_SemFree>:
void do_SemFree(int s){
    1e25:	66 55                	push   %bp
    1e27:	66 89 e5             	mov    %sp,%bp
    SEM_list[s].used = 0;
    1e2a:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1e2f:	66 89 d0             	mov    %dx,%ax
    1e32:	66 c1 e0 02          	shl    $0x2,%ax
    1e36:	66 01 d0             	add    %dx,%ax
    1e39:	66 c1 e0 02          	shl    $0x2,%ax
    1e3d:	67 66 8d 14          	lea    (%si),%dx
    1e41:	c5 00                	lds    (%eax),%eax
    1e43:	00 00                	add    %al,(%eax)
    1e45:	00 66 29             	add    %ah,0x29(%esi)
    1e48:	c2 66 89             	ret    $0x8966
    1e4b:	d0 66 05             	shlb   0x5(%esi)
    1e4e:	20 37                	and    %dh,(%edi)
    1e50:	00 00                	add    %al,(%eax)
    1e52:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    1e59:	00 00                	add    %al,(%eax)
}
    1e5b:	66 5d                	pop    %bp
    1e5d:	66 c3                	retw   

00001e5f <do_P>:
int tempp;
int sem_index;
int t;
void do_P(int s){
    1e5f:	66 55                	push   %bp
    1e61:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    1e64:	fa                   	cli    
    SEM_list[s].count = SEM_list[s].count - 1;
    1e65:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1e6a:	66 89 d0             	mov    %dx,%ax
    1e6d:	66 c1 e0 02          	shl    $0x2,%ax
    1e71:	66 01 d0             	add    %dx,%ax
    1e74:	66 c1 e0 02          	shl    $0x2,%ax
    1e78:	67 66 8d 14          	lea    (%si),%dx
    1e7c:	c5 00                	lds    (%eax),%eax
    1e7e:	00 00                	add    %al,(%eax)
    1e80:	00 66 29             	add    %ah,0x29(%esi)
    1e83:	c2 66 89             	ret    $0x8966
    1e86:	d0 66 05             	shlb   0x5(%esi)
    1e89:	a0 36 00 00 67       	mov    0x67000036,%al
    1e8e:	66 8b 00             	mov    (%eax),%ax
    1e91:	67 66 8d 48 ff       	lea    -0x1(%bx,%si),%cx
    1e96:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1e9b:	66 89 d0             	mov    %dx,%ax
    1e9e:	66 c1 e0 02          	shl    $0x2,%ax
    1ea2:	66 01 d0             	add    %dx,%ax
    1ea5:	66 c1 e0 02          	shl    $0x2,%ax
    1ea9:	67 66 8d 14          	lea    (%si),%dx
    1ead:	c5 00                	lds    (%eax),%eax
    1eaf:	00 00                	add    %al,(%eax)
    1eb1:	00 66 29             	add    %ah,0x29(%esi)
    1eb4:	c2 66 89             	ret    $0x8966
    1eb7:	d0 66 05             	shlb   0x5(%esi)
    1eba:	a0 36 00 00 67       	mov    0x67000036,%al
    1ebf:	66 89 08             	mov    %cx,(%eax)
    if(SEM_list[s].count < 0){
    1ec2:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1ec7:	66 89 d0             	mov    %dx,%ax
    1eca:	66 c1 e0 02          	shl    $0x2,%ax
    1ece:	66 01 d0             	add    %dx,%ax
    1ed1:	66 c1 e0 02          	shl    $0x2,%ax
    1ed5:	67 66 8d 14          	lea    (%si),%dx
    1ed9:	c5 00                	lds    (%eax),%eax
    1edb:	00 00                	add    %al,(%eax)
    1edd:	00 66 29             	add    %ah,0x29(%esi)
    1ee0:	c2 66 89             	ret    $0x8966
    1ee3:	d0 66 05             	shlb   0x5(%esi)
    1ee6:	a0 36 00 00 67       	mov    0x67000036,%al
    1eeb:	66 8b 00             	mov    (%eax),%ax
    1eee:	66 85 c0             	test   %ax,%ax
    1ef1:	0f 89 b1 00 66 a1    	jns    a1661fa8 <delay+0xa1655c58>
        sem_index = _CurrentProg - PCB_list;
    1ef7:	84 36                	test   %dh,(%esi)
    1ef9:	66 89 c2             	mov    %ax,%dx
    1efc:	66 b8 20 31          	mov    $0x3120,%ax
    1f00:	00 00                	add    %al,(%eax)
    1f02:	66 29 c2             	sub    %ax,%dx
    1f05:	66 89 d0             	mov    %dx,%ax
    1f08:	66 c1 f8 02          	sar    $0x2,%ax
    1f0c:	66 89 c2             	mov    %ax,%dx
    1f0f:	66 89 d0             	mov    %dx,%ax
    1f12:	66 01 c0             	add    %ax,%ax
    1f15:	66 01 d0             	add    %dx,%ax
    1f18:	67 66 8d 14          	lea    (%si),%dx
    1f1c:	85 00                	test   %eax,(%eax)
    1f1e:	00 00                	add    %al,(%eax)
    1f20:	00 66 01             	add    %ah,0x1(%esi)
    1f23:	d0 66 89             	shlb   -0x77(%esi)
    1f26:	c2 66 c1             	ret    $0xc166
    1f29:	e2 08                	loop   1f33 <do_P+0xd4>
    1f2b:	66 01 d0             	add    %dx,%ax
    1f2e:	66 89 c2             	mov    %ax,%dx
    1f31:	66 c1 e2 10          	shl    $0x10,%dx
    1f35:	66 01 d0             	add    %dx,%ax
    1f38:	66 f7 d8             	neg    %ax
    1f3b:	66 a3 0c 47 66 a1    	mov    %ax,0xa166470c
        rmele(&readyqueue,sem_index);//将进程从就绪队列中取出
    1f41:	0c 47                	or     $0x47,%al
    1f43:	66 50                	push   %ax
    1f45:	66 68 20 47          	pushw  $0x4720
    1f49:	00 00                	add    %al,(%eax)
    1f4b:	66 e8 17 fd          	callw  1c66 <init_queue+0x30>
    1f4f:	ff                   	(bad)  
    1f50:	ff 66 83             	jmp    *-0x7d(%esi)
    1f53:	c4 08                	les    (%eax),%ecx
        _CurrentProg->prg_status = BLOCKED;
    1f55:	66 a1 84 36 67 66    	mov    0x66673684,%ax
    1f5b:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
        enqueue(&SEM_list[s].semaque,sem_index);
    1f62:	66 8b 0e             	mov    (%esi),%cx
    1f65:	0c 47                	or     $0x47,%al
    1f67:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1f6c:	66 89 d0             	mov    %dx,%ax
    1f6f:	66 c1 e0 02          	shl    $0x2,%ax
    1f73:	66 01 d0             	add    %dx,%ax
    1f76:	66 c1 e0 02          	shl    $0x2,%ax
    1f7a:	67 66 8d 14          	lea    (%si),%dx
    1f7e:	c5 00                	lds    (%eax),%eax
    1f80:	00 00                	add    %al,(%eax)
    1f82:	00 66 29             	add    %ah,0x29(%esi)
    1f85:	c2 67 66             	ret    $0x6667
    1f88:	8d 82 a0 36 00 00    	lea    0x36a0(%edx),%eax
    1f8e:	66 83 c0 04          	add    $0x4,%ax
    1f92:	66 51                	push   %cx
    1f94:	66 50                	push   %ax
    1f96:	66 e8 bc fb          	callw  1b56 <size+0x11>
    1f9a:	ff                   	(bad)  
    1f9b:	ff 66 83             	jmp    *-0x7d(%esi)
    1f9e:	c4 08                	les    (%eax),%ecx
        _Schedule_PV();
    1fa0:	66 e8 d8 e4          	callw  47c <_Vr+0x10>
    1fa4:	ff                   	(bad)  
    1fa5:	ff                   	(bad)  
    }
    __asm("sti\n");
    1fa6:	fb                   	sti    
}
    1fa7:	66 c9                	leavew 
    1fa9:	66 c3                	retw   

00001fab <do_V>:
int v_res;
int vtempp;
void do_V(int s){
    1fab:	66 55                	push   %bp
    1fad:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    1fb0:	fa                   	cli    
    SEM_list[s].count  = SEM_list[s].count + 1;
    1fb1:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1fb6:	66 89 d0             	mov    %dx,%ax
    1fb9:	66 c1 e0 02          	shl    $0x2,%ax
    1fbd:	66 01 d0             	add    %dx,%ax
    1fc0:	66 c1 e0 02          	shl    $0x2,%ax
    1fc4:	67 66 8d 14          	lea    (%si),%dx
    1fc8:	c5 00                	lds    (%eax),%eax
    1fca:	00 00                	add    %al,(%eax)
    1fcc:	00 66 29             	add    %ah,0x29(%esi)
    1fcf:	c2 66 89             	ret    $0x8966
    1fd2:	d0 66 05             	shlb   0x5(%esi)
    1fd5:	a0 36 00 00 67       	mov    0x67000036,%al
    1fda:	66 8b 00             	mov    (%eax),%ax
    1fdd:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    1fe2:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1fe7:	66 89 d0             	mov    %dx,%ax
    1fea:	66 c1 e0 02          	shl    $0x2,%ax
    1fee:	66 01 d0             	add    %dx,%ax
    1ff1:	66 c1 e0 02          	shl    $0x2,%ax
    1ff5:	67 66 8d 14          	lea    (%si),%dx
    1ff9:	c5 00                	lds    (%eax),%eax
    1ffb:	00 00                	add    %al,(%eax)
    1ffd:	00 66 29             	add    %ah,0x29(%esi)
    2000:	c2 66 89             	ret    $0x8966
    2003:	d0 66 05             	shlb   0x5(%esi)
    2006:	a0 36 00 00 67       	mov    0x67000036,%al
    200b:	66 89 08             	mov    %cx,(%eax)
    if(SEM_list[s].count <= 0){
    200e:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2013:	66 89 d0             	mov    %dx,%ax
    2016:	66 c1 e0 02          	shl    $0x2,%ax
    201a:	66 01 d0             	add    %dx,%ax
    201d:	66 c1 e0 02          	shl    $0x2,%ax
    2021:	67 66 8d 14          	lea    (%si),%dx
    2025:	c5 00                	lds    (%eax),%eax
    2027:	00 00                	add    %al,(%eax)
    2029:	00 66 29             	add    %ah,0x29(%esi)
    202c:	c2 66 89             	ret    $0x8966
    202f:	d0 66 05             	shlb   0x5(%esi)
    2032:	a0 36 00 00 67       	mov    0x67000036,%al
    2037:	66 8b 00             	mov    (%eax),%ax
    203a:	66 85 c0             	test   %ax,%ax
    203d:	7f 74                	jg     20b3 <do_V+0x108>
        dequeue(&SEM_list[s].semaque,&v_res);
    203f:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2044:	66 89 d0             	mov    %dx,%ax
    2047:	66 c1 e0 02          	shl    $0x2,%ax
    204b:	66 01 d0             	add    %dx,%ax
    204e:	66 c1 e0 02          	shl    $0x2,%ax
    2052:	67 66 8d 14          	lea    (%si),%dx
    2056:	c5 00                	lds    (%eax),%eax
    2058:	00 00                	add    %al,(%eax)
    205a:	00 66 29             	add    %ah,0x29(%esi)
    205d:	c2 67 66             	ret    $0x6667
    2060:	8d 82 a0 36 00 00    	lea    0x36a0(%edx),%eax
    2066:	66 83 c0 04          	add    $0x4,%ax
    206a:	66 68 74 36          	pushw  $0x3674
    206e:	00 00                	add    %al,(%eax)
    2070:	66 50                	push   %ax
    2072:	66 e8 4c fb          	callw  1bc2 <enqueue+0x6a>
    2076:	ff                   	(bad)  
    2077:	ff 66 83             	jmp    *-0x7d(%esi)
    207a:	c4 08                	les    (%eax),%ecx
        PCB_list[v_res].prg_status = READY;
    207c:	66 a1 74 36 66 c1    	mov    0xc1663674,%ax
    2082:	e0 02                	loopne 2086 <do_V+0xdb>
    2084:	66 89 c2             	mov    %ax,%dx
    2087:	66 c1 e2 04          	shl    $0x4,%dx
    208b:	66 01 d0             	add    %dx,%ax
    208e:	66 05 50 31          	add    $0x3150,%ax
    2092:	00 00                	add    %al,(%eax)
    2094:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    209b:	00 00                	add    %al,(%eax)
        enqueue(&readyqueue,v_res);
    209d:	66 a1 74 36 66 50    	mov    0x50663674,%ax
    20a3:	66 68 20 47          	pushw  $0x4720
    20a7:	00 00                	add    %al,(%eax)
    20a9:	66 e8 a9 fa          	callw  1b56 <size+0x11>
    20ad:	ff                   	(bad)  
    20ae:	ff 66 83             	jmp    *-0x7d(%esi)
    20b1:	c4 08                	les    (%eax),%ecx
    }
    __asm__("sti\n");
    20b3:	fb                   	sti    

    20b4:	66 c9                	leavew 
    20b6:	66 c3                	retw   

000020b8 <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    20b8:	66 55                	push   %bp
    20ba:	66 89 e5             	mov    %sp,%bp
    20bd:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    20c1:	66 e8 3a e3          	callw  3ff <_Schedule_once+0x9>
    20c5:	ff                   	(bad)  
    20c6:	ff 67 66             	jmp    *0x66(%edi)
    20c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    20cc:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    20d1:	66 c9                	leavew 
    20d3:	66 c3                	retw   

000020d5 <wait>:
char wait(){
    20d5:	66 55                	push   %bp
    20d7:	66 89 e5             	mov    %sp,%bp
    20da:	66 83 ec 08          	sub    $0x8,%sp
    int temp_ch = _wait();
    20de:	66 e8 35 e3          	callw  417 <_Schedule+0xb>
    20e2:	ff                   	(bad)  
    20e3:	ff 67 66             	jmp    *0x66(%edi)
    20e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char ch = '0' + temp_ch;
    20e9:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    20ee:	66 83 c0 30          	add    $0x30,%ax
    20f2:	67 88 45 fb          	mov    %al,-0x5(%di)
    return ch;
    20f6:	67 8a 45 fb          	mov    -0x5(%di),%al
    //_wait();
}
    20fa:	66 c9                	leavew 
    20fc:	66 c3                	retw   

000020fe <exit>:
void exit(char ch){
    20fe:	66 55                	push   %bp
    2100:	66 89 e5             	mov    %sp,%bp
    2103:	66 83 ec 04          	sub    $0x4,%sp
    2107:	67 66 8b 45 08       	mov    0x8(%di),%ax
    210c:	67 88 45 fc          	mov    %al,-0x4(%di)
    _exit(ch);
    2110:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    2116:	66 50                	push   %ax
    2118:	66 e8 06 e3          	callw  422 <_wait+0x9>
    211c:	ff                   	(bad)  
    211d:	ff 66 83             	jmp    *-0x7d(%esi)
    2120:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2123:	c9                   	leave  
    2124:	66 c3                	retw   

00002126 <GetSem>:
int GetSem(int value){
    2126:	66 55                	push   %bp
    2128:	66 89 e5             	mov    %sp,%bp
    212b:	66 83 ec 04          	sub    $0x4,%sp
    int sema = _GetSem(value);
    212f:	67 66 ff 75 08       	pushw  0x8(%di)
    2134:	66 e8 fc e2          	callw  434 <_exit+0x10>
    2138:	ff                   	(bad)  
    2139:	ff 66 83             	jmp    *-0x7d(%esi)
    213c:	c4 04 67             	les    (%edi,%eiz,2),%eax
    213f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return sema;
    2143:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    2148:	66 c9                	leavew 
    214a:	66 c3                	retw   

0000214c <SemFree>:
void SemFree(int value){
    214c:	66 55                	push   %bp
    214e:	66 89 e5             	mov    %sp,%bp
    _FreeSem(value);
    2151:	67 66 ff 75 08       	pushw  0x8(%di)
    2156:	66 e8 ec e2          	callw  446 <_GetSem+0x10>
    215a:	ff                   	(bad)  
    215b:	ff 66 83             	jmp    *-0x7d(%esi)
    215e:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2161:	c9                   	leave  
    2162:	66 c3                	retw   

00002164 <P>:
void P(int s){   
    2164:	66 55                	push   %bp
    2166:	66 89 e5             	mov    %sp,%bp
    _Pr(s);
    2169:	67 66 ff 75 08       	pushw  0x8(%di)
    216e:	66 e8 e6 e2          	callw  458 <_FreeSem+0x10>
    2172:	ff                   	(bad)  
    2173:	ff 66 83             	jmp    *-0x7d(%esi)
    2176:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2179:	c9                   	leave  
    217a:	66 c3                	retw   

0000217c <V>:
void V(int s){
    217c:	66 55                	push   %bp
    217e:	66 89 e5             	mov    %sp,%bp
    _Vr(s);
    2181:	67 66 ff 75 08       	pushw  0x8(%di)
    2186:	66 e8 e0 e2          	callw  46a <_Pr+0x10>
    218a:	ff                   	(bad)  
    218b:	ff 66 83             	jmp    *-0x7d(%esi)
    218e:	c4 04 66             	les    (%esi,%eiz,2),%eax
    2191:	c9                   	leave  
    2192:	66 c3                	retw   
