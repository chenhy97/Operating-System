
testfork.elf:     file format elf32-i386


Disassembly of section .text:

00000100 <main>:
#include "../syscall/fork.h"
#include "../syscall/stdio.h"
int pid;
int main(){
     100:	66 55                	push   %bp
     102:	66 89 e5             	mov    %sp,%bp
     105:	66 83 ec 18          	sub    $0x18,%sp
    __asm__("mov $0x7000, %eax\n");
     109:	66 b8 00 70          	mov    $0x7000,%ax
     10d:	00 00                	add    %al,(%eax)
    __asm__("mov %ax, %ds\n");
     10f:	8e d8                	mov    %eax,%ds
    __asm__("mov %ax, %es\n");
     111:	8e c0                	mov    %eax,%es
    __asm__("mov %ax, %ss\n");
     113:	8e d0                	mov    %eax,%ss
    __asm__("mov $0x100, %esp");
     115:	66 bc 00 01          	mov    $0x100,%sp
     119:	00 00                	add    %al,(%eax)
    char const* str = "I love 10";
     11b:	67 66 c7 45 fc 64 26 	movw   $0x2664,-0x4(%di)
     122:	00 00                	add    %al,(%eax)
    pid = fork();
     124:	66 e8 5d 24          	callw  2585 <do_V+0x10b>
     128:	00 00                	add    %al,(%eax)
     12a:	66 a3 14 30 66 a1    	mov    %ax,0xa1663014
    printsint(pid);
     130:	14 30                	adc    $0x30,%al
     132:	66 50                	push   %ax
     134:	66 e8 83 10          	callw  11bb <printc+0x27>
     138:	00 00                	add    %al,(%eax)
     13a:	66 83 c4 04          	add    $0x4,%sp
    if(pid == -1){
     13e:	66 a1 14 30 66 83    	mov    0x83663014,%ax
     144:	f8                   	clc    
     145:	ff 75 1b             	pushl  0x1b(%ebp)
        char const *messeage = "Error in fork\n\r";
     148:	67 66 c7 45 f8 6e 26 	movw   $0x266e,-0x8(%di)
     14f:	00 00                	add    %al,(%eax)
        prints(messeage);
     151:	67 66 ff 75 f8       	pushw  -0x8(%di)
     156:	66 e8 e6 0f          	callw  1140 <print+0x8f>
     15a:	00 00                	add    %al,(%eax)
     15c:	66 83 c4 04          	add    $0x4,%sp
     160:	e9 88 00 66 a1       	jmp    a16601ed <_end+0xa165ba89>
    }
    else if(pid){
     165:	14 30                	adc    $0x30,%al
     167:	66 85 c0             	test   %ax,%ax
     16a:	74 43                	je     1af <main+0xaf>
        char const*dad_talk = "I am daddy\n\r";
     16c:	67 66 c7 45 f4 7e 26 	movw   $0x267e,-0xc(%di)
     173:	00 00                	add    %al,(%eax)
        prints(dad_talk);
     175:	67 66 ff 75 f4       	pushw  -0xc(%di)
     17a:	66 e8 c2 0f          	callw  1140 <print+0x8f>
     17e:	00 00                	add    %al,(%eax)
     180:	66 83 c4 04          	add    $0x4,%sp
        char ch = wait();
     184:	66 e8 1a 24          	callw  25a2 <fork+0x1b>
     188:	00 00                	add    %al,(%eax)
     18a:	67 88 45 f3          	mov    %al,-0xd(%di)
        printc(ch);
     18e:	67 66 0f be 45 f3    	movsbw -0xd(%di),%ax
     194:	66 50                	push   %ax
     196:	66 e8 f8 0f          	callw  1192 <prints+0x50>
     19a:	00 00                	add    %al,(%eax)
     19c:	66 83 c4 04          	add    $0x4,%sp
        exit(6);
     1a0:	66 6a 06             	pushw  $0x6
     1a3:	66 e8 24 24          	callw  25cb <wait+0x27>
     1a7:	00 00                	add    %al,(%eax)
     1a9:	66 83 c4 04          	add    $0x4,%sp
     1ad:	eb 3c                	jmp    1eb <main+0xeb>
    }
    else{
        char const*son_talk = "I am son\n\r";
     1af:	67 66 c7 45 ec 8b 26 	movw   $0x268b,-0x14(%di)
     1b6:	00 00                	add    %al,(%eax)
        prints(son_talk);
     1b8:	67 66 ff 75 ec       	pushw  -0x14(%di)
     1bd:	66 e8 7f 0f          	callw  1140 <print+0x8f>
     1c1:	00 00                	add    %al,(%eax)
     1c3:	66 83 c4 04          	add    $0x4,%sp
        int num = countLetterNum("Il10abcd");
     1c7:	66 68 96 26          	pushw  $0x2696
     1cb:	00 00                	add    %al,(%eax)
     1cd:	66 e8 1c 00          	callw  1ed <main+0xed>
     1d1:	00 00                	add    %al,(%eax)
     1d3:	66 83 c4 04          	add    $0x4,%sp
     1d7:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
        exit(num);
     1dc:	67 66 ff 75 e8       	pushw  -0x18(%di)
     1e1:	66 e8 e6 23          	callw  25cb <wait+0x27>
     1e5:	00 00                	add    %al,(%eax)
     1e7:	66 83 c4 04          	add    $0x4,%sp
    }
}
     1eb:	66 c9                	leavew 
     1ed:	66 c3                	retw   

000001ef <countLetterNum>:
int pid;
int countLetterNum(char const* s1){
     1ef:	66 55                	push   %bp
     1f1:	66 89 e5             	mov    %sp,%bp
     1f4:	66 83 ec 08          	sub    $0x8,%sp
    int index = 0;
     1f8:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     1ff:	00 00                	add    %al,(%eax)
    int count = 0;
     201:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     208:	00 00                	add    %al,(%eax)
    while(s1[index] != 0){
     20a:	eb 5a                	jmp    266 <countLetterNum+0x77>
        if((s1[index] >= 'a' && s1[index] <= 'z' )||(s1[index] >= 'A' && s1[index] <= 'Z') ){
     20c:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     211:	67 66 8b 45 08       	mov    0x8(%di),%ax
     216:	66 01 d0             	add    %dx,%ax
     219:	67 8a 00             	mov    (%bx,%si),%al
     21c:	3c 60                	cmp    $0x60,%al
     21e:	7e 14                	jle    234 <countLetterNum+0x45>
     220:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     225:	67 66 8b 45 08       	mov    0x8(%di),%ax
     22a:	66 01 d0             	add    %dx,%ax
     22d:	67 8a 00             	mov    (%bx,%si),%al
     230:	3c 7a                	cmp    $0x7a,%al
     232:	7e 28                	jle    25c <countLetterNum+0x6d>
     234:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     239:	67 66 8b 45 08       	mov    0x8(%di),%ax
     23e:	66 01 d0             	add    %dx,%ax
     241:	67 8a 00             	mov    (%bx,%si),%al
     244:	3c 40                	cmp    $0x40,%al
     246:	7e 19                	jle    261 <countLetterNum+0x72>
     248:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     24d:	67 66 8b 45 08       	mov    0x8(%di),%ax
     252:	66 01 d0             	add    %dx,%ax
     255:	67 8a 00             	mov    (%bx,%si),%al
     258:	3c 5a                	cmp    $0x5a,%al
     25a:	7f 05                	jg     261 <countLetterNum+0x72>
            count ++;
     25c:	67 66 ff 45 f8       	incw   -0x8(%di)
        }
        index ++;
     261:	67 66 ff 45 fc       	incw   -0x4(%di)
}
int pid;
int countLetterNum(char const* s1){
    int index = 0;
    int count = 0;
    while(s1[index] != 0){
     266:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     26b:	67 66 8b 45 08       	mov    0x8(%di),%ax
     270:	66 01 d0             	add    %dx,%ax
     273:	67 8a 00             	mov    (%bx,%si),%al
     276:	84 c0                	test   %al,%al
     278:	75 92                	jne    20c <countLetterNum+0x1d>
        if((s1[index] >= 'a' && s1[index] <= 'z' )||(s1[index] >= 'A' && s1[index] <= 'Z') ){
            count ++;
        }
        index ++;
    }
    return count;
     27a:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
     27f:	66 c9                	leavew 
     281:	66 c3                	retw   
     283:	66 90                	xchg   %ax,%ax
     285:	66 90                	xchg   %ax,%ax
     287:	66 90                	xchg   %ax,%ax
     289:	66 90                	xchg   %ax,%ax
     28b:	66 90                	xchg   %ax,%ax
     28d:	66 90                	xchg   %ax,%ax
     28f:	90                   	nop

00000290 <count>:
     290:	08 2d 00 00 00 00    	or     %ch,0x0

00000291 <alpha>:
     291:	2d 00 00 00 00       	sub    $0x0,%eax

00000292 <int_09_saved>:
     292:	00 00                	add    %al,(%eax)
	...

00000296 <program_saved>:
     296:	70 00                	jo     298 <program_saved+0x2>
	...

0000029a <ds_saved>:
     29a:	7c 00                	jl     29c <ds_saved+0x2>
	...

0000029e <return_save>:
     29e:	88 00                	mov    %al,(%eax)

000002a0 <esi_save>:
     2a0:	96                   	xchg   %eax,%esi
     2a1:	00 00                	add    %al,(%eax)
	...

000002a4 <temp>:
     2a4:	e8 03 b4 00 00       	call   b6ac <_end+0x6f48>

000002a6 <kernelesp_saved>:
     2a6:	b4 00                	mov    $0x0,%ah
	...

000002aa <esp_saved_inkernel>:
     2aa:	c8 00 00 00          	enter  $0x0,$0x0

000002ae <esp_saved_in_user>:
     2ae:	f0 00 00             	lock add %al,(%eax)
	...

000002b2 <ss_saved_in_user>:
     2b2:	2c 01                	sub    $0x1,%al
	...

000002b6 <color>:
     2b6:	01 c2                	add    %eax,%edx

000002b7 <ss_saved_fork>:
     2b7:	c2 01 00             	ret    $0x1
	...

000002bb <retaddr>:
     2bb:	58                   	pop    %eax
     2bc:	02 00                	add    (%eax),%al
	...

000002bf <Message31>:
     2bf:	74 69                	je     32a <_readinput+0x9>
     2c1:	6d                   	insl   (%dx),%es:(%edi)
     2c2:	65 3a 20             	cmp    %gs:(%eax),%ah

000002c5 <_sys_stack_copy>:
     2c5:	c8 00 00 00          	enter  $0x0,$0x0
     2c9:	8e d0                	mov    %eax,%ss
     2cb:	60                   	pusha  
     2cc:	1e                   	push   %ds
     2cd:	8b 46 06             	mov    0x6(%esi),%eax
     2d0:	8b 56 0a             	mov    0xa(%esi),%edx
     2d3:	8b 4e 0e             	mov    0xe(%esi),%ecx
     2d6:	8c db                	mov    %ds,%ebx

000002d8 <while_loop1>:
     2d8:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
     2de:	8e d8                	mov    %eax,%ds
     2e0:	67 8b 1a             	mov    (%bp,%si),%ebx
     2e3:	8e d9                	mov    %ecx,%ds
     2e5:	67 89 1a             	mov    %ebx,(%bp,%si)
     2e8:	83 c2 02             	add    $0x2,%edx
     2eb:	eb eb                	jmp    2d8 <while_loop1>

000002ed <end_for_copy>:
     2ed:	1f                   	pop    %ds
     2ee:	61                   	popa   
     2ef:	c9                   	leave  
     2f0:	66 5a                	pop    %dx
     2f2:	ff e2                	jmp    *%edx

000002f4 <_clearscreen>:
     2f4:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     2f9:	66 5a                	pop    %dx
     2fb:	ff e2                	jmp    *%edx

000002fd <_printchar>:
     2fd:	c8 00 00 00          	enter  $0x0,$0x0
     301:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
     306:	57                   	push   %edi
     307:	66 8b 4e 06          	mov    0x6(%esi),%cx
     30b:	66 8b 7e 0a          	mov    0xa(%esi),%di
     30f:	66 8b 56 0e          	mov    0xe(%esi),%dx
     313:	88 d5                	mov    %dl,%ch
     315:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
     31c:	00 66 5a             	add    %ah,0x5a(%esi)
     31f:	ff e2                	jmp    *%edx

00000321 <_readinput>:
     321:	c8 04 00 00          	enter  $0x4,$0x0
     325:	b4 00                	mov    $0x0,%ah
     327:	cd 16                	int    $0x16
     329:	b4 00                	mov    $0x0,%ah
     32b:	66 67 89 04          	mov    %ax,(%si)
     32f:	24 66                	and    $0x66,%al
     331:	67 8b 04             	mov    (%si),%eax
     334:	24 c9                	and    $0xc9,%al
     336:	66 5a                	pop    %dx
     338:	ff e2                	jmp    *%edx

0000033a <_showchar>:
     33a:	c8 00 00 00          	enter  $0x0,$0x0
     33e:	50                   	push   %eax
     33f:	53                   	push   %ebx
     340:	8b 46 06             	mov    0x6(%esi),%eax
     343:	b4 0e                	mov    $0xe,%ah
     345:	b3 00                	mov    $0x0,%bl
     347:	cd 10                	int    $0x10
     349:	fa                   	cli    
     34a:	5b                   	pop    %ebx
     34b:	58                   	pop    %eax
     34c:	c9                   	leave  
     34d:	66 5a                	pop    %dx
     34f:	ff e2                	jmp    *%edx

00000351 <_setPoint>:
     351:	c8 00 00 00          	enter  $0x0,$0x0
     355:	53                   	push   %ebx
     356:	b7 00                	mov    $0x0,%bh
     358:	8a 77 06             	mov    0x6(%edi),%dh
     35b:	8a 57 0a             	mov    0xa(%edi),%dl
     35e:	b4 02                	mov    $0x2,%ah
     360:	cd 10                	int    $0x10
     362:	5b                   	pop    %ebx
     363:	c9                   	leave  
     364:	66 5a                	pop    %dx
     366:	ff e2                	jmp    *%edx

00000368 <_loadP>:
     368:	c8 00 00 00          	enter  $0x0,$0x0
     36c:	60                   	pusha  
     36d:	06                   	push   %es
     36e:	1e                   	push   %ds
     36f:	8c c8                	mov    %cs,%eax
     371:	8e d8                	mov    %eax,%ds
     373:	8b 46 0e             	mov    0xe(%esi),%eax
     376:	8e c0                	mov    %eax,%es
     378:	b2 00                	mov    $0x0,%dl
     37a:	8b 46 0a             	mov    0xa(%esi),%eax
     37d:	b3 12                	mov    $0x12,%bl
     37f:	f6 f3                	div    %bl
     381:	88 e1                	mov    %ah,%cl
     383:	30 e4                	xor    %ah,%ah
     385:	b3 02                	mov    $0x2,%bl
     387:	f6 f3                	div    %bl
     389:	88 e6                	mov    %ah,%dh
     38b:	88 c5                	mov    %al,%ch
     38d:	8a 46 06             	mov    0x6(%esi),%al
     390:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
     395:	cd 13                	int    $0x13
     397:	1f                   	pop    %ds
     398:	07                   	pop    %es
     399:	61                   	popa   
     39a:	c9                   	leave  
     39b:	66 5a                	pop    %dx
     39d:	ff e2                	jmp    *%edx

0000039f <_RunProgress>:
     39f:	c8 00 00 00          	enter  $0x0,$0x0
     3a3:	8c c8                	mov    %cs,%eax
     3a5:	8e d8                	mov    %eax,%ds
     3a7:	8e c0                	mov    %eax,%es
     3a9:	8b 5e 06             	mov    0x6(%esi),%ebx
     3ac:	c7 06 96 02 00 01    	movl   $0x1000296,(%esi)
     3b2:	89 1e                	mov    %ebx,(%esi)
     3b4:	98                   	cwtl   
     3b5:	02 66 89             	add    -0x77(%esi),%ah
     3b8:	26                   	es
     3b9:	aa                   	stos   %al,%es:(%edi)
     3ba:	02 26                	add    (%esi),%ah
     3bc:	ff 1e                	lcall  *(%esi)
     3be:	96                   	xchg   %eax,%esi
     3bf:	02 8c c8 8e d8 8e c0 	add    -0x3f712772(%eax,%ecx,8),%cl

000003c0 <S>:
     3c0:	8c c8                	mov    %cs,%eax
     3c2:	8e d8                	mov    %eax,%ds
     3c4:	8e c0                	mov    %eax,%es
     3c6:	8e d0                	mov    %eax,%ss
     3c8:	66 8b 26             	mov    (%esi),%sp
     3cb:	aa                   	stos   %al,%es:(%edi)
     3cc:	02 b4 00 cd 16 c9 66 	add    0x66c916cd(%eax,%eax,1),%dh
     3d3:	5a                   	pop    %edx
     3d4:	ff e2                	jmp    *%edx

000003d6 <_Schedule_once>:
     3d6:	c8 00 00 00          	enter  $0x0,$0x0
     3da:	cd 41                	int    $0x41
     3dc:	c9                   	leave  
     3dd:	66 5a                	pop    %dx
     3df:	ff e2                	jmp    *%edx

000003e1 <_fork_user>:
     3e1:	c8 00 00 00          	enter  $0x0,$0x0
     3e5:	cd 39                	int    $0x39
     3e7:	c9                   	leave  
     3e8:	66 5a                	pop    %dx
     3ea:	ff e2                	jmp    *%edx

000003ec <_Schedule>:
     3ec:	c8 00 00 00          	enter  $0x0,$0x0
     3f0:	16                   	push   %ss
     3f1:	cd 23                	int    $0x23
     3f3:	17                   	pop    %ss
     3f4:	c9                   	leave  
     3f5:	66 5a                	pop    %dx
     3f7:	ff e2                	jmp    *%edx

000003f9 <_wait>:
     3f9:	c8 00 00 00          	enter  $0x0,$0x0
     3fd:	cd 3b                	int    $0x3b
     3ff:	c9                   	leave  
     400:	66 5a                	pop    %dx
     402:	ff e2                	jmp    *%edx

00000404 <_exit>:
     404:	c8 00 00 00          	enter  $0x0,$0x0
     408:	66 67 8b 45 06       	mov    0x6(%di),%ax
     40d:	66 50                	push   %ax
     40f:	cd 2a                	int    $0x2a
     411:	c9                   	leave  
     412:	66 5a                	pop    %dx
     414:	ff e2                	jmp    *%edx

00000416 <_GetSem>:
     416:	c8 00 00 00          	enter  $0x0,$0x0
     41a:	66 67 8b 45 06       	mov    0x6(%di),%ax
     41f:	66 50                	push   %ax
     421:	cd 3c                	int    $0x3c
     423:	c9                   	leave  
     424:	66 5a                	pop    %dx
     426:	ff e2                	jmp    *%edx

00000428 <_FreeSem>:
     428:	c8 00 00 00          	enter  $0x0,$0x0
     42c:	66 67 8b 45 06       	mov    0x6(%di),%ax
     431:	66 50                	push   %ax
     433:	cd 3d                	int    $0x3d
     435:	c9                   	leave  
     436:	66 5a                	pop    %dx
     438:	ff e2                	jmp    *%edx

0000043a <_Pr>:
     43a:	c8 00 00 00          	enter  $0x0,$0x0
     43e:	66 67 8b 45 06       	mov    0x6(%di),%ax
     443:	66 50                	push   %ax
     445:	cd 3e                	int    $0x3e
     447:	c9                   	leave  
     448:	66 5a                	pop    %dx
     44a:	ff e2                	jmp    *%edx

0000044c <_Vr>:
     44c:	c8 00 00 00          	enter  $0x0,$0x0
     450:	66 67 8b 45 06       	mov    0x6(%di),%ax
     455:	66 50                	push   %ax
     457:	cd 3f                	int    $0x3f
     459:	c9                   	leave  
     45a:	66 5a                	pop    %dx
     45c:	ff e2                	jmp    *%edx

0000045e <_Schedule_PV>:
     45e:	c8 00 00 00          	enter  $0x0,$0x0
     462:	cd 23                	int    $0x23
     464:	c9                   	leave  
     465:	66 5a                	pop    %dx
     467:	ff e2                	jmp    *%edx

00000469 <_SetINT20h>:
     469:	fa                   	cli    
     46a:	1e                   	push   %ds
     46b:	06                   	push   %es
     46c:	8c c8                	mov    %cs,%eax
     46e:	8e d8                	mov    %eax,%ds
     470:	8e c0                	mov    %eax,%es
     472:	8c 16                	mov    %ss,(%esi)
     474:	b2 02                	mov    $0x2,%dl
     476:	8e d0                	mov    %eax,%ss
     478:	66 89 26             	mov    %sp,(%esi)
     47b:	ae                   	scas   %es:(%edi),%al
     47c:	02 66 8b             	add    -0x75(%esi),%ah
     47f:	26                   	es
     480:	aa                   	stos   %al,%es:(%edi)
     481:	02 53 51             	add    0x51(%ebx),%dl
     484:	52                   	push   %edx
     485:	b4 01                	mov    $0x1,%ah
     487:	cd 16                	int    $0x16
     489:	5a                   	pop    %edx
     48a:	59                   	pop    %ecx
     48b:	5b                   	pop    %ebx
     48c:	8e 16                	mov    (%esi),%ss
     48e:	b2 02                	mov    $0x2,%dl
     490:	66 8b 26             	mov    (%esi),%sp
     493:	ae                   	scas   %es:(%edi),%al
     494:	02 07                	add    (%edi),%al
     496:	1f                   	pop    %ds
     497:	74 0a                	je     4a3 <going_on>
     499:	50                   	push   %eax
     49a:	b4 00                	mov    $0x0,%ah
     49c:	cd 16                	int    $0x16
     49e:	58                   	pop    %eax
     49f:	fb                   	sti    
     4a0:	cd 38                	int    $0x38
     4a2:	cf                   	iret   

000004a3 <going_on>:
     4a3:	fb                   	sti    
     4a4:	cf                   	iret   

000004a5 <_SetINT08h_turn_around>:
     4a5:	e8 39 06 fa 6a       	call   6afa0ae3 <_end+0x6af9c37f>
     4aa:	00 e8                	add    %ch,%al
     4ac:	b0 12                	mov    $0x12,%al
     4ae:	e8 a4 06 b0 20       	call   20b00b57 <_end+0x20afc3f3>
     4b3:	e6 20                	out    %al,$0x20
     4b5:	e6 a0                	out    %al,$0xa0
     4b7:	fb                   	sti    
     4b8:	cf                   	iret   

000004b9 <_SetINT08h>:
     4b9:	60                   	pusha  
     4ba:	0f a8                	push   %gs
     4bc:	1e                   	push   %ds
     4bd:	06                   	push   %es
     4be:	16                   	push   %ss
     4bf:	8c c8                	mov    %cs,%eax
     4c1:	8e c0                	mov    %eax,%es
     4c3:	8e d8                	mov    %eax,%ds
     4c5:	8e d0                	mov    %eax,%ss
     4c7:	fe 0e                	decb   (%esi)
     4c9:	90                   	nop
     4ca:	02 75 4f             	add    0x4f(%ebp),%dh

000004cd <notc>:
     4cd:	80 3e 91             	cmpb   $0x91,(%esi)
     4d0:	02 2d 75 07 c6 06    	add    0x6c60775,%ch
     4d6:	91                   	xchg   %eax,%ecx
     4d7:	02 5c eb 2a          	add    0x2a(%ebx,%ebp,8),%bl

000004db <changleft>:
     4db:	80 3e 91             	cmpb   $0x91,(%esi)
     4de:	02 5c 75 07          	add    0x7(%ebp,%esi,2),%bl
     4e2:	c6 06 91             	movb   $0x91,(%esi)
     4e5:	02 7c eb 1c          	add    0x1c(%ebx,%ebp,8),%bh

000004e9 <changright>:
     4e9:	80 3e 91             	cmpb   $0x91,(%esi)
     4ec:	02 7c 75 07          	add    0x7(%ebp,%esi,2),%bh
     4f0:	c6 06 91             	movb   $0x91,(%esi)
     4f3:	02 2f                	add    (%edi),%ch
     4f5:	eb 0e                	jmp    505 <show>

000004f7 <changheng>:
     4f7:	80 3e 91             	cmpb   $0x91,(%esi)
     4fa:	02 2f                	add    (%edi),%ch
     4fc:	75 cf                	jne    4cd <notc>
     4fe:	c6 06 91             	movb   $0x91,(%esi)
     501:	02 2d eb 00 b9 00    	add    0xb900eb,%ch

00000505 <show>:
     505:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     50a:	b4 09                	mov    $0x9,%ah
     50c:	8a 26                	mov    (%esi),%ah
     50e:	b6 02                	mov    $0x2,%dh
     510:	a0 91 02 65 a3       	mov    0xa3650291,%al
     515:	8e 00                	mov    (%eax),%es
     517:	c6 06 90             	movb   $0x90,(%esi)
     51a:	02 08                	add    (%eax),%cl

0000051c <end>:
     51c:	b0 20                	mov    $0x20,%al
     51e:	e6 20                	out    %al,$0x20
     520:	e6 a0                	out    %al,$0xa0
     522:	17                   	pop    %ss
     523:	07                   	pop    %es
     524:	1f                   	pop    %ds
     525:	0f a9                	pop    %gs
     527:	61                   	popa   
     528:	fb                   	sti    
     529:	cf                   	iret   

0000052a <_SetINT09h>:
     52a:	fa                   	cli    
     52b:	1e                   	push   %ds
     52c:	06                   	push   %es
     52d:	8c c8                	mov    %cs,%eax
     52f:	8e d8                	mov    %eax,%ds
     531:	8e c0                	mov    %eax,%es
     533:	8e d0                	mov    %eax,%ss
     535:	8c 16                	mov    %ss,(%esi)
     537:	b2 02                	mov    $0x2,%dl
     539:	8e d0                	mov    %eax,%ss
     53b:	66 89 26             	mov    %sp,(%esi)
     53e:	ae                   	scas   %es:(%edi),%al
     53f:	02 66 8b             	add    -0x75(%esi),%ah
     542:	26                   	es
     543:	aa                   	stos   %al,%es:(%edi)
     544:	02 60 b9             	add    -0x47(%eax),%ah
     547:	00 b8 8e e9 8a 26    	add    %bh,0x268ae98e(%eax)
     54d:	b6 02                	mov    $0x2,%dh
     54f:	b0 4f                	mov    $0x4f,%al
     551:	65 a3 78 00 b0 55    	mov    %eax,%gs:0x55b00078
     557:	65 a3 7a 00 b0 43    	mov    %eax,%gs:0x43b0007a
     55d:	65 a3 7c 00 b0 48    	mov    %eax,%gs:0x48b0007c
     563:	65 a3 7e 00 b0 53    	mov    %eax,%gs:0x53b0007e
     569:	65 a3 80 00 b0 21    	mov    %eax,%gs:0x21b00080
     56f:	65 a3 82 00 b0 4f    	mov    %eax,%gs:0x4fb00082
     575:	65 a3 84 00 b0 55    	mov    %eax,%gs:0x55b00084
     57b:	65 a3 86 00 b0 43    	mov    %eax,%gs:0x43b00086
     581:	65 a3 88 00 b0 48    	mov    %eax,%gs:0x48b00088
     587:	65 a3 8a 00 b0 21    	mov    %eax,%gs:0x21b0008a
     58d:	65 a3 8c 00 61 80    	mov    %eax,%gs:0x8061008c
     593:	fc                   	cld    
     594:	06                   	push   %es
     595:	75 06                	jne    59d <cont>
     597:	b4 01                	mov    $0x1,%ah
     599:	88 26                	mov    %ah,(%esi)
     59b:	b6 02                	mov    $0x2,%dh

0000059d <cont>:
     59d:	fe 06                	incb   (%esi)
     59f:	b6 02                	mov    $0x2,%dh
     5a1:	8c c8                	mov    %cs,%eax
     5a3:	8e c0                	mov    %eax,%es
     5a5:	fb                   	sti    
     5a6:	9c                   	pushf  
     5a7:	26 ff 1e             	lcall  *%es:(%esi)
     5aa:	92                   	xchg   %eax,%edx
     5ab:	02 8e 16 b2 02 66    	add    0x6602b216(%esi),%cl
     5b1:	8b 26                	mov    (%esi),%esp
     5b3:	ae                   	scas   %es:(%edi),%al
     5b4:	02 07                	add    (%edi),%al
     5b6:	1f                   	pop    %ds
     5b7:	cf                   	iret   

000005b8 <_SetINT33h>:
     5b8:	fa                   	cli    
     5b9:	c8 00 00 00          	enter  $0x0,$0x0
     5bd:	60                   	pusha  
     5be:	1e                   	push   %ds
     5bf:	0f a8                	push   %gs
     5c1:	06                   	push   %es
     5c2:	8c c8                	mov    %cs,%eax
     5c4:	8e c0                	mov    %eax,%es
     5c6:	8e d8                	mov    %eax,%ds
     5c8:	8c 16                	mov    %ss,(%esi)
     5ca:	b2 02                	mov    $0x2,%dl
     5cc:	8e d0                	mov    %eax,%ss
     5ce:	66 89 26             	mov    %sp,(%esi)
     5d1:	ae                   	scas   %es:(%edi),%al
     5d2:	02 66 8b             	add    -0x75(%esi),%ah
     5d5:	26                   	es
     5d6:	aa                   	stos   %al,%es:(%edi)
     5d7:	02 6a 00             	add    0x0(%edx),%ch
     5da:	e8 06 08 8e 16       	call   168e0de5 <_end+0x168dc681>
     5df:	b2 02                	mov    $0x2,%dl
     5e1:	66 8b 26             	mov    (%esi),%sp
     5e4:	ae                   	scas   %es:(%edi),%al
     5e5:	02 07                	add    (%edi),%al
     5e7:	0f a9                	pop    %gs
     5e9:	1f                   	pop    %ds
     5ea:	61                   	popa   
     5eb:	fb                   	sti    
     5ec:	c9                   	leave  
     5ed:	cf                   	iret   

000005ee <_SetINT34h>:
     5ee:	fa                   	cli    
     5ef:	c8 00 00 00          	enter  $0x0,$0x0
     5f3:	60                   	pusha  
     5f4:	1e                   	push   %ds
     5f5:	0f a8                	push   %gs
     5f7:	06                   	push   %es
     5f8:	8c c8                	mov    %cs,%eax
     5fa:	8e c0                	mov    %eax,%es
     5fc:	8e d8                	mov    %eax,%ds
     5fe:	8c 16                	mov    %ss,(%esi)
     600:	b2 02                	mov    $0x2,%dl
     602:	8e d0                	mov    %eax,%ss
     604:	66 89 26             	mov    %sp,(%esi)
     607:	ae                   	scas   %es:(%edi),%al
     608:	02 66 8b             	add    -0x75(%esi),%ah
     60b:	26                   	es
     60c:	aa                   	stos   %al,%es:(%edi)
     60d:	02 6a 00             	add    0x0(%edx),%ch
     610:	e8 80 08 8e 16       	call   168e0e95 <_end+0x168dc731>
     615:	b2 02                	mov    $0x2,%dl
     617:	66 8b 26             	mov    (%esi),%sp
     61a:	ae                   	scas   %es:(%edi),%al
     61b:	02 07                	add    (%edi),%al
     61d:	0f a9                	pop    %gs
     61f:	1f                   	pop    %ds
     620:	61                   	popa   
     621:	fb                   	sti    
     622:	c9                   	leave  
     623:	cf                   	iret   

00000624 <_SetINT35h>:
     624:	60                   	pusha  
     625:	1e                   	push   %ds
     626:	0f a8                	push   %gs
     628:	06                   	push   %es
     629:	8c c8                	mov    %cs,%eax
     62b:	8e c0                	mov    %eax,%es
     62d:	8e d8                	mov    %eax,%ds
     62f:	8c 16                	mov    %ss,(%esi)
     631:	b2 02                	mov    $0x2,%dl
     633:	8e d0                	mov    %eax,%ss
     635:	66 89 26             	mov    %sp,(%esi)
     638:	ae                   	scas   %es:(%edi),%al
     639:	02 66 8b             	add    -0x75(%esi),%ah
     63c:	26                   	es
     63d:	aa                   	stos   %al,%es:(%edi)
     63e:	02 6a 00             	add    0x0(%edx),%ch
     641:	e8 2e 09 8e 16       	call   168e0f74 <_end+0x168dc810>
     646:	b2 02                	mov    $0x2,%dl
     648:	66 8b 26             	mov    (%esi),%sp
     64b:	ae                   	scas   %es:(%edi),%al
     64c:	02 07                	add    (%edi),%al
     64e:	0f a9                	pop    %gs
     650:	1f                   	pop    %ds
     651:	61                   	popa   
     652:	fb                   	sti    
     653:	cf                   	iret   

00000654 <_SetINT36h>:
     654:	60                   	pusha  
     655:	1e                   	push   %ds
     656:	0f a8                	push   %gs
     658:	06                   	push   %es
     659:	8c c8                	mov    %cs,%eax
     65b:	8e c0                	mov    %eax,%es
     65d:	8e d8                	mov    %eax,%ds
     65f:	8c 16                	mov    %ss,(%esi)
     661:	b2 02                	mov    $0x2,%dl
     663:	8e d0                	mov    %eax,%ss
     665:	66 89 26             	mov    %sp,(%esi)
     668:	ae                   	scas   %es:(%edi),%al
     669:	02 66 8b             	add    -0x75(%esi),%ah
     66c:	26                   	es
     66d:	aa                   	stos   %al,%es:(%edi)
     66e:	02 6a 00             	add    0x0(%edx),%ch
     671:	e8 84 09 8e 16       	call   168e0ffa <_end+0x168dc896>
     676:	b2 02                	mov    $0x2,%dl
     678:	66 8b 26             	mov    (%esi),%sp
     67b:	ae                   	scas   %es:(%edi),%al
     67c:	02 07                	add    (%edi),%al
     67e:	0f a9                	pop    %gs
     680:	1f                   	pop    %ds
     681:	61                   	popa   
     682:	fb                   	sti    
     683:	cf                   	iret   

00000684 <_SetINT21h>:
     684:	c8 00 00 00          	enter  $0x0,$0x0
     688:	60                   	pusha  
     689:	1e                   	push   %ds
     68a:	0f a8                	push   %gs
     68c:	06                   	push   %es
     68d:	8c c8                	mov    %cs,%eax
     68f:	8e c0                	mov    %eax,%es
     691:	8e d8                	mov    %eax,%ds
     693:	8b 46 08             	mov    0x8(%esi),%eax
     696:	80 fc 00             	cmp    $0x0,%ah
     699:	74 16                	je     6b1 <fn0>
     69b:	80 fc 01             	cmp    $0x1,%ah
     69e:	74 21                	je     6c1 <fn1>
     6a0:	80 fc 02             	cmp    $0x2,%ah
     6a3:	74 3d                	je     6e2 <fn2>
     6a5:	80 fc 03             	cmp    $0x3,%ah
     6a8:	74 5f                	je     709 <fn3>
     6aa:	07                   	pop    %es
     6ab:	0f a9                	pop    %gs
     6ad:	1f                   	pop    %ds
     6ae:	61                   	popa   
     6af:	c9                   	leave  
     6b0:	cf                   	iret   

000006b1 <fn0>:
     6b1:	8b 46 0a             	mov    0xa(%esi),%eax
     6b4:	b4 0e                	mov    $0xe,%ah
     6b6:	b3 00                	mov    $0x0,%bl
     6b8:	cd 10                	int    $0x10
     6ba:	07                   	pop    %es
     6bb:	0f a9                	pop    %gs
     6bd:	1f                   	pop    %ds
     6be:	61                   	popa   
     6bf:	c9                   	leave  
     6c0:	cf                   	iret   

000006c1 <fn1>:
     6c1:	66 83 ec 04          	sub    $0x4,%sp
     6c5:	b4 00                	mov    $0x0,%ah
     6c7:	cd 16                	int    $0x16
     6c9:	b4 00                	mov    $0x0,%ah
     6cb:	66 67 89 04          	mov    %ax,(%si)
     6cf:	24 66                	and    $0x66,%al
     6d1:	67 8b 04             	mov    (%si),%eax
     6d4:	24 66                	and    $0x66,%al
     6d6:	83 c4 04             	add    $0x4,%esp
     6d9:	8e e0                	mov    %eax,%fs
     6db:	07                   	pop    %es
     6dc:	0f a9                	pop    %gs
     6de:	1f                   	pop    %ds
     6df:	61                   	popa   
     6e0:	c9                   	leave  
     6e1:	cf                   	iret   

000006e2 <fn2>:
     6e2:	66 83 ec 04          	sub    $0x4,%sp
     6e6:	b4 00                	mov    $0x0,%ah
     6e8:	cd 16                	int    $0x16
     6ea:	b4 00                	mov    $0x0,%ah
     6ec:	66 67 89 04          	mov    %ax,(%si)
     6f0:	24 66                	and    $0x66,%al
     6f2:	67 8b 04             	mov    (%si),%eax
     6f5:	24 b4                	and    $0xb4,%al
     6f7:	0e                   	push   %cs
     6f8:	b3 00                	mov    $0x0,%bl
     6fa:	cd 10                	int    $0x10
     6fc:	66 83 c4 04          	add    $0x4,%sp
     700:	8e e0                	mov    %eax,%fs
     702:	07                   	pop    %es
     703:	0f a9                	pop    %gs
     705:	1f                   	pop    %ds
     706:	61                   	popa   
     707:	c9                   	leave  
     708:	cf                   	iret   

00000709 <fn3>:
     709:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     70e:	07                   	pop    %es
     70f:	0f a9                	pop    %gs
     711:	1f                   	pop    %ds
     712:	61                   	popa   
     713:	c9                   	leave  
     714:	cf                   	iret   

00000715 <_SetINT37h>:
     715:	fa                   	cli    
     716:	e8 90 04 cf fa       	call   facf0bab <_end+0xfacec447>

0000071a <_SetINT38h>:
     71a:	fa                   	cli    
     71b:	50                   	push   %eax
     71c:	1e                   	push   %ds
     71d:	8c c8                	mov    %cs,%eax
     71f:	8e d8                	mov    %eax,%ds
     721:	6a 00                	push   $0x0
     723:	e8 43 11 1f 58       	call   581f186b <_end+0x581ed107>
     728:	fb                   	sti    
     729:	cf                   	iret   

0000072a <_SetINT39h>:
     72a:	fa                   	cli    
     72b:	c8 00 00 00          	enter  $0x0,$0x0
     72f:	1e                   	push   %ds
     730:	6a 00                	push   $0x0
     732:	8c c8                	mov    %cs,%eax
     734:	8e d8                	mov    %eax,%ds
     736:	e8 2c 13 1f c9       	call   c91f1a67 <_end+0xc91ed303>
     73b:	fb                   	sti    
     73c:	cf                   	iret   

0000073d <_SetINT41h>:
     73d:	fa                   	cli    
     73e:	e8 a0 03 e8 11       	call   11e80ae3 <_end+0x11e7c37f>
     743:	04 b0                	add    $0xb0,%al
     745:	20 e6                	and    %ah,%dh
     747:	20 e6                	and    %ah,%dh
     749:	a0 fb cf fa c8       	mov    0xc8facffb,%al

0000074c <_SetINT2Ah>:
     74c:	fa                   	cli    
     74d:	c8 00 00 00          	enter  $0x0,$0x0
     751:	1e                   	push   %ds
     752:	66 67 8b 45 08       	mov    0x8(%di),%ax
     757:	66 50                	push   %ax
     759:	6a 00                	push   $0x0
     75b:	8c c8                	mov    %cs,%eax
     75d:	8e d8                	mov    %eax,%ds
     75f:	e8 98 15 58 1f       	call   1f581cfc <_end+0x1f57d598>
     764:	c9                   	leave  
     765:	fb                   	sti    
     766:	cf                   	iret   

00000767 <_SetINT3Bh>:
     767:	fa                   	cli    
     768:	c8 00 00 00          	enter  $0x0,$0x0
     76c:	1e                   	push   %ds
     76d:	6a 00                	push   $0x0
     76f:	8c c8                	mov    %cs,%eax
     771:	8e d8                	mov    %eax,%ds
     773:	e8 51 16 1f c9       	call   c91f1dc9 <_end+0xc91ed665>
     778:	fb                   	sti    
     779:	cf                   	iret   

0000077a <_SetINT3Ch>:
     77a:	fa                   	cli    
     77b:	c8 00 00 00          	enter  $0x0,$0x0
     77f:	1e                   	push   %ds
     780:	66 67 8b 45 08       	mov    0x8(%di),%ax
     785:	66 50                	push   %ax
     787:	6a 00                	push   $0x0
     789:	8c c8                	mov    %cs,%eax
     78b:	8e d8                	mov    %eax,%ds
     78d:	e8 8c 1a 66 83       	call   8366221e <_end+0x8365daba>
     792:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     795:	c9                   	leave  
     796:	fb                   	sti    
     797:	cf                   	iret   

00000798 <_SetINT3Dh>:
     798:	fa                   	cli    
     799:	c8 00 00 00          	enter  $0x0,$0x0
     79d:	1e                   	push   %ds
     79e:	66 67 8b 45 08       	mov    0x8(%di),%ax
     7a3:	66 50                	push   %ax
     7a5:	6a 00                	push   $0x0
     7a7:	8c c8                	mov    %cs,%eax
     7a9:	8e d8                	mov    %eax,%ds
     7ab:	e8 46 1b 66 83       	call   836622f6 <_end+0x8365db92>
     7b0:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     7b3:	c9                   	leave  
     7b4:	fb                   	sti    
     7b5:	cf                   	iret   

000007b6 <_SetINT3Eh>:
     7b6:	c8 00 00 00          	enter  $0x0,$0x0
     7ba:	1e                   	push   %ds
     7bb:	66 67 8b 45 08       	mov    0x8(%di),%ax
     7c0:	66 50                	push   %ax
     7c2:	6a 00                	push   $0x0
     7c4:	8c c8                	mov    %cs,%eax
     7c6:	8e d8                	mov    %eax,%ds
     7c8:	e8 63 1b 66 83       	call   83662330 <_end+0x8365dbcc>
     7cd:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     7d0:	c9                   	leave  
     7d1:	cf                   	iret   

000007d2 <_SetINT3Fh>:
     7d2:	c8 00 00 00          	enter  $0x0,$0x0
     7d6:	1e                   	push   %ds
     7d7:	66 67 8b 45 08       	mov    0x8(%di),%ax
     7dc:	66 50                	push   %ax
     7de:	6a 00                	push   $0x0
     7e0:	8c c8                	mov    %cs,%eax
     7e2:	8e d8                	mov    %eax,%ds
     7e4:	e8 93 1c 66 83       	call   8366247c <_end+0x8365dd18>
     7e9:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     7ec:	c9                   	leave  
     7ed:	cf                   	iret   

000007ee <_initialInt>:
     7ee:	c8 00 00 00          	enter  $0x0,$0x0
     7f2:	60                   	pusha  
     7f3:	06                   	push   %es
     7f4:	1e                   	push   %ds
     7f5:	8c c8                	mov    %cs,%eax
     7f7:	8e d8                	mov    %eax,%ds
     7f9:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     7fe:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
     803:	00 f7                	add    %dh,%bh
     805:	e3 89                	jecxz  790 <_SetINT3Ch+0x16>
     807:	c7                   	(bad)  
     808:	b8 69 04 26 89       	mov    $0x89260469,%eax
     80d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     812:	45                   	inc    %ebp
     813:	02 1f                	add    (%edi),%bl
     815:	07                   	pop    %es
     816:	61                   	popa   
     817:	60                   	pusha  
     818:	06                   	push   %es
     819:	1e                   	push   %ds
     81a:	8c c8                	mov    %cs,%eax
     81c:	8e d8                	mov    %eax,%ds
     81e:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     823:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
     828:	00 f7                	add    %dh,%bh
     82a:	e3 89                	jecxz  7b5 <_SetINT3Dh+0x1d>
     82c:	c7                   	(bad)  
     82d:	b8 b8 05 26 89       	mov    $0x892605b8,%eax
     832:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     837:	45                   	inc    %ebp
     838:	02 1f                	add    (%edi),%bl
     83a:	07                   	pop    %es
     83b:	61                   	popa   
     83c:	60                   	pusha  
     83d:	06                   	push   %es
     83e:	1e                   	push   %ds
     83f:	8c c8                	mov    %cs,%eax
     841:	8e d8                	mov    %eax,%ds
     843:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     848:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
     84d:	00 f7                	add    %dh,%bh
     84f:	e3 89                	jecxz  7da <_SetINT3Fh+0x8>
     851:	c7                   	(bad)  
     852:	b8 ee 05 26 89       	mov    $0x892605ee,%eax
     857:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     85c:	45                   	inc    %ebp
     85d:	02 1f                	add    (%edi),%bl
     85f:	07                   	pop    %es
     860:	61                   	popa   
     861:	60                   	pusha  
     862:	06                   	push   %es
     863:	1e                   	push   %ds
     864:	8c c8                	mov    %cs,%eax
     866:	8e d8                	mov    %eax,%ds
     868:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     86d:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
     872:	00 f7                	add    %dh,%bh
     874:	e3 89                	jecxz  7ff <_initialInt+0x11>
     876:	c7                   	(bad)  
     877:	b8 24 06 26 89       	mov    $0x89260624,%eax
     87c:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     881:	45                   	inc    %ebp
     882:	02 1f                	add    (%edi),%bl
     884:	07                   	pop    %es
     885:	61                   	popa   
     886:	60                   	pusha  
     887:	06                   	push   %es
     888:	1e                   	push   %ds
     889:	8c c8                	mov    %cs,%eax
     88b:	8e d8                	mov    %eax,%ds
     88d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     892:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
     897:	00 f7                	add    %dh,%bh
     899:	e3 89                	jecxz  824 <_initialInt+0x36>
     89b:	c7                   	(bad)  
     89c:	b8 54 06 26 89       	mov    $0x89260654,%eax
     8a1:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8a6:	45                   	inc    %ebp
     8a7:	02 1f                	add    (%edi),%bl
     8a9:	07                   	pop    %es
     8aa:	61                   	popa   
     8ab:	60                   	pusha  
     8ac:	06                   	push   %es
     8ad:	1e                   	push   %ds
     8ae:	8c c8                	mov    %cs,%eax
     8b0:	8e d8                	mov    %eax,%ds
     8b2:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8b7:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
     8bc:	00 f7                	add    %dh,%bh
     8be:	e3 89                	jecxz  849 <_initialInt+0x5b>
     8c0:	c7                   	(bad)  
     8c1:	b8 84 06 26 89       	mov    $0x89260684,%eax
     8c6:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8cb:	45                   	inc    %ebp
     8cc:	02 1f                	add    (%edi),%bl
     8ce:	07                   	pop    %es
     8cf:	61                   	popa   
     8d0:	60                   	pusha  
     8d1:	06                   	push   %es
     8d2:	1e                   	push   %ds
     8d3:	8c c8                	mov    %cs,%eax
     8d5:	8e d8                	mov    %eax,%ds
     8d7:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8dc:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
     8e1:	00 f7                	add    %dh,%bh
     8e3:	e3 89                	jecxz  86e <_initialInt+0x80>
     8e5:	c7                   	(bad)  
     8e6:	b8 15 07 26 89       	mov    $0x89260715,%eax
     8eb:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8f0:	45                   	inc    %ebp
     8f1:	02 1f                	add    (%edi),%bl
     8f3:	07                   	pop    %es
     8f4:	61                   	popa   
     8f5:	60                   	pusha  
     8f6:	06                   	push   %es
     8f7:	1e                   	push   %ds
     8f8:	8c c8                	mov    %cs,%eax
     8fa:	8e d8                	mov    %eax,%ds
     8fc:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     901:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
     906:	00 f7                	add    %dh,%bh
     908:	e3 89                	jecxz  893 <_initialInt+0xa5>
     90a:	c7                   	(bad)  
     90b:	b8 1a 07 26 89       	mov    $0x8926071a,%eax
     910:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     915:	45                   	inc    %ebp
     916:	02 1f                	add    (%edi),%bl
     918:	07                   	pop    %es
     919:	61                   	popa   
     91a:	60                   	pusha  
     91b:	06                   	push   %es
     91c:	1e                   	push   %ds
     91d:	8c c8                	mov    %cs,%eax
     91f:	8e d8                	mov    %eax,%ds
     921:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     926:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
     92b:	00 f7                	add    %dh,%bh
     92d:	e3 89                	jecxz  8b8 <_initialInt+0xca>
     92f:	c7                   	(bad)  
     930:	b8 2a 07 26 89       	mov    $0x8926072a,%eax
     935:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     93a:	45                   	inc    %ebp
     93b:	02 1f                	add    (%edi),%bl
     93d:	07                   	pop    %es
     93e:	61                   	popa   
     93f:	60                   	pusha  
     940:	06                   	push   %es
     941:	1e                   	push   %ds
     942:	8c c8                	mov    %cs,%eax
     944:	8e d8                	mov    %eax,%ds
     946:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     94b:	b8 2a 00 bb 04       	mov    $0x4bb002a,%eax
     950:	00 f7                	add    %dh,%bh
     952:	e3 89                	jecxz  8dd <_initialInt+0xef>
     954:	c7                   	(bad)  
     955:	b8 4c 07 26 89       	mov    $0x8926074c,%eax
     95a:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     95f:	45                   	inc    %ebp
     960:	02 1f                	add    (%edi),%bl
     962:	07                   	pop    %es
     963:	61                   	popa   
     964:	60                   	pusha  
     965:	06                   	push   %es
     966:	1e                   	push   %ds
     967:	8c c8                	mov    %cs,%eax
     969:	8e d8                	mov    %eax,%ds
     96b:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     970:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
     975:	00 f7                	add    %dh,%bh
     977:	e3 89                	jecxz  902 <_initialInt+0x114>
     979:	c7                   	(bad)  
     97a:	b8 3d 07 26 89       	mov    $0x8926073d,%eax
     97f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     984:	45                   	inc    %ebp
     985:	02 1f                	add    (%edi),%bl
     987:	07                   	pop    %es
     988:	61                   	popa   
     989:	60                   	pusha  
     98a:	06                   	push   %es
     98b:	1e                   	push   %ds
     98c:	8c c8                	mov    %cs,%eax
     98e:	8e d8                	mov    %eax,%ds
     990:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     995:	b8 23 00 bb 04       	mov    $0x4bb0023,%eax
     99a:	00 f7                	add    %dh,%bh
     99c:	e3 89                	jecxz  927 <_initialInt+0x139>
     99e:	c7                   	(bad)  
     99f:	b8 a5 04 26 89       	mov    $0x892604a5,%eax
     9a4:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9a9:	45                   	inc    %ebp
     9aa:	02 1f                	add    (%edi),%bl
     9ac:	07                   	pop    %es
     9ad:	61                   	popa   
     9ae:	60                   	pusha  
     9af:	06                   	push   %es
     9b0:	1e                   	push   %ds
     9b1:	8c c8                	mov    %cs,%eax
     9b3:	8e d8                	mov    %eax,%ds
     9b5:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     9ba:	b8 3b 00 bb 04       	mov    $0x4bb003b,%eax
     9bf:	00 f7                	add    %dh,%bh
     9c1:	e3 89                	jecxz  94c <_initialInt+0x15e>
     9c3:	c7                   	(bad)  
     9c4:	b8 67 07 26 89       	mov    $0x89260767,%eax
     9c9:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9ce:	45                   	inc    %ebp
     9cf:	02 1f                	add    (%edi),%bl
     9d1:	07                   	pop    %es
     9d2:	61                   	popa   
     9d3:	60                   	pusha  
     9d4:	06                   	push   %es
     9d5:	1e                   	push   %ds
     9d6:	8c c8                	mov    %cs,%eax
     9d8:	8e d8                	mov    %eax,%ds
     9da:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     9df:	b8 3c 00 bb 04       	mov    $0x4bb003c,%eax
     9e4:	00 f7                	add    %dh,%bh
     9e6:	e3 89                	jecxz  971 <_initialInt+0x183>
     9e8:	c7                   	(bad)  
     9e9:	b8 7a 07 26 89       	mov    $0x8926077a,%eax
     9ee:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9f3:	45                   	inc    %ebp
     9f4:	02 1f                	add    (%edi),%bl
     9f6:	07                   	pop    %es
     9f7:	61                   	popa   
     9f8:	60                   	pusha  
     9f9:	06                   	push   %es
     9fa:	1e                   	push   %ds
     9fb:	8c c8                	mov    %cs,%eax
     9fd:	8e d8                	mov    %eax,%ds
     9ff:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a04:	b8 3d 00 bb 04       	mov    $0x4bb003d,%eax
     a09:	00 f7                	add    %dh,%bh
     a0b:	e3 89                	jecxz  996 <_initialInt+0x1a8>
     a0d:	c7                   	(bad)  
     a0e:	b8 98 07 26 89       	mov    $0x89260798,%eax
     a13:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a18:	45                   	inc    %ebp
     a19:	02 1f                	add    (%edi),%bl
     a1b:	07                   	pop    %es
     a1c:	61                   	popa   
     a1d:	60                   	pusha  
     a1e:	06                   	push   %es
     a1f:	1e                   	push   %ds
     a20:	8c c8                	mov    %cs,%eax
     a22:	8e d8                	mov    %eax,%ds
     a24:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a29:	b8 3e 00 bb 04       	mov    $0x4bb003e,%eax
     a2e:	00 f7                	add    %dh,%bh
     a30:	e3 89                	jecxz  9bb <_initialInt+0x1cd>
     a32:	c7                   	(bad)  
     a33:	b8 b6 07 26 89       	mov    $0x892607b6,%eax
     a38:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a3d:	45                   	inc    %ebp
     a3e:	02 1f                	add    (%edi),%bl
     a40:	07                   	pop    %es
     a41:	61                   	popa   
     a42:	60                   	pusha  
     a43:	06                   	push   %es
     a44:	1e                   	push   %ds
     a45:	8c c8                	mov    %cs,%eax
     a47:	8e d8                	mov    %eax,%ds
     a49:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a4e:	b8 3f 00 bb 04       	mov    $0x4bb003f,%eax
     a53:	00 f7                	add    %dh,%bh
     a55:	e3 89                	jecxz  9e0 <_initialInt+0x1f2>
     a57:	c7                   	(bad)  
     a58:	b8 d2 07 26 89       	mov    $0x892607d2,%eax
     a5d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a62:	45                   	inc    %ebp
     a63:	02 1f                	add    (%edi),%bl
     a65:	07                   	pop    %es
     a66:	61                   	popa   
     a67:	c9                   	leave  
     a68:	66 5a                	pop    %dx
     a6a:	ff e2                	jmp    *%edx

00000a6c <_initialInt_09h>:
     a6c:	c8 00 00 00          	enter  $0x0,$0x0
     a70:	a1 24 00 a3 92       	mov    0x92a30024,%eax
     a75:	02 a1 26 00 a3 94    	add    -0x6b5cffda(%ecx),%ah
     a7b:	02 60 06             	add    0x6(%eax),%ah
     a7e:	1e                   	push   %ds
     a7f:	8c c8                	mov    %cs,%eax
     a81:	8e d8                	mov    %eax,%ds
     a83:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a88:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
     a8d:	00 f7                	add    %dh,%bh
     a8f:	e3 89                	jecxz  a1a <_initialInt+0x22c>
     a91:	c7                   	(bad)  
     a92:	b8 2a 05 26 89       	mov    $0x8926052a,%eax
     a97:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a9c:	45                   	inc    %ebp
     a9d:	02 1f                	add    (%edi),%bl
     a9f:	07                   	pop    %es
     aa0:	61                   	popa   
     aa1:	c9                   	leave  
     aa2:	66 5a                	pop    %dx
     aa4:	ff e2                	jmp    *%edx

00000aa6 <_initialInt_08h>:
     aa6:	c8 00 00 00          	enter  $0x0,$0x0
     aaa:	b0 40                	mov    $0x40,%al
     aac:	e6 43                	out    %al,$0x43
     aae:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
     ab3:	88 e0                	mov    %ah,%al
     ab5:	e6 40                	out    %al,$0x40
     ab7:	60                   	pusha  
     ab8:	06                   	push   %es
     ab9:	1e                   	push   %ds
     aba:	8c c8                	mov    %cs,%eax
     abc:	8e d8                	mov    %eax,%ds
     abe:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     ac3:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
     ac8:	00 f7                	add    %dh,%bh
     aca:	e3 89                	jecxz  a55 <_initialInt+0x267>
     acc:	c7                   	(bad)  
     acd:	b8 a5 04 26 89       	mov    $0x892604a5,%eax
     ad2:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     ad7:	45                   	inc    %ebp
     ad8:	02 1f                	add    (%edi),%bl
     ada:	07                   	pop    %es
     adb:	61                   	popa   
     adc:	c9                   	leave  
     add:	66 5a                	pop    %dx
     adf:	ff e2                	jmp    *%edx

00000ae1 <_save>:
     ae1:	66 89 26             	mov    %sp,(%esi)
     ae4:	aa                   	stos   %al,%es:(%edi)
     ae5:	02 1e                	add    (%esi),%bl
     ae7:	0e                   	push   %cs
     ae8:	1f                   	pop    %ds
     ae9:	8f 06                	popl   (%esi)
     aeb:	9a 02 8f 06 9e 02 66 	lcall  $0x6602,$0x9e068f02
     af2:	89 26                	mov    %esp,(%esi)
     af4:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
     af5:	02 66 89             	add    -0x77(%esi),%ah
     af8:	36 a0 02 66 8b 36    	mov    %ss:0x368b6602,%al
     afe:	44                   	inc    %esp
     aff:	36                   	ss
     b00:	66 83 c6 2c          	add    $0x2c,%si
     b04:	67 8f 06 67 8f       	popl   -0x7099
     b09:	46                   	inc    %esi
     b0a:	04 67                	add    $0x67,%al
     b0c:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
     b13:	46                   	inc    %esi
     b14:	08 67 c7             	or     %ah,-0x39(%edi)
     b17:	46                   	inc    %esi
     b18:	0a 00                	or     (%eax),%al
     b1a:	00 66 67             	add    %ah,0x67(%esi)
     b1d:	89 66 fc             	mov    %esp,-0x4(%esi)
     b20:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
     b24:	8c de                	mov    %ds,%esi
     b26:	8e d6                	mov    %esi,%ss
     b28:	66 8b 26             	mov    (%esi),%sp
     b2b:	44                   	inc    %esp
     b2c:	36                   	ss
     b2d:	66 83 c4 24          	add    $0x24,%sp
     b31:	6a 00                	push   $0x0
     b33:	ff 36                	pushl  (%esi)
     b35:	9a 02 6a 00 06 66 55 	lcall  $0x5566,$0x6006a02
     b3c:	66 57                	push   %di
     b3e:	66 ff 36             	pushw  (%esi)
     b41:	a0 02 66 52 66       	mov    0x66526602,%al
     b46:	51                   	push   %ecx
     b47:	66 53                	push   %bx
     b49:	66 50                	push   %ax
     b4b:	66 8b 26             	mov    (%esi),%sp
     b4e:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
     b4f:	02 a1 9e 02 ff e0    	add    -0x1f00fd62(%ecx),%ah

00000b55 <_restart>:
     b55:	66 89 26             	mov    %sp,(%esi)
     b58:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
     b59:	02 66 8b             	add    -0x75(%esi),%ah
     b5c:	26                   	es
     b5d:	44                   	inc    %esp
     b5e:	36                   	ss
     b5f:	66 58                	pop    %ax
     b61:	66 5b                	pop    %bx
     b63:	66 59                	pop    %cx
     b65:	66 5a                	pop    %dx
     b67:	66 5e                	pop    %si
     b69:	66 5f                	pop    %di
     b6b:	66 5d                	pop    %bp
     b6d:	07                   	pop    %es
     b6e:	8f 06                	popl   (%esi)
     b70:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     b71:	02 8f 06 9a 02 8f    	add    -0x70fd65fa(%edi),%cl
     b77:	06                   	push   %es
     b78:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     b79:	02 66 89             	add    -0x77(%esi),%ah
     b7c:	36 a0 02 17 8f 06    	mov    %ss:0x68f1702,%al
     b82:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     b83:	02 66 89             	add    -0x77(%esi),%ah
     b86:	e6 66                	out    %al,$0x66
     b88:	67 8b 26 67 ff       	mov    -0x99,%esp
     b8d:	76 0c                	jbe    b9b <_restart+0x46>
     b8f:	67 ff 76 08          	pushl  0x8(%bp)
     b93:	67 ff 76 04          	pushl  0x4(%bp)
     b97:	66 8b 36             	mov    (%esi),%si
     b9a:	a0 02 8e 1e 9a       	mov    0x9a1e8e02,%al
     b9f:	02 50 b0             	add    -0x50(%eax),%dl
     ba2:	20 e6                	and    %ah,%dh
     ba4:	20 e6                	and    %ah,%dh
     ba6:	a0 58 cf c8 00       	mov    0xc8cf58,%al

00000ba9 <RTC_Timer>:
     ba9:	c8 00 00 00          	enter  $0x0,$0x0
     bad:	1e                   	push   %ds
     bae:	06                   	push   %es
     baf:	60                   	pusha  
     bb0:	8c c8                	mov    %cs,%eax
     bb2:	8e d8                	mov    %eax,%ds
     bb4:	8c c8                	mov    %cs,%eax
     bb6:	8e c0                	mov    %eax,%es
     bb8:	bf 00 30 b4 02       	mov    $0x2b43000,%edi
     bbd:	cd 1a                	int    $0x1a
     bbf:	88 e8                	mov    %ch,%al
     bc1:	b4 00                	mov    $0x0,%ah
     bc3:	b3 10                	mov    $0x10,%bl
     bc5:	f6 f3                	div    %bl
     bc7:	04 30                	add    $0x30,%al
     bc9:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
     bcf:	88 e8                	mov    %ch,%al
     bd1:	24 0f                	and    $0xf,%al
     bd3:	04 30                	add    $0x30,%al
     bd5:	88 45 01             	mov    %al,0x1(%ebp)
     bd8:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
     bdc:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
     be0:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
     be4:	b4 02                	mov    $0x2,%ah
     be6:	cd 1a                	int    $0x1a
     be8:	88 c8                	mov    %cl,%al
     bea:	b4 00                	mov    $0x0,%ah
     bec:	b3 10                	mov    $0x10,%bl
     bee:	f6 f3                	div    %bl
     bf0:	04 30                	add    $0x30,%al
     bf2:	88 45 05             	mov    %al,0x5(%ebp)
     bf5:	b4 02                	mov    $0x2,%ah
     bf7:	cd 1a                	int    $0x1a
     bf9:	88 c8                	mov    %cl,%al
     bfb:	24 0f                	and    $0xf,%al
     bfd:	04 30                	add    $0x30,%al
     bff:	88 45 06             	mov    %al,0x6(%ebp)
     c02:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
     c06:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
     c0a:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
     c0e:	8c c8                	mov    %cs,%eax
     c10:	8e d8                	mov    %eax,%ds
     c12:	8e c0                	mov    %eax,%es
     c14:	bd bf 02 8c d8       	mov    $0xd88c02bf,%ebp
     c19:	8e c0                	mov    %eax,%es
     c1b:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
     c20:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     c26:	b2 0a                	mov    $0xa,%dl
     c28:	cd 10                	int    $0x10
     c2a:	8c c8                	mov    %cs,%eax
     c2c:	8e d8                	mov    %eax,%ds
     c2e:	8e c0                	mov    %eax,%es
     c30:	bd 00 30 8c d8       	mov    $0xd88c3000,%ebp
     c35:	8e c0                	mov    %eax,%es
     c37:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
     c3c:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     c42:	b2 1e                	mov    $0x1e,%dl
     c44:	cd 10                	int    $0x10
     c46:	61                   	popa   
     c47:	07                   	pop    %es
     c48:	1f                   	pop    %ds
     c49:	c9                   	leave  
     c4a:	66 5a                	pop    %dx
     c4c:	ff e2                	jmp    *%edx

00000c4e <_Get_Hours_1>:
     c4e:	c8 04 00 00          	enter  $0x4,$0x0
     c52:	b4 02                	mov    $0x2,%ah
     c54:	cd 1a                	int    $0x1a
     c56:	88 e8                	mov    %ch,%al
     c58:	b4 00                	mov    $0x0,%ah
     c5a:	b3 10                	mov    $0x10,%bl
     c5c:	f6 f3                	div    %bl
     c5e:	30 e4                	xor    %ah,%ah
     c60:	66 67 89 04          	mov    %ax,(%si)
     c64:	24 66                	and    $0x66,%al
     c66:	67 8b 04             	mov    (%si),%eax
     c69:	24 c9                	and    $0xc9,%al
     c6b:	66 5a                	pop    %dx
     c6d:	ff e2                	jmp    *%edx

00000c6f <_Get_Hours_2>:
     c6f:	c8 04 00 00          	enter  $0x4,$0x0
     c73:	b4 02                	mov    $0x2,%ah
     c75:	cd 1a                	int    $0x1a
     c77:	88 e8                	mov    %ch,%al
     c79:	24 0f                	and    $0xf,%al
     c7b:	30 e4                	xor    %ah,%ah
     c7d:	66 67 89 04          	mov    %ax,(%si)
     c81:	24 66                	and    $0x66,%al
     c83:	67 8b 04             	mov    (%si),%eax
     c86:	24 c9                	and    $0xc9,%al
     c88:	66 5a                	pop    %dx
     c8a:	ff e2                	jmp    *%edx

00000c8c <_Get_Minutes_1>:
     c8c:	c8 04 00 00          	enter  $0x4,$0x0
     c90:	b4 02                	mov    $0x2,%ah
     c92:	cd 1a                	int    $0x1a
     c94:	88 c8                	mov    %cl,%al
     c96:	b4 00                	mov    $0x0,%ah
     c98:	b3 10                	mov    $0x10,%bl
     c9a:	f6 f3                	div    %bl
     c9c:	30 e4                	xor    %ah,%ah
     c9e:	66 67 89 04          	mov    %ax,(%si)
     ca2:	24 66                	and    $0x66,%al
     ca4:	67 8b 04             	mov    (%si),%eax
     ca7:	24 c9                	and    $0xc9,%al
     ca9:	66 5a                	pop    %dx
     cab:	ff e2                	jmp    *%edx

00000cad <_Get_Minutes_2>:
     cad:	c8 04 00 00          	enter  $0x4,$0x0
     cb1:	b4 02                	mov    $0x2,%ah
     cb3:	cd 1a                	int    $0x1a
     cb5:	88 c8                	mov    %cl,%al
     cb7:	24 0f                	and    $0xf,%al
     cb9:	30 e4                	xor    %ah,%ah
     cbb:	66 67 89 04          	mov    %ax,(%si)
     cbf:	24 66                	and    $0x66,%al
     cc1:	67 8b 04             	mov    (%si),%eax
     cc4:	24 c9                	and    $0xc9,%al
     cc6:	66 5a                	pop    %dx
     cc8:	ff e2                	jmp    *%edx

00000cca <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
     cca:	66 55                	push   %bp
     ccc:	66 89 e5             	mov    %sp,%bp
     ccf:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
     cd3:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     cd8:	66 89 d0             	mov    %dx,%ax
     cdb:	66 c1 e0 02          	shl    $0x2,%ax
     cdf:	66 01 d0             	add    %dx,%ax
     ce2:	66 c1 e0 04          	shl    $0x4,%ax
     ce6:	66 89 c2             	mov    %ax,%dx
     ce9:	67 66 8b 45 10       	mov    0x10(%di),%ax
     cee:	66 01 d0             	add    %dx,%ax
     cf1:	66 01 c0             	add    %ax,%ax
     cf4:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
     cf9:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     d00:	00 00                	add    %al,(%eax)
	int index = 0;
     d02:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     d09:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     d0b:	eb 35                	jmp    d42 <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
     d0d:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     d12:	67 66 8b 45 08       	mov    0x8(%di),%ax
     d17:	66 01 d0             	add    %dx,%ax
     d1a:	67 8a 00             	mov    (%bx,%si),%al
     d1d:	66 0f be c0          	movsbw %al,%ax
     d21:	67 66 ff 75 f4       	pushw  -0xc(%di)
     d26:	67 66 ff 75 fc       	pushw  -0x4(%di)
     d2b:	66 50                	push   %ax
     d2d:	66 e8 ca f5          	callw  2fb <_clearscreen+0x7>
     d31:	ff                   	(bad)  
     d32:	ff 66 83             	jmp    *-0x7d(%esi)
     d35:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     d38:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     d3c:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
     d42:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     d47:	67 66 8b 45 08       	mov    0x8(%di),%ax
     d4c:	66 01 d0             	add    %dx,%ax
     d4f:	67 8a 00             	mov    (%bx,%si),%al
     d52:	84 c0                	test   %al,%al
     d54:	75 b7                	jne    d0d <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     d56:	90                   	nop
}
     d57:	66 c9                	leavew 
     d59:	66 c3                	retw   

00000d5b <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
     d5b:	66 55                	push   %bp
     d5d:	66 89 e5             	mov    %sp,%bp
     d60:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
     d64:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     d69:	66 89 d0             	mov    %dx,%ax
     d6c:	66 c1 e0 02          	shl    $0x2,%ax
     d70:	66 01 d0             	add    %dx,%ax
     d73:	66 c1 e0 04          	shl    $0x4,%ax
     d77:	66 89 c2             	mov    %ax,%dx
     d7a:	67 66 8b 45 10       	mov    0x10(%di),%ax
     d7f:	66 01 d0             	add    %dx,%ax
     d82:	66 01 c0             	add    %ax,%ax
     d85:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
     d8a:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     d91:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     d93:	eb 35                	jmp    dca <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
     d95:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     d9a:	67 66 8b 45 08       	mov    0x8(%di),%ax
     d9f:	66 01 d0             	add    %dx,%ax
     da2:	67 8a 00             	mov    (%bx,%si),%al
     da5:	66 0f be c0          	movsbw %al,%ax
     da9:	67 66 ff 75 14       	pushw  0x14(%di)
     dae:	67 66 ff 75 fc       	pushw  -0x4(%di)
     db3:	66 50                	push   %ax
     db5:	66 e8 42 f5          	callw  2fb <_clearscreen+0x7>
     db9:	ff                   	(bad)  
     dba:	ff 66 83             	jmp    *-0x7d(%esi)
     dbd:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     dc0:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     dc4:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
     dca:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     dcf:	67 66 8b 45 08       	mov    0x8(%di),%ax
     dd4:	66 01 d0             	add    %dx,%ax
     dd7:	67 8a 00             	mov    (%bx,%si),%al
     dda:	84 c0                	test   %al,%al
     ddc:	75 b7                	jne    d95 <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     dde:	90                   	nop
}
     ddf:	66 c9                	leavew 
     de1:	66 c3                	retw   

00000de3 <sys_showline>:
void sys_showline(){
     de3:	66 55                	push   %bp
     de5:	66 89 e5             	mov    %sp,%bp
     de8:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
     dec:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
     df1:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
     df6:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
     dfb:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
     e00:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
     e05:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
     e0a:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
     e0f:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     e16:	00 00                	add    %al,(%eax)
    int i = 0;
     e18:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     e1f:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
     e21:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     e28:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
     e2a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     e31:	00 00                	add    %al,(%eax)
     e33:	eb 52                	jmp    e87 <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
     e35:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     e3a:	66 89 d0             	mov    %dx,%ax
     e3d:	66 c1 e0 03          	shl    $0x3,%ax
     e41:	66 01 d0             	add    %dx,%ax
     e44:	67 66 8d 14          	lea    (%si),%dx
     e48:	c5 00                	lds    (%eax),%eax
     e4a:	00 00                	add    %al,(%eax)
     e4c:	00 66 01             	add    %ah,0x1(%esi)
     e4f:	d0 66 01             	shlb   0x1(%esi)
     e52:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
     e56:	45                   	inc    %ebp
     e57:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
     e5d:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     e62:	66 01 d0             	add    %dx,%ax
     e65:	67 8a 00             	mov    (%bx,%si),%al
     e68:	66 0f be c0          	movsbw %al,%ax
     e6c:	67 66 ff 75 f4       	pushw  -0xc(%di)
     e71:	67 66 ff 75 f0       	pushw  -0x10(%di)
     e76:	66 50                	push   %ax
     e78:	66 e8 7f f4          	callw  2fb <_clearscreen+0x7>
     e7c:	ff                   	(bad)  
     e7d:	ff 66 83             	jmp    *-0x7d(%esi)
     e80:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
     e83:	66 ff 45 fc          	incw   -0x4(%ebp)
     e87:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
     e8d:	7e a6                	jle    e35 <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
     e8f:	66 c9                	leavew 
     e91:	66 c3                	retw   

00000e93 <sys_printname>:

void sys_printname(){
     e93:	66 55                	push   %bp
     e95:	66 89 e5             	mov    %sp,%bp
     e98:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
     e9c:	67 66 c7 45 fc a0 26 	movw   $0x26a0,-0x4(%di)
     ea3:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
     ea5:	67 66 c7 45 f8 e4 26 	movw   $0x26e4,-0x8(%di)
     eac:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
     eae:	67 66 c7 45 f4 28 27 	movw   $0x2728,-0xc(%di)
     eb5:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
     eb7:	67 66 c7 45 f0 6c 27 	movw   $0x276c,-0x10(%di)
     ebe:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
     ec0:	67 66 c7 45 ec b0 27 	movw   $0x27b0,-0x14(%di)
     ec7:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
     ec9:	67 66 c7 45 e8 f4 27 	movw   $0x27f4,-0x18(%di)
     ed0:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
     ed2:	67 66 c7 45 e4 38 28 	movw   $0x2838,-0x1c(%di)
     ed9:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
     edb:	66 6a 0b             	pushw  $0xb
     ede:	66 6a 10             	pushw  $0x10
     ee1:	67 66 ff 75 fc       	pushw  -0x4(%di)
     ee6:	66 e8 de fd          	callw  cc8 <_Get_Minutes_2+0x1b>
     eea:	ff                   	(bad)  
     eeb:	ff 66 83             	jmp    *-0x7d(%esi)
     eee:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
     ef1:	6a 0b                	push   $0xb
     ef3:	66 6a 11             	pushw  $0x11
     ef6:	67 66 ff 75 f8       	pushw  -0x8(%di)
     efb:	66 e8 c9 fd          	callw  cc8 <_Get_Minutes_2+0x1b>
     eff:	ff                   	(bad)  
     f00:	ff 66 83             	jmp    *-0x7d(%esi)
     f03:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
     f06:	6a 0b                	push   $0xb
     f08:	66 6a 12             	pushw  $0x12
     f0b:	67 66 ff 75 f4       	pushw  -0xc(%di)
     f10:	66 e8 b4 fd          	callw  cc8 <_Get_Minutes_2+0x1b>
     f14:	ff                   	(bad)  
     f15:	ff 66 83             	jmp    *-0x7d(%esi)
     f18:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
     f1b:	6a 0b                	push   $0xb
     f1d:	66 6a 13             	pushw  $0x13
     f20:	67 66 ff 75 f0       	pushw  -0x10(%di)
     f25:	66 e8 9f fd          	callw  cc8 <_Get_Minutes_2+0x1b>
     f29:	ff                   	(bad)  
     f2a:	ff 66 83             	jmp    *-0x7d(%esi)
     f2d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
     f30:	6a 0b                	push   $0xb
     f32:	66 6a 14             	pushw  $0x14
     f35:	67 66 ff 75 ec       	pushw  -0x14(%di)
     f3a:	66 e8 8a fd          	callw  cc8 <_Get_Minutes_2+0x1b>
     f3e:	ff                   	(bad)  
     f3f:	ff 66 83             	jmp    *-0x7d(%esi)
     f42:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
     f45:	6a 0b                	push   $0xb
     f47:	66 6a 15             	pushw  $0x15
     f4a:	67 66 ff 75 e8       	pushw  -0x18(%di)
     f4f:	66 e8 75 fd          	callw  cc8 <_Get_Minutes_2+0x1b>
     f53:	ff                   	(bad)  
     f54:	ff 66 83             	jmp    *-0x7d(%esi)
     f57:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
     f5a:	6a 0b                	push   $0xb
     f5c:	66 6a 16             	pushw  $0x16
     f5f:	67 66 ff 75 e4       	pushw  -0x1c(%di)
     f64:	66 e8 60 fd          	callw  cc8 <_Get_Minutes_2+0x1b>
     f68:	ff                   	(bad)  
     f69:	ff 66 83             	jmp    *-0x7d(%esi)
     f6c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
     f6f:	c9                   	leave  
     f70:	66 c3                	retw   

00000f72 <sys_printpoem>:
void sys_printpoem(){
     f72:	66 55                	push   %bp
     f74:	66 89 e5             	mov    %sp,%bp
     f77:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
     f7b:	67 66 c7 45 f8 7c 28 	movw   $0x287c,-0x8(%di)
     f82:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
     f84:	67 66 c7 45 f4 8e 28 	movw   $0x288e,-0xc(%di)
     f8b:	00 00                	add    %al,(%eax)
    int i = 1;
     f8d:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     f94:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
     f96:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     f9d:	00 00                	add    %al,(%eax)
     f9f:	eb 4b                	jmp    fec <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
     fa1:	67 66 ff 75 fc       	pushw  -0x4(%di)
     fa6:	66 6a 0a             	pushw  $0xa
     fa9:	66 6a 0f             	pushw  $0xf
     fac:	67 66 ff 75 f8       	pushw  -0x8(%di)
     fb1:	66 e8 a4 fd          	callw  d59 <sys_print_for_heart+0x8f>
     fb5:	ff                   	(bad)  
     fb6:	ff 66 83             	jmp    *-0x7d(%esi)
     fb9:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
     fbb:	67 66 ff 75 fc       	pushw  -0x4(%di)
     fc0:	66 6a 0a             	pushw  $0xa
     fc3:	66 6a 10             	pushw  $0x10
     fc6:	67 66 ff 75 f4       	pushw  -0xc(%di)
     fcb:	66 e8 8a fd          	callw  d59 <sys_print_for_heart+0x8f>
     fcf:	ff                   	(bad)  
     fd0:	ff 66 83             	jmp    *-0x7d(%esi)
     fd3:	c4 10                	les    (%eax),%edx
        int j = 0;
     fd5:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     fdc:	00 00                	add    %al,(%eax)
        int k = 0;
     fde:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
     fe5:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
     fe7:	67 66 ff 45 fc       	incw   -0x4(%di)
     fec:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
     ff2:	7e ad                	jle    fa1 <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
     ff4:	66 c9                	leavew 
     ff6:	66 c3                	retw   

00000ff8 <sys_printheart>:
void sys_printheart(){
     ff8:	66 55                	push   %bp
     ffa:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
     ffd:	66 6a 28             	pushw  $0x28
    1000:	66 6a 00             	pushw  $0x0
    1003:	66 68 97 28          	pushw  $0x2897
    1007:	00 00                	add    %al,(%eax)
    1009:	66 e8 bb fc          	callw  cc8 <_Get_Minutes_2+0x1b>
    100d:	ff                   	(bad)  
    100e:	ff 66 83             	jmp    *-0x7d(%esi)
    1011:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
    1014:	6a 28                	push   $0x28
    1016:	66 6a 01             	pushw  $0x1
    1019:	66 68 af 28          	pushw  $0x28af
    101d:	00 00                	add    %al,(%eax)
    101f:	66 e8 a5 fc          	callw  cc8 <_Get_Minutes_2+0x1b>
    1023:	ff                   	(bad)  
    1024:	ff 66 83             	jmp    *-0x7d(%esi)
    1027:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
    102a:	6a 28                	push   $0x28
    102c:	66 6a 02             	pushw  $0x2
    102f:	66 68 c8 28          	pushw  $0x28c8
    1033:	00 00                	add    %al,(%eax)
    1035:	66 e8 8f fc          	callw  cc8 <_Get_Minutes_2+0x1b>
    1039:	ff                   	(bad)  
    103a:	ff 66 83             	jmp    *-0x7d(%esi)
    103d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
    1040:	6a 28                	push   $0x28
    1042:	66 6a 03             	pushw  $0x3
    1045:	66 68 e3 28          	pushw  $0x28e3
    1049:	00 00                	add    %al,(%eax)
    104b:	66 e8 79 fc          	callw  cc8 <_Get_Minutes_2+0x1b>
    104f:	ff                   	(bad)  
    1050:	ff 66 83             	jmp    *-0x7d(%esi)
    1053:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
    1056:	6a 28                	push   $0x28
    1058:	66 6a 04             	pushw  $0x4
    105b:	66 68 fc 28          	pushw  $0x28fc
    105f:	00 00                	add    %al,(%eax)
    1061:	66 e8 63 fc          	callw  cc8 <_Get_Minutes_2+0x1b>
    1065:	ff                   	(bad)  
    1066:	ff 66 83             	jmp    *-0x7d(%esi)
    1069:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
    106c:	6a 28                	push   $0x28
    106e:	66 6a 05             	pushw  $0x5
    1071:	66 68 14 29          	pushw  $0x2914
    1075:	00 00                	add    %al,(%eax)
    1077:	66 e8 4d fc          	callw  cc8 <_Get_Minutes_2+0x1b>
    107b:	ff                   	(bad)  
    107c:	ff 66 83             	jmp    *-0x7d(%esi)
    107f:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
    1082:	6a 28                	push   $0x28
    1084:	66 6a 06             	pushw  $0x6
    1087:	66 68 2b 29          	pushw  $0x292b
    108b:	00 00                	add    %al,(%eax)
    108d:	66 e8 37 fc          	callw  cc8 <_Get_Minutes_2+0x1b>
    1091:	ff                   	(bad)  
    1092:	ff 66 83             	jmp    *-0x7d(%esi)
    1095:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
    1098:	6a 28                	push   $0x28
    109a:	66 6a 07             	pushw  $0x7
    109d:	66 68 41 29          	pushw  $0x2941
    10a1:	00 00                	add    %al,(%eax)
    10a3:	66 e8 21 fc          	callw  cc8 <_Get_Minutes_2+0x1b>
    10a7:	ff                   	(bad)  
    10a8:	ff 66 83             	jmp    *-0x7d(%esi)
    10ab:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    10ae:	c9                   	leave  
    10af:	66 c3                	retw   

000010b1 <print>:
#include "stdio.h"
//====================================================
//              显示字符串函数，可以指定位置
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
    10b1:	66 55                	push   %bp
    10b3:	66 89 e5             	mov    %sp,%bp
    10b6:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    10ba:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    10bf:	66 89 d0             	mov    %dx,%ax
    10c2:	66 c1 e0 02          	shl    $0x2,%ax
    10c6:	66 01 d0             	add    %dx,%ax
    10c9:	66 c1 e0 04          	shl    $0x4,%ax
    10cd:	66 89 c2             	mov    %ax,%dx
    10d0:	67 66 8b 45 10       	mov    0x10(%di),%ax
    10d5:	66 01 d0             	add    %dx,%ax
    10d8:	66 01 c0             	add    %ax,%ax
    10db:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    10e0:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    10e7:	00 00                	add    %al,(%eax)
	int index = 0;
    10e9:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    10f0:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    10f2:	eb 35                	jmp    1129 <print+0x78>
		_printchar(Messeage[index],pos,color);
    10f4:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    10f9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    10fe:	66 01 d0             	add    %dx,%ax
    1101:	67 8a 00             	mov    (%bx,%si),%al
    1104:	66 0f be c0          	movsbw %al,%ax
    1108:	67 66 ff 75 f4       	pushw  -0xc(%di)
    110d:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1112:	66 50                	push   %ax
    1114:	66 e8 e3 f1          	callw  2fb <_clearscreen+0x7>
    1118:	ff                   	(bad)  
    1119:	ff 66 83             	jmp    *-0x7d(%esi)
    111c:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    111f:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    1123:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    1129:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    112e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1133:	66 01 d0             	add    %dx,%ax
    1136:	67 8a 00             	mov    (%bx,%si),%al
    1139:	84 c0                	test   %al,%al
    113b:	75 b7                	jne    10f4 <print+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    113d:	90                   	nop
}
    113e:	66 c9                	leavew 
    1140:	66 c3                	retw   

00001142 <prints>:
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input	
    1142:	66 55                	push   %bp
    1144:	66 89 e5             	mov    %sp,%bp
    1147:	66 83 ec 04          	sub    $0x4,%sp
	int index = 0;
    114b:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1152:	00 00                	add    %al,(%eax)
	while(Messeage[index]){
    1154:	eb 25                	jmp    117b <prints+0x39>
		_showchar(Messeage[index]);
    1156:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    115b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1160:	66 01 d0             	add    %dx,%ax
    1163:	67 8a 00             	mov    (%bx,%si),%al
    1166:	66 0f be c0          	movsbw %al,%ax
    116a:	66 50                	push   %ax
    116c:	66 e8 c8 f1          	callw  338 <_readinput+0x17>
    1170:	ff                   	(bad)  
    1171:	ff 66 83             	jmp    *-0x7d(%esi)
    1174:	c4 04 67             	les    (%edi,%eiz,2),%eax
		index++;
    1177:	66 ff 45 fc          	incw   -0x4(%ebp)
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input	
	int index = 0;
	while(Messeage[index]){
    117b:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1180:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1185:	66 01 d0             	add    %dx,%ax
    1188:	67 8a 00             	mov    (%bx,%si),%al
    118b:	84 c0                	test   %al,%al
    118d:	75 c7                	jne    1156 <prints+0x14>
		_showchar(Messeage[index]);
		index++;
	}

	return;
    118f:	90                   	nop
}
    1190:	66 c9                	leavew 
    1192:	66 c3                	retw   

00001194 <printc>:
//====================================================
//                显示字符函数
//====================================================
void printc(char alpha){
    1194:	66 55                	push   %bp
    1196:	66 89 e5             	mov    %sp,%bp
    1199:	66 83 ec 04          	sub    $0x4,%sp
    119d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    11a2:	67 88 45 fc          	mov    %al,-0x4(%di)
	_showchar(alpha);
    11a6:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    11ac:	66 50                	push   %ax
    11ae:	66 e8 86 f1          	callw  338 <_readinput+0x17>
    11b2:	ff                   	(bad)  
    11b3:	ff 66 83             	jmp    *-0x7d(%esi)
    11b6:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    11b9:	66 c9                	leavew 
    11bb:	66 c3                	retw   

000011bd <printsint>:
//====================================================
//                数字转字符函数
//====================================================
void printsint(int num){
    11bd:	66 55                	push   %bp
    11bf:	66 89 e5             	mov    %sp,%bp
    11c2:	66 83 ec 2c          	sub    $0x2c,%sp
	 int save = num;
    11c6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    11cb:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	 int count = 0;
    11d0:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    11d7:	00 00                	add    %al,(%eax)
	 char number[30];
	 number[count] = 0;
    11d9:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    11de:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    11e3:	66 01 d0             	add    %dx,%ax
    11e6:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	if(num < 0){
    11ea:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    11f0:	79 14                	jns    1206 <printsint+0x49>
		printc('-');
    11f2:	66 6a 2d             	pushw  $0x2d
    11f5:	66 e8 99 ff          	callw  1192 <prints+0x50>
    11f9:	ff                   	(bad)  
    11fa:	ff 66 83             	jmp    *-0x7d(%esi)
    11fd:	c4 04 67             	les    (%edi,%eiz,2),%eax
		num = -num;
    1200:	66 f7 5d 08          	negw   0x8(%ebp)
    1204:	eb 15                	jmp    121b <printsint+0x5e>
	}
	else if(num == 0){
    1206:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    120c:	75 0d                	jne    121b <printsint+0x5e>
		printc('0');
    120e:	66 6a 30             	pushw  $0x30
    1211:	66 e8 7d ff          	callw  1192 <prints+0x50>
    1215:	ff                   	(bad)  
    1216:	ff 66 83             	jmp    *-0x7d(%esi)
    1219:	c4 04 eb             	les    (%ebx,%ebp,8),%eax
	}
	while(num > 0){
    121c:	50                   	push   %eax
		number[count] = num % 10 + '0';
    121d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1222:	66 b9 0a 00          	mov    $0xa,%cx
    1226:	00 00                	add    %al,(%eax)
    1228:	66 99                	cwtd   
    122a:	66 f7 f9             	idiv   %cx
    122d:	66 89 d0             	mov    %dx,%ax
    1230:	66 83 c0 30          	add    $0x30,%ax
    1234:	67 66 8d 4d d6       	lea    -0x2a(%di),%cx
    1239:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    123e:	66 01 ca             	add    %cx,%dx
    1241:	67 88 02             	mov    %al,(%bp,%si)
		num  = num / 10;
    1244:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    1249:	66 b8 67 66          	mov    $0x6667,%ax
    124d:	66 66 66 f7 e9       	data32 data32 imul %cx
    1252:	66 c1 fa 02          	sar    $0x2,%dx
    1256:	66 89 c8             	mov    %cx,%ax
    1259:	66 c1 f8 1f          	sar    $0x1f,%ax
    125d:	66 29 c2             	sub    %ax,%dx
    1260:	66 89 d0             	mov    %dx,%ax
    1263:	67 66 89 45 08       	mov    %ax,0x8(%di)
		count ++;
    1268:	67 66 ff 45 fc       	incw   -0x4(%di)
		num = -num;
	}
	else if(num == 0){
		printc('0');
	}
	while(num > 0){
    126d:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    1273:	7f a8                	jg     121d <printsint+0x60>
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    1275:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    127a:	66 48                	dec    %ax
    127c:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    1281:	eb 25                	jmp    12a8 <printsint+0xeb>
		printc(number[i]);
    1283:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    1288:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    128d:	66 01 d0             	add    %dx,%ax
    1290:	67 8a 00             	mov    (%bx,%si),%al
    1293:	66 0f be c0          	movsbw %al,%ax
    1297:	66 50                	push   %ax
    1299:	66 e8 f5 fe          	callw  1192 <prints+0x50>
    129d:	ff                   	(bad)  
    129e:	ff 66 83             	jmp    *-0x7d(%esi)
    12a1:	c4 04 67             	les    (%edi,%eiz,2),%eax
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    12a4:	66 ff 4d f8          	decw   -0x8(%ebp)
    12a8:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    12ae:	79 d3                	jns    1283 <printsint+0xc6>
		printc(number[i]);
	}
	return;
    12b0:	90                   	nop
}
    12b1:	66 c9                	leavew 
    12b3:	66 c3                	retw   

000012b5 <print_next_line>:
//====================================================
//                显示字符串并换行函数
//====================================================
 void print_next_line(char const* Messeage){
    12b5:	66 55                	push   %bp
    12b7:	66 89 e5             	mov    %sp,%bp
	prints(Messeage);
    12ba:	67 66 ff 75 08       	pushw  0x8(%di)
    12bf:	66 e8 7d fe          	callw  1140 <print+0x8f>
    12c3:	ff                   	(bad)  
    12c4:	ff 66 83             	jmp    *-0x7d(%esi)
    12c7:	c4 04 66             	les    (%esi,%eiz,2),%eax
	prints("\n\r");
    12ca:	68 56 29 00 00       	push   $0x2956
    12cf:	66 e8 6d fe          	callw  1140 <print+0x8f>
    12d3:	ff                   	(bad)  
    12d4:	ff 66 83             	jmp    *-0x7d(%esi)
    12d7:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    12da:	66 c9                	leavew 
    12dc:	66 c3                	retw   

000012de <strlen>:
//====================================================
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
    12de:	66 55                	push   %bp
    12e0:	66 89 e5             	mov    %sp,%bp
    12e3:	66 83 ec 08          	sub    $0x8,%sp
	int i = 0;
    12e7:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    12ee:	00 00                	add    %al,(%eax)
	int count = 0;
    12f0:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    12f7:	00 00                	add    %al,(%eax)
	while(Messeage[i] != 0){
    12f9:	eb 0a                	jmp    1305 <strlen+0x27>
		i++;
    12fb:	67 66 ff 45 fc       	incw   -0x4(%di)
		count++;
    1300:	67 66 ff 45 f8       	incw   -0x8(%di)
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
	int i = 0;
	int count = 0;
	while(Messeage[i] != 0){
    1305:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    130a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    130f:	66 01 d0             	add    %dx,%ax
    1312:	67 8a 00             	mov    (%bx,%si),%al
    1315:	84 c0                	test   %al,%al
    1317:	75 e2                	jne    12fb <strlen+0x1d>
		i++;
		count++;
	}
	return count;
    1319:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    131e:	66 c9                	leavew 
    1320:	66 c3                	retw   

00001322 <read_and_print_input>:
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    1322:	66 55                	push   %bp
    1324:	66 89 e5             	mov    %sp,%bp
    1327:	66 83 ec 08          	sub    $0x8,%sp
    int i = 1;
    132b:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    1332:	00 00                	add    %al,(%eax)
    while(i){
    1334:	eb 1c                	jmp    1352 <read_and_print_input+0x30>
        char savechar = _readinput();
    1336:	66 e8 e5 ef          	callw  31f <_printchar+0x22>
    133a:	ff                   	(bad)  
    133b:	ff 67 88             	jmp    *-0x78(%edi)
    133e:	45                   	inc    %ebp
    133f:	fb                   	sti    
        _showchar(savechar);
    1340:	67 66 0f be 45 fb    	movsbw -0x5(%di),%ax
    1346:	66 50                	push   %ax
    1348:	66 e8 ec ef          	callw  338 <_readinput+0x17>
    134c:	ff                   	(bad)  
    134d:	ff 66 83             	jmp    *-0x7d(%esi)
    1350:	c4 04 67             	les    (%edi,%eiz,2),%eax
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    int i = 1;
    while(i){
    1353:	66 83 7d fc 00       	cmpw   $0x0,-0x4(%ebp)
    1358:	75 dc                	jne    1336 <read_and_print_input+0x14>
        char savechar = _readinput();
        _showchar(savechar);
    }
}
    135a:	66 c9                	leavew 
    135c:	66 c3                	retw   

0000135e <getch>:
//====================================================
//        等待用户输入函数，返回用户输入在缓冲区中
//====================================================
char getch(){
    135e:	66 55                	push   %bp
    1360:	66 89 e5             	mov    %sp,%bp
    1363:	66 83 ec 04          	sub    $0x4,%sp
	char result = _readinput();
    1367:	66 e8 b4 ef          	callw  31f <_printchar+0x22>
    136b:	ff                   	(bad)  
    136c:	ff 67 88             	jmp    *-0x78(%edi)
    136f:	45                   	inc    %ebp
    1370:	ff 67 8a             	jmp    *-0x76(%edi)
	return result;
    1373:	45                   	inc    %ebp
    1374:	ff 66 c9             	jmp    *-0x37(%esi)
}
    1377:	66 c3                	retw   

00001379 <getline>:
void  getline(char str[],int length){
    1379:	66 55                	push   %bp
    137b:	66 89 e5             	mov    %sp,%bp
    137e:	66 83 ec 08          	sub    $0x8,%sp
	char save = getch();
    1382:	66 e8 d6 ff          	callw  135c <read_and_print_input+0x3a>
    1386:	ff                   	(bad)  
    1387:	ff 67 88             	jmp    *-0x78(%edi)
    138a:	45                   	inc    %ebp
    138b:	ff 67 66             	jmp    *0x66(%edi)
	int index = 0;
    138e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while(save != 13 && index < length){
    1395:	eb 46                	jmp    13dd <getline+0x64>
		printc(save);
    1397:	67 66 0f be 45 ff    	movsbw -0x1(%di),%ax
    139d:	66 50                	push   %ax
    139f:	66 e8 ef fd          	callw  1192 <prints+0x50>
    13a3:	ff                   	(bad)  
    13a4:	ff 66 83             	jmp    *-0x7d(%esi)
    13a7:	c4 04 67             	les    (%edi,%eiz,2),%eax
		str[index] = save;
    13aa:	66 8b 55 f8          	mov    -0x8(%ebp),%dx
    13ae:	67 66 8b 45 08       	mov    0x8(%di),%ax
    13b3:	66 01 c2             	add    %ax,%dx
    13b6:	67 8a 45 ff          	mov    -0x1(%di),%al
    13ba:	67 88 02             	mov    %al,(%bp,%si)
		index ++;
    13bd:	67 66 ff 45 f8       	incw   -0x8(%di)
		str[index] = 0;
    13c2:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    13c7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    13cc:	66 01 d0             	add    %dx,%ax
    13cf:	67 c6 00 00          	movb   $0x0,(%bx,%si)
		save = getch();
    13d3:	66 e8 85 ff          	callw  135c <read_and_print_input+0x3a>
    13d7:	ff                   	(bad)  
    13d8:	ff 67 88             	jmp    *-0x78(%edi)
    13db:	45                   	inc    %ebp
    13dc:	ff 67 80             	jmp    *-0x80(%edi)
	return result;
}
void  getline(char str[],int length){
	char save = getch();
	int index = 0;
	while(save != 13 && index < length){
    13df:	7d ff                	jge    13e0 <getline+0x67>
    13e1:	0d 74 0c 67 66       	or     $0x66670c74,%eax
    13e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
    13e9:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    13ee:	7c a7                	jl     1397 <getline+0x1e>
		str[index] = save;
		index ++;
		str[index] = 0;
		save = getch();
	}
	return;
    13f0:	90                   	nop
}
    13f1:	66 c9                	leavew 
    13f3:	66 c3                	retw   

000013f5 <print_different_color>:
void print_different_color(char const* Messeage,int row,int colume,int color){
    13f5:	66 55                	push   %bp
    13f7:	66 89 e5             	mov    %sp,%bp
    13fa:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    13fe:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    1403:	66 89 d0             	mov    %dx,%ax
    1406:	66 c1 e0 02          	shl    $0x2,%ax
    140a:	66 01 d0             	add    %dx,%ax
    140d:	66 c1 e0 04          	shl    $0x4,%ax
    1411:	66 89 c2             	mov    %ax,%dx
    1414:	67 66 8b 45 10       	mov    0x10(%di),%ax
    1419:	66 01 d0             	add    %dx,%ax
    141c:	66 01 c0             	add    %ax,%ax
    141f:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    1424:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    142b:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    142d:	eb 35                	jmp    1464 <print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    142f:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    1434:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1439:	66 01 d0             	add    %dx,%ax
    143c:	67 8a 00             	mov    (%bx,%si),%al
    143f:	66 0f be c0          	movsbw %al,%ax
    1443:	67 66 ff 75 14       	pushw  0x14(%di)
    1448:	67 66 ff 75 fc       	pushw  -0x4(%di)
    144d:	66 50                	push   %ax
    144f:	66 e8 a8 ee          	callw  2fb <_clearscreen+0x7>
    1453:	ff                   	(bad)  
    1454:	ff 66 83             	jmp    *-0x7d(%esi)
    1457:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    145a:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    145e:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    1464:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    1469:	67 66 8b 45 08       	mov    0x8(%di),%ax
    146e:	66 01 d0             	add    %dx,%ax
    1471:	67 8a 00             	mov    (%bx,%si),%al
    1474:	84 c0                	test   %al,%al
    1476:	75 b7                	jne    142f <print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    1478:	90                   	nop
}
    1479:	66 c9                	leavew 
    147b:	66 c3                	retw   

0000147d <strcmp>:
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
    147d:	66 55                	push   %bp
    147f:	66 89 e5             	mov    %sp,%bp
    1482:	66 83 ec 04          	sub    $0x4,%sp
	int i = 0;
    1486:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    148d:	00 00                	add    %al,(%eax)
	while(m1[i] != 0 && m2[i]!= 0){
    148f:	eb 31                	jmp    14c2 <strcmp+0x45>
		if(m1[i] != m2[i]){
    1491:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1496:	67 66 8b 45 08       	mov    0x8(%di),%ax
    149b:	66 01 d0             	add    %dx,%ax
    149e:	67 8a 10             	mov    (%bx,%si),%dl
    14a1:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    14a6:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    14ab:	66 01 c8             	add    %cx,%ax
    14ae:	67 8a 00             	mov    (%bx,%si),%al
    14b1:	38 c2                	cmp    %al,%dl
    14b3:	74 08                	je     14bd <strcmp+0x40>
			return 0;
    14b5:	66 b8 00 00          	mov    $0x0,%ax
    14b9:	00 00                	add    %al,(%eax)
    14bb:	eb 63                	jmp    1520 <strcmp+0xa3>
		}
		i++;
    14bd:	67 66 ff 45 fc       	incw   -0x4(%di)
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
	int i = 0;
	while(m1[i] != 0 && m2[i]!= 0){
    14c2:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    14c7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    14cc:	66 01 d0             	add    %dx,%ax
    14cf:	67 8a 00             	mov    (%bx,%si),%al
    14d2:	84 c0                	test   %al,%al
    14d4:	74 14                	je     14ea <strcmp+0x6d>
    14d6:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    14db:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    14e0:	66 01 d0             	add    %dx,%ax
    14e3:	67 8a 00             	mov    (%bx,%si),%al
    14e6:	84 c0                	test   %al,%al
    14e8:	75 a7                	jne    1491 <strcmp+0x14>
		if(m1[i] != m2[i]){
			return 0;
		}
		i++;
	}
	if(m1[i] != 0 || m2[i] != 0){
    14ea:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    14ef:	67 66 8b 45 08       	mov    0x8(%di),%ax
    14f4:	66 01 d0             	add    %dx,%ax
    14f7:	67 8a 00             	mov    (%bx,%si),%al
    14fa:	84 c0                	test   %al,%al
    14fc:	75 14                	jne    1512 <strcmp+0x95>
    14fe:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1503:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1508:	66 01 d0             	add    %dx,%ax
    150b:	67 8a 00             	mov    (%bx,%si),%al
    150e:	84 c0                	test   %al,%al
    1510:	74 08                	je     151a <strcmp+0x9d>
		return 0;
    1512:	66 b8 00 00          	mov    $0x0,%ax
    1516:	00 00                	add    %al,(%eax)
    1518:	eb 06                	jmp    1520 <strcmp+0xa3>
	}
	return 1;
    151a:	66 b8 01 00          	mov    $0x1,%ax
    151e:	00 00                	add    %al,(%eax)
}
    1520:	66 c9                	leavew 
    1522:	66 c3                	retw   

00001524 <strcpy>:
//====================================================
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
    1524:	66 55                	push   %bp
    1526:	66 89 e5             	mov    %sp,%bp
    1529:	66 83 ec 08          	sub    $0x8,%sp
	int len = strlen(src);
    152d:	67 66 ff 75 08       	pushw  0x8(%di)
    1532:	66 e8 a6 fd          	callw  12dc <print_next_line+0x27>
    1536:	ff                   	(bad)  
    1537:	ff 66 83             	jmp    *-0x7d(%esi)
    153a:	c4 04 67             	les    (%edi,%eiz,2),%eax
    153d:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	int i = 0;
    1541:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1548:	00 00                	add    %al,(%eax)
	for(i = 0;i < len;i ++){
    154a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1551:	00 00                	add    %al,(%eax)
    1553:	eb 3b                	jmp    1590 <strcpy+0x6c>
    	des[i] =  src[i];
    1555:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    155a:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    155f:	66 01 c2             	add    %ax,%dx
    1562:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    1567:	67 66 8b 45 08       	mov    0x8(%di),%ax
    156c:	66 01 c8             	add    %cx,%ax
    156f:	67 8a 00             	mov    (%bx,%si),%al
    1572:	67 88 02             	mov    %al,(%bp,%si)
        des[i+1] = 0;
    1575:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    157a:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    157f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1584:	66 01 d0             	add    %dx,%ax
    1587:	67 c6 00 00          	movb   $0x0,(%bx,%si)
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
	int len = strlen(src);
	int i = 0;
	for(i = 0;i < len;i ++){
    158b:	67 66 ff 45 fc       	incw   -0x4(%di)
    1590:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1595:	67 66 3b 45 f8       	cmp    -0x8(%di),%ax
    159a:	7c b9                	jl     1555 <strcpy+0x31>
    	des[i] =  src[i];
        des[i+1] = 0;
	}
    159c:	66 c9                	leavew 
    159e:	66 c3                	retw   

000015a0 <initial_PCB>:
#include "schedule.h"
#include "use.h"

void initial_PCB(int index){
    15a0:	66 55                	push   %bp
    15a2:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    15a5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15aa:	66 40                	inc    %ax
    15ac:	66 c1 e0 0c          	shl    $0xc,%ax
    15b0:	66 89 c2             	mov    %ax,%dx
    15b3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15b8:	66 c1 e0 02          	shl    $0x2,%ax
    15bc:	66 89 c1             	mov    %ax,%cx
    15bf:	66 c1 e1 04          	shl    $0x4,%cx
    15c3:	66 01 c8             	add    %cx,%ax
    15c6:	66 05 10 31          	add    $0x3110,%ax
    15ca:	00 00                	add    %al,(%eax)
    15cc:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    15d0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15d5:	66 40                	inc    %ax
    15d7:	66 c1 e0 0c          	shl    $0xc,%ax
    15db:	66 89 c2             	mov    %ax,%dx
    15de:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15e3:	66 c1 e0 02          	shl    $0x2,%ax
    15e7:	66 89 c1             	mov    %ax,%cx
    15ea:	66 c1 e1 04          	shl    $0x4,%cx
    15ee:	66 01 c8             	add    %cx,%ax
    15f1:	66 05 00 31          	add    $0x3100,%ax
    15f5:	00 00                	add    %al,(%eax)
    15f7:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
    15fb:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1600:	66 40                	inc    %ax
    1602:	66 c1 e0 0c          	shl    $0xc,%ax
    1606:	66 89 c2             	mov    %ax,%dx
    1609:	67 66 8b 45 08       	mov    0x8(%di),%ax
    160e:	66 c1 e0 02          	shl    $0x2,%ax
    1612:	66 89 c1             	mov    %ax,%cx
    1615:	66 c1 e1 04          	shl    $0x4,%cx
    1619:	66 01 c8             	add    %cx,%ax
    161c:	66 05 00 31          	add    $0x3100,%ax
    1620:	00 00                	add    %al,(%eax)
    1622:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
    1627:	67 66 8b 45 08       	mov    0x8(%di),%ax
    162c:	66 c1 e0 02          	shl    $0x2,%ax
    1630:	66 89 c2             	mov    %ax,%dx
    1633:	66 c1 e2 04          	shl    $0x4,%dx
    1637:	66 01 d0             	add    %dx,%ax
    163a:	66 05 00 31          	add    $0x3100,%ax
    163e:	00 00                	add    %al,(%eax)
    1640:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
    1647:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
    1649:	67 66 8b 45 08       	mov    0x8(%di),%ax
    164e:	66 c1 e0 02          	shl    $0x2,%ax
    1652:	66 89 c2             	mov    %ax,%dx
    1655:	66 c1 e2 04          	shl    $0x4,%dx
    1659:	66 01 d0             	add    %dx,%ax
    165c:	66 05 00 31          	add    $0x3100,%ax
    1660:	00 00                	add    %al,(%eax)
    1662:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    1669:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = READY;
    166b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1670:	66 c1 e0 02          	shl    $0x2,%ax
    1674:	66 89 c2             	mov    %ax,%dx
    1677:	66 c1 e2 04          	shl    $0x4,%dx
    167b:	66 01 d0             	add    %dx,%ax
    167e:	66 05 10 31          	add    $0x3110,%ax
    1682:	00 00                	add    %al,(%eax)
    1684:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    168b:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    168d:	67 66 ff 75 08       	pushw  0x8(%di)
    1692:	66 68 e0 46          	pushw  $0x46e0
    1696:	00 00                	add    %al,(%eax)
    1698:	66 e8 89 09          	callw  2025 <size+0x11>
    169c:	00 00                	add    %al,(%eax)
    169e:	66 83 c4 08          	add    $0x8,%sp
    PCB_list[index ].eflags = 512;
    16a2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16a7:	66 c1 e0 02          	shl    $0x2,%ax
    16ab:	66 89 c2             	mov    %ax,%dx
    16ae:	66 c1 e2 04          	shl    $0x4,%dx
    16b2:	66 01 d0             	add    %dx,%ax
    16b5:	66 05 10 31          	add    $0x3110,%ax
    16b9:	00 00                	add    %al,(%eax)
    16bb:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    16c2:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    16c4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16c9:	66 c1 e0 02          	shl    $0x2,%ax
    16cd:	66 89 c2             	mov    %ax,%dx
    16d0:	66 c1 e2 04          	shl    $0x4,%dx
    16d4:	66 01 d0             	add    %dx,%ax
    16d7:	67 66 8d 90 10 31    	lea    0x3110(%bx,%si),%dx
    16dd:	00 00                	add    %al,(%eax)
    16df:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16e4:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 0;
    16e9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16ee:	66 c1 e0 02          	shl    $0x2,%ax
    16f2:	66 89 c2             	mov    %ax,%dx
    16f5:	66 c1 e2 04          	shl    $0x4,%dx
    16f9:	66 01 d0             	add    %dx,%ax
    16fc:	66 05 20 31          	add    $0x3120,%ax
    1700:	00 00                	add    %al,(%eax)
    1702:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1708:	00 00                	add    %al,(%eax)
}
    170a:	66 c9                	leavew 
    170c:	66 c3                	retw   

0000170e <Set_PCB>:
void Set_PCB(){
    170e:	66 55                	push   %bp
    1710:	66 89 e5             	mov    %sp,%bp
    1713:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    1717:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    171e:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    1720:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1727:	00 00                	add    %al,(%eax)
    1729:	eb 27                	jmp    1752 <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    172b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1730:	66 c1 e0 02          	shl    $0x2,%ax
    1734:	66 89 c2             	mov    %ax,%dx
    1737:	66 c1 e2 04          	shl    $0x4,%dx
    173b:	66 01 d0             	add    %dx,%ax
    173e:	66 05 10 31          	add    $0x3110,%ax
    1742:	00 00                	add    %al,(%eax)
    1744:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    174b:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 0;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    174d:	67 66 ff 45 fc       	incw   -0x4(%di)
    1752:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    1758:	7e d1                	jle    172b <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    175a:	66 c9                	leavew 
    175c:	66 c3                	retw   

0000175e <sys_schedule>:
int sch_index;
int current_index ;
void sys_schedule(){
    175e:	66 55                	push   %bp
    1760:	66 89 e5             	mov    %sp,%bp
    int i,j;
    if(isempty(&readyqueue) != 1){
    1763:	66 68 e0 46          	pushw  $0x46e0
    1767:	00 00                	add    %al,(%eax)
    1769:	66 e8 88 08          	callw  1ff5 <stack_copy+0x35>
    176d:	00 00                	add    %al,(%eax)
    176f:	66 83 c4 04          	add    $0x4,%sp
    1773:	66 83 f8 01          	cmp    $0x1,%ax
    1777:	0f 84 e0 00 66 a1    	je     a166185d <_end+0xa165d0f9>
        current_index = _CurrentProg - PCB_list;
    177d:	44                   	inc    %esp
    177e:	36                   	ss
    177f:	66 89 c2             	mov    %ax,%dx
    1782:	66 b8 e0 30          	mov    $0x30e0,%ax
    1786:	00 00                	add    %al,(%eax)
    1788:	66 29 c2             	sub    %ax,%dx
    178b:	66 89 d0             	mov    %dx,%ax
    178e:	66 c1 f8 02          	sar    $0x2,%ax
    1792:	66 89 c2             	mov    %ax,%dx
    1795:	66 89 d0             	mov    %dx,%ax
    1798:	66 01 c0             	add    %ax,%ax
    179b:	66 01 d0             	add    %dx,%ax
    179e:	67 66 8d 14          	lea    (%si),%dx
    17a2:	85 00                	test   %eax,(%eax)
    17a4:	00 00                	add    %al,(%eax)
    17a6:	00 66 01             	add    %ah,0x1(%esi)
    17a9:	d0 66 89             	shlb   -0x77(%esi)
    17ac:	c2 66 c1             	ret    $0xc166
    17af:	e2 08                	loop   17b9 <sys_schedule+0x5b>
    17b1:	66 01 d0             	add    %dx,%ax
    17b4:	66 89 c2             	mov    %ax,%dx
    17b7:	66 c1 e2 10          	shl    $0x10,%dx
    17bb:	66 01 d0             	add    %dx,%ax
    17be:	66 f7 d8             	neg    %ax
    17c1:	66 a3 48 36 66 a1    	mov    %ax,0xa1663648
        if(_CurrentProg -> prg_status == RUN){
    17c7:	44                   	inc    %esp
    17c8:	36 67 66 8b 40 38    	mov    %ss:0x38(%bx,%si),%ax
    17ce:	66 83 f8 01          	cmp    $0x1,%ax
    17d2:	75 23                	jne    17f7 <sys_schedule+0x99>
            _CurrentProg -> prg_status = READY;
    17d4:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    17da:	c7 40 38 03 00 00 00 	movl   $0x3,0x38(%eax)
            enqueue(&readyqueue,current_index);
    17e1:	66 a1 48 36 66 50    	mov    0x50663648,%ax
    17e7:	66 68 e0 46          	pushw  $0x46e0
    17eb:	00 00                	add    %al,(%eax)
    17ed:	66 e8 34 08          	callw  2025 <size+0x11>
    17f1:	00 00                	add    %al,(%eax)
    17f3:	66 83 c4 08          	add    $0x8,%sp
        }
        dequeue(&readyqueue,&sch_index);
    17f7:	66 68 30 36          	pushw  $0x3630
    17fb:	00 00                	add    %al,(%eax)
    17fd:	66 68 e0 46          	pushw  $0x46e0
    1801:	00 00                	add    %al,(%eax)
    1803:	66 e8 8a 08          	callw  2091 <enqueue+0x6a>
    1807:	00 00                	add    %al,(%eax)
    1809:	66 83 c4 08          	add    $0x8,%sp
        if(PCB_list[sch_index].prg_status == READY){
    180d:	66 a1 30 36 66 c1    	mov    0xc1663630,%ax
    1813:	e0 02                	loopne 1817 <sys_schedule+0xb9>
    1815:	66 89 c2             	mov    %ax,%dx
    1818:	66 c1 e2 04          	shl    $0x4,%dx
    181c:	66 01 d0             	add    %dx,%ax
    181f:	66 05 10 31          	add    $0x3110,%ax
    1823:	00 00                	add    %al,(%eax)
    1825:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    182a:	66 83 f8 03          	cmp    $0x3,%ax
    182e:	75 2b                	jne    185b <sys_schedule+0xfd>
            _CurrentProg = PCB_list + sch_index;
    1830:	66 a1 30 36 66 c1    	mov    0xc1663630,%ax
    1836:	e0 02                	loopne 183a <sys_schedule+0xdc>
    1838:	66 89 c2             	mov    %ax,%dx
    183b:	66 c1 e2 04          	shl    $0x4,%dx
    183f:	66 01 d0             	add    %dx,%ax
    1842:	66 05 e0 30          	add    $0x30e0,%ax
    1846:	00 00                	add    %al,(%eax)
    1848:	66 a3 44 36 66 a1    	mov    %ax,0xa1663644
            _CurrentProg -> prg_status = RUN;
    184e:	44                   	inc    %esp
    184f:	36 67 66 c7 40 38 01 	movw   $0x1,%ss:0x38(%bx,%si)
    1856:	00 
    1857:	00 00                	add    %al,(%eax)
            return;
    1859:	eb 0a                	jmp    1865 <sys_schedule+0x107>
        }
    }
    _CurrentProg = PCB_list ;
    185b:	66 c7 06 44 36       	movw   $0x3644,(%esi)
    1860:	e0 30                	loopne 1892 <sys_exit+0x29>
    1862:	00 00                	add    %al,(%eax)
    return;
    1864:	90                   	nop
    
}
    1865:	66 c9                	leavew 
    1867:	66 c3                	retw   

00001869 <sys_exit>:
void sys_exit(){
    1869:	66 55                	push   %bp
    186b:	66 89 e5             	mov    %sp,%bp
    186e:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    1872:	fa                   	cli    
    int index = _CurrentProg - PCB_list;
    1873:	66 a1 44 36 66 89    	mov    0x89663644,%ax
    1879:	c2 66 b8             	ret    $0xb866
    187c:	e0 30                	loopne 18ae <sys_exit+0x45>
    187e:	00 00                	add    %al,(%eax)
    1880:	66 29 c2             	sub    %ax,%dx
    1883:	66 89 d0             	mov    %dx,%ax
    1886:	66 c1 f8 02          	sar    $0x2,%ax
    188a:	66 89 c2             	mov    %ax,%dx
    188d:	66 89 d0             	mov    %dx,%ax
    1890:	66 01 c0             	add    %ax,%ax
    1893:	66 01 d0             	add    %dx,%ax
    1896:	67 66 8d 14          	lea    (%si),%dx
    189a:	85 00                	test   %eax,(%eax)
    189c:	00 00                	add    %al,(%eax)
    189e:	00 66 01             	add    %ah,0x1(%esi)
    18a1:	d0 66 89             	shlb   -0x77(%esi)
    18a4:	c2 66 c1             	ret    $0xc166
    18a7:	e2 08                	loop   18b1 <sys_exit+0x48>
    18a9:	66 01 d0             	add    %dx,%ax
    18ac:	66 89 c2             	mov    %ax,%dx
    18af:	66 c1 e2 10          	shl    $0x10,%dx
    18b3:	66 01 d0             	add    %dx,%ax
    18b6:	66 f7 d8             	neg    %ax
    18b9:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    rmele(&readyqueue,index);
    18be:	67 66 ff 75 fc       	pushw  -0x4(%di)
    18c3:	66 68 e0 46          	pushw  $0x46e0
    18c7:	00 00                	add    %al,(%eax)
    18c9:	66 e8 68 08          	callw  2135 <init_queue+0x30>
    18cd:	00 00                	add    %al,(%eax)
    18cf:	66 83 c4 08          	add    $0x8,%sp
    _CurrentProg -> prg_status = EXIT;
    18d3:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    18d9:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    __asm__("sti\n");
    18e0:	fb                   	sti    
}
    18e1:	66 c9                	leavew 
    18e3:	66 c3                	retw   

000018e5 <sys_bolocked>:



int queuesize,tmp;//一定要是全局，否则dequeue无法将tmp修改
void sys_bolocked(int index){
    18e5:	66 55                	push   %bp
    18e7:	66 89 e5             	mov    %sp,%bp
    18ea:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    18ee:	fa                   	cli    
    PCB_list[index].prg_status = BLOCKED;
    18ef:	67 66 8b 45 08       	mov    0x8(%di),%ax
    18f4:	66 c1 e0 02          	shl    $0x2,%ax
    18f8:	66 89 c2             	mov    %ax,%dx
    18fb:	66 c1 e2 04          	shl    $0x4,%dx
    18ff:	66 01 d0             	add    %dx,%ax
    1902:	66 05 10 31          	add    $0x3110,%ax
    1906:	00 00                	add    %al,(%eax)
    1908:	67 66 c7 40 08 02 00 	movw   $0x2,0x8(%bx,%si)
    190f:	00 00                	add    %al,(%eax)
    enqueue(&blockqueue,index);
    1911:	67 66 ff 75 08       	pushw  0x8(%di)
    1916:	66 68 40 30          	pushw  $0x3040
    191a:	00 00                	add    %al,(%eax)
    191c:	66 e8 05 07          	callw  2025 <size+0x11>
    1920:	00 00                	add    %al,(%eax)
    1922:	66 83 c4 08          	add    $0x8,%sp
    queuesize = size(&readyqueue);
    1926:	66 68 e0 46          	pushw  $0x46e0
    192a:	00 00                	add    %al,(%eax)
    192c:	66 e8 e2 06          	callw  2012 <isempty+0x1b>
    1930:	00 00                	add    %al,(%eax)
    1932:	66 83 c4 04          	add    $0x4,%sp
    1936:	66 a3 28 30 67 66    	mov    %ax,0x66673028
    int i = 0;
    193c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    1943:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    194a:	00 00                	add    %al,(%eax)
    194c:	eb 3c                	jmp    198a <sys_bolocked+0xa5>
        dequeue(&readyqueue,&tmp);
    194e:	66 68 24 30          	pushw  $0x3024
    1952:	00 00                	add    %al,(%eax)
    1954:	66 68 e0 46          	pushw  $0x46e0
    1958:	00 00                	add    %al,(%eax)
    195a:	66 e8 33 07          	callw  2091 <enqueue+0x6a>
    195e:	00 00                	add    %al,(%eax)
    1960:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    1964:	66 a1 24 30 67 66    	mov    0x66673024,%ax
    196a:	39 45 08             	cmp    %eax,0x8(%ebp)
    196d:	74 16                	je     1985 <sys_bolocked+0xa0>
            enqueue(&readyqueue,tmp);
    196f:	66 a1 24 30 66 50    	mov    0x50663024,%ax
    1975:	66 68 e0 46          	pushw  $0x46e0
    1979:	00 00                	add    %al,(%eax)
    197b:	66 e8 a6 06          	callw  2025 <size+0x11>
    197f:	00 00                	add    %al,(%eax)
    1981:	66 83 c4 08          	add    $0x8,%sp
    __asm__("cli\n");
    PCB_list[index].prg_status = BLOCKED;
    enqueue(&blockqueue,index);
    queuesize = size(&readyqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    1985:	67 66 ff 45 fc       	incw   -0x4(%di)
    198a:	66 a1 28 30 67 66    	mov    0x66673028,%ax
    1990:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1993:	7c b9                	jl     194e <sys_bolocked+0x69>
        dequeue(&readyqueue,&tmp);
        if(index != tmp){
            enqueue(&readyqueue,tmp);
        }
    }
    __asm__("sti\n");
    1995:	fb                   	sti    
}
    1996:	66 c9                	leavew 
    1998:	66 c3                	retw   

0000199a <sys_wakeup>:
void sys_wakeup(int index){
    199a:	66 55                	push   %bp
    199c:	66 89 e5             	mov    %sp,%bp
    199f:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    19a3:	fa                   	cli    
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    19a4:	66 68 40 30          	pushw  $0x3040
    19a8:	00 00                	add    %al,(%eax)
    19aa:	66 e8 64 06          	callw  2012 <isempty+0x1b>
    19ae:	00 00                	add    %al,(%eax)
    19b0:	66 83 c4 04          	add    $0x4,%sp
    19b4:	66 a3 28 30 67 66    	mov    %ax,0x66673028
    int i = 0;
    19ba:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    19c1:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    19c8:	00 00                	add    %al,(%eax)
    19ca:	eb 3c                	jmp    1a08 <sys_wakeup+0x6e>
        dequeue(&blockqueue,&tmp);
    19cc:	66 68 24 30          	pushw  $0x3024
    19d0:	00 00                	add    %al,(%eax)
    19d2:	66 68 40 30          	pushw  $0x3040
    19d6:	00 00                	add    %al,(%eax)
    19d8:	66 e8 b5 06          	callw  2091 <enqueue+0x6a>
    19dc:	00 00                	add    %al,(%eax)
    19de:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    19e2:	66 a1 24 30 67 66    	mov    0x66673024,%ax
    19e8:	39 45 08             	cmp    %eax,0x8(%ebp)
    19eb:	74 16                	je     1a03 <sys_wakeup+0x69>
            enqueue(&blockqueue,tmp);
    19ed:	66 a1 24 30 66 50    	mov    0x50663024,%ax
    19f3:	66 68 40 30          	pushw  $0x3040
    19f7:	00 00                	add    %al,(%eax)
    19f9:	66 e8 28 06          	callw  2025 <size+0x11>
    19fd:	00 00                	add    %al,(%eax)
    19ff:	66 83 c4 08          	add    $0x8,%sp
void sys_wakeup(int index){
    __asm__("cli\n");
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    1a03:	67 66 ff 45 fc       	incw   -0x4(%di)
    1a08:	66 a1 28 30 67 66    	mov    0x66673028,%ax
    1a0e:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1a11:	7c b9                	jl     19cc <sys_wakeup+0x32>
        dequeue(&blockqueue,&tmp);
        if(index != tmp){
            enqueue(&blockqueue,tmp);
        }
    }
    PCB_list[index].prg_status = READY;
    1a13:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a18:	66 c1 e0 02          	shl    $0x2,%ax
    1a1c:	66 89 c2             	mov    %ax,%dx
    1a1f:	66 c1 e2 04          	shl    $0x4,%dx
    1a23:	66 01 d0             	add    %dx,%ax
    1a26:	66 05 10 31          	add    $0x3110,%ax
    1a2a:	00 00                	add    %al,(%eax)
    1a2c:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    1a33:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    1a35:	67 66 ff 75 08       	pushw  0x8(%di)
    1a3a:	66 68 e0 46          	pushw  $0x46e0
    1a3e:	00 00                	add    %al,(%eax)
    1a40:	66 e8 e1 05          	callw  2025 <size+0x11>
    1a44:	00 00                	add    %al,(%eax)
    1a46:	66 83 c4 08          	add    $0x8,%sp
    __asm__("sti\n");
    1a4a:	fb                   	sti    
}
    1a4b:	66 c9                	leavew 
    1a4d:	66 c3                	retw   

00001a4f <sys_run>:
void sys_run(){
    1a4f:	66 55                	push   %bp
    1a51:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    1a54:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    1a5a:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    1a61:	66 5d                	pop    %bp
    1a63:	66 c3                	retw   

00001a65 <do_fork>:

int do_fork(){
    1a65:	66 55                	push   %bp
    1a67:	66 89 e5             	mov    %sp,%bp
    1a6a:	66 83 ec 08          	sub    $0x8,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    1a6e:	67 66 c7 45 fc 24 31 	movw   $0x3124,-0x4(%di)
    1a75:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN )    fork_prg = fork_prg + 1;//应该增加used位，防止被覆盖
    1a77:	eb 06                	jmp    1a7f <do_fork+0x1a>
    1a79:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    1a7f:	67 66 81 7d fc 30 36 	cmpw   $0x3630,-0x4(%di)
    1a86:	00 00                	add    %al,(%eax)
    1a88:	73 10                	jae    1a9a <do_fork+0x35>
    1a8a:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1a8f:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    1a94:	66 83 f8 01          	cmp    $0x1,%ax
    1a98:	74 df                	je     1a79 <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    1a9a:	67 66 81 7d fc ec 35 	cmpw   $0x35ec,-0x4(%di)
    1aa1:	00 00                	add    %al,(%eax)
    1aa3:	76 0f                	jbe    1ab4 <do_fork+0x4f>
    1aa5:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    1aab:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    1ab1:	e9 42 02 66 e8       	jmp    e8661cf8 <_end+0xe865d594>
    else{
        _Schedule_once();
    1ab6:	1c e9                	sbb    $0xe9,%al
    1ab8:	ff                   	(bad)  
    1ab9:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    1abc:	ec                   	in     (%dx),%al
    1abd:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    1abe:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    1ac4:	ff 75 fc             	pushl  -0x4(%ebp)
    1ac7:	66 50                	push   %ax
    1ac9:	66 e8 e6 03          	callw  1eb3 <counter+0x62>
    1acd:	00 00                	add    %al,(%eax)
    1acf:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    1ad3:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    1ad7:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1adc:	66 b8 e0 30          	mov    $0x30e0,%ax
    1ae0:	00 00                	add    %al,(%eax)
    1ae2:	66 29 c2             	sub    %ax,%dx
    1ae5:	66 89 d0             	mov    %dx,%ax
    1ae8:	66 c1 f8 02          	sar    $0x2,%ax
    1aec:	66 89 c2             	mov    %ax,%dx
    1aef:	66 89 d0             	mov    %dx,%ax
    1af2:	66 01 c0             	add    %ax,%ax
    1af5:	66 01 d0             	add    %dx,%ax
    1af8:	67 66 8d 14          	lea    (%si),%dx
    1afc:	85 00                	test   %eax,(%eax)
    1afe:	00 00                	add    %al,(%eax)
    1b00:	00 66 01             	add    %ah,0x1(%esi)
    1b03:	d0 66 89             	shlb   -0x77(%esi)
    1b06:	c2 66 c1             	ret    $0xc166
    1b09:	e2 08                	loop   1b13 <do_fork+0xae>
    1b0b:	66 01 d0             	add    %dx,%ax
    1b0e:	66 89 c2             	mov    %ax,%dx
    1b11:	66 c1 e2 10          	shl    $0x10,%dx
    1b15:	66 01 d0             	add    %dx,%ax
    1b18:	66 f7 d8             	neg    %ax
    1b1b:	66 89 c2             	mov    %ax,%dx
    1b1e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1b23:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    1b28:	66 a1 44 36 66 89    	mov    0x89663644,%ax
    1b2e:	c2 66 b8             	ret    $0xb866
    1b31:	e0 30                	loopne 1b63 <do_fork+0xfe>
    1b33:	00 00                	add    %al,(%eax)
    1b35:	66 29 c2             	sub    %ax,%dx
    1b38:	66 89 d0             	mov    %dx,%ax
    1b3b:	66 c1 f8 02          	sar    $0x2,%ax
    1b3f:	66 89 c2             	mov    %ax,%dx
    1b42:	66 89 d0             	mov    %dx,%ax
    1b45:	66 01 c0             	add    %ax,%ax
    1b48:	66 01 d0             	add    %dx,%ax
    1b4b:	67 66 8d 14          	lea    (%si),%dx
    1b4f:	85 00                	test   %eax,(%eax)
    1b51:	00 00                	add    %al,(%eax)
    1b53:	00 66 01             	add    %ah,0x1(%esi)
    1b56:	d0 66 89             	shlb   -0x77(%esi)
    1b59:	c2 66 c1             	ret    $0xc166
    1b5c:	e2 08                	loop   1b66 <do_fork+0x101>
    1b5e:	66 01 d0             	add    %dx,%ax
    1b61:	66 89 c2             	mov    %ax,%dx
    1b64:	66 c1 e2 10          	shl    $0x10,%dx
    1b68:	66 01 d0             	add    %dx,%ax
    1b6b:	66 f7 d8             	neg    %ax
    1b6e:	66 89 c2             	mov    %ax,%dx
    1b71:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1b76:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    1b7b:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    1b81:	8b 50 20             	mov    0x20(%eax),%edx
    1b84:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1b89:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    1b8e:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1b93:	66 b8 e0 30          	mov    $0x30e0,%ax
    1b97:	00 00                	add    %al,(%eax)
    1b99:	66 29 c2             	sub    %ax,%dx
    1b9c:	66 89 d0             	mov    %dx,%ax
    1b9f:	66 c1 f8 02          	sar    $0x2,%ax
    1ba3:	66 89 c2             	mov    %ax,%dx
    1ba6:	66 89 d0             	mov    %dx,%ax
    1ba9:	66 01 c0             	add    %ax,%ax
    1bac:	66 01 d0             	add    %dx,%ax
    1baf:	67 66 8d 14          	lea    (%si),%dx
    1bb3:	85 00                	test   %eax,(%eax)
    1bb5:	00 00                	add    %al,(%eax)
    1bb7:	00 66 01             	add    %ah,0x1(%esi)
    1bba:	d0 66 89             	shlb   -0x77(%esi)
    1bbd:	c2 66 c1             	ret    $0xc166
    1bc0:	e2 08                	loop   1bca <do_fork+0x165>
    1bc2:	66 01 d0             	add    %dx,%ax
    1bc5:	66 89 c2             	mov    %ax,%dx
    1bc8:	66 c1 e2 10          	shl    $0x10,%dx
    1bcc:	66 01 d0             	add    %dx,%ax
    1bcf:	66 f7 d8             	neg    %ax
    1bd2:	66 83 c0 02          	add    $0x2,%ax
    1bd6:	66 c1 e0 0c          	shl    $0xc,%ax
    1bda:	66 89 c2             	mov    %ax,%dx
    1bdd:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1be2:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    1be7:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    1bed:	8b 50 30             	mov    0x30(%eax),%edx
    1bf0:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1bf5:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    1bfa:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1bff:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    1c06:	00 00                	add    %al,(%eax)
        
        int index = fork_prg - PCB_list;
    1c08:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1c0d:	66 b8 e0 30          	mov    $0x30e0,%ax
    1c11:	00 00                	add    %al,(%eax)
    1c13:	66 29 c2             	sub    %ax,%dx
    1c16:	66 89 d0             	mov    %dx,%ax
    1c19:	66 c1 f8 02          	sar    $0x2,%ax
    1c1d:	66 89 c2             	mov    %ax,%dx
    1c20:	66 89 d0             	mov    %dx,%ax
    1c23:	66 01 c0             	add    %ax,%ax
    1c26:	66 01 d0             	add    %dx,%ax
    1c29:	67 66 8d 14          	lea    (%si),%dx
    1c2d:	85 00                	test   %eax,(%eax)
    1c2f:	00 00                	add    %al,(%eax)
    1c31:	00 66 01             	add    %ah,0x1(%esi)
    1c34:	d0 66 89             	shlb   -0x77(%esi)
    1c37:	c2 66 c1             	ret    $0xc166
    1c3a:	e2 08                	loop   1c44 <do_fork+0x1df>
    1c3c:	66 01 d0             	add    %dx,%ax
    1c3f:	66 89 c2             	mov    %ax,%dx
    1c42:	66 c1 e2 10          	shl    $0x10,%dx
    1c46:	66 01 d0             	add    %dx,%ax
    1c49:	66 f7 d8             	neg    %ax
    1c4c:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
        __asm__("sub $6,%esp");
    1c51:	66 83 ec 06          	sub    $0x6,%sp
        enqueue(&readyqueue,index); 
    1c55:	67 66 ff 75 f8       	pushw  -0x8(%di)
    1c5a:	66 68 e0 46          	pushw  $0x46e0
    1c5e:	00 00                	add    %al,(%eax)
    1c60:	66 e8 c1 03          	callw  2025 <size+0x11>
    1c64:	00 00                	add    %al,(%eax)
    1c66:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    1c6a:	66 83 c4 06          	add    $0x6,%sp
        _Schedule_once();
    1c6e:	66 e8 62 e7          	callw  3d4 <S+0x14>
    1c72:	ff                   	(bad)  
    1c73:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    1c76:	ec                   	in     (%dx),%al
    1c77:	06                   	push   %es
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    1c78:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1c7d:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1c82:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    1c88:	8b 50 28             	mov    0x28(%eax),%edx
    1c8b:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    1c91:	8b 40 24             	mov    0x24(%eax),%eax
    1c94:	66 51                	push   %cx
    1c96:	66 52                	push   %dx
    1c98:	66 50                	push   %ax
    1c9a:	66 e8 25 e6          	callw  2c3 <Message31+0x4>
    1c9e:	ff                   	(bad)  
    1c9f:	ff 66 83             	jmp    *-0x7d(%esi)
    1ca2:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
        __asm__("add $6,%esp");
    1ca5:	83 c4 06             	add    $0x6,%esp
        fork_prg -> ip = _CurrentProg -> ip;
    1ca8:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    1cae:	8b 50 2c             	mov    0x2c(%eax),%edx
    1cb1:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1cb6:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    1cbb:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1cc0:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1cc6:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    1cc8:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    1cce:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1cd1:	75 08                	jne    1cdb <do_fork+0x276>
            return 0;
    1cd3:	66 b8 00 00          	mov    $0x0,%ax
    1cd7:	00 00                	add    %al,(%eax)
    1cd9:	eb 1b                	jmp    1cf6 <do_fork+0x291>
        }
        _CurrentProg -> eax = _CurrentProg -> id;
    1cdb:	66 a1 44 36 66 8b    	mov    0x8b663644,%ax
    1ce1:	16                   	push   %ss
    1ce2:	44                   	inc    %esp
    1ce3:	36 67 66 8b 52 3c    	mov    %ss:0x3c(%bp,%si),%dx
    1ce9:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    1ced:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    1cf3:	8b 00                	mov    (%eax),%eax
    1cf5:	90                   	nop
    }
}
    1cf6:	66 c9                	leavew 
    1cf8:	66 c3                	retw   

00001cfa <sys_exit_fork>:
void sys_exit_fork(char ch){
    1cfa:	66 55                	push   %bp
    1cfc:	66 89 e5             	mov    %sp,%bp
    1cff:	66 83 ec 0c          	sub    $0xc,%sp
    1d03:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1d08:	67 88 45 f4          	mov    %al,-0xc(%di)
    int current_id = _CurrentProg - PCB_list;
    1d0c:	66 a1 44 36 66 89    	mov    0x89663644,%ax
    1d12:	c2 66 b8             	ret    $0xb866
    1d15:	e0 30                	loopne 1d47 <sys_exit_fork+0x4d>
    1d17:	00 00                	add    %al,(%eax)
    1d19:	66 29 c2             	sub    %ax,%dx
    1d1c:	66 89 d0             	mov    %dx,%ax
    1d1f:	66 c1 f8 02          	sar    $0x2,%ax
    1d23:	66 89 c2             	mov    %ax,%dx
    1d26:	66 89 d0             	mov    %dx,%ax
    1d29:	66 01 c0             	add    %ax,%ax
    1d2c:	66 01 d0             	add    %dx,%ax
    1d2f:	67 66 8d 14          	lea    (%si),%dx
    1d33:	85 00                	test   %eax,(%eax)
    1d35:	00 00                	add    %al,(%eax)
    1d37:	00 66 01             	add    %ah,0x1(%esi)
    1d3a:	d0 66 89             	shlb   -0x77(%esi)
    1d3d:	c2 66 c1             	ret    $0xc166
    1d40:	e2 08                	loop   1d4a <sys_exit_fork+0x50>
    1d42:	66 01 d0             	add    %dx,%ax
    1d45:	66 89 c2             	mov    %ax,%dx
    1d48:	66 c1 e2 10          	shl    $0x10,%dx
    1d4c:	66 01 d0             	add    %dx,%ax
    1d4f:	66 f7 d8             	neg    %ax
    1d52:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    int index = _CurrentProg -> fid;
    1d57:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    1d5d:	8b 40 40             	mov    0x40(%eax),%eax
    1d60:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    sys_wakeup(index);
    1d65:	67 66 ff 75 f8       	pushw  -0x8(%di)
    1d6a:	66 e8 2a fc          	callw  1998 <sys_bolocked+0xb3>
    1d6e:	ff                   	(bad)  
    1d6f:	ff 66 83             	jmp    *-0x7d(%esi)
    1d72:	c4 04 66             	les    (%esi,%eiz,2),%eax
    PCB_list[_CurrentProg -> fid].eax = ch;
    1d75:	a1 44 36 67 66       	mov    0x66673644,%eax
    1d7a:	8b 40 40             	mov    0x40(%eax),%eax
    1d7d:	67 66 0f be 55 f4    	movsbw -0xc(%di),%dx
    1d83:	66 c1 e0 02          	shl    $0x2,%ax
    1d87:	66 89 c1             	mov    %ax,%cx
    1d8a:	66 c1 e1 04          	shl    $0x4,%cx
    1d8e:	66 01 c8             	add    %cx,%ax
    1d91:	66 05 e0 30          	add    $0x30e0,%ax
    1d95:	00 00                	add    %al,(%eax)
    1d97:	67 66 89 10          	mov    %dx,(%bx,%si)
    _CurrentProg -> prg_status = EXIT;
    1d9b:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    1da1:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    rmele(&readyqueue,current_id);
    1da8:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1dad:	66 68 e0 46          	pushw  $0x46e0
    1db1:	00 00                	add    %al,(%eax)
    1db3:	66 e8 7e 03          	callw  2135 <init_queue+0x30>
    1db7:	00 00                	add    %al,(%eax)
    1db9:	66 83 c4 08          	add    $0x8,%sp
    _Schedule();
    1dbd:	66 e8 29 e6          	callw  3ea <_fork_user+0x9>
    1dc1:	ff                   	(bad)  
    1dc2:	ff 66 c9             	jmp    *-0x37(%esi)
}
    1dc5:	66 c3                	retw   

00001dc7 <sys_wait>:
int sys_wait(){
    1dc7:	66 55                	push   %bp
    1dc9:	66 89 e5             	mov    %sp,%bp
    1dcc:	66 83 ec 04          	sub    $0x4,%sp
    int index = _CurrentProg - PCB_list;
    1dd0:	66 a1 44 36 66 89    	mov    0x89663644,%ax
    1dd6:	c2 66 b8             	ret    $0xb866
    1dd9:	e0 30                	loopne 1e0b <sys_wait+0x44>
    1ddb:	00 00                	add    %al,(%eax)
    1ddd:	66 29 c2             	sub    %ax,%dx
    1de0:	66 89 d0             	mov    %dx,%ax
    1de3:	66 c1 f8 02          	sar    $0x2,%ax
    1de7:	66 89 c2             	mov    %ax,%dx
    1dea:	66 89 d0             	mov    %dx,%ax
    1ded:	66 01 c0             	add    %ax,%ax
    1df0:	66 01 d0             	add    %dx,%ax
    1df3:	67 66 8d 14          	lea    (%si),%dx
    1df7:	85 00                	test   %eax,(%eax)
    1df9:	00 00                	add    %al,(%eax)
    1dfb:	00 66 01             	add    %ah,0x1(%esi)
    1dfe:	d0 66 89             	shlb   -0x77(%esi)
    1e01:	c2 66 c1             	ret    $0xc166
    1e04:	e2 08                	loop   1e0e <sys_wait+0x47>
    1e06:	66 01 d0             	add    %dx,%ax
    1e09:	66 89 c2             	mov    %ax,%dx
    1e0c:	66 c1 e2 10          	shl    $0x10,%dx
    1e10:	66 01 d0             	add    %dx,%ax
    1e13:	66 f7 d8             	neg    %ax
    1e16:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_bolocked(index);
    1e1b:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1e20:	66 e8 bf fa          	callw  18e3 <sys_exit+0x7a>
    1e24:	ff                   	(bad)  
    1e25:	ff 66 83             	jmp    *-0x7d(%esi)
    1e28:	c4 04 66             	les    (%esi,%eiz,2),%eax
    _Schedule();
    1e2b:	e8 bc e5 ff ff       	call   3ec <_Schedule>
    return _CurrentProg -> eax;
    1e30:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    1e36:	8b 00                	mov    (%eax),%eax
}
    1e38:	66 c9                	leavew 
    1e3a:	66 c3                	retw   

00001e3c <thread_join>:
void thread_join(){
    1e3c:	66 55                	push   %bp
    1e3e:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    1e41:	90                   	nop
    1e42:	66 e8 09 00          	callw  1e4f <thread_join+0x13>
    1e46:	00 00                	add    %al,(%eax)
    1e48:	66 85 c0             	test   %ax,%ax
    1e4b:	75 f5                	jne    1e42 <thread_join+0x6>
    }
}
    1e4d:	66 5d                	pop    %bp
    1e4f:	66 c3                	retw   

00001e51 <counter>:
int counter(){
    1e51:	66 55                	push   %bp
    1e53:	66 89 e5             	mov    %sp,%bp
    1e56:	66 83 ec 08          	sub    $0x8,%sp
   // __asm__("cli\n");
    int i = 0;
    1e5a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1e61:	00 00                	add    %al,(%eax)
    int count = 0;
    1e63:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    1e6a:	00 00                	add    %al,(%eax)
    for(i = 1;i < PCB_NUMMER;i ++){
    1e6c:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    1e73:	00 00                	add    %al,(%eax)
    1e75:	eb 2d                	jmp    1ea4 <counter+0x53>
        if(PCB_list[i].prg_status != EXIT){
    1e77:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1e7c:	66 c1 e0 02          	shl    $0x2,%ax
    1e80:	66 89 c2             	mov    %ax,%dx
    1e83:	66 c1 e2 04          	shl    $0x4,%dx
    1e87:	66 01 d0             	add    %dx,%ax
    1e8a:	66 05 10 31          	add    $0x3110,%ax
    1e8e:	00 00                	add    %al,(%eax)
    1e90:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1e95:	66 85 c0             	test   %ax,%ax
    1e98:	74 05                	je     1e9f <counter+0x4e>
            count ++;
    1e9a:	67 66 ff 45 f8       	incw   -0x8(%di)
}
int counter(){
   // __asm__("cli\n");
    int i = 0;
    int count = 0;
    for(i = 1;i < PCB_NUMMER;i ++){
    1e9f:	67 66 ff 45 fc       	incw   -0x4(%di)
    1ea4:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    1eaa:	7e cb                	jle    1e77 <counter+0x26>
        if(PCB_list[i].prg_status != EXIT){
            count ++;
        }
    }
    //__asm__("sti\n");
    return count;
    1eac:	67 66 8b 45 f8       	mov    -0x8(%di),%ax

}
    1eb1:	66 c9                	leavew 
    1eb3:	66 c3                	retw   

00001eb5 <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    1eb5:	66 55                	push   %bp
    1eb7:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    1eba:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ebf:	67 66 8b 10          	mov    (%bx,%si),%dx
    1ec3:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1ec8:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    1ecc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ed1:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    1ed6:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1edb:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    1ee0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ee5:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    1eea:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1eef:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    1ef4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ef9:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    1efe:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f03:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    1f08:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f0d:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    1f12:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f17:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    1f1c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f21:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    1f26:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f2b:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    1f30:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f35:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    1f3a:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f3f:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    1f44:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f49:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    1f4e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f53:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    1f58:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f5d:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    1f62:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f67:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    1f6c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f71:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    1f76:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f7b:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    1f80:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f85:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    1f8a:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f8f:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    1f94:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f99:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    1f9e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1fa3:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    1fa8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1fad:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    1fb2:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1fb7:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    1fbc:	66 5d                	pop    %bp
    1fbe:	66 c3                	retw   

00001fc0 <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    1fc0:	66 55                	push   %bp
    1fc2:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    1fc5:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1fca:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1fcf:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1fd4:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    1fd9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1fde:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    1fe3:	66 51                	push   %cx
    1fe5:	66 52                	push   %dx
    1fe7:	66 50                	push   %ax
    1fe9:	66 e8 d6 e2          	callw  2c3 <Message31+0x4>
    1fed:	ff                   	(bad)  
    1fee:	ff 66 83             	jmp    *-0x7d(%esi)
    1ff1:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    1ff4:	c9                   	leave  
    1ff5:	66 c3                	retw   

00001ff7 <isempty>:
int isempty(struct Queue *queue){
    1ff7:	66 55                	push   %bp
    1ff9:	66 89 e5             	mov    %sp,%bp
    
    return (queue -> size == 0);
    1ffc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2001:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    2006:	66 85 c0             	test   %ax,%ax
    2009:	0f 94 c0             	sete   %al
    200c:	66 0f b6 c0          	movzbw %al,%ax

}
    2010:	66 5d                	pop    %bp
    2012:	66 c3                	retw   

00002014 <size>:
int size(struct Queue *queue){
    2014:	66 55                	push   %bp
    2016:	66 89 e5             	mov    %sp,%bp
    return queue -> size ;
    2019:	67 66 8b 45 08       	mov    0x8(%di),%ax
    201e:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
}
    2023:	66 5d                	pop    %bp
    2025:	66 c3                	retw   

00002027 <enqueue>:
void enqueue(struct Queue *queue,int data){
    2027:	66 55                	push   %bp
    2029:	66 89 e5             	mov    %sp,%bp
    if(queue -> size >= MAX){
    202c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2031:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    2036:	66 83 f8 1d          	cmp    $0x1d,%ax
    203a:	7e 02                	jle    203e <enqueue+0x17>
        return;
    203c:	eb 51                	jmp    208f <enqueue+0x68>
    }
    queue -> size ++;
    203e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2043:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    2048:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    204d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2052:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    queue -> tail = (queue -> tail + 1) % MAX;
    2057:	67 66 8b 45 08       	mov    0x8(%di),%ax
    205c:	67 66 8b 00          	mov    (%bx,%si),%ax
    2060:	66 40                	inc    %ax
    2062:	66 b9 1e 00          	mov    $0x1e,%cx
    2066:	00 00                	add    %al,(%eax)
    2068:	66 99                	cwtd   
    206a:	66 f7 f9             	idiv   %cx
    206d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2072:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> array[queue -> tail] = data;
    2076:	67 66 8b 45 08       	mov    0x8(%di),%ax
    207b:	67 66 8b 10          	mov    (%bx,%si),%dx
    207f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2084:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    2089:	67 66 89 4c 90       	mov    %cx,-0x70(%si)
    208e:	0c 66                	or     $0x66,%al

}
    2090:	5d                   	pop    %ebp
    2091:	66 c3                	retw   

00002093 <dequeue>:
void dequeue(struct Queue *queue,int * data){
    2093:	66 55                	push   %bp
    2095:	66 89 e5             	mov    %sp,%bp

    if(queue -> size <= 0){
    2098:	67 66 8b 45 08       	mov    0x8(%di),%ax
    209d:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    20a2:	66 85 c0             	test   %ax,%ax
    20a5:	7f 02                	jg     20a9 <dequeue+0x16>
        return;
    20a7:	eb 58                	jmp    2101 <dequeue+0x6e>
    }
    queue -> size --;
    20a9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20ae:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    20b3:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    20b8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20bd:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    *data = queue -> array[queue -> head];
    20c2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20c7:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    20cc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20d1:	67 66 8b 54 90       	mov    -0x70(%si),%dx
    20d6:	0c 67                	or     $0x67,%al
    20d8:	66 8b 45 0c          	mov    0xc(%ebp),%ax
    20dc:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> head = (queue -> head + 1) % MAX;
    20e0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20e5:	67 66 8b 40 04       	mov    0x4(%bx,%si),%ax
    20ea:	66 40                	inc    %ax
    20ec:	66 b9 1e 00          	mov    $0x1e,%cx
    20f0:	00 00                	add    %al,(%eax)
    20f2:	66 99                	cwtd   
    20f4:	66 f7 f9             	idiv   %cx
    20f7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20fc:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)

}
    2101:	66 5d                	pop    %bp
    2103:	66 c3                	retw   

00002105 <init_queue>:
void init_queue(struct Queue *queue){
    2105:	66 55                	push   %bp
    2107:	66 89 e5             	mov    %sp,%bp
    queue -> size = 0;
    210a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    210f:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    2116:	00 00                	add    %al,(%eax)
    queue -> tail = MAX - 1;
    2118:	67 66 8b 45 08       	mov    0x8(%di),%ax
    211d:	67 66 c7 00 1d 00    	movw   $0x1d,(%bx,%si)
    2123:	00 00                	add    %al,(%eax)
    queue -> head = 0;
    2125:	67 66 8b 45 08       	mov    0x8(%di),%ax
    212a:	67 66 c7 40 04 00 00 	movw   $0x0,0x4(%bx,%si)
    2131:	00 00                	add    %al,(%eax)
}
    2133:	66 5d                	pop    %bp
    2135:	66 c3                	retw   

00002137 <rmele>:
int rm_tmp;
int ii;
int size_of_rmqueue;
void rmele(struct Queue *queue,int data){
    2137:	66 55                	push   %bp
    2139:	66 89 e5             	mov    %sp,%bp
    size_of_rmqueue= size(queue);
    213c:	67 66 ff 75 08       	pushw  0x8(%di)
    2141:	66 e8 cd fe          	callw  2012 <isempty+0x1b>
    2145:	ff                   	(bad)  
    2146:	ff 66 83             	jmp    *-0x7d(%esi)
    2149:	c4 04 66             	les    (%esi,%eiz,2),%eax
    214c:	a3 38 36 66 c7       	mov    %eax,0xc7663638
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    2151:	06                   	push   %es
    2152:	3c 36                	cmp    $0x36,%al
    2154:	00 00                	add    %al,(%eax)
    2156:	00 00                	add    %al,(%eax)
    2158:	eb 3f                	jmp    2199 <rmele+0x62>
        dequeue(queue,&rm_tmp);
    215a:	66 68 c8 46          	pushw  $0x46c8
    215e:	00 00                	add    %al,(%eax)
    2160:	67 66 ff 75 08       	pushw  0x8(%di)
    2165:	66 e8 28 ff          	callw  2091 <enqueue+0x6a>
    2169:	ff                   	(bad)  
    216a:	ff 66 83             	jmp    *-0x7d(%esi)
    216d:	c4 08                	les    (%eax),%ecx
        if(rm_tmp != data){
    216f:	66 a1 c8 46 67 66    	mov    0x666746c8,%ax
    2175:	3b 45 0c             	cmp    0xc(%ebp),%eax
    2178:	74 15                	je     218f <rmele+0x58>
            enqueue(queue,rm_tmp);
    217a:	66 a1 c8 46 66 50    	mov    0x506646c8,%ax
    2180:	67 66 ff 75 08       	pushw  0x8(%di)
    2185:	66 e8 9c fe          	callw  2025 <size+0x11>
    2189:	ff                   	(bad)  
    218a:	ff 66 83             	jmp    *-0x7d(%esi)
    218d:	c4 08                	les    (%eax),%ecx
int rm_tmp;
int ii;
int size_of_rmqueue;
void rmele(struct Queue *queue,int data){
    size_of_rmqueue= size(queue);
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    218f:	66 a1 3c 36 66 40    	mov    0x4066363c,%ax
    2195:	66 a3 3c 36 66 8b    	mov    %ax,0x8b66363c
    219b:	16                   	push   %ss
    219c:	3c 36                	cmp    $0x36,%al
    219e:	66 a1 38 36 66 39    	mov    0x39663638,%ax
    21a4:	c2 7c b3             	ret    $0xb37c
        dequeue(queue,&rm_tmp);
        if(rm_tmp != data){
            enqueue(queue,rm_tmp);
        }
    }
}
    21a7:	66 c9                	leavew 
    21a9:	66 c3                	retw   

000021ab <init_Semlist>:
void init_Semlist(int index){
    21ab:	66 55                	push   %bp
    21ad:	66 89 e5             	mov    %sp,%bp
    SEM_list[index].used = 0;
    21b0:	67 66 8b 55 08       	mov    0x8(%di),%dx
    21b5:	66 89 d0             	mov    %dx,%ax
    21b8:	66 c1 e0 02          	shl    $0x2,%ax
    21bc:	66 01 d0             	add    %dx,%ax
    21bf:	66 c1 e0 02          	shl    $0x2,%ax
    21c3:	67 66 8d 14          	lea    (%si),%dx
    21c7:	c5 00                	lds    (%eax),%eax
    21c9:	00 00                	add    %al,(%eax)
    21cb:	00 66 29             	add    %ah,0x29(%esi)
    21ce:	c2 66 89             	ret    $0x8966
    21d1:	d0 66 05             	shlb   0x5(%esi)
    21d4:	e0 36                	loopne 220c <init_Semlist+0x61>
    21d6:	00 00                	add    %al,(%eax)
    21d8:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    21df:	00 00                	add    %al,(%eax)
    init_queue(&SEM_list[index].semaque);
    21e1:	67 66 8b 55 08       	mov    0x8(%di),%dx
    21e6:	66 89 d0             	mov    %dx,%ax
    21e9:	66 c1 e0 02          	shl    $0x2,%ax
    21ed:	66 01 d0             	add    %dx,%ax
    21f0:	66 c1 e0 02          	shl    $0x2,%ax
    21f4:	67 66 8d 14          	lea    (%si),%dx
    21f8:	c5 00                	lds    (%eax),%eax
    21fa:	00 00                	add    %al,(%eax)
    21fc:	00 66 29             	add    %ah,0x29(%esi)
    21ff:	c2 67 66             	ret    $0x6667
    2202:	8d 82 60 36 00 00    	lea    0x3660(%edx),%eax
    2208:	66 83 c0 04          	add    $0x4,%ax
    220c:	66 50                	push   %ax
    220e:	66 e8 f1 fe          	callw  2103 <dequeue+0x70>
    2212:	ff                   	(bad)  
    2213:	ff 66 83             	jmp    *-0x7d(%esi)
    2216:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2219:	c9                   	leave  
    221a:	66 c3                	retw   

0000221c <do_SemGet>:
int do_SemGet(int value){
    221c:	66 55                	push   %bp
    221e:	66 89 e5             	mov    %sp,%bp
    2221:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    2225:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    222c:	00 00                	add    %al,(%eax)
    while(SEM_list[i].used == 1){
    222e:	eb 05                	jmp    2235 <do_SemGet+0x19>
        i ++;
    2230:	67 66 ff 45 fc       	incw   -0x4(%di)
    SEM_list[index].used = 0;
    init_queue(&SEM_list[index].semaque);
}
int do_SemGet(int value){
    int i = 0;
    while(SEM_list[i].used == 1){
    2235:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    223a:	66 89 d0             	mov    %dx,%ax
    223d:	66 c1 e0 02          	shl    $0x2,%ax
    2241:	66 01 d0             	add    %dx,%ax
    2244:	66 c1 e0 02          	shl    $0x2,%ax
    2248:	67 66 8d 14          	lea    (%si),%dx
    224c:	c5 00                	lds    (%eax),%eax
    224e:	00 00                	add    %al,(%eax)
    2250:	00 66 29             	add    %ah,0x29(%esi)
    2253:	c2 66 89             	ret    $0x8966
    2256:	d0 66 05             	shlb   0x5(%esi)
    2259:	e0 36                	loopne 2291 <do_SemGet+0x75>
    225b:	00 00                	add    %al,(%eax)
    225d:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    2262:	66 83 f8 01          	cmp    $0x1,%ax
    2266:	74 c8                	je     2230 <do_SemGet+0x14>
        i ++;
    }
    if(i < SemMax){
    2268:	67 66 83 7d fc 1d    	cmpw   $0x1d,-0x4(%di)
    226e:	7f 7a                	jg     22ea <do_SemGet+0xce>
        init_Semlist(i);
    2270:	67 66 ff 75 fc       	pushw  -0x4(%di)
    2275:	66 e8 30 ff          	callw  21a9 <rmele+0x72>
    2279:	ff                   	(bad)  
    227a:	ff 66 83             	jmp    *-0x7d(%esi)
    227d:	c4 04 67             	les    (%edi,%eiz,2),%eax
        SEM_list[i].used = 1;
    2280:	66 8b 55 fc          	mov    -0x4(%ebp),%dx
    2284:	66 89 d0             	mov    %dx,%ax
    2287:	66 c1 e0 02          	shl    $0x2,%ax
    228b:	66 01 d0             	add    %dx,%ax
    228e:	66 c1 e0 02          	shl    $0x2,%ax
    2292:	67 66 8d 14          	lea    (%si),%dx
    2296:	c5 00                	lds    (%eax),%eax
    2298:	00 00                	add    %al,(%eax)
    229a:	00 66 29             	add    %ah,0x29(%esi)
    229d:	c2 66 89             	ret    $0x8966
    22a0:	d0 66 05             	shlb   0x5(%esi)
    22a3:	e0 36                	loopne 22db <do_SemGet+0xbf>
    22a5:	00 00                	add    %al,(%eax)
    22a7:	67 66 c7 40 08 01 00 	movw   $0x1,0x8(%bx,%si)
    22ae:	00 00                	add    %al,(%eax)
        SEM_list[i].count = value;
    22b0:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    22b5:	66 89 d0             	mov    %dx,%ax
    22b8:	66 c1 e0 02          	shl    $0x2,%ax
    22bc:	66 01 d0             	add    %dx,%ax
    22bf:	66 c1 e0 02          	shl    $0x2,%ax
    22c3:	67 66 8d 14          	lea    (%si),%dx
    22c7:	c5 00                	lds    (%eax),%eax
    22c9:	00 00                	add    %al,(%eax)
    22cb:	00 66 29             	add    %ah,0x29(%esi)
    22ce:	c2 66 89             	ret    $0x8966
    22d1:	d0 67 66             	shlb   0x66(%edi)
    22d4:	8d 90 60 36 00 00    	lea    0x3660(%eax),%edx
    22da:	67 66 8b 45 08       	mov    0x8(%di),%ax
    22df:	67 66 89 02          	mov    %ax,(%bp,%si)
        return i;
    22e3:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    22e8:	eb 06                	jmp    22f0 <do_SemGet+0xd4>
    }
    else 
        return -1;
    22ea:	66 b8 ff ff          	mov    $0xffff,%ax
    22ee:	ff                   	(bad)  
    22ef:	ff 66 c9             	jmp    *-0x37(%esi)
}
    22f2:	66 c3                	retw   

000022f4 <do_SemFree>:
void do_SemFree(int s){
    22f4:	66 55                	push   %bp
    22f6:	66 89 e5             	mov    %sp,%bp
    SEM_list[s].used = 0;
    22f9:	67 66 8b 55 08       	mov    0x8(%di),%dx
    22fe:	66 89 d0             	mov    %dx,%ax
    2301:	66 c1 e0 02          	shl    $0x2,%ax
    2305:	66 01 d0             	add    %dx,%ax
    2308:	66 c1 e0 02          	shl    $0x2,%ax
    230c:	67 66 8d 14          	lea    (%si),%dx
    2310:	c5 00                	lds    (%eax),%eax
    2312:	00 00                	add    %al,(%eax)
    2314:	00 66 29             	add    %ah,0x29(%esi)
    2317:	c2 66 89             	ret    $0x8966
    231a:	d0 66 05             	shlb   0x5(%esi)
    231d:	e0 36                	loopne 2355 <do_P+0x27>
    231f:	00 00                	add    %al,(%eax)
    2321:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    2328:	00 00                	add    %al,(%eax)
}
    232a:	66 5d                	pop    %bp
    232c:	66 c3                	retw   

0000232e <do_P>:
int tempp;
int sem_index;
int t;
void do_P(int s){
    232e:	66 55                	push   %bp
    2330:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    2333:	fa                   	cli    
    SEM_list[s].count = SEM_list[s].count - 1;
    2334:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2339:	66 89 d0             	mov    %dx,%ax
    233c:	66 c1 e0 02          	shl    $0x2,%ax
    2340:	66 01 d0             	add    %dx,%ax
    2343:	66 c1 e0 02          	shl    $0x2,%ax
    2347:	67 66 8d 14          	lea    (%si),%dx
    234b:	c5 00                	lds    (%eax),%eax
    234d:	00 00                	add    %al,(%eax)
    234f:	00 66 29             	add    %ah,0x29(%esi)
    2352:	c2 66 89             	ret    $0x8966
    2355:	d0 66 05             	shlb   0x5(%esi)
    2358:	60                   	pusha  
    2359:	36 00 00             	add    %al,%ss:(%eax)
    235c:	67 66 8b 00          	mov    (%bx,%si),%ax
    2360:	67 66 8d 48 ff       	lea    -0x1(%bx,%si),%cx
    2365:	67 66 8b 55 08       	mov    0x8(%di),%dx
    236a:	66 89 d0             	mov    %dx,%ax
    236d:	66 c1 e0 02          	shl    $0x2,%ax
    2371:	66 01 d0             	add    %dx,%ax
    2374:	66 c1 e0 02          	shl    $0x2,%ax
    2378:	67 66 8d 14          	lea    (%si),%dx
    237c:	c5 00                	lds    (%eax),%eax
    237e:	00 00                	add    %al,(%eax)
    2380:	00 66 29             	add    %ah,0x29(%esi)
    2383:	c2 66 89             	ret    $0x8966
    2386:	d0 66 05             	shlb   0x5(%esi)
    2389:	60                   	pusha  
    238a:	36 00 00             	add    %al,%ss:(%eax)
    238d:	67 66 89 08          	mov    %cx,(%bx,%si)
    if(SEM_list[s].count < 0){
    2391:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2396:	66 89 d0             	mov    %dx,%ax
    2399:	66 c1 e0 02          	shl    $0x2,%ax
    239d:	66 01 d0             	add    %dx,%ax
    23a0:	66 c1 e0 02          	shl    $0x2,%ax
    23a4:	67 66 8d 14          	lea    (%si),%dx
    23a8:	c5 00                	lds    (%eax),%eax
    23aa:	00 00                	add    %al,(%eax)
    23ac:	00 66 29             	add    %ah,0x29(%esi)
    23af:	c2 66 89             	ret    $0x8966
    23b2:	d0 66 05             	shlb   0x5(%esi)
    23b5:	60                   	pusha  
    23b6:	36 00 00             	add    %al,%ss:(%eax)
    23b9:	67 66 8b 00          	mov    (%bx,%si),%ax
    23bd:	66 85 c0             	test   %ax,%ax
    23c0:	0f 89 b1 00 66 a1    	jns    a1662477 <_end+0xa165dd13>
        sem_index = _CurrentProg - PCB_list;
    23c6:	44                   	inc    %esp
    23c7:	36                   	ss
    23c8:	66 89 c2             	mov    %ax,%dx
    23cb:	66 b8 e0 30          	mov    $0x30e0,%ax
    23cf:	00 00                	add    %al,(%eax)
    23d1:	66 29 c2             	sub    %ax,%dx
    23d4:	66 89 d0             	mov    %dx,%ax
    23d7:	66 c1 f8 02          	sar    $0x2,%ax
    23db:	66 89 c2             	mov    %ax,%dx
    23de:	66 89 d0             	mov    %dx,%ax
    23e1:	66 01 c0             	add    %ax,%ax
    23e4:	66 01 d0             	add    %dx,%ax
    23e7:	67 66 8d 14          	lea    (%si),%dx
    23eb:	85 00                	test   %eax,(%eax)
    23ed:	00 00                	add    %al,(%eax)
    23ef:	00 66 01             	add    %ah,0x1(%esi)
    23f2:	d0 66 89             	shlb   -0x77(%esi)
    23f5:	c2 66 c1             	ret    $0xc166
    23f8:	e2 08                	loop   2402 <do_P+0xd4>
    23fa:	66 01 d0             	add    %dx,%ax
    23fd:	66 89 c2             	mov    %ax,%dx
    2400:	66 c1 e2 10          	shl    $0x10,%dx
    2404:	66 01 d0             	add    %dx,%ax
    2407:	66 f7 d8             	neg    %ax
    240a:	66 a3 cc 46 66 a1    	mov    %ax,0xa16646cc
        rmele(&readyqueue,sem_index);//将进程从就绪队列中取出
    2410:	cc                   	int3   
    2411:	46                   	inc    %esi
    2412:	66 50                	push   %ax
    2414:	66 68 e0 46          	pushw  $0x46e0
    2418:	00 00                	add    %al,(%eax)
    241a:	66 e8 17 fd          	callw  2135 <init_queue+0x30>
    241e:	ff                   	(bad)  
    241f:	ff 66 83             	jmp    *-0x7d(%esi)
    2422:	c4 08                	les    (%eax),%ecx
        _CurrentProg->prg_status = BLOCKED;
    2424:	66 a1 44 36 67 66    	mov    0x66673644,%ax
    242a:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
        enqueue(&SEM_list[s].semaque,sem_index);
    2431:	66 8b 0e             	mov    (%esi),%cx
    2434:	cc                   	int3   
    2435:	46                   	inc    %esi
    2436:	67 66 8b 55 08       	mov    0x8(%di),%dx
    243b:	66 89 d0             	mov    %dx,%ax
    243e:	66 c1 e0 02          	shl    $0x2,%ax
    2442:	66 01 d0             	add    %dx,%ax
    2445:	66 c1 e0 02          	shl    $0x2,%ax
    2449:	67 66 8d 14          	lea    (%si),%dx
    244d:	c5 00                	lds    (%eax),%eax
    244f:	00 00                	add    %al,(%eax)
    2451:	00 66 29             	add    %ah,0x29(%esi)
    2454:	c2 67 66             	ret    $0x6667
    2457:	8d 82 60 36 00 00    	lea    0x3660(%edx),%eax
    245d:	66 83 c0 04          	add    $0x4,%ax
    2461:	66 51                	push   %cx
    2463:	66 50                	push   %ax
    2465:	66 e8 bc fb          	callw  2025 <size+0x11>
    2469:	ff                   	(bad)  
    246a:	ff 66 83             	jmp    *-0x7d(%esi)
    246d:	c4 08                	les    (%eax),%ecx
        _Schedule_PV();
    246f:	66 e8 e9 df          	callw  45c <_Vr+0x10>
    2473:	ff                   	(bad)  
    2474:	ff                   	(bad)  
    }
    __asm("sti\n");
    2475:	fb                   	sti    
}
    2476:	66 c9                	leavew 
    2478:	66 c3                	retw   

0000247a <do_V>:
int v_res;
int vtempp;
void do_V(int s){
    247a:	66 55                	push   %bp
    247c:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    247f:	fa                   	cli    
    SEM_list[s].count  = SEM_list[s].count + 1;
    2480:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2485:	66 89 d0             	mov    %dx,%ax
    2488:	66 c1 e0 02          	shl    $0x2,%ax
    248c:	66 01 d0             	add    %dx,%ax
    248f:	66 c1 e0 02          	shl    $0x2,%ax
    2493:	67 66 8d 14          	lea    (%si),%dx
    2497:	c5 00                	lds    (%eax),%eax
    2499:	00 00                	add    %al,(%eax)
    249b:	00 66 29             	add    %ah,0x29(%esi)
    249e:	c2 66 89             	ret    $0x8966
    24a1:	d0 66 05             	shlb   0x5(%esi)
    24a4:	60                   	pusha  
    24a5:	36 00 00             	add    %al,%ss:(%eax)
    24a8:	67 66 8b 00          	mov    (%bx,%si),%ax
    24ac:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    24b1:	67 66 8b 55 08       	mov    0x8(%di),%dx
    24b6:	66 89 d0             	mov    %dx,%ax
    24b9:	66 c1 e0 02          	shl    $0x2,%ax
    24bd:	66 01 d0             	add    %dx,%ax
    24c0:	66 c1 e0 02          	shl    $0x2,%ax
    24c4:	67 66 8d 14          	lea    (%si),%dx
    24c8:	c5 00                	lds    (%eax),%eax
    24ca:	00 00                	add    %al,(%eax)
    24cc:	00 66 29             	add    %ah,0x29(%esi)
    24cf:	c2 66 89             	ret    $0x8966
    24d2:	d0 66 05             	shlb   0x5(%esi)
    24d5:	60                   	pusha  
    24d6:	36 00 00             	add    %al,%ss:(%eax)
    24d9:	67 66 89 08          	mov    %cx,(%bx,%si)
    if(SEM_list[s].count <= 0){
    24dd:	67 66 8b 55 08       	mov    0x8(%di),%dx
    24e2:	66 89 d0             	mov    %dx,%ax
    24e5:	66 c1 e0 02          	shl    $0x2,%ax
    24e9:	66 01 d0             	add    %dx,%ax
    24ec:	66 c1 e0 02          	shl    $0x2,%ax
    24f0:	67 66 8d 14          	lea    (%si),%dx
    24f4:	c5 00                	lds    (%eax),%eax
    24f6:	00 00                	add    %al,(%eax)
    24f8:	00 66 29             	add    %ah,0x29(%esi)
    24fb:	c2 66 89             	ret    $0x8966
    24fe:	d0 66 05             	shlb   0x5(%esi)
    2501:	60                   	pusha  
    2502:	36 00 00             	add    %al,%ss:(%eax)
    2505:	67 66 8b 00          	mov    (%bx,%si),%ax
    2509:	66 85 c0             	test   %ax,%ax
    250c:	7f 74                	jg     2582 <do_V+0x108>
        dequeue(&SEM_list[s].semaque,&v_res);
    250e:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2513:	66 89 d0             	mov    %dx,%ax
    2516:	66 c1 e0 02          	shl    $0x2,%ax
    251a:	66 01 d0             	add    %dx,%ax
    251d:	66 c1 e0 02          	shl    $0x2,%ax
    2521:	67 66 8d 14          	lea    (%si),%dx
    2525:	c5 00                	lds    (%eax),%eax
    2527:	00 00                	add    %al,(%eax)
    2529:	00 66 29             	add    %ah,0x29(%esi)
    252c:	c2 67 66             	ret    $0x6667
    252f:	8d 82 60 36 00 00    	lea    0x3660(%edx),%eax
    2535:	66 83 c0 04          	add    $0x4,%ax
    2539:	66 68 34 36          	pushw  $0x3634
    253d:	00 00                	add    %al,(%eax)
    253f:	66 50                	push   %ax
    2541:	66 e8 4c fb          	callw  2091 <enqueue+0x6a>
    2545:	ff                   	(bad)  
    2546:	ff 66 83             	jmp    *-0x7d(%esi)
    2549:	c4 08                	les    (%eax),%ecx
        PCB_list[v_res].prg_status = READY;
    254b:	66 a1 34 36 66 c1    	mov    0xc1663634,%ax
    2551:	e0 02                	loopne 2555 <do_V+0xdb>
    2553:	66 89 c2             	mov    %ax,%dx
    2556:	66 c1 e2 04          	shl    $0x4,%dx
    255a:	66 01 d0             	add    %dx,%ax
    255d:	66 05 10 31          	add    $0x3110,%ax
    2561:	00 00                	add    %al,(%eax)
    2563:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    256a:	00 00                	add    %al,(%eax)
        enqueue(&readyqueue,v_res);
    256c:	66 a1 34 36 66 50    	mov    0x50663634,%ax
    2572:	66 68 e0 46          	pushw  $0x46e0
    2576:	00 00                	add    %al,(%eax)
    2578:	66 e8 a9 fa          	callw  2025 <size+0x11>
    257c:	ff                   	(bad)  
    257d:	ff 66 83             	jmp    *-0x7d(%esi)
    2580:	c4 08                	les    (%eax),%ecx
    }
    __asm__("sti\n");
    2582:	fb                   	sti    

    2583:	66 c9                	leavew 
    2585:	66 c3                	retw   

00002587 <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    2587:	66 55                	push   %bp
    2589:	66 89 e5             	mov    %sp,%bp
    258c:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    2590:	66 e8 4b de          	callw  3df <_Schedule_once+0x9>
    2594:	ff                   	(bad)  
    2595:	ff 67 66             	jmp    *0x66(%edi)
    2598:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    259b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    25a0:	66 c9                	leavew 
    25a2:	66 c3                	retw   

000025a4 <wait>:
char wait(){
    25a4:	66 55                	push   %bp
    25a6:	66 89 e5             	mov    %sp,%bp
    25a9:	66 83 ec 08          	sub    $0x8,%sp
    int temp_ch = _wait();
    25ad:	66 e8 46 de          	callw  3f7 <_Schedule+0xb>
    25b1:	ff                   	(bad)  
    25b2:	ff 67 66             	jmp    *0x66(%edi)
    25b5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char ch = '0' + temp_ch;
    25b8:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    25bd:	66 83 c0 30          	add    $0x30,%ax
    25c1:	67 88 45 fb          	mov    %al,-0x5(%di)
    return ch;
    25c5:	67 8a 45 fb          	mov    -0x5(%di),%al
    //_wait();
}
    25c9:	66 c9                	leavew 
    25cb:	66 c3                	retw   

000025cd <exit>:
void exit(char ch){
    25cd:	66 55                	push   %bp
    25cf:	66 89 e5             	mov    %sp,%bp
    25d2:	66 83 ec 04          	sub    $0x4,%sp
    25d6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    25db:	67 88 45 fc          	mov    %al,-0x4(%di)
    _exit(ch);
    25df:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    25e5:	66 50                	push   %ax
    25e7:	66 e8 17 de          	callw  402 <_wait+0x9>
    25eb:	ff                   	(bad)  
    25ec:	ff 66 83             	jmp    *-0x7d(%esi)
    25ef:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    25f2:	c9                   	leave  
    25f3:	66 c3                	retw   

000025f5 <GetSem>:
int GetSem(int value){
    25f5:	66 55                	push   %bp
    25f7:	66 89 e5             	mov    %sp,%bp
    25fa:	66 83 ec 04          	sub    $0x4,%sp
    int sema = _GetSem(value);
    25fe:	67 66 ff 75 08       	pushw  0x8(%di)
    2603:	66 e8 0d de          	callw  414 <_exit+0x10>
    2607:	ff                   	(bad)  
    2608:	ff 66 83             	jmp    *-0x7d(%esi)
    260b:	c4 04 67             	les    (%edi,%eiz,2),%eax
    260e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return sema;
    2612:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    2617:	66 c9                	leavew 
    2619:	66 c3                	retw   

0000261b <SemFree>:
void SemFree(int value){
    261b:	66 55                	push   %bp
    261d:	66 89 e5             	mov    %sp,%bp
    _FreeSem(value);
    2620:	67 66 ff 75 08       	pushw  0x8(%di)
    2625:	66 e8 fd dd          	callw  426 <_GetSem+0x10>
    2629:	ff                   	(bad)  
    262a:	ff 66 83             	jmp    *-0x7d(%esi)
    262d:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2630:	c9                   	leave  
    2631:	66 c3                	retw   

00002633 <P>:
void P(int s){   
    2633:	66 55                	push   %bp
    2635:	66 89 e5             	mov    %sp,%bp
    _Pr(s);
    2638:	67 66 ff 75 08       	pushw  0x8(%di)
    263d:	66 e8 f7 dd          	callw  438 <_FreeSem+0x10>
    2641:	ff                   	(bad)  
    2642:	ff 66 83             	jmp    *-0x7d(%esi)
    2645:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2648:	c9                   	leave  
    2649:	66 c3                	retw   

0000264b <V>:
void V(int s){
    264b:	66 55                	push   %bp
    264d:	66 89 e5             	mov    %sp,%bp
    _Vr(s);
    2650:	67 66 ff 75 08       	pushw  0x8(%di)
    2655:	66 e8 f1 dd          	callw  44a <_Pr+0x10>
    2659:	ff                   	(bad)  
    265a:	ff 66 83             	jmp    *-0x7d(%esi)
    265d:	c4 04 66             	les    (%esi,%eiz,2),%eax
    2660:	c9                   	leave  
    2661:	66 c3                	retw   
