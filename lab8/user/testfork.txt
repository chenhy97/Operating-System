
testfork.elf:     file format elf32-i386


Disassembly of section .text:

00000100 <main>:
#include "../syscall/fork.h"
#include "../syscall/stdio.h"
int pid;
int main(){
     100:	66 55                	push   %bp
     102:	66 89 e5             	mov    %sp,%bp
     105:	66 83 ec 18          	sub    $0x18,%sp
    __asm__("mov $0x7000, %eax\n");
     109:	66 b8 00 70          	mov    $0x7000,%ax
     10d:	00 00                	add    %al,(%eax)
    __asm__("mov %ax, %ds\n");
     10f:	8e d8                	mov    %eax,%ds
    __asm__("mov %ax, %es\n");
     111:	8e c0                	mov    %eax,%es
    __asm__("mov %ax, %ss\n");
     113:	8e d0                	mov    %eax,%ss
    __asm__("mov $0x100, %esp");
     115:	66 bc 00 01          	mov    $0x100,%sp
     119:	00 00                	add    %al,(%eax)
    char const* str = "I love 10";
     11b:	67 66 c7 45 fc 5c 26 	movw   $0x265c,-0x4(%di)
     122:	00 00                	add    %al,(%eax)
    pid = fork();
     124:	66 e8 54 24          	callw  257c <do_V+0x104>
     128:	00 00                	add    %al,(%eax)
     12a:	66 a3 14 30 66 a1    	mov    %ax,0xa1663014
    printsint(pid);
     130:	14 30                	adc    $0x30,%al
     132:	66 50                	push   %ax
     134:	66 e8 7d 10          	callw  11b5 <printc+0x27>
     138:	00 00                	add    %al,(%eax)
     13a:	66 83 c4 04          	add    $0x4,%sp
    if(pid == -1){
     13e:	66 a1 14 30 66 83    	mov    0x83663014,%ax
     144:	f8                   	clc    
     145:	ff 75 1b             	pushl  0x1b(%ebp)
        char const *messeage = "Error in fork\n\r";
     148:	67 66 c7 45 f8 66 26 	movw   $0x2666,-0x8(%di)
     14f:	00 00                	add    %al,(%eax)
        prints(messeage);
     151:	67 66 ff 75 f8       	pushw  -0x8(%di)
     156:	66 e8 de 0f          	callw  1138 <print+0x8f>
     15a:	00 00                	add    %al,(%eax)
     15c:	66 83 c4 04          	add    $0x4,%sp
     160:	e9 88 00 66 a1       	jmp    a16601ed <_end+0xa16597b1>
    }
    else if(pid){
     165:	14 30                	adc    $0x30,%al
     167:	66 85 c0             	test   %ax,%ax
     16a:	74 43                	je     1af <main+0xaf>
        char const*dad_talk = "I am daddy\n\r";
     16c:	67 66 c7 45 f4 76 26 	movw   $0x2676,-0xc(%di)
     173:	00 00                	add    %al,(%eax)
        prints(dad_talk);
     175:	67 66 ff 75 f4       	pushw  -0xc(%di)
     17a:	66 e8 ba 0f          	callw  1138 <print+0x8f>
     17e:	00 00                	add    %al,(%eax)
     180:	66 83 c4 04          	add    $0x4,%sp
        char ch = wait();
     184:	66 e8 11 24          	callw  2599 <fork+0x1b>
     188:	00 00                	add    %al,(%eax)
     18a:	67 88 45 f3          	mov    %al,-0xd(%di)
        printc(ch);
     18e:	67 66 0f be 45 f3    	movsbw -0xd(%di),%ax
     194:	66 50                	push   %ax
     196:	66 e8 f2 0f          	callw  118c <prints+0x52>
     19a:	00 00                	add    %al,(%eax)
     19c:	66 83 c4 04          	add    $0x4,%sp
        exit(6);
     1a0:	66 6a 06             	pushw  $0x6
     1a3:	66 e8 1b 24          	callw  25c2 <wait+0x27>
     1a7:	00 00                	add    %al,(%eax)
     1a9:	66 83 c4 04          	add    $0x4,%sp
     1ad:	eb 3c                	jmp    1eb <main+0xeb>
    }
    else{
        char const*son_talk = "I am son\n\r";
     1af:	67 66 c7 45 ec 83 26 	movw   $0x2683,-0x14(%di)
     1b6:	00 00                	add    %al,(%eax)
        prints(son_talk);
     1b8:	67 66 ff 75 ec       	pushw  -0x14(%di)
     1bd:	66 e8 77 0f          	callw  1138 <print+0x8f>
     1c1:	00 00                	add    %al,(%eax)
     1c3:	66 83 c4 04          	add    $0x4,%sp
        int num = countLetterNum("Il10abcd");
     1c7:	66 68 8e 26          	pushw  $0x268e
     1cb:	00 00                	add    %al,(%eax)
     1cd:	66 e8 1c 00          	callw  1ed <main+0xed>
     1d1:	00 00                	add    %al,(%eax)
     1d3:	66 83 c4 04          	add    $0x4,%sp
     1d7:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
        exit(num);
     1dc:	67 66 ff 75 e8       	pushw  -0x18(%di)
     1e1:	66 e8 dd 23          	callw  25c2 <wait+0x27>
     1e5:	00 00                	add    %al,(%eax)
     1e7:	66 83 c4 04          	add    $0x4,%sp
    }
}
     1eb:	66 c9                	leavew 
     1ed:	66 c3                	retw   

000001ef <countLetterNum>:
int pid;
int countLetterNum(char const* s1){
     1ef:	66 55                	push   %bp
     1f1:	66 89 e5             	mov    %sp,%bp
     1f4:	66 83 ec 08          	sub    $0x8,%sp
    int index = 0;
     1f8:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     1ff:	00 00                	add    %al,(%eax)
    int count = 0;
     201:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     208:	00 00                	add    %al,(%eax)
    while(s1[index] != 0){
     20a:	eb 5a                	jmp    266 <countLetterNum+0x77>
        if((s1[index] >= 'a' && s1[index] <= 'z' )||(s1[index] >= 'A' && s1[index] <= 'Z') ){
     20c:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     211:	67 66 8b 45 08       	mov    0x8(%di),%ax
     216:	66 01 d0             	add    %dx,%ax
     219:	67 8a 00             	mov    (%bx,%si),%al
     21c:	3c 60                	cmp    $0x60,%al
     21e:	7e 14                	jle    234 <countLetterNum+0x45>
     220:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     225:	67 66 8b 45 08       	mov    0x8(%di),%ax
     22a:	66 01 d0             	add    %dx,%ax
     22d:	67 8a 00             	mov    (%bx,%si),%al
     230:	3c 7a                	cmp    $0x7a,%al
     232:	7e 28                	jle    25c <countLetterNum+0x6d>
     234:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     239:	67 66 8b 45 08       	mov    0x8(%di),%ax
     23e:	66 01 d0             	add    %dx,%ax
     241:	67 8a 00             	mov    (%bx,%si),%al
     244:	3c 40                	cmp    $0x40,%al
     246:	7e 19                	jle    261 <countLetterNum+0x72>
     248:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     24d:	67 66 8b 45 08       	mov    0x8(%di),%ax
     252:	66 01 d0             	add    %dx,%ax
     255:	67 8a 00             	mov    (%bx,%si),%al
     258:	3c 5a                	cmp    $0x5a,%al
     25a:	7f 05                	jg     261 <countLetterNum+0x72>
            count ++;
     25c:	67 66 ff 45 f8       	incw   -0x8(%di)
        }
        index ++;
     261:	67 66 ff 45 fc       	incw   -0x4(%di)
}
int pid;
int countLetterNum(char const* s1){
    int index = 0;
    int count = 0;
    while(s1[index] != 0){
     266:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     26b:	67 66 8b 45 08       	mov    0x8(%di),%ax
     270:	66 01 d0             	add    %dx,%ax
     273:	67 8a 00             	mov    (%bx,%si),%al
     276:	84 c0                	test   %al,%al
     278:	75 92                	jne    20c <countLetterNum+0x1d>
        if((s1[index] >= 'a' && s1[index] <= 'z' )||(s1[index] >= 'A' && s1[index] <= 'Z') ){
            count ++;
        }
        index ++;
    }
    return count;
     27a:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
     27f:	66 c9                	leavew 
     281:	66 c3                	retw   
     283:	66 90                	xchg   %ax,%ax
     285:	66 90                	xchg   %ax,%ax
     287:	66 90                	xchg   %ax,%ax
     289:	66 90                	xchg   %ax,%ax
     28b:	66 90                	xchg   %ax,%ax
     28d:	66 90                	xchg   %ax,%ax
     28f:	90                   	nop

00000290 <count>:
     290:	08 2d 00 00 00 00    	or     %ch,0x0

00000291 <alpha>:
     291:	2d 00 00 00 00       	sub    $0x0,%eax

00000292 <int_09_saved>:
     292:	00 00                	add    %al,(%eax)
	...

00000296 <program_saved>:
     296:	70 00                	jo     298 <program_saved+0x2>
	...

0000029a <ds_saved>:
     29a:	7c 00                	jl     29c <ds_saved+0x2>
	...

0000029e <return_save>:
     29e:	88 00                	mov    %al,(%eax)

000002a0 <esi_save>:
     2a0:	96                   	xchg   %eax,%esi
     2a1:	00 00                	add    %al,(%eax)
	...

000002a4 <temp>:
     2a4:	e8 03 b4 00 00       	call   b6ac <_end+0x4c70>

000002a6 <kernelesp_saved>:
     2a6:	b4 00                	mov    $0x0,%ah
	...

000002aa <esp_saved_inkernel>:
     2aa:	c8 00 00 00          	enter  $0x0,$0x0

000002ae <esp_saved_in_user>:
     2ae:	f0 00 00             	lock add %al,(%eax)
	...

000002b2 <ss_saved_in_user>:
     2b2:	2c 01                	sub    $0x1,%al
	...

000002b6 <color>:
     2b6:	01 c2                	add    %eax,%edx

000002b7 <ss_saved_fork>:
     2b7:	c2 01 00             	ret    $0x1
	...

000002bb <retaddr>:
     2bb:	58                   	pop    %eax
     2bc:	02 00                	add    (%eax),%al
	...

000002bf <Message31>:
     2bf:	74 69                	je     32a <_readinput+0x9>
     2c1:	6d                   	insl   (%dx),%es:(%edi)
     2c2:	65 3a 20             	cmp    %gs:(%eax),%ah

000002c5 <_sys_stack_copy>:
     2c5:	c8 00 00 00          	enter  $0x0,$0x0
     2c9:	8e d0                	mov    %eax,%ss
     2cb:	60                   	pusha  
     2cc:	1e                   	push   %ds
     2cd:	8b 46 06             	mov    0x6(%esi),%eax
     2d0:	8b 56 0a             	mov    0xa(%esi),%edx
     2d3:	8b 4e 0e             	mov    0xe(%esi),%ecx
     2d6:	8c db                	mov    %ds,%ebx

000002d8 <while_loop1>:
     2d8:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
     2de:	8e d8                	mov    %eax,%ds
     2e0:	67 8b 1a             	mov    (%bp,%si),%ebx
     2e3:	8e d9                	mov    %ecx,%ds
     2e5:	67 89 1a             	mov    %ebx,(%bp,%si)
     2e8:	83 c2 02             	add    $0x2,%edx
     2eb:	eb eb                	jmp    2d8 <while_loop1>

000002ed <end_for_copy>:
     2ed:	1f                   	pop    %ds
     2ee:	61                   	popa   
     2ef:	c9                   	leave  
     2f0:	66 5a                	pop    %dx
     2f2:	ff e2                	jmp    *%edx

000002f4 <_clearscreen>:
     2f4:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     2f9:	66 5a                	pop    %dx
     2fb:	ff e2                	jmp    *%edx

000002fd <_printchar>:
     2fd:	c8 00 00 00          	enter  $0x0,$0x0
     301:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
     306:	57                   	push   %edi
     307:	66 8b 4e 06          	mov    0x6(%esi),%cx
     30b:	66 8b 7e 0a          	mov    0xa(%esi),%di
     30f:	66 8b 56 0e          	mov    0xe(%esi),%dx
     313:	88 d5                	mov    %dl,%ch
     315:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
     31c:	00 66 5a             	add    %ah,0x5a(%esi)
     31f:	ff e2                	jmp    *%edx

00000321 <_readinput>:
     321:	c8 04 00 00          	enter  $0x4,$0x0
     325:	b4 00                	mov    $0x0,%ah
     327:	cd 16                	int    $0x16
     329:	b4 00                	mov    $0x0,%ah
     32b:	66 67 89 04          	mov    %ax,(%si)
     32f:	24 66                	and    $0x66,%al
     331:	67 8b 04             	mov    (%si),%eax
     334:	24 c9                	and    $0xc9,%al
     336:	66 5a                	pop    %dx
     338:	ff e2                	jmp    *%edx

0000033a <_showchar>:
     33a:	c8 00 00 00          	enter  $0x0,$0x0
     33e:	50                   	push   %eax
     33f:	53                   	push   %ebx
     340:	8b 46 06             	mov    0x6(%esi),%eax
     343:	b4 0e                	mov    $0xe,%ah
     345:	b3 00                	mov    $0x0,%bl
     347:	cd 10                	int    $0x10
     349:	5b                   	pop    %ebx
     34a:	58                   	pop    %eax
     34b:	c9                   	leave  
     34c:	66 5a                	pop    %dx
     34e:	ff e2                	jmp    *%edx

00000350 <_setPoint>:
     350:	c8 00 00 00          	enter  $0x0,$0x0
     354:	53                   	push   %ebx
     355:	b7 00                	mov    $0x0,%bh
     357:	8a 77 06             	mov    0x6(%edi),%dh
     35a:	8a 57 0a             	mov    0xa(%edi),%dl
     35d:	b4 02                	mov    $0x2,%ah
     35f:	cd 10                	int    $0x10
     361:	5b                   	pop    %ebx
     362:	c9                   	leave  
     363:	66 5a                	pop    %dx
     365:	ff e2                	jmp    *%edx

00000367 <_loadP>:
     367:	c8 00 00 00          	enter  $0x0,$0x0
     36b:	60                   	pusha  
     36c:	06                   	push   %es
     36d:	1e                   	push   %ds
     36e:	8c c8                	mov    %cs,%eax
     370:	8e d8                	mov    %eax,%ds
     372:	8b 46 0e             	mov    0xe(%esi),%eax
     375:	8e c0                	mov    %eax,%es
     377:	b2 00                	mov    $0x0,%dl
     379:	8b 46 0a             	mov    0xa(%esi),%eax
     37c:	b3 12                	mov    $0x12,%bl
     37e:	f6 f3                	div    %bl
     380:	88 e1                	mov    %ah,%cl
     382:	30 e4                	xor    %ah,%ah
     384:	b3 02                	mov    $0x2,%bl
     386:	f6 f3                	div    %bl
     388:	88 e6                	mov    %ah,%dh
     38a:	88 c5                	mov    %al,%ch
     38c:	8a 46 06             	mov    0x6(%esi),%al
     38f:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
     394:	cd 13                	int    $0x13
     396:	1f                   	pop    %ds
     397:	07                   	pop    %es
     398:	61                   	popa   
     399:	c9                   	leave  
     39a:	66 5a                	pop    %dx
     39c:	ff e2                	jmp    *%edx

0000039e <_RunProgress>:
     39e:	c8 00 00 00          	enter  $0x0,$0x0
     3a2:	8c c8                	mov    %cs,%eax
     3a4:	8e d8                	mov    %eax,%ds
     3a6:	8e c0                	mov    %eax,%es
     3a8:	8b 5e 06             	mov    0x6(%esi),%ebx
     3ab:	c7 06 96 02 00 01    	movl   $0x1000296,(%esi)
     3b1:	89 1e                	mov    %ebx,(%esi)
     3b3:	98                   	cwtl   
     3b4:	02 66 89             	add    -0x77(%esi),%ah
     3b7:	26                   	es
     3b8:	aa                   	stos   %al,%es:(%edi)
     3b9:	02 26                	add    (%esi),%ah
     3bb:	ff 1e                	lcall  *(%esi)
     3bd:	96                   	xchg   %eax,%esi
     3be:	02 8c c8 8e d8 8e c0 	add    -0x3f712772(%eax,%ecx,8),%cl

000003bf <S>:
     3bf:	8c c8                	mov    %cs,%eax
     3c1:	8e d8                	mov    %eax,%ds
     3c3:	8e c0                	mov    %eax,%es
     3c5:	8e d0                	mov    %eax,%ss
     3c7:	66 8b 26             	mov    (%esi),%sp
     3ca:	aa                   	stos   %al,%es:(%edi)
     3cb:	02 b4 00 cd 16 c9 66 	add    0x66c916cd(%eax,%eax,1),%dh
     3d2:	5a                   	pop    %edx
     3d3:	ff e2                	jmp    *%edx

000003d5 <_Schedule_once>:
     3d5:	c8 00 00 00          	enter  $0x0,$0x0
     3d9:	cd 41                	int    $0x41
     3db:	c9                   	leave  
     3dc:	66 5a                	pop    %dx
     3de:	ff e2                	jmp    *%edx

000003e0 <_fork_user>:
     3e0:	c8 00 00 00          	enter  $0x0,$0x0
     3e4:	cd 39                	int    $0x39
     3e6:	c9                   	leave  
     3e7:	66 5a                	pop    %dx
     3e9:	ff e2                	jmp    *%edx

000003eb <_Schedule>:
     3eb:	c8 00 00 00          	enter  $0x0,$0x0
     3ef:	16                   	push   %ss
     3f0:	cd 42                	int    $0x42
     3f2:	17                   	pop    %ss
     3f3:	c9                   	leave  
     3f4:	66 5a                	pop    %dx
     3f6:	ff e2                	jmp    *%edx

000003f8 <_wait>:
     3f8:	c8 00 00 00          	enter  $0x0,$0x0
     3fc:	cd 3b                	int    $0x3b
     3fe:	c9                   	leave  
     3ff:	66 5a                	pop    %dx
     401:	ff e2                	jmp    *%edx

00000403 <_exit>:
     403:	c8 00 00 00          	enter  $0x0,$0x0
     407:	66 67 8b 45 06       	mov    0x6(%di),%ax
     40c:	66 50                	push   %ax
     40e:	cd 2a                	int    $0x2a
     410:	c9                   	leave  
     411:	66 5a                	pop    %dx
     413:	ff e2                	jmp    *%edx

00000415 <_GetSem>:
     415:	c8 00 00 00          	enter  $0x0,$0x0
     419:	66 67 8b 45 06       	mov    0x6(%di),%ax
     41e:	66 50                	push   %ax
     420:	cd 3c                	int    $0x3c
     422:	c9                   	leave  
     423:	66 5a                	pop    %dx
     425:	ff e2                	jmp    *%edx

00000427 <_FreeSem>:
     427:	c8 00 00 00          	enter  $0x0,$0x0
     42b:	66 67 8b 45 06       	mov    0x6(%di),%ax
     430:	66 50                	push   %ax
     432:	cd 3d                	int    $0x3d
     434:	c9                   	leave  
     435:	66 5a                	pop    %dx
     437:	ff e2                	jmp    *%edx

00000439 <_P>:
     439:	c8 00 00 00          	enter  $0x0,$0x0
     43d:	66 67 8b 45 06       	mov    0x6(%di),%ax
     442:	66 50                	push   %ax
     444:	cd 3e                	int    $0x3e
     446:	c9                   	leave  
     447:	66 5a                	pop    %dx
     449:	ff e2                	jmp    *%edx

0000044b <_V>:
     44b:	c8 00 00 00          	enter  $0x0,$0x0
     44f:	66 67 8b 45 06       	mov    0x6(%di),%ax
     454:	66 50                	push   %ax
     456:	cd 3f                	int    $0x3f
     458:	c9                   	leave  
     459:	66 5a                	pop    %dx
     45b:	ff e2                	jmp    *%edx

0000045d <_SetINT20h>:
     45d:	fa                   	cli    
     45e:	1e                   	push   %ds
     45f:	06                   	push   %es
     460:	8c c8                	mov    %cs,%eax
     462:	8e d8                	mov    %eax,%ds
     464:	8e c0                	mov    %eax,%es
     466:	8c 16                	mov    %ss,(%esi)
     468:	b2 02                	mov    $0x2,%dl
     46a:	8e d0                	mov    %eax,%ss
     46c:	66 89 26             	mov    %sp,(%esi)
     46f:	ae                   	scas   %es:(%edi),%al
     470:	02 66 8b             	add    -0x75(%esi),%ah
     473:	26                   	es
     474:	aa                   	stos   %al,%es:(%edi)
     475:	02 53 51             	add    0x51(%ebx),%dl
     478:	52                   	push   %edx
     479:	b4 01                	mov    $0x1,%ah
     47b:	cd 16                	int    $0x16
     47d:	5a                   	pop    %edx
     47e:	59                   	pop    %ecx
     47f:	5b                   	pop    %ebx
     480:	8e 16                	mov    (%esi),%ss
     482:	b2 02                	mov    $0x2,%dl
     484:	66 8b 26             	mov    (%esi),%sp
     487:	ae                   	scas   %es:(%edi),%al
     488:	02 07                	add    (%edi),%al
     48a:	1f                   	pop    %ds
     48b:	74 0a                	je     497 <going_on>
     48d:	50                   	push   %eax
     48e:	b4 00                	mov    $0x0,%ah
     490:	cd 16                	int    $0x16
     492:	58                   	pop    %eax
     493:	fb                   	sti    
     494:	cd 38                	int    $0x38
     496:	cf                   	iret   

00000497 <going_on>:
     497:	fb                   	sti    
     498:	cf                   	iret   

00000499 <_SetINT08h_turn_around>:
     499:	e8 3d 06 fa 6a       	call   6afa0adb <_end+0x6af9a09f>
     49e:	00 e8                	add    %ch,%al
     4a0:	b6 12                	mov    $0x12,%dh
     4a2:	e8 a8 06 b0 20       	call   20b00b4f <_end+0x20afa113>
     4a7:	e6 20                	out    %al,$0x20
     4a9:	e6 a0                	out    %al,$0xa0
     4ab:	fb                   	sti    
     4ac:	cf                   	iret   

000004ad <_SetINT08h>:
     4ad:	60                   	pusha  
     4ae:	0f a8                	push   %gs
     4b0:	1e                   	push   %ds
     4b1:	06                   	push   %es
     4b2:	16                   	push   %ss
     4b3:	8c c8                	mov    %cs,%eax
     4b5:	8e c0                	mov    %eax,%es
     4b7:	8e d8                	mov    %eax,%ds
     4b9:	8e d0                	mov    %eax,%ss
     4bb:	fe 0e                	decb   (%esi)
     4bd:	90                   	nop
     4be:	02 75 4f             	add    0x4f(%ebp),%dh

000004c1 <notc>:
     4c1:	80 3e 91             	cmpb   $0x91,(%esi)
     4c4:	02 2d 75 07 c6 06    	add    0x6c60775,%ch
     4ca:	91                   	xchg   %eax,%ecx
     4cb:	02 5c eb 2a          	add    0x2a(%ebx,%ebp,8),%bl

000004cf <changleft>:
     4cf:	80 3e 91             	cmpb   $0x91,(%esi)
     4d2:	02 5c 75 07          	add    0x7(%ebp,%esi,2),%bl
     4d6:	c6 06 91             	movb   $0x91,(%esi)
     4d9:	02 7c eb 1c          	add    0x1c(%ebx,%ebp,8),%bh

000004dd <changright>:
     4dd:	80 3e 91             	cmpb   $0x91,(%esi)
     4e0:	02 7c 75 07          	add    0x7(%ebp,%esi,2),%bh
     4e4:	c6 06 91             	movb   $0x91,(%esi)
     4e7:	02 2f                	add    (%edi),%ch
     4e9:	eb 0e                	jmp    4f9 <show>

000004eb <changheng>:
     4eb:	80 3e 91             	cmpb   $0x91,(%esi)
     4ee:	02 2f                	add    (%edi),%ch
     4f0:	75 cf                	jne    4c1 <notc>
     4f2:	c6 06 91             	movb   $0x91,(%esi)
     4f5:	02 2d eb 00 b9 00    	add    0xb900eb,%ch

000004f9 <show>:
     4f9:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     4fe:	b4 09                	mov    $0x9,%ah
     500:	8a 26                	mov    (%esi),%ah
     502:	b6 02                	mov    $0x2,%dh
     504:	a0 91 02 65 a3       	mov    0xa3650291,%al
     509:	8e 00                	mov    (%eax),%es
     50b:	c6 06 90             	movb   $0x90,(%esi)
     50e:	02 08                	add    (%eax),%cl

00000510 <end>:
     510:	b0 20                	mov    $0x20,%al
     512:	e6 20                	out    %al,$0x20
     514:	e6 a0                	out    %al,$0xa0
     516:	17                   	pop    %ss
     517:	07                   	pop    %es
     518:	1f                   	pop    %ds
     519:	0f a9                	pop    %gs
     51b:	61                   	popa   
     51c:	fb                   	sti    
     51d:	cf                   	iret   

0000051e <_SetINT09h>:
     51e:	fa                   	cli    
     51f:	1e                   	push   %ds
     520:	06                   	push   %es
     521:	8c c8                	mov    %cs,%eax
     523:	8e d8                	mov    %eax,%ds
     525:	8e c0                	mov    %eax,%es
     527:	8e d0                	mov    %eax,%ss
     529:	8c 16                	mov    %ss,(%esi)
     52b:	b2 02                	mov    $0x2,%dl
     52d:	8e d0                	mov    %eax,%ss
     52f:	66 89 26             	mov    %sp,(%esi)
     532:	ae                   	scas   %es:(%edi),%al
     533:	02 66 8b             	add    -0x75(%esi),%ah
     536:	26                   	es
     537:	aa                   	stos   %al,%es:(%edi)
     538:	02 60 b9             	add    -0x47(%eax),%ah
     53b:	00 b8 8e e9 8a 26    	add    %bh,0x268ae98e(%eax)
     541:	b6 02                	mov    $0x2,%dh
     543:	b0 4f                	mov    $0x4f,%al
     545:	65 a3 78 00 b0 55    	mov    %eax,%gs:0x55b00078
     54b:	65 a3 7a 00 b0 43    	mov    %eax,%gs:0x43b0007a
     551:	65 a3 7c 00 b0 48    	mov    %eax,%gs:0x48b0007c
     557:	65 a3 7e 00 b0 53    	mov    %eax,%gs:0x53b0007e
     55d:	65 a3 80 00 b0 21    	mov    %eax,%gs:0x21b00080
     563:	65 a3 82 00 b0 4f    	mov    %eax,%gs:0x4fb00082
     569:	65 a3 84 00 b0 55    	mov    %eax,%gs:0x55b00084
     56f:	65 a3 86 00 b0 43    	mov    %eax,%gs:0x43b00086
     575:	65 a3 88 00 b0 48    	mov    %eax,%gs:0x48b00088
     57b:	65 a3 8a 00 b0 21    	mov    %eax,%gs:0x21b0008a
     581:	65 a3 8c 00 61 80    	mov    %eax,%gs:0x8061008c
     587:	fc                   	cld    
     588:	06                   	push   %es
     589:	75 06                	jne    591 <cont>
     58b:	b4 01                	mov    $0x1,%ah
     58d:	88 26                	mov    %ah,(%esi)
     58f:	b6 02                	mov    $0x2,%dh

00000591 <cont>:
     591:	fe 06                	incb   (%esi)
     593:	b6 02                	mov    $0x2,%dh
     595:	8c c8                	mov    %cs,%eax
     597:	8e c0                	mov    %eax,%es
     599:	fb                   	sti    
     59a:	9c                   	pushf  
     59b:	26 ff 1e             	lcall  *%es:(%esi)
     59e:	92                   	xchg   %eax,%edx
     59f:	02 8e 16 b2 02 66    	add    0x6602b216(%esi),%cl
     5a5:	8b 26                	mov    (%esi),%esp
     5a7:	ae                   	scas   %es:(%edi),%al
     5a8:	02 07                	add    (%edi),%al
     5aa:	1f                   	pop    %ds
     5ab:	cf                   	iret   

000005ac <_SetINT33h>:
     5ac:	fa                   	cli    
     5ad:	c8 00 00 00          	enter  $0x0,$0x0
     5b1:	60                   	pusha  
     5b2:	1e                   	push   %ds
     5b3:	0f a8                	push   %gs
     5b5:	06                   	push   %es
     5b6:	8c c8                	mov    %cs,%eax
     5b8:	8e c0                	mov    %eax,%es
     5ba:	8e d8                	mov    %eax,%ds
     5bc:	8c 16                	mov    %ss,(%esi)
     5be:	b2 02                	mov    $0x2,%dl
     5c0:	8e d0                	mov    %eax,%ss
     5c2:	66 89 26             	mov    %sp,(%esi)
     5c5:	ae                   	scas   %es:(%edi),%al
     5c6:	02 66 8b             	add    -0x75(%esi),%ah
     5c9:	26                   	es
     5ca:	aa                   	stos   %al,%es:(%edi)
     5cb:	02 6a 00             	add    0x0(%edx),%ch
     5ce:	e8 0a 08 8e 16       	call   168e0ddd <_end+0x168da3a1>
     5d3:	b2 02                	mov    $0x2,%dl
     5d5:	66 8b 26             	mov    (%esi),%sp
     5d8:	ae                   	scas   %es:(%edi),%al
     5d9:	02 07                	add    (%edi),%al
     5db:	0f a9                	pop    %gs
     5dd:	1f                   	pop    %ds
     5de:	61                   	popa   
     5df:	fb                   	sti    
     5e0:	c9                   	leave  
     5e1:	cf                   	iret   

000005e2 <_SetINT34h>:
     5e2:	fa                   	cli    
     5e3:	c8 00 00 00          	enter  $0x0,$0x0
     5e7:	60                   	pusha  
     5e8:	1e                   	push   %ds
     5e9:	0f a8                	push   %gs
     5eb:	06                   	push   %es
     5ec:	8c c8                	mov    %cs,%eax
     5ee:	8e c0                	mov    %eax,%es
     5f0:	8e d8                	mov    %eax,%ds
     5f2:	8c 16                	mov    %ss,(%esi)
     5f4:	b2 02                	mov    $0x2,%dl
     5f6:	8e d0                	mov    %eax,%ss
     5f8:	66 89 26             	mov    %sp,(%esi)
     5fb:	ae                   	scas   %es:(%edi),%al
     5fc:	02 66 8b             	add    -0x75(%esi),%ah
     5ff:	26                   	es
     600:	aa                   	stos   %al,%es:(%edi)
     601:	02 6a 00             	add    0x0(%edx),%ch
     604:	e8 84 08 8e 16       	call   168e0e8d <_end+0x168da451>
     609:	b2 02                	mov    $0x2,%dl
     60b:	66 8b 26             	mov    (%esi),%sp
     60e:	ae                   	scas   %es:(%edi),%al
     60f:	02 07                	add    (%edi),%al
     611:	0f a9                	pop    %gs
     613:	1f                   	pop    %ds
     614:	61                   	popa   
     615:	fb                   	sti    
     616:	c9                   	leave  
     617:	cf                   	iret   

00000618 <_SetINT35h>:
     618:	60                   	pusha  
     619:	1e                   	push   %ds
     61a:	0f a8                	push   %gs
     61c:	06                   	push   %es
     61d:	8c c8                	mov    %cs,%eax
     61f:	8e c0                	mov    %eax,%es
     621:	8e d8                	mov    %eax,%ds
     623:	8c 16                	mov    %ss,(%esi)
     625:	b2 02                	mov    $0x2,%dl
     627:	8e d0                	mov    %eax,%ss
     629:	66 89 26             	mov    %sp,(%esi)
     62c:	ae                   	scas   %es:(%edi),%al
     62d:	02 66 8b             	add    -0x75(%esi),%ah
     630:	26                   	es
     631:	aa                   	stos   %al,%es:(%edi)
     632:	02 6a 00             	add    0x0(%edx),%ch
     635:	e8 32 09 8e 16       	call   168e0f6c <_end+0x168da530>
     63a:	b2 02                	mov    $0x2,%dl
     63c:	66 8b 26             	mov    (%esi),%sp
     63f:	ae                   	scas   %es:(%edi),%al
     640:	02 07                	add    (%edi),%al
     642:	0f a9                	pop    %gs
     644:	1f                   	pop    %ds
     645:	61                   	popa   
     646:	fb                   	sti    
     647:	cf                   	iret   

00000648 <_SetINT36h>:
     648:	60                   	pusha  
     649:	1e                   	push   %ds
     64a:	0f a8                	push   %gs
     64c:	06                   	push   %es
     64d:	8c c8                	mov    %cs,%eax
     64f:	8e c0                	mov    %eax,%es
     651:	8e d8                	mov    %eax,%ds
     653:	8c 16                	mov    %ss,(%esi)
     655:	b2 02                	mov    $0x2,%dl
     657:	8e d0                	mov    %eax,%ss
     659:	66 89 26             	mov    %sp,(%esi)
     65c:	ae                   	scas   %es:(%edi),%al
     65d:	02 66 8b             	add    -0x75(%esi),%ah
     660:	26                   	es
     661:	aa                   	stos   %al,%es:(%edi)
     662:	02 6a 00             	add    0x0(%edx),%ch
     665:	e8 88 09 8e 16       	call   168e0ff2 <_end+0x168da5b6>
     66a:	b2 02                	mov    $0x2,%dl
     66c:	66 8b 26             	mov    (%esi),%sp
     66f:	ae                   	scas   %es:(%edi),%al
     670:	02 07                	add    (%edi),%al
     672:	0f a9                	pop    %gs
     674:	1f                   	pop    %ds
     675:	61                   	popa   
     676:	fb                   	sti    
     677:	cf                   	iret   

00000678 <_SetINT21h>:
     678:	c8 00 00 00          	enter  $0x0,$0x0
     67c:	60                   	pusha  
     67d:	1e                   	push   %ds
     67e:	0f a8                	push   %gs
     680:	06                   	push   %es
     681:	8c c8                	mov    %cs,%eax
     683:	8e c0                	mov    %eax,%es
     685:	8e d8                	mov    %eax,%ds
     687:	8b 46 08             	mov    0x8(%esi),%eax
     68a:	80 fc 00             	cmp    $0x0,%ah
     68d:	74 16                	je     6a5 <fn0>
     68f:	80 fc 01             	cmp    $0x1,%ah
     692:	74 21                	je     6b5 <fn1>
     694:	80 fc 02             	cmp    $0x2,%ah
     697:	74 3d                	je     6d6 <fn2>
     699:	80 fc 03             	cmp    $0x3,%ah
     69c:	74 5f                	je     6fd <fn3>
     69e:	07                   	pop    %es
     69f:	0f a9                	pop    %gs
     6a1:	1f                   	pop    %ds
     6a2:	61                   	popa   
     6a3:	c9                   	leave  
     6a4:	cf                   	iret   

000006a5 <fn0>:
     6a5:	8b 46 0a             	mov    0xa(%esi),%eax
     6a8:	b4 0e                	mov    $0xe,%ah
     6aa:	b3 00                	mov    $0x0,%bl
     6ac:	cd 10                	int    $0x10
     6ae:	07                   	pop    %es
     6af:	0f a9                	pop    %gs
     6b1:	1f                   	pop    %ds
     6b2:	61                   	popa   
     6b3:	c9                   	leave  
     6b4:	cf                   	iret   

000006b5 <fn1>:
     6b5:	66 83 ec 04          	sub    $0x4,%sp
     6b9:	b4 00                	mov    $0x0,%ah
     6bb:	cd 16                	int    $0x16
     6bd:	b4 00                	mov    $0x0,%ah
     6bf:	66 67 89 04          	mov    %ax,(%si)
     6c3:	24 66                	and    $0x66,%al
     6c5:	67 8b 04             	mov    (%si),%eax
     6c8:	24 66                	and    $0x66,%al
     6ca:	83 c4 04             	add    $0x4,%esp
     6cd:	8e e0                	mov    %eax,%fs
     6cf:	07                   	pop    %es
     6d0:	0f a9                	pop    %gs
     6d2:	1f                   	pop    %ds
     6d3:	61                   	popa   
     6d4:	c9                   	leave  
     6d5:	cf                   	iret   

000006d6 <fn2>:
     6d6:	66 83 ec 04          	sub    $0x4,%sp
     6da:	b4 00                	mov    $0x0,%ah
     6dc:	cd 16                	int    $0x16
     6de:	b4 00                	mov    $0x0,%ah
     6e0:	66 67 89 04          	mov    %ax,(%si)
     6e4:	24 66                	and    $0x66,%al
     6e6:	67 8b 04             	mov    (%si),%eax
     6e9:	24 b4                	and    $0xb4,%al
     6eb:	0e                   	push   %cs
     6ec:	b3 00                	mov    $0x0,%bl
     6ee:	cd 10                	int    $0x10
     6f0:	66 83 c4 04          	add    $0x4,%sp
     6f4:	8e e0                	mov    %eax,%fs
     6f6:	07                   	pop    %es
     6f7:	0f a9                	pop    %gs
     6f9:	1f                   	pop    %ds
     6fa:	61                   	popa   
     6fb:	c9                   	leave  
     6fc:	cf                   	iret   

000006fd <fn3>:
     6fd:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     702:	07                   	pop    %es
     703:	0f a9                	pop    %gs
     705:	1f                   	pop    %ds
     706:	61                   	popa   
     707:	c9                   	leave  
     708:	cf                   	iret   

00000709 <_SetINT37h>:
     709:	fa                   	cli    
     70a:	e8 94 04 cf fa       	call   facf0ba3 <_end+0xfacea167>

0000070e <_SetINT38h>:
     70e:	fa                   	cli    
     70f:	50                   	push   %eax
     710:	1e                   	push   %ds
     711:	8c c8                	mov    %cs,%eax
     713:	8e d8                	mov    %eax,%ds
     715:	6a 00                	push   $0x0
     717:	e8 49 11 1f 58       	call   581f1865 <_end+0x581eae29>
     71c:	fb                   	sti    
     71d:	cf                   	iret   

0000071e <_SetINT39h>:
     71e:	fa                   	cli    
     71f:	c8 00 00 00          	enter  $0x0,$0x0
     723:	1e                   	push   %ds
     724:	6a 00                	push   $0x0
     726:	8c c8                	mov    %cs,%eax
     728:	8e d8                	mov    %eax,%ds
     72a:	e8 32 13 1f c9       	call   c91f1a61 <_end+0xc91eb025>
     72f:	fb                   	sti    
     730:	cf                   	iret   

00000731 <_SetINT41h>:
     731:	fa                   	cli    
     732:	e8 a4 03 e8 15       	call   15e80adb <_end+0x15e7a09f>
     737:	04 b0                	add    $0xb0,%al
     739:	20 e6                	and    %ah,%dh
     73b:	20 e6                	and    %ah,%dh
     73d:	a0 fb cf fa c8       	mov    0xc8facffb,%al

00000740 <_SetINT2Ah>:
     740:	fa                   	cli    
     741:	c8 00 00 00          	enter  $0x0,$0x0
     745:	1e                   	push   %ds
     746:	66 67 8b 45 08       	mov    0x8(%di),%ax
     74b:	66 50                	push   %ax
     74d:	6a 00                	push   $0x0
     74f:	8c c8                	mov    %cs,%eax
     751:	8e d8                	mov    %eax,%ds
     753:	e8 9e 15 58 1f       	call   1f581cf6 <_end+0x1f57b2ba>
     758:	c9                   	leave  
     759:	fb                   	sti    
     75a:	cf                   	iret   

0000075b <_SetINT3Bh>:
     75b:	fa                   	cli    
     75c:	c8 00 00 00          	enter  $0x0,$0x0
     760:	1e                   	push   %ds
     761:	6a 00                	push   $0x0
     763:	8c c8                	mov    %cs,%eax
     765:	8e d8                	mov    %eax,%ds
     767:	e8 57 16 1f c9       	call   c91f1dc3 <_end+0xc91eb387>
     76c:	fb                   	sti    
     76d:	cf                   	iret   

0000076e <_SetINT3Ch>:
     76e:	fa                   	cli    
     76f:	c8 00 00 00          	enter  $0x0,$0x0
     773:	1e                   	push   %ds
     774:	66 67 8b 45 08       	mov    0x8(%di),%ax
     779:	66 50                	push   %ax
     77b:	6a 00                	push   $0x0
     77d:	8c c8                	mov    %cs,%eax
     77f:	8e d8                	mov    %eax,%ds
     781:	e8 b7 1a 66 83       	call   8366223d <_end+0x8365b801>
     786:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     789:	c9                   	leave  
     78a:	fb                   	sti    
     78b:	cf                   	iret   

0000078c <_SetINT3Dh>:
     78c:	fa                   	cli    
     78d:	c8 00 00 00          	enter  $0x0,$0x0
     791:	1e                   	push   %ds
     792:	66 67 8b 45 08       	mov    0x8(%di),%ax
     797:	66 50                	push   %ax
     799:	6a 00                	push   $0x0
     79b:	8c c8                	mov    %cs,%eax
     79d:	8e d8                	mov    %eax,%ds
     79f:	e8 5a 1b 66 83       	call   836622fe <_end+0x8365b8c2>
     7a4:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     7a7:	c9                   	leave  
     7a8:	fb                   	sti    
     7a9:	cf                   	iret   

000007aa <_SetINT3Eh>:
     7aa:	fa                   	cli    
     7ab:	c8 00 00 00          	enter  $0x0,$0x0
     7af:	1e                   	push   %ds
     7b0:	66 67 8b 45 08       	mov    0x8(%di),%ax
     7b5:	66 50                	push   %ax
     7b7:	6a 00                	push   $0x0
     7b9:	8c c8                	mov    %cs,%eax
     7bb:	8e d8                	mov    %eax,%ds
     7bd:	e8 73 1b 66 83       	call   83662335 <_end+0x8365b8f9>
     7c2:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     7c5:	c9                   	leave  
     7c6:	fb                   	sti    
     7c7:	cf                   	iret   

000007c8 <_SetINT3Fh>:
     7c8:	fa                   	cli    
     7c9:	c8 00 00 00          	enter  $0x0,$0x0
     7cd:	1e                   	push   %ds
     7ce:	66 67 8b 45 08       	mov    0x8(%di),%ax
     7d3:	66 50                	push   %ax
     7d5:	6a 00                	push   $0x0
     7d7:	8c c8                	mov    %cs,%eax
     7d9:	8e d8                	mov    %eax,%ds
     7db:	e8 9a 1c 66 83       	call   8366247a <_end+0x8365ba3e>
     7e0:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     7e3:	c9                   	leave  
     7e4:	fb                   	sti    
     7e5:	cf                   	iret   

000007e6 <_initialInt>:
     7e6:	c8 00 00 00          	enter  $0x0,$0x0
     7ea:	60                   	pusha  
     7eb:	06                   	push   %es
     7ec:	1e                   	push   %ds
     7ed:	8c c8                	mov    %cs,%eax
     7ef:	8e d8                	mov    %eax,%ds
     7f1:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     7f6:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
     7fb:	00 f7                	add    %dh,%bh
     7fd:	e3 89                	jecxz  788 <_SetINT3Ch+0x1a>
     7ff:	c7                   	(bad)  
     800:	b8 5d 04 26 89       	mov    $0x8926045d,%eax
     805:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     80a:	45                   	inc    %ebp
     80b:	02 1f                	add    (%edi),%bl
     80d:	07                   	pop    %es
     80e:	61                   	popa   
     80f:	60                   	pusha  
     810:	06                   	push   %es
     811:	1e                   	push   %ds
     812:	8c c8                	mov    %cs,%eax
     814:	8e d8                	mov    %eax,%ds
     816:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     81b:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
     820:	00 f7                	add    %dh,%bh
     822:	e3 89                	jecxz  7ad <_SetINT3Eh+0x3>
     824:	c7                   	(bad)  
     825:	b8 ac 05 26 89       	mov    $0x892605ac,%eax
     82a:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     82f:	45                   	inc    %ebp
     830:	02 1f                	add    (%edi),%bl
     832:	07                   	pop    %es
     833:	61                   	popa   
     834:	60                   	pusha  
     835:	06                   	push   %es
     836:	1e                   	push   %ds
     837:	8c c8                	mov    %cs,%eax
     839:	8e d8                	mov    %eax,%ds
     83b:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     840:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
     845:	00 f7                	add    %dh,%bh
     847:	e3 89                	jecxz  7d2 <_SetINT3Fh+0xa>
     849:	c7                   	(bad)  
     84a:	b8 e2 05 26 89       	mov    $0x892605e2,%eax
     84f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     854:	45                   	inc    %ebp
     855:	02 1f                	add    (%edi),%bl
     857:	07                   	pop    %es
     858:	61                   	popa   
     859:	60                   	pusha  
     85a:	06                   	push   %es
     85b:	1e                   	push   %ds
     85c:	8c c8                	mov    %cs,%eax
     85e:	8e d8                	mov    %eax,%ds
     860:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     865:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
     86a:	00 f7                	add    %dh,%bh
     86c:	e3 89                	jecxz  7f7 <_initialInt+0x11>
     86e:	c7                   	(bad)  
     86f:	b8 18 06 26 89       	mov    $0x89260618,%eax
     874:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     879:	45                   	inc    %ebp
     87a:	02 1f                	add    (%edi),%bl
     87c:	07                   	pop    %es
     87d:	61                   	popa   
     87e:	60                   	pusha  
     87f:	06                   	push   %es
     880:	1e                   	push   %ds
     881:	8c c8                	mov    %cs,%eax
     883:	8e d8                	mov    %eax,%ds
     885:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     88a:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
     88f:	00 f7                	add    %dh,%bh
     891:	e3 89                	jecxz  81c <_initialInt+0x36>
     893:	c7                   	(bad)  
     894:	b8 48 06 26 89       	mov    $0x89260648,%eax
     899:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     89e:	45                   	inc    %ebp
     89f:	02 1f                	add    (%edi),%bl
     8a1:	07                   	pop    %es
     8a2:	61                   	popa   
     8a3:	60                   	pusha  
     8a4:	06                   	push   %es
     8a5:	1e                   	push   %ds
     8a6:	8c c8                	mov    %cs,%eax
     8a8:	8e d8                	mov    %eax,%ds
     8aa:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8af:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
     8b4:	00 f7                	add    %dh,%bh
     8b6:	e3 89                	jecxz  841 <_initialInt+0x5b>
     8b8:	c7                   	(bad)  
     8b9:	b8 78 06 26 89       	mov    $0x89260678,%eax
     8be:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8c3:	45                   	inc    %ebp
     8c4:	02 1f                	add    (%edi),%bl
     8c6:	07                   	pop    %es
     8c7:	61                   	popa   
     8c8:	60                   	pusha  
     8c9:	06                   	push   %es
     8ca:	1e                   	push   %ds
     8cb:	8c c8                	mov    %cs,%eax
     8cd:	8e d8                	mov    %eax,%ds
     8cf:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8d4:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
     8d9:	00 f7                	add    %dh,%bh
     8db:	e3 89                	jecxz  866 <_initialInt+0x80>
     8dd:	c7                   	(bad)  
     8de:	b8 09 07 26 89       	mov    $0x89260709,%eax
     8e3:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8e8:	45                   	inc    %ebp
     8e9:	02 1f                	add    (%edi),%bl
     8eb:	07                   	pop    %es
     8ec:	61                   	popa   
     8ed:	60                   	pusha  
     8ee:	06                   	push   %es
     8ef:	1e                   	push   %ds
     8f0:	8c c8                	mov    %cs,%eax
     8f2:	8e d8                	mov    %eax,%ds
     8f4:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8f9:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
     8fe:	00 f7                	add    %dh,%bh
     900:	e3 89                	jecxz  88b <_initialInt+0xa5>
     902:	c7                   	(bad)  
     903:	b8 0e 07 26 89       	mov    $0x8926070e,%eax
     908:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     90d:	45                   	inc    %ebp
     90e:	02 1f                	add    (%edi),%bl
     910:	07                   	pop    %es
     911:	61                   	popa   
     912:	60                   	pusha  
     913:	06                   	push   %es
     914:	1e                   	push   %ds
     915:	8c c8                	mov    %cs,%eax
     917:	8e d8                	mov    %eax,%ds
     919:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     91e:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
     923:	00 f7                	add    %dh,%bh
     925:	e3 89                	jecxz  8b0 <_initialInt+0xca>
     927:	c7                   	(bad)  
     928:	b8 1e 07 26 89       	mov    $0x8926071e,%eax
     92d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     932:	45                   	inc    %ebp
     933:	02 1f                	add    (%edi),%bl
     935:	07                   	pop    %es
     936:	61                   	popa   
     937:	60                   	pusha  
     938:	06                   	push   %es
     939:	1e                   	push   %ds
     93a:	8c c8                	mov    %cs,%eax
     93c:	8e d8                	mov    %eax,%ds
     93e:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     943:	b8 2a 00 bb 04       	mov    $0x4bb002a,%eax
     948:	00 f7                	add    %dh,%bh
     94a:	e3 89                	jecxz  8d5 <_initialInt+0xef>
     94c:	c7                   	(bad)  
     94d:	b8 40 07 26 89       	mov    $0x89260740,%eax
     952:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     957:	45                   	inc    %ebp
     958:	02 1f                	add    (%edi),%bl
     95a:	07                   	pop    %es
     95b:	61                   	popa   
     95c:	60                   	pusha  
     95d:	06                   	push   %es
     95e:	1e                   	push   %ds
     95f:	8c c8                	mov    %cs,%eax
     961:	8e d8                	mov    %eax,%ds
     963:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     968:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
     96d:	00 f7                	add    %dh,%bh
     96f:	e3 89                	jecxz  8fa <_initialInt+0x114>
     971:	c7                   	(bad)  
     972:	b8 31 07 26 89       	mov    $0x89260731,%eax
     977:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     97c:	45                   	inc    %ebp
     97d:	02 1f                	add    (%edi),%bl
     97f:	07                   	pop    %es
     980:	61                   	popa   
     981:	60                   	pusha  
     982:	06                   	push   %es
     983:	1e                   	push   %ds
     984:	8c c8                	mov    %cs,%eax
     986:	8e d8                	mov    %eax,%ds
     988:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     98d:	b8 42 00 bb 04       	mov    $0x4bb0042,%eax
     992:	00 f7                	add    %dh,%bh
     994:	e3 89                	jecxz  91f <_initialInt+0x139>
     996:	c7                   	(bad)  
     997:	b8 99 04 26 89       	mov    $0x89260499,%eax
     99c:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9a1:	45                   	inc    %ebp
     9a2:	02 1f                	add    (%edi),%bl
     9a4:	07                   	pop    %es
     9a5:	61                   	popa   
     9a6:	60                   	pusha  
     9a7:	06                   	push   %es
     9a8:	1e                   	push   %ds
     9a9:	8c c8                	mov    %cs,%eax
     9ab:	8e d8                	mov    %eax,%ds
     9ad:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     9b2:	b8 3b 00 bb 04       	mov    $0x4bb003b,%eax
     9b7:	00 f7                	add    %dh,%bh
     9b9:	e3 89                	jecxz  944 <_initialInt+0x15e>
     9bb:	c7                   	(bad)  
     9bc:	b8 5b 07 26 89       	mov    $0x8926075b,%eax
     9c1:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9c6:	45                   	inc    %ebp
     9c7:	02 1f                	add    (%edi),%bl
     9c9:	07                   	pop    %es
     9ca:	61                   	popa   
     9cb:	60                   	pusha  
     9cc:	06                   	push   %es
     9cd:	1e                   	push   %ds
     9ce:	8c c8                	mov    %cs,%eax
     9d0:	8e d8                	mov    %eax,%ds
     9d2:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     9d7:	b8 3c 00 bb 04       	mov    $0x4bb003c,%eax
     9dc:	00 f7                	add    %dh,%bh
     9de:	e3 89                	jecxz  969 <_initialInt+0x183>
     9e0:	c7                   	(bad)  
     9e1:	b8 6e 07 26 89       	mov    $0x8926076e,%eax
     9e6:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9eb:	45                   	inc    %ebp
     9ec:	02 1f                	add    (%edi),%bl
     9ee:	07                   	pop    %es
     9ef:	61                   	popa   
     9f0:	60                   	pusha  
     9f1:	06                   	push   %es
     9f2:	1e                   	push   %ds
     9f3:	8c c8                	mov    %cs,%eax
     9f5:	8e d8                	mov    %eax,%ds
     9f7:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     9fc:	b8 3d 00 bb 04       	mov    $0x4bb003d,%eax
     a01:	00 f7                	add    %dh,%bh
     a03:	e3 89                	jecxz  98e <_initialInt+0x1a8>
     a05:	c7                   	(bad)  
     a06:	b8 8c 07 26 89       	mov    $0x8926078c,%eax
     a0b:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a10:	45                   	inc    %ebp
     a11:	02 1f                	add    (%edi),%bl
     a13:	07                   	pop    %es
     a14:	61                   	popa   
     a15:	60                   	pusha  
     a16:	06                   	push   %es
     a17:	1e                   	push   %ds
     a18:	8c c8                	mov    %cs,%eax
     a1a:	8e d8                	mov    %eax,%ds
     a1c:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a21:	b8 3e 00 bb 04       	mov    $0x4bb003e,%eax
     a26:	00 f7                	add    %dh,%bh
     a28:	e3 89                	jecxz  9b3 <_initialInt+0x1cd>
     a2a:	c7                   	(bad)  
     a2b:	b8 aa 07 26 89       	mov    $0x892607aa,%eax
     a30:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a35:	45                   	inc    %ebp
     a36:	02 1f                	add    (%edi),%bl
     a38:	07                   	pop    %es
     a39:	61                   	popa   
     a3a:	60                   	pusha  
     a3b:	06                   	push   %es
     a3c:	1e                   	push   %ds
     a3d:	8c c8                	mov    %cs,%eax
     a3f:	8e d8                	mov    %eax,%ds
     a41:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a46:	b8 3f 00 bb 04       	mov    $0x4bb003f,%eax
     a4b:	00 f7                	add    %dh,%bh
     a4d:	e3 89                	jecxz  9d8 <_initialInt+0x1f2>
     a4f:	c7                   	(bad)  
     a50:	b8 c8 07 26 89       	mov    $0x892607c8,%eax
     a55:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a5a:	45                   	inc    %ebp
     a5b:	02 1f                	add    (%edi),%bl
     a5d:	07                   	pop    %es
     a5e:	61                   	popa   
     a5f:	c9                   	leave  
     a60:	66 5a                	pop    %dx
     a62:	ff e2                	jmp    *%edx

00000a64 <_initialInt_09h>:
     a64:	c8 00 00 00          	enter  $0x0,$0x0
     a68:	a1 24 00 a3 92       	mov    0x92a30024,%eax
     a6d:	02 a1 26 00 a3 94    	add    -0x6b5cffda(%ecx),%ah
     a73:	02 60 06             	add    0x6(%eax),%ah
     a76:	1e                   	push   %ds
     a77:	8c c8                	mov    %cs,%eax
     a79:	8e d8                	mov    %eax,%ds
     a7b:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a80:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
     a85:	00 f7                	add    %dh,%bh
     a87:	e3 89                	jecxz  a12 <_initialInt+0x22c>
     a89:	c7                   	(bad)  
     a8a:	b8 1e 05 26 89       	mov    $0x8926051e,%eax
     a8f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a94:	45                   	inc    %ebp
     a95:	02 1f                	add    (%edi),%bl
     a97:	07                   	pop    %es
     a98:	61                   	popa   
     a99:	c9                   	leave  
     a9a:	66 5a                	pop    %dx
     a9c:	ff e2                	jmp    *%edx

00000a9e <_initialInt_08h>:
     a9e:	c8 00 00 00          	enter  $0x0,$0x0
     aa2:	b0 40                	mov    $0x40,%al
     aa4:	e6 43                	out    %al,$0x43
     aa6:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
     aab:	88 e0                	mov    %ah,%al
     aad:	e6 40                	out    %al,$0x40
     aaf:	60                   	pusha  
     ab0:	06                   	push   %es
     ab1:	1e                   	push   %ds
     ab2:	8c c8                	mov    %cs,%eax
     ab4:	8e d8                	mov    %eax,%ds
     ab6:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     abb:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
     ac0:	00 f7                	add    %dh,%bh
     ac2:	e3 89                	jecxz  a4d <_initialInt+0x267>
     ac4:	c7                   	(bad)  
     ac5:	b8 99 04 26 89       	mov    $0x89260499,%eax
     aca:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     acf:	45                   	inc    %ebp
     ad0:	02 1f                	add    (%edi),%bl
     ad2:	07                   	pop    %es
     ad3:	61                   	popa   
     ad4:	c9                   	leave  
     ad5:	66 5a                	pop    %dx
     ad7:	ff e2                	jmp    *%edx

00000ad9 <_save>:
     ad9:	66 89 26             	mov    %sp,(%esi)
     adc:	aa                   	stos   %al,%es:(%edi)
     add:	02 1e                	add    (%esi),%bl
     adf:	0e                   	push   %cs
     ae0:	1f                   	pop    %ds
     ae1:	8f 06                	popl   (%esi)
     ae3:	9a 02 8f 06 9e 02 66 	lcall  $0x6602,$0x9e068f02
     aea:	89 26                	mov    %esp,(%esi)
     aec:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
     aed:	02 66 89             	add    -0x77(%esi),%ah
     af0:	36 a0 02 66 8b 36    	mov    %ss:0x368b6602,%al
     af6:	3c 37                	cmp    $0x37,%al
     af8:	66 83 c6 2c          	add    $0x2c,%si
     afc:	67 8f 06 67 8f       	popl   -0x7099
     b01:	46                   	inc    %esi
     b02:	04 67                	add    $0x67,%al
     b04:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
     b0b:	46                   	inc    %esi
     b0c:	08 67 c7             	or     %ah,-0x39(%edi)
     b0f:	46                   	inc    %esi
     b10:	0a 00                	or     (%eax),%al
     b12:	00 66 67             	add    %ah,0x67(%esi)
     b15:	89 66 fc             	mov    %esp,-0x4(%esi)
     b18:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
     b1c:	8c de                	mov    %ds,%esi
     b1e:	8e d6                	mov    %esi,%ss
     b20:	66 8b 26             	mov    (%esi),%sp
     b23:	3c 37                	cmp    $0x37,%al
     b25:	66 83 c4 24          	add    $0x24,%sp
     b29:	6a 00                	push   $0x0
     b2b:	ff 36                	pushl  (%esi)
     b2d:	9a 02 6a 00 06 66 55 	lcall  $0x5566,$0x6006a02
     b34:	66 57                	push   %di
     b36:	66 ff 36             	pushw  (%esi)
     b39:	a0 02 66 52 66       	mov    0x66526602,%al
     b3e:	51                   	push   %ecx
     b3f:	66 53                	push   %bx
     b41:	66 50                	push   %ax
     b43:	66 8b 26             	mov    (%esi),%sp
     b46:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
     b47:	02 a1 9e 02 ff e0    	add    -0x1f00fd62(%ecx),%ah

00000b4d <_restart>:
     b4d:	66 89 26             	mov    %sp,(%esi)
     b50:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
     b51:	02 66 8b             	add    -0x75(%esi),%ah
     b54:	26                   	es
     b55:	3c 37                	cmp    $0x37,%al
     b57:	66 58                	pop    %ax
     b59:	66 5b                	pop    %bx
     b5b:	66 59                	pop    %cx
     b5d:	66 5a                	pop    %dx
     b5f:	66 5e                	pop    %si
     b61:	66 5f                	pop    %di
     b63:	66 5d                	pop    %bp
     b65:	07                   	pop    %es
     b66:	8f 06                	popl   (%esi)
     b68:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     b69:	02 8f 06 9a 02 8f    	add    -0x70fd65fa(%edi),%cl
     b6f:	06                   	push   %es
     b70:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     b71:	02 66 89             	add    -0x77(%esi),%ah
     b74:	36 a0 02 17 8f 06    	mov    %ss:0x68f1702,%al
     b7a:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     b7b:	02 66 89             	add    -0x77(%esi),%ah
     b7e:	e6 66                	out    %al,$0x66
     b80:	67 8b 26 67 ff       	mov    -0x99,%esp
     b85:	76 0c                	jbe    b93 <_restart+0x46>
     b87:	67 ff 76 08          	pushl  0x8(%bp)
     b8b:	67 ff 76 04          	pushl  0x4(%bp)
     b8f:	66 8b 36             	mov    (%esi),%si
     b92:	a0 02 8e 1e 9a       	mov    0x9a1e8e02,%al
     b97:	02 50 b0             	add    -0x50(%eax),%dl
     b9a:	20 e6                	and    %ah,%dh
     b9c:	20 e6                	and    %ah,%dh
     b9e:	a0 58 cf c8 00       	mov    0xc8cf58,%al

00000ba1 <RTC_Timer>:
     ba1:	c8 00 00 00          	enter  $0x0,$0x0
     ba5:	1e                   	push   %ds
     ba6:	06                   	push   %es
     ba7:	60                   	pusha  
     ba8:	8c c8                	mov    %cs,%eax
     baa:	8e d8                	mov    %eax,%ds
     bac:	8c c8                	mov    %cs,%eax
     bae:	8e c0                	mov    %eax,%es
     bb0:	bf 00 30 b4 02       	mov    $0x2b43000,%edi
     bb5:	cd 1a                	int    $0x1a
     bb7:	88 e8                	mov    %ch,%al
     bb9:	b4 00                	mov    $0x0,%ah
     bbb:	b3 10                	mov    $0x10,%bl
     bbd:	f6 f3                	div    %bl
     bbf:	04 30                	add    $0x30,%al
     bc1:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
     bc7:	88 e8                	mov    %ch,%al
     bc9:	24 0f                	and    $0xf,%al
     bcb:	04 30                	add    $0x30,%al
     bcd:	88 45 01             	mov    %al,0x1(%ebp)
     bd0:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
     bd4:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
     bd8:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
     bdc:	b4 02                	mov    $0x2,%ah
     bde:	cd 1a                	int    $0x1a
     be0:	88 c8                	mov    %cl,%al
     be2:	b4 00                	mov    $0x0,%ah
     be4:	b3 10                	mov    $0x10,%bl
     be6:	f6 f3                	div    %bl
     be8:	04 30                	add    $0x30,%al
     bea:	88 45 05             	mov    %al,0x5(%ebp)
     bed:	b4 02                	mov    $0x2,%ah
     bef:	cd 1a                	int    $0x1a
     bf1:	88 c8                	mov    %cl,%al
     bf3:	24 0f                	and    $0xf,%al
     bf5:	04 30                	add    $0x30,%al
     bf7:	88 45 06             	mov    %al,0x6(%ebp)
     bfa:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
     bfe:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
     c02:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
     c06:	8c c8                	mov    %cs,%eax
     c08:	8e d8                	mov    %eax,%ds
     c0a:	8e c0                	mov    %eax,%es
     c0c:	bd bf 02 8c d8       	mov    $0xd88c02bf,%ebp
     c11:	8e c0                	mov    %eax,%es
     c13:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
     c18:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     c1e:	b2 0a                	mov    $0xa,%dl
     c20:	cd 10                	int    $0x10
     c22:	8c c8                	mov    %cs,%eax
     c24:	8e d8                	mov    %eax,%ds
     c26:	8e c0                	mov    %eax,%es
     c28:	bd 00 30 8c d8       	mov    $0xd88c3000,%ebp
     c2d:	8e c0                	mov    %eax,%es
     c2f:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
     c34:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     c3a:	b2 1e                	mov    $0x1e,%dl
     c3c:	cd 10                	int    $0x10
     c3e:	61                   	popa   
     c3f:	07                   	pop    %es
     c40:	1f                   	pop    %ds
     c41:	c9                   	leave  
     c42:	66 5a                	pop    %dx
     c44:	ff e2                	jmp    *%edx

00000c46 <_Get_Hours_1>:
     c46:	c8 04 00 00          	enter  $0x4,$0x0
     c4a:	b4 02                	mov    $0x2,%ah
     c4c:	cd 1a                	int    $0x1a
     c4e:	88 e8                	mov    %ch,%al
     c50:	b4 00                	mov    $0x0,%ah
     c52:	b3 10                	mov    $0x10,%bl
     c54:	f6 f3                	div    %bl
     c56:	30 e4                	xor    %ah,%ah
     c58:	66 67 89 04          	mov    %ax,(%si)
     c5c:	24 66                	and    $0x66,%al
     c5e:	67 8b 04             	mov    (%si),%eax
     c61:	24 c9                	and    $0xc9,%al
     c63:	66 5a                	pop    %dx
     c65:	ff e2                	jmp    *%edx

00000c67 <_Get_Hours_2>:
     c67:	c8 04 00 00          	enter  $0x4,$0x0
     c6b:	b4 02                	mov    $0x2,%ah
     c6d:	cd 1a                	int    $0x1a
     c6f:	88 e8                	mov    %ch,%al
     c71:	24 0f                	and    $0xf,%al
     c73:	30 e4                	xor    %ah,%ah
     c75:	66 67 89 04          	mov    %ax,(%si)
     c79:	24 66                	and    $0x66,%al
     c7b:	67 8b 04             	mov    (%si),%eax
     c7e:	24 c9                	and    $0xc9,%al
     c80:	66 5a                	pop    %dx
     c82:	ff e2                	jmp    *%edx

00000c84 <_Get_Minutes_1>:
     c84:	c8 04 00 00          	enter  $0x4,$0x0
     c88:	b4 02                	mov    $0x2,%ah
     c8a:	cd 1a                	int    $0x1a
     c8c:	88 c8                	mov    %cl,%al
     c8e:	b4 00                	mov    $0x0,%ah
     c90:	b3 10                	mov    $0x10,%bl
     c92:	f6 f3                	div    %bl
     c94:	30 e4                	xor    %ah,%ah
     c96:	66 67 89 04          	mov    %ax,(%si)
     c9a:	24 66                	and    $0x66,%al
     c9c:	67 8b 04             	mov    (%si),%eax
     c9f:	24 c9                	and    $0xc9,%al
     ca1:	66 5a                	pop    %dx
     ca3:	ff e2                	jmp    *%edx

00000ca5 <_Get_Minutes_2>:
     ca5:	c8 04 00 00          	enter  $0x4,$0x0
     ca9:	b4 02                	mov    $0x2,%ah
     cab:	cd 1a                	int    $0x1a
     cad:	88 c8                	mov    %cl,%al
     caf:	24 0f                	and    $0xf,%al
     cb1:	30 e4                	xor    %ah,%ah
     cb3:	66 67 89 04          	mov    %ax,(%si)
     cb7:	24 66                	and    $0x66,%al
     cb9:	67 8b 04             	mov    (%si),%eax
     cbc:	24 c9                	and    $0xc9,%al
     cbe:	66 5a                	pop    %dx
     cc0:	ff e2                	jmp    *%edx

00000cc2 <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
     cc2:	66 55                	push   %bp
     cc4:	66 89 e5             	mov    %sp,%bp
     cc7:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
     ccb:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     cd0:	66 89 d0             	mov    %dx,%ax
     cd3:	66 c1 e0 02          	shl    $0x2,%ax
     cd7:	66 01 d0             	add    %dx,%ax
     cda:	66 c1 e0 04          	shl    $0x4,%ax
     cde:	66 89 c2             	mov    %ax,%dx
     ce1:	67 66 8b 45 10       	mov    0x10(%di),%ax
     ce6:	66 01 d0             	add    %dx,%ax
     ce9:	66 01 c0             	add    %ax,%ax
     cec:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
     cf1:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     cf8:	00 00                	add    %al,(%eax)
	int index = 0;
     cfa:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     d01:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     d03:	eb 35                	jmp    d3a <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
     d05:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     d0a:	67 66 8b 45 08       	mov    0x8(%di),%ax
     d0f:	66 01 d0             	add    %dx,%ax
     d12:	67 8a 00             	mov    (%bx,%si),%al
     d15:	66 0f be c0          	movsbw %al,%ax
     d19:	67 66 ff 75 f4       	pushw  -0xc(%di)
     d1e:	67 66 ff 75 fc       	pushw  -0x4(%di)
     d23:	66 50                	push   %ax
     d25:	66 e8 d2 f5          	callw  2fb <_clearscreen+0x7>
     d29:	ff                   	(bad)  
     d2a:	ff 66 83             	jmp    *-0x7d(%esi)
     d2d:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     d30:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     d34:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
     d3a:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     d3f:	67 66 8b 45 08       	mov    0x8(%di),%ax
     d44:	66 01 d0             	add    %dx,%ax
     d47:	67 8a 00             	mov    (%bx,%si),%al
     d4a:	84 c0                	test   %al,%al
     d4c:	75 b7                	jne    d05 <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     d4e:	90                   	nop
}
     d4f:	66 c9                	leavew 
     d51:	66 c3                	retw   

00000d53 <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
     d53:	66 55                	push   %bp
     d55:	66 89 e5             	mov    %sp,%bp
     d58:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
     d5c:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     d61:	66 89 d0             	mov    %dx,%ax
     d64:	66 c1 e0 02          	shl    $0x2,%ax
     d68:	66 01 d0             	add    %dx,%ax
     d6b:	66 c1 e0 04          	shl    $0x4,%ax
     d6f:	66 89 c2             	mov    %ax,%dx
     d72:	67 66 8b 45 10       	mov    0x10(%di),%ax
     d77:	66 01 d0             	add    %dx,%ax
     d7a:	66 01 c0             	add    %ax,%ax
     d7d:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
     d82:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     d89:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     d8b:	eb 35                	jmp    dc2 <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
     d8d:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     d92:	67 66 8b 45 08       	mov    0x8(%di),%ax
     d97:	66 01 d0             	add    %dx,%ax
     d9a:	67 8a 00             	mov    (%bx,%si),%al
     d9d:	66 0f be c0          	movsbw %al,%ax
     da1:	67 66 ff 75 14       	pushw  0x14(%di)
     da6:	67 66 ff 75 fc       	pushw  -0x4(%di)
     dab:	66 50                	push   %ax
     dad:	66 e8 4a f5          	callw  2fb <_clearscreen+0x7>
     db1:	ff                   	(bad)  
     db2:	ff 66 83             	jmp    *-0x7d(%esi)
     db5:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     db8:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     dbc:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
     dc2:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     dc7:	67 66 8b 45 08       	mov    0x8(%di),%ax
     dcc:	66 01 d0             	add    %dx,%ax
     dcf:	67 8a 00             	mov    (%bx,%si),%al
     dd2:	84 c0                	test   %al,%al
     dd4:	75 b7                	jne    d8d <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     dd6:	90                   	nop
}
     dd7:	66 c9                	leavew 
     dd9:	66 c3                	retw   

00000ddb <sys_showline>:
void sys_showline(){
     ddb:	66 55                	push   %bp
     ddd:	66 89 e5             	mov    %sp,%bp
     de0:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
     de4:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
     de9:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
     dee:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
     df3:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
     df8:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
     dfd:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
     e02:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
     e07:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     e0e:	00 00                	add    %al,(%eax)
    int i = 0;
     e10:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     e17:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
     e19:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     e20:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
     e22:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     e29:	00 00                	add    %al,(%eax)
     e2b:	eb 52                	jmp    e7f <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
     e2d:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     e32:	66 89 d0             	mov    %dx,%ax
     e35:	66 c1 e0 03          	shl    $0x3,%ax
     e39:	66 01 d0             	add    %dx,%ax
     e3c:	67 66 8d 14          	lea    (%si),%dx
     e40:	c5 00                	lds    (%eax),%eax
     e42:	00 00                	add    %al,(%eax)
     e44:	00 66 01             	add    %ah,0x1(%esi)
     e47:	d0 66 01             	shlb   0x1(%esi)
     e4a:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
     e4e:	45                   	inc    %ebp
     e4f:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
     e55:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     e5a:	66 01 d0             	add    %dx,%ax
     e5d:	67 8a 00             	mov    (%bx,%si),%al
     e60:	66 0f be c0          	movsbw %al,%ax
     e64:	67 66 ff 75 f4       	pushw  -0xc(%di)
     e69:	67 66 ff 75 f0       	pushw  -0x10(%di)
     e6e:	66 50                	push   %ax
     e70:	66 e8 87 f4          	callw  2fb <_clearscreen+0x7>
     e74:	ff                   	(bad)  
     e75:	ff 66 83             	jmp    *-0x7d(%esi)
     e78:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
     e7b:	66 ff 45 fc          	incw   -0x4(%ebp)
     e7f:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
     e85:	7e a6                	jle    e2d <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
     e87:	66 c9                	leavew 
     e89:	66 c3                	retw   

00000e8b <sys_printname>:

void sys_printname(){
     e8b:	66 55                	push   %bp
     e8d:	66 89 e5             	mov    %sp,%bp
     e90:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
     e94:	67 66 c7 45 fc 98 26 	movw   $0x2698,-0x4(%di)
     e9b:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
     e9d:	67 66 c7 45 f8 dc 26 	movw   $0x26dc,-0x8(%di)
     ea4:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
     ea6:	67 66 c7 45 f4 20 27 	movw   $0x2720,-0xc(%di)
     ead:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
     eaf:	67 66 c7 45 f0 64 27 	movw   $0x2764,-0x10(%di)
     eb6:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
     eb8:	67 66 c7 45 ec a8 27 	movw   $0x27a8,-0x14(%di)
     ebf:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
     ec1:	67 66 c7 45 e8 ec 27 	movw   $0x27ec,-0x18(%di)
     ec8:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
     eca:	67 66 c7 45 e4 30 28 	movw   $0x2830,-0x1c(%di)
     ed1:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
     ed3:	66 6a 0b             	pushw  $0xb
     ed6:	66 6a 10             	pushw  $0x10
     ed9:	67 66 ff 75 fc       	pushw  -0x4(%di)
     ede:	66 e8 de fd          	callw  cc0 <_Get_Minutes_2+0x1b>
     ee2:	ff                   	(bad)  
     ee3:	ff 66 83             	jmp    *-0x7d(%esi)
     ee6:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
     ee9:	6a 0b                	push   $0xb
     eeb:	66 6a 11             	pushw  $0x11
     eee:	67 66 ff 75 f8       	pushw  -0x8(%di)
     ef3:	66 e8 c9 fd          	callw  cc0 <_Get_Minutes_2+0x1b>
     ef7:	ff                   	(bad)  
     ef8:	ff 66 83             	jmp    *-0x7d(%esi)
     efb:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
     efe:	6a 0b                	push   $0xb
     f00:	66 6a 12             	pushw  $0x12
     f03:	67 66 ff 75 f4       	pushw  -0xc(%di)
     f08:	66 e8 b4 fd          	callw  cc0 <_Get_Minutes_2+0x1b>
     f0c:	ff                   	(bad)  
     f0d:	ff 66 83             	jmp    *-0x7d(%esi)
     f10:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
     f13:	6a 0b                	push   $0xb
     f15:	66 6a 13             	pushw  $0x13
     f18:	67 66 ff 75 f0       	pushw  -0x10(%di)
     f1d:	66 e8 9f fd          	callw  cc0 <_Get_Minutes_2+0x1b>
     f21:	ff                   	(bad)  
     f22:	ff 66 83             	jmp    *-0x7d(%esi)
     f25:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
     f28:	6a 0b                	push   $0xb
     f2a:	66 6a 14             	pushw  $0x14
     f2d:	67 66 ff 75 ec       	pushw  -0x14(%di)
     f32:	66 e8 8a fd          	callw  cc0 <_Get_Minutes_2+0x1b>
     f36:	ff                   	(bad)  
     f37:	ff 66 83             	jmp    *-0x7d(%esi)
     f3a:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
     f3d:	6a 0b                	push   $0xb
     f3f:	66 6a 15             	pushw  $0x15
     f42:	67 66 ff 75 e8       	pushw  -0x18(%di)
     f47:	66 e8 75 fd          	callw  cc0 <_Get_Minutes_2+0x1b>
     f4b:	ff                   	(bad)  
     f4c:	ff 66 83             	jmp    *-0x7d(%esi)
     f4f:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
     f52:	6a 0b                	push   $0xb
     f54:	66 6a 16             	pushw  $0x16
     f57:	67 66 ff 75 e4       	pushw  -0x1c(%di)
     f5c:	66 e8 60 fd          	callw  cc0 <_Get_Minutes_2+0x1b>
     f60:	ff                   	(bad)  
     f61:	ff 66 83             	jmp    *-0x7d(%esi)
     f64:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
     f67:	c9                   	leave  
     f68:	66 c3                	retw   

00000f6a <sys_printpoem>:
void sys_printpoem(){
     f6a:	66 55                	push   %bp
     f6c:	66 89 e5             	mov    %sp,%bp
     f6f:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
     f73:	67 66 c7 45 f8 74 28 	movw   $0x2874,-0x8(%di)
     f7a:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
     f7c:	67 66 c7 45 f4 86 28 	movw   $0x2886,-0xc(%di)
     f83:	00 00                	add    %al,(%eax)
    int i = 1;
     f85:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     f8c:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
     f8e:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     f95:	00 00                	add    %al,(%eax)
     f97:	eb 4b                	jmp    fe4 <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
     f99:	67 66 ff 75 fc       	pushw  -0x4(%di)
     f9e:	66 6a 0a             	pushw  $0xa
     fa1:	66 6a 0f             	pushw  $0xf
     fa4:	67 66 ff 75 f8       	pushw  -0x8(%di)
     fa9:	66 e8 a4 fd          	callw  d51 <sys_print_for_heart+0x8f>
     fad:	ff                   	(bad)  
     fae:	ff 66 83             	jmp    *-0x7d(%esi)
     fb1:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
     fb3:	67 66 ff 75 fc       	pushw  -0x4(%di)
     fb8:	66 6a 0a             	pushw  $0xa
     fbb:	66 6a 10             	pushw  $0x10
     fbe:	67 66 ff 75 f4       	pushw  -0xc(%di)
     fc3:	66 e8 8a fd          	callw  d51 <sys_print_for_heart+0x8f>
     fc7:	ff                   	(bad)  
     fc8:	ff 66 83             	jmp    *-0x7d(%esi)
     fcb:	c4 10                	les    (%eax),%edx
        int j = 0;
     fcd:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     fd4:	00 00                	add    %al,(%eax)
        int k = 0;
     fd6:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
     fdd:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
     fdf:	67 66 ff 45 fc       	incw   -0x4(%di)
     fe4:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
     fea:	7e ad                	jle    f99 <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
     fec:	66 c9                	leavew 
     fee:	66 c3                	retw   

00000ff0 <sys_printheart>:
void sys_printheart(){
     ff0:	66 55                	push   %bp
     ff2:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
     ff5:	66 6a 28             	pushw  $0x28
     ff8:	66 6a 00             	pushw  $0x0
     ffb:	66 68 8f 28          	pushw  $0x288f
     fff:	00 00                	add    %al,(%eax)
    1001:	66 e8 bb fc          	callw  cc0 <_Get_Minutes_2+0x1b>
    1005:	ff                   	(bad)  
    1006:	ff 66 83             	jmp    *-0x7d(%esi)
    1009:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
    100c:	6a 28                	push   $0x28
    100e:	66 6a 01             	pushw  $0x1
    1011:	66 68 a7 28          	pushw  $0x28a7
    1015:	00 00                	add    %al,(%eax)
    1017:	66 e8 a5 fc          	callw  cc0 <_Get_Minutes_2+0x1b>
    101b:	ff                   	(bad)  
    101c:	ff 66 83             	jmp    *-0x7d(%esi)
    101f:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
    1022:	6a 28                	push   $0x28
    1024:	66 6a 02             	pushw  $0x2
    1027:	66 68 c0 28          	pushw  $0x28c0
    102b:	00 00                	add    %al,(%eax)
    102d:	66 e8 8f fc          	callw  cc0 <_Get_Minutes_2+0x1b>
    1031:	ff                   	(bad)  
    1032:	ff 66 83             	jmp    *-0x7d(%esi)
    1035:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
    1038:	6a 28                	push   $0x28
    103a:	66 6a 03             	pushw  $0x3
    103d:	66 68 db 28          	pushw  $0x28db
    1041:	00 00                	add    %al,(%eax)
    1043:	66 e8 79 fc          	callw  cc0 <_Get_Minutes_2+0x1b>
    1047:	ff                   	(bad)  
    1048:	ff 66 83             	jmp    *-0x7d(%esi)
    104b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
    104e:	6a 28                	push   $0x28
    1050:	66 6a 04             	pushw  $0x4
    1053:	66 68 f4 28          	pushw  $0x28f4
    1057:	00 00                	add    %al,(%eax)
    1059:	66 e8 63 fc          	callw  cc0 <_Get_Minutes_2+0x1b>
    105d:	ff                   	(bad)  
    105e:	ff 66 83             	jmp    *-0x7d(%esi)
    1061:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
    1064:	6a 28                	push   $0x28
    1066:	66 6a 05             	pushw  $0x5
    1069:	66 68 0c 29          	pushw  $0x290c
    106d:	00 00                	add    %al,(%eax)
    106f:	66 e8 4d fc          	callw  cc0 <_Get_Minutes_2+0x1b>
    1073:	ff                   	(bad)  
    1074:	ff 66 83             	jmp    *-0x7d(%esi)
    1077:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
    107a:	6a 28                	push   $0x28
    107c:	66 6a 06             	pushw  $0x6
    107f:	66 68 23 29          	pushw  $0x2923
    1083:	00 00                	add    %al,(%eax)
    1085:	66 e8 37 fc          	callw  cc0 <_Get_Minutes_2+0x1b>
    1089:	ff                   	(bad)  
    108a:	ff 66 83             	jmp    *-0x7d(%esi)
    108d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
    1090:	6a 28                	push   $0x28
    1092:	66 6a 07             	pushw  $0x7
    1095:	66 68 39 29          	pushw  $0x2939
    1099:	00 00                	add    %al,(%eax)
    109b:	66 e8 21 fc          	callw  cc0 <_Get_Minutes_2+0x1b>
    109f:	ff                   	(bad)  
    10a0:	ff 66 83             	jmp    *-0x7d(%esi)
    10a3:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    10a6:	c9                   	leave  
    10a7:	66 c3                	retw   

000010a9 <print>:
#include "stdio.h"
//====================================================
//              显示字符串函数，可以指定位置
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
    10a9:	66 55                	push   %bp
    10ab:	66 89 e5             	mov    %sp,%bp
    10ae:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    10b2:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    10b7:	66 89 d0             	mov    %dx,%ax
    10ba:	66 c1 e0 02          	shl    $0x2,%ax
    10be:	66 01 d0             	add    %dx,%ax
    10c1:	66 c1 e0 04          	shl    $0x4,%ax
    10c5:	66 89 c2             	mov    %ax,%dx
    10c8:	67 66 8b 45 10       	mov    0x10(%di),%ax
    10cd:	66 01 d0             	add    %dx,%ax
    10d0:	66 01 c0             	add    %ax,%ax
    10d3:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    10d8:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    10df:	00 00                	add    %al,(%eax)
	int index = 0;
    10e1:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    10e8:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    10ea:	eb 35                	jmp    1121 <print+0x78>
		_printchar(Messeage[index],pos,color);
    10ec:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    10f1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    10f6:	66 01 d0             	add    %dx,%ax
    10f9:	67 8a 00             	mov    (%bx,%si),%al
    10fc:	66 0f be c0          	movsbw %al,%ax
    1100:	67 66 ff 75 f4       	pushw  -0xc(%di)
    1105:	67 66 ff 75 fc       	pushw  -0x4(%di)
    110a:	66 50                	push   %ax
    110c:	66 e8 eb f1          	callw  2fb <_clearscreen+0x7>
    1110:	ff                   	(bad)  
    1111:	ff 66 83             	jmp    *-0x7d(%esi)
    1114:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    1117:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    111b:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    1121:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    1126:	67 66 8b 45 08       	mov    0x8(%di),%ax
    112b:	66 01 d0             	add    %dx,%ax
    112e:	67 8a 00             	mov    (%bx,%si),%al
    1131:	84 c0                	test   %al,%al
    1133:	75 b7                	jne    10ec <print+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    1135:	90                   	nop
}
    1136:	66 c9                	leavew 
    1138:	66 c3                	retw   

0000113a <prints>:
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input	
    113a:	66 55                	push   %bp
    113c:	66 89 e5             	mov    %sp,%bp
    113f:	66 83 ec 04          	sub    $0x4,%sp
	__asm__("cli\n");
    1143:	fa                   	cli    
	int index = 0;
    1144:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    114b:	00 00                	add    %al,(%eax)
	while(Messeage[index]){
    114d:	eb 25                	jmp    1174 <prints+0x3a>
		_showchar(Messeage[index]);
    114f:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1154:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1159:	66 01 d0             	add    %dx,%ax
    115c:	67 8a 00             	mov    (%bx,%si),%al
    115f:	66 0f be c0          	movsbw %al,%ax
    1163:	66 50                	push   %ax
    1165:	66 e8 cf f1          	callw  338 <_readinput+0x17>
    1169:	ff                   	(bad)  
    116a:	ff 66 83             	jmp    *-0x7d(%esi)
    116d:	c4 04 67             	les    (%edi,%eiz,2),%eax
		index++;
    1170:	66 ff 45 fc          	incw   -0x4(%ebp)
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input	
	__asm__("cli\n");
	int index = 0;
	while(Messeage[index]){
    1174:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1179:	67 66 8b 45 08       	mov    0x8(%di),%ax
    117e:	66 01 d0             	add    %dx,%ax
    1181:	67 8a 00             	mov    (%bx,%si),%al
    1184:	84 c0                	test   %al,%al
    1186:	75 c7                	jne    114f <prints+0x15>
		_showchar(Messeage[index]);
		index++;
	}
	__asm__("sti\n");
    1188:	fb                   	sti    
	return;
    1189:	90                   	nop
}
    118a:	66 c9                	leavew 
    118c:	66 c3                	retw   

0000118e <printc>:
//====================================================
//                显示字符函数
//====================================================
void printc(char alpha){
    118e:	66 55                	push   %bp
    1190:	66 89 e5             	mov    %sp,%bp
    1193:	66 83 ec 04          	sub    $0x4,%sp
    1197:	67 66 8b 45 08       	mov    0x8(%di),%ax
    119c:	67 88 45 fc          	mov    %al,-0x4(%di)
	_showchar(alpha);
    11a0:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    11a6:	66 50                	push   %ax
    11a8:	66 e8 8c f1          	callw  338 <_readinput+0x17>
    11ac:	ff                   	(bad)  
    11ad:	ff 66 83             	jmp    *-0x7d(%esi)
    11b0:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    11b3:	66 c9                	leavew 
    11b5:	66 c3                	retw   

000011b7 <printsint>:
//====================================================
//                数字转字符函数
//====================================================
void printsint(int num){
    11b7:	66 55                	push   %bp
    11b9:	66 89 e5             	mov    %sp,%bp
    11bc:	66 83 ec 2c          	sub    $0x2c,%sp
	 int save = num;
    11c0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    11c5:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	 int count = 0;
    11ca:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    11d1:	00 00                	add    %al,(%eax)
	 char number[30];
	 number[count] = 0;
    11d3:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    11d8:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    11dd:	66 01 d0             	add    %dx,%ax
    11e0:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	if(num < 0){
    11e4:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    11ea:	79 14                	jns    1200 <printsint+0x49>
		printc('-');
    11ec:	66 6a 2d             	pushw  $0x2d
    11ef:	66 e8 99 ff          	callw  118c <prints+0x52>
    11f3:	ff                   	(bad)  
    11f4:	ff 66 83             	jmp    *-0x7d(%esi)
    11f7:	c4 04 67             	les    (%edi,%eiz,2),%eax
		num = -num;
    11fa:	66 f7 5d 08          	negw   0x8(%ebp)
    11fe:	eb 15                	jmp    1215 <printsint+0x5e>
	}
	else if(num == 0){
    1200:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    1206:	75 0d                	jne    1215 <printsint+0x5e>
		printc('0');
    1208:	66 6a 30             	pushw  $0x30
    120b:	66 e8 7d ff          	callw  118c <prints+0x52>
    120f:	ff                   	(bad)  
    1210:	ff 66 83             	jmp    *-0x7d(%esi)
    1213:	c4 04 eb             	les    (%ebx,%ebp,8),%eax
	}
	while(num > 0){
    1216:	50                   	push   %eax
		number[count] = num % 10 + '0';
    1217:	67 66 8b 45 08       	mov    0x8(%di),%ax
    121c:	66 b9 0a 00          	mov    $0xa,%cx
    1220:	00 00                	add    %al,(%eax)
    1222:	66 99                	cwtd   
    1224:	66 f7 f9             	idiv   %cx
    1227:	66 89 d0             	mov    %dx,%ax
    122a:	66 83 c0 30          	add    $0x30,%ax
    122e:	67 66 8d 4d d6       	lea    -0x2a(%di),%cx
    1233:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1238:	66 01 ca             	add    %cx,%dx
    123b:	67 88 02             	mov    %al,(%bp,%si)
		num  = num / 10;
    123e:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    1243:	66 b8 67 66          	mov    $0x6667,%ax
    1247:	66 66 66 f7 e9       	data32 data32 imul %cx
    124c:	66 c1 fa 02          	sar    $0x2,%dx
    1250:	66 89 c8             	mov    %cx,%ax
    1253:	66 c1 f8 1f          	sar    $0x1f,%ax
    1257:	66 29 c2             	sub    %ax,%dx
    125a:	66 89 d0             	mov    %dx,%ax
    125d:	67 66 89 45 08       	mov    %ax,0x8(%di)
		count ++;
    1262:	67 66 ff 45 fc       	incw   -0x4(%di)
		num = -num;
	}
	else if(num == 0){
		printc('0');
	}
	while(num > 0){
    1267:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    126d:	7f a8                	jg     1217 <printsint+0x60>
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    126f:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1274:	66 48                	dec    %ax
    1276:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    127b:	eb 25                	jmp    12a2 <printsint+0xeb>
		printc(number[i]);
    127d:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    1282:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    1287:	66 01 d0             	add    %dx,%ax
    128a:	67 8a 00             	mov    (%bx,%si),%al
    128d:	66 0f be c0          	movsbw %al,%ax
    1291:	66 50                	push   %ax
    1293:	66 e8 f5 fe          	callw  118c <prints+0x52>
    1297:	ff                   	(bad)  
    1298:	ff 66 83             	jmp    *-0x7d(%esi)
    129b:	c4 04 67             	les    (%edi,%eiz,2),%eax
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    129e:	66 ff 4d f8          	decw   -0x8(%ebp)
    12a2:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    12a8:	79 d3                	jns    127d <printsint+0xc6>
		printc(number[i]);
	}
	return;
    12aa:	90                   	nop
}
    12ab:	66 c9                	leavew 
    12ad:	66 c3                	retw   

000012af <print_next_line>:
//====================================================
//                显示字符串并换行函数
//====================================================
 void print_next_line(char const* Messeage){
    12af:	66 55                	push   %bp
    12b1:	66 89 e5             	mov    %sp,%bp
	prints(Messeage);
    12b4:	67 66 ff 75 08       	pushw  0x8(%di)
    12b9:	66 e8 7b fe          	callw  1138 <print+0x8f>
    12bd:	ff                   	(bad)  
    12be:	ff 66 83             	jmp    *-0x7d(%esi)
    12c1:	c4 04 66             	les    (%esi,%eiz,2),%eax
	prints("\n\r");
    12c4:	68 4e 29 00 00       	push   $0x294e
    12c9:	66 e8 6b fe          	callw  1138 <print+0x8f>
    12cd:	ff                   	(bad)  
    12ce:	ff 66 83             	jmp    *-0x7d(%esi)
    12d1:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    12d4:	66 c9                	leavew 
    12d6:	66 c3                	retw   

000012d8 <strlen>:
//====================================================
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
    12d8:	66 55                	push   %bp
    12da:	66 89 e5             	mov    %sp,%bp
    12dd:	66 83 ec 08          	sub    $0x8,%sp
	int i = 0;
    12e1:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    12e8:	00 00                	add    %al,(%eax)
	int count = 0;
    12ea:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    12f1:	00 00                	add    %al,(%eax)
	while(Messeage[i] != 0){
    12f3:	eb 0a                	jmp    12ff <strlen+0x27>
		i++;
    12f5:	67 66 ff 45 fc       	incw   -0x4(%di)
		count++;
    12fa:	67 66 ff 45 f8       	incw   -0x8(%di)
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
	int i = 0;
	int count = 0;
	while(Messeage[i] != 0){
    12ff:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1304:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1309:	66 01 d0             	add    %dx,%ax
    130c:	67 8a 00             	mov    (%bx,%si),%al
    130f:	84 c0                	test   %al,%al
    1311:	75 e2                	jne    12f5 <strlen+0x1d>
		i++;
		count++;
	}
	return count;
    1313:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    1318:	66 c9                	leavew 
    131a:	66 c3                	retw   

0000131c <read_and_print_input>:
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    131c:	66 55                	push   %bp
    131e:	66 89 e5             	mov    %sp,%bp
    1321:	66 83 ec 08          	sub    $0x8,%sp
    int i = 1;
    1325:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    132c:	00 00                	add    %al,(%eax)
    while(i){
    132e:	eb 1c                	jmp    134c <read_and_print_input+0x30>
        char savechar = _readinput();
    1330:	66 e8 eb ef          	callw  31f <_printchar+0x22>
    1334:	ff                   	(bad)  
    1335:	ff 67 88             	jmp    *-0x78(%edi)
    1338:	45                   	inc    %ebp
    1339:	fb                   	sti    
        _showchar(savechar);
    133a:	67 66 0f be 45 fb    	movsbw -0x5(%di),%ax
    1340:	66 50                	push   %ax
    1342:	66 e8 f2 ef          	callw  338 <_readinput+0x17>
    1346:	ff                   	(bad)  
    1347:	ff 66 83             	jmp    *-0x7d(%esi)
    134a:	c4 04 67             	les    (%edi,%eiz,2),%eax
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    int i = 1;
    while(i){
    134d:	66 83 7d fc 00       	cmpw   $0x0,-0x4(%ebp)
    1352:	75 dc                	jne    1330 <read_and_print_input+0x14>
        char savechar = _readinput();
        _showchar(savechar);
    }
}
    1354:	66 c9                	leavew 
    1356:	66 c3                	retw   

00001358 <getch>:
//====================================================
//        等待用户输入函数，返回用户输入在缓冲区中
//====================================================
char getch(){
    1358:	66 55                	push   %bp
    135a:	66 89 e5             	mov    %sp,%bp
    135d:	66 83 ec 04          	sub    $0x4,%sp
	char result = _readinput();
    1361:	66 e8 ba ef          	callw  31f <_printchar+0x22>
    1365:	ff                   	(bad)  
    1366:	ff 67 88             	jmp    *-0x78(%edi)
    1369:	45                   	inc    %ebp
    136a:	ff 67 8a             	jmp    *-0x76(%edi)
	return result;
    136d:	45                   	inc    %ebp
    136e:	ff 66 c9             	jmp    *-0x37(%esi)
}
    1371:	66 c3                	retw   

00001373 <getline>:
void  getline(char str[],int length){
    1373:	66 55                	push   %bp
    1375:	66 89 e5             	mov    %sp,%bp
    1378:	66 83 ec 08          	sub    $0x8,%sp
	char save = getch();
    137c:	66 e8 d6 ff          	callw  1356 <read_and_print_input+0x3a>
    1380:	ff                   	(bad)  
    1381:	ff 67 88             	jmp    *-0x78(%edi)
    1384:	45                   	inc    %ebp
    1385:	ff 67 66             	jmp    *0x66(%edi)
	int index = 0;
    1388:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while(save != 13 && index < length){
    138f:	eb 46                	jmp    13d7 <getline+0x64>
		printc(save);
    1391:	67 66 0f be 45 ff    	movsbw -0x1(%di),%ax
    1397:	66 50                	push   %ax
    1399:	66 e8 ef fd          	callw  118c <prints+0x52>
    139d:	ff                   	(bad)  
    139e:	ff 66 83             	jmp    *-0x7d(%esi)
    13a1:	c4 04 67             	les    (%edi,%eiz,2),%eax
		str[index] = save;
    13a4:	66 8b 55 f8          	mov    -0x8(%ebp),%dx
    13a8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    13ad:	66 01 c2             	add    %ax,%dx
    13b0:	67 8a 45 ff          	mov    -0x1(%di),%al
    13b4:	67 88 02             	mov    %al,(%bp,%si)
		index ++;
    13b7:	67 66 ff 45 f8       	incw   -0x8(%di)
		str[index] = 0;
    13bc:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    13c1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    13c6:	66 01 d0             	add    %dx,%ax
    13c9:	67 c6 00 00          	movb   $0x0,(%bx,%si)
		save = getch();
    13cd:	66 e8 85 ff          	callw  1356 <read_and_print_input+0x3a>
    13d1:	ff                   	(bad)  
    13d2:	ff 67 88             	jmp    *-0x78(%edi)
    13d5:	45                   	inc    %ebp
    13d6:	ff 67 80             	jmp    *-0x80(%edi)
	return result;
}
void  getline(char str[],int length){
	char save = getch();
	int index = 0;
	while(save != 13 && index < length){
    13d9:	7d ff                	jge    13da <getline+0x67>
    13db:	0d 74 0c 67 66       	or     $0x66670c74,%eax
    13e0:	8b 45 f8             	mov    -0x8(%ebp),%eax
    13e3:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    13e8:	7c a7                	jl     1391 <getline+0x1e>
		str[index] = save;
		index ++;
		str[index] = 0;
		save = getch();
	}
	return;
    13ea:	90                   	nop
}
    13eb:	66 c9                	leavew 
    13ed:	66 c3                	retw   

000013ef <print_different_color>:
void print_different_color(char const* Messeage,int row,int colume,int color){
    13ef:	66 55                	push   %bp
    13f1:	66 89 e5             	mov    %sp,%bp
    13f4:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    13f8:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    13fd:	66 89 d0             	mov    %dx,%ax
    1400:	66 c1 e0 02          	shl    $0x2,%ax
    1404:	66 01 d0             	add    %dx,%ax
    1407:	66 c1 e0 04          	shl    $0x4,%ax
    140b:	66 89 c2             	mov    %ax,%dx
    140e:	67 66 8b 45 10       	mov    0x10(%di),%ax
    1413:	66 01 d0             	add    %dx,%ax
    1416:	66 01 c0             	add    %ax,%ax
    1419:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    141e:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    1425:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    1427:	eb 35                	jmp    145e <print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    1429:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    142e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1433:	66 01 d0             	add    %dx,%ax
    1436:	67 8a 00             	mov    (%bx,%si),%al
    1439:	66 0f be c0          	movsbw %al,%ax
    143d:	67 66 ff 75 14       	pushw  0x14(%di)
    1442:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1447:	66 50                	push   %ax
    1449:	66 e8 ae ee          	callw  2fb <_clearscreen+0x7>
    144d:	ff                   	(bad)  
    144e:	ff 66 83             	jmp    *-0x7d(%esi)
    1451:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    1454:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    1458:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    145e:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    1463:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1468:	66 01 d0             	add    %dx,%ax
    146b:	67 8a 00             	mov    (%bx,%si),%al
    146e:	84 c0                	test   %al,%al
    1470:	75 b7                	jne    1429 <print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    1472:	90                   	nop
}
    1473:	66 c9                	leavew 
    1475:	66 c3                	retw   

00001477 <strcmp>:
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
    1477:	66 55                	push   %bp
    1479:	66 89 e5             	mov    %sp,%bp
    147c:	66 83 ec 04          	sub    $0x4,%sp
	int i = 0;
    1480:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1487:	00 00                	add    %al,(%eax)
	while(m1[i] != 0 && m2[i]!= 0){
    1489:	eb 31                	jmp    14bc <strcmp+0x45>
		if(m1[i] != m2[i]){
    148b:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1490:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1495:	66 01 d0             	add    %dx,%ax
    1498:	67 8a 10             	mov    (%bx,%si),%dl
    149b:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    14a0:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    14a5:	66 01 c8             	add    %cx,%ax
    14a8:	67 8a 00             	mov    (%bx,%si),%al
    14ab:	38 c2                	cmp    %al,%dl
    14ad:	74 08                	je     14b7 <strcmp+0x40>
			return 0;
    14af:	66 b8 00 00          	mov    $0x0,%ax
    14b3:	00 00                	add    %al,(%eax)
    14b5:	eb 63                	jmp    151a <strcmp+0xa3>
		}
		i++;
    14b7:	67 66 ff 45 fc       	incw   -0x4(%di)
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
	int i = 0;
	while(m1[i] != 0 && m2[i]!= 0){
    14bc:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    14c1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    14c6:	66 01 d0             	add    %dx,%ax
    14c9:	67 8a 00             	mov    (%bx,%si),%al
    14cc:	84 c0                	test   %al,%al
    14ce:	74 14                	je     14e4 <strcmp+0x6d>
    14d0:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    14d5:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    14da:	66 01 d0             	add    %dx,%ax
    14dd:	67 8a 00             	mov    (%bx,%si),%al
    14e0:	84 c0                	test   %al,%al
    14e2:	75 a7                	jne    148b <strcmp+0x14>
		if(m1[i] != m2[i]){
			return 0;
		}
		i++;
	}
	if(m1[i] != 0 || m2[i] != 0){
    14e4:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    14e9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    14ee:	66 01 d0             	add    %dx,%ax
    14f1:	67 8a 00             	mov    (%bx,%si),%al
    14f4:	84 c0                	test   %al,%al
    14f6:	75 14                	jne    150c <strcmp+0x95>
    14f8:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    14fd:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1502:	66 01 d0             	add    %dx,%ax
    1505:	67 8a 00             	mov    (%bx,%si),%al
    1508:	84 c0                	test   %al,%al
    150a:	74 08                	je     1514 <strcmp+0x9d>
		return 0;
    150c:	66 b8 00 00          	mov    $0x0,%ax
    1510:	00 00                	add    %al,(%eax)
    1512:	eb 06                	jmp    151a <strcmp+0xa3>
	}
	return 1;
    1514:	66 b8 01 00          	mov    $0x1,%ax
    1518:	00 00                	add    %al,(%eax)
}
    151a:	66 c9                	leavew 
    151c:	66 c3                	retw   

0000151e <strcpy>:
//====================================================
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
    151e:	66 55                	push   %bp
    1520:	66 89 e5             	mov    %sp,%bp
    1523:	66 83 ec 08          	sub    $0x8,%sp
	int len = strlen(src);
    1527:	67 66 ff 75 08       	pushw  0x8(%di)
    152c:	66 e8 a6 fd          	callw  12d6 <print_next_line+0x27>
    1530:	ff                   	(bad)  
    1531:	ff 66 83             	jmp    *-0x7d(%esi)
    1534:	c4 04 67             	les    (%edi,%eiz,2),%eax
    1537:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	int i = 0;
    153b:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1542:	00 00                	add    %al,(%eax)
	for(i = 0;i < len;i ++){
    1544:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    154b:	00 00                	add    %al,(%eax)
    154d:	eb 3b                	jmp    158a <strcpy+0x6c>
    	des[i] =  src[i];
    154f:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1554:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1559:	66 01 c2             	add    %ax,%dx
    155c:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    1561:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1566:	66 01 c8             	add    %cx,%ax
    1569:	67 8a 00             	mov    (%bx,%si),%al
    156c:	67 88 02             	mov    %al,(%bp,%si)
        des[i+1] = 0;
    156f:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1574:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    1579:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    157e:	66 01 d0             	add    %dx,%ax
    1581:	67 c6 00 00          	movb   $0x0,(%bx,%si)
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
	int len = strlen(src);
	int i = 0;
	for(i = 0;i < len;i ++){
    1585:	67 66 ff 45 fc       	incw   -0x4(%di)
    158a:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    158f:	67 66 3b 45 f8       	cmp    -0x8(%di),%ax
    1594:	7c b9                	jl     154f <strcpy+0x31>
    	des[i] =  src[i];
        des[i+1] = 0;
	}
    1596:	66 c9                	leavew 
    1598:	66 c3                	retw   

0000159a <initial_PCB>:
#include "schedule.h"
#include "use.h"
void initial_PCB(int index){
    159a:	66 55                	push   %bp
    159c:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    159f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15a4:	66 40                	inc    %ax
    15a6:	66 c1 e0 0c          	shl    $0xc,%ax
    15aa:	66 89 c2             	mov    %ax,%dx
    15ad:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15b2:	66 c1 e0 02          	shl    $0x2,%ax
    15b6:	66 89 c1             	mov    %ax,%cx
    15b9:	66 c1 e1 04          	shl    $0x4,%cx
    15bd:	66 01 c8             	add    %cx,%ax
    15c0:	66 05 10 32          	add    $0x3210,%ax
    15c4:	00 00                	add    %al,(%eax)
    15c6:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    15ca:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15cf:	66 40                	inc    %ax
    15d1:	66 c1 e0 0c          	shl    $0xc,%ax
    15d5:	66 89 c2             	mov    %ax,%dx
    15d8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15dd:	66 c1 e0 02          	shl    $0x2,%ax
    15e1:	66 89 c1             	mov    %ax,%cx
    15e4:	66 c1 e1 04          	shl    $0x4,%cx
    15e8:	66 01 c8             	add    %cx,%ax
    15eb:	66 05 00 32          	add    $0x3200,%ax
    15ef:	00 00                	add    %al,(%eax)
    15f1:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
    15f5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15fa:	66 40                	inc    %ax
    15fc:	66 c1 e0 0c          	shl    $0xc,%ax
    1600:	66 89 c2             	mov    %ax,%dx
    1603:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1608:	66 c1 e0 02          	shl    $0x2,%ax
    160c:	66 89 c1             	mov    %ax,%cx
    160f:	66 c1 e1 04          	shl    $0x4,%cx
    1613:	66 01 c8             	add    %cx,%ax
    1616:	66 05 00 32          	add    $0x3200,%ax
    161a:	00 00                	add    %al,(%eax)
    161c:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
    1621:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1626:	66 c1 e0 02          	shl    $0x2,%ax
    162a:	66 89 c2             	mov    %ax,%dx
    162d:	66 c1 e2 04          	shl    $0x4,%dx
    1631:	66 01 d0             	add    %dx,%ax
    1634:	66 05 00 32          	add    $0x3200,%ax
    1638:	00 00                	add    %al,(%eax)
    163a:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
    1641:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
    1643:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1648:	66 c1 e0 02          	shl    $0x2,%ax
    164c:	66 89 c2             	mov    %ax,%dx
    164f:	66 c1 e2 04          	shl    $0x4,%dx
    1653:	66 01 d0             	add    %dx,%ax
    1656:	66 05 00 32          	add    $0x3200,%ax
    165a:	00 00                	add    %al,(%eax)
    165c:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    1663:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = READY;
    1665:	67 66 8b 45 08       	mov    0x8(%di),%ax
    166a:	66 c1 e0 02          	shl    $0x2,%ax
    166e:	66 89 c2             	mov    %ax,%dx
    1671:	66 c1 e2 04          	shl    $0x4,%dx
    1675:	66 01 d0             	add    %dx,%ax
    1678:	66 05 10 32          	add    $0x3210,%ax
    167c:	00 00                	add    %al,(%eax)
    167e:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    1685:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    1687:	67 66 ff 75 08       	pushw  0x8(%di)
    168c:	66 68 a0 68          	pushw  $0x68a0
    1690:	00 00                	add    %al,(%eax)
    1692:	66 e8 8b 09          	callw  2021 <size+0x11>
    1696:	00 00                	add    %al,(%eax)
    1698:	66 83 c4 08          	add    $0x8,%sp
    PCB_list[index ].eflags = 512;
    169c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16a1:	66 c1 e0 02          	shl    $0x2,%ax
    16a5:	66 89 c2             	mov    %ax,%dx
    16a8:	66 c1 e2 04          	shl    $0x4,%dx
    16ac:	66 01 d0             	add    %dx,%ax
    16af:	66 05 10 32          	add    $0x3210,%ax
    16b3:	00 00                	add    %al,(%eax)
    16b5:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    16bc:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    16be:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16c3:	66 c1 e0 02          	shl    $0x2,%ax
    16c7:	66 89 c2             	mov    %ax,%dx
    16ca:	66 c1 e2 04          	shl    $0x4,%dx
    16ce:	66 01 d0             	add    %dx,%ax
    16d1:	67 66 8d 90 10 32    	lea    0x3210(%bx,%si),%dx
    16d7:	00 00                	add    %al,(%eax)
    16d9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16de:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 0;
    16e3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16e8:	66 c1 e0 02          	shl    $0x2,%ax
    16ec:	66 89 c2             	mov    %ax,%dx
    16ef:	66 c1 e2 04          	shl    $0x4,%dx
    16f3:	66 01 d0             	add    %dx,%ax
    16f6:	66 05 20 32          	add    $0x3220,%ax
    16fa:	00 00                	add    %al,(%eax)
    16fc:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1702:	00 00                	add    %al,(%eax)
}
    1704:	66 c9                	leavew 
    1706:	66 c3                	retw   

00001708 <Set_PCB>:
void Set_PCB(){
    1708:	66 55                	push   %bp
    170a:	66 89 e5             	mov    %sp,%bp
    170d:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    1711:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1718:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    171a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1721:	00 00                	add    %al,(%eax)
    1723:	eb 27                	jmp    174c <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    1725:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    172a:	66 c1 e0 02          	shl    $0x2,%ax
    172e:	66 89 c2             	mov    %ax,%dx
    1731:	66 c1 e2 04          	shl    $0x4,%dx
    1735:	66 01 d0             	add    %dx,%ax
    1738:	66 05 10 32          	add    $0x3210,%ax
    173c:	00 00                	add    %al,(%eax)
    173e:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    1745:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 0;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    1747:	67 66 ff 45 fc       	incw   -0x4(%di)
    174c:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    1752:	7e d1                	jle    1725 <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    1754:	66 c9                	leavew 
    1756:	66 c3                	retw   

00001758 <sys_schedule>:
int sch_index;
int current_index ;
void sys_schedule(){
    1758:	66 55                	push   %bp
    175a:	66 89 e5             	mov    %sp,%bp
    int i,j;
    if(isempty(&readyqueue) != 1){
    175d:	66 68 a0 68          	pushw  $0x68a0
    1761:	00 00                	add    %al,(%eax)
    1763:	66 e8 8a 08          	callw  1ff1 <stack_copy+0x35>
    1767:	00 00                	add    %al,(%eax)
    1769:	66 83 c4 04          	add    $0x4,%sp
    176d:	66 83 f8 01          	cmp    $0x1,%ax
    1771:	0f 84 e0 00 66 a1    	je     a1661857 <_end+0xa165ae1b>
        current_index = _CurrentProg - PCB_list;
    1777:	3c 37                	cmp    $0x37,%al
    1779:	66 89 c2             	mov    %ax,%dx
    177c:	66 b8 e0 31          	mov    $0x31e0,%ax
    1780:	00 00                	add    %al,(%eax)
    1782:	66 29 c2             	sub    %ax,%dx
    1785:	66 89 d0             	mov    %dx,%ax
    1788:	66 c1 f8 02          	sar    $0x2,%ax
    178c:	66 89 c2             	mov    %ax,%dx
    178f:	66 89 d0             	mov    %dx,%ax
    1792:	66 01 c0             	add    %ax,%ax
    1795:	66 01 d0             	add    %dx,%ax
    1798:	67 66 8d 14          	lea    (%si),%dx
    179c:	85 00                	test   %eax,(%eax)
    179e:	00 00                	add    %al,(%eax)
    17a0:	00 66 01             	add    %ah,0x1(%esi)
    17a3:	d0 66 89             	shlb   -0x77(%esi)
    17a6:	c2 66 c1             	ret    $0xc166
    17a9:	e2 08                	loop   17b3 <sys_schedule+0x5b>
    17ab:	66 01 d0             	add    %dx,%ax
    17ae:	66 89 c2             	mov    %ax,%dx
    17b1:	66 c1 e2 10          	shl    $0x10,%dx
    17b5:	66 01 d0             	add    %dx,%ax
    17b8:	66 f7 d8             	neg    %ax
    17bb:	66 a3 40 37 66 a1    	mov    %ax,0xa1663740
        if(_CurrentProg -> prg_status == RUN){
    17c1:	3c 37                	cmp    $0x37,%al
    17c3:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    17c8:	66 83 f8 01          	cmp    $0x1,%ax
    17cc:	75 23                	jne    17f1 <sys_schedule+0x99>
            _CurrentProg -> prg_status = READY;
    17ce:	66 a1 3c 37 67 66    	mov    0x6667373c,%ax
    17d4:	c7 40 38 03 00 00 00 	movl   $0x3,0x38(%eax)
            enqueue(&readyqueue,current_index);
    17db:	66 a1 40 37 66 50    	mov    0x50663740,%ax
    17e1:	66 68 a0 68          	pushw  $0x68a0
    17e5:	00 00                	add    %al,(%eax)
    17e7:	66 e8 36 08          	callw  2021 <size+0x11>
    17eb:	00 00                	add    %al,(%eax)
    17ed:	66 83 c4 08          	add    $0x8,%sp
        }
        dequeue(&readyqueue,&sch_index);
    17f1:	66 68 30 37          	pushw  $0x3730
    17f5:	00 00                	add    %al,(%eax)
    17f7:	66 68 a0 68          	pushw  $0x68a0
    17fb:	00 00                	add    %al,(%eax)
    17fd:	66 e8 8c 08          	callw  208d <enqueue+0x6a>
    1801:	00 00                	add    %al,(%eax)
    1803:	66 83 c4 08          	add    $0x8,%sp
        if(PCB_list[sch_index].prg_status == READY){
    1807:	66 a1 30 37 66 c1    	mov    0xc1663730,%ax
    180d:	e0 02                	loopne 1811 <sys_schedule+0xb9>
    180f:	66 89 c2             	mov    %ax,%dx
    1812:	66 c1 e2 04          	shl    $0x4,%dx
    1816:	66 01 d0             	add    %dx,%ax
    1819:	66 05 10 32          	add    $0x3210,%ax
    181d:	00 00                	add    %al,(%eax)
    181f:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1824:	66 83 f8 03          	cmp    $0x3,%ax
    1828:	75 2b                	jne    1855 <sys_schedule+0xfd>
            _CurrentProg = PCB_list + sch_index;
    182a:	66 a1 30 37 66 c1    	mov    0xc1663730,%ax
    1830:	e0 02                	loopne 1834 <sys_schedule+0xdc>
    1832:	66 89 c2             	mov    %ax,%dx
    1835:	66 c1 e2 04          	shl    $0x4,%dx
    1839:	66 01 d0             	add    %dx,%ax
    183c:	66 05 e0 31          	add    $0x31e0,%ax
    1840:	00 00                	add    %al,(%eax)
    1842:	66 a3 3c 37 66 a1    	mov    %ax,0xa166373c
            _CurrentProg -> prg_status = RUN;
    1848:	3c 37                	cmp    $0x37,%al
    184a:	67 66 c7 40 38 01 00 	movw   $0x1,0x38(%bx,%si)
    1851:	00 00                	add    %al,(%eax)
            return;
    1853:	eb 0a                	jmp    185f <sys_schedule+0x107>
        }
    }
    _CurrentProg = PCB_list ;
    1855:	66 c7 06 3c 37       	movw   $0x373c,(%esi)
    185a:	e0 31                	loopne 188d <sys_exit+0x2a>
    185c:	00 00                	add    %al,(%eax)
    return;
    185e:	90                   	nop
    
}
    185f:	66 c9                	leavew 
    1861:	66 c3                	retw   

00001863 <sys_exit>:
void sys_exit(){
    1863:	66 55                	push   %bp
    1865:	66 89 e5             	mov    %sp,%bp
    1868:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    186c:	fa                   	cli    
    int index = _CurrentProg - PCB_list;
    186d:	66 a1 3c 37 66 89    	mov    0x8966373c,%ax
    1873:	c2 66 b8             	ret    $0xb866
    1876:	e0 31                	loopne 18a9 <sys_exit+0x46>
    1878:	00 00                	add    %al,(%eax)
    187a:	66 29 c2             	sub    %ax,%dx
    187d:	66 89 d0             	mov    %dx,%ax
    1880:	66 c1 f8 02          	sar    $0x2,%ax
    1884:	66 89 c2             	mov    %ax,%dx
    1887:	66 89 d0             	mov    %dx,%ax
    188a:	66 01 c0             	add    %ax,%ax
    188d:	66 01 d0             	add    %dx,%ax
    1890:	67 66 8d 14          	lea    (%si),%dx
    1894:	85 00                	test   %eax,(%eax)
    1896:	00 00                	add    %al,(%eax)
    1898:	00 66 01             	add    %ah,0x1(%esi)
    189b:	d0 66 89             	shlb   -0x77(%esi)
    189e:	c2 66 c1             	ret    $0xc166
    18a1:	e2 08                	loop   18ab <sys_exit+0x48>
    18a3:	66 01 d0             	add    %dx,%ax
    18a6:	66 89 c2             	mov    %ax,%dx
    18a9:	66 c1 e2 10          	shl    $0x10,%dx
    18ad:	66 01 d0             	add    %dx,%ax
    18b0:	66 f7 d8             	neg    %ax
    18b3:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    rmele(&readyqueue,index);
    18b8:	67 66 ff 75 fc       	pushw  -0x4(%di)
    18bd:	66 68 a0 68          	pushw  $0x68a0
    18c1:	00 00                	add    %al,(%eax)
    18c3:	66 e8 6a 08          	callw  2131 <init_queue+0x30>
    18c7:	00 00                	add    %al,(%eax)
    18c9:	66 83 c4 08          	add    $0x8,%sp
    _CurrentProg -> prg_status = EXIT;
    18cd:	66 a1 3c 37 67 66    	mov    0x6667373c,%ax
    18d3:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    __asm__("sti\n");
    18da:	fb                   	sti    
}
    18db:	66 c9                	leavew 
    18dd:	66 c3                	retw   

000018df <sys_bolocked>:



int queuesize,tmp;//一定要是全局，否则dequeue无法将tmp修改
void sys_bolocked(int index){
    18df:	66 55                	push   %bp
    18e1:	66 89 e5             	mov    %sp,%bp
    18e4:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    18e8:	fa                   	cli    
    PCB_list[index].prg_status = BLOCKED;
    18e9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    18ee:	66 c1 e0 02          	shl    $0x2,%ax
    18f2:	66 89 c2             	mov    %ax,%dx
    18f5:	66 c1 e2 04          	shl    $0x4,%dx
    18f9:	66 01 d0             	add    %dx,%ax
    18fc:	66 05 10 32          	add    $0x3210,%ax
    1900:	00 00                	add    %al,(%eax)
    1902:	67 66 c7 40 08 02 00 	movw   $0x2,0x8(%bx,%si)
    1909:	00 00                	add    %al,(%eax)
    enqueue(&blockqueue,index);
    190b:	67 66 ff 75 08       	pushw  0x8(%di)
    1910:	66 68 40 30          	pushw  $0x3040
    1914:	00 00                	add    %al,(%eax)
    1916:	66 e8 07 07          	callw  2021 <size+0x11>
    191a:	00 00                	add    %al,(%eax)
    191c:	66 83 c4 08          	add    $0x8,%sp
    queuesize = size(&readyqueue);
    1920:	66 68 a0 68          	pushw  $0x68a0
    1924:	00 00                	add    %al,(%eax)
    1926:	66 e8 e4 06          	callw  200e <isempty+0x1b>
    192a:	00 00                	add    %al,(%eax)
    192c:	66 83 c4 04          	add    $0x4,%sp
    1930:	66 a3 24 30 67 66    	mov    %ax,0x66673024
    int i = 0;
    1936:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    193d:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1944:	00 00                	add    %al,(%eax)
    1946:	eb 3c                	jmp    1984 <sys_bolocked+0xa5>
        dequeue(&readyqueue,&tmp);
    1948:	66 68 20 30          	pushw  $0x3020
    194c:	00 00                	add    %al,(%eax)
    194e:	66 68 a0 68          	pushw  $0x68a0
    1952:	00 00                	add    %al,(%eax)
    1954:	66 e8 35 07          	callw  208d <enqueue+0x6a>
    1958:	00 00                	add    %al,(%eax)
    195a:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    195e:	66 a1 20 30 67 66    	mov    0x66673020,%ax
    1964:	39 45 08             	cmp    %eax,0x8(%ebp)
    1967:	74 16                	je     197f <sys_bolocked+0xa0>
            enqueue(&readyqueue,tmp);
    1969:	66 a1 20 30 66 50    	mov    0x50663020,%ax
    196f:	66 68 a0 68          	pushw  $0x68a0
    1973:	00 00                	add    %al,(%eax)
    1975:	66 e8 a8 06          	callw  2021 <size+0x11>
    1979:	00 00                	add    %al,(%eax)
    197b:	66 83 c4 08          	add    $0x8,%sp
    __asm__("cli\n");
    PCB_list[index].prg_status = BLOCKED;
    enqueue(&blockqueue,index);
    queuesize = size(&readyqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    197f:	67 66 ff 45 fc       	incw   -0x4(%di)
    1984:	66 a1 24 30 67 66    	mov    0x66673024,%ax
    198a:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    198d:	7c b9                	jl     1948 <sys_bolocked+0x69>
        dequeue(&readyqueue,&tmp);
        if(index != tmp){
            enqueue(&readyqueue,tmp);
        }
    }
    __asm__("sti\n");
    198f:	fb                   	sti    
}
    1990:	66 c9                	leavew 
    1992:	66 c3                	retw   

00001994 <sys_wakeup>:
void sys_wakeup(int index){
    1994:	66 55                	push   %bp
    1996:	66 89 e5             	mov    %sp,%bp
    1999:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    199d:	fa                   	cli    
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    199e:	66 68 40 30          	pushw  $0x3040
    19a2:	00 00                	add    %al,(%eax)
    19a4:	66 e8 66 06          	callw  200e <isempty+0x1b>
    19a8:	00 00                	add    %al,(%eax)
    19aa:	66 83 c4 04          	add    $0x4,%sp
    19ae:	66 a3 24 30 67 66    	mov    %ax,0x66673024
    int i = 0;
    19b4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    19bb:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    19c2:	00 00                	add    %al,(%eax)
    19c4:	eb 3c                	jmp    1a02 <sys_wakeup+0x6e>
        dequeue(&blockqueue,&tmp);
    19c6:	66 68 20 30          	pushw  $0x3020
    19ca:	00 00                	add    %al,(%eax)
    19cc:	66 68 40 30          	pushw  $0x3040
    19d0:	00 00                	add    %al,(%eax)
    19d2:	66 e8 b7 06          	callw  208d <enqueue+0x6a>
    19d6:	00 00                	add    %al,(%eax)
    19d8:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    19dc:	66 a1 20 30 67 66    	mov    0x66673020,%ax
    19e2:	39 45 08             	cmp    %eax,0x8(%ebp)
    19e5:	74 16                	je     19fd <sys_wakeup+0x69>
            enqueue(&blockqueue,tmp);
    19e7:	66 a1 20 30 66 50    	mov    0x50663020,%ax
    19ed:	66 68 40 30          	pushw  $0x3040
    19f1:	00 00                	add    %al,(%eax)
    19f3:	66 e8 2a 06          	callw  2021 <size+0x11>
    19f7:	00 00                	add    %al,(%eax)
    19f9:	66 83 c4 08          	add    $0x8,%sp
void sys_wakeup(int index){
    __asm__("cli\n");
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    19fd:	67 66 ff 45 fc       	incw   -0x4(%di)
    1a02:	66 a1 24 30 67 66    	mov    0x66673024,%ax
    1a08:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1a0b:	7c b9                	jl     19c6 <sys_wakeup+0x32>
        dequeue(&blockqueue,&tmp);
        if(index != tmp){
            enqueue(&blockqueue,tmp);
        }
    }
    PCB_list[index].prg_status = READY;
    1a0d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a12:	66 c1 e0 02          	shl    $0x2,%ax
    1a16:	66 89 c2             	mov    %ax,%dx
    1a19:	66 c1 e2 04          	shl    $0x4,%dx
    1a1d:	66 01 d0             	add    %dx,%ax
    1a20:	66 05 10 32          	add    $0x3210,%ax
    1a24:	00 00                	add    %al,(%eax)
    1a26:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    1a2d:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    1a2f:	67 66 ff 75 08       	pushw  0x8(%di)
    1a34:	66 68 a0 68          	pushw  $0x68a0
    1a38:	00 00                	add    %al,(%eax)
    1a3a:	66 e8 e3 05          	callw  2021 <size+0x11>
    1a3e:	00 00                	add    %al,(%eax)
    1a40:	66 83 c4 08          	add    $0x8,%sp
    __asm__("sti\n");
    1a44:	fb                   	sti    
}
    1a45:	66 c9                	leavew 
    1a47:	66 c3                	retw   

00001a49 <sys_run>:
void sys_run(){
    1a49:	66 55                	push   %bp
    1a4b:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    1a4e:	66 a1 3c 37 67 66    	mov    0x6667373c,%ax
    1a54:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    1a5b:	66 5d                	pop    %bp
    1a5d:	66 c3                	retw   

00001a5f <do_fork>:

int do_fork(){
    1a5f:	66 55                	push   %bp
    1a61:	66 89 e5             	mov    %sp,%bp
    1a64:	66 83 ec 08          	sub    $0x8,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    1a68:	67 66 c7 45 fc 24 32 	movw   $0x3224,-0x4(%di)
    1a6f:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN )    fork_prg = fork_prg + 1;//应该增加used位，防止被覆盖
    1a71:	eb 06                	jmp    1a79 <do_fork+0x1a>
    1a73:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    1a79:	67 66 81 7d fc 30 37 	cmpw   $0x3730,-0x4(%di)
    1a80:	00 00                	add    %al,(%eax)
    1a82:	73 10                	jae    1a94 <do_fork+0x35>
    1a84:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1a89:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    1a8e:	66 83 f8 01          	cmp    $0x1,%ax
    1a92:	74 df                	je     1a73 <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    1a94:	67 66 81 7d fc ec 36 	cmpw   $0x36ec,-0x4(%di)
    1a9b:	00 00                	add    %al,(%eax)
    1a9d:	76 0f                	jbe    1aae <do_fork+0x4f>
    1a9f:	66 a1 3c 37 67 66    	mov    0x6667373c,%ax
    1aa5:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    1aab:	e9 42 02 66 e8       	jmp    e8661cf2 <_end+0xe865b2b6>
    else{
        _Schedule_once();
    1ab0:	21 e9                	and    %ebp,%ecx
    1ab2:	ff                   	(bad)  
    1ab3:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    1ab6:	ec                   	in     (%dx),%al
    1ab7:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    1ab8:	66 a1 3c 37 67 66    	mov    0x6667373c,%ax
    1abe:	ff 75 fc             	pushl  -0x4(%ebp)
    1ac1:	66 50                	push   %ax
    1ac3:	66 e8 e8 03          	callw  1eaf <counter+0x64>
    1ac7:	00 00                	add    %al,(%eax)
    1ac9:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    1acd:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    1ad1:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1ad6:	66 b8 e0 31          	mov    $0x31e0,%ax
    1ada:	00 00                	add    %al,(%eax)
    1adc:	66 29 c2             	sub    %ax,%dx
    1adf:	66 89 d0             	mov    %dx,%ax
    1ae2:	66 c1 f8 02          	sar    $0x2,%ax
    1ae6:	66 89 c2             	mov    %ax,%dx
    1ae9:	66 89 d0             	mov    %dx,%ax
    1aec:	66 01 c0             	add    %ax,%ax
    1aef:	66 01 d0             	add    %dx,%ax
    1af2:	67 66 8d 14          	lea    (%si),%dx
    1af6:	85 00                	test   %eax,(%eax)
    1af8:	00 00                	add    %al,(%eax)
    1afa:	00 66 01             	add    %ah,0x1(%esi)
    1afd:	d0 66 89             	shlb   -0x77(%esi)
    1b00:	c2 66 c1             	ret    $0xc166
    1b03:	e2 08                	loop   1b0d <do_fork+0xae>
    1b05:	66 01 d0             	add    %dx,%ax
    1b08:	66 89 c2             	mov    %ax,%dx
    1b0b:	66 c1 e2 10          	shl    $0x10,%dx
    1b0f:	66 01 d0             	add    %dx,%ax
    1b12:	66 f7 d8             	neg    %ax
    1b15:	66 89 c2             	mov    %ax,%dx
    1b18:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1b1d:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    1b22:	66 a1 3c 37 66 89    	mov    0x8966373c,%ax
    1b28:	c2 66 b8             	ret    $0xb866
    1b2b:	e0 31                	loopne 1b5e <do_fork+0xff>
    1b2d:	00 00                	add    %al,(%eax)
    1b2f:	66 29 c2             	sub    %ax,%dx
    1b32:	66 89 d0             	mov    %dx,%ax
    1b35:	66 c1 f8 02          	sar    $0x2,%ax
    1b39:	66 89 c2             	mov    %ax,%dx
    1b3c:	66 89 d0             	mov    %dx,%ax
    1b3f:	66 01 c0             	add    %ax,%ax
    1b42:	66 01 d0             	add    %dx,%ax
    1b45:	67 66 8d 14          	lea    (%si),%dx
    1b49:	85 00                	test   %eax,(%eax)
    1b4b:	00 00                	add    %al,(%eax)
    1b4d:	00 66 01             	add    %ah,0x1(%esi)
    1b50:	d0 66 89             	shlb   -0x77(%esi)
    1b53:	c2 66 c1             	ret    $0xc166
    1b56:	e2 08                	loop   1b60 <do_fork+0x101>
    1b58:	66 01 d0             	add    %dx,%ax
    1b5b:	66 89 c2             	mov    %ax,%dx
    1b5e:	66 c1 e2 10          	shl    $0x10,%dx
    1b62:	66 01 d0             	add    %dx,%ax
    1b65:	66 f7 d8             	neg    %ax
    1b68:	66 89 c2             	mov    %ax,%dx
    1b6b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1b70:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    1b75:	66 a1 3c 37 67 66    	mov    0x6667373c,%ax
    1b7b:	8b 50 20             	mov    0x20(%eax),%edx
    1b7e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1b83:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    1b88:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1b8d:	66 b8 e0 31          	mov    $0x31e0,%ax
    1b91:	00 00                	add    %al,(%eax)
    1b93:	66 29 c2             	sub    %ax,%dx
    1b96:	66 89 d0             	mov    %dx,%ax
    1b99:	66 c1 f8 02          	sar    $0x2,%ax
    1b9d:	66 89 c2             	mov    %ax,%dx
    1ba0:	66 89 d0             	mov    %dx,%ax
    1ba3:	66 01 c0             	add    %ax,%ax
    1ba6:	66 01 d0             	add    %dx,%ax
    1ba9:	67 66 8d 14          	lea    (%si),%dx
    1bad:	85 00                	test   %eax,(%eax)
    1baf:	00 00                	add    %al,(%eax)
    1bb1:	00 66 01             	add    %ah,0x1(%esi)
    1bb4:	d0 66 89             	shlb   -0x77(%esi)
    1bb7:	c2 66 c1             	ret    $0xc166
    1bba:	e2 08                	loop   1bc4 <do_fork+0x165>
    1bbc:	66 01 d0             	add    %dx,%ax
    1bbf:	66 89 c2             	mov    %ax,%dx
    1bc2:	66 c1 e2 10          	shl    $0x10,%dx
    1bc6:	66 01 d0             	add    %dx,%ax
    1bc9:	66 f7 d8             	neg    %ax
    1bcc:	66 83 c0 02          	add    $0x2,%ax
    1bd0:	66 c1 e0 0c          	shl    $0xc,%ax
    1bd4:	66 89 c2             	mov    %ax,%dx
    1bd7:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1bdc:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    1be1:	66 a1 3c 37 67 66    	mov    0x6667373c,%ax
    1be7:	8b 50 30             	mov    0x30(%eax),%edx
    1bea:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1bef:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    1bf4:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1bf9:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    1c00:	00 00                	add    %al,(%eax)
        
        int index = fork_prg - PCB_list;
    1c02:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1c07:	66 b8 e0 31          	mov    $0x31e0,%ax
    1c0b:	00 00                	add    %al,(%eax)
    1c0d:	66 29 c2             	sub    %ax,%dx
    1c10:	66 89 d0             	mov    %dx,%ax
    1c13:	66 c1 f8 02          	sar    $0x2,%ax
    1c17:	66 89 c2             	mov    %ax,%dx
    1c1a:	66 89 d0             	mov    %dx,%ax
    1c1d:	66 01 c0             	add    %ax,%ax
    1c20:	66 01 d0             	add    %dx,%ax
    1c23:	67 66 8d 14          	lea    (%si),%dx
    1c27:	85 00                	test   %eax,(%eax)
    1c29:	00 00                	add    %al,(%eax)
    1c2b:	00 66 01             	add    %ah,0x1(%esi)
    1c2e:	d0 66 89             	shlb   -0x77(%esi)
    1c31:	c2 66 c1             	ret    $0xc166
    1c34:	e2 08                	loop   1c3e <do_fork+0x1df>
    1c36:	66 01 d0             	add    %dx,%ax
    1c39:	66 89 c2             	mov    %ax,%dx
    1c3c:	66 c1 e2 10          	shl    $0x10,%dx
    1c40:	66 01 d0             	add    %dx,%ax
    1c43:	66 f7 d8             	neg    %ax
    1c46:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
        __asm__("sub $6,%esp");
    1c4b:	66 83 ec 06          	sub    $0x6,%sp
        enqueue(&readyqueue,index); 
    1c4f:	67 66 ff 75 f8       	pushw  -0x8(%di)
    1c54:	66 68 a0 68          	pushw  $0x68a0
    1c58:	00 00                	add    %al,(%eax)
    1c5a:	66 e8 c3 03          	callw  2021 <size+0x11>
    1c5e:	00 00                	add    %al,(%eax)
    1c60:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    1c64:	66 83 c4 06          	add    $0x6,%sp
        _Schedule_once();
    1c68:	66 e8 67 e7          	callw  3d3 <S+0x14>
    1c6c:	ff                   	(bad)  
    1c6d:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    1c70:	ec                   	in     (%dx),%al
    1c71:	06                   	push   %es
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    1c72:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1c77:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1c7c:	66 a1 3c 37 67 66    	mov    0x6667373c,%ax
    1c82:	8b 50 28             	mov    0x28(%eax),%edx
    1c85:	66 a1 3c 37 67 66    	mov    0x6667373c,%ax
    1c8b:	8b 40 24             	mov    0x24(%eax),%eax
    1c8e:	66 51                	push   %cx
    1c90:	66 52                	push   %dx
    1c92:	66 50                	push   %ax
    1c94:	66 e8 2b e6          	callw  2c3 <Message31+0x4>
    1c98:	ff                   	(bad)  
    1c99:	ff 66 83             	jmp    *-0x7d(%esi)
    1c9c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
        __asm__("add $6,%esp");
    1c9f:	83 c4 06             	add    $0x6,%esp
        fork_prg -> ip = _CurrentProg -> ip;
    1ca2:	66 a1 3c 37 67 66    	mov    0x6667373c,%ax
    1ca8:	8b 50 2c             	mov    0x2c(%eax),%edx
    1cab:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1cb0:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    1cb5:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1cba:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1cc0:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    1cc2:	66 a1 3c 37 67 66    	mov    0x6667373c,%ax
    1cc8:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1ccb:	75 08                	jne    1cd5 <do_fork+0x276>
            return 0;
    1ccd:	66 b8 00 00          	mov    $0x0,%ax
    1cd1:	00 00                	add    %al,(%eax)
    1cd3:	eb 1b                	jmp    1cf0 <do_fork+0x291>
        }
        _CurrentProg -> eax = _CurrentProg -> id;
    1cd5:	66 a1 3c 37 66 8b    	mov    0x8b66373c,%ax
    1cdb:	16                   	push   %ss
    1cdc:	3c 37                	cmp    $0x37,%al
    1cde:	67 66 8b 52 3c       	mov    0x3c(%bp,%si),%dx
    1ce3:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    1ce7:	66 a1 3c 37 67 66    	mov    0x6667373c,%ax
    1ced:	8b 00                	mov    (%eax),%eax
    1cef:	90                   	nop
    }
}
    1cf0:	66 c9                	leavew 
    1cf2:	66 c3                	retw   

00001cf4 <sys_exit_fork>:
void sys_exit_fork(char ch){
    1cf4:	66 55                	push   %bp
    1cf6:	66 89 e5             	mov    %sp,%bp
    1cf9:	66 83 ec 0c          	sub    $0xc,%sp
    1cfd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1d02:	67 88 45 f4          	mov    %al,-0xc(%di)
    int current_id = _CurrentProg - PCB_list;
    1d06:	66 a1 3c 37 66 89    	mov    0x8966373c,%ax
    1d0c:	c2 66 b8             	ret    $0xb866
    1d0f:	e0 31                	loopne 1d42 <sys_exit_fork+0x4e>
    1d11:	00 00                	add    %al,(%eax)
    1d13:	66 29 c2             	sub    %ax,%dx
    1d16:	66 89 d0             	mov    %dx,%ax
    1d19:	66 c1 f8 02          	sar    $0x2,%ax
    1d1d:	66 89 c2             	mov    %ax,%dx
    1d20:	66 89 d0             	mov    %dx,%ax
    1d23:	66 01 c0             	add    %ax,%ax
    1d26:	66 01 d0             	add    %dx,%ax
    1d29:	67 66 8d 14          	lea    (%si),%dx
    1d2d:	85 00                	test   %eax,(%eax)
    1d2f:	00 00                	add    %al,(%eax)
    1d31:	00 66 01             	add    %ah,0x1(%esi)
    1d34:	d0 66 89             	shlb   -0x77(%esi)
    1d37:	c2 66 c1             	ret    $0xc166
    1d3a:	e2 08                	loop   1d44 <sys_exit_fork+0x50>
    1d3c:	66 01 d0             	add    %dx,%ax
    1d3f:	66 89 c2             	mov    %ax,%dx
    1d42:	66 c1 e2 10          	shl    $0x10,%dx
    1d46:	66 01 d0             	add    %dx,%ax
    1d49:	66 f7 d8             	neg    %ax
    1d4c:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    int index = _CurrentProg -> fid;
    1d51:	66 a1 3c 37 67 66    	mov    0x6667373c,%ax
    1d57:	8b 40 40             	mov    0x40(%eax),%eax
    1d5a:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    sys_wakeup(index);
    1d5f:	67 66 ff 75 f8       	pushw  -0x8(%di)
    1d64:	66 e8 2a fc          	callw  1992 <sys_bolocked+0xb3>
    1d68:	ff                   	(bad)  
    1d69:	ff 66 83             	jmp    *-0x7d(%esi)
    1d6c:	c4 04 66             	les    (%esi,%eiz,2),%eax
    PCB_list[_CurrentProg -> fid].eax = ch;
    1d6f:	a1 3c 37 67 66       	mov    0x6667373c,%eax
    1d74:	8b 40 40             	mov    0x40(%eax),%eax
    1d77:	67 66 0f be 55 f4    	movsbw -0xc(%di),%dx
    1d7d:	66 c1 e0 02          	shl    $0x2,%ax
    1d81:	66 89 c1             	mov    %ax,%cx
    1d84:	66 c1 e1 04          	shl    $0x4,%cx
    1d88:	66 01 c8             	add    %cx,%ax
    1d8b:	66 05 e0 31          	add    $0x31e0,%ax
    1d8f:	00 00                	add    %al,(%eax)
    1d91:	67 66 89 10          	mov    %dx,(%bx,%si)
    _CurrentProg -> prg_status = EXIT;
    1d95:	66 a1 3c 37 67 66    	mov    0x6667373c,%ax
    1d9b:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    rmele(&readyqueue,current_id);
    1da2:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1da7:	66 68 a0 68          	pushw  $0x68a0
    1dab:	00 00                	add    %al,(%eax)
    1dad:	66 e8 80 03          	callw  2131 <init_queue+0x30>
    1db1:	00 00                	add    %al,(%eax)
    1db3:	66 83 c4 08          	add    $0x8,%sp
    _Schedule();
    1db7:	66 e8 2e e6          	callw  3e9 <_fork_user+0x9>
    1dbb:	ff                   	(bad)  
    1dbc:	ff 66 c9             	jmp    *-0x37(%esi)
}
    1dbf:	66 c3                	retw   

00001dc1 <sys_wait>:
int sys_wait(){
    1dc1:	66 55                	push   %bp
    1dc3:	66 89 e5             	mov    %sp,%bp
    1dc6:	66 83 ec 04          	sub    $0x4,%sp
    int index = _CurrentProg - PCB_list;
    1dca:	66 a1 3c 37 66 89    	mov    0x8966373c,%ax
    1dd0:	c2 66 b8             	ret    $0xb866
    1dd3:	e0 31                	loopne 1e06 <sys_wait+0x45>
    1dd5:	00 00                	add    %al,(%eax)
    1dd7:	66 29 c2             	sub    %ax,%dx
    1dda:	66 89 d0             	mov    %dx,%ax
    1ddd:	66 c1 f8 02          	sar    $0x2,%ax
    1de1:	66 89 c2             	mov    %ax,%dx
    1de4:	66 89 d0             	mov    %dx,%ax
    1de7:	66 01 c0             	add    %ax,%ax
    1dea:	66 01 d0             	add    %dx,%ax
    1ded:	67 66 8d 14          	lea    (%si),%dx
    1df1:	85 00                	test   %eax,(%eax)
    1df3:	00 00                	add    %al,(%eax)
    1df5:	00 66 01             	add    %ah,0x1(%esi)
    1df8:	d0 66 89             	shlb   -0x77(%esi)
    1dfb:	c2 66 c1             	ret    $0xc166
    1dfe:	e2 08                	loop   1e08 <sys_wait+0x47>
    1e00:	66 01 d0             	add    %dx,%ax
    1e03:	66 89 c2             	mov    %ax,%dx
    1e06:	66 c1 e2 10          	shl    $0x10,%dx
    1e0a:	66 01 d0             	add    %dx,%ax
    1e0d:	66 f7 d8             	neg    %ax
    1e10:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_bolocked(index);
    1e15:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1e1a:	66 e8 bf fa          	callw  18dd <sys_exit+0x7a>
    1e1e:	ff                   	(bad)  
    1e1f:	ff 66 83             	jmp    *-0x7d(%esi)
    1e22:	c4 04 66             	les    (%esi,%eiz,2),%eax
    _Schedule();
    1e25:	e8 c1 e5 ff ff       	call   3eb <_Schedule>
    return _CurrentProg -> eax;
    1e2a:	66 a1 3c 37 67 66    	mov    0x6667373c,%ax
    1e30:	8b 00                	mov    (%eax),%eax
}
    1e32:	66 c9                	leavew 
    1e34:	66 c3                	retw   

00001e36 <thread_join>:
void thread_join(){
    1e36:	66 55                	push   %bp
    1e38:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    1e3b:	90                   	nop
    1e3c:	66 e8 09 00          	callw  1e49 <thread_join+0x13>
    1e40:	00 00                	add    %al,(%eax)
    1e42:	66 85 c0             	test   %ax,%ax
    1e45:	75 f5                	jne    1e3c <thread_join+0x6>
    }
}
    1e47:	66 5d                	pop    %bp
    1e49:	66 c3                	retw   

00001e4b <counter>:
int counter(){
    1e4b:	66 55                	push   %bp
    1e4d:	66 89 e5             	mov    %sp,%bp
    1e50:	66 83 ec 08          	sub    $0x8,%sp
    __asm__("cli\n");
    1e54:	fa                   	cli    
    int i = 0;
    1e55:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1e5c:	00 00                	add    %al,(%eax)
    int count = 0;
    1e5e:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    1e65:	00 00                	add    %al,(%eax)
    for(i = 1;i < PCB_NUMMER;i ++){
    1e67:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    1e6e:	00 00                	add    %al,(%eax)
    1e70:	eb 2d                	jmp    1e9f <counter+0x54>
        if(PCB_list[i].prg_status != EXIT){
    1e72:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1e77:	66 c1 e0 02          	shl    $0x2,%ax
    1e7b:	66 89 c2             	mov    %ax,%dx
    1e7e:	66 c1 e2 04          	shl    $0x4,%dx
    1e82:	66 01 d0             	add    %dx,%ax
    1e85:	66 05 10 32          	add    $0x3210,%ax
    1e89:	00 00                	add    %al,(%eax)
    1e8b:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1e90:	66 85 c0             	test   %ax,%ax
    1e93:	74 05                	je     1e9a <counter+0x4f>
            count ++;
    1e95:	67 66 ff 45 f8       	incw   -0x8(%di)
}
int counter(){
    __asm__("cli\n");
    int i = 0;
    int count = 0;
    for(i = 1;i < PCB_NUMMER;i ++){
    1e9a:	67 66 ff 45 fc       	incw   -0x4(%di)
    1e9f:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    1ea5:	7e cb                	jle    1e72 <counter+0x27>
        if(PCB_list[i].prg_status != EXIT){
            count ++;
        }
    }
    __asm__("sti\n");
    1ea7:	fb                   	sti    
    return count;
    1ea8:	67 66 8b 45 f8       	mov    -0x8(%di),%ax

}
    1ead:	66 c9                	leavew 
    1eaf:	66 c3                	retw   

00001eb1 <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    1eb1:	66 55                	push   %bp
    1eb3:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    1eb6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ebb:	67 66 8b 10          	mov    (%bx,%si),%dx
    1ebf:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1ec4:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    1ec8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ecd:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    1ed2:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1ed7:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    1edc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ee1:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    1ee6:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1eeb:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    1ef0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ef5:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    1efa:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1eff:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    1f04:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f09:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    1f0e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f13:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    1f18:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f1d:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    1f22:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f27:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    1f2c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f31:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    1f36:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f3b:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    1f40:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f45:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    1f4a:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f4f:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    1f54:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f59:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    1f5e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f63:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    1f68:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f6d:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    1f72:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f77:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    1f7c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f81:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    1f86:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f8b:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    1f90:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f95:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    1f9a:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f9f:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    1fa4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1fa9:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    1fae:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1fb3:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    1fb8:	66 5d                	pop    %bp
    1fba:	66 c3                	retw   

00001fbc <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    1fbc:	66 55                	push   %bp
    1fbe:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    1fc1:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1fc6:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1fcb:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1fd0:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    1fd5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1fda:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    1fdf:	66 51                	push   %cx
    1fe1:	66 52                	push   %dx
    1fe3:	66 50                	push   %ax
    1fe5:	66 e8 da e2          	callw  2c3 <Message31+0x4>
    1fe9:	ff                   	(bad)  
    1fea:	ff 66 83             	jmp    *-0x7d(%esi)
    1fed:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    1ff0:	c9                   	leave  
    1ff1:	66 c3                	retw   

00001ff3 <isempty>:
int isempty(struct Queue *queue){
    1ff3:	66 55                	push   %bp
    1ff5:	66 89 e5             	mov    %sp,%bp
    
    return (queue -> size == 0);
    1ff8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ffd:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    2002:	66 85 c0             	test   %ax,%ax
    2005:	0f 94 c0             	sete   %al
    2008:	66 0f b6 c0          	movzbw %al,%ax

}
    200c:	66 5d                	pop    %bp
    200e:	66 c3                	retw   

00002010 <size>:
int size(struct Queue *queue){
    2010:	66 55                	push   %bp
    2012:	66 89 e5             	mov    %sp,%bp
    return queue -> size ;
    2015:	67 66 8b 45 08       	mov    0x8(%di),%ax
    201a:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
}
    201f:	66 5d                	pop    %bp
    2021:	66 c3                	retw   

00002023 <enqueue>:
void enqueue(struct Queue *queue,int data){
    2023:	66 55                	push   %bp
    2025:	66 89 e5             	mov    %sp,%bp

    if(queue -> size >= MAX){
    2028:	67 66 8b 45 08       	mov    0x8(%di),%ax
    202d:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    2032:	66 83 f8 63          	cmp    $0x63,%ax
    2036:	7e 02                	jle    203a <enqueue+0x17>
        return;
    2038:	eb 51                	jmp    208b <enqueue+0x68>
    }
    queue -> size ++;
    203a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    203f:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    2044:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    2049:	67 66 8b 45 08       	mov    0x8(%di),%ax
    204e:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    queue -> tail = (queue -> tail + 1) % MAX;
    2053:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2058:	67 66 8b 00          	mov    (%bx,%si),%ax
    205c:	66 40                	inc    %ax
    205e:	66 b9 64 00          	mov    $0x64,%cx
    2062:	00 00                	add    %al,(%eax)
    2064:	66 99                	cwtd   
    2066:	66 f7 f9             	idiv   %cx
    2069:	67 66 8b 45 08       	mov    0x8(%di),%ax
    206e:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> array[queue -> tail] = data;
    2072:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2077:	67 66 8b 10          	mov    (%bx,%si),%dx
    207b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2080:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    2085:	67 66 89 4c 90       	mov    %cx,-0x70(%si)
    208a:	0c 66                	or     $0x66,%al

}
    208c:	5d                   	pop    %ebp
    208d:	66 c3                	retw   

0000208f <dequeue>:
void dequeue(struct Queue *queue,int * data){
    208f:	66 55                	push   %bp
    2091:	66 89 e5             	mov    %sp,%bp

    if(queue -> size <= 0){
    2094:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2099:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    209e:	66 85 c0             	test   %ax,%ax
    20a1:	7f 02                	jg     20a5 <dequeue+0x16>
        return;
    20a3:	eb 58                	jmp    20fd <dequeue+0x6e>
    }
    queue -> size --;
    20a5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20aa:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    20af:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    20b4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20b9:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    *data = queue -> array[queue -> head];
    20be:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20c3:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    20c8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20cd:	67 66 8b 54 90       	mov    -0x70(%si),%dx
    20d2:	0c 67                	or     $0x67,%al
    20d4:	66 8b 45 0c          	mov    0xc(%ebp),%ax
    20d8:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> head = (queue -> head + 1) % MAX;
    20dc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20e1:	67 66 8b 40 04       	mov    0x4(%bx,%si),%ax
    20e6:	66 40                	inc    %ax
    20e8:	66 b9 64 00          	mov    $0x64,%cx
    20ec:	00 00                	add    %al,(%eax)
    20ee:	66 99                	cwtd   
    20f0:	66 f7 f9             	idiv   %cx
    20f3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20f8:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)

}
    20fd:	66 5d                	pop    %bp
    20ff:	66 c3                	retw   

00002101 <init_queue>:
void init_queue(struct Queue *queue){
    2101:	66 55                	push   %bp
    2103:	66 89 e5             	mov    %sp,%bp
    queue -> size = 0;
    2106:	67 66 8b 45 08       	mov    0x8(%di),%ax
    210b:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    2112:	00 00                	add    %al,(%eax)
    queue -> tail = -1;
    2114:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2119:	67 66 c7 00 ff ff    	movw   $0xffff,(%bx,%si)
    211f:	ff                   	(bad)  
    2120:	ff 67 66             	jmp    *0x66(%edi)
    queue -> head = 0;
    2123:	8b 45 08             	mov    0x8(%ebp),%eax
    2126:	67 66 c7 40 04 00 00 	movw   $0x0,0x4(%bx,%si)
    212d:	00 00                	add    %al,(%eax)
}
    212f:	66 5d                	pop    %bp
    2131:	66 c3                	retw   

00002133 <rmele>:
int rm_tmp;
int ii;
void rmele(struct Queue *queue,int data){
    2133:	66 55                	push   %bp
    2135:	66 89 e5             	mov    %sp,%bp
    2138:	66 83 ec 04          	sub    $0x4,%sp
    int size_of_rmqueue= size(queue);
    213c:	67 66 ff 75 08       	pushw  0x8(%di)
    2141:	66 e8 c9 fe          	callw  200e <isempty+0x1b>
    2145:	ff                   	(bad)  
    2146:	ff 66 83             	jmp    *-0x7d(%esi)
    2149:	c4 04 67             	les    (%edi,%eiz,2),%eax
    214c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    2150:	66 c7 06 38 37       	movw   $0x3738,(%esi)
    2155:	00 00                	add    %al,(%eax)
    2157:	00 00                	add    %al,(%eax)
    2159:	eb 3f                	jmp    219a <rmele+0x67>
        dequeue(queue,&rm_tmp);
    215b:	66 68 98 68          	pushw  $0x6898
    215f:	00 00                	add    %al,(%eax)
    2161:	67 66 ff 75 08       	pushw  0x8(%di)
    2166:	66 e8 23 ff          	callw  208d <enqueue+0x6a>
    216a:	ff                   	(bad)  
    216b:	ff 66 83             	jmp    *-0x7d(%esi)
    216e:	c4 08                	les    (%eax),%ecx
        if(rm_tmp != data){
    2170:	66 a1 98 68 67 66    	mov    0x66676898,%ax
    2176:	3b 45 0c             	cmp    0xc(%ebp),%eax
    2179:	74 15                	je     2190 <rmele+0x5d>
            enqueue(queue,rm_tmp);
    217b:	66 a1 98 68 66 50    	mov    0x50666898,%ax
    2181:	67 66 ff 75 08       	pushw  0x8(%di)
    2186:	66 e8 97 fe          	callw  2021 <size+0x11>
    218a:	ff                   	(bad)  
    218b:	ff 66 83             	jmp    *-0x7d(%esi)
    218e:	c4 08                	les    (%eax),%ecx
}
int rm_tmp;
int ii;
void rmele(struct Queue *queue,int data){
    int size_of_rmqueue= size(queue);
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    2190:	66 a1 38 37 66 40    	mov    0x40663738,%ax
    2196:	66 a3 38 37 66 a1    	mov    %ax,0xa1663738
    219c:	38 37                	cmp    %dh,(%edi)
    219e:	67 66 3b 45 fc       	cmp    -0x4(%di),%ax
    21a3:	7c b6                	jl     215b <rmele+0x28>
        dequeue(queue,&rm_tmp);
        if(rm_tmp != data){
            enqueue(queue,rm_tmp);
        }
    }
}
    21a5:	66 c9                	leavew 
    21a7:	66 c3                	retw   

000021a9 <init_Semlist>:
void init_Semlist(){
    21a9:	66 55                	push   %bp
    21ab:	66 89 e5             	mov    %sp,%bp
    21ae:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    21b2:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    21b9:	00 00                	add    %al,(%eax)
    for(i = 0;i < SemMax;i ++){
    21bb:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    21c2:	00 00                	add    %al,(%eax)
    21c4:	eb 69                	jmp    222f <init_Semlist+0x86>
        SEM_list[i].used = 0;
    21c6:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    21cb:	66 89 d0             	mov    %dx,%ax
    21ce:	66 01 c0             	add    %ax,%ax
    21d1:	66 01 d0             	add    %dx,%ax
    21d4:	66 c1 e0 02          	shl    $0x2,%ax
    21d8:	66 01 d0             	add    %dx,%ax
    21db:	66 c1 e0 03          	shl    $0x3,%ax
    21df:	66 01 d0             	add    %dx,%ax
    21e2:	66 c1 e0 02          	shl    $0x2,%ax
    21e6:	66 05 00 39          	add    $0x3900,%ax
    21ea:	00 00                	add    %al,(%eax)
    21ec:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    21f2:	00 00                	add    %al,(%eax)
        init_queue(&SEM_list[i].semaque);
    21f4:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    21f9:	66 89 d0             	mov    %dx,%ax
    21fc:	66 01 c0             	add    %ax,%ax
    21ff:	66 01 d0             	add    %dx,%ax
    2202:	66 c1 e0 02          	shl    $0x2,%ax
    2206:	66 01 d0             	add    %dx,%ax
    2209:	66 c1 e0 03          	shl    $0x3,%ax
    220d:	66 01 d0             	add    %dx,%ax
    2210:	66 c1 e0 02          	shl    $0x2,%ax
    2214:	66 05 60 37          	add    $0x3760,%ax
    2218:	00 00                	add    %al,(%eax)
    221a:	66 83 c0 04          	add    $0x4,%ax
    221e:	66 50                	push   %ax
    2220:	66 e8 db fe          	callw  20ff <dequeue+0x70>
    2224:	ff                   	(bad)  
    2225:	ff 66 83             	jmp    *-0x7d(%esi)
    2228:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
    }
}
void init_Semlist(){
    int i = 0;
    for(i = 0;i < SemMax;i ++){
    222b:	66 ff 45 fc          	incw   -0x4(%ebp)
    222f:	67 66 83 7d fc 1d    	cmpw   $0x1d,-0x4(%di)
    2235:	7e 8f                	jle    21c6 <init_Semlist+0x1d>
        SEM_list[i].used = 0;
        init_queue(&SEM_list[i].semaque);
    }
}
    2237:	66 c9                	leavew 
    2239:	66 c3                	retw   

0000223b <do_SemGet>:
int do_SemGet(int value){
    223b:	66 55                	push   %bp
    223d:	66 89 e5             	mov    %sp,%bp
    2240:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    2244:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    224b:	00 00                	add    %al,(%eax)
    while(SEM_list[i].used == 1){
    224d:	eb 05                	jmp    2254 <do_SemGet+0x19>
        i ++;
    224f:	67 66 ff 45 fc       	incw   -0x4(%di)
        init_queue(&SEM_list[i].semaque);
    }
}
int do_SemGet(int value){
    int i = 0;
    while(SEM_list[i].used == 1){
    2254:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    2259:	66 89 d0             	mov    %dx,%ax
    225c:	66 01 c0             	add    %ax,%ax
    225f:	66 01 d0             	add    %dx,%ax
    2262:	66 c1 e0 02          	shl    $0x2,%ax
    2266:	66 01 d0             	add    %dx,%ax
    2269:	66 c1 e0 03          	shl    $0x3,%ax
    226d:	66 01 d0             	add    %dx,%ax
    2270:	66 c1 e0 02          	shl    $0x2,%ax
    2274:	66 05 00 39          	add    $0x3900,%ax
    2278:	00 00                	add    %al,(%eax)
    227a:	67 66 8b 00          	mov    (%bx,%si),%ax
    227e:	66 83 f8 01          	cmp    $0x1,%ax
    2282:	74 cb                	je     224f <do_SemGet+0x14>
        i ++;
    }
    if(i < SemMax){
    2284:	67 66 83 7d fc 1d    	cmpw   $0x1d,-0x4(%di)
    228a:	7f 66                	jg     22f2 <do_SemGet+0xb7>
        SEM_list[i].used = 1;
    228c:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    2291:	66 89 d0             	mov    %dx,%ax
    2294:	66 01 c0             	add    %ax,%ax
    2297:	66 01 d0             	add    %dx,%ax
    229a:	66 c1 e0 02          	shl    $0x2,%ax
    229e:	66 01 d0             	add    %dx,%ax
    22a1:	66 c1 e0 03          	shl    $0x3,%ax
    22a5:	66 01 d0             	add    %dx,%ax
    22a8:	66 c1 e0 02          	shl    $0x2,%ax
    22ac:	66 05 00 39          	add    $0x3900,%ax
    22b0:	00 00                	add    %al,(%eax)
    22b2:	67 66 c7 00 01 00    	movw   $0x1,(%bx,%si)
    22b8:	00 00                	add    %al,(%eax)
        SEM_list[i].count = value;
    22ba:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    22bf:	66 89 d0             	mov    %dx,%ax
    22c2:	66 01 c0             	add    %ax,%ax
    22c5:	66 01 d0             	add    %dx,%ax
    22c8:	66 c1 e0 02          	shl    $0x2,%ax
    22cc:	66 01 d0             	add    %dx,%ax
    22cf:	66 c1 e0 03          	shl    $0x3,%ax
    22d3:	66 01 d0             	add    %dx,%ax
    22d6:	66 c1 e0 02          	shl    $0x2,%ax
    22da:	67 66 8d 90 60 37    	lea    0x3760(%bx,%si),%dx
    22e0:	00 00                	add    %al,(%eax)
    22e2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    22e7:	67 66 89 02          	mov    %ax,(%bp,%si)
        return i;
    22eb:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    22f0:	eb 06                	jmp    22f8 <do_SemGet+0xbd>
    }
    else 
        return -1;
    22f2:	66 b8 ff ff          	mov    $0xffff,%ax
    22f6:	ff                   	(bad)  
    22f7:	ff 66 c9             	jmp    *-0x37(%esi)
}
    22fa:	66 c3                	retw   

000022fc <do_SemFree>:
void do_SemFree(int s){
    22fc:	66 55                	push   %bp
    22fe:	66 89 e5             	mov    %sp,%bp
    SEM_list[s].used = 0;
    2301:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2306:	66 89 d0             	mov    %dx,%ax
    2309:	66 01 c0             	add    %ax,%ax
    230c:	66 01 d0             	add    %dx,%ax
    230f:	66 c1 e0 02          	shl    $0x2,%ax
    2313:	66 01 d0             	add    %dx,%ax
    2316:	66 c1 e0 03          	shl    $0x3,%ax
    231a:	66 01 d0             	add    %dx,%ax
    231d:	66 c1 e0 02          	shl    $0x2,%ax
    2321:	66 05 00 39          	add    $0x3900,%ax
    2325:	00 00                	add    %al,(%eax)
    2327:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    232d:	00 00                	add    %al,(%eax)
}
    232f:	66 5d                	pop    %bp
    2331:	66 c3                	retw   

00002333 <do_P>:
int sem_index;
void do_P(int s){
    2333:	66 55                	push   %bp
    2335:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    2338:	fa                   	cli    
    SEM_list[s].count = SEM_list[s].count - 1;
    2339:	67 66 8b 55 08       	mov    0x8(%di),%dx
    233e:	66 89 d0             	mov    %dx,%ax
    2341:	66 01 c0             	add    %ax,%ax
    2344:	66 01 d0             	add    %dx,%ax
    2347:	66 c1 e0 02          	shl    $0x2,%ax
    234b:	66 01 d0             	add    %dx,%ax
    234e:	66 c1 e0 03          	shl    $0x3,%ax
    2352:	66 01 d0             	add    %dx,%ax
    2355:	66 c1 e0 02          	shl    $0x2,%ax
    2359:	66 05 60 37          	add    $0x3760,%ax
    235d:	00 00                	add    %al,(%eax)
    235f:	67 66 8b 00          	mov    (%bx,%si),%ax
    2363:	67 66 8d 48 ff       	lea    -0x1(%bx,%si),%cx
    2368:	67 66 8b 55 08       	mov    0x8(%di),%dx
    236d:	66 89 d0             	mov    %dx,%ax
    2370:	66 01 c0             	add    %ax,%ax
    2373:	66 01 d0             	add    %dx,%ax
    2376:	66 c1 e0 02          	shl    $0x2,%ax
    237a:	66 01 d0             	add    %dx,%ax
    237d:	66 c1 e0 03          	shl    $0x3,%ax
    2381:	66 01 d0             	add    %dx,%ax
    2384:	66 c1 e0 02          	shl    $0x2,%ax
    2388:	66 05 60 37          	add    $0x3760,%ax
    238c:	00 00                	add    %al,(%eax)
    238e:	67 66 89 08          	mov    %cx,(%bx,%si)
    if(SEM_list[s].count < 0){
    2392:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2397:	66 89 d0             	mov    %dx,%ax
    239a:	66 01 c0             	add    %ax,%ax
    239d:	66 01 d0             	add    %dx,%ax
    23a0:	66 c1 e0 02          	shl    $0x2,%ax
    23a4:	66 01 d0             	add    %dx,%ax
    23a7:	66 c1 e0 03          	shl    $0x3,%ax
    23ab:	66 01 d0             	add    %dx,%ax
    23ae:	66 c1 e0 02          	shl    $0x2,%ax
    23b2:	66 05 60 37          	add    $0x3760,%ax
    23b6:	00 00                	add    %al,(%eax)
    23b8:	67 66 8b 00          	mov    (%bx,%si),%ax
    23bc:	66 85 c0             	test   %ax,%ax
    23bf:	0f 89 b0 00 66 a1    	jns    a1662475 <_end+0xa165ba39>
        _CurrentProg->prg_status = BLOCKED;
    23c5:	3c 37                	cmp    $0x37,%al
    23c7:	67 66 c7 40 38 02 00 	movw   $0x2,0x38(%bx,%si)
    23ce:	00 00                	add    %al,(%eax)
        sem_index = _CurrentProg - PCB_list;
    23d0:	66 a1 3c 37 66 89    	mov    0x8966373c,%ax
    23d6:	c2 66 b8             	ret    $0xb866
    23d9:	e0 31                	loopne 240c <do_P+0xd9>
    23db:	00 00                	add    %al,(%eax)
    23dd:	66 29 c2             	sub    %ax,%dx
    23e0:	66 89 d0             	mov    %dx,%ax
    23e3:	66 c1 f8 02          	sar    $0x2,%ax
    23e7:	66 89 c2             	mov    %ax,%dx
    23ea:	66 89 d0             	mov    %dx,%ax
    23ed:	66 01 c0             	add    %ax,%ax
    23f0:	66 01 d0             	add    %dx,%ax
    23f3:	67 66 8d 14          	lea    (%si),%dx
    23f7:	85 00                	test   %eax,(%eax)
    23f9:	00 00                	add    %al,(%eax)
    23fb:	00 66 01             	add    %ah,0x1(%esi)
    23fe:	d0 66 89             	shlb   -0x77(%esi)
    2401:	c2 66 c1             	ret    $0xc166
    2404:	e2 08                	loop   240e <do_P+0xdb>
    2406:	66 01 d0             	add    %dx,%ax
    2409:	66 89 c2             	mov    %ax,%dx
    240c:	66 c1 e2 10          	shl    $0x10,%dx
    2410:	66 01 d0             	add    %dx,%ax
    2413:	66 f7 d8             	neg    %ax
    2416:	66 a3 9c 68 66 a1    	mov    %ax,0xa166689c
        rmele(&readyqueue,sem_index);
    241c:	9c                   	pushf  
    241d:	68 66 50 66 68       	push   $0x68665066
    2422:	a0 68 00 00 66       	mov    0x66000068,%al
    2427:	e8 07 fd ff ff       	call   2133 <rmele>
    242c:	66 83 c4 08          	add    $0x8,%sp
        enqueue(&(SEM_list[s].semaque),sem_index);
    2430:	66 8b 0e             	mov    (%esi),%cx
    2433:	9c                   	pushf  
    2434:	68 67 66 8b 55       	push   $0x558b6667
    2439:	08 66 89             	or     %ah,-0x77(%esi)
    243c:	d0 66 01             	shlb   0x1(%esi)
    243f:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    2443:	66 c1 e0 02          	shl    $0x2,%ax
    2447:	66 01 d0             	add    %dx,%ax
    244a:	66 c1 e0 03          	shl    $0x3,%ax
    244e:	66 01 d0             	add    %dx,%ax
    2451:	66 c1 e0 02          	shl    $0x2,%ax
    2455:	66 05 60 37          	add    $0x3760,%ax
    2459:	00 00                	add    %al,(%eax)
    245b:	66 83 c0 04          	add    $0x4,%ax
    245f:	66 51                	push   %cx
    2461:	66 50                	push   %ax
    2463:	66 e8 ba fb          	callw  2021 <size+0x11>
    2467:	ff                   	(bad)  
    2468:	ff 66 83             	jmp    *-0x7d(%esi)
    246b:	c4 08                	les    (%eax),%ecx
        _Schedule_once();
    246d:	66 e8 62 df          	callw  3d3 <S+0x14>
    2471:	ff                   	(bad)  
    2472:	ff                   	(bad)  
    }
    __asm("sti\n");
    2473:	fb                   	sti    
}
    2474:	66 c9                	leavew 
    2476:	66 c3                	retw   

00002478 <do_V>:
int v_res;
void do_V(int s){
    2478:	66 55                	push   %bp
    247a:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    247d:	fa                   	cli    
    SEM_list[s].count  = SEM_list[s].count + 1;
    247e:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2483:	66 89 d0             	mov    %dx,%ax
    2486:	66 01 c0             	add    %ax,%ax
    2489:	66 01 d0             	add    %dx,%ax
    248c:	66 c1 e0 02          	shl    $0x2,%ax
    2490:	66 01 d0             	add    %dx,%ax
    2493:	66 c1 e0 03          	shl    $0x3,%ax
    2497:	66 01 d0             	add    %dx,%ax
    249a:	66 c1 e0 02          	shl    $0x2,%ax
    249e:	66 05 60 37          	add    $0x3760,%ax
    24a2:	00 00                	add    %al,(%eax)
    24a4:	67 66 8b 00          	mov    (%bx,%si),%ax
    24a8:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    24ad:	67 66 8b 55 08       	mov    0x8(%di),%dx
    24b2:	66 89 d0             	mov    %dx,%ax
    24b5:	66 01 c0             	add    %ax,%ax
    24b8:	66 01 d0             	add    %dx,%ax
    24bb:	66 c1 e0 02          	shl    $0x2,%ax
    24bf:	66 01 d0             	add    %dx,%ax
    24c2:	66 c1 e0 03          	shl    $0x3,%ax
    24c6:	66 01 d0             	add    %dx,%ax
    24c9:	66 c1 e0 02          	shl    $0x2,%ax
    24cd:	66 05 60 37          	add    $0x3760,%ax
    24d1:	00 00                	add    %al,(%eax)
    24d3:	67 66 89 08          	mov    %cx,(%bx,%si)
    if(SEM_list[s].count <= 0){
    24d7:	67 66 8b 55 08       	mov    0x8(%di),%dx
    24dc:	66 89 d0             	mov    %dx,%ax
    24df:	66 01 c0             	add    %ax,%ax
    24e2:	66 01 d0             	add    %dx,%ax
    24e5:	66 c1 e0 02          	shl    $0x2,%ax
    24e9:	66 01 d0             	add    %dx,%ax
    24ec:	66 c1 e0 03          	shl    $0x3,%ax
    24f0:	66 01 d0             	add    %dx,%ax
    24f3:	66 c1 e0 02          	shl    $0x2,%ax
    24f7:	66 05 60 37          	add    $0x3760,%ax
    24fb:	00 00                	add    %al,(%eax)
    24fd:	67 66 8b 00          	mov    (%bx,%si),%ax
    2501:	66 85 c0             	test   %ax,%ax
    2504:	7f 73                	jg     2579 <do_V+0x101>
        dequeue(&(SEM_list[s].semaque),&v_res);
    2506:	67 66 8b 55 08       	mov    0x8(%di),%dx
    250b:	66 89 d0             	mov    %dx,%ax
    250e:	66 01 c0             	add    %ax,%ax
    2511:	66 01 d0             	add    %dx,%ax
    2514:	66 c1 e0 02          	shl    $0x2,%ax
    2518:	66 01 d0             	add    %dx,%ax
    251b:	66 c1 e0 03          	shl    $0x3,%ax
    251f:	66 01 d0             	add    %dx,%ax
    2522:	66 c1 e0 02          	shl    $0x2,%ax
    2526:	66 05 60 37          	add    $0x3760,%ax
    252a:	00 00                	add    %al,(%eax)
    252c:	66 83 c0 04          	add    $0x4,%ax
    2530:	66 68 34 37          	pushw  $0x3734
    2534:	00 00                	add    %al,(%eax)
    2536:	66 50                	push   %ax
    2538:	66 e8 51 fb          	callw  208d <enqueue+0x6a>
    253c:	ff                   	(bad)  
    253d:	ff 66 83             	jmp    *-0x7d(%esi)
    2540:	c4 08                	les    (%eax),%ecx
        PCB_list[v_res].prg_status = READY;
    2542:	66 a1 34 37 66 c1    	mov    0xc1663734,%ax
    2548:	e0 02                	loopne 254c <do_V+0xd4>
    254a:	66 89 c2             	mov    %ax,%dx
    254d:	66 c1 e2 04          	shl    $0x4,%dx
    2551:	66 01 d0             	add    %dx,%ax
    2554:	66 05 10 32          	add    $0x3210,%ax
    2558:	00 00                	add    %al,(%eax)
    255a:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    2561:	00 00                	add    %al,(%eax)
        enqueue(&readyqueue,v_res);
    2563:	66 a1 34 37 66 50    	mov    0x50663734,%ax
    2569:	66 68 a0 68          	pushw  $0x68a0
    256d:	00 00                	add    %al,(%eax)
    256f:	66 e8 ae fa          	callw  2021 <size+0x11>
    2573:	ff                   	(bad)  
    2574:	ff 66 83             	jmp    *-0x7d(%esi)
    2577:	c4 08                	les    (%eax),%ecx
    }
    __asm__("sti\n");
    2579:	fb                   	sti    

    257a:	66 c9                	leavew 
    257c:	66 c3                	retw   

0000257e <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    257e:	66 55                	push   %bp
    2580:	66 89 e5             	mov    %sp,%bp
    2583:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    2587:	66 e8 53 de          	callw  3de <_Schedule_once+0x9>
    258b:	ff                   	(bad)  
    258c:	ff 67 66             	jmp    *0x66(%edi)
    258f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    2592:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    2597:	66 c9                	leavew 
    2599:	66 c3                	retw   

0000259b <wait>:
char wait(){
    259b:	66 55                	push   %bp
    259d:	66 89 e5             	mov    %sp,%bp
    25a0:	66 83 ec 08          	sub    $0x8,%sp
    int temp_ch = _wait();
    25a4:	66 e8 4e de          	callw  3f6 <_Schedule+0xb>
    25a8:	ff                   	(bad)  
    25a9:	ff 67 66             	jmp    *0x66(%edi)
    25ac:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char ch = '0' + temp_ch;
    25af:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    25b4:	66 83 c0 30          	add    $0x30,%ax
    25b8:	67 88 45 fb          	mov    %al,-0x5(%di)
    return ch;
    25bc:	67 8a 45 fb          	mov    -0x5(%di),%al
    //_wait();
}
    25c0:	66 c9                	leavew 
    25c2:	66 c3                	retw   

000025c4 <exit>:
void exit(char ch){
    25c4:	66 55                	push   %bp
    25c6:	66 89 e5             	mov    %sp,%bp
    25c9:	66 83 ec 04          	sub    $0x4,%sp
    25cd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    25d2:	67 88 45 fc          	mov    %al,-0x4(%di)
    _exit(ch);
    25d6:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    25dc:	66 50                	push   %ax
    25de:	66 e8 1f de          	callw  401 <_wait+0x9>
    25e2:	ff                   	(bad)  
    25e3:	ff 66 83             	jmp    *-0x7d(%esi)
    25e6:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    25e9:	c9                   	leave  
    25ea:	66 c3                	retw   

000025ec <GetSem>:
int GetSem(int value){
    25ec:	66 55                	push   %bp
    25ee:	66 89 e5             	mov    %sp,%bp
    25f1:	66 83 ec 04          	sub    $0x4,%sp
    int sema = _GetSem(value);
    25f5:	67 66 ff 75 08       	pushw  0x8(%di)
    25fa:	66 e8 15 de          	callw  413 <_exit+0x10>
    25fe:	ff                   	(bad)  
    25ff:	ff 66 83             	jmp    *-0x7d(%esi)
    2602:	c4 04 67             	les    (%edi,%eiz,2),%eax
    2605:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return sema;
    2609:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    260e:	66 c9                	leavew 
    2610:	66 c3                	retw   

00002612 <SemFree>:
void SemFree(int value){
    2612:	66 55                	push   %bp
    2614:	66 89 e5             	mov    %sp,%bp
    _FreeSem(value);
    2617:	67 66 ff 75 08       	pushw  0x8(%di)
    261c:	66 e8 05 de          	callw  425 <_GetSem+0x10>
    2620:	ff                   	(bad)  
    2621:	ff 66 83             	jmp    *-0x7d(%esi)
    2624:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2627:	c9                   	leave  
    2628:	66 c3                	retw   

0000262a <P>:
void P(int s){   
    262a:	66 55                	push   %bp
    262c:	66 89 e5             	mov    %sp,%bp
    _P(s);
    262f:	67 66 ff 75 08       	pushw  0x8(%di)
    2634:	66 e8 ff dd          	callw  437 <_FreeSem+0x10>
    2638:	ff                   	(bad)  
    2639:	ff 66 83             	jmp    *-0x7d(%esi)
    263c:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    263f:	c9                   	leave  
    2640:	66 c3                	retw   

00002642 <V>:
void V(int s){
    2642:	66 55                	push   %bp
    2644:	66 89 e5             	mov    %sp,%bp
    _V(s);
    2647:	67 66 ff 75 08       	pushw  0x8(%di)
    264c:	66 e8 f9 dd          	callw  449 <_P+0x10>
    2650:	ff                   	(bad)  
    2651:	ff 66 83             	jmp    *-0x7d(%esi)
    2654:	c4 04 66             	les    (%esi,%eiz,2),%eax
    2657:	c9                   	leave  
    2658:	66 c3                	retw   
