
fruit.elf:     file format elf32-i386


Disassembly of section .text:

00000100 <main>:
int i,j,k;
char *words;
int word_index;
int fruit_disk;
int pid1,pid2;
int main(){
     100:	66 55                	push   %bp
     102:	66 89 e5             	mov    %sp,%bp
    __asm__("mov $0x9000, %eax\n");
     105:	66 b8 00 90          	mov    $0x9000,%ax
     109:	00 00                	add    %al,(%eax)
    __asm__("mov %ax, %ds\n");
     10b:	8e d8                	mov    %eax,%ds
    __asm__("mov %ax, %es\n");
     10d:	8e c0                	mov    %eax,%es
    __asm__("mov %ax, %ss\n");
     10f:	8e d0                	mov    %eax,%ss
    __asm__("mov $0x100, %esp");  
     111:	66 bc 00 01          	mov    $0x100,%sp
     115:	00 00                	add    %al,(%eax)
    s=GetSem(1);
     117:	66 6a 01             	pushw  $0x1
     11a:	66 e8 25 25          	callw  2643 <exit+0x26>
     11e:	00 00                	add    %al,(%eax)
     120:	66 83 c4 04          	add    $0x4,%sp
     124:	66 a3 b0 40 66 c7    	mov    %ax,0xc76640b0
    fruit_disk = 0;
     12a:	06                   	push   %es
     12b:	a8 40                	test   $0x40,%al
     12d:	00 00                	add    %al,(%eax)
     12f:	00 00                	add    %al,(%eax)
    pid1 = fork();
     131:	66 e8 a0 24          	callw  25d5 <do_V+0x10b>
     135:	00 00                	add    %al,(%eax)
     137:	66 a3 b4 40 66 a1    	mov    %ax,0xa16640b4
    if (pid1){
     13d:	b4 40                	mov    $0x40,%ah
     13f:	66 85 c0             	test   %ax,%ax
     142:	74 61                	je     1a5 <main+0xa5>
        for(i = 0;i < 12;i ++) { 
     144:	66 c7 06 9c 40       	movw   $0x409c,(%esi)
     149:	00 00                	add    %al,(%eax)
     14b:	00 00                	add    %al,(%eax)
     14d:	eb 4a                	jmp    199 <main+0x99>
            P(s); 
     14f:	66 a1 b0 40 66 50    	mov    0x506640b0,%ax
     155:	66 e8 28 25          	callw  2681 <SemFree+0x16>
     159:	00 00                	add    %al,(%eax)
     15b:	66 83 c4 04          	add    $0x4,%sp
            //P(s); 
            prints("words: ");
     15f:	66 68 b4 26          	pushw  $0x26b4
     163:	00 00                	add    %al,(%eax)
     165:	66 e8 27 10          	callw  1190 <print+0x8f>
     169:	00 00                	add    %al,(%eax)
     16b:	66 83 c4 04          	add    $0x4,%sp
            //myprintf(words);
            prints(" fruit: ");
     16f:	66 68 bc 26          	pushw  $0x26bc
     173:	00 00                	add    %al,(%eax)
     175:	66 e8 17 10          	callw  1190 <print+0x8f>
     179:	00 00                	add    %al,(%eax)
     17b:	66 83 c4 04          	add    $0x4,%sp
            printsint(fruit_disk);
     17f:	66 a1 a8 40 66 50    	mov    0x506640a8,%ax
     185:	66 e8 82 10          	callw  120b <printc+0x27>
     189:	00 00                	add    %al,(%eax)
     18b:	66 83 c4 04          	add    $0x4,%sp
    __asm__("mov $0x100, %esp");  
    s=GetSem(1);
    fruit_disk = 0;
    pid1 = fork();
    if (pid1){
        for(i = 0;i < 12;i ++) { 
     18f:	66 a1 9c 40 66 40    	mov    0x4066409c,%ax
     195:	66 a3 9c 40 66 a1    	mov    %ax,0xa166409c
     19b:	9c                   	pushf  
     19c:	40                   	inc    %eax
     19d:	66 83 f8 0b          	cmp    $0xb,%ax
     1a1:	7e ac                	jle    14f <main+0x4f>
     1a3:	eb 5f                	jmp    204 <main+0x104>
            prints(" fruit: ");
            printsint(fruit_disk);
        }
    }
    else{ 
        prints("hehe ");
     1a5:	66 68 c5 26          	pushw  $0x26c5
     1a9:	00 00                	add    %al,(%eax)
     1ab:	66 e8 e1 0f          	callw  1190 <print+0x8f>
     1af:	00 00                	add    %al,(%eax)
     1b1:	66 83 c4 04          	add    $0x4,%sp
            //    putwords("father live forever"); 
             //   V(s);
           // }
        //}
        //else{
            for(k = 0;k < 17;k ++) { 
     1b5:	66 c7 06 98 40       	movw   $0x4098,(%esi)
     1ba:	00 00                	add    %al,(%eax)
     1bc:	00 00                	add    %al,(%eax)
     1be:	eb 3a                	jmp    1fa <main+0xfa>
                prints("you");
     1c0:	66 68 cb 26          	pushw  $0x26cb
     1c4:	00 00                	add    %al,(%eax)
     1c6:	66 e8 c6 0f          	callw  1190 <print+0x8f>
     1ca:	00 00                	add    %al,(%eax)
     1cc:	66 83 c4 04          	add    $0x4,%sp
                fruit_disk = fruit_disk + 1;
     1d0:	66 a1 a8 40 66 40    	mov    0x406640a8,%ax
     1d6:	66 a3 a8 40 66 a1    	mov    %ax,0xa16640a8
                V(s);
     1dc:	b0 40                	mov    $0x40,%al
     1de:	66 50                	push   %ax
     1e0:	66 e8 b5 24          	callw  2699 <P+0x16>
     1e4:	00 00                	add    %al,(%eax)
     1e6:	66 83 c4 04          	add    $0x4,%sp
                delay();
     1ea:	66 e8 94 00          	callw  282 <myprintf+0x33>
     1ee:	00 00                	add    %al,(%eax)
            //    putwords("father live forever"); 
             //   V(s);
           // }
        //}
        //else{
            for(k = 0;k < 17;k ++) { 
     1f0:	66 a1 98 40 66 40    	mov    0x40664098,%ax
     1f6:	66 a3 98 40 66 a1    	mov    %ax,0xa1664098
     1fc:	98                   	cwtl   
     1fd:	40                   	inc    %eax
     1fe:	66 83 f8 10          	cmp    $0x10,%ax
     202:	7e bc                	jle    1c0 <main+0xc0>
                //_Schedule();
            }
        //}
    }

}
     204:	66 c9                	leavew 
     206:	66 c3                	retw   

00000208 <putwords>:
void putwords(char const* s1){
     208:	66 55                	push   %bp
     20a:	66 89 e5             	mov    %sp,%bp
    if(words[word_index] != 0){
     20d:	66 8b 16             	mov    (%esi),%dx
     210:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     211:	40                   	inc    %eax
     212:	66 a1 ac 40 66 01    	mov    0x16640ac,%ax
     218:	d0 67 8a             	shlb   -0x76(%edi)
     21b:	00 84 c0 74 2b 66 8b 	add    %al,-0x7499d48c(%eax,%eax,8)
        words[word_index] = s1[word_index];
     222:	16                   	push   %ss
     223:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     224:	40                   	inc    %eax
     225:	66 a1 ac 40 66 01    	mov    0x16640ac,%ax
     22b:	c2 66 a1             	ret    $0xa166
     22e:	ac                   	lods   %ds:(%esi),%al
     22f:	40                   	inc    %eax
     230:	66 89 c1             	mov    %ax,%cx
     233:	67 66 8b 45 08       	mov    0x8(%di),%ax
     238:	66 01 c8             	add    %cx,%ax
     23b:	67 8a 00             	mov    (%bx,%si),%al
     23e:	67 88 02             	mov    %al,(%bp,%si)
        word_index ++;
     241:	66 a1 ac 40 66 40    	mov    0x406640ac,%ax
     247:	66 a3 ac 40 66 5d    	mov    %ax,0x5d6640ac
    }
}
     24d:	66 c3                	retw   

0000024f <myprintf>:
void myprintf(char* s1){
     24f:	66 55                	push   %bp
     251:	66 89 e5             	mov    %sp,%bp
    printc(s1[-- word_index]);
     254:	66 a1 ac 40 66 48    	mov    0x486640ac,%ax
     25a:	66 a3 ac 40 66 a1    	mov    %ax,0xa16640ac
     260:	ac                   	lods   %ds:(%esi),%al
     261:	40                   	inc    %eax
     262:	66 89 c2             	mov    %ax,%dx
     265:	67 66 8b 45 08       	mov    0x8(%di),%ax
     26a:	66 01 d0             	add    %dx,%ax
     26d:	67 8a 00             	mov    (%bx,%si),%al
     270:	66 0f be c0          	movsbw %al,%ax
     274:	66 50                	push   %ax
     276:	66 e8 68 0f          	callw  11e2 <prints+0x50>
     27a:	00 00                	add    %al,(%eax)
     27c:	66 83 c4 04          	add    $0x4,%sp
}
     280:	66 c9                	leavew 
     282:	66 c3                	retw   

00000284 <delay>:
delay(){
     284:	66 55                	push   %bp
     286:	66 89 e5             	mov    %sp,%bp
     289:	66 83 ec 0c          	sub    $0xc,%sp
    int w,ww,www;
    for( w=0;w<0xFFFF;++w){
     28d:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     294:	00 00                	add    %al,(%eax)
     296:	eb 38                	jmp    2d0 <delay+0x4c>
			for ( ww=0;ww<0xFF;++ww){
     298:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     29f:	00 00                	add    %al,(%eax)
     2a1:	eb 1d                	jmp    2c0 <delay+0x3c>
				for ( www=0;www<0x1;++www){
     2a3:	67 66 c7 45 f4 00 00 	movw   $0x0,-0xc(%di)
     2aa:	00 00                	add    %al,(%eax)
     2ac:	eb 05                	jmp    2b3 <delay+0x2f>
     2ae:	67 66 ff 45 f4       	incw   -0xc(%di)
     2b3:	67 66 83 7d f4 00    	cmpw   $0x0,-0xc(%di)
     2b9:	7e f3                	jle    2ae <delay+0x2a>
    printc(s1[-- word_index]);
}
delay(){
    int w,ww,www;
    for( w=0;w<0xFFFF;++w){
			for ( ww=0;ww<0xFF;++ww){
     2bb:	67 66 ff 45 f8       	incw   -0x8(%di)
     2c0:	67 66 81 7d f8 fe 00 	cmpw   $0xfe,-0x8(%di)
     2c7:	00 00                	add    %al,(%eax)
     2c9:	7e d8                	jle    2a3 <delay+0x1f>
void myprintf(char* s1){
    printc(s1[-- word_index]);
}
delay(){
    int w,ww,www;
    for( w=0;w<0xFFFF;++w){
     2cb:	67 66 ff 45 fc       	incw   -0x4(%di)
     2d0:	67 66 81 7d fc fe ff 	cmpw   $0xfffe,-0x4(%di)
     2d7:	00 00                	add    %al,(%eax)
     2d9:	7e bd                	jle    298 <delay+0x14>
			for ( ww=0;ww<0xFF;++ww){
				for ( www=0;www<0x1;++www){
				}
			}
		}
     2db:	66 c9                	leavew 
     2dd:	66 c3                	retw   
     2df:	90                   	nop

000002e0 <count>:
     2e0:	08 2d 00 00 00 00    	or     %ch,0x0

000002e1 <alpha>:
     2e1:	2d 00 00 00 00       	sub    $0x0,%eax

000002e2 <int_09_saved>:
     2e2:	00 00                	add    %al,(%eax)
	...

000002e6 <program_saved>:
     2e6:	70 00                	jo     2e8 <program_saved+0x2>
	...

000002ea <ds_saved>:
     2ea:	7c 00                	jl     2ec <ds_saved+0x2>
	...

000002ee <return_save>:
     2ee:	88 00                	mov    %al,(%eax)

000002f0 <esi_save>:
     2f0:	96                   	xchg   %eax,%esi
     2f1:	00 00                	add    %al,(%eax)
	...

000002f4 <temp>:
     2f4:	e8 03 b4 00 00       	call   b6fc <_end+0x5ef8>

000002f6 <kernelesp_saved>:
     2f6:	b4 00                	mov    $0x0,%ah
	...

000002fa <esp_saved_inkernel>:
     2fa:	c8 00 00 00          	enter  $0x0,$0x0

000002fe <esp_saved_in_user>:
     2fe:	f0 00 00             	lock add %al,(%eax)
	...

00000302 <ss_saved_in_user>:
     302:	2c 01                	sub    $0x1,%al
	...

00000306 <color>:
     306:	01 c2                	add    %eax,%edx

00000307 <ss_saved_fork>:
     307:	c2 01 00             	ret    $0x1
	...

0000030b <retaddr>:
     30b:	58                   	pop    %eax
     30c:	02 00                	add    (%eax),%al
	...

0000030f <Message31>:
     30f:	74 69                	je     37a <_readinput+0x9>
     311:	6d                   	insl   (%dx),%es:(%edi)
     312:	65 3a 20             	cmp    %gs:(%eax),%ah

00000315 <_sys_stack_copy>:
     315:	c8 00 00 00          	enter  $0x0,$0x0
     319:	8e d0                	mov    %eax,%ss
     31b:	60                   	pusha  
     31c:	1e                   	push   %ds
     31d:	8b 46 06             	mov    0x6(%esi),%eax
     320:	8b 56 0a             	mov    0xa(%esi),%edx
     323:	8b 4e 0e             	mov    0xe(%esi),%ecx
     326:	8c db                	mov    %ds,%ebx

00000328 <while_loop1>:
     328:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
     32e:	8e d8                	mov    %eax,%ds
     330:	67 8b 1a             	mov    (%bp,%si),%ebx
     333:	8e d9                	mov    %ecx,%ds
     335:	67 89 1a             	mov    %ebx,(%bp,%si)
     338:	83 c2 02             	add    $0x2,%edx
     33b:	eb eb                	jmp    328 <while_loop1>

0000033d <end_for_copy>:
     33d:	1f                   	pop    %ds
     33e:	61                   	popa   
     33f:	c9                   	leave  
     340:	66 5a                	pop    %dx
     342:	ff e2                	jmp    *%edx

00000344 <_clearscreen>:
     344:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     349:	66 5a                	pop    %dx
     34b:	ff e2                	jmp    *%edx

0000034d <_printchar>:
     34d:	c8 00 00 00          	enter  $0x0,$0x0
     351:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
     356:	57                   	push   %edi
     357:	66 8b 4e 06          	mov    0x6(%esi),%cx
     35b:	66 8b 7e 0a          	mov    0xa(%esi),%di
     35f:	66 8b 56 0e          	mov    0xe(%esi),%dx
     363:	88 d5                	mov    %dl,%ch
     365:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
     36c:	00 66 5a             	add    %ah,0x5a(%esi)
     36f:	ff e2                	jmp    *%edx

00000371 <_readinput>:
     371:	c8 04 00 00          	enter  $0x4,$0x0
     375:	b4 00                	mov    $0x0,%ah
     377:	cd 16                	int    $0x16
     379:	b4 00                	mov    $0x0,%ah
     37b:	66 67 89 04          	mov    %ax,(%si)
     37f:	24 66                	and    $0x66,%al
     381:	67 8b 04             	mov    (%si),%eax
     384:	24 c9                	and    $0xc9,%al
     386:	66 5a                	pop    %dx
     388:	ff e2                	jmp    *%edx

0000038a <_showchar>:
     38a:	c8 00 00 00          	enter  $0x0,$0x0
     38e:	50                   	push   %eax
     38f:	53                   	push   %ebx
     390:	8b 46 06             	mov    0x6(%esi),%eax
     393:	b4 0e                	mov    $0xe,%ah
     395:	b3 00                	mov    $0x0,%bl
     397:	cd 10                	int    $0x10
     399:	fa                   	cli    
     39a:	5b                   	pop    %ebx
     39b:	58                   	pop    %eax
     39c:	c9                   	leave  
     39d:	66 5a                	pop    %dx
     39f:	ff e2                	jmp    *%edx

000003a1 <_setPoint>:
     3a1:	c8 00 00 00          	enter  $0x0,$0x0
     3a5:	53                   	push   %ebx
     3a6:	b7 00                	mov    $0x0,%bh
     3a8:	8a 77 06             	mov    0x6(%edi),%dh
     3ab:	8a 57 0a             	mov    0xa(%edi),%dl
     3ae:	b4 02                	mov    $0x2,%ah
     3b0:	cd 10                	int    $0x10
     3b2:	5b                   	pop    %ebx
     3b3:	c9                   	leave  
     3b4:	66 5a                	pop    %dx
     3b6:	ff e2                	jmp    *%edx

000003b8 <_loadP>:
     3b8:	c8 00 00 00          	enter  $0x0,$0x0
     3bc:	60                   	pusha  
     3bd:	06                   	push   %es
     3be:	1e                   	push   %ds
     3bf:	8c c8                	mov    %cs,%eax
     3c1:	8e d8                	mov    %eax,%ds
     3c3:	8b 46 0e             	mov    0xe(%esi),%eax
     3c6:	8e c0                	mov    %eax,%es
     3c8:	b2 00                	mov    $0x0,%dl
     3ca:	8b 46 0a             	mov    0xa(%esi),%eax
     3cd:	b3 12                	mov    $0x12,%bl
     3cf:	f6 f3                	div    %bl
     3d1:	88 e1                	mov    %ah,%cl
     3d3:	30 e4                	xor    %ah,%ah
     3d5:	b3 02                	mov    $0x2,%bl
     3d7:	f6 f3                	div    %bl
     3d9:	88 e6                	mov    %ah,%dh
     3db:	88 c5                	mov    %al,%ch
     3dd:	8a 46 06             	mov    0x6(%esi),%al
     3e0:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
     3e5:	cd 13                	int    $0x13
     3e7:	1f                   	pop    %ds
     3e8:	07                   	pop    %es
     3e9:	61                   	popa   
     3ea:	c9                   	leave  
     3eb:	66 5a                	pop    %dx
     3ed:	ff e2                	jmp    *%edx

000003ef <_RunProgress>:
     3ef:	c8 00 00 00          	enter  $0x0,$0x0
     3f3:	8c c8                	mov    %cs,%eax
     3f5:	8e d8                	mov    %eax,%ds
     3f7:	8e c0                	mov    %eax,%es
     3f9:	8b 5e 06             	mov    0x6(%esi),%ebx
     3fc:	c7 06 e6 02 00 01    	movl   $0x10002e6,(%esi)
     402:	89 1e                	mov    %ebx,(%esi)
     404:	e8 02 66 89 26       	call   26896a0b <_end+0x26891207>
     409:	fa                   	cli    
     40a:	02 26                	add    (%esi),%ah
     40c:	ff 1e                	lcall  *(%esi)
     40e:	e6 02                	out    %al,$0x2

00000410 <S>:
     410:	8c c8                	mov    %cs,%eax
     412:	8e d8                	mov    %eax,%ds
     414:	8e c0                	mov    %eax,%es
     416:	8e d0                	mov    %eax,%ss
     418:	66 8b 26             	mov    (%esi),%sp
     41b:	fa                   	cli    
     41c:	02 b4 00 cd 16 c9 66 	add    0x66c916cd(%eax,%eax,1),%dh
     423:	5a                   	pop    %edx
     424:	ff e2                	jmp    *%edx

00000426 <_Schedule_once>:
     426:	c8 00 00 00          	enter  $0x0,$0x0
     42a:	cd 41                	int    $0x41
     42c:	c9                   	leave  
     42d:	66 5a                	pop    %dx
     42f:	ff e2                	jmp    *%edx

00000431 <_fork_user>:
     431:	c8 00 00 00          	enter  $0x0,$0x0
     435:	cd 39                	int    $0x39
     437:	c9                   	leave  
     438:	66 5a                	pop    %dx
     43a:	ff e2                	jmp    *%edx

0000043c <_Schedule>:
     43c:	c8 00 00 00          	enter  $0x0,$0x0
     440:	16                   	push   %ss
     441:	cd 23                	int    $0x23
     443:	17                   	pop    %ss
     444:	c9                   	leave  
     445:	66 5a                	pop    %dx
     447:	ff e2                	jmp    *%edx

00000449 <_wait>:
     449:	c8 00 00 00          	enter  $0x0,$0x0
     44d:	cd 3b                	int    $0x3b
     44f:	c9                   	leave  
     450:	66 5a                	pop    %dx
     452:	ff e2                	jmp    *%edx

00000454 <_exit>:
     454:	c8 00 00 00          	enter  $0x0,$0x0
     458:	66 67 8b 45 06       	mov    0x6(%di),%ax
     45d:	66 50                	push   %ax
     45f:	cd 2a                	int    $0x2a
     461:	c9                   	leave  
     462:	66 5a                	pop    %dx
     464:	ff e2                	jmp    *%edx

00000466 <_GetSem>:
     466:	c8 00 00 00          	enter  $0x0,$0x0
     46a:	66 67 8b 45 06       	mov    0x6(%di),%ax
     46f:	66 50                	push   %ax
     471:	cd 3c                	int    $0x3c
     473:	c9                   	leave  
     474:	66 5a                	pop    %dx
     476:	ff e2                	jmp    *%edx

00000478 <_FreeSem>:
     478:	c8 00 00 00          	enter  $0x0,$0x0
     47c:	66 67 8b 45 06       	mov    0x6(%di),%ax
     481:	66 50                	push   %ax
     483:	cd 3d                	int    $0x3d
     485:	c9                   	leave  
     486:	66 5a                	pop    %dx
     488:	ff e2                	jmp    *%edx

0000048a <_Pr>:
     48a:	c8 00 00 00          	enter  $0x0,$0x0
     48e:	66 67 8b 45 06       	mov    0x6(%di),%ax
     493:	66 50                	push   %ax
     495:	cd 3e                	int    $0x3e
     497:	c9                   	leave  
     498:	66 5a                	pop    %dx
     49a:	ff e2                	jmp    *%edx

0000049c <_Vr>:
     49c:	c8 00 00 00          	enter  $0x0,$0x0
     4a0:	66 67 8b 45 06       	mov    0x6(%di),%ax
     4a5:	66 50                	push   %ax
     4a7:	cd 3f                	int    $0x3f
     4a9:	c9                   	leave  
     4aa:	66 5a                	pop    %dx
     4ac:	ff e2                	jmp    *%edx

000004ae <_Schedule_PV>:
     4ae:	c8 00 00 00          	enter  $0x0,$0x0
     4b2:	cd 23                	int    $0x23
     4b4:	c9                   	leave  
     4b5:	66 5a                	pop    %dx
     4b7:	ff e2                	jmp    *%edx

000004b9 <_SetINT20h>:
     4b9:	fa                   	cli    
     4ba:	1e                   	push   %ds
     4bb:	06                   	push   %es
     4bc:	8c c8                	mov    %cs,%eax
     4be:	8e d8                	mov    %eax,%ds
     4c0:	8e c0                	mov    %eax,%es
     4c2:	8c 16                	mov    %ss,(%esi)
     4c4:	02 03                	add    (%ebx),%al
     4c6:	8e d0                	mov    %eax,%ss
     4c8:	66 89 26             	mov    %sp,(%esi)
     4cb:	fe 02                	incb   (%edx)
     4cd:	66 8b 26             	mov    (%esi),%sp
     4d0:	fa                   	cli    
     4d1:	02 53 51             	add    0x51(%ebx),%dl
     4d4:	52                   	push   %edx
     4d5:	b4 01                	mov    $0x1,%ah
     4d7:	cd 16                	int    $0x16
     4d9:	5a                   	pop    %edx
     4da:	59                   	pop    %ecx
     4db:	5b                   	pop    %ebx
     4dc:	8e 16                	mov    (%esi),%ss
     4de:	02 03                	add    (%ebx),%al
     4e0:	66 8b 26             	mov    (%esi),%sp
     4e3:	fe 02                	incb   (%edx)
     4e5:	07                   	pop    %es
     4e6:	1f                   	pop    %ds
     4e7:	74 0a                	je     4f3 <going_on>
     4e9:	50                   	push   %eax
     4ea:	b4 00                	mov    $0x0,%ah
     4ec:	cd 16                	int    $0x16
     4ee:	58                   	pop    %eax
     4ef:	fb                   	sti    
     4f0:	cd 38                	int    $0x38
     4f2:	cf                   	iret   

000004f3 <going_on>:
     4f3:	fb                   	sti    
     4f4:	cf                   	iret   

000004f5 <_SetINT08h_turn_around>:
     4f5:	e8 39 06 fa 6a       	call   6afa0b33 <_end+0x6af9b32f>
     4fa:	00 e8                	add    %ch,%al
     4fc:	b0 12                	mov    $0x12,%al
     4fe:	e8 a4 06 b0 20       	call   20b00ba7 <_end+0x20afb3a3>
     503:	e6 20                	out    %al,$0x20
     505:	e6 a0                	out    %al,$0xa0
     507:	fb                   	sti    
     508:	cf                   	iret   

00000509 <_SetINT08h>:
     509:	60                   	pusha  
     50a:	0f a8                	push   %gs
     50c:	1e                   	push   %ds
     50d:	06                   	push   %es
     50e:	16                   	push   %ss
     50f:	8c c8                	mov    %cs,%eax
     511:	8e c0                	mov    %eax,%es
     513:	8e d8                	mov    %eax,%ds
     515:	8e d0                	mov    %eax,%ss
     517:	fe 0e                	decb   (%esi)
     519:	e0 02                	loopne 51d <notc>
     51b:	75 4f                	jne    56c <end>

0000051d <notc>:
     51d:	80 3e e1             	cmpb   $0xe1,(%esi)
     520:	02 2d 75 07 c6 06    	add    0x6c60775,%ch
     526:	e1 02                	loope  52a <notc+0xd>
     528:	5c                   	pop    %esp
     529:	eb 2a                	jmp    555 <show>

0000052b <changleft>:
     52b:	80 3e e1             	cmpb   $0xe1,(%esi)
     52e:	02 5c 75 07          	add    0x7(%ebp,%esi,2),%bl
     532:	c6 06 e1             	movb   $0xe1,(%esi)
     535:	02 7c eb 1c          	add    0x1c(%ebx,%ebp,8),%bh

00000539 <changright>:
     539:	80 3e e1             	cmpb   $0xe1,(%esi)
     53c:	02 7c 75 07          	add    0x7(%ebp,%esi,2),%bh
     540:	c6 06 e1             	movb   $0xe1,(%esi)
     543:	02 2f                	add    (%edi),%ch
     545:	eb 0e                	jmp    555 <show>

00000547 <changheng>:
     547:	80 3e e1             	cmpb   $0xe1,(%esi)
     54a:	02 2f                	add    (%edi),%ch
     54c:	75 cf                	jne    51d <notc>
     54e:	c6 06 e1             	movb   $0xe1,(%esi)
     551:	02 2d eb 00 b9 00    	add    0xb900eb,%ch

00000555 <show>:
     555:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     55a:	b4 09                	mov    $0x9,%ah
     55c:	8a 26                	mov    (%esi),%ah
     55e:	06                   	push   %es
     55f:	03 a0 e1 02 65 a3    	add    -0x5c9afd1f(%eax),%esp
     565:	8e 00                	mov    (%eax),%es
     567:	c6 06 e0             	movb   $0xe0,(%esi)
     56a:	02 08                	add    (%eax),%cl

0000056c <end>:
     56c:	b0 20                	mov    $0x20,%al
     56e:	e6 20                	out    %al,$0x20
     570:	e6 a0                	out    %al,$0xa0
     572:	17                   	pop    %ss
     573:	07                   	pop    %es
     574:	1f                   	pop    %ds
     575:	0f a9                	pop    %gs
     577:	61                   	popa   
     578:	fb                   	sti    
     579:	cf                   	iret   

0000057a <_SetINT09h>:
     57a:	fa                   	cli    
     57b:	1e                   	push   %ds
     57c:	06                   	push   %es
     57d:	8c c8                	mov    %cs,%eax
     57f:	8e d8                	mov    %eax,%ds
     581:	8e c0                	mov    %eax,%es
     583:	8e d0                	mov    %eax,%ss
     585:	8c 16                	mov    %ss,(%esi)
     587:	02 03                	add    (%ebx),%al
     589:	8e d0                	mov    %eax,%ss
     58b:	66 89 26             	mov    %sp,(%esi)
     58e:	fe 02                	incb   (%edx)
     590:	66 8b 26             	mov    (%esi),%sp
     593:	fa                   	cli    
     594:	02 60 b9             	add    -0x47(%eax),%ah
     597:	00 b8 8e e9 8a 26    	add    %bh,0x268ae98e(%eax)
     59d:	06                   	push   %es
     59e:	03 b0 4f 65 a3 78    	add    0x78a3654f(%eax),%esi
     5a4:	00 b0 55 65 a3 7a    	add    %dh,0x7aa36555(%eax)
     5aa:	00 b0 43 65 a3 7c    	add    %dh,0x7ca36543(%eax)
     5b0:	00 b0 48 65 a3 7e    	add    %dh,0x7ea36548(%eax)
     5b6:	00 b0 53 65 a3 80    	add    %dh,-0x7f5c9aad(%eax)
     5bc:	00 b0 21 65 a3 82    	add    %dh,-0x7d5c9adf(%eax)
     5c2:	00 b0 4f 65 a3 84    	add    %dh,-0x7b5c9ab1(%eax)
     5c8:	00 b0 55 65 a3 86    	add    %dh,-0x795c9aab(%eax)
     5ce:	00 b0 43 65 a3 88    	add    %dh,-0x775c9abd(%eax)
     5d4:	00 b0 48 65 a3 8a    	add    %dh,-0x755c9ab8(%eax)
     5da:	00 b0 21 65 a3 8c    	add    %dh,-0x735c9adf(%eax)
     5e0:	00 61 80             	add    %ah,-0x80(%ecx)
     5e3:	fc                   	cld    
     5e4:	06                   	push   %es
     5e5:	75 06                	jne    5ed <cont>
     5e7:	b4 01                	mov    $0x1,%ah
     5e9:	88 26                	mov    %ah,(%esi)
     5eb:	06                   	push   %es
     5ec:	03 fe                	add    %esi,%edi

000005ed <cont>:
     5ed:	fe 06                	incb   (%esi)
     5ef:	06                   	push   %es
     5f0:	03 8c c8 8e c0 fb 9c 	add    -0x63043f72(%eax,%ecx,8),%ecx
     5f7:	26 ff 1e             	lcall  *%es:(%esi)
     5fa:	e2 02                	loop   5fe <cont+0x11>
     5fc:	8e 16                	mov    (%esi),%ss
     5fe:	02 03                	add    (%ebx),%al
     600:	66 8b 26             	mov    (%esi),%sp
     603:	fe 02                	incb   (%edx)
     605:	07                   	pop    %es
     606:	1f                   	pop    %ds
     607:	cf                   	iret   

00000608 <_SetINT33h>:
     608:	fa                   	cli    
     609:	c8 00 00 00          	enter  $0x0,$0x0
     60d:	60                   	pusha  
     60e:	1e                   	push   %ds
     60f:	0f a8                	push   %gs
     611:	06                   	push   %es
     612:	8c c8                	mov    %cs,%eax
     614:	8e c0                	mov    %eax,%es
     616:	8e d8                	mov    %eax,%ds
     618:	8c 16                	mov    %ss,(%esi)
     61a:	02 03                	add    (%ebx),%al
     61c:	8e d0                	mov    %eax,%ss
     61e:	66 89 26             	mov    %sp,(%esi)
     621:	fe 02                	incb   (%edx)
     623:	66 8b 26             	mov    (%esi),%sp
     626:	fa                   	cli    
     627:	02 6a 00             	add    0x0(%edx),%ch
     62a:	e8 06 08 8e 16       	call   168e0e35 <_end+0x168db631>
     62f:	02 03                	add    (%ebx),%al
     631:	66 8b 26             	mov    (%esi),%sp
     634:	fe 02                	incb   (%edx)
     636:	07                   	pop    %es
     637:	0f a9                	pop    %gs
     639:	1f                   	pop    %ds
     63a:	61                   	popa   
     63b:	fb                   	sti    
     63c:	c9                   	leave  
     63d:	cf                   	iret   

0000063e <_SetINT34h>:
     63e:	fa                   	cli    
     63f:	c8 00 00 00          	enter  $0x0,$0x0
     643:	60                   	pusha  
     644:	1e                   	push   %ds
     645:	0f a8                	push   %gs
     647:	06                   	push   %es
     648:	8c c8                	mov    %cs,%eax
     64a:	8e c0                	mov    %eax,%es
     64c:	8e d8                	mov    %eax,%ds
     64e:	8c 16                	mov    %ss,(%esi)
     650:	02 03                	add    (%ebx),%al
     652:	8e d0                	mov    %eax,%ss
     654:	66 89 26             	mov    %sp,(%esi)
     657:	fe 02                	incb   (%edx)
     659:	66 8b 26             	mov    (%esi),%sp
     65c:	fa                   	cli    
     65d:	02 6a 00             	add    0x0(%edx),%ch
     660:	e8 80 08 8e 16       	call   168e0ee5 <_end+0x168db6e1>
     665:	02 03                	add    (%ebx),%al
     667:	66 8b 26             	mov    (%esi),%sp
     66a:	fe 02                	incb   (%edx)
     66c:	07                   	pop    %es
     66d:	0f a9                	pop    %gs
     66f:	1f                   	pop    %ds
     670:	61                   	popa   
     671:	fb                   	sti    
     672:	c9                   	leave  
     673:	cf                   	iret   

00000674 <_SetINT35h>:
     674:	60                   	pusha  
     675:	1e                   	push   %ds
     676:	0f a8                	push   %gs
     678:	06                   	push   %es
     679:	8c c8                	mov    %cs,%eax
     67b:	8e c0                	mov    %eax,%es
     67d:	8e d8                	mov    %eax,%ds
     67f:	8c 16                	mov    %ss,(%esi)
     681:	02 03                	add    (%ebx),%al
     683:	8e d0                	mov    %eax,%ss
     685:	66 89 26             	mov    %sp,(%esi)
     688:	fe 02                	incb   (%edx)
     68a:	66 8b 26             	mov    (%esi),%sp
     68d:	fa                   	cli    
     68e:	02 6a 00             	add    0x0(%edx),%ch
     691:	e8 2e 09 8e 16       	call   168e0fc4 <_end+0x168db7c0>
     696:	02 03                	add    (%ebx),%al
     698:	66 8b 26             	mov    (%esi),%sp
     69b:	fe 02                	incb   (%edx)
     69d:	07                   	pop    %es
     69e:	0f a9                	pop    %gs
     6a0:	1f                   	pop    %ds
     6a1:	61                   	popa   
     6a2:	fb                   	sti    
     6a3:	cf                   	iret   

000006a4 <_SetINT36h>:
     6a4:	60                   	pusha  
     6a5:	1e                   	push   %ds
     6a6:	0f a8                	push   %gs
     6a8:	06                   	push   %es
     6a9:	8c c8                	mov    %cs,%eax
     6ab:	8e c0                	mov    %eax,%es
     6ad:	8e d8                	mov    %eax,%ds
     6af:	8c 16                	mov    %ss,(%esi)
     6b1:	02 03                	add    (%ebx),%al
     6b3:	8e d0                	mov    %eax,%ss
     6b5:	66 89 26             	mov    %sp,(%esi)
     6b8:	fe 02                	incb   (%edx)
     6ba:	66 8b 26             	mov    (%esi),%sp
     6bd:	fa                   	cli    
     6be:	02 6a 00             	add    0x0(%edx),%ch
     6c1:	e8 84 09 8e 16       	call   168e104a <_end+0x168db846>
     6c6:	02 03                	add    (%ebx),%al
     6c8:	66 8b 26             	mov    (%esi),%sp
     6cb:	fe 02                	incb   (%edx)
     6cd:	07                   	pop    %es
     6ce:	0f a9                	pop    %gs
     6d0:	1f                   	pop    %ds
     6d1:	61                   	popa   
     6d2:	fb                   	sti    
     6d3:	cf                   	iret   

000006d4 <_SetINT21h>:
     6d4:	c8 00 00 00          	enter  $0x0,$0x0
     6d8:	60                   	pusha  
     6d9:	1e                   	push   %ds
     6da:	0f a8                	push   %gs
     6dc:	06                   	push   %es
     6dd:	8c c8                	mov    %cs,%eax
     6df:	8e c0                	mov    %eax,%es
     6e1:	8e d8                	mov    %eax,%ds
     6e3:	8b 46 08             	mov    0x8(%esi),%eax
     6e6:	80 fc 00             	cmp    $0x0,%ah
     6e9:	74 16                	je     701 <fn0>
     6eb:	80 fc 01             	cmp    $0x1,%ah
     6ee:	74 21                	je     711 <fn1>
     6f0:	80 fc 02             	cmp    $0x2,%ah
     6f3:	74 3d                	je     732 <fn2>
     6f5:	80 fc 03             	cmp    $0x3,%ah
     6f8:	74 5f                	je     759 <fn3>
     6fa:	07                   	pop    %es
     6fb:	0f a9                	pop    %gs
     6fd:	1f                   	pop    %ds
     6fe:	61                   	popa   
     6ff:	c9                   	leave  
     700:	cf                   	iret   

00000701 <fn0>:
     701:	8b 46 0a             	mov    0xa(%esi),%eax
     704:	b4 0e                	mov    $0xe,%ah
     706:	b3 00                	mov    $0x0,%bl
     708:	cd 10                	int    $0x10
     70a:	07                   	pop    %es
     70b:	0f a9                	pop    %gs
     70d:	1f                   	pop    %ds
     70e:	61                   	popa   
     70f:	c9                   	leave  
     710:	cf                   	iret   

00000711 <fn1>:
     711:	66 83 ec 04          	sub    $0x4,%sp
     715:	b4 00                	mov    $0x0,%ah
     717:	cd 16                	int    $0x16
     719:	b4 00                	mov    $0x0,%ah
     71b:	66 67 89 04          	mov    %ax,(%si)
     71f:	24 66                	and    $0x66,%al
     721:	67 8b 04             	mov    (%si),%eax
     724:	24 66                	and    $0x66,%al
     726:	83 c4 04             	add    $0x4,%esp
     729:	8e e0                	mov    %eax,%fs
     72b:	07                   	pop    %es
     72c:	0f a9                	pop    %gs
     72e:	1f                   	pop    %ds
     72f:	61                   	popa   
     730:	c9                   	leave  
     731:	cf                   	iret   

00000732 <fn2>:
     732:	66 83 ec 04          	sub    $0x4,%sp
     736:	b4 00                	mov    $0x0,%ah
     738:	cd 16                	int    $0x16
     73a:	b4 00                	mov    $0x0,%ah
     73c:	66 67 89 04          	mov    %ax,(%si)
     740:	24 66                	and    $0x66,%al
     742:	67 8b 04             	mov    (%si),%eax
     745:	24 b4                	and    $0xb4,%al
     747:	0e                   	push   %cs
     748:	b3 00                	mov    $0x0,%bl
     74a:	cd 10                	int    $0x10
     74c:	66 83 c4 04          	add    $0x4,%sp
     750:	8e e0                	mov    %eax,%fs
     752:	07                   	pop    %es
     753:	0f a9                	pop    %gs
     755:	1f                   	pop    %ds
     756:	61                   	popa   
     757:	c9                   	leave  
     758:	cf                   	iret   

00000759 <fn3>:
     759:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     75e:	07                   	pop    %es
     75f:	0f a9                	pop    %gs
     761:	1f                   	pop    %ds
     762:	61                   	popa   
     763:	c9                   	leave  
     764:	cf                   	iret   

00000765 <_SetINT37h>:
     765:	fa                   	cli    
     766:	e8 90 04 cf fa       	call   facf0bfb <_end+0xfaceb3f7>

0000076a <_SetINT38h>:
     76a:	fa                   	cli    
     76b:	50                   	push   %eax
     76c:	1e                   	push   %ds
     76d:	8c c8                	mov    %cs,%eax
     76f:	8e d8                	mov    %eax,%ds
     771:	6a 00                	push   $0x0
     773:	e8 43 11 1f 58       	call   581f18bb <_end+0x581ec0b7>
     778:	fb                   	sti    
     779:	cf                   	iret   

0000077a <_SetINT39h>:
     77a:	fa                   	cli    
     77b:	c8 00 00 00          	enter  $0x0,$0x0
     77f:	1e                   	push   %ds
     780:	6a 00                	push   $0x0
     782:	8c c8                	mov    %cs,%eax
     784:	8e d8                	mov    %eax,%ds
     786:	e8 2c 13 1f c9       	call   c91f1ab7 <_end+0xc91ec2b3>
     78b:	fb                   	sti    
     78c:	cf                   	iret   

0000078d <_SetINT41h>:
     78d:	fa                   	cli    
     78e:	e8 a0 03 e8 11       	call   11e80b33 <_end+0x11e7b32f>
     793:	04 b0                	add    $0xb0,%al
     795:	20 e6                	and    %ah,%dh
     797:	20 e6                	and    %ah,%dh
     799:	a0 fb cf fa c8       	mov    0xc8facffb,%al

0000079c <_SetINT2Ah>:
     79c:	fa                   	cli    
     79d:	c8 00 00 00          	enter  $0x0,$0x0
     7a1:	1e                   	push   %ds
     7a2:	66 67 8b 45 08       	mov    0x8(%di),%ax
     7a7:	66 50                	push   %ax
     7a9:	6a 00                	push   $0x0
     7ab:	8c c8                	mov    %cs,%eax
     7ad:	8e d8                	mov    %eax,%ds
     7af:	e8 98 15 58 1f       	call   1f581d4c <_end+0x1f57c548>
     7b4:	c9                   	leave  
     7b5:	fb                   	sti    
     7b6:	cf                   	iret   

000007b7 <_SetINT3Bh>:
     7b7:	fa                   	cli    
     7b8:	c8 00 00 00          	enter  $0x0,$0x0
     7bc:	1e                   	push   %ds
     7bd:	6a 00                	push   $0x0
     7bf:	8c c8                	mov    %cs,%eax
     7c1:	8e d8                	mov    %eax,%ds
     7c3:	e8 51 16 1f c9       	call   c91f1e19 <_end+0xc91ec615>
     7c8:	fb                   	sti    
     7c9:	cf                   	iret   

000007ca <_SetINT3Ch>:
     7ca:	fa                   	cli    
     7cb:	c8 00 00 00          	enter  $0x0,$0x0
     7cf:	1e                   	push   %ds
     7d0:	66 67 8b 45 08       	mov    0x8(%di),%ax
     7d5:	66 50                	push   %ax
     7d7:	6a 00                	push   $0x0
     7d9:	8c c8                	mov    %cs,%eax
     7db:	8e d8                	mov    %eax,%ds
     7dd:	e8 8c 1a 66 83       	call   8366226e <_end+0x8365ca6a>
     7e2:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     7e5:	c9                   	leave  
     7e6:	fb                   	sti    
     7e7:	cf                   	iret   

000007e8 <_SetINT3Dh>:
     7e8:	fa                   	cli    
     7e9:	c8 00 00 00          	enter  $0x0,$0x0
     7ed:	1e                   	push   %ds
     7ee:	66 67 8b 45 08       	mov    0x8(%di),%ax
     7f3:	66 50                	push   %ax
     7f5:	6a 00                	push   $0x0
     7f7:	8c c8                	mov    %cs,%eax
     7f9:	8e d8                	mov    %eax,%ds
     7fb:	e8 46 1b 66 83       	call   83662346 <_end+0x8365cb42>
     800:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     803:	c9                   	leave  
     804:	fb                   	sti    
     805:	cf                   	iret   

00000806 <_SetINT3Eh>:
     806:	c8 00 00 00          	enter  $0x0,$0x0
     80a:	1e                   	push   %ds
     80b:	66 67 8b 45 08       	mov    0x8(%di),%ax
     810:	66 50                	push   %ax
     812:	6a 00                	push   $0x0
     814:	8c c8                	mov    %cs,%eax
     816:	8e d8                	mov    %eax,%ds
     818:	e8 63 1b 66 83       	call   83662380 <_end+0x8365cb7c>
     81d:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     820:	c9                   	leave  
     821:	cf                   	iret   

00000822 <_SetINT3Fh>:
     822:	c8 00 00 00          	enter  $0x0,$0x0
     826:	1e                   	push   %ds
     827:	66 67 8b 45 08       	mov    0x8(%di),%ax
     82c:	66 50                	push   %ax
     82e:	6a 00                	push   $0x0
     830:	8c c8                	mov    %cs,%eax
     832:	8e d8                	mov    %eax,%ds
     834:	e8 93 1c 66 83       	call   836624cc <_end+0x8365ccc8>
     839:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     83c:	c9                   	leave  
     83d:	cf                   	iret   

0000083e <_initialInt>:
     83e:	c8 00 00 00          	enter  $0x0,$0x0
     842:	60                   	pusha  
     843:	06                   	push   %es
     844:	1e                   	push   %ds
     845:	8c c8                	mov    %cs,%eax
     847:	8e d8                	mov    %eax,%ds
     849:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     84e:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
     853:	00 f7                	add    %dh,%bh
     855:	e3 89                	jecxz  7e0 <_SetINT3Ch+0x16>
     857:	c7                   	(bad)  
     858:	b8 b9 04 26 89       	mov    $0x892604b9,%eax
     85d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     862:	45                   	inc    %ebp
     863:	02 1f                	add    (%edi),%bl
     865:	07                   	pop    %es
     866:	61                   	popa   
     867:	60                   	pusha  
     868:	06                   	push   %es
     869:	1e                   	push   %ds
     86a:	8c c8                	mov    %cs,%eax
     86c:	8e d8                	mov    %eax,%ds
     86e:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     873:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
     878:	00 f7                	add    %dh,%bh
     87a:	e3 89                	jecxz  805 <_SetINT3Dh+0x1d>
     87c:	c7                   	(bad)  
     87d:	b8 08 06 26 89       	mov    $0x89260608,%eax
     882:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     887:	45                   	inc    %ebp
     888:	02 1f                	add    (%edi),%bl
     88a:	07                   	pop    %es
     88b:	61                   	popa   
     88c:	60                   	pusha  
     88d:	06                   	push   %es
     88e:	1e                   	push   %ds
     88f:	8c c8                	mov    %cs,%eax
     891:	8e d8                	mov    %eax,%ds
     893:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     898:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
     89d:	00 f7                	add    %dh,%bh
     89f:	e3 89                	jecxz  82a <_SetINT3Fh+0x8>
     8a1:	c7                   	(bad)  
     8a2:	b8 3e 06 26 89       	mov    $0x8926063e,%eax
     8a7:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8ac:	45                   	inc    %ebp
     8ad:	02 1f                	add    (%edi),%bl
     8af:	07                   	pop    %es
     8b0:	61                   	popa   
     8b1:	60                   	pusha  
     8b2:	06                   	push   %es
     8b3:	1e                   	push   %ds
     8b4:	8c c8                	mov    %cs,%eax
     8b6:	8e d8                	mov    %eax,%ds
     8b8:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8bd:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
     8c2:	00 f7                	add    %dh,%bh
     8c4:	e3 89                	jecxz  84f <_initialInt+0x11>
     8c6:	c7                   	(bad)  
     8c7:	b8 74 06 26 89       	mov    $0x89260674,%eax
     8cc:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8d1:	45                   	inc    %ebp
     8d2:	02 1f                	add    (%edi),%bl
     8d4:	07                   	pop    %es
     8d5:	61                   	popa   
     8d6:	60                   	pusha  
     8d7:	06                   	push   %es
     8d8:	1e                   	push   %ds
     8d9:	8c c8                	mov    %cs,%eax
     8db:	8e d8                	mov    %eax,%ds
     8dd:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8e2:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
     8e7:	00 f7                	add    %dh,%bh
     8e9:	e3 89                	jecxz  874 <_initialInt+0x36>
     8eb:	c7                   	(bad)  
     8ec:	b8 a4 06 26 89       	mov    $0x892606a4,%eax
     8f1:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8f6:	45                   	inc    %ebp
     8f7:	02 1f                	add    (%edi),%bl
     8f9:	07                   	pop    %es
     8fa:	61                   	popa   
     8fb:	60                   	pusha  
     8fc:	06                   	push   %es
     8fd:	1e                   	push   %ds
     8fe:	8c c8                	mov    %cs,%eax
     900:	8e d8                	mov    %eax,%ds
     902:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     907:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
     90c:	00 f7                	add    %dh,%bh
     90e:	e3 89                	jecxz  899 <_initialInt+0x5b>
     910:	c7                   	(bad)  
     911:	b8 d4 06 26 89       	mov    $0x892606d4,%eax
     916:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     91b:	45                   	inc    %ebp
     91c:	02 1f                	add    (%edi),%bl
     91e:	07                   	pop    %es
     91f:	61                   	popa   
     920:	60                   	pusha  
     921:	06                   	push   %es
     922:	1e                   	push   %ds
     923:	8c c8                	mov    %cs,%eax
     925:	8e d8                	mov    %eax,%ds
     927:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     92c:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
     931:	00 f7                	add    %dh,%bh
     933:	e3 89                	jecxz  8be <_initialInt+0x80>
     935:	c7                   	(bad)  
     936:	b8 65 07 26 89       	mov    $0x89260765,%eax
     93b:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     940:	45                   	inc    %ebp
     941:	02 1f                	add    (%edi),%bl
     943:	07                   	pop    %es
     944:	61                   	popa   
     945:	60                   	pusha  
     946:	06                   	push   %es
     947:	1e                   	push   %ds
     948:	8c c8                	mov    %cs,%eax
     94a:	8e d8                	mov    %eax,%ds
     94c:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     951:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
     956:	00 f7                	add    %dh,%bh
     958:	e3 89                	jecxz  8e3 <_initialInt+0xa5>
     95a:	c7                   	(bad)  
     95b:	b8 6a 07 26 89       	mov    $0x8926076a,%eax
     960:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     965:	45                   	inc    %ebp
     966:	02 1f                	add    (%edi),%bl
     968:	07                   	pop    %es
     969:	61                   	popa   
     96a:	60                   	pusha  
     96b:	06                   	push   %es
     96c:	1e                   	push   %ds
     96d:	8c c8                	mov    %cs,%eax
     96f:	8e d8                	mov    %eax,%ds
     971:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     976:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
     97b:	00 f7                	add    %dh,%bh
     97d:	e3 89                	jecxz  908 <_initialInt+0xca>
     97f:	c7                   	(bad)  
     980:	b8 7a 07 26 89       	mov    $0x8926077a,%eax
     985:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     98a:	45                   	inc    %ebp
     98b:	02 1f                	add    (%edi),%bl
     98d:	07                   	pop    %es
     98e:	61                   	popa   
     98f:	60                   	pusha  
     990:	06                   	push   %es
     991:	1e                   	push   %ds
     992:	8c c8                	mov    %cs,%eax
     994:	8e d8                	mov    %eax,%ds
     996:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     99b:	b8 2a 00 bb 04       	mov    $0x4bb002a,%eax
     9a0:	00 f7                	add    %dh,%bh
     9a2:	e3 89                	jecxz  92d <_initialInt+0xef>
     9a4:	c7                   	(bad)  
     9a5:	b8 9c 07 26 89       	mov    $0x8926079c,%eax
     9aa:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9af:	45                   	inc    %ebp
     9b0:	02 1f                	add    (%edi),%bl
     9b2:	07                   	pop    %es
     9b3:	61                   	popa   
     9b4:	60                   	pusha  
     9b5:	06                   	push   %es
     9b6:	1e                   	push   %ds
     9b7:	8c c8                	mov    %cs,%eax
     9b9:	8e d8                	mov    %eax,%ds
     9bb:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     9c0:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
     9c5:	00 f7                	add    %dh,%bh
     9c7:	e3 89                	jecxz  952 <_initialInt+0x114>
     9c9:	c7                   	(bad)  
     9ca:	b8 8d 07 26 89       	mov    $0x8926078d,%eax
     9cf:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9d4:	45                   	inc    %ebp
     9d5:	02 1f                	add    (%edi),%bl
     9d7:	07                   	pop    %es
     9d8:	61                   	popa   
     9d9:	60                   	pusha  
     9da:	06                   	push   %es
     9db:	1e                   	push   %ds
     9dc:	8c c8                	mov    %cs,%eax
     9de:	8e d8                	mov    %eax,%ds
     9e0:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     9e5:	b8 23 00 bb 04       	mov    $0x4bb0023,%eax
     9ea:	00 f7                	add    %dh,%bh
     9ec:	e3 89                	jecxz  977 <_initialInt+0x139>
     9ee:	c7                   	(bad)  
     9ef:	b8 f5 04 26 89       	mov    $0x892604f5,%eax
     9f4:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9f9:	45                   	inc    %ebp
     9fa:	02 1f                	add    (%edi),%bl
     9fc:	07                   	pop    %es
     9fd:	61                   	popa   
     9fe:	60                   	pusha  
     9ff:	06                   	push   %es
     a00:	1e                   	push   %ds
     a01:	8c c8                	mov    %cs,%eax
     a03:	8e d8                	mov    %eax,%ds
     a05:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a0a:	b8 3b 00 bb 04       	mov    $0x4bb003b,%eax
     a0f:	00 f7                	add    %dh,%bh
     a11:	e3 89                	jecxz  99c <_initialInt+0x15e>
     a13:	c7                   	(bad)  
     a14:	b8 b7 07 26 89       	mov    $0x892607b7,%eax
     a19:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a1e:	45                   	inc    %ebp
     a1f:	02 1f                	add    (%edi),%bl
     a21:	07                   	pop    %es
     a22:	61                   	popa   
     a23:	60                   	pusha  
     a24:	06                   	push   %es
     a25:	1e                   	push   %ds
     a26:	8c c8                	mov    %cs,%eax
     a28:	8e d8                	mov    %eax,%ds
     a2a:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a2f:	b8 3c 00 bb 04       	mov    $0x4bb003c,%eax
     a34:	00 f7                	add    %dh,%bh
     a36:	e3 89                	jecxz  9c1 <_initialInt+0x183>
     a38:	c7                   	(bad)  
     a39:	b8 ca 07 26 89       	mov    $0x892607ca,%eax
     a3e:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a43:	45                   	inc    %ebp
     a44:	02 1f                	add    (%edi),%bl
     a46:	07                   	pop    %es
     a47:	61                   	popa   
     a48:	60                   	pusha  
     a49:	06                   	push   %es
     a4a:	1e                   	push   %ds
     a4b:	8c c8                	mov    %cs,%eax
     a4d:	8e d8                	mov    %eax,%ds
     a4f:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a54:	b8 3d 00 bb 04       	mov    $0x4bb003d,%eax
     a59:	00 f7                	add    %dh,%bh
     a5b:	e3 89                	jecxz  9e6 <_initialInt+0x1a8>
     a5d:	c7                   	(bad)  
     a5e:	b8 e8 07 26 89       	mov    $0x892607e8,%eax
     a63:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a68:	45                   	inc    %ebp
     a69:	02 1f                	add    (%edi),%bl
     a6b:	07                   	pop    %es
     a6c:	61                   	popa   
     a6d:	60                   	pusha  
     a6e:	06                   	push   %es
     a6f:	1e                   	push   %ds
     a70:	8c c8                	mov    %cs,%eax
     a72:	8e d8                	mov    %eax,%ds
     a74:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a79:	b8 3e 00 bb 04       	mov    $0x4bb003e,%eax
     a7e:	00 f7                	add    %dh,%bh
     a80:	e3 89                	jecxz  a0b <_initialInt+0x1cd>
     a82:	c7                   	(bad)  
     a83:	b8 06 08 26 89       	mov    $0x89260806,%eax
     a88:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a8d:	45                   	inc    %ebp
     a8e:	02 1f                	add    (%edi),%bl
     a90:	07                   	pop    %es
     a91:	61                   	popa   
     a92:	60                   	pusha  
     a93:	06                   	push   %es
     a94:	1e                   	push   %ds
     a95:	8c c8                	mov    %cs,%eax
     a97:	8e d8                	mov    %eax,%ds
     a99:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a9e:	b8 3f 00 bb 04       	mov    $0x4bb003f,%eax
     aa3:	00 f7                	add    %dh,%bh
     aa5:	e3 89                	jecxz  a30 <_initialInt+0x1f2>
     aa7:	c7                   	(bad)  
     aa8:	b8 22 08 26 89       	mov    $0x89260822,%eax
     aad:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     ab2:	45                   	inc    %ebp
     ab3:	02 1f                	add    (%edi),%bl
     ab5:	07                   	pop    %es
     ab6:	61                   	popa   
     ab7:	c9                   	leave  
     ab8:	66 5a                	pop    %dx
     aba:	ff e2                	jmp    *%edx

00000abc <_initialInt_09h>:
     abc:	c8 00 00 00          	enter  $0x0,$0x0
     ac0:	a1 24 00 a3 e2       	mov    0xe2a30024,%eax
     ac5:	02 a1 26 00 a3 e4    	add    -0x1b5cffda(%ecx),%ah
     acb:	02 60 06             	add    0x6(%eax),%ah
     ace:	1e                   	push   %ds
     acf:	8c c8                	mov    %cs,%eax
     ad1:	8e d8                	mov    %eax,%ds
     ad3:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     ad8:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
     add:	00 f7                	add    %dh,%bh
     adf:	e3 89                	jecxz  a6a <_initialInt+0x22c>
     ae1:	c7                   	(bad)  
     ae2:	b8 7a 05 26 89       	mov    $0x8926057a,%eax
     ae7:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     aec:	45                   	inc    %ebp
     aed:	02 1f                	add    (%edi),%bl
     aef:	07                   	pop    %es
     af0:	61                   	popa   
     af1:	c9                   	leave  
     af2:	66 5a                	pop    %dx
     af4:	ff e2                	jmp    *%edx

00000af6 <_initialInt_08h>:
     af6:	c8 00 00 00          	enter  $0x0,$0x0
     afa:	b0 40                	mov    $0x40,%al
     afc:	e6 43                	out    %al,$0x43
     afe:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
     b03:	88 e0                	mov    %ah,%al
     b05:	e6 40                	out    %al,$0x40
     b07:	60                   	pusha  
     b08:	06                   	push   %es
     b09:	1e                   	push   %ds
     b0a:	8c c8                	mov    %cs,%eax
     b0c:	8e d8                	mov    %eax,%ds
     b0e:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     b13:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
     b18:	00 f7                	add    %dh,%bh
     b1a:	e3 89                	jecxz  aa5 <_initialInt+0x267>
     b1c:	c7                   	(bad)  
     b1d:	b8 f5 04 26 89       	mov    $0x892604f5,%eax
     b22:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     b27:	45                   	inc    %ebp
     b28:	02 1f                	add    (%edi),%bl
     b2a:	07                   	pop    %es
     b2b:	61                   	popa   
     b2c:	c9                   	leave  
     b2d:	66 5a                	pop    %dx
     b2f:	ff e2                	jmp    *%edx

00000b31 <_save>:
     b31:	66 89 26             	mov    %sp,(%esi)
     b34:	fa                   	cli    
     b35:	02 1e                	add    (%esi),%bl
     b37:	0e                   	push   %cs
     b38:	1f                   	pop    %ds
     b39:	8f 06                	popl   (%esi)
     b3b:	ea 02 8f 06 ee 02 66 	ljmp   $0x6602,$0xee068f02
     b42:	89 26                	mov    %esp,(%esi)
     b44:	f6 02 66             	testb  $0x66,(%edx)
     b47:	89 36                	mov    %esi,(%esi)
     b49:	f0 02 66 8b          	lock add -0x75(%esi),%ah
     b4d:	36                   	ss
     b4e:	e4 46                	in     $0x46,%al
     b50:	66 83 c6 2c          	add    $0x2c,%si
     b54:	67 8f 06 67 8f       	popl   -0x7099
     b59:	46                   	inc    %esi
     b5a:	04 67                	add    $0x67,%al
     b5c:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
     b63:	46                   	inc    %esi
     b64:	08 67 c7             	or     %ah,-0x39(%edi)
     b67:	46                   	inc    %esi
     b68:	0a 00                	or     (%eax),%al
     b6a:	00 66 67             	add    %ah,0x67(%esi)
     b6d:	89 66 fc             	mov    %esp,-0x4(%esi)
     b70:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
     b74:	8c de                	mov    %ds,%esi
     b76:	8e d6                	mov    %esi,%ss
     b78:	66 8b 26             	mov    (%esi),%sp
     b7b:	e4 46                	in     $0x46,%al
     b7d:	66 83 c4 24          	add    $0x24,%sp
     b81:	6a 00                	push   $0x0
     b83:	ff 36                	pushl  (%esi)
     b85:	ea 02 6a 00 06 66 55 	ljmp   $0x5566,$0x6006a02
     b8c:	66 57                	push   %di
     b8e:	66 ff 36             	pushw  (%esi)
     b91:	f0 02 66 52          	lock add 0x52(%esi),%ah
     b95:	66 51                	push   %cx
     b97:	66 53                	push   %bx
     b99:	66 50                	push   %ax
     b9b:	66 8b 26             	mov    (%esi),%sp
     b9e:	f6 02 a1             	testb  $0xa1,(%edx)
     ba1:	ee                   	out    %al,(%dx)
     ba2:	02 ff                	add    %bh,%bh
     ba4:	e0 66                	loopne c0c <RTC_Timer+0x13>

00000ba5 <_restart>:
     ba5:	66 89 26             	mov    %sp,(%esi)
     ba8:	f6 02 66             	testb  $0x66,(%edx)
     bab:	8b 26                	mov    (%esi),%esp
     bad:	e4 46                	in     $0x46,%al
     baf:	66 58                	pop    %ax
     bb1:	66 5b                	pop    %bx
     bb3:	66 59                	pop    %cx
     bb5:	66 5a                	pop    %dx
     bb7:	66 5e                	pop    %si
     bb9:	66 5f                	pop    %di
     bbb:	66 5d                	pop    %bp
     bbd:	07                   	pop    %es
     bbe:	8f 06                	popl   (%esi)
     bc0:	f4                   	hlt    
     bc1:	02 8f 06 ea 02 8f    	add    -0x70fd15fa(%edi),%cl
     bc7:	06                   	push   %es
     bc8:	f4                   	hlt    
     bc9:	02 66 89             	add    -0x77(%esi),%ah
     bcc:	36 f0 02 17          	lock add %ss:(%edi),%dl
     bd0:	8f 06                	popl   (%esi)
     bd2:	f4                   	hlt    
     bd3:	02 66 89             	add    -0x77(%esi),%ah
     bd6:	e6 66                	out    %al,$0x66
     bd8:	67 8b 26 67 ff       	mov    -0x99,%esp
     bdd:	76 0c                	jbe    beb <_restart+0x46>
     bdf:	67 ff 76 08          	pushl  0x8(%bp)
     be3:	67 ff 76 04          	pushl  0x4(%bp)
     be7:	66 8b 36             	mov    (%esi),%si
     bea:	f0 02 8e 1e ea 02 50 	lock add 0x5002ea1e(%esi),%cl
     bf1:	b0 20                	mov    $0x20,%al
     bf3:	e6 20                	out    %al,$0x20
     bf5:	e6 a0                	out    %al,$0xa0
     bf7:	58                   	pop    %eax
     bf8:	cf                   	iret   

00000bf9 <RTC_Timer>:
     bf9:	c8 00 00 00          	enter  $0x0,$0x0
     bfd:	1e                   	push   %ds
     bfe:	06                   	push   %es
     bff:	60                   	pusha  
     c00:	8c c8                	mov    %cs,%eax
     c02:	8e d8                	mov    %eax,%ds
     c04:	8c c8                	mov    %cs,%eax
     c06:	8e c0                	mov    %eax,%es
     c08:	bf 80 40 b4 02       	mov    $0x2b44080,%edi
     c0d:	cd 1a                	int    $0x1a
     c0f:	88 e8                	mov    %ch,%al
     c11:	b4 00                	mov    $0x0,%ah
     c13:	b3 10                	mov    $0x10,%bl
     c15:	f6 f3                	div    %bl
     c17:	04 30                	add    $0x30,%al
     c19:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
     c1f:	88 e8                	mov    %ch,%al
     c21:	24 0f                	and    $0xf,%al
     c23:	04 30                	add    $0x30,%al
     c25:	88 45 01             	mov    %al,0x1(%ebp)
     c28:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
     c2c:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
     c30:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
     c34:	b4 02                	mov    $0x2,%ah
     c36:	cd 1a                	int    $0x1a
     c38:	88 c8                	mov    %cl,%al
     c3a:	b4 00                	mov    $0x0,%ah
     c3c:	b3 10                	mov    $0x10,%bl
     c3e:	f6 f3                	div    %bl
     c40:	04 30                	add    $0x30,%al
     c42:	88 45 05             	mov    %al,0x5(%ebp)
     c45:	b4 02                	mov    $0x2,%ah
     c47:	cd 1a                	int    $0x1a
     c49:	88 c8                	mov    %cl,%al
     c4b:	24 0f                	and    $0xf,%al
     c4d:	04 30                	add    $0x30,%al
     c4f:	88 45 06             	mov    %al,0x6(%ebp)
     c52:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
     c56:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
     c5a:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
     c5e:	8c c8                	mov    %cs,%eax
     c60:	8e d8                	mov    %eax,%ds
     c62:	8e c0                	mov    %eax,%es
     c64:	bd 0f 03 8c d8       	mov    $0xd88c030f,%ebp
     c69:	8e c0                	mov    %eax,%es
     c6b:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
     c70:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     c76:	b2 0a                	mov    $0xa,%dl
     c78:	cd 10                	int    $0x10
     c7a:	8c c8                	mov    %cs,%eax
     c7c:	8e d8                	mov    %eax,%ds
     c7e:	8e c0                	mov    %eax,%es
     c80:	bd 80 40 8c d8       	mov    $0xd88c4080,%ebp
     c85:	8e c0                	mov    %eax,%es
     c87:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
     c8c:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     c92:	b2 1e                	mov    $0x1e,%dl
     c94:	cd 10                	int    $0x10
     c96:	61                   	popa   
     c97:	07                   	pop    %es
     c98:	1f                   	pop    %ds
     c99:	c9                   	leave  
     c9a:	66 5a                	pop    %dx
     c9c:	ff e2                	jmp    *%edx

00000c9e <_Get_Hours_1>:
     c9e:	c8 04 00 00          	enter  $0x4,$0x0
     ca2:	b4 02                	mov    $0x2,%ah
     ca4:	cd 1a                	int    $0x1a
     ca6:	88 e8                	mov    %ch,%al
     ca8:	b4 00                	mov    $0x0,%ah
     caa:	b3 10                	mov    $0x10,%bl
     cac:	f6 f3                	div    %bl
     cae:	30 e4                	xor    %ah,%ah
     cb0:	66 67 89 04          	mov    %ax,(%si)
     cb4:	24 66                	and    $0x66,%al
     cb6:	67 8b 04             	mov    (%si),%eax
     cb9:	24 c9                	and    $0xc9,%al
     cbb:	66 5a                	pop    %dx
     cbd:	ff e2                	jmp    *%edx

00000cbf <_Get_Hours_2>:
     cbf:	c8 04 00 00          	enter  $0x4,$0x0
     cc3:	b4 02                	mov    $0x2,%ah
     cc5:	cd 1a                	int    $0x1a
     cc7:	88 e8                	mov    %ch,%al
     cc9:	24 0f                	and    $0xf,%al
     ccb:	30 e4                	xor    %ah,%ah
     ccd:	66 67 89 04          	mov    %ax,(%si)
     cd1:	24 66                	and    $0x66,%al
     cd3:	67 8b 04             	mov    (%si),%eax
     cd6:	24 c9                	and    $0xc9,%al
     cd8:	66 5a                	pop    %dx
     cda:	ff e2                	jmp    *%edx

00000cdc <_Get_Minutes_1>:
     cdc:	c8 04 00 00          	enter  $0x4,$0x0
     ce0:	b4 02                	mov    $0x2,%ah
     ce2:	cd 1a                	int    $0x1a
     ce4:	88 c8                	mov    %cl,%al
     ce6:	b4 00                	mov    $0x0,%ah
     ce8:	b3 10                	mov    $0x10,%bl
     cea:	f6 f3                	div    %bl
     cec:	30 e4                	xor    %ah,%ah
     cee:	66 67 89 04          	mov    %ax,(%si)
     cf2:	24 66                	and    $0x66,%al
     cf4:	67 8b 04             	mov    (%si),%eax
     cf7:	24 c9                	and    $0xc9,%al
     cf9:	66 5a                	pop    %dx
     cfb:	ff e2                	jmp    *%edx

00000cfd <_Get_Minutes_2>:
     cfd:	c8 04 00 00          	enter  $0x4,$0x0
     d01:	b4 02                	mov    $0x2,%ah
     d03:	cd 1a                	int    $0x1a
     d05:	88 c8                	mov    %cl,%al
     d07:	24 0f                	and    $0xf,%al
     d09:	30 e4                	xor    %ah,%ah
     d0b:	66 67 89 04          	mov    %ax,(%si)
     d0f:	24 66                	and    $0x66,%al
     d11:	67 8b 04             	mov    (%si),%eax
     d14:	24 c9                	and    $0xc9,%al
     d16:	66 5a                	pop    %dx
     d18:	ff e2                	jmp    *%edx

00000d1a <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
     d1a:	66 55                	push   %bp
     d1c:	66 89 e5             	mov    %sp,%bp
     d1f:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
     d23:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     d28:	66 89 d0             	mov    %dx,%ax
     d2b:	66 c1 e0 02          	shl    $0x2,%ax
     d2f:	66 01 d0             	add    %dx,%ax
     d32:	66 c1 e0 04          	shl    $0x4,%ax
     d36:	66 89 c2             	mov    %ax,%dx
     d39:	67 66 8b 45 10       	mov    0x10(%di),%ax
     d3e:	66 01 d0             	add    %dx,%ax
     d41:	66 01 c0             	add    %ax,%ax
     d44:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
     d49:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     d50:	00 00                	add    %al,(%eax)
	int index = 0;
     d52:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     d59:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     d5b:	eb 35                	jmp    d92 <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
     d5d:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     d62:	67 66 8b 45 08       	mov    0x8(%di),%ax
     d67:	66 01 d0             	add    %dx,%ax
     d6a:	67 8a 00             	mov    (%bx,%si),%al
     d6d:	66 0f be c0          	movsbw %al,%ax
     d71:	67 66 ff 75 f4       	pushw  -0xc(%di)
     d76:	67 66 ff 75 fc       	pushw  -0x4(%di)
     d7b:	66 50                	push   %ax
     d7d:	66 e8 ca f5          	callw  34b <_clearscreen+0x7>
     d81:	ff                   	(bad)  
     d82:	ff 66 83             	jmp    *-0x7d(%esi)
     d85:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     d88:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     d8c:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
     d92:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     d97:	67 66 8b 45 08       	mov    0x8(%di),%ax
     d9c:	66 01 d0             	add    %dx,%ax
     d9f:	67 8a 00             	mov    (%bx,%si),%al
     da2:	84 c0                	test   %al,%al
     da4:	75 b7                	jne    d5d <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     da6:	90                   	nop
}
     da7:	66 c9                	leavew 
     da9:	66 c3                	retw   

00000dab <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
     dab:	66 55                	push   %bp
     dad:	66 89 e5             	mov    %sp,%bp
     db0:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
     db4:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     db9:	66 89 d0             	mov    %dx,%ax
     dbc:	66 c1 e0 02          	shl    $0x2,%ax
     dc0:	66 01 d0             	add    %dx,%ax
     dc3:	66 c1 e0 04          	shl    $0x4,%ax
     dc7:	66 89 c2             	mov    %ax,%dx
     dca:	67 66 8b 45 10       	mov    0x10(%di),%ax
     dcf:	66 01 d0             	add    %dx,%ax
     dd2:	66 01 c0             	add    %ax,%ax
     dd5:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
     dda:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     de1:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     de3:	eb 35                	jmp    e1a <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
     de5:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     dea:	67 66 8b 45 08       	mov    0x8(%di),%ax
     def:	66 01 d0             	add    %dx,%ax
     df2:	67 8a 00             	mov    (%bx,%si),%al
     df5:	66 0f be c0          	movsbw %al,%ax
     df9:	67 66 ff 75 14       	pushw  0x14(%di)
     dfe:	67 66 ff 75 fc       	pushw  -0x4(%di)
     e03:	66 50                	push   %ax
     e05:	66 e8 42 f5          	callw  34b <_clearscreen+0x7>
     e09:	ff                   	(bad)  
     e0a:	ff 66 83             	jmp    *-0x7d(%esi)
     e0d:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     e10:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     e14:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
     e1a:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     e1f:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e24:	66 01 d0             	add    %dx,%ax
     e27:	67 8a 00             	mov    (%bx,%si),%al
     e2a:	84 c0                	test   %al,%al
     e2c:	75 b7                	jne    de5 <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     e2e:	90                   	nop
}
     e2f:	66 c9                	leavew 
     e31:	66 c3                	retw   

00000e33 <sys_showline>:
void sys_showline(){
     e33:	66 55                	push   %bp
     e35:	66 89 e5             	mov    %sp,%bp
     e38:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
     e3c:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
     e41:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
     e46:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
     e4b:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
     e50:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
     e55:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
     e5a:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
     e5f:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     e66:	00 00                	add    %al,(%eax)
    int i = 0;
     e68:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     e6f:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
     e71:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     e78:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
     e7a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     e81:	00 00                	add    %al,(%eax)
     e83:	eb 52                	jmp    ed7 <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
     e85:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     e8a:	66 89 d0             	mov    %dx,%ax
     e8d:	66 c1 e0 03          	shl    $0x3,%ax
     e91:	66 01 d0             	add    %dx,%ax
     e94:	67 66 8d 14          	lea    (%si),%dx
     e98:	c5 00                	lds    (%eax),%eax
     e9a:	00 00                	add    %al,(%eax)
     e9c:	00 66 01             	add    %ah,0x1(%esi)
     e9f:	d0 66 01             	shlb   0x1(%esi)
     ea2:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
     ea6:	45                   	inc    %ebp
     ea7:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
     ead:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     eb2:	66 01 d0             	add    %dx,%ax
     eb5:	67 8a 00             	mov    (%bx,%si),%al
     eb8:	66 0f be c0          	movsbw %al,%ax
     ebc:	67 66 ff 75 f4       	pushw  -0xc(%di)
     ec1:	67 66 ff 75 f0       	pushw  -0x10(%di)
     ec6:	66 50                	push   %ax
     ec8:	66 e8 7f f4          	callw  34b <_clearscreen+0x7>
     ecc:	ff                   	(bad)  
     ecd:	ff 66 83             	jmp    *-0x7d(%esi)
     ed0:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
     ed3:	66 ff 45 fc          	incw   -0x4(%ebp)
     ed7:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
     edd:	7e a6                	jle    e85 <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
     edf:	66 c9                	leavew 
     ee1:	66 c3                	retw   

00000ee3 <sys_printname>:

void sys_printname(){
     ee3:	66 55                	push   %bp
     ee5:	66 89 e5             	mov    %sp,%bp
     ee8:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
     eec:	67 66 c7 45 fc d0 26 	movw   $0x26d0,-0x4(%di)
     ef3:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
     ef5:	67 66 c7 45 f8 14 27 	movw   $0x2714,-0x8(%di)
     efc:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
     efe:	67 66 c7 45 f4 58 27 	movw   $0x2758,-0xc(%di)
     f05:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
     f07:	67 66 c7 45 f0 9c 27 	movw   $0x279c,-0x10(%di)
     f0e:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
     f10:	67 66 c7 45 ec e0 27 	movw   $0x27e0,-0x14(%di)
     f17:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
     f19:	67 66 c7 45 e8 24 28 	movw   $0x2824,-0x18(%di)
     f20:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
     f22:	67 66 c7 45 e4 68 28 	movw   $0x2868,-0x1c(%di)
     f29:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
     f2b:	66 6a 0b             	pushw  $0xb
     f2e:	66 6a 10             	pushw  $0x10
     f31:	67 66 ff 75 fc       	pushw  -0x4(%di)
     f36:	66 e8 de fd          	callw  d18 <_Get_Minutes_2+0x1b>
     f3a:	ff                   	(bad)  
     f3b:	ff 66 83             	jmp    *-0x7d(%esi)
     f3e:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
     f41:	6a 0b                	push   $0xb
     f43:	66 6a 11             	pushw  $0x11
     f46:	67 66 ff 75 f8       	pushw  -0x8(%di)
     f4b:	66 e8 c9 fd          	callw  d18 <_Get_Minutes_2+0x1b>
     f4f:	ff                   	(bad)  
     f50:	ff 66 83             	jmp    *-0x7d(%esi)
     f53:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
     f56:	6a 0b                	push   $0xb
     f58:	66 6a 12             	pushw  $0x12
     f5b:	67 66 ff 75 f4       	pushw  -0xc(%di)
     f60:	66 e8 b4 fd          	callw  d18 <_Get_Minutes_2+0x1b>
     f64:	ff                   	(bad)  
     f65:	ff 66 83             	jmp    *-0x7d(%esi)
     f68:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
     f6b:	6a 0b                	push   $0xb
     f6d:	66 6a 13             	pushw  $0x13
     f70:	67 66 ff 75 f0       	pushw  -0x10(%di)
     f75:	66 e8 9f fd          	callw  d18 <_Get_Minutes_2+0x1b>
     f79:	ff                   	(bad)  
     f7a:	ff 66 83             	jmp    *-0x7d(%esi)
     f7d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
     f80:	6a 0b                	push   $0xb
     f82:	66 6a 14             	pushw  $0x14
     f85:	67 66 ff 75 ec       	pushw  -0x14(%di)
     f8a:	66 e8 8a fd          	callw  d18 <_Get_Minutes_2+0x1b>
     f8e:	ff                   	(bad)  
     f8f:	ff 66 83             	jmp    *-0x7d(%esi)
     f92:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
     f95:	6a 0b                	push   $0xb
     f97:	66 6a 15             	pushw  $0x15
     f9a:	67 66 ff 75 e8       	pushw  -0x18(%di)
     f9f:	66 e8 75 fd          	callw  d18 <_Get_Minutes_2+0x1b>
     fa3:	ff                   	(bad)  
     fa4:	ff 66 83             	jmp    *-0x7d(%esi)
     fa7:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
     faa:	6a 0b                	push   $0xb
     fac:	66 6a 16             	pushw  $0x16
     faf:	67 66 ff 75 e4       	pushw  -0x1c(%di)
     fb4:	66 e8 60 fd          	callw  d18 <_Get_Minutes_2+0x1b>
     fb8:	ff                   	(bad)  
     fb9:	ff 66 83             	jmp    *-0x7d(%esi)
     fbc:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
     fbf:	c9                   	leave  
     fc0:	66 c3                	retw   

00000fc2 <sys_printpoem>:
void sys_printpoem(){
     fc2:	66 55                	push   %bp
     fc4:	66 89 e5             	mov    %sp,%bp
     fc7:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
     fcb:	67 66 c7 45 f8 ac 28 	movw   $0x28ac,-0x8(%di)
     fd2:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
     fd4:	67 66 c7 45 f4 be 28 	movw   $0x28be,-0xc(%di)
     fdb:	00 00                	add    %al,(%eax)
    int i = 1;
     fdd:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     fe4:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
     fe6:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     fed:	00 00                	add    %al,(%eax)
     fef:	eb 4b                	jmp    103c <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
     ff1:	67 66 ff 75 fc       	pushw  -0x4(%di)
     ff6:	66 6a 0a             	pushw  $0xa
     ff9:	66 6a 0f             	pushw  $0xf
     ffc:	67 66 ff 75 f8       	pushw  -0x8(%di)
    1001:	66 e8 a4 fd          	callw  da9 <sys_print_for_heart+0x8f>
    1005:	ff                   	(bad)  
    1006:	ff 66 83             	jmp    *-0x7d(%esi)
    1009:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
    100b:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1010:	66 6a 0a             	pushw  $0xa
    1013:	66 6a 10             	pushw  $0x10
    1016:	67 66 ff 75 f4       	pushw  -0xc(%di)
    101b:	66 e8 8a fd          	callw  da9 <sys_print_for_heart+0x8f>
    101f:	ff                   	(bad)  
    1020:	ff 66 83             	jmp    *-0x7d(%esi)
    1023:	c4 10                	les    (%eax),%edx
        int j = 0;
    1025:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    102c:	00 00                	add    %al,(%eax)
        int k = 0;
    102e:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    1035:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
    1037:	67 66 ff 45 fc       	incw   -0x4(%di)
    103c:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    1042:	7e ad                	jle    ff1 <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
    1044:	66 c9                	leavew 
    1046:	66 c3                	retw   

00001048 <sys_printheart>:
void sys_printheart(){
    1048:	66 55                	push   %bp
    104a:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
    104d:	66 6a 28             	pushw  $0x28
    1050:	66 6a 00             	pushw  $0x0
    1053:	66 68 c7 28          	pushw  $0x28c7
    1057:	00 00                	add    %al,(%eax)
    1059:	66 e8 bb fc          	callw  d18 <_Get_Minutes_2+0x1b>
    105d:	ff                   	(bad)  
    105e:	ff 66 83             	jmp    *-0x7d(%esi)
    1061:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
    1064:	6a 28                	push   $0x28
    1066:	66 6a 01             	pushw  $0x1
    1069:	66 68 df 28          	pushw  $0x28df
    106d:	00 00                	add    %al,(%eax)
    106f:	66 e8 a5 fc          	callw  d18 <_Get_Minutes_2+0x1b>
    1073:	ff                   	(bad)  
    1074:	ff 66 83             	jmp    *-0x7d(%esi)
    1077:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
    107a:	6a 28                	push   $0x28
    107c:	66 6a 02             	pushw  $0x2
    107f:	66 68 f8 28          	pushw  $0x28f8
    1083:	00 00                	add    %al,(%eax)
    1085:	66 e8 8f fc          	callw  d18 <_Get_Minutes_2+0x1b>
    1089:	ff                   	(bad)  
    108a:	ff 66 83             	jmp    *-0x7d(%esi)
    108d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
    1090:	6a 28                	push   $0x28
    1092:	66 6a 03             	pushw  $0x3
    1095:	66 68 13 29          	pushw  $0x2913
    1099:	00 00                	add    %al,(%eax)
    109b:	66 e8 79 fc          	callw  d18 <_Get_Minutes_2+0x1b>
    109f:	ff                   	(bad)  
    10a0:	ff 66 83             	jmp    *-0x7d(%esi)
    10a3:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
    10a6:	6a 28                	push   $0x28
    10a8:	66 6a 04             	pushw  $0x4
    10ab:	66 68 2c 29          	pushw  $0x292c
    10af:	00 00                	add    %al,(%eax)
    10b1:	66 e8 63 fc          	callw  d18 <_Get_Minutes_2+0x1b>
    10b5:	ff                   	(bad)  
    10b6:	ff 66 83             	jmp    *-0x7d(%esi)
    10b9:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
    10bc:	6a 28                	push   $0x28
    10be:	66 6a 05             	pushw  $0x5
    10c1:	66 68 44 29          	pushw  $0x2944
    10c5:	00 00                	add    %al,(%eax)
    10c7:	66 e8 4d fc          	callw  d18 <_Get_Minutes_2+0x1b>
    10cb:	ff                   	(bad)  
    10cc:	ff 66 83             	jmp    *-0x7d(%esi)
    10cf:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
    10d2:	6a 28                	push   $0x28
    10d4:	66 6a 06             	pushw  $0x6
    10d7:	66 68 5b 29          	pushw  $0x295b
    10db:	00 00                	add    %al,(%eax)
    10dd:	66 e8 37 fc          	callw  d18 <_Get_Minutes_2+0x1b>
    10e1:	ff                   	(bad)  
    10e2:	ff 66 83             	jmp    *-0x7d(%esi)
    10e5:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
    10e8:	6a 28                	push   $0x28
    10ea:	66 6a 07             	pushw  $0x7
    10ed:	66 68 71 29          	pushw  $0x2971
    10f1:	00 00                	add    %al,(%eax)
    10f3:	66 e8 21 fc          	callw  d18 <_Get_Minutes_2+0x1b>
    10f7:	ff                   	(bad)  
    10f8:	ff 66 83             	jmp    *-0x7d(%esi)
    10fb:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    10fe:	c9                   	leave  
    10ff:	66 c3                	retw   

00001101 <print>:
#include "stdio.h"
//====================================================
//              显示字符串函数，可以指定位置
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
    1101:	66 55                	push   %bp
    1103:	66 89 e5             	mov    %sp,%bp
    1106:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    110a:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    110f:	66 89 d0             	mov    %dx,%ax
    1112:	66 c1 e0 02          	shl    $0x2,%ax
    1116:	66 01 d0             	add    %dx,%ax
    1119:	66 c1 e0 04          	shl    $0x4,%ax
    111d:	66 89 c2             	mov    %ax,%dx
    1120:	67 66 8b 45 10       	mov    0x10(%di),%ax
    1125:	66 01 d0             	add    %dx,%ax
    1128:	66 01 c0             	add    %ax,%ax
    112b:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    1130:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    1137:	00 00                	add    %al,(%eax)
	int index = 0;
    1139:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    1140:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    1142:	eb 35                	jmp    1179 <print+0x78>
		_printchar(Messeage[index],pos,color);
    1144:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    1149:	67 66 8b 45 08       	mov    0x8(%di),%ax
    114e:	66 01 d0             	add    %dx,%ax
    1151:	67 8a 00             	mov    (%bx,%si),%al
    1154:	66 0f be c0          	movsbw %al,%ax
    1158:	67 66 ff 75 f4       	pushw  -0xc(%di)
    115d:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1162:	66 50                	push   %ax
    1164:	66 e8 e3 f1          	callw  34b <_clearscreen+0x7>
    1168:	ff                   	(bad)  
    1169:	ff 66 83             	jmp    *-0x7d(%esi)
    116c:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    116f:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    1173:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    1179:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    117e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1183:	66 01 d0             	add    %dx,%ax
    1186:	67 8a 00             	mov    (%bx,%si),%al
    1189:	84 c0                	test   %al,%al
    118b:	75 b7                	jne    1144 <print+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    118d:	90                   	nop
}
    118e:	66 c9                	leavew 
    1190:	66 c3                	retw   

00001192 <prints>:
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input	
    1192:	66 55                	push   %bp
    1194:	66 89 e5             	mov    %sp,%bp
    1197:	66 83 ec 04          	sub    $0x4,%sp
	int index = 0;
    119b:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    11a2:	00 00                	add    %al,(%eax)
	while(Messeage[index]){
    11a4:	eb 25                	jmp    11cb <prints+0x39>
		_showchar(Messeage[index]);
    11a6:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    11ab:	67 66 8b 45 08       	mov    0x8(%di),%ax
    11b0:	66 01 d0             	add    %dx,%ax
    11b3:	67 8a 00             	mov    (%bx,%si),%al
    11b6:	66 0f be c0          	movsbw %al,%ax
    11ba:	66 50                	push   %ax
    11bc:	66 e8 c8 f1          	callw  388 <_readinput+0x17>
    11c0:	ff                   	(bad)  
    11c1:	ff 66 83             	jmp    *-0x7d(%esi)
    11c4:	c4 04 67             	les    (%edi,%eiz,2),%eax
		index++;
    11c7:	66 ff 45 fc          	incw   -0x4(%ebp)
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input	
	int index = 0;
	while(Messeage[index]){
    11cb:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    11d0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    11d5:	66 01 d0             	add    %dx,%ax
    11d8:	67 8a 00             	mov    (%bx,%si),%al
    11db:	84 c0                	test   %al,%al
    11dd:	75 c7                	jne    11a6 <prints+0x14>
		_showchar(Messeage[index]);
		index++;
	}

	return;
    11df:	90                   	nop
}
    11e0:	66 c9                	leavew 
    11e2:	66 c3                	retw   

000011e4 <printc>:
//====================================================
//                显示字符函数
//====================================================
void printc(char alpha){
    11e4:	66 55                	push   %bp
    11e6:	66 89 e5             	mov    %sp,%bp
    11e9:	66 83 ec 04          	sub    $0x4,%sp
    11ed:	67 66 8b 45 08       	mov    0x8(%di),%ax
    11f2:	67 88 45 fc          	mov    %al,-0x4(%di)
	_showchar(alpha);
    11f6:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    11fc:	66 50                	push   %ax
    11fe:	66 e8 86 f1          	callw  388 <_readinput+0x17>
    1202:	ff                   	(bad)  
    1203:	ff 66 83             	jmp    *-0x7d(%esi)
    1206:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    1209:	66 c9                	leavew 
    120b:	66 c3                	retw   

0000120d <printsint>:
//====================================================
//                数字转字符函数
//====================================================
void printsint(int num){
    120d:	66 55                	push   %bp
    120f:	66 89 e5             	mov    %sp,%bp
    1212:	66 83 ec 2c          	sub    $0x2c,%sp
	 int save = num;
    1216:	67 66 8b 45 08       	mov    0x8(%di),%ax
    121b:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	 int count = 0;
    1220:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1227:	00 00                	add    %al,(%eax)
	 char number[30];
	 number[count] = 0;
    1229:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    122e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1233:	66 01 d0             	add    %dx,%ax
    1236:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	if(num < 0){
    123a:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    1240:	79 14                	jns    1256 <printsint+0x49>
		printc('-');
    1242:	66 6a 2d             	pushw  $0x2d
    1245:	66 e8 99 ff          	callw  11e2 <prints+0x50>
    1249:	ff                   	(bad)  
    124a:	ff 66 83             	jmp    *-0x7d(%esi)
    124d:	c4 04 67             	les    (%edi,%eiz,2),%eax
		num = -num;
    1250:	66 f7 5d 08          	negw   0x8(%ebp)
    1254:	eb 15                	jmp    126b <printsint+0x5e>
	}
	else if(num == 0){
    1256:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    125c:	75 0d                	jne    126b <printsint+0x5e>
		printc('0');
    125e:	66 6a 30             	pushw  $0x30
    1261:	66 e8 7d ff          	callw  11e2 <prints+0x50>
    1265:	ff                   	(bad)  
    1266:	ff 66 83             	jmp    *-0x7d(%esi)
    1269:	c4 04 eb             	les    (%ebx,%ebp,8),%eax
	}
	while(num > 0){
    126c:	50                   	push   %eax
		number[count] = num % 10 + '0';
    126d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1272:	66 b9 0a 00          	mov    $0xa,%cx
    1276:	00 00                	add    %al,(%eax)
    1278:	66 99                	cwtd   
    127a:	66 f7 f9             	idiv   %cx
    127d:	66 89 d0             	mov    %dx,%ax
    1280:	66 83 c0 30          	add    $0x30,%ax
    1284:	67 66 8d 4d d6       	lea    -0x2a(%di),%cx
    1289:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    128e:	66 01 ca             	add    %cx,%dx
    1291:	67 88 02             	mov    %al,(%bp,%si)
		num  = num / 10;
    1294:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    1299:	66 b8 67 66          	mov    $0x6667,%ax
    129d:	66 66 66 f7 e9       	data32 data32 imul %cx
    12a2:	66 c1 fa 02          	sar    $0x2,%dx
    12a6:	66 89 c8             	mov    %cx,%ax
    12a9:	66 c1 f8 1f          	sar    $0x1f,%ax
    12ad:	66 29 c2             	sub    %ax,%dx
    12b0:	66 89 d0             	mov    %dx,%ax
    12b3:	67 66 89 45 08       	mov    %ax,0x8(%di)
		count ++;
    12b8:	67 66 ff 45 fc       	incw   -0x4(%di)
		num = -num;
	}
	else if(num == 0){
		printc('0');
	}
	while(num > 0){
    12bd:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    12c3:	7f a8                	jg     126d <printsint+0x60>
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    12c5:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    12ca:	66 48                	dec    %ax
    12cc:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    12d1:	eb 25                	jmp    12f8 <printsint+0xeb>
		printc(number[i]);
    12d3:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    12d8:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    12dd:	66 01 d0             	add    %dx,%ax
    12e0:	67 8a 00             	mov    (%bx,%si),%al
    12e3:	66 0f be c0          	movsbw %al,%ax
    12e7:	66 50                	push   %ax
    12e9:	66 e8 f5 fe          	callw  11e2 <prints+0x50>
    12ed:	ff                   	(bad)  
    12ee:	ff 66 83             	jmp    *-0x7d(%esi)
    12f1:	c4 04 67             	les    (%edi,%eiz,2),%eax
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    12f4:	66 ff 4d f8          	decw   -0x8(%ebp)
    12f8:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    12fe:	79 d3                	jns    12d3 <printsint+0xc6>
		printc(number[i]);
	}
	return;
    1300:	90                   	nop
}
    1301:	66 c9                	leavew 
    1303:	66 c3                	retw   

00001305 <print_next_line>:
//====================================================
//                显示字符串并换行函数
//====================================================
 void print_next_line(char const* Messeage){
    1305:	66 55                	push   %bp
    1307:	66 89 e5             	mov    %sp,%bp
	prints(Messeage);
    130a:	67 66 ff 75 08       	pushw  0x8(%di)
    130f:	66 e8 7d fe          	callw  1190 <print+0x8f>
    1313:	ff                   	(bad)  
    1314:	ff 66 83             	jmp    *-0x7d(%esi)
    1317:	c4 04 66             	les    (%esi,%eiz,2),%eax
	prints("\n\r");
    131a:	68 86 29 00 00       	push   $0x2986
    131f:	66 e8 6d fe          	callw  1190 <print+0x8f>
    1323:	ff                   	(bad)  
    1324:	ff 66 83             	jmp    *-0x7d(%esi)
    1327:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    132a:	66 c9                	leavew 
    132c:	66 c3                	retw   

0000132e <strlen>:
//====================================================
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
    132e:	66 55                	push   %bp
    1330:	66 89 e5             	mov    %sp,%bp
    1333:	66 83 ec 08          	sub    $0x8,%sp
	int i = 0;
    1337:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    133e:	00 00                	add    %al,(%eax)
	int count = 0;
    1340:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    1347:	00 00                	add    %al,(%eax)
	while(Messeage[i] != 0){
    1349:	eb 0a                	jmp    1355 <strlen+0x27>
		i++;
    134b:	67 66 ff 45 fc       	incw   -0x4(%di)
		count++;
    1350:	67 66 ff 45 f8       	incw   -0x8(%di)
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
	int i = 0;
	int count = 0;
	while(Messeage[i] != 0){
    1355:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    135a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    135f:	66 01 d0             	add    %dx,%ax
    1362:	67 8a 00             	mov    (%bx,%si),%al
    1365:	84 c0                	test   %al,%al
    1367:	75 e2                	jne    134b <strlen+0x1d>
		i++;
		count++;
	}
	return count;
    1369:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    136e:	66 c9                	leavew 
    1370:	66 c3                	retw   

00001372 <read_and_print_input>:
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    1372:	66 55                	push   %bp
    1374:	66 89 e5             	mov    %sp,%bp
    1377:	66 83 ec 08          	sub    $0x8,%sp
    int i = 1;
    137b:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    1382:	00 00                	add    %al,(%eax)
    while(i){
    1384:	eb 1c                	jmp    13a2 <read_and_print_input+0x30>
        char savechar = _readinput();
    1386:	66 e8 e5 ef          	callw  36f <_printchar+0x22>
    138a:	ff                   	(bad)  
    138b:	ff 67 88             	jmp    *-0x78(%edi)
    138e:	45                   	inc    %ebp
    138f:	fb                   	sti    
        _showchar(savechar);
    1390:	67 66 0f be 45 fb    	movsbw -0x5(%di),%ax
    1396:	66 50                	push   %ax
    1398:	66 e8 ec ef          	callw  388 <_readinput+0x17>
    139c:	ff                   	(bad)  
    139d:	ff 66 83             	jmp    *-0x7d(%esi)
    13a0:	c4 04 67             	les    (%edi,%eiz,2),%eax
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    int i = 1;
    while(i){
    13a3:	66 83 7d fc 00       	cmpw   $0x0,-0x4(%ebp)
    13a8:	75 dc                	jne    1386 <read_and_print_input+0x14>
        char savechar = _readinput();
        _showchar(savechar);
    }
}
    13aa:	66 c9                	leavew 
    13ac:	66 c3                	retw   

000013ae <getch>:
//====================================================
//        等待用户输入函数，返回用户输入在缓冲区中
//====================================================
char getch(){
    13ae:	66 55                	push   %bp
    13b0:	66 89 e5             	mov    %sp,%bp
    13b3:	66 83 ec 04          	sub    $0x4,%sp
	char result = _readinput();
    13b7:	66 e8 b4 ef          	callw  36f <_printchar+0x22>
    13bb:	ff                   	(bad)  
    13bc:	ff 67 88             	jmp    *-0x78(%edi)
    13bf:	45                   	inc    %ebp
    13c0:	ff 67 8a             	jmp    *-0x76(%edi)
	return result;
    13c3:	45                   	inc    %ebp
    13c4:	ff 66 c9             	jmp    *-0x37(%esi)
}
    13c7:	66 c3                	retw   

000013c9 <getline>:
void  getline(char str[],int length){
    13c9:	66 55                	push   %bp
    13cb:	66 89 e5             	mov    %sp,%bp
    13ce:	66 83 ec 08          	sub    $0x8,%sp
	char save = getch();
    13d2:	66 e8 d6 ff          	callw  13ac <read_and_print_input+0x3a>
    13d6:	ff                   	(bad)  
    13d7:	ff 67 88             	jmp    *-0x78(%edi)
    13da:	45                   	inc    %ebp
    13db:	ff 67 66             	jmp    *0x66(%edi)
	int index = 0;
    13de:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while(save != 13 && index < length){
    13e5:	eb 46                	jmp    142d <getline+0x64>
		printc(save);
    13e7:	67 66 0f be 45 ff    	movsbw -0x1(%di),%ax
    13ed:	66 50                	push   %ax
    13ef:	66 e8 ef fd          	callw  11e2 <prints+0x50>
    13f3:	ff                   	(bad)  
    13f4:	ff 66 83             	jmp    *-0x7d(%esi)
    13f7:	c4 04 67             	les    (%edi,%eiz,2),%eax
		str[index] = save;
    13fa:	66 8b 55 f8          	mov    -0x8(%ebp),%dx
    13fe:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1403:	66 01 c2             	add    %ax,%dx
    1406:	67 8a 45 ff          	mov    -0x1(%di),%al
    140a:	67 88 02             	mov    %al,(%bp,%si)
		index ++;
    140d:	67 66 ff 45 f8       	incw   -0x8(%di)
		str[index] = 0;
    1412:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    1417:	67 66 8b 45 08       	mov    0x8(%di),%ax
    141c:	66 01 d0             	add    %dx,%ax
    141f:	67 c6 00 00          	movb   $0x0,(%bx,%si)
		save = getch();
    1423:	66 e8 85 ff          	callw  13ac <read_and_print_input+0x3a>
    1427:	ff                   	(bad)  
    1428:	ff 67 88             	jmp    *-0x78(%edi)
    142b:	45                   	inc    %ebp
    142c:	ff 67 80             	jmp    *-0x80(%edi)
	return result;
}
void  getline(char str[],int length){
	char save = getch();
	int index = 0;
	while(save != 13 && index < length){
    142f:	7d ff                	jge    1430 <getline+0x67>
    1431:	0d 74 0c 67 66       	or     $0x66670c74,%eax
    1436:	8b 45 f8             	mov    -0x8(%ebp),%eax
    1439:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    143e:	7c a7                	jl     13e7 <getline+0x1e>
		str[index] = save;
		index ++;
		str[index] = 0;
		save = getch();
	}
	return;
    1440:	90                   	nop
}
    1441:	66 c9                	leavew 
    1443:	66 c3                	retw   

00001445 <print_different_color>:
void print_different_color(char const* Messeage,int row,int colume,int color){
    1445:	66 55                	push   %bp
    1447:	66 89 e5             	mov    %sp,%bp
    144a:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    144e:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    1453:	66 89 d0             	mov    %dx,%ax
    1456:	66 c1 e0 02          	shl    $0x2,%ax
    145a:	66 01 d0             	add    %dx,%ax
    145d:	66 c1 e0 04          	shl    $0x4,%ax
    1461:	66 89 c2             	mov    %ax,%dx
    1464:	67 66 8b 45 10       	mov    0x10(%di),%ax
    1469:	66 01 d0             	add    %dx,%ax
    146c:	66 01 c0             	add    %ax,%ax
    146f:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    1474:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    147b:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    147d:	eb 35                	jmp    14b4 <print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    147f:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    1484:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1489:	66 01 d0             	add    %dx,%ax
    148c:	67 8a 00             	mov    (%bx,%si),%al
    148f:	66 0f be c0          	movsbw %al,%ax
    1493:	67 66 ff 75 14       	pushw  0x14(%di)
    1498:	67 66 ff 75 fc       	pushw  -0x4(%di)
    149d:	66 50                	push   %ax
    149f:	66 e8 a8 ee          	callw  34b <_clearscreen+0x7>
    14a3:	ff                   	(bad)  
    14a4:	ff 66 83             	jmp    *-0x7d(%esi)
    14a7:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    14aa:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    14ae:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    14b4:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    14b9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    14be:	66 01 d0             	add    %dx,%ax
    14c1:	67 8a 00             	mov    (%bx,%si),%al
    14c4:	84 c0                	test   %al,%al
    14c6:	75 b7                	jne    147f <print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    14c8:	90                   	nop
}
    14c9:	66 c9                	leavew 
    14cb:	66 c3                	retw   

000014cd <strcmp>:
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
    14cd:	66 55                	push   %bp
    14cf:	66 89 e5             	mov    %sp,%bp
    14d2:	66 83 ec 04          	sub    $0x4,%sp
	int i = 0;
    14d6:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    14dd:	00 00                	add    %al,(%eax)
	while(m1[i] != 0 && m2[i]!= 0){
    14df:	eb 31                	jmp    1512 <strcmp+0x45>
		if(m1[i] != m2[i]){
    14e1:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    14e6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    14eb:	66 01 d0             	add    %dx,%ax
    14ee:	67 8a 10             	mov    (%bx,%si),%dl
    14f1:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    14f6:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    14fb:	66 01 c8             	add    %cx,%ax
    14fe:	67 8a 00             	mov    (%bx,%si),%al
    1501:	38 c2                	cmp    %al,%dl
    1503:	74 08                	je     150d <strcmp+0x40>
			return 0;
    1505:	66 b8 00 00          	mov    $0x0,%ax
    1509:	00 00                	add    %al,(%eax)
    150b:	eb 63                	jmp    1570 <strcmp+0xa3>
		}
		i++;
    150d:	67 66 ff 45 fc       	incw   -0x4(%di)
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
	int i = 0;
	while(m1[i] != 0 && m2[i]!= 0){
    1512:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1517:	67 66 8b 45 08       	mov    0x8(%di),%ax
    151c:	66 01 d0             	add    %dx,%ax
    151f:	67 8a 00             	mov    (%bx,%si),%al
    1522:	84 c0                	test   %al,%al
    1524:	74 14                	je     153a <strcmp+0x6d>
    1526:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    152b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1530:	66 01 d0             	add    %dx,%ax
    1533:	67 8a 00             	mov    (%bx,%si),%al
    1536:	84 c0                	test   %al,%al
    1538:	75 a7                	jne    14e1 <strcmp+0x14>
		if(m1[i] != m2[i]){
			return 0;
		}
		i++;
	}
	if(m1[i] != 0 || m2[i] != 0){
    153a:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    153f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1544:	66 01 d0             	add    %dx,%ax
    1547:	67 8a 00             	mov    (%bx,%si),%al
    154a:	84 c0                	test   %al,%al
    154c:	75 14                	jne    1562 <strcmp+0x95>
    154e:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1553:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1558:	66 01 d0             	add    %dx,%ax
    155b:	67 8a 00             	mov    (%bx,%si),%al
    155e:	84 c0                	test   %al,%al
    1560:	74 08                	je     156a <strcmp+0x9d>
		return 0;
    1562:	66 b8 00 00          	mov    $0x0,%ax
    1566:	00 00                	add    %al,(%eax)
    1568:	eb 06                	jmp    1570 <strcmp+0xa3>
	}
	return 1;
    156a:	66 b8 01 00          	mov    $0x1,%ax
    156e:	00 00                	add    %al,(%eax)
}
    1570:	66 c9                	leavew 
    1572:	66 c3                	retw   

00001574 <strcpy>:
//====================================================
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
    1574:	66 55                	push   %bp
    1576:	66 89 e5             	mov    %sp,%bp
    1579:	66 83 ec 08          	sub    $0x8,%sp
	int len = strlen(src);
    157d:	67 66 ff 75 08       	pushw  0x8(%di)
    1582:	66 e8 a6 fd          	callw  132c <print_next_line+0x27>
    1586:	ff                   	(bad)  
    1587:	ff 66 83             	jmp    *-0x7d(%esi)
    158a:	c4 04 67             	les    (%edi,%eiz,2),%eax
    158d:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	int i = 0;
    1591:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1598:	00 00                	add    %al,(%eax)
	for(i = 0;i < len;i ++){
    159a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    15a1:	00 00                	add    %al,(%eax)
    15a3:	eb 3b                	jmp    15e0 <strcpy+0x6c>
    	des[i] =  src[i];
    15a5:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    15aa:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    15af:	66 01 c2             	add    %ax,%dx
    15b2:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    15b7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15bc:	66 01 c8             	add    %cx,%ax
    15bf:	67 8a 00             	mov    (%bx,%si),%al
    15c2:	67 88 02             	mov    %al,(%bp,%si)
        des[i+1] = 0;
    15c5:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    15ca:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    15cf:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    15d4:	66 01 d0             	add    %dx,%ax
    15d7:	67 c6 00 00          	movb   $0x0,(%bx,%si)
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
	int len = strlen(src);
	int i = 0;
	for(i = 0;i < len;i ++){
    15db:	67 66 ff 45 fc       	incw   -0x4(%di)
    15e0:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    15e5:	67 66 3b 45 f8       	cmp    -0x8(%di),%ax
    15ea:	7c b9                	jl     15a5 <strcpy+0x31>
    	des[i] =  src[i];
        des[i+1] = 0;
	}
    15ec:	66 c9                	leavew 
    15ee:	66 c3                	retw   

000015f0 <initial_PCB>:
#include "schedule.h"
#include "use.h"

void initial_PCB(int index){
    15f0:	66 55                	push   %bp
    15f2:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    15f5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15fa:	66 40                	inc    %ax
    15fc:	66 c1 e0 0c          	shl    $0xc,%ax
    1600:	66 89 c2             	mov    %ax,%dx
    1603:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1608:	66 c1 e0 02          	shl    $0x2,%ax
    160c:	66 89 c1             	mov    %ax,%cx
    160f:	66 c1 e1 04          	shl    $0x4,%cx
    1613:	66 01 c8             	add    %cx,%ax
    1616:	66 05 b0 41          	add    $0x41b0,%ax
    161a:	00 00                	add    %al,(%eax)
    161c:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    1620:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1625:	66 40                	inc    %ax
    1627:	66 c1 e0 0c          	shl    $0xc,%ax
    162b:	66 89 c2             	mov    %ax,%dx
    162e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1633:	66 c1 e0 02          	shl    $0x2,%ax
    1637:	66 89 c1             	mov    %ax,%cx
    163a:	66 c1 e1 04          	shl    $0x4,%cx
    163e:	66 01 c8             	add    %cx,%ax
    1641:	66 05 a0 41          	add    $0x41a0,%ax
    1645:	00 00                	add    %al,(%eax)
    1647:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
    164b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1650:	66 40                	inc    %ax
    1652:	66 c1 e0 0c          	shl    $0xc,%ax
    1656:	66 89 c2             	mov    %ax,%dx
    1659:	67 66 8b 45 08       	mov    0x8(%di),%ax
    165e:	66 c1 e0 02          	shl    $0x2,%ax
    1662:	66 89 c1             	mov    %ax,%cx
    1665:	66 c1 e1 04          	shl    $0x4,%cx
    1669:	66 01 c8             	add    %cx,%ax
    166c:	66 05 a0 41          	add    $0x41a0,%ax
    1670:	00 00                	add    %al,(%eax)
    1672:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
    1677:	67 66 8b 45 08       	mov    0x8(%di),%ax
    167c:	66 c1 e0 02          	shl    $0x2,%ax
    1680:	66 89 c2             	mov    %ax,%dx
    1683:	66 c1 e2 04          	shl    $0x4,%dx
    1687:	66 01 d0             	add    %dx,%ax
    168a:	66 05 a0 41          	add    $0x41a0,%ax
    168e:	00 00                	add    %al,(%eax)
    1690:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
    1697:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
    1699:	67 66 8b 45 08       	mov    0x8(%di),%ax
    169e:	66 c1 e0 02          	shl    $0x2,%ax
    16a2:	66 89 c2             	mov    %ax,%dx
    16a5:	66 c1 e2 04          	shl    $0x4,%dx
    16a9:	66 01 d0             	add    %dx,%ax
    16ac:	66 05 a0 41          	add    $0x41a0,%ax
    16b0:	00 00                	add    %al,(%eax)
    16b2:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    16b9:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = READY;
    16bb:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16c0:	66 c1 e0 02          	shl    $0x2,%ax
    16c4:	66 89 c2             	mov    %ax,%dx
    16c7:	66 c1 e2 04          	shl    $0x4,%dx
    16cb:	66 01 d0             	add    %dx,%ax
    16ce:	66 05 b0 41          	add    $0x41b0,%ax
    16d2:	00 00                	add    %al,(%eax)
    16d4:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    16db:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    16dd:	67 66 ff 75 08       	pushw  0x8(%di)
    16e2:	66 68 80 57          	pushw  $0x5780
    16e6:	00 00                	add    %al,(%eax)
    16e8:	66 e8 89 09          	callw  2075 <size+0x11>
    16ec:	00 00                	add    %al,(%eax)
    16ee:	66 83 c4 08          	add    $0x8,%sp
    PCB_list[index ].eflags = 512;
    16f2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16f7:	66 c1 e0 02          	shl    $0x2,%ax
    16fb:	66 89 c2             	mov    %ax,%dx
    16fe:	66 c1 e2 04          	shl    $0x4,%dx
    1702:	66 01 d0             	add    %dx,%ax
    1705:	66 05 b0 41          	add    $0x41b0,%ax
    1709:	00 00                	add    %al,(%eax)
    170b:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    1712:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    1714:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1719:	66 c1 e0 02          	shl    $0x2,%ax
    171d:	66 89 c2             	mov    %ax,%dx
    1720:	66 c1 e2 04          	shl    $0x4,%dx
    1724:	66 01 d0             	add    %dx,%ax
    1727:	67 66 8d 90 b0 41    	lea    0x41b0(%bx,%si),%dx
    172d:	00 00                	add    %al,(%eax)
    172f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1734:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 0;
    1739:	67 66 8b 45 08       	mov    0x8(%di),%ax
    173e:	66 c1 e0 02          	shl    $0x2,%ax
    1742:	66 89 c2             	mov    %ax,%dx
    1745:	66 c1 e2 04          	shl    $0x4,%dx
    1749:	66 01 d0             	add    %dx,%ax
    174c:	66 05 c0 41          	add    $0x41c0,%ax
    1750:	00 00                	add    %al,(%eax)
    1752:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1758:	00 00                	add    %al,(%eax)
}
    175a:	66 c9                	leavew 
    175c:	66 c3                	retw   

0000175e <Set_PCB>:
void Set_PCB(){
    175e:	66 55                	push   %bp
    1760:	66 89 e5             	mov    %sp,%bp
    1763:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    1767:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    176e:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    1770:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1777:	00 00                	add    %al,(%eax)
    1779:	eb 27                	jmp    17a2 <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    177b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1780:	66 c1 e0 02          	shl    $0x2,%ax
    1784:	66 89 c2             	mov    %ax,%dx
    1787:	66 c1 e2 04          	shl    $0x4,%dx
    178b:	66 01 d0             	add    %dx,%ax
    178e:	66 05 b0 41          	add    $0x41b0,%ax
    1792:	00 00                	add    %al,(%eax)
    1794:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    179b:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 0;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    179d:	67 66 ff 45 fc       	incw   -0x4(%di)
    17a2:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    17a8:	7e d1                	jle    177b <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    17aa:	66 c9                	leavew 
    17ac:	66 c3                	retw   

000017ae <sys_schedule>:
int sch_index;
int current_index ;
void sys_schedule(){
    17ae:	66 55                	push   %bp
    17b0:	66 89 e5             	mov    %sp,%bp
    int i,j;
    if(isempty(&readyqueue) != 1){
    17b3:	66 68 80 57          	pushw  $0x5780
    17b7:	00 00                	add    %al,(%eax)
    17b9:	66 e8 88 08          	callw  2045 <stack_copy+0x35>
    17bd:	00 00                	add    %al,(%eax)
    17bf:	66 83 c4 04          	add    $0x4,%sp
    17c3:	66 83 f8 01          	cmp    $0x1,%ax
    17c7:	0f 84 e0 00 66 a1    	je     a16618ad <_end+0xa165c0a9>
        current_index = _CurrentProg - PCB_list;
    17cd:	e4 46                	in     $0x46,%al
    17cf:	66 89 c2             	mov    %ax,%dx
    17d2:	66 b8 80 41          	mov    $0x4180,%ax
    17d6:	00 00                	add    %al,(%eax)
    17d8:	66 29 c2             	sub    %ax,%dx
    17db:	66 89 d0             	mov    %dx,%ax
    17de:	66 c1 f8 02          	sar    $0x2,%ax
    17e2:	66 89 c2             	mov    %ax,%dx
    17e5:	66 89 d0             	mov    %dx,%ax
    17e8:	66 01 c0             	add    %ax,%ax
    17eb:	66 01 d0             	add    %dx,%ax
    17ee:	67 66 8d 14          	lea    (%si),%dx
    17f2:	85 00                	test   %eax,(%eax)
    17f4:	00 00                	add    %al,(%eax)
    17f6:	00 66 01             	add    %ah,0x1(%esi)
    17f9:	d0 66 89             	shlb   -0x77(%esi)
    17fc:	c2 66 c1             	ret    $0xc166
    17ff:	e2 08                	loop   1809 <sys_schedule+0x5b>
    1801:	66 01 d0             	add    %dx,%ax
    1804:	66 89 c2             	mov    %ax,%dx
    1807:	66 c1 e2 10          	shl    $0x10,%dx
    180b:	66 01 d0             	add    %dx,%ax
    180e:	66 f7 d8             	neg    %ax
    1811:	66 a3 e8 46 66 a1    	mov    %ax,0xa16646e8
        if(_CurrentProg -> prg_status == RUN){
    1817:	e4 46                	in     $0x46,%al
    1819:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    181e:	66 83 f8 01          	cmp    $0x1,%ax
    1822:	75 23                	jne    1847 <sys_schedule+0x99>
            _CurrentProg -> prg_status = READY;
    1824:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    182a:	c7 40 38 03 00 00 00 	movl   $0x3,0x38(%eax)
            enqueue(&readyqueue,current_index);
    1831:	66 a1 e8 46 66 50    	mov    0x506646e8,%ax
    1837:	66 68 80 57          	pushw  $0x5780
    183b:	00 00                	add    %al,(%eax)
    183d:	66 e8 34 08          	callw  2075 <size+0x11>
    1841:	00 00                	add    %al,(%eax)
    1843:	66 83 c4 08          	add    $0x8,%sp
        }
        dequeue(&readyqueue,&sch_index);
    1847:	66 68 d0 46          	pushw  $0x46d0
    184b:	00 00                	add    %al,(%eax)
    184d:	66 68 80 57          	pushw  $0x5780
    1851:	00 00                	add    %al,(%eax)
    1853:	66 e8 8a 08          	callw  20e1 <enqueue+0x6a>
    1857:	00 00                	add    %al,(%eax)
    1859:	66 83 c4 08          	add    $0x8,%sp
        if(PCB_list[sch_index].prg_status == READY){
    185d:	66 a1 d0 46 66 c1    	mov    0xc16646d0,%ax
    1863:	e0 02                	loopne 1867 <sys_schedule+0xb9>
    1865:	66 89 c2             	mov    %ax,%dx
    1868:	66 c1 e2 04          	shl    $0x4,%dx
    186c:	66 01 d0             	add    %dx,%ax
    186f:	66 05 b0 41          	add    $0x41b0,%ax
    1873:	00 00                	add    %al,(%eax)
    1875:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    187a:	66 83 f8 03          	cmp    $0x3,%ax
    187e:	75 2b                	jne    18ab <sys_schedule+0xfd>
            _CurrentProg = PCB_list + sch_index;
    1880:	66 a1 d0 46 66 c1    	mov    0xc16646d0,%ax
    1886:	e0 02                	loopne 188a <sys_schedule+0xdc>
    1888:	66 89 c2             	mov    %ax,%dx
    188b:	66 c1 e2 04          	shl    $0x4,%dx
    188f:	66 01 d0             	add    %dx,%ax
    1892:	66 05 80 41          	add    $0x4180,%ax
    1896:	00 00                	add    %al,(%eax)
    1898:	66 a3 e4 46 66 a1    	mov    %ax,0xa16646e4
            _CurrentProg -> prg_status = RUN;
    189e:	e4 46                	in     $0x46,%al
    18a0:	67 66 c7 40 38 01 00 	movw   $0x1,0x38(%bx,%si)
    18a7:	00 00                	add    %al,(%eax)
            return;
    18a9:	eb 0a                	jmp    18b5 <sys_schedule+0x107>
        }
    }
    _CurrentProg = PCB_list ;
    18ab:	66 c7 06 e4 46       	movw   $0x46e4,(%esi)
    18b0:	80 41 00 00          	addb   $0x0,0x0(%ecx)
    return;
    18b4:	90                   	nop
    
}
    18b5:	66 c9                	leavew 
    18b7:	66 c3                	retw   

000018b9 <sys_exit>:
void sys_exit(){
    18b9:	66 55                	push   %bp
    18bb:	66 89 e5             	mov    %sp,%bp
    18be:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    18c2:	fa                   	cli    
    int index = _CurrentProg - PCB_list;
    18c3:	66 a1 e4 46 66 89    	mov    0x896646e4,%ax
    18c9:	c2 66 b8             	ret    $0xb866
    18cc:	80 41 00 00          	addb   $0x0,0x0(%ecx)
    18d0:	66 29 c2             	sub    %ax,%dx
    18d3:	66 89 d0             	mov    %dx,%ax
    18d6:	66 c1 f8 02          	sar    $0x2,%ax
    18da:	66 89 c2             	mov    %ax,%dx
    18dd:	66 89 d0             	mov    %dx,%ax
    18e0:	66 01 c0             	add    %ax,%ax
    18e3:	66 01 d0             	add    %dx,%ax
    18e6:	67 66 8d 14          	lea    (%si),%dx
    18ea:	85 00                	test   %eax,(%eax)
    18ec:	00 00                	add    %al,(%eax)
    18ee:	00 66 01             	add    %ah,0x1(%esi)
    18f1:	d0 66 89             	shlb   -0x77(%esi)
    18f4:	c2 66 c1             	ret    $0xc166
    18f7:	e2 08                	loop   1901 <sys_exit+0x48>
    18f9:	66 01 d0             	add    %dx,%ax
    18fc:	66 89 c2             	mov    %ax,%dx
    18ff:	66 c1 e2 10          	shl    $0x10,%dx
    1903:	66 01 d0             	add    %dx,%ax
    1906:	66 f7 d8             	neg    %ax
    1909:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    rmele(&readyqueue,index);
    190e:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1913:	66 68 80 57          	pushw  $0x5780
    1917:	00 00                	add    %al,(%eax)
    1919:	66 e8 68 08          	callw  2185 <init_queue+0x30>
    191d:	00 00                	add    %al,(%eax)
    191f:	66 83 c4 08          	add    $0x8,%sp
    _CurrentProg -> prg_status = EXIT;
    1923:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    1929:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    __asm__("sti\n");
    1930:	fb                   	sti    
}
    1931:	66 c9                	leavew 
    1933:	66 c3                	retw   

00001935 <sys_bolocked>:



int queuesize,tmp;//一定要是全局，否则dequeue无法将tmp修改
void sys_bolocked(int index){
    1935:	66 55                	push   %bp
    1937:	66 89 e5             	mov    %sp,%bp
    193a:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    193e:	fa                   	cli    
    PCB_list[index].prg_status = BLOCKED;
    193f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1944:	66 c1 e0 02          	shl    $0x2,%ax
    1948:	66 89 c2             	mov    %ax,%dx
    194b:	66 c1 e2 04          	shl    $0x4,%dx
    194f:	66 01 d0             	add    %dx,%ax
    1952:	66 05 b0 41          	add    $0x41b0,%ax
    1956:	00 00                	add    %al,(%eax)
    1958:	67 66 c7 40 08 02 00 	movw   $0x2,0x8(%bx,%si)
    195f:	00 00                	add    %al,(%eax)
    enqueue(&blockqueue,index);
    1961:	67 66 ff 75 08       	pushw  0x8(%di)
    1966:	66 68 e0 40          	pushw  $0x40e0
    196a:	00 00                	add    %al,(%eax)
    196c:	66 e8 05 07          	callw  2075 <size+0x11>
    1970:	00 00                	add    %al,(%eax)
    1972:	66 83 c4 08          	add    $0x8,%sp
    queuesize = size(&readyqueue);
    1976:	66 68 80 57          	pushw  $0x5780
    197a:	00 00                	add    %al,(%eax)
    197c:	66 e8 e2 06          	callw  2062 <isempty+0x1b>
    1980:	00 00                	add    %al,(%eax)
    1982:	66 83 c4 04          	add    $0x4,%sp
    1986:	66 a3 c8 40 67 66    	mov    %ax,0x666740c8
    int i = 0;
    198c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    1993:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    199a:	00 00                	add    %al,(%eax)
    199c:	eb 3c                	jmp    19da <sys_bolocked+0xa5>
        dequeue(&readyqueue,&tmp);
    199e:	66 68 c4 40          	pushw  $0x40c4
    19a2:	00 00                	add    %al,(%eax)
    19a4:	66 68 80 57          	pushw  $0x5780
    19a8:	00 00                	add    %al,(%eax)
    19aa:	66 e8 33 07          	callw  20e1 <enqueue+0x6a>
    19ae:	00 00                	add    %al,(%eax)
    19b0:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    19b4:	66 a1 c4 40 67 66    	mov    0x666740c4,%ax
    19ba:	39 45 08             	cmp    %eax,0x8(%ebp)
    19bd:	74 16                	je     19d5 <sys_bolocked+0xa0>
            enqueue(&readyqueue,tmp);
    19bf:	66 a1 c4 40 66 50    	mov    0x506640c4,%ax
    19c5:	66 68 80 57          	pushw  $0x5780
    19c9:	00 00                	add    %al,(%eax)
    19cb:	66 e8 a6 06          	callw  2075 <size+0x11>
    19cf:	00 00                	add    %al,(%eax)
    19d1:	66 83 c4 08          	add    $0x8,%sp
    __asm__("cli\n");
    PCB_list[index].prg_status = BLOCKED;
    enqueue(&blockqueue,index);
    queuesize = size(&readyqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    19d5:	67 66 ff 45 fc       	incw   -0x4(%di)
    19da:	66 a1 c8 40 67 66    	mov    0x666740c8,%ax
    19e0:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    19e3:	7c b9                	jl     199e <sys_bolocked+0x69>
        dequeue(&readyqueue,&tmp);
        if(index != tmp){
            enqueue(&readyqueue,tmp);
        }
    }
    __asm__("sti\n");
    19e5:	fb                   	sti    
}
    19e6:	66 c9                	leavew 
    19e8:	66 c3                	retw   

000019ea <sys_wakeup>:
void sys_wakeup(int index){
    19ea:	66 55                	push   %bp
    19ec:	66 89 e5             	mov    %sp,%bp
    19ef:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    19f3:	fa                   	cli    
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    19f4:	66 68 e0 40          	pushw  $0x40e0
    19f8:	00 00                	add    %al,(%eax)
    19fa:	66 e8 64 06          	callw  2062 <isempty+0x1b>
    19fe:	00 00                	add    %al,(%eax)
    1a00:	66 83 c4 04          	add    $0x4,%sp
    1a04:	66 a3 c8 40 67 66    	mov    %ax,0x666740c8
    int i = 0;
    1a0a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    1a11:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1a18:	00 00                	add    %al,(%eax)
    1a1a:	eb 3c                	jmp    1a58 <sys_wakeup+0x6e>
        dequeue(&blockqueue,&tmp);
    1a1c:	66 68 c4 40          	pushw  $0x40c4
    1a20:	00 00                	add    %al,(%eax)
    1a22:	66 68 e0 40          	pushw  $0x40e0
    1a26:	00 00                	add    %al,(%eax)
    1a28:	66 e8 b5 06          	callw  20e1 <enqueue+0x6a>
    1a2c:	00 00                	add    %al,(%eax)
    1a2e:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    1a32:	66 a1 c4 40 67 66    	mov    0x666740c4,%ax
    1a38:	39 45 08             	cmp    %eax,0x8(%ebp)
    1a3b:	74 16                	je     1a53 <sys_wakeup+0x69>
            enqueue(&blockqueue,tmp);
    1a3d:	66 a1 c4 40 66 50    	mov    0x506640c4,%ax
    1a43:	66 68 e0 40          	pushw  $0x40e0
    1a47:	00 00                	add    %al,(%eax)
    1a49:	66 e8 28 06          	callw  2075 <size+0x11>
    1a4d:	00 00                	add    %al,(%eax)
    1a4f:	66 83 c4 08          	add    $0x8,%sp
void sys_wakeup(int index){
    __asm__("cli\n");
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    1a53:	67 66 ff 45 fc       	incw   -0x4(%di)
    1a58:	66 a1 c8 40 67 66    	mov    0x666740c8,%ax
    1a5e:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1a61:	7c b9                	jl     1a1c <sys_wakeup+0x32>
        dequeue(&blockqueue,&tmp);
        if(index != tmp){
            enqueue(&blockqueue,tmp);
        }
    }
    PCB_list[index].prg_status = READY;
    1a63:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a68:	66 c1 e0 02          	shl    $0x2,%ax
    1a6c:	66 89 c2             	mov    %ax,%dx
    1a6f:	66 c1 e2 04          	shl    $0x4,%dx
    1a73:	66 01 d0             	add    %dx,%ax
    1a76:	66 05 b0 41          	add    $0x41b0,%ax
    1a7a:	00 00                	add    %al,(%eax)
    1a7c:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    1a83:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    1a85:	67 66 ff 75 08       	pushw  0x8(%di)
    1a8a:	66 68 80 57          	pushw  $0x5780
    1a8e:	00 00                	add    %al,(%eax)
    1a90:	66 e8 e1 05          	callw  2075 <size+0x11>
    1a94:	00 00                	add    %al,(%eax)
    1a96:	66 83 c4 08          	add    $0x8,%sp
    __asm__("sti\n");
    1a9a:	fb                   	sti    
}
    1a9b:	66 c9                	leavew 
    1a9d:	66 c3                	retw   

00001a9f <sys_run>:
void sys_run(){
    1a9f:	66 55                	push   %bp
    1aa1:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    1aa4:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    1aaa:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    1ab1:	66 5d                	pop    %bp
    1ab3:	66 c3                	retw   

00001ab5 <do_fork>:

int do_fork(){
    1ab5:	66 55                	push   %bp
    1ab7:	66 89 e5             	mov    %sp,%bp
    1aba:	66 83 ec 08          	sub    $0x8,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    1abe:	67 66 c7 45 fc c4 41 	movw   $0x41c4,-0x4(%di)
    1ac5:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN )    fork_prg = fork_prg + 1;//应该增加used位，防止被覆盖
    1ac7:	eb 06                	jmp    1acf <do_fork+0x1a>
    1ac9:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    1acf:	67 66 81 7d fc d0 46 	cmpw   $0x46d0,-0x4(%di)
    1ad6:	00 00                	add    %al,(%eax)
    1ad8:	73 10                	jae    1aea <do_fork+0x35>
    1ada:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1adf:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    1ae4:	66 83 f8 01          	cmp    $0x1,%ax
    1ae8:	74 df                	je     1ac9 <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    1aea:	67 66 81 7d fc 8c 46 	cmpw   $0x468c,-0x4(%di)
    1af1:	00 00                	add    %al,(%eax)
    1af3:	76 0f                	jbe    1b04 <do_fork+0x4f>
    1af5:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    1afb:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    1b01:	e9 42 02 66 e8       	jmp    e8661d48 <_end+0xe865c544>
    else{
        _Schedule_once();
    1b06:	1c e9                	sbb    $0xe9,%al
    1b08:	ff                   	(bad)  
    1b09:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    1b0c:	ec                   	in     (%dx),%al
    1b0d:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    1b0e:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    1b14:	ff 75 fc             	pushl  -0x4(%ebp)
    1b17:	66 50                	push   %ax
    1b19:	66 e8 e6 03          	callw  1f03 <counter+0x62>
    1b1d:	00 00                	add    %al,(%eax)
    1b1f:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    1b23:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    1b27:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1b2c:	66 b8 80 41          	mov    $0x4180,%ax
    1b30:	00 00                	add    %al,(%eax)
    1b32:	66 29 c2             	sub    %ax,%dx
    1b35:	66 89 d0             	mov    %dx,%ax
    1b38:	66 c1 f8 02          	sar    $0x2,%ax
    1b3c:	66 89 c2             	mov    %ax,%dx
    1b3f:	66 89 d0             	mov    %dx,%ax
    1b42:	66 01 c0             	add    %ax,%ax
    1b45:	66 01 d0             	add    %dx,%ax
    1b48:	67 66 8d 14          	lea    (%si),%dx
    1b4c:	85 00                	test   %eax,(%eax)
    1b4e:	00 00                	add    %al,(%eax)
    1b50:	00 66 01             	add    %ah,0x1(%esi)
    1b53:	d0 66 89             	shlb   -0x77(%esi)
    1b56:	c2 66 c1             	ret    $0xc166
    1b59:	e2 08                	loop   1b63 <do_fork+0xae>
    1b5b:	66 01 d0             	add    %dx,%ax
    1b5e:	66 89 c2             	mov    %ax,%dx
    1b61:	66 c1 e2 10          	shl    $0x10,%dx
    1b65:	66 01 d0             	add    %dx,%ax
    1b68:	66 f7 d8             	neg    %ax
    1b6b:	66 89 c2             	mov    %ax,%dx
    1b6e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1b73:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    1b78:	66 a1 e4 46 66 89    	mov    0x896646e4,%ax
    1b7e:	c2 66 b8             	ret    $0xb866
    1b81:	80 41 00 00          	addb   $0x0,0x0(%ecx)
    1b85:	66 29 c2             	sub    %ax,%dx
    1b88:	66 89 d0             	mov    %dx,%ax
    1b8b:	66 c1 f8 02          	sar    $0x2,%ax
    1b8f:	66 89 c2             	mov    %ax,%dx
    1b92:	66 89 d0             	mov    %dx,%ax
    1b95:	66 01 c0             	add    %ax,%ax
    1b98:	66 01 d0             	add    %dx,%ax
    1b9b:	67 66 8d 14          	lea    (%si),%dx
    1b9f:	85 00                	test   %eax,(%eax)
    1ba1:	00 00                	add    %al,(%eax)
    1ba3:	00 66 01             	add    %ah,0x1(%esi)
    1ba6:	d0 66 89             	shlb   -0x77(%esi)
    1ba9:	c2 66 c1             	ret    $0xc166
    1bac:	e2 08                	loop   1bb6 <do_fork+0x101>
    1bae:	66 01 d0             	add    %dx,%ax
    1bb1:	66 89 c2             	mov    %ax,%dx
    1bb4:	66 c1 e2 10          	shl    $0x10,%dx
    1bb8:	66 01 d0             	add    %dx,%ax
    1bbb:	66 f7 d8             	neg    %ax
    1bbe:	66 89 c2             	mov    %ax,%dx
    1bc1:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1bc6:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    1bcb:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    1bd1:	8b 50 20             	mov    0x20(%eax),%edx
    1bd4:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1bd9:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    1bde:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1be3:	66 b8 80 41          	mov    $0x4180,%ax
    1be7:	00 00                	add    %al,(%eax)
    1be9:	66 29 c2             	sub    %ax,%dx
    1bec:	66 89 d0             	mov    %dx,%ax
    1bef:	66 c1 f8 02          	sar    $0x2,%ax
    1bf3:	66 89 c2             	mov    %ax,%dx
    1bf6:	66 89 d0             	mov    %dx,%ax
    1bf9:	66 01 c0             	add    %ax,%ax
    1bfc:	66 01 d0             	add    %dx,%ax
    1bff:	67 66 8d 14          	lea    (%si),%dx
    1c03:	85 00                	test   %eax,(%eax)
    1c05:	00 00                	add    %al,(%eax)
    1c07:	00 66 01             	add    %ah,0x1(%esi)
    1c0a:	d0 66 89             	shlb   -0x77(%esi)
    1c0d:	c2 66 c1             	ret    $0xc166
    1c10:	e2 08                	loop   1c1a <do_fork+0x165>
    1c12:	66 01 d0             	add    %dx,%ax
    1c15:	66 89 c2             	mov    %ax,%dx
    1c18:	66 c1 e2 10          	shl    $0x10,%dx
    1c1c:	66 01 d0             	add    %dx,%ax
    1c1f:	66 f7 d8             	neg    %ax
    1c22:	66 83 c0 02          	add    $0x2,%ax
    1c26:	66 c1 e0 0c          	shl    $0xc,%ax
    1c2a:	66 89 c2             	mov    %ax,%dx
    1c2d:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1c32:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    1c37:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    1c3d:	8b 50 30             	mov    0x30(%eax),%edx
    1c40:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1c45:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    1c4a:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1c4f:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    1c56:	00 00                	add    %al,(%eax)
        
        int index = fork_prg - PCB_list;
    1c58:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1c5d:	66 b8 80 41          	mov    $0x4180,%ax
    1c61:	00 00                	add    %al,(%eax)
    1c63:	66 29 c2             	sub    %ax,%dx
    1c66:	66 89 d0             	mov    %dx,%ax
    1c69:	66 c1 f8 02          	sar    $0x2,%ax
    1c6d:	66 89 c2             	mov    %ax,%dx
    1c70:	66 89 d0             	mov    %dx,%ax
    1c73:	66 01 c0             	add    %ax,%ax
    1c76:	66 01 d0             	add    %dx,%ax
    1c79:	67 66 8d 14          	lea    (%si),%dx
    1c7d:	85 00                	test   %eax,(%eax)
    1c7f:	00 00                	add    %al,(%eax)
    1c81:	00 66 01             	add    %ah,0x1(%esi)
    1c84:	d0 66 89             	shlb   -0x77(%esi)
    1c87:	c2 66 c1             	ret    $0xc166
    1c8a:	e2 08                	loop   1c94 <do_fork+0x1df>
    1c8c:	66 01 d0             	add    %dx,%ax
    1c8f:	66 89 c2             	mov    %ax,%dx
    1c92:	66 c1 e2 10          	shl    $0x10,%dx
    1c96:	66 01 d0             	add    %dx,%ax
    1c99:	66 f7 d8             	neg    %ax
    1c9c:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
        __asm__("sub $6,%esp");
    1ca1:	66 83 ec 06          	sub    $0x6,%sp
        enqueue(&readyqueue,index); 
    1ca5:	67 66 ff 75 f8       	pushw  -0x8(%di)
    1caa:	66 68 80 57          	pushw  $0x5780
    1cae:	00 00                	add    %al,(%eax)
    1cb0:	66 e8 c1 03          	callw  2075 <size+0x11>
    1cb4:	00 00                	add    %al,(%eax)
    1cb6:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    1cba:	66 83 c4 06          	add    $0x6,%sp
        _Schedule_once();
    1cbe:	66 e8 62 e7          	callw  424 <S+0x14>
    1cc2:	ff                   	(bad)  
    1cc3:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    1cc6:	ec                   	in     (%dx),%al
    1cc7:	06                   	push   %es
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    1cc8:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1ccd:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1cd2:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    1cd8:	8b 50 28             	mov    0x28(%eax),%edx
    1cdb:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    1ce1:	8b 40 24             	mov    0x24(%eax),%eax
    1ce4:	66 51                	push   %cx
    1ce6:	66 52                	push   %dx
    1ce8:	66 50                	push   %ax
    1cea:	66 e8 25 e6          	callw  313 <Message31+0x4>
    1cee:	ff                   	(bad)  
    1cef:	ff 66 83             	jmp    *-0x7d(%esi)
    1cf2:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
        __asm__("add $6,%esp");
    1cf5:	83 c4 06             	add    $0x6,%esp
        fork_prg -> ip = _CurrentProg -> ip;
    1cf8:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    1cfe:	8b 50 2c             	mov    0x2c(%eax),%edx
    1d01:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1d06:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    1d0b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1d10:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1d16:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    1d18:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    1d1e:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1d21:	75 08                	jne    1d2b <do_fork+0x276>
            return 0;
    1d23:	66 b8 00 00          	mov    $0x0,%ax
    1d27:	00 00                	add    %al,(%eax)
    1d29:	eb 1b                	jmp    1d46 <do_fork+0x291>
        }
        _CurrentProg -> eax = _CurrentProg -> id;
    1d2b:	66 a1 e4 46 66 8b    	mov    0x8b6646e4,%ax
    1d31:	16                   	push   %ss
    1d32:	e4 46                	in     $0x46,%al
    1d34:	67 66 8b 52 3c       	mov    0x3c(%bp,%si),%dx
    1d39:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    1d3d:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    1d43:	8b 00                	mov    (%eax),%eax
    1d45:	90                   	nop
    }
}
    1d46:	66 c9                	leavew 
    1d48:	66 c3                	retw   

00001d4a <sys_exit_fork>:
void sys_exit_fork(char ch){
    1d4a:	66 55                	push   %bp
    1d4c:	66 89 e5             	mov    %sp,%bp
    1d4f:	66 83 ec 0c          	sub    $0xc,%sp
    1d53:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1d58:	67 88 45 f4          	mov    %al,-0xc(%di)
    int current_id = _CurrentProg - PCB_list;
    1d5c:	66 a1 e4 46 66 89    	mov    0x896646e4,%ax
    1d62:	c2 66 b8             	ret    $0xb866
    1d65:	80 41 00 00          	addb   $0x0,0x0(%ecx)
    1d69:	66 29 c2             	sub    %ax,%dx
    1d6c:	66 89 d0             	mov    %dx,%ax
    1d6f:	66 c1 f8 02          	sar    $0x2,%ax
    1d73:	66 89 c2             	mov    %ax,%dx
    1d76:	66 89 d0             	mov    %dx,%ax
    1d79:	66 01 c0             	add    %ax,%ax
    1d7c:	66 01 d0             	add    %dx,%ax
    1d7f:	67 66 8d 14          	lea    (%si),%dx
    1d83:	85 00                	test   %eax,(%eax)
    1d85:	00 00                	add    %al,(%eax)
    1d87:	00 66 01             	add    %ah,0x1(%esi)
    1d8a:	d0 66 89             	shlb   -0x77(%esi)
    1d8d:	c2 66 c1             	ret    $0xc166
    1d90:	e2 08                	loop   1d9a <sys_exit_fork+0x50>
    1d92:	66 01 d0             	add    %dx,%ax
    1d95:	66 89 c2             	mov    %ax,%dx
    1d98:	66 c1 e2 10          	shl    $0x10,%dx
    1d9c:	66 01 d0             	add    %dx,%ax
    1d9f:	66 f7 d8             	neg    %ax
    1da2:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    int index = _CurrentProg -> fid;
    1da7:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    1dad:	8b 40 40             	mov    0x40(%eax),%eax
    1db0:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    sys_wakeup(index);
    1db5:	67 66 ff 75 f8       	pushw  -0x8(%di)
    1dba:	66 e8 2a fc          	callw  19e8 <sys_bolocked+0xb3>
    1dbe:	ff                   	(bad)  
    1dbf:	ff 66 83             	jmp    *-0x7d(%esi)
    1dc2:	c4 04 66             	les    (%esi,%eiz,2),%eax
    PCB_list[_CurrentProg -> fid].eax = ch;
    1dc5:	a1 e4 46 67 66       	mov    0x666746e4,%eax
    1dca:	8b 40 40             	mov    0x40(%eax),%eax
    1dcd:	67 66 0f be 55 f4    	movsbw -0xc(%di),%dx
    1dd3:	66 c1 e0 02          	shl    $0x2,%ax
    1dd7:	66 89 c1             	mov    %ax,%cx
    1dda:	66 c1 e1 04          	shl    $0x4,%cx
    1dde:	66 01 c8             	add    %cx,%ax
    1de1:	66 05 80 41          	add    $0x4180,%ax
    1de5:	00 00                	add    %al,(%eax)
    1de7:	67 66 89 10          	mov    %dx,(%bx,%si)
    _CurrentProg -> prg_status = EXIT;
    1deb:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    1df1:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    rmele(&readyqueue,current_id);
    1df8:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1dfd:	66 68 80 57          	pushw  $0x5780
    1e01:	00 00                	add    %al,(%eax)
    1e03:	66 e8 7e 03          	callw  2185 <init_queue+0x30>
    1e07:	00 00                	add    %al,(%eax)
    1e09:	66 83 c4 08          	add    $0x8,%sp
    _Schedule();
    1e0d:	66 e8 29 e6          	callw  43a <_fork_user+0x9>
    1e11:	ff                   	(bad)  
    1e12:	ff 66 c9             	jmp    *-0x37(%esi)
}
    1e15:	66 c3                	retw   

00001e17 <sys_wait>:
int sys_wait(){
    1e17:	66 55                	push   %bp
    1e19:	66 89 e5             	mov    %sp,%bp
    1e1c:	66 83 ec 04          	sub    $0x4,%sp
    int index = _CurrentProg - PCB_list;
    1e20:	66 a1 e4 46 66 89    	mov    0x896646e4,%ax
    1e26:	c2 66 b8             	ret    $0xb866
    1e29:	80 41 00 00          	addb   $0x0,0x0(%ecx)
    1e2d:	66 29 c2             	sub    %ax,%dx
    1e30:	66 89 d0             	mov    %dx,%ax
    1e33:	66 c1 f8 02          	sar    $0x2,%ax
    1e37:	66 89 c2             	mov    %ax,%dx
    1e3a:	66 89 d0             	mov    %dx,%ax
    1e3d:	66 01 c0             	add    %ax,%ax
    1e40:	66 01 d0             	add    %dx,%ax
    1e43:	67 66 8d 14          	lea    (%si),%dx
    1e47:	85 00                	test   %eax,(%eax)
    1e49:	00 00                	add    %al,(%eax)
    1e4b:	00 66 01             	add    %ah,0x1(%esi)
    1e4e:	d0 66 89             	shlb   -0x77(%esi)
    1e51:	c2 66 c1             	ret    $0xc166
    1e54:	e2 08                	loop   1e5e <sys_wait+0x47>
    1e56:	66 01 d0             	add    %dx,%ax
    1e59:	66 89 c2             	mov    %ax,%dx
    1e5c:	66 c1 e2 10          	shl    $0x10,%dx
    1e60:	66 01 d0             	add    %dx,%ax
    1e63:	66 f7 d8             	neg    %ax
    1e66:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_bolocked(index);
    1e6b:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1e70:	66 e8 bf fa          	callw  1933 <sys_exit+0x7a>
    1e74:	ff                   	(bad)  
    1e75:	ff 66 83             	jmp    *-0x7d(%esi)
    1e78:	c4 04 66             	les    (%esi,%eiz,2),%eax
    _Schedule();
    1e7b:	e8 bc e5 ff ff       	call   43c <_Schedule>
    return _CurrentProg -> eax;
    1e80:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    1e86:	8b 00                	mov    (%eax),%eax
}
    1e88:	66 c9                	leavew 
    1e8a:	66 c3                	retw   

00001e8c <thread_join>:
void thread_join(){
    1e8c:	66 55                	push   %bp
    1e8e:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    1e91:	90                   	nop
    1e92:	66 e8 09 00          	callw  1e9f <thread_join+0x13>
    1e96:	00 00                	add    %al,(%eax)
    1e98:	66 85 c0             	test   %ax,%ax
    1e9b:	75 f5                	jne    1e92 <thread_join+0x6>
    }
}
    1e9d:	66 5d                	pop    %bp
    1e9f:	66 c3                	retw   

00001ea1 <counter>:
int counter(){
    1ea1:	66 55                	push   %bp
    1ea3:	66 89 e5             	mov    %sp,%bp
    1ea6:	66 83 ec 08          	sub    $0x8,%sp
   // __asm__("cli\n");
    int i = 0;
    1eaa:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1eb1:	00 00                	add    %al,(%eax)
    int count = 0;
    1eb3:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    1eba:	00 00                	add    %al,(%eax)
    for(i = 1;i < PCB_NUMMER;i ++){
    1ebc:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    1ec3:	00 00                	add    %al,(%eax)
    1ec5:	eb 2d                	jmp    1ef4 <counter+0x53>
        if(PCB_list[i].prg_status != EXIT){
    1ec7:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1ecc:	66 c1 e0 02          	shl    $0x2,%ax
    1ed0:	66 89 c2             	mov    %ax,%dx
    1ed3:	66 c1 e2 04          	shl    $0x4,%dx
    1ed7:	66 01 d0             	add    %dx,%ax
    1eda:	66 05 b0 41          	add    $0x41b0,%ax
    1ede:	00 00                	add    %al,(%eax)
    1ee0:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1ee5:	66 85 c0             	test   %ax,%ax
    1ee8:	74 05                	je     1eef <counter+0x4e>
            count ++;
    1eea:	67 66 ff 45 f8       	incw   -0x8(%di)
}
int counter(){
   // __asm__("cli\n");
    int i = 0;
    int count = 0;
    for(i = 1;i < PCB_NUMMER;i ++){
    1eef:	67 66 ff 45 fc       	incw   -0x4(%di)
    1ef4:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    1efa:	7e cb                	jle    1ec7 <counter+0x26>
        if(PCB_list[i].prg_status != EXIT){
            count ++;
        }
    }
    //__asm__("sti\n");
    return count;
    1efc:	67 66 8b 45 f8       	mov    -0x8(%di),%ax

}
    1f01:	66 c9                	leavew 
    1f03:	66 c3                	retw   

00001f05 <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    1f05:	66 55                	push   %bp
    1f07:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    1f0a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f0f:	67 66 8b 10          	mov    (%bx,%si),%dx
    1f13:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f18:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    1f1c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f21:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    1f26:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f2b:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    1f30:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f35:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    1f3a:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f3f:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    1f44:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f49:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    1f4e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f53:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    1f58:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f5d:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    1f62:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f67:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    1f6c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f71:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    1f76:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f7b:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    1f80:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f85:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    1f8a:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1f8f:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    1f94:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f99:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    1f9e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1fa3:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    1fa8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1fad:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    1fb2:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1fb7:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    1fbc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1fc1:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    1fc6:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1fcb:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    1fd0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1fd5:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    1fda:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1fdf:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    1fe4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1fe9:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    1fee:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1ff3:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    1ff8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ffd:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    2002:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    2007:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    200c:	66 5d                	pop    %bp
    200e:	66 c3                	retw   

00002010 <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    2010:	66 55                	push   %bp
    2012:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    2015:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    201a:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    201f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2024:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    2029:	67 66 8b 45 08       	mov    0x8(%di),%ax
    202e:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    2033:	66 51                	push   %cx
    2035:	66 52                	push   %dx
    2037:	66 50                	push   %ax
    2039:	66 e8 d6 e2          	callw  313 <Message31+0x4>
    203d:	ff                   	(bad)  
    203e:	ff 66 83             	jmp    *-0x7d(%esi)
    2041:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    2044:	c9                   	leave  
    2045:	66 c3                	retw   

00002047 <isempty>:
int isempty(struct Queue *queue){
    2047:	66 55                	push   %bp
    2049:	66 89 e5             	mov    %sp,%bp
    
    return (queue -> size == 0);
    204c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2051:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    2056:	66 85 c0             	test   %ax,%ax
    2059:	0f 94 c0             	sete   %al
    205c:	66 0f b6 c0          	movzbw %al,%ax

}
    2060:	66 5d                	pop    %bp
    2062:	66 c3                	retw   

00002064 <size>:
int size(struct Queue *queue){
    2064:	66 55                	push   %bp
    2066:	66 89 e5             	mov    %sp,%bp
    return queue -> size ;
    2069:	67 66 8b 45 08       	mov    0x8(%di),%ax
    206e:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
}
    2073:	66 5d                	pop    %bp
    2075:	66 c3                	retw   

00002077 <enqueue>:
void enqueue(struct Queue *queue,int data){
    2077:	66 55                	push   %bp
    2079:	66 89 e5             	mov    %sp,%bp
    if(queue -> size >= MAX){
    207c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2081:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    2086:	66 83 f8 1d          	cmp    $0x1d,%ax
    208a:	7e 02                	jle    208e <enqueue+0x17>
        return;
    208c:	eb 51                	jmp    20df <enqueue+0x68>
    }
    queue -> size ++;
    208e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2093:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    2098:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    209d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20a2:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    queue -> tail = (queue -> tail + 1) % MAX;
    20a7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20ac:	67 66 8b 00          	mov    (%bx,%si),%ax
    20b0:	66 40                	inc    %ax
    20b2:	66 b9 1e 00          	mov    $0x1e,%cx
    20b6:	00 00                	add    %al,(%eax)
    20b8:	66 99                	cwtd   
    20ba:	66 f7 f9             	idiv   %cx
    20bd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20c2:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> array[queue -> tail] = data;
    20c6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20cb:	67 66 8b 10          	mov    (%bx,%si),%dx
    20cf:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20d4:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    20d9:	67 66 89 4c 90       	mov    %cx,-0x70(%si)
    20de:	0c 66                	or     $0x66,%al

}
    20e0:	5d                   	pop    %ebp
    20e1:	66 c3                	retw   

000020e3 <dequeue>:
void dequeue(struct Queue *queue,int * data){
    20e3:	66 55                	push   %bp
    20e5:	66 89 e5             	mov    %sp,%bp

    if(queue -> size <= 0){
    20e8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20ed:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    20f2:	66 85 c0             	test   %ax,%ax
    20f5:	7f 02                	jg     20f9 <dequeue+0x16>
        return;
    20f7:	eb 58                	jmp    2151 <dequeue+0x6e>
    }
    queue -> size --;
    20f9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20fe:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    2103:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    2108:	67 66 8b 45 08       	mov    0x8(%di),%ax
    210d:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    *data = queue -> array[queue -> head];
    2112:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2117:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    211c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2121:	67 66 8b 54 90       	mov    -0x70(%si),%dx
    2126:	0c 67                	or     $0x67,%al
    2128:	66 8b 45 0c          	mov    0xc(%ebp),%ax
    212c:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> head = (queue -> head + 1) % MAX;
    2130:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2135:	67 66 8b 40 04       	mov    0x4(%bx,%si),%ax
    213a:	66 40                	inc    %ax
    213c:	66 b9 1e 00          	mov    $0x1e,%cx
    2140:	00 00                	add    %al,(%eax)
    2142:	66 99                	cwtd   
    2144:	66 f7 f9             	idiv   %cx
    2147:	67 66 8b 45 08       	mov    0x8(%di),%ax
    214c:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)

}
    2151:	66 5d                	pop    %bp
    2153:	66 c3                	retw   

00002155 <init_queue>:
void init_queue(struct Queue *queue){
    2155:	66 55                	push   %bp
    2157:	66 89 e5             	mov    %sp,%bp
    queue -> size = 0;
    215a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    215f:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    2166:	00 00                	add    %al,(%eax)
    queue -> tail = MAX - 1;
    2168:	67 66 8b 45 08       	mov    0x8(%di),%ax
    216d:	67 66 c7 00 1d 00    	movw   $0x1d,(%bx,%si)
    2173:	00 00                	add    %al,(%eax)
    queue -> head = 0;
    2175:	67 66 8b 45 08       	mov    0x8(%di),%ax
    217a:	67 66 c7 40 04 00 00 	movw   $0x0,0x4(%bx,%si)
    2181:	00 00                	add    %al,(%eax)
}
    2183:	66 5d                	pop    %bp
    2185:	66 c3                	retw   

00002187 <rmele>:
int rm_tmp;
int ii;
int size_of_rmqueue;
void rmele(struct Queue *queue,int data){
    2187:	66 55                	push   %bp
    2189:	66 89 e5             	mov    %sp,%bp
    size_of_rmqueue= size(queue);
    218c:	67 66 ff 75 08       	pushw  0x8(%di)
    2191:	66 e8 cd fe          	callw  2062 <isempty+0x1b>
    2195:	ff                   	(bad)  
    2196:	ff 66 83             	jmp    *-0x7d(%esi)
    2199:	c4 04 66             	les    (%esi,%eiz,2),%eax
    219c:	a3 d8 46 66 c7       	mov    %eax,0xc76646d8
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    21a1:	06                   	push   %es
    21a2:	dc 46 00             	faddl  0x0(%esi)
    21a5:	00 00                	add    %al,(%eax)
    21a7:	00 eb                	add    %ch,%bl
    21a9:	3f                   	aas    
        dequeue(queue,&rm_tmp);
    21aa:	66 68 68 57          	pushw  $0x5768
    21ae:	00 00                	add    %al,(%eax)
    21b0:	67 66 ff 75 08       	pushw  0x8(%di)
    21b5:	66 e8 28 ff          	callw  20e1 <enqueue+0x6a>
    21b9:	ff                   	(bad)  
    21ba:	ff 66 83             	jmp    *-0x7d(%esi)
    21bd:	c4 08                	les    (%eax),%ecx
        if(rm_tmp != data){
    21bf:	66 a1 68 57 67 66    	mov    0x66675768,%ax
    21c5:	3b 45 0c             	cmp    0xc(%ebp),%eax
    21c8:	74 15                	je     21df <rmele+0x58>
            enqueue(queue,rm_tmp);
    21ca:	66 a1 68 57 66 50    	mov    0x50665768,%ax
    21d0:	67 66 ff 75 08       	pushw  0x8(%di)
    21d5:	66 e8 9c fe          	callw  2075 <size+0x11>
    21d9:	ff                   	(bad)  
    21da:	ff 66 83             	jmp    *-0x7d(%esi)
    21dd:	c4 08                	les    (%eax),%ecx
int rm_tmp;
int ii;
int size_of_rmqueue;
void rmele(struct Queue *queue,int data){
    size_of_rmqueue= size(queue);
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    21df:	66 a1 dc 46 66 40    	mov    0x406646dc,%ax
    21e5:	66 a3 dc 46 66 8b    	mov    %ax,0x8b6646dc
    21eb:	16                   	push   %ss
    21ec:	dc 46 66             	faddl  0x66(%esi)
    21ef:	a1 d8 46 66 39       	mov    0x396646d8,%eax
    21f4:	c2 7c b3             	ret    $0xb37c
        dequeue(queue,&rm_tmp);
        if(rm_tmp != data){
            enqueue(queue,rm_tmp);
        }
    }
}
    21f7:	66 c9                	leavew 
    21f9:	66 c3                	retw   

000021fb <init_Semlist>:
void init_Semlist(int index){
    21fb:	66 55                	push   %bp
    21fd:	66 89 e5             	mov    %sp,%bp
    SEM_list[index].used = 0;
    2200:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2205:	66 89 d0             	mov    %dx,%ax
    2208:	66 c1 e0 02          	shl    $0x2,%ax
    220c:	66 01 d0             	add    %dx,%ax
    220f:	66 c1 e0 02          	shl    $0x2,%ax
    2213:	67 66 8d 14          	lea    (%si),%dx
    2217:	c5 00                	lds    (%eax),%eax
    2219:	00 00                	add    %al,(%eax)
    221b:	00 66 29             	add    %ah,0x29(%esi)
    221e:	c2 66 89             	ret    $0x8966
    2221:	d0 66 05             	shlb   0x5(%esi)
    2224:	80 47 00 00          	addb   $0x0,0x0(%edi)
    2228:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    222f:	00 00                	add    %al,(%eax)
    init_queue(&SEM_list[index].semaque);
    2231:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2236:	66 89 d0             	mov    %dx,%ax
    2239:	66 c1 e0 02          	shl    $0x2,%ax
    223d:	66 01 d0             	add    %dx,%ax
    2240:	66 c1 e0 02          	shl    $0x2,%ax
    2244:	67 66 8d 14          	lea    (%si),%dx
    2248:	c5 00                	lds    (%eax),%eax
    224a:	00 00                	add    %al,(%eax)
    224c:	00 66 29             	add    %ah,0x29(%esi)
    224f:	c2 67 66             	ret    $0x6667
    2252:	8d 82 00 47 00 00    	lea    0x4700(%edx),%eax
    2258:	66 83 c0 04          	add    $0x4,%ax
    225c:	66 50                	push   %ax
    225e:	66 e8 f1 fe          	callw  2153 <dequeue+0x70>
    2262:	ff                   	(bad)  
    2263:	ff 66 83             	jmp    *-0x7d(%esi)
    2266:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2269:	c9                   	leave  
    226a:	66 c3                	retw   

0000226c <do_SemGet>:
int do_SemGet(int value){
    226c:	66 55                	push   %bp
    226e:	66 89 e5             	mov    %sp,%bp
    2271:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    2275:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    227c:	00 00                	add    %al,(%eax)
    while(SEM_list[i].used == 1){
    227e:	eb 05                	jmp    2285 <do_SemGet+0x19>
        i ++;
    2280:	67 66 ff 45 fc       	incw   -0x4(%di)
    SEM_list[index].used = 0;
    init_queue(&SEM_list[index].semaque);
}
int do_SemGet(int value){
    int i = 0;
    while(SEM_list[i].used == 1){
    2285:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    228a:	66 89 d0             	mov    %dx,%ax
    228d:	66 c1 e0 02          	shl    $0x2,%ax
    2291:	66 01 d0             	add    %dx,%ax
    2294:	66 c1 e0 02          	shl    $0x2,%ax
    2298:	67 66 8d 14          	lea    (%si),%dx
    229c:	c5 00                	lds    (%eax),%eax
    229e:	00 00                	add    %al,(%eax)
    22a0:	00 66 29             	add    %ah,0x29(%esi)
    22a3:	c2 66 89             	ret    $0x8966
    22a6:	d0 66 05             	shlb   0x5(%esi)
    22a9:	80 47 00 00          	addb   $0x0,0x0(%edi)
    22ad:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    22b2:	66 83 f8 01          	cmp    $0x1,%ax
    22b6:	74 c8                	je     2280 <do_SemGet+0x14>
        i ++;
    }
    if(i < SemMax){
    22b8:	67 66 83 7d fc 1d    	cmpw   $0x1d,-0x4(%di)
    22be:	7f 7a                	jg     233a <do_SemGet+0xce>
        init_Semlist(i);
    22c0:	67 66 ff 75 fc       	pushw  -0x4(%di)
    22c5:	66 e8 30 ff          	callw  21f9 <rmele+0x72>
    22c9:	ff                   	(bad)  
    22ca:	ff 66 83             	jmp    *-0x7d(%esi)
    22cd:	c4 04 67             	les    (%edi,%eiz,2),%eax
        SEM_list[i].used = 1;
    22d0:	66 8b 55 fc          	mov    -0x4(%ebp),%dx
    22d4:	66 89 d0             	mov    %dx,%ax
    22d7:	66 c1 e0 02          	shl    $0x2,%ax
    22db:	66 01 d0             	add    %dx,%ax
    22de:	66 c1 e0 02          	shl    $0x2,%ax
    22e2:	67 66 8d 14          	lea    (%si),%dx
    22e6:	c5 00                	lds    (%eax),%eax
    22e8:	00 00                	add    %al,(%eax)
    22ea:	00 66 29             	add    %ah,0x29(%esi)
    22ed:	c2 66 89             	ret    $0x8966
    22f0:	d0 66 05             	shlb   0x5(%esi)
    22f3:	80 47 00 00          	addb   $0x0,0x0(%edi)
    22f7:	67 66 c7 40 08 01 00 	movw   $0x1,0x8(%bx,%si)
    22fe:	00 00                	add    %al,(%eax)
        SEM_list[i].count = value;
    2300:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    2305:	66 89 d0             	mov    %dx,%ax
    2308:	66 c1 e0 02          	shl    $0x2,%ax
    230c:	66 01 d0             	add    %dx,%ax
    230f:	66 c1 e0 02          	shl    $0x2,%ax
    2313:	67 66 8d 14          	lea    (%si),%dx
    2317:	c5 00                	lds    (%eax),%eax
    2319:	00 00                	add    %al,(%eax)
    231b:	00 66 29             	add    %ah,0x29(%esi)
    231e:	c2 66 89             	ret    $0x8966
    2321:	d0 67 66             	shlb   0x66(%edi)
    2324:	8d 90 00 47 00 00    	lea    0x4700(%eax),%edx
    232a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    232f:	67 66 89 02          	mov    %ax,(%bp,%si)
        return i;
    2333:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    2338:	eb 06                	jmp    2340 <do_SemGet+0xd4>
    }
    else 
        return -1;
    233a:	66 b8 ff ff          	mov    $0xffff,%ax
    233e:	ff                   	(bad)  
    233f:	ff 66 c9             	jmp    *-0x37(%esi)
}
    2342:	66 c3                	retw   

00002344 <do_SemFree>:
void do_SemFree(int s){
    2344:	66 55                	push   %bp
    2346:	66 89 e5             	mov    %sp,%bp
    SEM_list[s].used = 0;
    2349:	67 66 8b 55 08       	mov    0x8(%di),%dx
    234e:	66 89 d0             	mov    %dx,%ax
    2351:	66 c1 e0 02          	shl    $0x2,%ax
    2355:	66 01 d0             	add    %dx,%ax
    2358:	66 c1 e0 02          	shl    $0x2,%ax
    235c:	67 66 8d 14          	lea    (%si),%dx
    2360:	c5 00                	lds    (%eax),%eax
    2362:	00 00                	add    %al,(%eax)
    2364:	00 66 29             	add    %ah,0x29(%esi)
    2367:	c2 66 89             	ret    $0x8966
    236a:	d0 66 05             	shlb   0x5(%esi)
    236d:	80 47 00 00          	addb   $0x0,0x0(%edi)
    2371:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    2378:	00 00                	add    %al,(%eax)
}
    237a:	66 5d                	pop    %bp
    237c:	66 c3                	retw   

0000237e <do_P>:
int tempp;
int sem_index;
int t;
void do_P(int s){
    237e:	66 55                	push   %bp
    2380:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    2383:	fa                   	cli    
    SEM_list[s].count = SEM_list[s].count - 1;
    2384:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2389:	66 89 d0             	mov    %dx,%ax
    238c:	66 c1 e0 02          	shl    $0x2,%ax
    2390:	66 01 d0             	add    %dx,%ax
    2393:	66 c1 e0 02          	shl    $0x2,%ax
    2397:	67 66 8d 14          	lea    (%si),%dx
    239b:	c5 00                	lds    (%eax),%eax
    239d:	00 00                	add    %al,(%eax)
    239f:	00 66 29             	add    %ah,0x29(%esi)
    23a2:	c2 66 89             	ret    $0x8966
    23a5:	d0 66 05             	shlb   0x5(%esi)
    23a8:	00 47 00             	add    %al,0x0(%edi)
    23ab:	00 67 66             	add    %ah,0x66(%edi)
    23ae:	8b 00                	mov    (%eax),%eax
    23b0:	67 66 8d 48 ff       	lea    -0x1(%bx,%si),%cx
    23b5:	67 66 8b 55 08       	mov    0x8(%di),%dx
    23ba:	66 89 d0             	mov    %dx,%ax
    23bd:	66 c1 e0 02          	shl    $0x2,%ax
    23c1:	66 01 d0             	add    %dx,%ax
    23c4:	66 c1 e0 02          	shl    $0x2,%ax
    23c8:	67 66 8d 14          	lea    (%si),%dx
    23cc:	c5 00                	lds    (%eax),%eax
    23ce:	00 00                	add    %al,(%eax)
    23d0:	00 66 29             	add    %ah,0x29(%esi)
    23d3:	c2 66 89             	ret    $0x8966
    23d6:	d0 66 05             	shlb   0x5(%esi)
    23d9:	00 47 00             	add    %al,0x0(%edi)
    23dc:	00 67 66             	add    %ah,0x66(%edi)
    23df:	89 08                	mov    %ecx,(%eax)
    if(SEM_list[s].count < 0){
    23e1:	67 66 8b 55 08       	mov    0x8(%di),%dx
    23e6:	66 89 d0             	mov    %dx,%ax
    23e9:	66 c1 e0 02          	shl    $0x2,%ax
    23ed:	66 01 d0             	add    %dx,%ax
    23f0:	66 c1 e0 02          	shl    $0x2,%ax
    23f4:	67 66 8d 14          	lea    (%si),%dx
    23f8:	c5 00                	lds    (%eax),%eax
    23fa:	00 00                	add    %al,(%eax)
    23fc:	00 66 29             	add    %ah,0x29(%esi)
    23ff:	c2 66 89             	ret    $0x8966
    2402:	d0 66 05             	shlb   0x5(%esi)
    2405:	00 47 00             	add    %al,0x0(%edi)
    2408:	00 67 66             	add    %ah,0x66(%edi)
    240b:	8b 00                	mov    (%eax),%eax
    240d:	66 85 c0             	test   %ax,%ax
    2410:	0f 89 b1 00 66 a1    	jns    a16624c7 <_end+0xa165ccc3>
        sem_index = _CurrentProg - PCB_list;
    2416:	e4 46                	in     $0x46,%al
    2418:	66 89 c2             	mov    %ax,%dx
    241b:	66 b8 80 41          	mov    $0x4180,%ax
    241f:	00 00                	add    %al,(%eax)
    2421:	66 29 c2             	sub    %ax,%dx
    2424:	66 89 d0             	mov    %dx,%ax
    2427:	66 c1 f8 02          	sar    $0x2,%ax
    242b:	66 89 c2             	mov    %ax,%dx
    242e:	66 89 d0             	mov    %dx,%ax
    2431:	66 01 c0             	add    %ax,%ax
    2434:	66 01 d0             	add    %dx,%ax
    2437:	67 66 8d 14          	lea    (%si),%dx
    243b:	85 00                	test   %eax,(%eax)
    243d:	00 00                	add    %al,(%eax)
    243f:	00 66 01             	add    %ah,0x1(%esi)
    2442:	d0 66 89             	shlb   -0x77(%esi)
    2445:	c2 66 c1             	ret    $0xc166
    2448:	e2 08                	loop   2452 <do_P+0xd4>
    244a:	66 01 d0             	add    %dx,%ax
    244d:	66 89 c2             	mov    %ax,%dx
    2450:	66 c1 e2 10          	shl    $0x10,%dx
    2454:	66 01 d0             	add    %dx,%ax
    2457:	66 f7 d8             	neg    %ax
    245a:	66 a3 6c 57 66 a1    	mov    %ax,0xa166576c
        rmele(&readyqueue,sem_index);//将进程从就绪队列中取出
    2460:	6c                   	insb   (%dx),%es:(%edi)
    2461:	57                   	push   %edi
    2462:	66 50                	push   %ax
    2464:	66 68 80 57          	pushw  $0x5780
    2468:	00 00                	add    %al,(%eax)
    246a:	66 e8 17 fd          	callw  2185 <init_queue+0x30>
    246e:	ff                   	(bad)  
    246f:	ff 66 83             	jmp    *-0x7d(%esi)
    2472:	c4 08                	les    (%eax),%ecx
        _CurrentProg->prg_status = BLOCKED;
    2474:	66 a1 e4 46 67 66    	mov    0x666746e4,%ax
    247a:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
        enqueue(&SEM_list[s].semaque,sem_index);
    2481:	66 8b 0e             	mov    (%esi),%cx
    2484:	6c                   	insb   (%dx),%es:(%edi)
    2485:	57                   	push   %edi
    2486:	67 66 8b 55 08       	mov    0x8(%di),%dx
    248b:	66 89 d0             	mov    %dx,%ax
    248e:	66 c1 e0 02          	shl    $0x2,%ax
    2492:	66 01 d0             	add    %dx,%ax
    2495:	66 c1 e0 02          	shl    $0x2,%ax
    2499:	67 66 8d 14          	lea    (%si),%dx
    249d:	c5 00                	lds    (%eax),%eax
    249f:	00 00                	add    %al,(%eax)
    24a1:	00 66 29             	add    %ah,0x29(%esi)
    24a4:	c2 67 66             	ret    $0x6667
    24a7:	8d 82 00 47 00 00    	lea    0x4700(%edx),%eax
    24ad:	66 83 c0 04          	add    $0x4,%ax
    24b1:	66 51                	push   %cx
    24b3:	66 50                	push   %ax
    24b5:	66 e8 bc fb          	callw  2075 <size+0x11>
    24b9:	ff                   	(bad)  
    24ba:	ff 66 83             	jmp    *-0x7d(%esi)
    24bd:	c4 08                	les    (%eax),%ecx
        _Schedule_PV();
    24bf:	66 e8 e9 df          	callw  4ac <_Vr+0x10>
    24c3:	ff                   	(bad)  
    24c4:	ff                   	(bad)  
    }
    __asm("sti\n");
    24c5:	fb                   	sti    
}
    24c6:	66 c9                	leavew 
    24c8:	66 c3                	retw   

000024ca <do_V>:
int v_res;
int vtempp;
void do_V(int s){
    24ca:	66 55                	push   %bp
    24cc:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    24cf:	fa                   	cli    
    SEM_list[s].count  = SEM_list[s].count + 1;
    24d0:	67 66 8b 55 08       	mov    0x8(%di),%dx
    24d5:	66 89 d0             	mov    %dx,%ax
    24d8:	66 c1 e0 02          	shl    $0x2,%ax
    24dc:	66 01 d0             	add    %dx,%ax
    24df:	66 c1 e0 02          	shl    $0x2,%ax
    24e3:	67 66 8d 14          	lea    (%si),%dx
    24e7:	c5 00                	lds    (%eax),%eax
    24e9:	00 00                	add    %al,(%eax)
    24eb:	00 66 29             	add    %ah,0x29(%esi)
    24ee:	c2 66 89             	ret    $0x8966
    24f1:	d0 66 05             	shlb   0x5(%esi)
    24f4:	00 47 00             	add    %al,0x0(%edi)
    24f7:	00 67 66             	add    %ah,0x66(%edi)
    24fa:	8b 00                	mov    (%eax),%eax
    24fc:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    2501:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2506:	66 89 d0             	mov    %dx,%ax
    2509:	66 c1 e0 02          	shl    $0x2,%ax
    250d:	66 01 d0             	add    %dx,%ax
    2510:	66 c1 e0 02          	shl    $0x2,%ax
    2514:	67 66 8d 14          	lea    (%si),%dx
    2518:	c5 00                	lds    (%eax),%eax
    251a:	00 00                	add    %al,(%eax)
    251c:	00 66 29             	add    %ah,0x29(%esi)
    251f:	c2 66 89             	ret    $0x8966
    2522:	d0 66 05             	shlb   0x5(%esi)
    2525:	00 47 00             	add    %al,0x0(%edi)
    2528:	00 67 66             	add    %ah,0x66(%edi)
    252b:	89 08                	mov    %ecx,(%eax)
    if(SEM_list[s].count <= 0){
    252d:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2532:	66 89 d0             	mov    %dx,%ax
    2535:	66 c1 e0 02          	shl    $0x2,%ax
    2539:	66 01 d0             	add    %dx,%ax
    253c:	66 c1 e0 02          	shl    $0x2,%ax
    2540:	67 66 8d 14          	lea    (%si),%dx
    2544:	c5 00                	lds    (%eax),%eax
    2546:	00 00                	add    %al,(%eax)
    2548:	00 66 29             	add    %ah,0x29(%esi)
    254b:	c2 66 89             	ret    $0x8966
    254e:	d0 66 05             	shlb   0x5(%esi)
    2551:	00 47 00             	add    %al,0x0(%edi)
    2554:	00 67 66             	add    %ah,0x66(%edi)
    2557:	8b 00                	mov    (%eax),%eax
    2559:	66 85 c0             	test   %ax,%ax
    255c:	7f 74                	jg     25d2 <do_V+0x108>
        dequeue(&SEM_list[s].semaque,&v_res);
    255e:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2563:	66 89 d0             	mov    %dx,%ax
    2566:	66 c1 e0 02          	shl    $0x2,%ax
    256a:	66 01 d0             	add    %dx,%ax
    256d:	66 c1 e0 02          	shl    $0x2,%ax
    2571:	67 66 8d 14          	lea    (%si),%dx
    2575:	c5 00                	lds    (%eax),%eax
    2577:	00 00                	add    %al,(%eax)
    2579:	00 66 29             	add    %ah,0x29(%esi)
    257c:	c2 67 66             	ret    $0x6667
    257f:	8d 82 00 47 00 00    	lea    0x4700(%edx),%eax
    2585:	66 83 c0 04          	add    $0x4,%ax
    2589:	66 68 d4 46          	pushw  $0x46d4
    258d:	00 00                	add    %al,(%eax)
    258f:	66 50                	push   %ax
    2591:	66 e8 4c fb          	callw  20e1 <enqueue+0x6a>
    2595:	ff                   	(bad)  
    2596:	ff 66 83             	jmp    *-0x7d(%esi)
    2599:	c4 08                	les    (%eax),%ecx
        PCB_list[v_res].prg_status = READY;
    259b:	66 a1 d4 46 66 c1    	mov    0xc16646d4,%ax
    25a1:	e0 02                	loopne 25a5 <do_V+0xdb>
    25a3:	66 89 c2             	mov    %ax,%dx
    25a6:	66 c1 e2 04          	shl    $0x4,%dx
    25aa:	66 01 d0             	add    %dx,%ax
    25ad:	66 05 b0 41          	add    $0x41b0,%ax
    25b1:	00 00                	add    %al,(%eax)
    25b3:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    25ba:	00 00                	add    %al,(%eax)
        enqueue(&readyqueue,v_res);
    25bc:	66 a1 d4 46 66 50    	mov    0x506646d4,%ax
    25c2:	66 68 80 57          	pushw  $0x5780
    25c6:	00 00                	add    %al,(%eax)
    25c8:	66 e8 a9 fa          	callw  2075 <size+0x11>
    25cc:	ff                   	(bad)  
    25cd:	ff 66 83             	jmp    *-0x7d(%esi)
    25d0:	c4 08                	les    (%eax),%ecx
    }
    __asm__("sti\n");
    25d2:	fb                   	sti    

    25d3:	66 c9                	leavew 
    25d5:	66 c3                	retw   

000025d7 <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    25d7:	66 55                	push   %bp
    25d9:	66 89 e5             	mov    %sp,%bp
    25dc:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    25e0:	66 e8 4b de          	callw  42f <_Schedule_once+0x9>
    25e4:	ff                   	(bad)  
    25e5:	ff 67 66             	jmp    *0x66(%edi)
    25e8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    25eb:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    25f0:	66 c9                	leavew 
    25f2:	66 c3                	retw   

000025f4 <wait>:
char wait(){
    25f4:	66 55                	push   %bp
    25f6:	66 89 e5             	mov    %sp,%bp
    25f9:	66 83 ec 08          	sub    $0x8,%sp
    int temp_ch = _wait();
    25fd:	66 e8 46 de          	callw  447 <_Schedule+0xb>
    2601:	ff                   	(bad)  
    2602:	ff 67 66             	jmp    *0x66(%edi)
    2605:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char ch = '0' + temp_ch;
    2608:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    260d:	66 83 c0 30          	add    $0x30,%ax
    2611:	67 88 45 fb          	mov    %al,-0x5(%di)
    return ch;
    2615:	67 8a 45 fb          	mov    -0x5(%di),%al
    //_wait();
}
    2619:	66 c9                	leavew 
    261b:	66 c3                	retw   

0000261d <exit>:
void exit(char ch){
    261d:	66 55                	push   %bp
    261f:	66 89 e5             	mov    %sp,%bp
    2622:	66 83 ec 04          	sub    $0x4,%sp
    2626:	67 66 8b 45 08       	mov    0x8(%di),%ax
    262b:	67 88 45 fc          	mov    %al,-0x4(%di)
    _exit(ch);
    262f:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    2635:	66 50                	push   %ax
    2637:	66 e8 17 de          	callw  452 <_wait+0x9>
    263b:	ff                   	(bad)  
    263c:	ff 66 83             	jmp    *-0x7d(%esi)
    263f:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2642:	c9                   	leave  
    2643:	66 c3                	retw   

00002645 <GetSem>:
int GetSem(int value){
    2645:	66 55                	push   %bp
    2647:	66 89 e5             	mov    %sp,%bp
    264a:	66 83 ec 04          	sub    $0x4,%sp
    int sema = _GetSem(value);
    264e:	67 66 ff 75 08       	pushw  0x8(%di)
    2653:	66 e8 0d de          	callw  464 <_exit+0x10>
    2657:	ff                   	(bad)  
    2658:	ff 66 83             	jmp    *-0x7d(%esi)
    265b:	c4 04 67             	les    (%edi,%eiz,2),%eax
    265e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return sema;
    2662:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    2667:	66 c9                	leavew 
    2669:	66 c3                	retw   

0000266b <SemFree>:
void SemFree(int value){
    266b:	66 55                	push   %bp
    266d:	66 89 e5             	mov    %sp,%bp
    _FreeSem(value);
    2670:	67 66 ff 75 08       	pushw  0x8(%di)
    2675:	66 e8 fd dd          	callw  476 <_GetSem+0x10>
    2679:	ff                   	(bad)  
    267a:	ff 66 83             	jmp    *-0x7d(%esi)
    267d:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2680:	c9                   	leave  
    2681:	66 c3                	retw   

00002683 <P>:
void P(int s){   
    2683:	66 55                	push   %bp
    2685:	66 89 e5             	mov    %sp,%bp
    _Pr(s);
    2688:	67 66 ff 75 08       	pushw  0x8(%di)
    268d:	66 e8 f7 dd          	callw  488 <_FreeSem+0x10>
    2691:	ff                   	(bad)  
    2692:	ff 66 83             	jmp    *-0x7d(%esi)
    2695:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2698:	c9                   	leave  
    2699:	66 c3                	retw   

0000269b <V>:
void V(int s){
    269b:	66 55                	push   %bp
    269d:	66 89 e5             	mov    %sp,%bp
    _Vr(s);
    26a0:	67 66 ff 75 08       	pushw  0x8(%di)
    26a5:	66 e8 f1 dd          	callw  49a <_Pr+0x10>
    26a9:	ff                   	(bad)  
    26aa:	ff 66 83             	jmp    *-0x7d(%esi)
    26ad:	c4 04 66             	les    (%esi,%eiz,2),%eax
    26b0:	c9                   	leave  
    26b1:	66 c3                	retw   
