
test.elf:     file format elf32-i386


Disassembly of section .text:

00000100 <test>:
     100:	8c c8                	mov    %cs,%eax
     102:	8e d8                	mov    %eax,%ds
     104:	8e d0                	mov    %eax,%ss
     106:	bc 00 01 cd 33       	mov    $0x33cd0100,%esp
     10b:	cd 39                	int    $0x39
     10d:	cd 38                	int    $0x38
     10f:	eb fe                	jmp    10f <test+0xf>
     111:	66 90                	xchg   %ax,%ax
     113:	66 90                	xchg   %ax,%ax
     115:	66 90                	xchg   %ax,%ax
     117:	66 90                	xchg   %ax,%ax
     119:	66 90                	xchg   %ax,%ax
     11b:	66 90                	xchg   %ax,%ax
     11d:	66 90                	xchg   %ax,%ax
     11f:	90                   	nop

00000120 <count>:
     120:	08 2d 00 00 00 00    	or     %ch,0x0

00000121 <alpha>:
     121:	2d 00 00 00 00       	sub    $0x0,%eax

00000122 <int_09_saved>:
     122:	00 00                	add    %al,(%eax)
	...

00000126 <program_saved>:
     126:	70 00                	jo     128 <program_saved+0x2>
	...

0000012a <ds_saved>:
     12a:	7c 00                	jl     12c <ds_saved+0x2>
	...

0000012e <return_save>:
     12e:	88 00                	mov    %al,(%eax)

00000130 <esi_save>:
     130:	96                   	xchg   %eax,%esi
     131:	00 00                	add    %al,(%eax)
	...

00000134 <temp>:
     134:	e8 03 b4 00 00       	call   b53c <_end+0x6638>

00000136 <kernelesp_saved>:
     136:	b4 00                	mov    $0x0,%ah
	...

0000013a <esp_saved_inkernel>:
     13a:	c8 00 00 00          	enter  $0x0,$0x0

0000013e <esp_saved_in_user>:
     13e:	f0 00 00             	lock add %al,(%eax)
	...

00000142 <ss_saved_in_user>:
     142:	2c 01                	sub    $0x1,%al
	...

00000146 <color>:
     146:	01 c2                	add    %eax,%edx

00000147 <ss_saved_fork>:
     147:	c2 01 00             	ret    $0x1
	...

0000014b <retaddr>:
     14b:	58                   	pop    %eax
     14c:	02 00                	add    (%eax),%al
	...

0000014f <Message31>:
     14f:	74 69                	je     1ba <_readinput+0x9>
     151:	6d                   	insl   (%dx),%es:(%edi)
     152:	65 3a 20             	cmp    %gs:(%eax),%ah

00000155 <_sys_stack_copy>:
     155:	c8 00 00 00          	enter  $0x0,$0x0
     159:	8e d0                	mov    %eax,%ss
     15b:	60                   	pusha  
     15c:	1e                   	push   %ds
     15d:	8b 46 06             	mov    0x6(%esi),%eax
     160:	8b 56 0a             	mov    0xa(%esi),%edx
     163:	8b 4e 0e             	mov    0xe(%esi),%ecx
     166:	8c db                	mov    %ds,%ebx

00000168 <while_loop1>:
     168:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
     16e:	8e d8                	mov    %eax,%ds
     170:	67 8b 1a             	mov    (%bp,%si),%ebx
     173:	8e d9                	mov    %ecx,%ds
     175:	67 89 1a             	mov    %ebx,(%bp,%si)
     178:	83 c2 02             	add    $0x2,%edx
     17b:	eb eb                	jmp    168 <while_loop1>

0000017d <end_for_copy>:
     17d:	1f                   	pop    %ds
     17e:	61                   	popa   
     17f:	c9                   	leave  
     180:	66 5a                	pop    %dx
     182:	ff e2                	jmp    *%edx

00000184 <_clearscreen>:
     184:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     189:	66 5a                	pop    %dx
     18b:	ff e2                	jmp    *%edx

0000018d <_printchar>:
     18d:	c8 00 00 00          	enter  $0x0,$0x0
     191:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
     196:	57                   	push   %edi
     197:	66 8b 4e 06          	mov    0x6(%esi),%cx
     19b:	66 8b 7e 0a          	mov    0xa(%esi),%di
     19f:	66 8b 56 0e          	mov    0xe(%esi),%dx
     1a3:	88 d5                	mov    %dl,%ch
     1a5:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
     1ac:	00 66 5a             	add    %ah,0x5a(%esi)
     1af:	ff e2                	jmp    *%edx

000001b1 <_readinput>:
     1b1:	c8 04 00 00          	enter  $0x4,$0x0
     1b5:	b4 00                	mov    $0x0,%ah
     1b7:	cd 16                	int    $0x16
     1b9:	b4 00                	mov    $0x0,%ah
     1bb:	66 67 89 04          	mov    %ax,(%si)
     1bf:	24 66                	and    $0x66,%al
     1c1:	67 8b 04             	mov    (%si),%eax
     1c4:	24 c9                	and    $0xc9,%al
     1c6:	66 5a                	pop    %dx
     1c8:	ff e2                	jmp    *%edx

000001ca <_showchar>:
     1ca:	c8 00 00 00          	enter  $0x0,$0x0
     1ce:	50                   	push   %eax
     1cf:	53                   	push   %ebx
     1d0:	8b 46 06             	mov    0x6(%esi),%eax
     1d3:	b4 0e                	mov    $0xe,%ah
     1d5:	b3 00                	mov    $0x0,%bl
     1d7:	cd 10                	int    $0x10
     1d9:	fa                   	cli    
     1da:	5b                   	pop    %ebx
     1db:	58                   	pop    %eax
     1dc:	c9                   	leave  
     1dd:	66 5a                	pop    %dx
     1df:	ff e2                	jmp    *%edx

000001e1 <_setPoint>:
     1e1:	c8 00 00 00          	enter  $0x0,$0x0
     1e5:	53                   	push   %ebx
     1e6:	b7 00                	mov    $0x0,%bh
     1e8:	8a 77 06             	mov    0x6(%edi),%dh
     1eb:	8a 57 0a             	mov    0xa(%edi),%dl
     1ee:	b4 02                	mov    $0x2,%ah
     1f0:	cd 10                	int    $0x10
     1f2:	5b                   	pop    %ebx
     1f3:	c9                   	leave  
     1f4:	66 5a                	pop    %dx
     1f6:	ff e2                	jmp    *%edx

000001f8 <_loadP>:
     1f8:	c8 00 00 00          	enter  $0x0,$0x0
     1fc:	60                   	pusha  
     1fd:	06                   	push   %es
     1fe:	1e                   	push   %ds
     1ff:	8c c8                	mov    %cs,%eax
     201:	8e d8                	mov    %eax,%ds
     203:	8b 46 0e             	mov    0xe(%esi),%eax
     206:	8e c0                	mov    %eax,%es
     208:	b2 00                	mov    $0x0,%dl
     20a:	8b 46 0a             	mov    0xa(%esi),%eax
     20d:	b3 12                	mov    $0x12,%bl
     20f:	f6 f3                	div    %bl
     211:	88 e1                	mov    %ah,%cl
     213:	30 e4                	xor    %ah,%ah
     215:	b3 02                	mov    $0x2,%bl
     217:	f6 f3                	div    %bl
     219:	88 e6                	mov    %ah,%dh
     21b:	88 c5                	mov    %al,%ch
     21d:	8a 46 06             	mov    0x6(%esi),%al
     220:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
     225:	cd 13                	int    $0x13
     227:	1f                   	pop    %ds
     228:	07                   	pop    %es
     229:	61                   	popa   
     22a:	c9                   	leave  
     22b:	66 5a                	pop    %dx
     22d:	ff e2                	jmp    *%edx

0000022f <_RunProgress>:
     22f:	c8 00 00 00          	enter  $0x0,$0x0
     233:	8c c8                	mov    %cs,%eax
     235:	8e d8                	mov    %eax,%ds
     237:	8e c0                	mov    %eax,%es
     239:	8b 5e 06             	mov    0x6(%esi),%ebx
     23c:	c7 06 26 01 00 01    	movl   $0x1000126,(%esi)
     242:	89 1e                	mov    %ebx,(%esi)
     244:	28 01                	sub    %al,(%ecx)
     246:	66 89 26             	mov    %sp,(%esi)
     249:	3a 01                	cmp    (%ecx),%al
     24b:	26 ff 1e             	lcall  *%es:(%esi)
     24e:	26 01 8c c8 8e d8 8e 	add    %ecx,%es:-0x3f712772(%eax,%ecx,8)
     255:	c0 

00000250 <S>:
     250:	8c c8                	mov    %cs,%eax
     252:	8e d8                	mov    %eax,%ds
     254:	8e c0                	mov    %eax,%es
     256:	8e d0                	mov    %eax,%ss
     258:	66 8b 26             	mov    (%esi),%sp
     25b:	3a 01                	cmp    (%ecx),%al
     25d:	b4 00                	mov    $0x0,%ah
     25f:	cd 16                	int    $0x16
     261:	c9                   	leave  
     262:	66 5a                	pop    %dx
     264:	ff e2                	jmp    *%edx

00000266 <_Schedule_once>:
     266:	c8 00 00 00          	enter  $0x0,$0x0
     26a:	cd 41                	int    $0x41
     26c:	c9                   	leave  
     26d:	66 5a                	pop    %dx
     26f:	ff e2                	jmp    *%edx

00000271 <_fork_user>:
     271:	c8 00 00 00          	enter  $0x0,$0x0
     275:	cd 39                	int    $0x39
     277:	c9                   	leave  
     278:	66 5a                	pop    %dx
     27a:	ff e2                	jmp    *%edx

0000027c <_Schedule>:
     27c:	c8 00 00 00          	enter  $0x0,$0x0
     280:	16                   	push   %ss
     281:	cd 23                	int    $0x23
     283:	17                   	pop    %ss
     284:	c9                   	leave  
     285:	66 5a                	pop    %dx
     287:	ff e2                	jmp    *%edx

00000289 <_wait>:
     289:	c8 00 00 00          	enter  $0x0,$0x0
     28d:	cd 3b                	int    $0x3b
     28f:	c9                   	leave  
     290:	66 5a                	pop    %dx
     292:	ff e2                	jmp    *%edx

00000294 <_exit>:
     294:	c8 00 00 00          	enter  $0x0,$0x0
     298:	66 67 8b 45 06       	mov    0x6(%di),%ax
     29d:	66 50                	push   %ax
     29f:	cd 2a                	int    $0x2a
     2a1:	c9                   	leave  
     2a2:	66 5a                	pop    %dx
     2a4:	ff e2                	jmp    *%edx

000002a6 <_GetSem>:
     2a6:	c8 00 00 00          	enter  $0x0,$0x0
     2aa:	66 67 8b 45 06       	mov    0x6(%di),%ax
     2af:	66 50                	push   %ax
     2b1:	cd 3c                	int    $0x3c
     2b3:	c9                   	leave  
     2b4:	66 5a                	pop    %dx
     2b6:	ff e2                	jmp    *%edx

000002b8 <_FreeSem>:
     2b8:	c8 00 00 00          	enter  $0x0,$0x0
     2bc:	66 67 8b 45 06       	mov    0x6(%di),%ax
     2c1:	66 50                	push   %ax
     2c3:	cd 3d                	int    $0x3d
     2c5:	c9                   	leave  
     2c6:	66 5a                	pop    %dx
     2c8:	ff e2                	jmp    *%edx

000002ca <_Pr>:
     2ca:	c8 00 00 00          	enter  $0x0,$0x0
     2ce:	66 67 8b 45 06       	mov    0x6(%di),%ax
     2d3:	66 50                	push   %ax
     2d5:	cd 3e                	int    $0x3e
     2d7:	c9                   	leave  
     2d8:	66 5a                	pop    %dx
     2da:	ff e2                	jmp    *%edx

000002dc <_Vr>:
     2dc:	c8 00 00 00          	enter  $0x0,$0x0
     2e0:	66 67 8b 45 06       	mov    0x6(%di),%ax
     2e5:	66 50                	push   %ax
     2e7:	cd 3f                	int    $0x3f
     2e9:	c9                   	leave  
     2ea:	66 5a                	pop    %dx
     2ec:	ff e2                	jmp    *%edx

000002ee <_Schedule_PV>:
     2ee:	c8 00 00 00          	enter  $0x0,$0x0
     2f2:	cd 23                	int    $0x23
     2f4:	c9                   	leave  
     2f5:	66 5a                	pop    %dx
     2f7:	ff e2                	jmp    *%edx

000002f9 <_SetINT20h>:
     2f9:	fa                   	cli    
     2fa:	1e                   	push   %ds
     2fb:	06                   	push   %es
     2fc:	8c c8                	mov    %cs,%eax
     2fe:	8e d8                	mov    %eax,%ds
     300:	8e c0                	mov    %eax,%es
     302:	8c 16                	mov    %ss,(%esi)
     304:	42                   	inc    %edx
     305:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     30b:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     30f:	26 3a 01             	cmp    %es:(%ecx),%al
     312:	53                   	push   %ebx
     313:	51                   	push   %ecx
     314:	52                   	push   %edx
     315:	b4 01                	mov    $0x1,%ah
     317:	cd 16                	int    $0x16
     319:	5a                   	pop    %edx
     31a:	59                   	pop    %ecx
     31b:	5b                   	pop    %ebx
     31c:	8e 16                	mov    (%esi),%ss
     31e:	42                   	inc    %edx
     31f:	01 66 8b             	add    %esp,-0x75(%esi)
     322:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     326:	1f                   	pop    %ds
     327:	74 0a                	je     333 <going_on>
     329:	50                   	push   %eax
     32a:	b4 00                	mov    $0x0,%ah
     32c:	cd 16                	int    $0x16
     32e:	58                   	pop    %eax
     32f:	fb                   	sti    
     330:	cd 38                	int    $0x38
     332:	cf                   	iret   

00000333 <going_on>:
     333:	fb                   	sti    
     334:	cf                   	iret   

00000335 <_SetINT08h_turn_around>:
     335:	e8 39 06 fa 6a       	call   6afa0973 <_end+0x6af9ba6f>
     33a:	00 e8                	add    %ch,%al
     33c:	c1 0d e8 a4 06 b0 20 	rorl   $0x20,0xb006a4e8
     343:	e6 20                	out    %al,$0x20
     345:	e6 a0                	out    %al,$0xa0
     347:	fb                   	sti    
     348:	cf                   	iret   

00000349 <_SetINT08h>:
     349:	60                   	pusha  
     34a:	0f a8                	push   %gs
     34c:	1e                   	push   %ds
     34d:	06                   	push   %es
     34e:	16                   	push   %ss
     34f:	8c c8                	mov    %cs,%eax
     351:	8e c0                	mov    %eax,%es
     353:	8e d8                	mov    %eax,%ds
     355:	8e d0                	mov    %eax,%ss
     357:	fe 0e                	decb   (%esi)
     359:	20 01                	and    %al,(%ecx)
     35b:	75 4f                	jne    3ac <end>

0000035d <notc>:
     35d:	80 3e 21             	cmpb   $0x21,(%esi)
     360:	01 2d 75 07 c6 06    	add    %ebp,0x6c60775
     366:	21 01                	and    %eax,(%ecx)
     368:	5c                   	pop    %esp
     369:	eb 2a                	jmp    395 <show>

0000036b <changleft>:
     36b:	80 3e 21             	cmpb   $0x21,(%esi)
     36e:	01 5c 75 07          	add    %ebx,0x7(%ebp,%esi,2)
     372:	c6 06 21             	movb   $0x21,(%esi)
     375:	01 7c eb 1c          	add    %edi,0x1c(%ebx,%ebp,8)

00000379 <changright>:
     379:	80 3e 21             	cmpb   $0x21,(%esi)
     37c:	01 7c 75 07          	add    %edi,0x7(%ebp,%esi,2)
     380:	c6 06 21             	movb   $0x21,(%esi)
     383:	01 2f                	add    %ebp,(%edi)
     385:	eb 0e                	jmp    395 <show>

00000387 <changheng>:
     387:	80 3e 21             	cmpb   $0x21,(%esi)
     38a:	01 2f                	add    %ebp,(%edi)
     38c:	75 cf                	jne    35d <notc>
     38e:	c6 06 21             	movb   $0x21,(%esi)
     391:	01 2d eb 00 b9 00    	add    %ebp,0xb900eb

00000395 <show>:
     395:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     39a:	b4 09                	mov    $0x9,%ah
     39c:	8a 26                	mov    (%esi),%ah
     39e:	46                   	inc    %esi
     39f:	01 a0 21 01 65 a3    	add    %esp,-0x5c9afedf(%eax)
     3a5:	8e 00                	mov    (%eax),%es
     3a7:	c6 06 20             	movb   $0x20,(%esi)
     3aa:	01 08                	add    %ecx,(%eax)

000003ac <end>:
     3ac:	b0 20                	mov    $0x20,%al
     3ae:	e6 20                	out    %al,$0x20
     3b0:	e6 a0                	out    %al,$0xa0
     3b2:	17                   	pop    %ss
     3b3:	07                   	pop    %es
     3b4:	1f                   	pop    %ds
     3b5:	0f a9                	pop    %gs
     3b7:	61                   	popa   
     3b8:	fb                   	sti    
     3b9:	cf                   	iret   

000003ba <_SetINT09h>:
     3ba:	fa                   	cli    
     3bb:	1e                   	push   %ds
     3bc:	06                   	push   %es
     3bd:	8c c8                	mov    %cs,%eax
     3bf:	8e d8                	mov    %eax,%ds
     3c1:	8e c0                	mov    %eax,%es
     3c3:	8e d0                	mov    %eax,%ss
     3c5:	8c 16                	mov    %ss,(%esi)
     3c7:	42                   	inc    %edx
     3c8:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     3ce:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     3d2:	26 3a 01             	cmp    %es:(%ecx),%al
     3d5:	60                   	pusha  
     3d6:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     3db:	8a 26                	mov    (%esi),%ah
     3dd:	46                   	inc    %esi
     3de:	01 b0 4f 65 a3 78    	add    %esi,0x78a3654f(%eax)
     3e4:	00 b0 55 65 a3 7a    	add    %dh,0x7aa36555(%eax)
     3ea:	00 b0 43 65 a3 7c    	add    %dh,0x7ca36543(%eax)
     3f0:	00 b0 48 65 a3 7e    	add    %dh,0x7ea36548(%eax)
     3f6:	00 b0 53 65 a3 80    	add    %dh,-0x7f5c9aad(%eax)
     3fc:	00 b0 21 65 a3 82    	add    %dh,-0x7d5c9adf(%eax)
     402:	00 b0 4f 65 a3 84    	add    %dh,-0x7b5c9ab1(%eax)
     408:	00 b0 55 65 a3 86    	add    %dh,-0x795c9aab(%eax)
     40e:	00 b0 43 65 a3 88    	add    %dh,-0x775c9abd(%eax)
     414:	00 b0 48 65 a3 8a    	add    %dh,-0x755c9ab8(%eax)
     41a:	00 b0 21 65 a3 8c    	add    %dh,-0x735c9adf(%eax)
     420:	00 61 80             	add    %ah,-0x80(%ecx)
     423:	fc                   	cld    
     424:	06                   	push   %es
     425:	75 06                	jne    42d <cont>
     427:	b4 01                	mov    $0x1,%ah
     429:	88 26                	mov    %ah,(%esi)
     42b:	46                   	inc    %esi
     42c:	01 fe                	add    %edi,%esi

0000042d <cont>:
     42d:	fe 06                	incb   (%esi)
     42f:	46                   	inc    %esi
     430:	01 8c c8 8e c0 fb 9c 	add    %ecx,-0x63043f72(%eax,%ecx,8)
     437:	26 ff 1e             	lcall  *%es:(%esi)
     43a:	22 01                	and    (%ecx),%al
     43c:	8e 16                	mov    (%esi),%ss
     43e:	42                   	inc    %edx
     43f:	01 66 8b             	add    %esp,-0x75(%esi)
     442:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     446:	1f                   	pop    %ds
     447:	cf                   	iret   

00000448 <_SetINT33h>:
     448:	fa                   	cli    
     449:	c8 00 00 00          	enter  $0x0,$0x0
     44d:	60                   	pusha  
     44e:	1e                   	push   %ds
     44f:	0f a8                	push   %gs
     451:	06                   	push   %es
     452:	8c c8                	mov    %cs,%eax
     454:	8e c0                	mov    %eax,%es
     456:	8e d8                	mov    %eax,%ds
     458:	8c 16                	mov    %ss,(%esi)
     45a:	42                   	inc    %edx
     45b:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     461:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     465:	26 3a 01             	cmp    %es:(%ecx),%al
     468:	6a 00                	push   $0x0
     46a:	e8 06 08 8e 16       	call   168e0c75 <_end+0x168dbd71>
     46f:	42                   	inc    %edx
     470:	01 66 8b             	add    %esp,-0x75(%esi)
     473:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     477:	0f a9                	pop    %gs
     479:	1f                   	pop    %ds
     47a:	61                   	popa   
     47b:	fb                   	sti    
     47c:	c9                   	leave  
     47d:	cf                   	iret   

0000047e <_SetINT34h>:
     47e:	fa                   	cli    
     47f:	c8 00 00 00          	enter  $0x0,$0x0
     483:	60                   	pusha  
     484:	1e                   	push   %ds
     485:	0f a8                	push   %gs
     487:	06                   	push   %es
     488:	8c c8                	mov    %cs,%eax
     48a:	8e c0                	mov    %eax,%es
     48c:	8e d8                	mov    %eax,%ds
     48e:	8c 16                	mov    %ss,(%esi)
     490:	42                   	inc    %edx
     491:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     497:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     49b:	26 3a 01             	cmp    %es:(%ecx),%al
     49e:	6a 00                	push   $0x0
     4a0:	e8 80 08 8e 16       	call   168e0d25 <_end+0x168dbe21>
     4a5:	42                   	inc    %edx
     4a6:	01 66 8b             	add    %esp,-0x75(%esi)
     4a9:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     4ad:	0f a9                	pop    %gs
     4af:	1f                   	pop    %ds
     4b0:	61                   	popa   
     4b1:	fb                   	sti    
     4b2:	c9                   	leave  
     4b3:	cf                   	iret   

000004b4 <_SetINT35h>:
     4b4:	60                   	pusha  
     4b5:	1e                   	push   %ds
     4b6:	0f a8                	push   %gs
     4b8:	06                   	push   %es
     4b9:	8c c8                	mov    %cs,%eax
     4bb:	8e c0                	mov    %eax,%es
     4bd:	8e d8                	mov    %eax,%ds
     4bf:	8c 16                	mov    %ss,(%esi)
     4c1:	42                   	inc    %edx
     4c2:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     4c8:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     4cc:	26 3a 01             	cmp    %es:(%ecx),%al
     4cf:	6a 00                	push   $0x0
     4d1:	e8 2e 09 8e 16       	call   168e0e04 <_end+0x168dbf00>
     4d6:	42                   	inc    %edx
     4d7:	01 66 8b             	add    %esp,-0x75(%esi)
     4da:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     4de:	0f a9                	pop    %gs
     4e0:	1f                   	pop    %ds
     4e1:	61                   	popa   
     4e2:	fb                   	sti    
     4e3:	cf                   	iret   

000004e4 <_SetINT36h>:
     4e4:	60                   	pusha  
     4e5:	1e                   	push   %ds
     4e6:	0f a8                	push   %gs
     4e8:	06                   	push   %es
     4e9:	8c c8                	mov    %cs,%eax
     4eb:	8e c0                	mov    %eax,%es
     4ed:	8e d8                	mov    %eax,%ds
     4ef:	8c 16                	mov    %ss,(%esi)
     4f1:	42                   	inc    %edx
     4f2:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     4f8:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     4fc:	26 3a 01             	cmp    %es:(%ecx),%al
     4ff:	6a 00                	push   $0x0
     501:	e8 84 09 8e 16       	call   168e0e8a <_end+0x168dbf86>
     506:	42                   	inc    %edx
     507:	01 66 8b             	add    %esp,-0x75(%esi)
     50a:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     50e:	0f a9                	pop    %gs
     510:	1f                   	pop    %ds
     511:	61                   	popa   
     512:	fb                   	sti    
     513:	cf                   	iret   

00000514 <_SetINT21h>:
     514:	c8 00 00 00          	enter  $0x0,$0x0
     518:	60                   	pusha  
     519:	1e                   	push   %ds
     51a:	0f a8                	push   %gs
     51c:	06                   	push   %es
     51d:	8c c8                	mov    %cs,%eax
     51f:	8e c0                	mov    %eax,%es
     521:	8e d8                	mov    %eax,%ds
     523:	8b 46 08             	mov    0x8(%esi),%eax
     526:	80 fc 00             	cmp    $0x0,%ah
     529:	74 16                	je     541 <fn0>
     52b:	80 fc 01             	cmp    $0x1,%ah
     52e:	74 21                	je     551 <fn1>
     530:	80 fc 02             	cmp    $0x2,%ah
     533:	74 3d                	je     572 <fn2>
     535:	80 fc 03             	cmp    $0x3,%ah
     538:	74 5f                	je     599 <fn3>
     53a:	07                   	pop    %es
     53b:	0f a9                	pop    %gs
     53d:	1f                   	pop    %ds
     53e:	61                   	popa   
     53f:	c9                   	leave  
     540:	cf                   	iret   

00000541 <fn0>:
     541:	8b 46 0a             	mov    0xa(%esi),%eax
     544:	b4 0e                	mov    $0xe,%ah
     546:	b3 00                	mov    $0x0,%bl
     548:	cd 10                	int    $0x10
     54a:	07                   	pop    %es
     54b:	0f a9                	pop    %gs
     54d:	1f                   	pop    %ds
     54e:	61                   	popa   
     54f:	c9                   	leave  
     550:	cf                   	iret   

00000551 <fn1>:
     551:	66 83 ec 04          	sub    $0x4,%sp
     555:	b4 00                	mov    $0x0,%ah
     557:	cd 16                	int    $0x16
     559:	b4 00                	mov    $0x0,%ah
     55b:	66 67 89 04          	mov    %ax,(%si)
     55f:	24 66                	and    $0x66,%al
     561:	67 8b 04             	mov    (%si),%eax
     564:	24 66                	and    $0x66,%al
     566:	83 c4 04             	add    $0x4,%esp
     569:	8e e0                	mov    %eax,%fs
     56b:	07                   	pop    %es
     56c:	0f a9                	pop    %gs
     56e:	1f                   	pop    %ds
     56f:	61                   	popa   
     570:	c9                   	leave  
     571:	cf                   	iret   

00000572 <fn2>:
     572:	66 83 ec 04          	sub    $0x4,%sp
     576:	b4 00                	mov    $0x0,%ah
     578:	cd 16                	int    $0x16
     57a:	b4 00                	mov    $0x0,%ah
     57c:	66 67 89 04          	mov    %ax,(%si)
     580:	24 66                	and    $0x66,%al
     582:	67 8b 04             	mov    (%si),%eax
     585:	24 b4                	and    $0xb4,%al
     587:	0e                   	push   %cs
     588:	b3 00                	mov    $0x0,%bl
     58a:	cd 10                	int    $0x10
     58c:	66 83 c4 04          	add    $0x4,%sp
     590:	8e e0                	mov    %eax,%fs
     592:	07                   	pop    %es
     593:	0f a9                	pop    %gs
     595:	1f                   	pop    %ds
     596:	61                   	popa   
     597:	c9                   	leave  
     598:	cf                   	iret   

00000599 <fn3>:
     599:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     59e:	07                   	pop    %es
     59f:	0f a9                	pop    %gs
     5a1:	1f                   	pop    %ds
     5a2:	61                   	popa   
     5a3:	c9                   	leave  
     5a4:	cf                   	iret   

000005a5 <_SetINT37h>:
     5a5:	fa                   	cli    
     5a6:	e8 90 04 cf fa       	call   facf0a3b <_end+0xfacebb37>

000005aa <_SetINT38h>:
     5aa:	fa                   	cli    
     5ab:	50                   	push   %eax
     5ac:	1e                   	push   %ds
     5ad:	8c c8                	mov    %cs,%eax
     5af:	8e d8                	mov    %eax,%ds
     5b1:	6a 00                	push   $0x0
     5b3:	e8 54 0c 1f 58       	call   581f120c <_end+0x581ec308>
     5b8:	fb                   	sti    
     5b9:	cf                   	iret   

000005ba <_SetINT39h>:
     5ba:	fa                   	cli    
     5bb:	c8 00 00 00          	enter  $0x0,$0x0
     5bf:	1e                   	push   %ds
     5c0:	6a 00                	push   $0x0
     5c2:	8c c8                	mov    %cs,%eax
     5c4:	8e d8                	mov    %eax,%ds
     5c6:	e8 3d 0e 1f c9       	call   c91f1408 <_end+0xc91ec504>
     5cb:	fb                   	sti    
     5cc:	cf                   	iret   

000005cd <_SetINT41h>:
     5cd:	fa                   	cli    
     5ce:	e8 a0 03 e8 11       	call   11e80973 <_end+0x11e7ba6f>
     5d3:	04 b0                	add    $0xb0,%al
     5d5:	20 e6                	and    %ah,%dh
     5d7:	20 e6                	and    %ah,%dh
     5d9:	a0 fb cf fa c8       	mov    0xc8facffb,%al

000005dc <_SetINT2Ah>:
     5dc:	fa                   	cli    
     5dd:	c8 00 00 00          	enter  $0x0,$0x0
     5e1:	1e                   	push   %ds
     5e2:	66 67 8b 45 08       	mov    0x8(%di),%ax
     5e7:	66 50                	push   %ax
     5e9:	6a 00                	push   $0x0
     5eb:	8c c8                	mov    %cs,%eax
     5ed:	8e d8                	mov    %eax,%ds
     5ef:	e8 a9 10 58 1f       	call   1f58169d <_end+0x1f57c799>
     5f4:	c9                   	leave  
     5f5:	fb                   	sti    
     5f6:	cf                   	iret   

000005f7 <_SetINT3Bh>:
     5f7:	fa                   	cli    
     5f8:	c8 00 00 00          	enter  $0x0,$0x0
     5fc:	1e                   	push   %ds
     5fd:	6a 00                	push   $0x0
     5ff:	8c c8                	mov    %cs,%eax
     601:	8e d8                	mov    %eax,%ds
     603:	e8 62 11 1f c9       	call   c91f176a <_end+0xc91ec866>
     608:	fb                   	sti    
     609:	cf                   	iret   

0000060a <_SetINT3Ch>:
     60a:	fa                   	cli    
     60b:	c8 00 00 00          	enter  $0x0,$0x0
     60f:	1e                   	push   %ds
     610:	66 67 8b 45 08       	mov    0x8(%di),%ax
     615:	66 50                	push   %ax
     617:	6a 00                	push   $0x0
     619:	8c c8                	mov    %cs,%eax
     61b:	8e d8                	mov    %eax,%ds
     61d:	e8 9d 15 66 83       	call   83661bbf <_end+0x8365ccbb>
     622:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     625:	c9                   	leave  
     626:	fb                   	sti    
     627:	cf                   	iret   

00000628 <_SetINT3Dh>:
     628:	fa                   	cli    
     629:	c8 00 00 00          	enter  $0x0,$0x0
     62d:	1e                   	push   %ds
     62e:	66 67 8b 45 08       	mov    0x8(%di),%ax
     633:	66 50                	push   %ax
     635:	6a 00                	push   $0x0
     637:	8c c8                	mov    %cs,%eax
     639:	8e d8                	mov    %eax,%ds
     63b:	e8 57 16 66 83       	call   83661c97 <_end+0x8365cd93>
     640:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     643:	c9                   	leave  
     644:	fb                   	sti    
     645:	cf                   	iret   

00000646 <_SetINT3Eh>:
     646:	c8 00 00 00          	enter  $0x0,$0x0
     64a:	1e                   	push   %ds
     64b:	66 67 8b 45 08       	mov    0x8(%di),%ax
     650:	66 50                	push   %ax
     652:	6a 00                	push   $0x0
     654:	8c c8                	mov    %cs,%eax
     656:	8e d8                	mov    %eax,%ds
     658:	e8 74 16 66 83       	call   83661cd1 <_end+0x8365cdcd>
     65d:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     660:	c9                   	leave  
     661:	cf                   	iret   

00000662 <_SetINT3Fh>:
     662:	c8 00 00 00          	enter  $0x0,$0x0
     666:	1e                   	push   %ds
     667:	66 67 8b 45 08       	mov    0x8(%di),%ax
     66c:	66 50                	push   %ax
     66e:	6a 00                	push   $0x0
     670:	8c c8                	mov    %cs,%eax
     672:	8e d8                	mov    %eax,%ds
     674:	e8 a4 17 66 83       	call   83661e1d <_end+0x8365cf19>
     679:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     67c:	c9                   	leave  
     67d:	cf                   	iret   

0000067e <_initialInt>:
     67e:	c8 00 00 00          	enter  $0x0,$0x0
     682:	60                   	pusha  
     683:	06                   	push   %es
     684:	1e                   	push   %ds
     685:	8c c8                	mov    %cs,%eax
     687:	8e d8                	mov    %eax,%ds
     689:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     68e:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
     693:	00 f7                	add    %dh,%bh
     695:	e3 89                	jecxz  620 <_SetINT3Ch+0x16>
     697:	c7                   	(bad)  
     698:	b8 f9 02 26 89       	mov    $0x892602f9,%eax
     69d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     6a2:	45                   	inc    %ebp
     6a3:	02 1f                	add    (%edi),%bl
     6a5:	07                   	pop    %es
     6a6:	61                   	popa   
     6a7:	60                   	pusha  
     6a8:	06                   	push   %es
     6a9:	1e                   	push   %ds
     6aa:	8c c8                	mov    %cs,%eax
     6ac:	8e d8                	mov    %eax,%ds
     6ae:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     6b3:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
     6b8:	00 f7                	add    %dh,%bh
     6ba:	e3 89                	jecxz  645 <_SetINT3Dh+0x1d>
     6bc:	c7                   	(bad)  
     6bd:	b8 48 04 26 89       	mov    $0x89260448,%eax
     6c2:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     6c7:	45                   	inc    %ebp
     6c8:	02 1f                	add    (%edi),%bl
     6ca:	07                   	pop    %es
     6cb:	61                   	popa   
     6cc:	60                   	pusha  
     6cd:	06                   	push   %es
     6ce:	1e                   	push   %ds
     6cf:	8c c8                	mov    %cs,%eax
     6d1:	8e d8                	mov    %eax,%ds
     6d3:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     6d8:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
     6dd:	00 f7                	add    %dh,%bh
     6df:	e3 89                	jecxz  66a <_SetINT3Fh+0x8>
     6e1:	c7                   	(bad)  
     6e2:	b8 7e 04 26 89       	mov    $0x8926047e,%eax
     6e7:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     6ec:	45                   	inc    %ebp
     6ed:	02 1f                	add    (%edi),%bl
     6ef:	07                   	pop    %es
     6f0:	61                   	popa   
     6f1:	60                   	pusha  
     6f2:	06                   	push   %es
     6f3:	1e                   	push   %ds
     6f4:	8c c8                	mov    %cs,%eax
     6f6:	8e d8                	mov    %eax,%ds
     6f8:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     6fd:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
     702:	00 f7                	add    %dh,%bh
     704:	e3 89                	jecxz  68f <_initialInt+0x11>
     706:	c7                   	(bad)  
     707:	b8 b4 04 26 89       	mov    $0x892604b4,%eax
     70c:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     711:	45                   	inc    %ebp
     712:	02 1f                	add    (%edi),%bl
     714:	07                   	pop    %es
     715:	61                   	popa   
     716:	60                   	pusha  
     717:	06                   	push   %es
     718:	1e                   	push   %ds
     719:	8c c8                	mov    %cs,%eax
     71b:	8e d8                	mov    %eax,%ds
     71d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     722:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
     727:	00 f7                	add    %dh,%bh
     729:	e3 89                	jecxz  6b4 <_initialInt+0x36>
     72b:	c7                   	(bad)  
     72c:	b8 e4 04 26 89       	mov    $0x892604e4,%eax
     731:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     736:	45                   	inc    %ebp
     737:	02 1f                	add    (%edi),%bl
     739:	07                   	pop    %es
     73a:	61                   	popa   
     73b:	60                   	pusha  
     73c:	06                   	push   %es
     73d:	1e                   	push   %ds
     73e:	8c c8                	mov    %cs,%eax
     740:	8e d8                	mov    %eax,%ds
     742:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     747:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
     74c:	00 f7                	add    %dh,%bh
     74e:	e3 89                	jecxz  6d9 <_initialInt+0x5b>
     750:	c7                   	(bad)  
     751:	b8 14 05 26 89       	mov    $0x89260514,%eax
     756:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     75b:	45                   	inc    %ebp
     75c:	02 1f                	add    (%edi),%bl
     75e:	07                   	pop    %es
     75f:	61                   	popa   
     760:	60                   	pusha  
     761:	06                   	push   %es
     762:	1e                   	push   %ds
     763:	8c c8                	mov    %cs,%eax
     765:	8e d8                	mov    %eax,%ds
     767:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     76c:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
     771:	00 f7                	add    %dh,%bh
     773:	e3 89                	jecxz  6fe <_initialInt+0x80>
     775:	c7                   	(bad)  
     776:	b8 a5 05 26 89       	mov    $0x892605a5,%eax
     77b:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     780:	45                   	inc    %ebp
     781:	02 1f                	add    (%edi),%bl
     783:	07                   	pop    %es
     784:	61                   	popa   
     785:	60                   	pusha  
     786:	06                   	push   %es
     787:	1e                   	push   %ds
     788:	8c c8                	mov    %cs,%eax
     78a:	8e d8                	mov    %eax,%ds
     78c:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     791:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
     796:	00 f7                	add    %dh,%bh
     798:	e3 89                	jecxz  723 <_initialInt+0xa5>
     79a:	c7                   	(bad)  
     79b:	b8 aa 05 26 89       	mov    $0x892605aa,%eax
     7a0:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     7a5:	45                   	inc    %ebp
     7a6:	02 1f                	add    (%edi),%bl
     7a8:	07                   	pop    %es
     7a9:	61                   	popa   
     7aa:	60                   	pusha  
     7ab:	06                   	push   %es
     7ac:	1e                   	push   %ds
     7ad:	8c c8                	mov    %cs,%eax
     7af:	8e d8                	mov    %eax,%ds
     7b1:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     7b6:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
     7bb:	00 f7                	add    %dh,%bh
     7bd:	e3 89                	jecxz  748 <_initialInt+0xca>
     7bf:	c7                   	(bad)  
     7c0:	b8 ba 05 26 89       	mov    $0x892605ba,%eax
     7c5:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     7ca:	45                   	inc    %ebp
     7cb:	02 1f                	add    (%edi),%bl
     7cd:	07                   	pop    %es
     7ce:	61                   	popa   
     7cf:	60                   	pusha  
     7d0:	06                   	push   %es
     7d1:	1e                   	push   %ds
     7d2:	8c c8                	mov    %cs,%eax
     7d4:	8e d8                	mov    %eax,%ds
     7d6:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     7db:	b8 2a 00 bb 04       	mov    $0x4bb002a,%eax
     7e0:	00 f7                	add    %dh,%bh
     7e2:	e3 89                	jecxz  76d <_initialInt+0xef>
     7e4:	c7                   	(bad)  
     7e5:	b8 dc 05 26 89       	mov    $0x892605dc,%eax
     7ea:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     7ef:	45                   	inc    %ebp
     7f0:	02 1f                	add    (%edi),%bl
     7f2:	07                   	pop    %es
     7f3:	61                   	popa   
     7f4:	60                   	pusha  
     7f5:	06                   	push   %es
     7f6:	1e                   	push   %ds
     7f7:	8c c8                	mov    %cs,%eax
     7f9:	8e d8                	mov    %eax,%ds
     7fb:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     800:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
     805:	00 f7                	add    %dh,%bh
     807:	e3 89                	jecxz  792 <_initialInt+0x114>
     809:	c7                   	(bad)  
     80a:	b8 cd 05 26 89       	mov    $0x892605cd,%eax
     80f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     814:	45                   	inc    %ebp
     815:	02 1f                	add    (%edi),%bl
     817:	07                   	pop    %es
     818:	61                   	popa   
     819:	60                   	pusha  
     81a:	06                   	push   %es
     81b:	1e                   	push   %ds
     81c:	8c c8                	mov    %cs,%eax
     81e:	8e d8                	mov    %eax,%ds
     820:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     825:	b8 23 00 bb 04       	mov    $0x4bb0023,%eax
     82a:	00 f7                	add    %dh,%bh
     82c:	e3 89                	jecxz  7b7 <_initialInt+0x139>
     82e:	c7                   	(bad)  
     82f:	b8 35 03 26 89       	mov    $0x89260335,%eax
     834:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     839:	45                   	inc    %ebp
     83a:	02 1f                	add    (%edi),%bl
     83c:	07                   	pop    %es
     83d:	61                   	popa   
     83e:	60                   	pusha  
     83f:	06                   	push   %es
     840:	1e                   	push   %ds
     841:	8c c8                	mov    %cs,%eax
     843:	8e d8                	mov    %eax,%ds
     845:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     84a:	b8 3b 00 bb 04       	mov    $0x4bb003b,%eax
     84f:	00 f7                	add    %dh,%bh
     851:	e3 89                	jecxz  7dc <_initialInt+0x15e>
     853:	c7                   	(bad)  
     854:	b8 f7 05 26 89       	mov    $0x892605f7,%eax
     859:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     85e:	45                   	inc    %ebp
     85f:	02 1f                	add    (%edi),%bl
     861:	07                   	pop    %es
     862:	61                   	popa   
     863:	60                   	pusha  
     864:	06                   	push   %es
     865:	1e                   	push   %ds
     866:	8c c8                	mov    %cs,%eax
     868:	8e d8                	mov    %eax,%ds
     86a:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     86f:	b8 3c 00 bb 04       	mov    $0x4bb003c,%eax
     874:	00 f7                	add    %dh,%bh
     876:	e3 89                	jecxz  801 <_initialInt+0x183>
     878:	c7                   	(bad)  
     879:	b8 0a 06 26 89       	mov    $0x8926060a,%eax
     87e:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     883:	45                   	inc    %ebp
     884:	02 1f                	add    (%edi),%bl
     886:	07                   	pop    %es
     887:	61                   	popa   
     888:	60                   	pusha  
     889:	06                   	push   %es
     88a:	1e                   	push   %ds
     88b:	8c c8                	mov    %cs,%eax
     88d:	8e d8                	mov    %eax,%ds
     88f:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     894:	b8 3d 00 bb 04       	mov    $0x4bb003d,%eax
     899:	00 f7                	add    %dh,%bh
     89b:	e3 89                	jecxz  826 <_initialInt+0x1a8>
     89d:	c7                   	(bad)  
     89e:	b8 28 06 26 89       	mov    $0x89260628,%eax
     8a3:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8a8:	45                   	inc    %ebp
     8a9:	02 1f                	add    (%edi),%bl
     8ab:	07                   	pop    %es
     8ac:	61                   	popa   
     8ad:	60                   	pusha  
     8ae:	06                   	push   %es
     8af:	1e                   	push   %ds
     8b0:	8c c8                	mov    %cs,%eax
     8b2:	8e d8                	mov    %eax,%ds
     8b4:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8b9:	b8 3e 00 bb 04       	mov    $0x4bb003e,%eax
     8be:	00 f7                	add    %dh,%bh
     8c0:	e3 89                	jecxz  84b <_initialInt+0x1cd>
     8c2:	c7                   	(bad)  
     8c3:	b8 46 06 26 89       	mov    $0x89260646,%eax
     8c8:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8cd:	45                   	inc    %ebp
     8ce:	02 1f                	add    (%edi),%bl
     8d0:	07                   	pop    %es
     8d1:	61                   	popa   
     8d2:	60                   	pusha  
     8d3:	06                   	push   %es
     8d4:	1e                   	push   %ds
     8d5:	8c c8                	mov    %cs,%eax
     8d7:	8e d8                	mov    %eax,%ds
     8d9:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8de:	b8 3f 00 bb 04       	mov    $0x4bb003f,%eax
     8e3:	00 f7                	add    %dh,%bh
     8e5:	e3 89                	jecxz  870 <_initialInt+0x1f2>
     8e7:	c7                   	(bad)  
     8e8:	b8 62 06 26 89       	mov    $0x89260662,%eax
     8ed:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8f2:	45                   	inc    %ebp
     8f3:	02 1f                	add    (%edi),%bl
     8f5:	07                   	pop    %es
     8f6:	61                   	popa   
     8f7:	c9                   	leave  
     8f8:	66 5a                	pop    %dx
     8fa:	ff e2                	jmp    *%edx

000008fc <_initialInt_09h>:
     8fc:	c8 00 00 00          	enter  $0x0,$0x0
     900:	a1 24 00 a3 22       	mov    0x22a30024,%eax
     905:	01 a1 26 00 a3 24    	add    %esp,0x24a30026(%ecx)
     90b:	01 60 06             	add    %esp,0x6(%eax)
     90e:	1e                   	push   %ds
     90f:	8c c8                	mov    %cs,%eax
     911:	8e d8                	mov    %eax,%ds
     913:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     918:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
     91d:	00 f7                	add    %dh,%bh
     91f:	e3 89                	jecxz  8aa <_initialInt+0x22c>
     921:	c7                   	(bad)  
     922:	b8 ba 03 26 89       	mov    $0x892603ba,%eax
     927:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     92c:	45                   	inc    %ebp
     92d:	02 1f                	add    (%edi),%bl
     92f:	07                   	pop    %es
     930:	61                   	popa   
     931:	c9                   	leave  
     932:	66 5a                	pop    %dx
     934:	ff e2                	jmp    *%edx

00000936 <_initialInt_08h>:
     936:	c8 00 00 00          	enter  $0x0,$0x0
     93a:	b0 40                	mov    $0x40,%al
     93c:	e6 43                	out    %al,$0x43
     93e:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
     943:	88 e0                	mov    %ah,%al
     945:	e6 40                	out    %al,$0x40
     947:	60                   	pusha  
     948:	06                   	push   %es
     949:	1e                   	push   %ds
     94a:	8c c8                	mov    %cs,%eax
     94c:	8e d8                	mov    %eax,%ds
     94e:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     953:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
     958:	00 f7                	add    %dh,%bh
     95a:	e3 89                	jecxz  8e5 <_initialInt+0x267>
     95c:	c7                   	(bad)  
     95d:	b8 35 03 26 89       	mov    $0x89260335,%eax
     962:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     967:	45                   	inc    %ebp
     968:	02 1f                	add    (%edi),%bl
     96a:	07                   	pop    %es
     96b:	61                   	popa   
     96c:	c9                   	leave  
     96d:	66 5a                	pop    %dx
     96f:	ff e2                	jmp    *%edx

00000971 <_save>:
     971:	66 89 26             	mov    %sp,(%esi)
     974:	3a 01                	cmp    (%ecx),%al
     976:	1e                   	push   %ds
     977:	0e                   	push   %cs
     978:	1f                   	pop    %ds
     979:	8f 06                	popl   (%esi)
     97b:	2a 01                	sub    (%ecx),%al
     97d:	8f 06                	popl   (%esi)
     97f:	2e 01 66 89          	add    %esp,%cs:-0x77(%esi)
     983:	26 36 01 66 89       	es add %esp,%ss:%es:-0x77(%esi)
     988:	36 30 01             	xor    %al,%ss:(%ecx)
     98b:	66 8b 36             	mov    (%esi),%si
     98e:	e4 3d                	in     $0x3d,%al
     990:	66 83 c6 2c          	add    $0x2c,%si
     994:	67 8f 06 67 8f       	popl   -0x7099
     999:	46                   	inc    %esi
     99a:	04 67                	add    $0x67,%al
     99c:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
     9a3:	46                   	inc    %esi
     9a4:	08 67 c7             	or     %ah,-0x39(%edi)
     9a7:	46                   	inc    %esi
     9a8:	0a 00                	or     (%eax),%al
     9aa:	00 66 67             	add    %ah,0x67(%esi)
     9ad:	89 66 fc             	mov    %esp,-0x4(%esi)
     9b0:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
     9b4:	8c de                	mov    %ds,%esi
     9b6:	8e d6                	mov    %esi,%ss
     9b8:	66 8b 26             	mov    (%esi),%sp
     9bb:	e4 3d                	in     $0x3d,%al
     9bd:	66 83 c4 24          	add    $0x24,%sp
     9c1:	6a 00                	push   $0x0
     9c3:	ff 36                	pushl  (%esi)
     9c5:	2a 01                	sub    (%ecx),%al
     9c7:	6a 00                	push   $0x0
     9c9:	06                   	push   %es
     9ca:	66 55                	push   %bp
     9cc:	66 57                	push   %di
     9ce:	66 ff 36             	pushw  (%esi)
     9d1:	30 01                	xor    %al,(%ecx)
     9d3:	66 52                	push   %dx
     9d5:	66 51                	push   %cx
     9d7:	66 53                	push   %bx
     9d9:	66 50                	push   %ax
     9db:	66 8b 26             	mov    (%esi),%sp
     9de:	36 01 a1 2e 01 ff e0 	add    %esp,%ss:-0x1f00fed2(%ecx)

000009e5 <_restart>:
     9e5:	66 89 26             	mov    %sp,(%esi)
     9e8:	36 01 66 8b          	add    %esp,%ss:-0x75(%esi)
     9ec:	26                   	es
     9ed:	e4 3d                	in     $0x3d,%al
     9ef:	66 58                	pop    %ax
     9f1:	66 5b                	pop    %bx
     9f3:	66 59                	pop    %cx
     9f5:	66 5a                	pop    %dx
     9f7:	66 5e                	pop    %si
     9f9:	66 5f                	pop    %di
     9fb:	66 5d                	pop    %bp
     9fd:	07                   	pop    %es
     9fe:	8f 06                	popl   (%esi)
     a00:	34 01                	xor    $0x1,%al
     a02:	8f 06                	popl   (%esi)
     a04:	2a 01                	sub    (%ecx),%al
     a06:	8f 06                	popl   (%esi)
     a08:	34 01                	xor    $0x1,%al
     a0a:	66 89 36             	mov    %si,(%esi)
     a0d:	30 01                	xor    %al,(%ecx)
     a0f:	17                   	pop    %ss
     a10:	8f 06                	popl   (%esi)
     a12:	34 01                	xor    $0x1,%al
     a14:	66 89 e6             	mov    %sp,%si
     a17:	66 67 8b 26 67 ff    	mov    -0x99,%sp
     a1d:	76 0c                	jbe    a2b <_restart+0x46>
     a1f:	67 ff 76 08          	pushl  0x8(%bp)
     a23:	67 ff 76 04          	pushl  0x4(%bp)
     a27:	66 8b 36             	mov    (%esi),%si
     a2a:	30 01                	xor    %al,(%ecx)
     a2c:	8e 1e                	mov    (%esi),%ds
     a2e:	2a 01                	sub    (%ecx),%al
     a30:	50                   	push   %eax
     a31:	b0 20                	mov    $0x20,%al
     a33:	e6 20                	out    %al,$0x20
     a35:	e6 a0                	out    %al,$0xa0
     a37:	58                   	pop    %eax
     a38:	cf                   	iret   

00000a39 <RTC_Timer>:
     a39:	c8 00 00 00          	enter  $0x0,$0x0
     a3d:	1e                   	push   %ds
     a3e:	06                   	push   %es
     a3f:	60                   	pusha  
     a40:	8c c8                	mov    %cs,%eax
     a42:	8e d8                	mov    %eax,%ds
     a44:	8c c8                	mov    %cs,%eax
     a46:	8e c0                	mov    %eax,%es
     a48:	bf a0 37 b4 02       	mov    $0x2b437a0,%edi
     a4d:	cd 1a                	int    $0x1a
     a4f:	88 e8                	mov    %ch,%al
     a51:	b4 00                	mov    $0x0,%ah
     a53:	b3 10                	mov    $0x10,%bl
     a55:	f6 f3                	div    %bl
     a57:	04 30                	add    $0x30,%al
     a59:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
     a5f:	88 e8                	mov    %ch,%al
     a61:	24 0f                	and    $0xf,%al
     a63:	04 30                	add    $0x30,%al
     a65:	88 45 01             	mov    %al,0x1(%ebp)
     a68:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
     a6c:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
     a70:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
     a74:	b4 02                	mov    $0x2,%ah
     a76:	cd 1a                	int    $0x1a
     a78:	88 c8                	mov    %cl,%al
     a7a:	b4 00                	mov    $0x0,%ah
     a7c:	b3 10                	mov    $0x10,%bl
     a7e:	f6 f3                	div    %bl
     a80:	04 30                	add    $0x30,%al
     a82:	88 45 05             	mov    %al,0x5(%ebp)
     a85:	b4 02                	mov    $0x2,%ah
     a87:	cd 1a                	int    $0x1a
     a89:	88 c8                	mov    %cl,%al
     a8b:	24 0f                	and    $0xf,%al
     a8d:	04 30                	add    $0x30,%al
     a8f:	88 45 06             	mov    %al,0x6(%ebp)
     a92:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
     a96:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
     a9a:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
     a9e:	8c c8                	mov    %cs,%eax
     aa0:	8e d8                	mov    %eax,%ds
     aa2:	8e c0                	mov    %eax,%es
     aa4:	bd 4f 01 8c d8       	mov    $0xd88c014f,%ebp
     aa9:	8e c0                	mov    %eax,%es
     aab:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
     ab0:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     ab6:	b2 0a                	mov    $0xa,%dl
     ab8:	cd 10                	int    $0x10
     aba:	8c c8                	mov    %cs,%eax
     abc:	8e d8                	mov    %eax,%ds
     abe:	8e c0                	mov    %eax,%es
     ac0:	bd a0 37 8c d8       	mov    $0xd88c37a0,%ebp
     ac5:	8e c0                	mov    %eax,%es
     ac7:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
     acc:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     ad2:	b2 1e                	mov    $0x1e,%dl
     ad4:	cd 10                	int    $0x10
     ad6:	61                   	popa   
     ad7:	07                   	pop    %es
     ad8:	1f                   	pop    %ds
     ad9:	c9                   	leave  
     ada:	66 5a                	pop    %dx
     adc:	ff e2                	jmp    *%edx

00000ade <_Get_Hours_1>:
     ade:	c8 04 00 00          	enter  $0x4,$0x0
     ae2:	b4 02                	mov    $0x2,%ah
     ae4:	cd 1a                	int    $0x1a
     ae6:	88 e8                	mov    %ch,%al
     ae8:	b4 00                	mov    $0x0,%ah
     aea:	b3 10                	mov    $0x10,%bl
     aec:	f6 f3                	div    %bl
     aee:	30 e4                	xor    %ah,%ah
     af0:	66 67 89 04          	mov    %ax,(%si)
     af4:	24 66                	and    $0x66,%al
     af6:	67 8b 04             	mov    (%si),%eax
     af9:	24 c9                	and    $0xc9,%al
     afb:	66 5a                	pop    %dx
     afd:	ff e2                	jmp    *%edx

00000aff <_Get_Hours_2>:
     aff:	c8 04 00 00          	enter  $0x4,$0x0
     b03:	b4 02                	mov    $0x2,%ah
     b05:	cd 1a                	int    $0x1a
     b07:	88 e8                	mov    %ch,%al
     b09:	24 0f                	and    $0xf,%al
     b0b:	30 e4                	xor    %ah,%ah
     b0d:	66 67 89 04          	mov    %ax,(%si)
     b11:	24 66                	and    $0x66,%al
     b13:	67 8b 04             	mov    (%si),%eax
     b16:	24 c9                	and    $0xc9,%al
     b18:	66 5a                	pop    %dx
     b1a:	ff e2                	jmp    *%edx

00000b1c <_Get_Minutes_1>:
     b1c:	c8 04 00 00          	enter  $0x4,$0x0
     b20:	b4 02                	mov    $0x2,%ah
     b22:	cd 1a                	int    $0x1a
     b24:	88 c8                	mov    %cl,%al
     b26:	b4 00                	mov    $0x0,%ah
     b28:	b3 10                	mov    $0x10,%bl
     b2a:	f6 f3                	div    %bl
     b2c:	30 e4                	xor    %ah,%ah
     b2e:	66 67 89 04          	mov    %ax,(%si)
     b32:	24 66                	and    $0x66,%al
     b34:	67 8b 04             	mov    (%si),%eax
     b37:	24 c9                	and    $0xc9,%al
     b39:	66 5a                	pop    %dx
     b3b:	ff e2                	jmp    *%edx

00000b3d <_Get_Minutes_2>:
     b3d:	c8 04 00 00          	enter  $0x4,$0x0
     b41:	b4 02                	mov    $0x2,%ah
     b43:	cd 1a                	int    $0x1a
     b45:	88 c8                	mov    %cl,%al
     b47:	24 0f                	and    $0xf,%al
     b49:	30 e4                	xor    %ah,%ah
     b4b:	66 67 89 04          	mov    %ax,(%si)
     b4f:	24 66                	and    $0x66,%al
     b51:	67 8b 04             	mov    (%si),%eax
     b54:	24 c9                	and    $0xc9,%al
     b56:	66 5a                	pop    %dx
     b58:	ff e2                	jmp    *%edx

00000b5a <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
     b5a:	66 55                	push   %bp
     b5c:	66 89 e5             	mov    %sp,%bp
     b5f:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
     b63:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     b68:	66 89 d0             	mov    %dx,%ax
     b6b:	66 c1 e0 02          	shl    $0x2,%ax
     b6f:	66 01 d0             	add    %dx,%ax
     b72:	66 c1 e0 04          	shl    $0x4,%ax
     b76:	66 89 c2             	mov    %ax,%dx
     b79:	67 66 8b 45 10       	mov    0x10(%di),%ax
     b7e:	66 01 d0             	add    %dx,%ax
     b81:	66 01 c0             	add    %ax,%ax
     b84:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
     b89:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     b90:	00 00                	add    %al,(%eax)
	int index = 0;
     b92:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     b99:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     b9b:	eb 35                	jmp    bd2 <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
     b9d:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     ba2:	67 66 8b 45 08       	mov    0x8(%di),%ax
     ba7:	66 01 d0             	add    %dx,%ax
     baa:	67 8a 00             	mov    (%bx,%si),%al
     bad:	66 0f be c0          	movsbw %al,%ax
     bb1:	67 66 ff 75 f4       	pushw  -0xc(%di)
     bb6:	67 66 ff 75 fc       	pushw  -0x4(%di)
     bbb:	66 50                	push   %ax
     bbd:	66 e8 ca f5          	callw  18b <_clearscreen+0x7>
     bc1:	ff                   	(bad)  
     bc2:	ff 66 83             	jmp    *-0x7d(%esi)
     bc5:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     bc8:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     bcc:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
     bd2:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     bd7:	67 66 8b 45 08       	mov    0x8(%di),%ax
     bdc:	66 01 d0             	add    %dx,%ax
     bdf:	67 8a 00             	mov    (%bx,%si),%al
     be2:	84 c0                	test   %al,%al
     be4:	75 b7                	jne    b9d <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     be6:	90                   	nop
}
     be7:	66 c9                	leavew 
     be9:	66 c3                	retw   

00000beb <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
     beb:	66 55                	push   %bp
     bed:	66 89 e5             	mov    %sp,%bp
     bf0:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
     bf4:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     bf9:	66 89 d0             	mov    %dx,%ax
     bfc:	66 c1 e0 02          	shl    $0x2,%ax
     c00:	66 01 d0             	add    %dx,%ax
     c03:	66 c1 e0 04          	shl    $0x4,%ax
     c07:	66 89 c2             	mov    %ax,%dx
     c0a:	67 66 8b 45 10       	mov    0x10(%di),%ax
     c0f:	66 01 d0             	add    %dx,%ax
     c12:	66 01 c0             	add    %ax,%ax
     c15:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
     c1a:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     c21:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     c23:	eb 35                	jmp    c5a <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
     c25:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     c2a:	67 66 8b 45 08       	mov    0x8(%di),%ax
     c2f:	66 01 d0             	add    %dx,%ax
     c32:	67 8a 00             	mov    (%bx,%si),%al
     c35:	66 0f be c0          	movsbw %al,%ax
     c39:	67 66 ff 75 14       	pushw  0x14(%di)
     c3e:	67 66 ff 75 fc       	pushw  -0x4(%di)
     c43:	66 50                	push   %ax
     c45:	66 e8 42 f5          	callw  18b <_clearscreen+0x7>
     c49:	ff                   	(bad)  
     c4a:	ff 66 83             	jmp    *-0x7d(%esi)
     c4d:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     c50:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     c54:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
     c5a:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     c5f:	67 66 8b 45 08       	mov    0x8(%di),%ax
     c64:	66 01 d0             	add    %dx,%ax
     c67:	67 8a 00             	mov    (%bx,%si),%al
     c6a:	84 c0                	test   %al,%al
     c6c:	75 b7                	jne    c25 <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     c6e:	90                   	nop
}
     c6f:	66 c9                	leavew 
     c71:	66 c3                	retw   

00000c73 <sys_showline>:
void sys_showline(){
     c73:	66 55                	push   %bp
     c75:	66 89 e5             	mov    %sp,%bp
     c78:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
     c7c:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
     c81:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
     c86:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
     c8b:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
     c90:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
     c95:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
     c9a:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
     c9f:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     ca6:	00 00                	add    %al,(%eax)
    int i = 0;
     ca8:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     caf:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
     cb1:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     cb8:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
     cba:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     cc1:	00 00                	add    %al,(%eax)
     cc3:	eb 52                	jmp    d17 <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
     cc5:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     cca:	66 89 d0             	mov    %dx,%ax
     ccd:	66 c1 e0 03          	shl    $0x3,%ax
     cd1:	66 01 d0             	add    %dx,%ax
     cd4:	67 66 8d 14          	lea    (%si),%dx
     cd8:	c5 00                	lds    (%eax),%eax
     cda:	00 00                	add    %al,(%eax)
     cdc:	00 66 01             	add    %ah,0x1(%esi)
     cdf:	d0 66 01             	shlb   0x1(%esi)
     ce2:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
     ce6:	45                   	inc    %ebp
     ce7:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
     ced:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     cf2:	66 01 d0             	add    %dx,%ax
     cf5:	67 8a 00             	mov    (%bx,%si),%al
     cf8:	66 0f be c0          	movsbw %al,%ax
     cfc:	67 66 ff 75 f4       	pushw  -0xc(%di)
     d01:	67 66 ff 75 f0       	pushw  -0x10(%di)
     d06:	66 50                	push   %ax
     d08:	66 e8 7f f4          	callw  18b <_clearscreen+0x7>
     d0c:	ff                   	(bad)  
     d0d:	ff 66 83             	jmp    *-0x7d(%esi)
     d10:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
     d13:	66 ff 45 fc          	incw   -0x4(%ebp)
     d17:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
     d1d:	7e a6                	jle    cc5 <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
     d1f:	66 c9                	leavew 
     d21:	66 c3                	retw   

00000d23 <sys_printname>:

void sys_printname(){
     d23:	66 55                	push   %bp
     d25:	66 89 e5             	mov    %sp,%bp
     d28:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
     d2c:	67 66 c7 45 fc 04 20 	movw   $0x2004,-0x4(%di)
     d33:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
     d35:	67 66 c7 45 f8 48 20 	movw   $0x2048,-0x8(%di)
     d3c:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
     d3e:	67 66 c7 45 f4 8c 20 	movw   $0x208c,-0xc(%di)
     d45:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
     d47:	67 66 c7 45 f0 d0 20 	movw   $0x20d0,-0x10(%di)
     d4e:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
     d50:	67 66 c7 45 ec 14 21 	movw   $0x2114,-0x14(%di)
     d57:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
     d59:	67 66 c7 45 e8 58 21 	movw   $0x2158,-0x18(%di)
     d60:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
     d62:	67 66 c7 45 e4 9c 21 	movw   $0x219c,-0x1c(%di)
     d69:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
     d6b:	66 6a 0b             	pushw  $0xb
     d6e:	66 6a 10             	pushw  $0x10
     d71:	67 66 ff 75 fc       	pushw  -0x4(%di)
     d76:	66 e8 de fd          	callw  b58 <_Get_Minutes_2+0x1b>
     d7a:	ff                   	(bad)  
     d7b:	ff 66 83             	jmp    *-0x7d(%esi)
     d7e:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
     d81:	6a 0b                	push   $0xb
     d83:	66 6a 11             	pushw  $0x11
     d86:	67 66 ff 75 f8       	pushw  -0x8(%di)
     d8b:	66 e8 c9 fd          	callw  b58 <_Get_Minutes_2+0x1b>
     d8f:	ff                   	(bad)  
     d90:	ff 66 83             	jmp    *-0x7d(%esi)
     d93:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
     d96:	6a 0b                	push   $0xb
     d98:	66 6a 12             	pushw  $0x12
     d9b:	67 66 ff 75 f4       	pushw  -0xc(%di)
     da0:	66 e8 b4 fd          	callw  b58 <_Get_Minutes_2+0x1b>
     da4:	ff                   	(bad)  
     da5:	ff 66 83             	jmp    *-0x7d(%esi)
     da8:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
     dab:	6a 0b                	push   $0xb
     dad:	66 6a 13             	pushw  $0x13
     db0:	67 66 ff 75 f0       	pushw  -0x10(%di)
     db5:	66 e8 9f fd          	callw  b58 <_Get_Minutes_2+0x1b>
     db9:	ff                   	(bad)  
     dba:	ff 66 83             	jmp    *-0x7d(%esi)
     dbd:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
     dc0:	6a 0b                	push   $0xb
     dc2:	66 6a 14             	pushw  $0x14
     dc5:	67 66 ff 75 ec       	pushw  -0x14(%di)
     dca:	66 e8 8a fd          	callw  b58 <_Get_Minutes_2+0x1b>
     dce:	ff                   	(bad)  
     dcf:	ff 66 83             	jmp    *-0x7d(%esi)
     dd2:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
     dd5:	6a 0b                	push   $0xb
     dd7:	66 6a 15             	pushw  $0x15
     dda:	67 66 ff 75 e8       	pushw  -0x18(%di)
     ddf:	66 e8 75 fd          	callw  b58 <_Get_Minutes_2+0x1b>
     de3:	ff                   	(bad)  
     de4:	ff 66 83             	jmp    *-0x7d(%esi)
     de7:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
     dea:	6a 0b                	push   $0xb
     dec:	66 6a 16             	pushw  $0x16
     def:	67 66 ff 75 e4       	pushw  -0x1c(%di)
     df4:	66 e8 60 fd          	callw  b58 <_Get_Minutes_2+0x1b>
     df8:	ff                   	(bad)  
     df9:	ff 66 83             	jmp    *-0x7d(%esi)
     dfc:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
     dff:	c9                   	leave  
     e00:	66 c3                	retw   

00000e02 <sys_printpoem>:
void sys_printpoem(){
     e02:	66 55                	push   %bp
     e04:	66 89 e5             	mov    %sp,%bp
     e07:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
     e0b:	67 66 c7 45 f8 e0 21 	movw   $0x21e0,-0x8(%di)
     e12:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
     e14:	67 66 c7 45 f4 f2 21 	movw   $0x21f2,-0xc(%di)
     e1b:	00 00                	add    %al,(%eax)
    int i = 1;
     e1d:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     e24:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
     e26:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     e2d:	00 00                	add    %al,(%eax)
     e2f:	eb 4b                	jmp    e7c <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
     e31:	67 66 ff 75 fc       	pushw  -0x4(%di)
     e36:	66 6a 0a             	pushw  $0xa
     e39:	66 6a 0f             	pushw  $0xf
     e3c:	67 66 ff 75 f8       	pushw  -0x8(%di)
     e41:	66 e8 a4 fd          	callw  be9 <sys_print_for_heart+0x8f>
     e45:	ff                   	(bad)  
     e46:	ff 66 83             	jmp    *-0x7d(%esi)
     e49:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
     e4b:	67 66 ff 75 fc       	pushw  -0x4(%di)
     e50:	66 6a 0a             	pushw  $0xa
     e53:	66 6a 10             	pushw  $0x10
     e56:	67 66 ff 75 f4       	pushw  -0xc(%di)
     e5b:	66 e8 8a fd          	callw  be9 <sys_print_for_heart+0x8f>
     e5f:	ff                   	(bad)  
     e60:	ff 66 83             	jmp    *-0x7d(%esi)
     e63:	c4 10                	les    (%eax),%edx
        int j = 0;
     e65:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     e6c:	00 00                	add    %al,(%eax)
        int k = 0;
     e6e:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
     e75:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
     e77:	67 66 ff 45 fc       	incw   -0x4(%di)
     e7c:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
     e82:	7e ad                	jle    e31 <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
     e84:	66 c9                	leavew 
     e86:	66 c3                	retw   

00000e88 <sys_printheart>:
void sys_printheart(){
     e88:	66 55                	push   %bp
     e8a:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
     e8d:	66 6a 28             	pushw  $0x28
     e90:	66 6a 00             	pushw  $0x0
     e93:	66 68 fb 21          	pushw  $0x21fb
     e97:	00 00                	add    %al,(%eax)
     e99:	66 e8 bb fc          	callw  b58 <_Get_Minutes_2+0x1b>
     e9d:	ff                   	(bad)  
     e9e:	ff 66 83             	jmp    *-0x7d(%esi)
     ea1:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
     ea4:	6a 28                	push   $0x28
     ea6:	66 6a 01             	pushw  $0x1
     ea9:	66 68 13 22          	pushw  $0x2213
     ead:	00 00                	add    %al,(%eax)
     eaf:	66 e8 a5 fc          	callw  b58 <_Get_Minutes_2+0x1b>
     eb3:	ff                   	(bad)  
     eb4:	ff 66 83             	jmp    *-0x7d(%esi)
     eb7:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
     eba:	6a 28                	push   $0x28
     ebc:	66 6a 02             	pushw  $0x2
     ebf:	66 68 2c 22          	pushw  $0x222c
     ec3:	00 00                	add    %al,(%eax)
     ec5:	66 e8 8f fc          	callw  b58 <_Get_Minutes_2+0x1b>
     ec9:	ff                   	(bad)  
     eca:	ff 66 83             	jmp    *-0x7d(%esi)
     ecd:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
     ed0:	6a 28                	push   $0x28
     ed2:	66 6a 03             	pushw  $0x3
     ed5:	66 68 47 22          	pushw  $0x2247
     ed9:	00 00                	add    %al,(%eax)
     edb:	66 e8 79 fc          	callw  b58 <_Get_Minutes_2+0x1b>
     edf:	ff                   	(bad)  
     ee0:	ff 66 83             	jmp    *-0x7d(%esi)
     ee3:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
     ee6:	6a 28                	push   $0x28
     ee8:	66 6a 04             	pushw  $0x4
     eeb:	66 68 60 22          	pushw  $0x2260
     eef:	00 00                	add    %al,(%eax)
     ef1:	66 e8 63 fc          	callw  b58 <_Get_Minutes_2+0x1b>
     ef5:	ff                   	(bad)  
     ef6:	ff 66 83             	jmp    *-0x7d(%esi)
     ef9:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
     efc:	6a 28                	push   $0x28
     efe:	66 6a 05             	pushw  $0x5
     f01:	66 68 78 22          	pushw  $0x2278
     f05:	00 00                	add    %al,(%eax)
     f07:	66 e8 4d fc          	callw  b58 <_Get_Minutes_2+0x1b>
     f0b:	ff                   	(bad)  
     f0c:	ff 66 83             	jmp    *-0x7d(%esi)
     f0f:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
     f12:	6a 28                	push   $0x28
     f14:	66 6a 06             	pushw  $0x6
     f17:	66 68 8f 22          	pushw  $0x228f
     f1b:	00 00                	add    %al,(%eax)
     f1d:	66 e8 37 fc          	callw  b58 <_Get_Minutes_2+0x1b>
     f21:	ff                   	(bad)  
     f22:	ff 66 83             	jmp    *-0x7d(%esi)
     f25:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
     f28:	6a 28                	push   $0x28
     f2a:	66 6a 07             	pushw  $0x7
     f2d:	66 68 a5 22          	pushw  $0x22a5
     f31:	00 00                	add    %al,(%eax)
     f33:	66 e8 21 fc          	callw  b58 <_Get_Minutes_2+0x1b>
     f37:	ff                   	(bad)  
     f38:	ff 66 83             	jmp    *-0x7d(%esi)
     f3b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
     f3e:	c9                   	leave  
     f3f:	66 c3                	retw   

00000f41 <initial_PCB>:
#include "schedule.h"
#include "use.h"

void initial_PCB(int index){
     f41:	66 55                	push   %bp
     f43:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
     f46:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f4b:	66 40                	inc    %ax
     f4d:	66 c1 e0 0c          	shl    $0xc,%ax
     f51:	66 89 c2             	mov    %ax,%dx
     f54:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f59:	66 c1 e0 02          	shl    $0x2,%ax
     f5d:	66 89 c1             	mov    %ax,%cx
     f60:	66 c1 e1 04          	shl    $0x4,%cx
     f64:	66 01 c8             	add    %cx,%ax
     f67:	66 05 b0 38          	add    $0x38b0,%ax
     f6b:	00 00                	add    %al,(%eax)
     f6d:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
     f71:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f76:	66 40                	inc    %ax
     f78:	66 c1 e0 0c          	shl    $0xc,%ax
     f7c:	66 89 c2             	mov    %ax,%dx
     f7f:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f84:	66 c1 e0 02          	shl    $0x2,%ax
     f88:	66 89 c1             	mov    %ax,%cx
     f8b:	66 c1 e1 04          	shl    $0x4,%cx
     f8f:	66 01 c8             	add    %cx,%ax
     f92:	66 05 a0 38          	add    $0x38a0,%ax
     f96:	00 00                	add    %al,(%eax)
     f98:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
     f9c:	67 66 8b 45 08       	mov    0x8(%di),%ax
     fa1:	66 40                	inc    %ax
     fa3:	66 c1 e0 0c          	shl    $0xc,%ax
     fa7:	66 89 c2             	mov    %ax,%dx
     faa:	67 66 8b 45 08       	mov    0x8(%di),%ax
     faf:	66 c1 e0 02          	shl    $0x2,%ax
     fb3:	66 89 c1             	mov    %ax,%cx
     fb6:	66 c1 e1 04          	shl    $0x4,%cx
     fba:	66 01 c8             	add    %cx,%ax
     fbd:	66 05 a0 38          	add    $0x38a0,%ax
     fc1:	00 00                	add    %al,(%eax)
     fc3:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
     fc8:	67 66 8b 45 08       	mov    0x8(%di),%ax
     fcd:	66 c1 e0 02          	shl    $0x2,%ax
     fd1:	66 89 c2             	mov    %ax,%dx
     fd4:	66 c1 e2 04          	shl    $0x4,%dx
     fd8:	66 01 d0             	add    %dx,%ax
     fdb:	66 05 a0 38          	add    $0x38a0,%ax
     fdf:	00 00                	add    %al,(%eax)
     fe1:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
     fe8:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
     fea:	67 66 8b 45 08       	mov    0x8(%di),%ax
     fef:	66 c1 e0 02          	shl    $0x2,%ax
     ff3:	66 89 c2             	mov    %ax,%dx
     ff6:	66 c1 e2 04          	shl    $0x4,%dx
     ffa:	66 01 d0             	add    %dx,%ax
     ffd:	66 05 a0 38          	add    $0x38a0,%ax
    1001:	00 00                	add    %al,(%eax)
    1003:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    100a:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = READY;
    100c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1011:	66 c1 e0 02          	shl    $0x2,%ax
    1015:	66 89 c2             	mov    %ax,%dx
    1018:	66 c1 e2 04          	shl    $0x4,%dx
    101c:	66 01 d0             	add    %dx,%ax
    101f:	66 05 b0 38          	add    $0x38b0,%ax
    1023:	00 00                	add    %al,(%eax)
    1025:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    102c:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    102e:	67 66 ff 75 08       	pushw  0x8(%di)
    1033:	66 68 80 4e          	pushw  $0x4e80
    1037:	00 00                	add    %al,(%eax)
    1039:	66 e8 89 09          	callw  19c6 <size+0x11>
    103d:	00 00                	add    %al,(%eax)
    103f:	66 83 c4 08          	add    $0x8,%sp
    PCB_list[index ].eflags = 512;
    1043:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1048:	66 c1 e0 02          	shl    $0x2,%ax
    104c:	66 89 c2             	mov    %ax,%dx
    104f:	66 c1 e2 04          	shl    $0x4,%dx
    1053:	66 01 d0             	add    %dx,%ax
    1056:	66 05 b0 38          	add    $0x38b0,%ax
    105a:	00 00                	add    %al,(%eax)
    105c:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    1063:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    1065:	67 66 8b 45 08       	mov    0x8(%di),%ax
    106a:	66 c1 e0 02          	shl    $0x2,%ax
    106e:	66 89 c2             	mov    %ax,%dx
    1071:	66 c1 e2 04          	shl    $0x4,%dx
    1075:	66 01 d0             	add    %dx,%ax
    1078:	67 66 8d 90 b0 38    	lea    0x38b0(%bx,%si),%dx
    107e:	00 00                	add    %al,(%eax)
    1080:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1085:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 0;
    108a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    108f:	66 c1 e0 02          	shl    $0x2,%ax
    1093:	66 89 c2             	mov    %ax,%dx
    1096:	66 c1 e2 04          	shl    $0x4,%dx
    109a:	66 01 d0             	add    %dx,%ax
    109d:	66 05 c0 38          	add    $0x38c0,%ax
    10a1:	00 00                	add    %al,(%eax)
    10a3:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    10a9:	00 00                	add    %al,(%eax)
}
    10ab:	66 c9                	leavew 
    10ad:	66 c3                	retw   

000010af <Set_PCB>:
void Set_PCB(){
    10af:	66 55                	push   %bp
    10b1:	66 89 e5             	mov    %sp,%bp
    10b4:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    10b8:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    10bf:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    10c1:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    10c8:	00 00                	add    %al,(%eax)
    10ca:	eb 27                	jmp    10f3 <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    10cc:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    10d1:	66 c1 e0 02          	shl    $0x2,%ax
    10d5:	66 89 c2             	mov    %ax,%dx
    10d8:	66 c1 e2 04          	shl    $0x4,%dx
    10dc:	66 01 d0             	add    %dx,%ax
    10df:	66 05 b0 38          	add    $0x38b0,%ax
    10e3:	00 00                	add    %al,(%eax)
    10e5:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    10ec:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 0;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    10ee:	67 66 ff 45 fc       	incw   -0x4(%di)
    10f3:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    10f9:	7e d1                	jle    10cc <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    10fb:	66 c9                	leavew 
    10fd:	66 c3                	retw   

000010ff <sys_schedule>:
int sch_index;
int current_index ;
void sys_schedule(){
    10ff:	66 55                	push   %bp
    1101:	66 89 e5             	mov    %sp,%bp
    int i,j;
    if(isempty(&readyqueue) != 1){
    1104:	66 68 80 4e          	pushw  $0x4e80
    1108:	00 00                	add    %al,(%eax)
    110a:	66 e8 88 08          	callw  1996 <stack_copy+0x35>
    110e:	00 00                	add    %al,(%eax)
    1110:	66 83 c4 04          	add    $0x4,%sp
    1114:	66 83 f8 01          	cmp    $0x1,%ax
    1118:	0f 84 e0 00 66 a1    	je     a16611fe <_end+0xa165c2fa>
        current_index = _CurrentProg - PCB_list;
    111e:	e4 3d                	in     $0x3d,%al
    1120:	66 89 c2             	mov    %ax,%dx
    1123:	66 b8 80 38          	mov    $0x3880,%ax
    1127:	00 00                	add    %al,(%eax)
    1129:	66 29 c2             	sub    %ax,%dx
    112c:	66 89 d0             	mov    %dx,%ax
    112f:	66 c1 f8 02          	sar    $0x2,%ax
    1133:	66 89 c2             	mov    %ax,%dx
    1136:	66 89 d0             	mov    %dx,%ax
    1139:	66 01 c0             	add    %ax,%ax
    113c:	66 01 d0             	add    %dx,%ax
    113f:	67 66 8d 14          	lea    (%si),%dx
    1143:	85 00                	test   %eax,(%eax)
    1145:	00 00                	add    %al,(%eax)
    1147:	00 66 01             	add    %ah,0x1(%esi)
    114a:	d0 66 89             	shlb   -0x77(%esi)
    114d:	c2 66 c1             	ret    $0xc166
    1150:	e2 08                	loop   115a <sys_schedule+0x5b>
    1152:	66 01 d0             	add    %dx,%ax
    1155:	66 89 c2             	mov    %ax,%dx
    1158:	66 c1 e2 10          	shl    $0x10,%dx
    115c:	66 01 d0             	add    %dx,%ax
    115f:	66 f7 d8             	neg    %ax
    1162:	66 a3 e8 3d 66 a1    	mov    %ax,0xa1663de8
        if(_CurrentProg -> prg_status == RUN){
    1168:	e4 3d                	in     $0x3d,%al
    116a:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    116f:	66 83 f8 01          	cmp    $0x1,%ax
    1173:	75 23                	jne    1198 <sys_schedule+0x99>
            _CurrentProg -> prg_status = READY;
    1175:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    117b:	c7 40 38 03 00 00 00 	movl   $0x3,0x38(%eax)
            enqueue(&readyqueue,current_index);
    1182:	66 a1 e8 3d 66 50    	mov    0x50663de8,%ax
    1188:	66 68 80 4e          	pushw  $0x4e80
    118c:	00 00                	add    %al,(%eax)
    118e:	66 e8 34 08          	callw  19c6 <size+0x11>
    1192:	00 00                	add    %al,(%eax)
    1194:	66 83 c4 08          	add    $0x8,%sp
        }
        dequeue(&readyqueue,&sch_index);
    1198:	66 68 d0 3d          	pushw  $0x3dd0
    119c:	00 00                	add    %al,(%eax)
    119e:	66 68 80 4e          	pushw  $0x4e80
    11a2:	00 00                	add    %al,(%eax)
    11a4:	66 e8 8a 08          	callw  1a32 <enqueue+0x6a>
    11a8:	00 00                	add    %al,(%eax)
    11aa:	66 83 c4 08          	add    $0x8,%sp
        if(PCB_list[sch_index].prg_status == READY){
    11ae:	66 a1 d0 3d 66 c1    	mov    0xc1663dd0,%ax
    11b4:	e0 02                	loopne 11b8 <sys_schedule+0xb9>
    11b6:	66 89 c2             	mov    %ax,%dx
    11b9:	66 c1 e2 04          	shl    $0x4,%dx
    11bd:	66 01 d0             	add    %dx,%ax
    11c0:	66 05 b0 38          	add    $0x38b0,%ax
    11c4:	00 00                	add    %al,(%eax)
    11c6:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    11cb:	66 83 f8 03          	cmp    $0x3,%ax
    11cf:	75 2b                	jne    11fc <sys_schedule+0xfd>
            _CurrentProg = PCB_list + sch_index;
    11d1:	66 a1 d0 3d 66 c1    	mov    0xc1663dd0,%ax
    11d7:	e0 02                	loopne 11db <sys_schedule+0xdc>
    11d9:	66 89 c2             	mov    %ax,%dx
    11dc:	66 c1 e2 04          	shl    $0x4,%dx
    11e0:	66 01 d0             	add    %dx,%ax
    11e3:	66 05 80 38          	add    $0x3880,%ax
    11e7:	00 00                	add    %al,(%eax)
    11e9:	66 a3 e4 3d 66 a1    	mov    %ax,0xa1663de4
            _CurrentProg -> prg_status = RUN;
    11ef:	e4 3d                	in     $0x3d,%al
    11f1:	67 66 c7 40 38 01 00 	movw   $0x1,0x38(%bx,%si)
    11f8:	00 00                	add    %al,(%eax)
            return;
    11fa:	eb 0a                	jmp    1206 <sys_schedule+0x107>
        }
    }
    _CurrentProg = PCB_list ;
    11fc:	66 c7 06 e4 3d       	movw   $0x3de4,(%esi)
    1201:	80 38 00             	cmpb   $0x0,(%eax)
    1204:	00 90 66 c9 66 c3    	add    %dl,-0x3c99369a(%eax)

0000120a <sys_exit>:
    return;
    
}
void sys_exit(){
    120a:	66 55                	push   %bp
    120c:	66 89 e5             	mov    %sp,%bp
    120f:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    1213:	fa                   	cli    
    int index = _CurrentProg - PCB_list;
    1214:	66 a1 e4 3d 66 89    	mov    0x89663de4,%ax
    121a:	c2 66 b8             	ret    $0xb866
    121d:	80 38 00             	cmpb   $0x0,(%eax)
    1220:	00 66 29             	add    %ah,0x29(%esi)
    1223:	c2 66 89             	ret    $0x8966
    1226:	d0 66 c1             	shlb   -0x3f(%esi)
    1229:	f8                   	clc    
    122a:	02 66 89             	add    -0x77(%esi),%ah
    122d:	c2 66 89             	ret    $0x8966
    1230:	d0 66 01             	shlb   0x1(%esi)
    1233:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    1237:	67 66 8d 14          	lea    (%si),%dx
    123b:	85 00                	test   %eax,(%eax)
    123d:	00 00                	add    %al,(%eax)
    123f:	00 66 01             	add    %ah,0x1(%esi)
    1242:	d0 66 89             	shlb   -0x77(%esi)
    1245:	c2 66 c1             	ret    $0xc166
    1248:	e2 08                	loop   1252 <sys_exit+0x48>
    124a:	66 01 d0             	add    %dx,%ax
    124d:	66 89 c2             	mov    %ax,%dx
    1250:	66 c1 e2 10          	shl    $0x10,%dx
    1254:	66 01 d0             	add    %dx,%ax
    1257:	66 f7 d8             	neg    %ax
    125a:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    rmele(&readyqueue,index);
    125f:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1264:	66 68 80 4e          	pushw  $0x4e80
    1268:	00 00                	add    %al,(%eax)
    126a:	66 e8 68 08          	callw  1ad6 <init_queue+0x30>
    126e:	00 00                	add    %al,(%eax)
    1270:	66 83 c4 08          	add    $0x8,%sp
    _CurrentProg -> prg_status = EXIT;
    1274:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    127a:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    __asm__("sti\n");
    1281:	fb                   	sti    
}
    1282:	66 c9                	leavew 
    1284:	66 c3                	retw   

00001286 <sys_bolocked>:



int queuesize,tmp;//一定要是全局，否则dequeue无法将tmp修改
void sys_bolocked(int index){
    1286:	66 55                	push   %bp
    1288:	66 89 e5             	mov    %sp,%bp
    128b:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    128f:	fa                   	cli    
    PCB_list[index].prg_status = BLOCKED;
    1290:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1295:	66 c1 e0 02          	shl    $0x2,%ax
    1299:	66 89 c2             	mov    %ax,%dx
    129c:	66 c1 e2 04          	shl    $0x4,%dx
    12a0:	66 01 d0             	add    %dx,%ax
    12a3:	66 05 b0 38          	add    $0x38b0,%ax
    12a7:	00 00                	add    %al,(%eax)
    12a9:	67 66 c7 40 08 02 00 	movw   $0x2,0x8(%bx,%si)
    12b0:	00 00                	add    %al,(%eax)
    enqueue(&blockqueue,index);
    12b2:	67 66 ff 75 08       	pushw  0x8(%di)
    12b7:	66 68 e0 37          	pushw  $0x37e0
    12bb:	00 00                	add    %al,(%eax)
    12bd:	66 e8 05 07          	callw  19c6 <size+0x11>
    12c1:	00 00                	add    %al,(%eax)
    12c3:	66 83 c4 08          	add    $0x8,%sp
    queuesize = size(&readyqueue);
    12c7:	66 68 80 4e          	pushw  $0x4e80
    12cb:	00 00                	add    %al,(%eax)
    12cd:	66 e8 e2 06          	callw  19b3 <isempty+0x1b>
    12d1:	00 00                	add    %al,(%eax)
    12d3:	66 83 c4 04          	add    $0x4,%sp
    12d7:	66 a3 c8 37 67 66    	mov    %ax,0x666737c8
    int i = 0;
    12dd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    12e4:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    12eb:	00 00                	add    %al,(%eax)
    12ed:	eb 3c                	jmp    132b <sys_bolocked+0xa5>
        dequeue(&readyqueue,&tmp);
    12ef:	66 68 c4 37          	pushw  $0x37c4
    12f3:	00 00                	add    %al,(%eax)
    12f5:	66 68 80 4e          	pushw  $0x4e80
    12f9:	00 00                	add    %al,(%eax)
    12fb:	66 e8 33 07          	callw  1a32 <enqueue+0x6a>
    12ff:	00 00                	add    %al,(%eax)
    1301:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    1305:	66 a1 c4 37 67 66    	mov    0x666737c4,%ax
    130b:	39 45 08             	cmp    %eax,0x8(%ebp)
    130e:	74 16                	je     1326 <sys_bolocked+0xa0>
            enqueue(&readyqueue,tmp);
    1310:	66 a1 c4 37 66 50    	mov    0x506637c4,%ax
    1316:	66 68 80 4e          	pushw  $0x4e80
    131a:	00 00                	add    %al,(%eax)
    131c:	66 e8 a6 06          	callw  19c6 <size+0x11>
    1320:	00 00                	add    %al,(%eax)
    1322:	66 83 c4 08          	add    $0x8,%sp
    __asm__("cli\n");
    PCB_list[index].prg_status = BLOCKED;
    enqueue(&blockqueue,index);
    queuesize = size(&readyqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    1326:	67 66 ff 45 fc       	incw   -0x4(%di)
    132b:	66 a1 c8 37 67 66    	mov    0x666737c8,%ax
    1331:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1334:	7c b9                	jl     12ef <sys_bolocked+0x69>
        dequeue(&readyqueue,&tmp);
        if(index != tmp){
            enqueue(&readyqueue,tmp);
        }
    }
    __asm__("sti\n");
    1336:	fb                   	sti    
}
    1337:	66 c9                	leavew 
    1339:	66 c3                	retw   

0000133b <sys_wakeup>:
void sys_wakeup(int index){
    133b:	66 55                	push   %bp
    133d:	66 89 e5             	mov    %sp,%bp
    1340:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    1344:	fa                   	cli    
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    1345:	66 68 e0 37          	pushw  $0x37e0
    1349:	00 00                	add    %al,(%eax)
    134b:	66 e8 64 06          	callw  19b3 <isempty+0x1b>
    134f:	00 00                	add    %al,(%eax)
    1351:	66 83 c4 04          	add    $0x4,%sp
    1355:	66 a3 c8 37 67 66    	mov    %ax,0x666737c8
    int i = 0;
    135b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    1362:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1369:	00 00                	add    %al,(%eax)
    136b:	eb 3c                	jmp    13a9 <sys_wakeup+0x6e>
        dequeue(&blockqueue,&tmp);
    136d:	66 68 c4 37          	pushw  $0x37c4
    1371:	00 00                	add    %al,(%eax)
    1373:	66 68 e0 37          	pushw  $0x37e0
    1377:	00 00                	add    %al,(%eax)
    1379:	66 e8 b5 06          	callw  1a32 <enqueue+0x6a>
    137d:	00 00                	add    %al,(%eax)
    137f:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    1383:	66 a1 c4 37 67 66    	mov    0x666737c4,%ax
    1389:	39 45 08             	cmp    %eax,0x8(%ebp)
    138c:	74 16                	je     13a4 <sys_wakeup+0x69>
            enqueue(&blockqueue,tmp);
    138e:	66 a1 c4 37 66 50    	mov    0x506637c4,%ax
    1394:	66 68 e0 37          	pushw  $0x37e0
    1398:	00 00                	add    %al,(%eax)
    139a:	66 e8 28 06          	callw  19c6 <size+0x11>
    139e:	00 00                	add    %al,(%eax)
    13a0:	66 83 c4 08          	add    $0x8,%sp
void sys_wakeup(int index){
    __asm__("cli\n");
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    13a4:	67 66 ff 45 fc       	incw   -0x4(%di)
    13a9:	66 a1 c8 37 67 66    	mov    0x666737c8,%ax
    13af:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    13b2:	7c b9                	jl     136d <sys_wakeup+0x32>
        dequeue(&blockqueue,&tmp);
        if(index != tmp){
            enqueue(&blockqueue,tmp);
        }
    }
    PCB_list[index].prg_status = READY;
    13b4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    13b9:	66 c1 e0 02          	shl    $0x2,%ax
    13bd:	66 89 c2             	mov    %ax,%dx
    13c0:	66 c1 e2 04          	shl    $0x4,%dx
    13c4:	66 01 d0             	add    %dx,%ax
    13c7:	66 05 b0 38          	add    $0x38b0,%ax
    13cb:	00 00                	add    %al,(%eax)
    13cd:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    13d4:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    13d6:	67 66 ff 75 08       	pushw  0x8(%di)
    13db:	66 68 80 4e          	pushw  $0x4e80
    13df:	00 00                	add    %al,(%eax)
    13e1:	66 e8 e1 05          	callw  19c6 <size+0x11>
    13e5:	00 00                	add    %al,(%eax)
    13e7:	66 83 c4 08          	add    $0x8,%sp
    __asm__("sti\n");
    13eb:	fb                   	sti    
}
    13ec:	66 c9                	leavew 
    13ee:	66 c3                	retw   

000013f0 <sys_run>:
void sys_run(){
    13f0:	66 55                	push   %bp
    13f2:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    13f5:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    13fb:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    1402:	66 5d                	pop    %bp
    1404:	66 c3                	retw   

00001406 <do_fork>:

int do_fork(){
    1406:	66 55                	push   %bp
    1408:	66 89 e5             	mov    %sp,%bp
    140b:	66 83 ec 08          	sub    $0x8,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    140f:	67 66 c7 45 fc c4 38 	movw   $0x38c4,-0x4(%di)
    1416:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN )    fork_prg = fork_prg + 1;//应该增加used位，防止被覆盖
    1418:	eb 06                	jmp    1420 <do_fork+0x1a>
    141a:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    1420:	67 66 81 7d fc d0 3d 	cmpw   $0x3dd0,-0x4(%di)
    1427:	00 00                	add    %al,(%eax)
    1429:	73 10                	jae    143b <do_fork+0x35>
    142b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1430:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    1435:	66 83 f8 01          	cmp    $0x1,%ax
    1439:	74 df                	je     141a <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    143b:	67 66 81 7d fc 8c 3d 	cmpw   $0x3d8c,-0x4(%di)
    1442:	00 00                	add    %al,(%eax)
    1444:	76 0f                	jbe    1455 <do_fork+0x4f>
    1446:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    144c:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    1452:	e9 42 02 66 e8       	jmp    e8661699 <_end+0xe865c795>
    else{
        _Schedule_once();
    1457:	0b ee                	or     %esi,%ebp
    1459:	ff                   	(bad)  
    145a:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    145d:	ec                   	in     (%dx),%al
    145e:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    145f:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    1465:	ff 75 fc             	pushl  -0x4(%ebp)
    1468:	66 50                	push   %ax
    146a:	66 e8 e6 03          	callw  1854 <counter+0x62>
    146e:	00 00                	add    %al,(%eax)
    1470:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    1474:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    1478:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    147d:	66 b8 80 38          	mov    $0x3880,%ax
    1481:	00 00                	add    %al,(%eax)
    1483:	66 29 c2             	sub    %ax,%dx
    1486:	66 89 d0             	mov    %dx,%ax
    1489:	66 c1 f8 02          	sar    $0x2,%ax
    148d:	66 89 c2             	mov    %ax,%dx
    1490:	66 89 d0             	mov    %dx,%ax
    1493:	66 01 c0             	add    %ax,%ax
    1496:	66 01 d0             	add    %dx,%ax
    1499:	67 66 8d 14          	lea    (%si),%dx
    149d:	85 00                	test   %eax,(%eax)
    149f:	00 00                	add    %al,(%eax)
    14a1:	00 66 01             	add    %ah,0x1(%esi)
    14a4:	d0 66 89             	shlb   -0x77(%esi)
    14a7:	c2 66 c1             	ret    $0xc166
    14aa:	e2 08                	loop   14b4 <do_fork+0xae>
    14ac:	66 01 d0             	add    %dx,%ax
    14af:	66 89 c2             	mov    %ax,%dx
    14b2:	66 c1 e2 10          	shl    $0x10,%dx
    14b6:	66 01 d0             	add    %dx,%ax
    14b9:	66 f7 d8             	neg    %ax
    14bc:	66 89 c2             	mov    %ax,%dx
    14bf:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    14c4:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    14c9:	66 a1 e4 3d 66 89    	mov    0x89663de4,%ax
    14cf:	c2 66 b8             	ret    $0xb866
    14d2:	80 38 00             	cmpb   $0x0,(%eax)
    14d5:	00 66 29             	add    %ah,0x29(%esi)
    14d8:	c2 66 89             	ret    $0x8966
    14db:	d0 66 c1             	shlb   -0x3f(%esi)
    14de:	f8                   	clc    
    14df:	02 66 89             	add    -0x77(%esi),%ah
    14e2:	c2 66 89             	ret    $0x8966
    14e5:	d0 66 01             	shlb   0x1(%esi)
    14e8:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    14ec:	67 66 8d 14          	lea    (%si),%dx
    14f0:	85 00                	test   %eax,(%eax)
    14f2:	00 00                	add    %al,(%eax)
    14f4:	00 66 01             	add    %ah,0x1(%esi)
    14f7:	d0 66 89             	shlb   -0x77(%esi)
    14fa:	c2 66 c1             	ret    $0xc166
    14fd:	e2 08                	loop   1507 <do_fork+0x101>
    14ff:	66 01 d0             	add    %dx,%ax
    1502:	66 89 c2             	mov    %ax,%dx
    1505:	66 c1 e2 10          	shl    $0x10,%dx
    1509:	66 01 d0             	add    %dx,%ax
    150c:	66 f7 d8             	neg    %ax
    150f:	66 89 c2             	mov    %ax,%dx
    1512:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1517:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    151c:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    1522:	8b 50 20             	mov    0x20(%eax),%edx
    1525:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    152a:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    152f:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1534:	66 b8 80 38          	mov    $0x3880,%ax
    1538:	00 00                	add    %al,(%eax)
    153a:	66 29 c2             	sub    %ax,%dx
    153d:	66 89 d0             	mov    %dx,%ax
    1540:	66 c1 f8 02          	sar    $0x2,%ax
    1544:	66 89 c2             	mov    %ax,%dx
    1547:	66 89 d0             	mov    %dx,%ax
    154a:	66 01 c0             	add    %ax,%ax
    154d:	66 01 d0             	add    %dx,%ax
    1550:	67 66 8d 14          	lea    (%si),%dx
    1554:	85 00                	test   %eax,(%eax)
    1556:	00 00                	add    %al,(%eax)
    1558:	00 66 01             	add    %ah,0x1(%esi)
    155b:	d0 66 89             	shlb   -0x77(%esi)
    155e:	c2 66 c1             	ret    $0xc166
    1561:	e2 08                	loop   156b <do_fork+0x165>
    1563:	66 01 d0             	add    %dx,%ax
    1566:	66 89 c2             	mov    %ax,%dx
    1569:	66 c1 e2 10          	shl    $0x10,%dx
    156d:	66 01 d0             	add    %dx,%ax
    1570:	66 f7 d8             	neg    %ax
    1573:	66 83 c0 02          	add    $0x2,%ax
    1577:	66 c1 e0 0c          	shl    $0xc,%ax
    157b:	66 89 c2             	mov    %ax,%dx
    157e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1583:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    1588:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    158e:	8b 50 30             	mov    0x30(%eax),%edx
    1591:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1596:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    159b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    15a0:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    15a7:	00 00                	add    %al,(%eax)
        
        int index = fork_prg - PCB_list;
    15a9:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    15ae:	66 b8 80 38          	mov    $0x3880,%ax
    15b2:	00 00                	add    %al,(%eax)
    15b4:	66 29 c2             	sub    %ax,%dx
    15b7:	66 89 d0             	mov    %dx,%ax
    15ba:	66 c1 f8 02          	sar    $0x2,%ax
    15be:	66 89 c2             	mov    %ax,%dx
    15c1:	66 89 d0             	mov    %dx,%ax
    15c4:	66 01 c0             	add    %ax,%ax
    15c7:	66 01 d0             	add    %dx,%ax
    15ca:	67 66 8d 14          	lea    (%si),%dx
    15ce:	85 00                	test   %eax,(%eax)
    15d0:	00 00                	add    %al,(%eax)
    15d2:	00 66 01             	add    %ah,0x1(%esi)
    15d5:	d0 66 89             	shlb   -0x77(%esi)
    15d8:	c2 66 c1             	ret    $0xc166
    15db:	e2 08                	loop   15e5 <do_fork+0x1df>
    15dd:	66 01 d0             	add    %dx,%ax
    15e0:	66 89 c2             	mov    %ax,%dx
    15e3:	66 c1 e2 10          	shl    $0x10,%dx
    15e7:	66 01 d0             	add    %dx,%ax
    15ea:	66 f7 d8             	neg    %ax
    15ed:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
        __asm__("sub $6,%esp");
    15f2:	66 83 ec 06          	sub    $0x6,%sp
        enqueue(&readyqueue,index); 
    15f6:	67 66 ff 75 f8       	pushw  -0x8(%di)
    15fb:	66 68 80 4e          	pushw  $0x4e80
    15ff:	00 00                	add    %al,(%eax)
    1601:	66 e8 c1 03          	callw  19c6 <size+0x11>
    1605:	00 00                	add    %al,(%eax)
    1607:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    160b:	66 83 c4 06          	add    $0x6,%sp
        _Schedule_once();
    160f:	66 e8 51 ec          	callw  264 <S+0x14>
    1613:	ff                   	(bad)  
    1614:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    1617:	ec                   	in     (%dx),%al
    1618:	06                   	push   %es
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    1619:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    161e:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1623:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    1629:	8b 50 28             	mov    0x28(%eax),%edx
    162c:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    1632:	8b 40 24             	mov    0x24(%eax),%eax
    1635:	66 51                	push   %cx
    1637:	66 52                	push   %dx
    1639:	66 50                	push   %ax
    163b:	66 e8 14 eb          	callw  153 <Message31+0x4>
    163f:	ff                   	(bad)  
    1640:	ff 66 83             	jmp    *-0x7d(%esi)
    1643:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
        __asm__("add $6,%esp");
    1646:	83 c4 06             	add    $0x6,%esp
        fork_prg -> ip = _CurrentProg -> ip;
    1649:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    164f:	8b 50 2c             	mov    0x2c(%eax),%edx
    1652:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1657:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    165c:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1661:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1667:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    1669:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    166f:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1672:	75 08                	jne    167c <do_fork+0x276>
            return 0;
    1674:	66 b8 00 00          	mov    $0x0,%ax
    1678:	00 00                	add    %al,(%eax)
    167a:	eb 1b                	jmp    1697 <do_fork+0x291>
        }
        _CurrentProg -> eax = _CurrentProg -> id;
    167c:	66 a1 e4 3d 66 8b    	mov    0x8b663de4,%ax
    1682:	16                   	push   %ss
    1683:	e4 3d                	in     $0x3d,%al
    1685:	67 66 8b 52 3c       	mov    0x3c(%bp,%si),%dx
    168a:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    168e:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    1694:	8b 00                	mov    (%eax),%eax
    1696:	90                   	nop
    }
}
    1697:	66 c9                	leavew 
    1699:	66 c3                	retw   

0000169b <sys_exit_fork>:
void sys_exit_fork(char ch){
    169b:	66 55                	push   %bp
    169d:	66 89 e5             	mov    %sp,%bp
    16a0:	66 83 ec 0c          	sub    $0xc,%sp
    16a4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16a9:	67 88 45 f4          	mov    %al,-0xc(%di)
    int current_id = _CurrentProg - PCB_list;
    16ad:	66 a1 e4 3d 66 89    	mov    0x89663de4,%ax
    16b3:	c2 66 b8             	ret    $0xb866
    16b6:	80 38 00             	cmpb   $0x0,(%eax)
    16b9:	00 66 29             	add    %ah,0x29(%esi)
    16bc:	c2 66 89             	ret    $0x8966
    16bf:	d0 66 c1             	shlb   -0x3f(%esi)
    16c2:	f8                   	clc    
    16c3:	02 66 89             	add    -0x77(%esi),%ah
    16c6:	c2 66 89             	ret    $0x8966
    16c9:	d0 66 01             	shlb   0x1(%esi)
    16cc:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    16d0:	67 66 8d 14          	lea    (%si),%dx
    16d4:	85 00                	test   %eax,(%eax)
    16d6:	00 00                	add    %al,(%eax)
    16d8:	00 66 01             	add    %ah,0x1(%esi)
    16db:	d0 66 89             	shlb   -0x77(%esi)
    16de:	c2 66 c1             	ret    $0xc166
    16e1:	e2 08                	loop   16eb <sys_exit_fork+0x50>
    16e3:	66 01 d0             	add    %dx,%ax
    16e6:	66 89 c2             	mov    %ax,%dx
    16e9:	66 c1 e2 10          	shl    $0x10,%dx
    16ed:	66 01 d0             	add    %dx,%ax
    16f0:	66 f7 d8             	neg    %ax
    16f3:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    int index = _CurrentProg -> fid;
    16f8:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    16fe:	8b 40 40             	mov    0x40(%eax),%eax
    1701:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    sys_wakeup(index);
    1706:	67 66 ff 75 f8       	pushw  -0x8(%di)
    170b:	66 e8 2a fc          	callw  1339 <sys_bolocked+0xb3>
    170f:	ff                   	(bad)  
    1710:	ff 66 83             	jmp    *-0x7d(%esi)
    1713:	c4 04 66             	les    (%esi,%eiz,2),%eax
    PCB_list[_CurrentProg -> fid].eax = ch;
    1716:	a1 e4 3d 67 66       	mov    0x66673de4,%eax
    171b:	8b 40 40             	mov    0x40(%eax),%eax
    171e:	67 66 0f be 55 f4    	movsbw -0xc(%di),%dx
    1724:	66 c1 e0 02          	shl    $0x2,%ax
    1728:	66 89 c1             	mov    %ax,%cx
    172b:	66 c1 e1 04          	shl    $0x4,%cx
    172f:	66 01 c8             	add    %cx,%ax
    1732:	66 05 80 38          	add    $0x3880,%ax
    1736:	00 00                	add    %al,(%eax)
    1738:	67 66 89 10          	mov    %dx,(%bx,%si)
    _CurrentProg -> prg_status = EXIT;
    173c:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    1742:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    rmele(&readyqueue,current_id);
    1749:	67 66 ff 75 fc       	pushw  -0x4(%di)
    174e:	66 68 80 4e          	pushw  $0x4e80
    1752:	00 00                	add    %al,(%eax)
    1754:	66 e8 7e 03          	callw  1ad6 <init_queue+0x30>
    1758:	00 00                	add    %al,(%eax)
    175a:	66 83 c4 08          	add    $0x8,%sp
    _Schedule();
    175e:	66 e8 18 eb          	callw  27a <_fork_user+0x9>
    1762:	ff                   	(bad)  
    1763:	ff 66 c9             	jmp    *-0x37(%esi)
}
    1766:	66 c3                	retw   

00001768 <sys_wait>:
int sys_wait(){
    1768:	66 55                	push   %bp
    176a:	66 89 e5             	mov    %sp,%bp
    176d:	66 83 ec 04          	sub    $0x4,%sp
    int index = _CurrentProg - PCB_list;
    1771:	66 a1 e4 3d 66 89    	mov    0x89663de4,%ax
    1777:	c2 66 b8             	ret    $0xb866
    177a:	80 38 00             	cmpb   $0x0,(%eax)
    177d:	00 66 29             	add    %ah,0x29(%esi)
    1780:	c2 66 89             	ret    $0x8966
    1783:	d0 66 c1             	shlb   -0x3f(%esi)
    1786:	f8                   	clc    
    1787:	02 66 89             	add    -0x77(%esi),%ah
    178a:	c2 66 89             	ret    $0x8966
    178d:	d0 66 01             	shlb   0x1(%esi)
    1790:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    1794:	67 66 8d 14          	lea    (%si),%dx
    1798:	85 00                	test   %eax,(%eax)
    179a:	00 00                	add    %al,(%eax)
    179c:	00 66 01             	add    %ah,0x1(%esi)
    179f:	d0 66 89             	shlb   -0x77(%esi)
    17a2:	c2 66 c1             	ret    $0xc166
    17a5:	e2 08                	loop   17af <sys_wait+0x47>
    17a7:	66 01 d0             	add    %dx,%ax
    17aa:	66 89 c2             	mov    %ax,%dx
    17ad:	66 c1 e2 10          	shl    $0x10,%dx
    17b1:	66 01 d0             	add    %dx,%ax
    17b4:	66 f7 d8             	neg    %ax
    17b7:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_bolocked(index);
    17bc:	67 66 ff 75 fc       	pushw  -0x4(%di)
    17c1:	66 e8 bf fa          	callw  1284 <sys_exit+0x7a>
    17c5:	ff                   	(bad)  
    17c6:	ff 66 83             	jmp    *-0x7d(%esi)
    17c9:	c4 04 66             	les    (%esi,%eiz,2),%eax
    _Schedule();
    17cc:	e8 ab ea ff ff       	call   27c <_Schedule>
    return _CurrentProg -> eax;
    17d1:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    17d7:	8b 00                	mov    (%eax),%eax
}
    17d9:	66 c9                	leavew 
    17db:	66 c3                	retw   

000017dd <thread_join>:
void thread_join(){
    17dd:	66 55                	push   %bp
    17df:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    17e2:	90                   	nop
    17e3:	66 e8 09 00          	callw  17f0 <thread_join+0x13>
    17e7:	00 00                	add    %al,(%eax)
    17e9:	66 85 c0             	test   %ax,%ax
    17ec:	75 f5                	jne    17e3 <thread_join+0x6>
    }
}
    17ee:	66 5d                	pop    %bp
    17f0:	66 c3                	retw   

000017f2 <counter>:
int counter(){
    17f2:	66 55                	push   %bp
    17f4:	66 89 e5             	mov    %sp,%bp
    17f7:	66 83 ec 08          	sub    $0x8,%sp
   // __asm__("cli\n");
    int i = 0;
    17fb:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1802:	00 00                	add    %al,(%eax)
    int count = 0;
    1804:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    180b:	00 00                	add    %al,(%eax)
    for(i = 1;i < PCB_NUMMER;i ++){
    180d:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    1814:	00 00                	add    %al,(%eax)
    1816:	eb 2d                	jmp    1845 <counter+0x53>
        if(PCB_list[i].prg_status != EXIT){
    1818:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    181d:	66 c1 e0 02          	shl    $0x2,%ax
    1821:	66 89 c2             	mov    %ax,%dx
    1824:	66 c1 e2 04          	shl    $0x4,%dx
    1828:	66 01 d0             	add    %dx,%ax
    182b:	66 05 b0 38          	add    $0x38b0,%ax
    182f:	00 00                	add    %al,(%eax)
    1831:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1836:	66 85 c0             	test   %ax,%ax
    1839:	74 05                	je     1840 <counter+0x4e>
            count ++;
    183b:	67 66 ff 45 f8       	incw   -0x8(%di)
}
int counter(){
   // __asm__("cli\n");
    int i = 0;
    int count = 0;
    for(i = 1;i < PCB_NUMMER;i ++){
    1840:	67 66 ff 45 fc       	incw   -0x4(%di)
    1845:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    184b:	7e cb                	jle    1818 <counter+0x26>
        if(PCB_list[i].prg_status != EXIT){
            count ++;
        }
    }
    //__asm__("sti\n");
    return count;
    184d:	67 66 8b 45 f8       	mov    -0x8(%di),%ax

}
    1852:	66 c9                	leavew 
    1854:	66 c3                	retw   

00001856 <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    1856:	66 55                	push   %bp
    1858:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    185b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1860:	67 66 8b 10          	mov    (%bx,%si),%dx
    1864:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1869:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    186d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1872:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    1877:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    187c:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    1881:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1886:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    188b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1890:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    1895:	67 66 8b 45 08       	mov    0x8(%di),%ax
    189a:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    189f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    18a4:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    18a9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    18ae:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    18b3:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    18b8:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    18bd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    18c2:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    18c7:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    18cc:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    18d1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    18d6:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    18db:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    18e0:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    18e5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    18ea:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    18ef:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    18f4:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    18f9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    18fe:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    1903:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1908:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    190d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1912:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    1917:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    191c:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    1921:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1926:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    192b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1930:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    1935:	67 66 8b 45 08       	mov    0x8(%di),%ax
    193a:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    193f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1944:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    1949:	67 66 8b 45 08       	mov    0x8(%di),%ax
    194e:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    1953:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1958:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    195d:	66 5d                	pop    %bp
    195f:	66 c3                	retw   

00001961 <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    1961:	66 55                	push   %bp
    1963:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    1966:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    196b:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1970:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1975:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    197a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    197f:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    1984:	66 51                	push   %cx
    1986:	66 52                	push   %dx
    1988:	66 50                	push   %ax
    198a:	66 e8 c5 e7          	callw  153 <Message31+0x4>
    198e:	ff                   	(bad)  
    198f:	ff 66 83             	jmp    *-0x7d(%esi)
    1992:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    1995:	c9                   	leave  
    1996:	66 c3                	retw   

00001998 <isempty>:
int isempty(struct Queue *queue){
    1998:	66 55                	push   %bp
    199a:	66 89 e5             	mov    %sp,%bp
    
    return (queue -> size == 0);
    199d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19a2:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    19a7:	66 85 c0             	test   %ax,%ax
    19aa:	0f 94 c0             	sete   %al
    19ad:	66 0f b6 c0          	movzbw %al,%ax

}
    19b1:	66 5d                	pop    %bp
    19b3:	66 c3                	retw   

000019b5 <size>:
int size(struct Queue *queue){
    19b5:	66 55                	push   %bp
    19b7:	66 89 e5             	mov    %sp,%bp
    return queue -> size ;
    19ba:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19bf:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
}
    19c4:	66 5d                	pop    %bp
    19c6:	66 c3                	retw   

000019c8 <enqueue>:
void enqueue(struct Queue *queue,int data){
    19c8:	66 55                	push   %bp
    19ca:	66 89 e5             	mov    %sp,%bp
    if(queue -> size >= MAX){
    19cd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19d2:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    19d7:	66 83 f8 1d          	cmp    $0x1d,%ax
    19db:	7e 02                	jle    19df <enqueue+0x17>
        return;
    19dd:	eb 51                	jmp    1a30 <enqueue+0x68>
    }
    queue -> size ++;
    19df:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19e4:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    19e9:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    19ee:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19f3:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    queue -> tail = (queue -> tail + 1) % MAX;
    19f8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19fd:	67 66 8b 00          	mov    (%bx,%si),%ax
    1a01:	66 40                	inc    %ax
    1a03:	66 b9 1e 00          	mov    $0x1e,%cx
    1a07:	00 00                	add    %al,(%eax)
    1a09:	66 99                	cwtd   
    1a0b:	66 f7 f9             	idiv   %cx
    1a0e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a13:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> array[queue -> tail] = data;
    1a17:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a1c:	67 66 8b 10          	mov    (%bx,%si),%dx
    1a20:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a25:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    1a2a:	67 66 89 4c 90       	mov    %cx,-0x70(%si)
    1a2f:	0c 66                	or     $0x66,%al

}
    1a31:	5d                   	pop    %ebp
    1a32:	66 c3                	retw   

00001a34 <dequeue>:
void dequeue(struct Queue *queue,int * data){
    1a34:	66 55                	push   %bp
    1a36:	66 89 e5             	mov    %sp,%bp

    if(queue -> size <= 0){
    1a39:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a3e:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1a43:	66 85 c0             	test   %ax,%ax
    1a46:	7f 02                	jg     1a4a <dequeue+0x16>
        return;
    1a48:	eb 58                	jmp    1aa2 <dequeue+0x6e>
    }
    queue -> size --;
    1a4a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a4f:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1a54:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    1a59:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a5e:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    *data = queue -> array[queue -> head];
    1a63:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a68:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    1a6d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a72:	67 66 8b 54 90       	mov    -0x70(%si),%dx
    1a77:	0c 67                	or     $0x67,%al
    1a79:	66 8b 45 0c          	mov    0xc(%ebp),%ax
    1a7d:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> head = (queue -> head + 1) % MAX;
    1a81:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a86:	67 66 8b 40 04       	mov    0x4(%bx,%si),%ax
    1a8b:	66 40                	inc    %ax
    1a8d:	66 b9 1e 00          	mov    $0x1e,%cx
    1a91:	00 00                	add    %al,(%eax)
    1a93:	66 99                	cwtd   
    1a95:	66 f7 f9             	idiv   %cx
    1a98:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a9d:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)

}
    1aa2:	66 5d                	pop    %bp
    1aa4:	66 c3                	retw   

00001aa6 <init_queue>:
void init_queue(struct Queue *queue){
    1aa6:	66 55                	push   %bp
    1aa8:	66 89 e5             	mov    %sp,%bp
    queue -> size = 0;
    1aab:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ab0:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    1ab7:	00 00                	add    %al,(%eax)
    queue -> tail = MAX - 1;
    1ab9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1abe:	67 66 c7 00 1d 00    	movw   $0x1d,(%bx,%si)
    1ac4:	00 00                	add    %al,(%eax)
    queue -> head = 0;
    1ac6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1acb:	67 66 c7 40 04 00 00 	movw   $0x0,0x4(%bx,%si)
    1ad2:	00 00                	add    %al,(%eax)
}
    1ad4:	66 5d                	pop    %bp
    1ad6:	66 c3                	retw   

00001ad8 <rmele>:
int rm_tmp;
int ii;
int size_of_rmqueue;
void rmele(struct Queue *queue,int data){
    1ad8:	66 55                	push   %bp
    1ada:	66 89 e5             	mov    %sp,%bp
    size_of_rmqueue= size(queue);
    1add:	67 66 ff 75 08       	pushw  0x8(%di)
    1ae2:	66 e8 cd fe          	callw  19b3 <isempty+0x1b>
    1ae6:	ff                   	(bad)  
    1ae7:	ff 66 83             	jmp    *-0x7d(%esi)
    1aea:	c4 04 66             	les    (%esi,%eiz,2),%eax
    1aed:	a3 d8 3d 66 c7       	mov    %eax,0xc7663dd8
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    1af2:	06                   	push   %es
    1af3:	dc 3d 00 00 00 00    	fdivrl 0x0
    1af9:	eb 3f                	jmp    1b3a <rmele+0x62>
        dequeue(queue,&rm_tmp);
    1afb:	66 68 68 4e          	pushw  $0x4e68
    1aff:	00 00                	add    %al,(%eax)
    1b01:	67 66 ff 75 08       	pushw  0x8(%di)
    1b06:	66 e8 28 ff          	callw  1a32 <enqueue+0x6a>
    1b0a:	ff                   	(bad)  
    1b0b:	ff 66 83             	jmp    *-0x7d(%esi)
    1b0e:	c4 08                	les    (%eax),%ecx
        if(rm_tmp != data){
    1b10:	66 a1 68 4e 67 66    	mov    0x66674e68,%ax
    1b16:	3b 45 0c             	cmp    0xc(%ebp),%eax
    1b19:	74 15                	je     1b30 <rmele+0x58>
            enqueue(queue,rm_tmp);
    1b1b:	66 a1 68 4e 66 50    	mov    0x50664e68,%ax
    1b21:	67 66 ff 75 08       	pushw  0x8(%di)
    1b26:	66 e8 9c fe          	callw  19c6 <size+0x11>
    1b2a:	ff                   	(bad)  
    1b2b:	ff 66 83             	jmp    *-0x7d(%esi)
    1b2e:	c4 08                	les    (%eax),%ecx
int rm_tmp;
int ii;
int size_of_rmqueue;
void rmele(struct Queue *queue,int data){
    size_of_rmqueue= size(queue);
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    1b30:	66 a1 dc 3d 66 40    	mov    0x40663ddc,%ax
    1b36:	66 a3 dc 3d 66 8b    	mov    %ax,0x8b663ddc
    1b3c:	16                   	push   %ss
    1b3d:	dc 3d 66 a1 d8 3d    	fdivrl 0x3dd8a166
    1b43:	66 39 c2             	cmp    %ax,%dx
    1b46:	7c b3                	jl     1afb <rmele+0x23>
        dequeue(queue,&rm_tmp);
        if(rm_tmp != data){
            enqueue(queue,rm_tmp);
        }
    }
}
    1b48:	66 c9                	leavew 
    1b4a:	66 c3                	retw   

00001b4c <init_Semlist>:
void init_Semlist(int index){
    1b4c:	66 55                	push   %bp
    1b4e:	66 89 e5             	mov    %sp,%bp
    SEM_list[index].used = 0;
    1b51:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1b56:	66 89 d0             	mov    %dx,%ax
    1b59:	66 c1 e0 02          	shl    $0x2,%ax
    1b5d:	66 01 d0             	add    %dx,%ax
    1b60:	66 c1 e0 02          	shl    $0x2,%ax
    1b64:	67 66 8d 14          	lea    (%si),%dx
    1b68:	c5 00                	lds    (%eax),%eax
    1b6a:	00 00                	add    %al,(%eax)
    1b6c:	00 66 29             	add    %ah,0x29(%esi)
    1b6f:	c2 66 89             	ret    $0x8966
    1b72:	d0 66 05             	shlb   0x5(%esi)
    1b75:	80 3e 00             	cmpb   $0x0,(%esi)
    1b78:	00 67 66             	add    %ah,0x66(%edi)
    1b7b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    init_queue(&SEM_list[index].semaque);
    1b82:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1b87:	66 89 d0             	mov    %dx,%ax
    1b8a:	66 c1 e0 02          	shl    $0x2,%ax
    1b8e:	66 01 d0             	add    %dx,%ax
    1b91:	66 c1 e0 02          	shl    $0x2,%ax
    1b95:	67 66 8d 14          	lea    (%si),%dx
    1b99:	c5 00                	lds    (%eax),%eax
    1b9b:	00 00                	add    %al,(%eax)
    1b9d:	00 66 29             	add    %ah,0x29(%esi)
    1ba0:	c2 67 66             	ret    $0x6667
    1ba3:	8d 82 00 3e 00 00    	lea    0x3e00(%edx),%eax
    1ba9:	66 83 c0 04          	add    $0x4,%ax
    1bad:	66 50                	push   %ax
    1baf:	66 e8 f1 fe          	callw  1aa4 <dequeue+0x70>
    1bb3:	ff                   	(bad)  
    1bb4:	ff 66 83             	jmp    *-0x7d(%esi)
    1bb7:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    1bba:	c9                   	leave  
    1bbb:	66 c3                	retw   

00001bbd <do_SemGet>:
int do_SemGet(int value){
    1bbd:	66 55                	push   %bp
    1bbf:	66 89 e5             	mov    %sp,%bp
    1bc2:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    1bc6:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1bcd:	00 00                	add    %al,(%eax)
    while(SEM_list[i].used == 1){
    1bcf:	eb 05                	jmp    1bd6 <do_SemGet+0x19>
        i ++;
    1bd1:	67 66 ff 45 fc       	incw   -0x4(%di)
    SEM_list[index].used = 0;
    init_queue(&SEM_list[index].semaque);
}
int do_SemGet(int value){
    int i = 0;
    while(SEM_list[i].used == 1){
    1bd6:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1bdb:	66 89 d0             	mov    %dx,%ax
    1bde:	66 c1 e0 02          	shl    $0x2,%ax
    1be2:	66 01 d0             	add    %dx,%ax
    1be5:	66 c1 e0 02          	shl    $0x2,%ax
    1be9:	67 66 8d 14          	lea    (%si),%dx
    1bed:	c5 00                	lds    (%eax),%eax
    1bef:	00 00                	add    %al,(%eax)
    1bf1:	00 66 29             	add    %ah,0x29(%esi)
    1bf4:	c2 66 89             	ret    $0x8966
    1bf7:	d0 66 05             	shlb   0x5(%esi)
    1bfa:	80 3e 00             	cmpb   $0x0,(%esi)
    1bfd:	00 67 66             	add    %ah,0x66(%edi)
    1c00:	8b 40 08             	mov    0x8(%eax),%eax
    1c03:	66 83 f8 01          	cmp    $0x1,%ax
    1c07:	74 c8                	je     1bd1 <do_SemGet+0x14>
        i ++;
    }
    if(i < SemMax){
    1c09:	67 66 83 7d fc 1d    	cmpw   $0x1d,-0x4(%di)
    1c0f:	7f 7a                	jg     1c8b <do_SemGet+0xce>
        init_Semlist(i);
    1c11:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1c16:	66 e8 30 ff          	callw  1b4a <rmele+0x72>
    1c1a:	ff                   	(bad)  
    1c1b:	ff 66 83             	jmp    *-0x7d(%esi)
    1c1e:	c4 04 67             	les    (%edi,%eiz,2),%eax
        SEM_list[i].used = 1;
    1c21:	66 8b 55 fc          	mov    -0x4(%ebp),%dx
    1c25:	66 89 d0             	mov    %dx,%ax
    1c28:	66 c1 e0 02          	shl    $0x2,%ax
    1c2c:	66 01 d0             	add    %dx,%ax
    1c2f:	66 c1 e0 02          	shl    $0x2,%ax
    1c33:	67 66 8d 14          	lea    (%si),%dx
    1c37:	c5 00                	lds    (%eax),%eax
    1c39:	00 00                	add    %al,(%eax)
    1c3b:	00 66 29             	add    %ah,0x29(%esi)
    1c3e:	c2 66 89             	ret    $0x8966
    1c41:	d0 66 05             	shlb   0x5(%esi)
    1c44:	80 3e 00             	cmpb   $0x0,(%esi)
    1c47:	00 67 66             	add    %ah,0x66(%edi)
    1c4a:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        SEM_list[i].count = value;
    1c51:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1c56:	66 89 d0             	mov    %dx,%ax
    1c59:	66 c1 e0 02          	shl    $0x2,%ax
    1c5d:	66 01 d0             	add    %dx,%ax
    1c60:	66 c1 e0 02          	shl    $0x2,%ax
    1c64:	67 66 8d 14          	lea    (%si),%dx
    1c68:	c5 00                	lds    (%eax),%eax
    1c6a:	00 00                	add    %al,(%eax)
    1c6c:	00 66 29             	add    %ah,0x29(%esi)
    1c6f:	c2 66 89             	ret    $0x8966
    1c72:	d0 67 66             	shlb   0x66(%edi)
    1c75:	8d 90 00 3e 00 00    	lea    0x3e00(%eax),%edx
    1c7b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1c80:	67 66 89 02          	mov    %ax,(%bp,%si)
        return i;
    1c84:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1c89:	eb 06                	jmp    1c91 <do_SemGet+0xd4>
    }
    else 
        return -1;
    1c8b:	66 b8 ff ff          	mov    $0xffff,%ax
    1c8f:	ff                   	(bad)  
    1c90:	ff 66 c9             	jmp    *-0x37(%esi)
}
    1c93:	66 c3                	retw   

00001c95 <do_SemFree>:
void do_SemFree(int s){
    1c95:	66 55                	push   %bp
    1c97:	66 89 e5             	mov    %sp,%bp
    SEM_list[s].used = 0;
    1c9a:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1c9f:	66 89 d0             	mov    %dx,%ax
    1ca2:	66 c1 e0 02          	shl    $0x2,%ax
    1ca6:	66 01 d0             	add    %dx,%ax
    1ca9:	66 c1 e0 02          	shl    $0x2,%ax
    1cad:	67 66 8d 14          	lea    (%si),%dx
    1cb1:	c5 00                	lds    (%eax),%eax
    1cb3:	00 00                	add    %al,(%eax)
    1cb5:	00 66 29             	add    %ah,0x29(%esi)
    1cb8:	c2 66 89             	ret    $0x8966
    1cbb:	d0 66 05             	shlb   0x5(%esi)
    1cbe:	80 3e 00             	cmpb   $0x0,(%esi)
    1cc1:	00 67 66             	add    %ah,0x66(%edi)
    1cc4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
    1ccb:	66 5d                	pop    %bp
    1ccd:	66 c3                	retw   

00001ccf <do_P>:
int tempp;
int sem_index;
int t;
void do_P(int s){
    1ccf:	66 55                	push   %bp
    1cd1:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    1cd4:	fa                   	cli    
    SEM_list[s].count = SEM_list[s].count - 1;
    1cd5:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1cda:	66 89 d0             	mov    %dx,%ax
    1cdd:	66 c1 e0 02          	shl    $0x2,%ax
    1ce1:	66 01 d0             	add    %dx,%ax
    1ce4:	66 c1 e0 02          	shl    $0x2,%ax
    1ce8:	67 66 8d 14          	lea    (%si),%dx
    1cec:	c5 00                	lds    (%eax),%eax
    1cee:	00 00                	add    %al,(%eax)
    1cf0:	00 66 29             	add    %ah,0x29(%esi)
    1cf3:	c2 66 89             	ret    $0x8966
    1cf6:	d0 66 05             	shlb   0x5(%esi)
    1cf9:	00 3e                	add    %bh,(%esi)
    1cfb:	00 00                	add    %al,(%eax)
    1cfd:	67 66 8b 00          	mov    (%bx,%si),%ax
    1d01:	67 66 8d 48 ff       	lea    -0x1(%bx,%si),%cx
    1d06:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1d0b:	66 89 d0             	mov    %dx,%ax
    1d0e:	66 c1 e0 02          	shl    $0x2,%ax
    1d12:	66 01 d0             	add    %dx,%ax
    1d15:	66 c1 e0 02          	shl    $0x2,%ax
    1d19:	67 66 8d 14          	lea    (%si),%dx
    1d1d:	c5 00                	lds    (%eax),%eax
    1d1f:	00 00                	add    %al,(%eax)
    1d21:	00 66 29             	add    %ah,0x29(%esi)
    1d24:	c2 66 89             	ret    $0x8966
    1d27:	d0 66 05             	shlb   0x5(%esi)
    1d2a:	00 3e                	add    %bh,(%esi)
    1d2c:	00 00                	add    %al,(%eax)
    1d2e:	67 66 89 08          	mov    %cx,(%bx,%si)
    if(SEM_list[s].count < 0){
    1d32:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1d37:	66 89 d0             	mov    %dx,%ax
    1d3a:	66 c1 e0 02          	shl    $0x2,%ax
    1d3e:	66 01 d0             	add    %dx,%ax
    1d41:	66 c1 e0 02          	shl    $0x2,%ax
    1d45:	67 66 8d 14          	lea    (%si),%dx
    1d49:	c5 00                	lds    (%eax),%eax
    1d4b:	00 00                	add    %al,(%eax)
    1d4d:	00 66 29             	add    %ah,0x29(%esi)
    1d50:	c2 66 89             	ret    $0x8966
    1d53:	d0 66 05             	shlb   0x5(%esi)
    1d56:	00 3e                	add    %bh,(%esi)
    1d58:	00 00                	add    %al,(%eax)
    1d5a:	67 66 8b 00          	mov    (%bx,%si),%ax
    1d5e:	66 85 c0             	test   %ax,%ax
    1d61:	0f 89 b1 00 66 a1    	jns    a1661e18 <_end+0xa165cf14>
        sem_index = _CurrentProg - PCB_list;
    1d67:	e4 3d                	in     $0x3d,%al
    1d69:	66 89 c2             	mov    %ax,%dx
    1d6c:	66 b8 80 38          	mov    $0x3880,%ax
    1d70:	00 00                	add    %al,(%eax)
    1d72:	66 29 c2             	sub    %ax,%dx
    1d75:	66 89 d0             	mov    %dx,%ax
    1d78:	66 c1 f8 02          	sar    $0x2,%ax
    1d7c:	66 89 c2             	mov    %ax,%dx
    1d7f:	66 89 d0             	mov    %dx,%ax
    1d82:	66 01 c0             	add    %ax,%ax
    1d85:	66 01 d0             	add    %dx,%ax
    1d88:	67 66 8d 14          	lea    (%si),%dx
    1d8c:	85 00                	test   %eax,(%eax)
    1d8e:	00 00                	add    %al,(%eax)
    1d90:	00 66 01             	add    %ah,0x1(%esi)
    1d93:	d0 66 89             	shlb   -0x77(%esi)
    1d96:	c2 66 c1             	ret    $0xc166
    1d99:	e2 08                	loop   1da3 <do_P+0xd4>
    1d9b:	66 01 d0             	add    %dx,%ax
    1d9e:	66 89 c2             	mov    %ax,%dx
    1da1:	66 c1 e2 10          	shl    $0x10,%dx
    1da5:	66 01 d0             	add    %dx,%ax
    1da8:	66 f7 d8             	neg    %ax
    1dab:	66 a3 6c 4e 66 a1    	mov    %ax,0xa1664e6c
        rmele(&readyqueue,sem_index);//将进程从就绪队列中取出
    1db1:	6c                   	insb   (%dx),%es:(%edi)
    1db2:	4e                   	dec    %esi
    1db3:	66 50                	push   %ax
    1db5:	66 68 80 4e          	pushw  $0x4e80
    1db9:	00 00                	add    %al,(%eax)
    1dbb:	66 e8 17 fd          	callw  1ad6 <init_queue+0x30>
    1dbf:	ff                   	(bad)  
    1dc0:	ff 66 83             	jmp    *-0x7d(%esi)
    1dc3:	c4 08                	les    (%eax),%ecx
        _CurrentProg->prg_status = BLOCKED;
    1dc5:	66 a1 e4 3d 67 66    	mov    0x66673de4,%ax
    1dcb:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
        enqueue(&SEM_list[s].semaque,sem_index);
    1dd2:	66 8b 0e             	mov    (%esi),%cx
    1dd5:	6c                   	insb   (%dx),%es:(%edi)
    1dd6:	4e                   	dec    %esi
    1dd7:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1ddc:	66 89 d0             	mov    %dx,%ax
    1ddf:	66 c1 e0 02          	shl    $0x2,%ax
    1de3:	66 01 d0             	add    %dx,%ax
    1de6:	66 c1 e0 02          	shl    $0x2,%ax
    1dea:	67 66 8d 14          	lea    (%si),%dx
    1dee:	c5 00                	lds    (%eax),%eax
    1df0:	00 00                	add    %al,(%eax)
    1df2:	00 66 29             	add    %ah,0x29(%esi)
    1df5:	c2 67 66             	ret    $0x6667
    1df8:	8d 82 00 3e 00 00    	lea    0x3e00(%edx),%eax
    1dfe:	66 83 c0 04          	add    $0x4,%ax
    1e02:	66 51                	push   %cx
    1e04:	66 50                	push   %ax
    1e06:	66 e8 bc fb          	callw  19c6 <size+0x11>
    1e0a:	ff                   	(bad)  
    1e0b:	ff 66 83             	jmp    *-0x7d(%esi)
    1e0e:	c4 08                	les    (%eax),%ecx
        _Schedule_PV();
    1e10:	66 e8 d8 e4          	callw  2ec <_Vr+0x10>
    1e14:	ff                   	(bad)  
    1e15:	ff                   	(bad)  
    }
    __asm("sti\n");
    1e16:	fb                   	sti    
}
    1e17:	66 c9                	leavew 
    1e19:	66 c3                	retw   

00001e1b <do_V>:
int v_res;
int vtempp;
void do_V(int s){
    1e1b:	66 55                	push   %bp
    1e1d:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    1e20:	fa                   	cli    
    SEM_list[s].count  = SEM_list[s].count + 1;
    1e21:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1e26:	66 89 d0             	mov    %dx,%ax
    1e29:	66 c1 e0 02          	shl    $0x2,%ax
    1e2d:	66 01 d0             	add    %dx,%ax
    1e30:	66 c1 e0 02          	shl    $0x2,%ax
    1e34:	67 66 8d 14          	lea    (%si),%dx
    1e38:	c5 00                	lds    (%eax),%eax
    1e3a:	00 00                	add    %al,(%eax)
    1e3c:	00 66 29             	add    %ah,0x29(%esi)
    1e3f:	c2 66 89             	ret    $0x8966
    1e42:	d0 66 05             	shlb   0x5(%esi)
    1e45:	00 3e                	add    %bh,(%esi)
    1e47:	00 00                	add    %al,(%eax)
    1e49:	67 66 8b 00          	mov    (%bx,%si),%ax
    1e4d:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    1e52:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1e57:	66 89 d0             	mov    %dx,%ax
    1e5a:	66 c1 e0 02          	shl    $0x2,%ax
    1e5e:	66 01 d0             	add    %dx,%ax
    1e61:	66 c1 e0 02          	shl    $0x2,%ax
    1e65:	67 66 8d 14          	lea    (%si),%dx
    1e69:	c5 00                	lds    (%eax),%eax
    1e6b:	00 00                	add    %al,(%eax)
    1e6d:	00 66 29             	add    %ah,0x29(%esi)
    1e70:	c2 66 89             	ret    $0x8966
    1e73:	d0 66 05             	shlb   0x5(%esi)
    1e76:	00 3e                	add    %bh,(%esi)
    1e78:	00 00                	add    %al,(%eax)
    1e7a:	67 66 89 08          	mov    %cx,(%bx,%si)
    if(SEM_list[s].count <= 0){
    1e7e:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1e83:	66 89 d0             	mov    %dx,%ax
    1e86:	66 c1 e0 02          	shl    $0x2,%ax
    1e8a:	66 01 d0             	add    %dx,%ax
    1e8d:	66 c1 e0 02          	shl    $0x2,%ax
    1e91:	67 66 8d 14          	lea    (%si),%dx
    1e95:	c5 00                	lds    (%eax),%eax
    1e97:	00 00                	add    %al,(%eax)
    1e99:	00 66 29             	add    %ah,0x29(%esi)
    1e9c:	c2 66 89             	ret    $0x8966
    1e9f:	d0 66 05             	shlb   0x5(%esi)
    1ea2:	00 3e                	add    %bh,(%esi)
    1ea4:	00 00                	add    %al,(%eax)
    1ea6:	67 66 8b 00          	mov    (%bx,%si),%ax
    1eaa:	66 85 c0             	test   %ax,%ax
    1ead:	7f 74                	jg     1f23 <do_V+0x108>
        dequeue(&SEM_list[s].semaque,&v_res);
    1eaf:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1eb4:	66 89 d0             	mov    %dx,%ax
    1eb7:	66 c1 e0 02          	shl    $0x2,%ax
    1ebb:	66 01 d0             	add    %dx,%ax
    1ebe:	66 c1 e0 02          	shl    $0x2,%ax
    1ec2:	67 66 8d 14          	lea    (%si),%dx
    1ec6:	c5 00                	lds    (%eax),%eax
    1ec8:	00 00                	add    %al,(%eax)
    1eca:	00 66 29             	add    %ah,0x29(%esi)
    1ecd:	c2 67 66             	ret    $0x6667
    1ed0:	8d 82 00 3e 00 00    	lea    0x3e00(%edx),%eax
    1ed6:	66 83 c0 04          	add    $0x4,%ax
    1eda:	66 68 d4 3d          	pushw  $0x3dd4
    1ede:	00 00                	add    %al,(%eax)
    1ee0:	66 50                	push   %ax
    1ee2:	66 e8 4c fb          	callw  1a32 <enqueue+0x6a>
    1ee6:	ff                   	(bad)  
    1ee7:	ff 66 83             	jmp    *-0x7d(%esi)
    1eea:	c4 08                	les    (%eax),%ecx
        PCB_list[v_res].prg_status = READY;
    1eec:	66 a1 d4 3d 66 c1    	mov    0xc1663dd4,%ax
    1ef2:	e0 02                	loopne 1ef6 <do_V+0xdb>
    1ef4:	66 89 c2             	mov    %ax,%dx
    1ef7:	66 c1 e2 04          	shl    $0x4,%dx
    1efb:	66 01 d0             	add    %dx,%ax
    1efe:	66 05 b0 38          	add    $0x38b0,%ax
    1f02:	00 00                	add    %al,(%eax)
    1f04:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    1f0b:	00 00                	add    %al,(%eax)
        enqueue(&readyqueue,v_res);
    1f0d:	66 a1 d4 3d 66 50    	mov    0x50663dd4,%ax
    1f13:	66 68 80 4e          	pushw  $0x4e80
    1f17:	00 00                	add    %al,(%eax)
    1f19:	66 e8 a9 fa          	callw  19c6 <size+0x11>
    1f1d:	ff                   	(bad)  
    1f1e:	ff 66 83             	jmp    *-0x7d(%esi)
    1f21:	c4 08                	les    (%eax),%ecx
    }
    __asm__("sti\n");
    1f23:	fb                   	sti    

    1f24:	66 c9                	leavew 
    1f26:	66 c3                	retw   

00001f28 <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    1f28:	66 55                	push   %bp
    1f2a:	66 89 e5             	mov    %sp,%bp
    1f2d:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    1f31:	66 e8 3a e3          	callw  26f <_Schedule_once+0x9>
    1f35:	ff                   	(bad)  
    1f36:	ff 67 66             	jmp    *0x66(%edi)
    1f39:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    1f3c:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    1f41:	66 c9                	leavew 
    1f43:	66 c3                	retw   

00001f45 <wait>:
char wait(){
    1f45:	66 55                	push   %bp
    1f47:	66 89 e5             	mov    %sp,%bp
    1f4a:	66 83 ec 08          	sub    $0x8,%sp
    int temp_ch = _wait();
    1f4e:	66 e8 35 e3          	callw  287 <_Schedule+0xb>
    1f52:	ff                   	(bad)  
    1f53:	ff 67 66             	jmp    *0x66(%edi)
    1f56:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char ch = '0' + temp_ch;
    1f59:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1f5e:	66 83 c0 30          	add    $0x30,%ax
    1f62:	67 88 45 fb          	mov    %al,-0x5(%di)
    return ch;
    1f66:	67 8a 45 fb          	mov    -0x5(%di),%al
    //_wait();
}
    1f6a:	66 c9                	leavew 
    1f6c:	66 c3                	retw   

00001f6e <exit>:
void exit(char ch){
    1f6e:	66 55                	push   %bp
    1f70:	66 89 e5             	mov    %sp,%bp
    1f73:	66 83 ec 04          	sub    $0x4,%sp
    1f77:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f7c:	67 88 45 fc          	mov    %al,-0x4(%di)
    _exit(ch);
    1f80:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    1f86:	66 50                	push   %ax
    1f88:	66 e8 06 e3          	callw  292 <_wait+0x9>
    1f8c:	ff                   	(bad)  
    1f8d:	ff 66 83             	jmp    *-0x7d(%esi)
    1f90:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    1f93:	c9                   	leave  
    1f94:	66 c3                	retw   

00001f96 <GetSem>:
int GetSem(int value){
    1f96:	66 55                	push   %bp
    1f98:	66 89 e5             	mov    %sp,%bp
    1f9b:	66 83 ec 04          	sub    $0x4,%sp
    int sema = _GetSem(value);
    1f9f:	67 66 ff 75 08       	pushw  0x8(%di)
    1fa4:	66 e8 fc e2          	callw  2a4 <_exit+0x10>
    1fa8:	ff                   	(bad)  
    1fa9:	ff 66 83             	jmp    *-0x7d(%esi)
    1fac:	c4 04 67             	les    (%edi,%eiz,2),%eax
    1faf:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return sema;
    1fb3:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    1fb8:	66 c9                	leavew 
    1fba:	66 c3                	retw   

00001fbc <SemFree>:
void SemFree(int value){
    1fbc:	66 55                	push   %bp
    1fbe:	66 89 e5             	mov    %sp,%bp
    _FreeSem(value);
    1fc1:	67 66 ff 75 08       	pushw  0x8(%di)
    1fc6:	66 e8 ec e2          	callw  2b6 <_GetSem+0x10>
    1fca:	ff                   	(bad)  
    1fcb:	ff 66 83             	jmp    *-0x7d(%esi)
    1fce:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    1fd1:	c9                   	leave  
    1fd2:	66 c3                	retw   

00001fd4 <P>:
void P(int s){   
    1fd4:	66 55                	push   %bp
    1fd6:	66 89 e5             	mov    %sp,%bp
    _Pr(s);
    1fd9:	67 66 ff 75 08       	pushw  0x8(%di)
    1fde:	66 e8 e6 e2          	callw  2c8 <_FreeSem+0x10>
    1fe2:	ff                   	(bad)  
    1fe3:	ff 66 83             	jmp    *-0x7d(%esi)
    1fe6:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    1fe9:	c9                   	leave  
    1fea:	66 c3                	retw   

00001fec <V>:
void V(int s){
    1fec:	66 55                	push   %bp
    1fee:	66 89 e5             	mov    %sp,%bp
    _Vr(s);
    1ff1:	67 66 ff 75 08       	pushw  0x8(%di)
    1ff6:	66 e8 e0 e2          	callw  2da <_Pr+0x10>
    1ffa:	ff                   	(bad)  
    1ffb:	ff 66 83             	jmp    *-0x7d(%esi)
    1ffe:	c4 04 66             	les    (%esi,%eiz,2),%eax
    2001:	c9                   	leave  
    2002:	66 c3                	retw   
