
test.elf:     file format elf32-i386


Disassembly of section .text:

00000100 <test>:
     100:	8c c8                	mov    %cs,%eax
     102:	8e d8                	mov    %eax,%ds
     104:	8e d0                	mov    %eax,%ss
     106:	bc 00 01 cd 33       	mov    $0x33cd0100,%esp
     10b:	cd 39                	int    $0x39
     10d:	cd 38                	int    $0x38
     10f:	eb fe                	jmp    10f <test+0xf>
     111:	66 90                	xchg   %ax,%ax
     113:	66 90                	xchg   %ax,%ax
     115:	66 90                	xchg   %ax,%ax
     117:	66 90                	xchg   %ax,%ax
     119:	66 90                	xchg   %ax,%ax
     11b:	66 90                	xchg   %ax,%ax
     11d:	66 90                	xchg   %ax,%ax
     11f:	90                   	nop

00000120 <count>:
     120:	08 2d 00 00 00 00    	or     %ch,0x0

00000121 <alpha>:
     121:	2d 00 00 00 00       	sub    $0x0,%eax

00000122 <int_09_saved>:
     122:	00 00                	add    %al,(%eax)
	...

00000126 <program_saved>:
     126:	70 00                	jo     128 <program_saved+0x2>
	...

0000012a <ds_saved>:
     12a:	7c 00                	jl     12c <ds_saved+0x2>
	...

0000012e <return_save>:
     12e:	88 00                	mov    %al,(%eax)

00000130 <esi_save>:
     130:	96                   	xchg   %eax,%esi
     131:	00 00                	add    %al,(%eax)
	...

00000134 <temp>:
     134:	e8 03 b4 00 00       	call   b53c <_end+0x4ae0>

00000136 <kernelesp_saved>:
     136:	b4 00                	mov    $0x0,%ah
	...

0000013a <esp_saved_inkernel>:
     13a:	c8 00 00 00          	enter  $0x0,$0x0

0000013e <esp_saved_in_user>:
     13e:	f0 00 00             	lock add %al,(%eax)
	...

00000142 <ss_saved_in_user>:
     142:	2c 01                	sub    $0x1,%al
	...

00000146 <color>:
     146:	01 c2                	add    %eax,%edx

00000147 <ss_saved_fork>:
     147:	c2 01 00             	ret    $0x1
	...

0000014b <retaddr>:
     14b:	58                   	pop    %eax
     14c:	02 00                	add    (%eax),%al
	...

0000014f <Message31>:
     14f:	74 69                	je     1ba <_readinput+0x9>
     151:	6d                   	insl   (%dx),%es:(%edi)
     152:	65 3a 20             	cmp    %gs:(%eax),%ah

00000155 <_sys_stack_copy>:
     155:	c8 00 00 00          	enter  $0x0,$0x0
     159:	8e d0                	mov    %eax,%ss
     15b:	60                   	pusha  
     15c:	1e                   	push   %ds
     15d:	8b 46 06             	mov    0x6(%esi),%eax
     160:	8b 56 0a             	mov    0xa(%esi),%edx
     163:	8b 4e 0e             	mov    0xe(%esi),%ecx
     166:	8c db                	mov    %ds,%ebx

00000168 <while_loop1>:
     168:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
     16e:	8e d8                	mov    %eax,%ds
     170:	67 8b 1a             	mov    (%bp,%si),%ebx
     173:	8e d9                	mov    %ecx,%ds
     175:	67 89 1a             	mov    %ebx,(%bp,%si)
     178:	83 c2 02             	add    $0x2,%edx
     17b:	eb eb                	jmp    168 <while_loop1>

0000017d <end_for_copy>:
     17d:	1f                   	pop    %ds
     17e:	61                   	popa   
     17f:	c9                   	leave  
     180:	66 5a                	pop    %dx
     182:	ff e2                	jmp    *%edx

00000184 <_clearscreen>:
     184:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     189:	66 5a                	pop    %dx
     18b:	ff e2                	jmp    *%edx

0000018d <_printchar>:
     18d:	c8 00 00 00          	enter  $0x0,$0x0
     191:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
     196:	57                   	push   %edi
     197:	66 8b 4e 06          	mov    0x6(%esi),%cx
     19b:	66 8b 7e 0a          	mov    0xa(%esi),%di
     19f:	66 8b 56 0e          	mov    0xe(%esi),%dx
     1a3:	88 d5                	mov    %dl,%ch
     1a5:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
     1ac:	00 66 5a             	add    %ah,0x5a(%esi)
     1af:	ff e2                	jmp    *%edx

000001b1 <_readinput>:
     1b1:	c8 04 00 00          	enter  $0x4,$0x0
     1b5:	b4 00                	mov    $0x0,%ah
     1b7:	cd 16                	int    $0x16
     1b9:	b4 00                	mov    $0x0,%ah
     1bb:	66 67 89 04          	mov    %ax,(%si)
     1bf:	24 66                	and    $0x66,%al
     1c1:	67 8b 04             	mov    (%si),%eax
     1c4:	24 c9                	and    $0xc9,%al
     1c6:	66 5a                	pop    %dx
     1c8:	ff e2                	jmp    *%edx

000001ca <_showchar>:
     1ca:	c8 00 00 00          	enter  $0x0,$0x0
     1ce:	50                   	push   %eax
     1cf:	53                   	push   %ebx
     1d0:	8b 46 06             	mov    0x6(%esi),%eax
     1d3:	b4 0e                	mov    $0xe,%ah
     1d5:	b3 00                	mov    $0x0,%bl
     1d7:	cd 10                	int    $0x10
     1d9:	5b                   	pop    %ebx
     1da:	58                   	pop    %eax
     1db:	c9                   	leave  
     1dc:	66 5a                	pop    %dx
     1de:	ff e2                	jmp    *%edx

000001e0 <_setPoint>:
     1e0:	c8 00 00 00          	enter  $0x0,$0x0
     1e4:	53                   	push   %ebx
     1e5:	b7 00                	mov    $0x0,%bh
     1e7:	8a 77 06             	mov    0x6(%edi),%dh
     1ea:	8a 57 0a             	mov    0xa(%edi),%dl
     1ed:	b4 02                	mov    $0x2,%ah
     1ef:	cd 10                	int    $0x10
     1f1:	5b                   	pop    %ebx
     1f2:	c9                   	leave  
     1f3:	66 5a                	pop    %dx
     1f5:	ff e2                	jmp    *%edx

000001f7 <_loadP>:
     1f7:	c8 00 00 00          	enter  $0x0,$0x0
     1fb:	60                   	pusha  
     1fc:	06                   	push   %es
     1fd:	1e                   	push   %ds
     1fe:	8c c8                	mov    %cs,%eax
     200:	8e d8                	mov    %eax,%ds
     202:	8b 46 0e             	mov    0xe(%esi),%eax
     205:	8e c0                	mov    %eax,%es
     207:	b2 00                	mov    $0x0,%dl
     209:	8b 46 0a             	mov    0xa(%esi),%eax
     20c:	b3 12                	mov    $0x12,%bl
     20e:	f6 f3                	div    %bl
     210:	88 e1                	mov    %ah,%cl
     212:	30 e4                	xor    %ah,%ah
     214:	b3 02                	mov    $0x2,%bl
     216:	f6 f3                	div    %bl
     218:	88 e6                	mov    %ah,%dh
     21a:	88 c5                	mov    %al,%ch
     21c:	8a 46 06             	mov    0x6(%esi),%al
     21f:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
     224:	cd 13                	int    $0x13
     226:	1f                   	pop    %ds
     227:	07                   	pop    %es
     228:	61                   	popa   
     229:	c9                   	leave  
     22a:	66 5a                	pop    %dx
     22c:	ff e2                	jmp    *%edx

0000022e <_RunProgress>:
     22e:	c8 00 00 00          	enter  $0x0,$0x0
     232:	8c c8                	mov    %cs,%eax
     234:	8e d8                	mov    %eax,%ds
     236:	8e c0                	mov    %eax,%es
     238:	8b 5e 06             	mov    0x6(%esi),%ebx
     23b:	c7 06 26 01 00 01    	movl   $0x1000126,(%esi)
     241:	89 1e                	mov    %ebx,(%esi)
     243:	28 01                	sub    %al,(%ecx)
     245:	66 89 26             	mov    %sp,(%esi)
     248:	3a 01                	cmp    (%ecx),%al
     24a:	26 ff 1e             	lcall  *%es:(%esi)
     24d:	26 01 8c c8 8e d8 8e 	add    %ecx,%es:-0x3f712772(%eax,%ecx,8)
     254:	c0 

0000024f <S>:
     24f:	8c c8                	mov    %cs,%eax
     251:	8e d8                	mov    %eax,%ds
     253:	8e c0                	mov    %eax,%es
     255:	8e d0                	mov    %eax,%ss
     257:	66 8b 26             	mov    (%esi),%sp
     25a:	3a 01                	cmp    (%ecx),%al
     25c:	b4 00                	mov    $0x0,%ah
     25e:	cd 16                	int    $0x16
     260:	c9                   	leave  
     261:	66 5a                	pop    %dx
     263:	ff e2                	jmp    *%edx

00000265 <_Schedule_once>:
     265:	c8 00 00 00          	enter  $0x0,$0x0
     269:	cd 41                	int    $0x41
     26b:	c9                   	leave  
     26c:	66 5a                	pop    %dx
     26e:	ff e2                	jmp    *%edx

00000270 <_fork_user>:
     270:	c8 00 00 00          	enter  $0x0,$0x0
     274:	cd 39                	int    $0x39
     276:	c9                   	leave  
     277:	66 5a                	pop    %dx
     279:	ff e2                	jmp    *%edx

0000027b <_Schedule>:
     27b:	c8 00 00 00          	enter  $0x0,$0x0
     27f:	16                   	push   %ss
     280:	cd 42                	int    $0x42
     282:	17                   	pop    %ss
     283:	c9                   	leave  
     284:	66 5a                	pop    %dx
     286:	ff e2                	jmp    *%edx

00000288 <_wait>:
     288:	c8 00 00 00          	enter  $0x0,$0x0
     28c:	cd 3b                	int    $0x3b
     28e:	c9                   	leave  
     28f:	66 5a                	pop    %dx
     291:	ff e2                	jmp    *%edx

00000293 <_exit>:
     293:	c8 00 00 00          	enter  $0x0,$0x0
     297:	66 67 8b 45 06       	mov    0x6(%di),%ax
     29c:	66 50                	push   %ax
     29e:	cd 2a                	int    $0x2a
     2a0:	c9                   	leave  
     2a1:	66 5a                	pop    %dx
     2a3:	ff e2                	jmp    *%edx

000002a5 <_GetSem>:
     2a5:	c8 00 00 00          	enter  $0x0,$0x0
     2a9:	66 67 8b 45 06       	mov    0x6(%di),%ax
     2ae:	66 50                	push   %ax
     2b0:	cd 3c                	int    $0x3c
     2b2:	c9                   	leave  
     2b3:	66 5a                	pop    %dx
     2b5:	ff e2                	jmp    *%edx

000002b7 <_FreeSem>:
     2b7:	c8 00 00 00          	enter  $0x0,$0x0
     2bb:	66 67 8b 45 06       	mov    0x6(%di),%ax
     2c0:	66 50                	push   %ax
     2c2:	cd 3d                	int    $0x3d
     2c4:	c9                   	leave  
     2c5:	66 5a                	pop    %dx
     2c7:	ff e2                	jmp    *%edx

000002c9 <_P>:
     2c9:	c8 00 00 00          	enter  $0x0,$0x0
     2cd:	66 67 8b 45 06       	mov    0x6(%di),%ax
     2d2:	66 50                	push   %ax
     2d4:	cd 3e                	int    $0x3e
     2d6:	c9                   	leave  
     2d7:	66 5a                	pop    %dx
     2d9:	ff e2                	jmp    *%edx

000002db <_V>:
     2db:	c8 00 00 00          	enter  $0x0,$0x0
     2df:	66 67 8b 45 06       	mov    0x6(%di),%ax
     2e4:	66 50                	push   %ax
     2e6:	cd 3f                	int    $0x3f
     2e8:	c9                   	leave  
     2e9:	66 5a                	pop    %dx
     2eb:	ff e2                	jmp    *%edx

000002ed <_SetINT20h>:
     2ed:	fa                   	cli    
     2ee:	1e                   	push   %ds
     2ef:	06                   	push   %es
     2f0:	8c c8                	mov    %cs,%eax
     2f2:	8e d8                	mov    %eax,%ds
     2f4:	8e c0                	mov    %eax,%es
     2f6:	8c 16                	mov    %ss,(%esi)
     2f8:	42                   	inc    %edx
     2f9:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     2ff:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     303:	26 3a 01             	cmp    %es:(%ecx),%al
     306:	53                   	push   %ebx
     307:	51                   	push   %ecx
     308:	52                   	push   %edx
     309:	b4 01                	mov    $0x1,%ah
     30b:	cd 16                	int    $0x16
     30d:	5a                   	pop    %edx
     30e:	59                   	pop    %ecx
     30f:	5b                   	pop    %ebx
     310:	8e 16                	mov    (%esi),%ss
     312:	42                   	inc    %edx
     313:	01 66 8b             	add    %esp,-0x75(%esi)
     316:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     31a:	1f                   	pop    %ds
     31b:	74 0a                	je     327 <going_on>
     31d:	50                   	push   %eax
     31e:	b4 00                	mov    $0x0,%ah
     320:	cd 16                	int    $0x16
     322:	58                   	pop    %eax
     323:	fb                   	sti    
     324:	cd 38                	int    $0x38
     326:	cf                   	iret   

00000327 <going_on>:
     327:	fb                   	sti    
     328:	cf                   	iret   

00000329 <_SetINT08h_turn_around>:
     329:	e8 3d 06 fa 6a       	call   6afa096b <_end+0x6af99f0f>
     32e:	00 e8                	add    %ch,%al
     330:	c5 0d e8 a8 06 b0    	lds    0xb006a8e8,%ecx
     336:	20 e6                	and    %ah,%dh
     338:	20 e6                	and    %ah,%dh
     33a:	a0 fb cf 60 0f       	mov    0xf60cffb,%al

0000033d <_SetINT08h>:
     33d:	60                   	pusha  
     33e:	0f a8                	push   %gs
     340:	1e                   	push   %ds
     341:	06                   	push   %es
     342:	16                   	push   %ss
     343:	8c c8                	mov    %cs,%eax
     345:	8e c0                	mov    %eax,%es
     347:	8e d8                	mov    %eax,%ds
     349:	8e d0                	mov    %eax,%ss
     34b:	fe 0e                	decb   (%esi)
     34d:	20 01                	and    %al,(%ecx)
     34f:	75 4f                	jne    3a0 <end>

00000351 <notc>:
     351:	80 3e 21             	cmpb   $0x21,(%esi)
     354:	01 2d 75 07 c6 06    	add    %ebp,0x6c60775
     35a:	21 01                	and    %eax,(%ecx)
     35c:	5c                   	pop    %esp
     35d:	eb 2a                	jmp    389 <show>

0000035f <changleft>:
     35f:	80 3e 21             	cmpb   $0x21,(%esi)
     362:	01 5c 75 07          	add    %ebx,0x7(%ebp,%esi,2)
     366:	c6 06 21             	movb   $0x21,(%esi)
     369:	01 7c eb 1c          	add    %edi,0x1c(%ebx,%ebp,8)

0000036d <changright>:
     36d:	80 3e 21             	cmpb   $0x21,(%esi)
     370:	01 7c 75 07          	add    %edi,0x7(%ebp,%esi,2)
     374:	c6 06 21             	movb   $0x21,(%esi)
     377:	01 2f                	add    %ebp,(%edi)
     379:	eb 0e                	jmp    389 <show>

0000037b <changheng>:
     37b:	80 3e 21             	cmpb   $0x21,(%esi)
     37e:	01 2f                	add    %ebp,(%edi)
     380:	75 cf                	jne    351 <notc>
     382:	c6 06 21             	movb   $0x21,(%esi)
     385:	01 2d eb 00 b9 00    	add    %ebp,0xb900eb

00000389 <show>:
     389:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     38e:	b4 09                	mov    $0x9,%ah
     390:	8a 26                	mov    (%esi),%ah
     392:	46                   	inc    %esi
     393:	01 a0 21 01 65 a3    	add    %esp,-0x5c9afedf(%eax)
     399:	8e 00                	mov    (%eax),%es
     39b:	c6 06 20             	movb   $0x20,(%esi)
     39e:	01 08                	add    %ecx,(%eax)

000003a0 <end>:
     3a0:	b0 20                	mov    $0x20,%al
     3a2:	e6 20                	out    %al,$0x20
     3a4:	e6 a0                	out    %al,$0xa0
     3a6:	17                   	pop    %ss
     3a7:	07                   	pop    %es
     3a8:	1f                   	pop    %ds
     3a9:	0f a9                	pop    %gs
     3ab:	61                   	popa   
     3ac:	fb                   	sti    
     3ad:	cf                   	iret   

000003ae <_SetINT09h>:
     3ae:	fa                   	cli    
     3af:	1e                   	push   %ds
     3b0:	06                   	push   %es
     3b1:	8c c8                	mov    %cs,%eax
     3b3:	8e d8                	mov    %eax,%ds
     3b5:	8e c0                	mov    %eax,%es
     3b7:	8e d0                	mov    %eax,%ss
     3b9:	8c 16                	mov    %ss,(%esi)
     3bb:	42                   	inc    %edx
     3bc:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     3c2:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     3c6:	26 3a 01             	cmp    %es:(%ecx),%al
     3c9:	60                   	pusha  
     3ca:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     3cf:	8a 26                	mov    (%esi),%ah
     3d1:	46                   	inc    %esi
     3d2:	01 b0 4f 65 a3 78    	add    %esi,0x78a3654f(%eax)
     3d8:	00 b0 55 65 a3 7a    	add    %dh,0x7aa36555(%eax)
     3de:	00 b0 43 65 a3 7c    	add    %dh,0x7ca36543(%eax)
     3e4:	00 b0 48 65 a3 7e    	add    %dh,0x7ea36548(%eax)
     3ea:	00 b0 53 65 a3 80    	add    %dh,-0x7f5c9aad(%eax)
     3f0:	00 b0 21 65 a3 82    	add    %dh,-0x7d5c9adf(%eax)
     3f6:	00 b0 4f 65 a3 84    	add    %dh,-0x7b5c9ab1(%eax)
     3fc:	00 b0 55 65 a3 86    	add    %dh,-0x795c9aab(%eax)
     402:	00 b0 43 65 a3 88    	add    %dh,-0x775c9abd(%eax)
     408:	00 b0 48 65 a3 8a    	add    %dh,-0x755c9ab8(%eax)
     40e:	00 b0 21 65 a3 8c    	add    %dh,-0x735c9adf(%eax)
     414:	00 61 80             	add    %ah,-0x80(%ecx)
     417:	fc                   	cld    
     418:	06                   	push   %es
     419:	75 06                	jne    421 <cont>
     41b:	b4 01                	mov    $0x1,%ah
     41d:	88 26                	mov    %ah,(%esi)
     41f:	46                   	inc    %esi
     420:	01 fe                	add    %edi,%esi

00000421 <cont>:
     421:	fe 06                	incb   (%esi)
     423:	46                   	inc    %esi
     424:	01 8c c8 8e c0 fb 9c 	add    %ecx,-0x63043f72(%eax,%ecx,8)
     42b:	26 ff 1e             	lcall  *%es:(%esi)
     42e:	22 01                	and    (%ecx),%al
     430:	8e 16                	mov    (%esi),%ss
     432:	42                   	inc    %edx
     433:	01 66 8b             	add    %esp,-0x75(%esi)
     436:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     43a:	1f                   	pop    %ds
     43b:	cf                   	iret   

0000043c <_SetINT33h>:
     43c:	fa                   	cli    
     43d:	c8 00 00 00          	enter  $0x0,$0x0
     441:	60                   	pusha  
     442:	1e                   	push   %ds
     443:	0f a8                	push   %gs
     445:	06                   	push   %es
     446:	8c c8                	mov    %cs,%eax
     448:	8e c0                	mov    %eax,%es
     44a:	8e d8                	mov    %eax,%ds
     44c:	8c 16                	mov    %ss,(%esi)
     44e:	42                   	inc    %edx
     44f:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     455:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     459:	26 3a 01             	cmp    %es:(%ecx),%al
     45c:	6a 00                	push   $0x0
     45e:	e8 0a 08 8e 16       	call   168e0c6d <_end+0x168da211>
     463:	42                   	inc    %edx
     464:	01 66 8b             	add    %esp,-0x75(%esi)
     467:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     46b:	0f a9                	pop    %gs
     46d:	1f                   	pop    %ds
     46e:	61                   	popa   
     46f:	fb                   	sti    
     470:	c9                   	leave  
     471:	cf                   	iret   

00000472 <_SetINT34h>:
     472:	fa                   	cli    
     473:	c8 00 00 00          	enter  $0x0,$0x0
     477:	60                   	pusha  
     478:	1e                   	push   %ds
     479:	0f a8                	push   %gs
     47b:	06                   	push   %es
     47c:	8c c8                	mov    %cs,%eax
     47e:	8e c0                	mov    %eax,%es
     480:	8e d8                	mov    %eax,%ds
     482:	8c 16                	mov    %ss,(%esi)
     484:	42                   	inc    %edx
     485:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     48b:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     48f:	26 3a 01             	cmp    %es:(%ecx),%al
     492:	6a 00                	push   $0x0
     494:	e8 84 08 8e 16       	call   168e0d1d <_end+0x168da2c1>
     499:	42                   	inc    %edx
     49a:	01 66 8b             	add    %esp,-0x75(%esi)
     49d:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     4a1:	0f a9                	pop    %gs
     4a3:	1f                   	pop    %ds
     4a4:	61                   	popa   
     4a5:	fb                   	sti    
     4a6:	c9                   	leave  
     4a7:	cf                   	iret   

000004a8 <_SetINT35h>:
     4a8:	60                   	pusha  
     4a9:	1e                   	push   %ds
     4aa:	0f a8                	push   %gs
     4ac:	06                   	push   %es
     4ad:	8c c8                	mov    %cs,%eax
     4af:	8e c0                	mov    %eax,%es
     4b1:	8e d8                	mov    %eax,%ds
     4b3:	8c 16                	mov    %ss,(%esi)
     4b5:	42                   	inc    %edx
     4b6:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     4bc:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     4c0:	26 3a 01             	cmp    %es:(%ecx),%al
     4c3:	6a 00                	push   $0x0
     4c5:	e8 32 09 8e 16       	call   168e0dfc <_end+0x168da3a0>
     4ca:	42                   	inc    %edx
     4cb:	01 66 8b             	add    %esp,-0x75(%esi)
     4ce:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     4d2:	0f a9                	pop    %gs
     4d4:	1f                   	pop    %ds
     4d5:	61                   	popa   
     4d6:	fb                   	sti    
     4d7:	cf                   	iret   

000004d8 <_SetINT36h>:
     4d8:	60                   	pusha  
     4d9:	1e                   	push   %ds
     4da:	0f a8                	push   %gs
     4dc:	06                   	push   %es
     4dd:	8c c8                	mov    %cs,%eax
     4df:	8e c0                	mov    %eax,%es
     4e1:	8e d8                	mov    %eax,%ds
     4e3:	8c 16                	mov    %ss,(%esi)
     4e5:	42                   	inc    %edx
     4e6:	01 8e d0 66 89 26    	add    %ecx,0x268966d0(%esi)
     4ec:	3e 01 66 8b          	add    %esp,%ds:-0x75(%esi)
     4f0:	26 3a 01             	cmp    %es:(%ecx),%al
     4f3:	6a 00                	push   $0x0
     4f5:	e8 88 09 8e 16       	call   168e0e82 <_end+0x168da426>
     4fa:	42                   	inc    %edx
     4fb:	01 66 8b             	add    %esp,-0x75(%esi)
     4fe:	26 3e 01 07          	es add %eax,%ds:%es:(%edi)
     502:	0f a9                	pop    %gs
     504:	1f                   	pop    %ds
     505:	61                   	popa   
     506:	fb                   	sti    
     507:	cf                   	iret   

00000508 <_SetINT21h>:
     508:	c8 00 00 00          	enter  $0x0,$0x0
     50c:	60                   	pusha  
     50d:	1e                   	push   %ds
     50e:	0f a8                	push   %gs
     510:	06                   	push   %es
     511:	8c c8                	mov    %cs,%eax
     513:	8e c0                	mov    %eax,%es
     515:	8e d8                	mov    %eax,%ds
     517:	8b 46 08             	mov    0x8(%esi),%eax
     51a:	80 fc 00             	cmp    $0x0,%ah
     51d:	74 16                	je     535 <fn0>
     51f:	80 fc 01             	cmp    $0x1,%ah
     522:	74 21                	je     545 <fn1>
     524:	80 fc 02             	cmp    $0x2,%ah
     527:	74 3d                	je     566 <fn2>
     529:	80 fc 03             	cmp    $0x3,%ah
     52c:	74 5f                	je     58d <fn3>
     52e:	07                   	pop    %es
     52f:	0f a9                	pop    %gs
     531:	1f                   	pop    %ds
     532:	61                   	popa   
     533:	c9                   	leave  
     534:	cf                   	iret   

00000535 <fn0>:
     535:	8b 46 0a             	mov    0xa(%esi),%eax
     538:	b4 0e                	mov    $0xe,%ah
     53a:	b3 00                	mov    $0x0,%bl
     53c:	cd 10                	int    $0x10
     53e:	07                   	pop    %es
     53f:	0f a9                	pop    %gs
     541:	1f                   	pop    %ds
     542:	61                   	popa   
     543:	c9                   	leave  
     544:	cf                   	iret   

00000545 <fn1>:
     545:	66 83 ec 04          	sub    $0x4,%sp
     549:	b4 00                	mov    $0x0,%ah
     54b:	cd 16                	int    $0x16
     54d:	b4 00                	mov    $0x0,%ah
     54f:	66 67 89 04          	mov    %ax,(%si)
     553:	24 66                	and    $0x66,%al
     555:	67 8b 04             	mov    (%si),%eax
     558:	24 66                	and    $0x66,%al
     55a:	83 c4 04             	add    $0x4,%esp
     55d:	8e e0                	mov    %eax,%fs
     55f:	07                   	pop    %es
     560:	0f a9                	pop    %gs
     562:	1f                   	pop    %ds
     563:	61                   	popa   
     564:	c9                   	leave  
     565:	cf                   	iret   

00000566 <fn2>:
     566:	66 83 ec 04          	sub    $0x4,%sp
     56a:	b4 00                	mov    $0x0,%ah
     56c:	cd 16                	int    $0x16
     56e:	b4 00                	mov    $0x0,%ah
     570:	66 67 89 04          	mov    %ax,(%si)
     574:	24 66                	and    $0x66,%al
     576:	67 8b 04             	mov    (%si),%eax
     579:	24 b4                	and    $0xb4,%al
     57b:	0e                   	push   %cs
     57c:	b3 00                	mov    $0x0,%bl
     57e:	cd 10                	int    $0x10
     580:	66 83 c4 04          	add    $0x4,%sp
     584:	8e e0                	mov    %eax,%fs
     586:	07                   	pop    %es
     587:	0f a9                	pop    %gs
     589:	1f                   	pop    %ds
     58a:	61                   	popa   
     58b:	c9                   	leave  
     58c:	cf                   	iret   

0000058d <fn3>:
     58d:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     592:	07                   	pop    %es
     593:	0f a9                	pop    %gs
     595:	1f                   	pop    %ds
     596:	61                   	popa   
     597:	c9                   	leave  
     598:	cf                   	iret   

00000599 <_SetINT37h>:
     599:	fa                   	cli    
     59a:	e8 94 04 cf fa       	call   facf0a33 <_end+0xface9fd7>

0000059e <_SetINT38h>:
     59e:	fa                   	cli    
     59f:	50                   	push   %eax
     5a0:	1e                   	push   %ds
     5a1:	8c c8                	mov    %cs,%eax
     5a3:	8e d8                	mov    %eax,%ds
     5a5:	6a 00                	push   $0x0
     5a7:	e8 58 0c 1f 58       	call   581f1204 <_end+0x581ea7a8>
     5ac:	fb                   	sti    
     5ad:	cf                   	iret   

000005ae <_SetINT39h>:
     5ae:	fa                   	cli    
     5af:	c8 00 00 00          	enter  $0x0,$0x0
     5b3:	1e                   	push   %ds
     5b4:	6a 00                	push   $0x0
     5b6:	8c c8                	mov    %cs,%eax
     5b8:	8e d8                	mov    %eax,%ds
     5ba:	e8 41 0e 1f c9       	call   c91f1400 <_end+0xc91ea9a4>
     5bf:	fb                   	sti    
     5c0:	cf                   	iret   

000005c1 <_SetINT41h>:
     5c1:	fa                   	cli    
     5c2:	e8 a4 03 e8 15       	call   15e8096b <_end+0x15e79f0f>
     5c7:	04 b0                	add    $0xb0,%al
     5c9:	20 e6                	and    %ah,%dh
     5cb:	20 e6                	and    %ah,%dh
     5cd:	a0 fb cf fa c8       	mov    0xc8facffb,%al

000005d0 <_SetINT2Ah>:
     5d0:	fa                   	cli    
     5d1:	c8 00 00 00          	enter  $0x0,$0x0
     5d5:	1e                   	push   %ds
     5d6:	66 67 8b 45 08       	mov    0x8(%di),%ax
     5db:	66 50                	push   %ax
     5dd:	6a 00                	push   $0x0
     5df:	8c c8                	mov    %cs,%eax
     5e1:	8e d8                	mov    %eax,%ds
     5e3:	e8 ad 10 58 1f       	call   1f581695 <_end+0x1f57ac39>
     5e8:	c9                   	leave  
     5e9:	fb                   	sti    
     5ea:	cf                   	iret   

000005eb <_SetINT3Bh>:
     5eb:	fa                   	cli    
     5ec:	c8 00 00 00          	enter  $0x0,$0x0
     5f0:	1e                   	push   %ds
     5f1:	6a 00                	push   $0x0
     5f3:	8c c8                	mov    %cs,%eax
     5f5:	8e d8                	mov    %eax,%ds
     5f7:	e8 66 11 1f c9       	call   c91f1762 <_end+0xc91ead06>
     5fc:	fb                   	sti    
     5fd:	cf                   	iret   

000005fe <_SetINT3Ch>:
     5fe:	fa                   	cli    
     5ff:	c8 00 00 00          	enter  $0x0,$0x0
     603:	1e                   	push   %ds
     604:	66 67 8b 45 08       	mov    0x8(%di),%ax
     609:	66 50                	push   %ax
     60b:	6a 00                	push   $0x0
     60d:	8c c8                	mov    %cs,%eax
     60f:	8e d8                	mov    %eax,%ds
     611:	e8 c6 15 66 83       	call   83661bdc <_end+0x8365b180>
     616:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     619:	c9                   	leave  
     61a:	fb                   	sti    
     61b:	cf                   	iret   

0000061c <_SetINT3Dh>:
     61c:	fa                   	cli    
     61d:	c8 00 00 00          	enter  $0x0,$0x0
     621:	1e                   	push   %ds
     622:	66 67 8b 45 08       	mov    0x8(%di),%ax
     627:	66 50                	push   %ax
     629:	6a 00                	push   $0x0
     62b:	8c c8                	mov    %cs,%eax
     62d:	8e d8                	mov    %eax,%ds
     62f:	e8 69 16 66 83       	call   83661c9d <_end+0x8365b241>
     634:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     637:	c9                   	leave  
     638:	fb                   	sti    
     639:	cf                   	iret   

0000063a <_SetINT3Eh>:
     63a:	fa                   	cli    
     63b:	c8 00 00 00          	enter  $0x0,$0x0
     63f:	1e                   	push   %ds
     640:	66 67 8b 45 08       	mov    0x8(%di),%ax
     645:	66 50                	push   %ax
     647:	6a 00                	push   $0x0
     649:	8c c8                	mov    %cs,%eax
     64b:	8e d8                	mov    %eax,%ds
     64d:	e8 82 16 66 83       	call   83661cd4 <_end+0x8365b278>
     652:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     655:	c9                   	leave  
     656:	fb                   	sti    
     657:	cf                   	iret   

00000658 <_SetINT3Fh>:
     658:	fa                   	cli    
     659:	c8 00 00 00          	enter  $0x0,$0x0
     65d:	1e                   	push   %ds
     65e:	66 67 8b 45 08       	mov    0x8(%di),%ax
     663:	66 50                	push   %ax
     665:	6a 00                	push   $0x0
     667:	8c c8                	mov    %cs,%eax
     669:	8e d8                	mov    %eax,%ds
     66b:	e8 a9 17 66 83       	call   83661e19 <_end+0x8365b3bd>
     670:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     673:	c9                   	leave  
     674:	fb                   	sti    
     675:	cf                   	iret   

00000676 <_initialInt>:
     676:	c8 00 00 00          	enter  $0x0,$0x0
     67a:	60                   	pusha  
     67b:	06                   	push   %es
     67c:	1e                   	push   %ds
     67d:	8c c8                	mov    %cs,%eax
     67f:	8e d8                	mov    %eax,%ds
     681:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     686:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
     68b:	00 f7                	add    %dh,%bh
     68d:	e3 89                	jecxz  618 <_SetINT3Ch+0x1a>
     68f:	c7                   	(bad)  
     690:	b8 ed 02 26 89       	mov    $0x892602ed,%eax
     695:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     69a:	45                   	inc    %ebp
     69b:	02 1f                	add    (%edi),%bl
     69d:	07                   	pop    %es
     69e:	61                   	popa   
     69f:	60                   	pusha  
     6a0:	06                   	push   %es
     6a1:	1e                   	push   %ds
     6a2:	8c c8                	mov    %cs,%eax
     6a4:	8e d8                	mov    %eax,%ds
     6a6:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     6ab:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
     6b0:	00 f7                	add    %dh,%bh
     6b2:	e3 89                	jecxz  63d <_SetINT3Eh+0x3>
     6b4:	c7                   	(bad)  
     6b5:	b8 3c 04 26 89       	mov    $0x8926043c,%eax
     6ba:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     6bf:	45                   	inc    %ebp
     6c0:	02 1f                	add    (%edi),%bl
     6c2:	07                   	pop    %es
     6c3:	61                   	popa   
     6c4:	60                   	pusha  
     6c5:	06                   	push   %es
     6c6:	1e                   	push   %ds
     6c7:	8c c8                	mov    %cs,%eax
     6c9:	8e d8                	mov    %eax,%ds
     6cb:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     6d0:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
     6d5:	00 f7                	add    %dh,%bh
     6d7:	e3 89                	jecxz  662 <_SetINT3Fh+0xa>
     6d9:	c7                   	(bad)  
     6da:	b8 72 04 26 89       	mov    $0x89260472,%eax
     6df:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     6e4:	45                   	inc    %ebp
     6e5:	02 1f                	add    (%edi),%bl
     6e7:	07                   	pop    %es
     6e8:	61                   	popa   
     6e9:	60                   	pusha  
     6ea:	06                   	push   %es
     6eb:	1e                   	push   %ds
     6ec:	8c c8                	mov    %cs,%eax
     6ee:	8e d8                	mov    %eax,%ds
     6f0:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     6f5:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
     6fa:	00 f7                	add    %dh,%bh
     6fc:	e3 89                	jecxz  687 <_initialInt+0x11>
     6fe:	c7                   	(bad)  
     6ff:	b8 a8 04 26 89       	mov    $0x892604a8,%eax
     704:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     709:	45                   	inc    %ebp
     70a:	02 1f                	add    (%edi),%bl
     70c:	07                   	pop    %es
     70d:	61                   	popa   
     70e:	60                   	pusha  
     70f:	06                   	push   %es
     710:	1e                   	push   %ds
     711:	8c c8                	mov    %cs,%eax
     713:	8e d8                	mov    %eax,%ds
     715:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     71a:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
     71f:	00 f7                	add    %dh,%bh
     721:	e3 89                	jecxz  6ac <_initialInt+0x36>
     723:	c7                   	(bad)  
     724:	b8 d8 04 26 89       	mov    $0x892604d8,%eax
     729:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     72e:	45                   	inc    %ebp
     72f:	02 1f                	add    (%edi),%bl
     731:	07                   	pop    %es
     732:	61                   	popa   
     733:	60                   	pusha  
     734:	06                   	push   %es
     735:	1e                   	push   %ds
     736:	8c c8                	mov    %cs,%eax
     738:	8e d8                	mov    %eax,%ds
     73a:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     73f:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
     744:	00 f7                	add    %dh,%bh
     746:	e3 89                	jecxz  6d1 <_initialInt+0x5b>
     748:	c7                   	(bad)  
     749:	b8 08 05 26 89       	mov    $0x89260508,%eax
     74e:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     753:	45                   	inc    %ebp
     754:	02 1f                	add    (%edi),%bl
     756:	07                   	pop    %es
     757:	61                   	popa   
     758:	60                   	pusha  
     759:	06                   	push   %es
     75a:	1e                   	push   %ds
     75b:	8c c8                	mov    %cs,%eax
     75d:	8e d8                	mov    %eax,%ds
     75f:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     764:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
     769:	00 f7                	add    %dh,%bh
     76b:	e3 89                	jecxz  6f6 <_initialInt+0x80>
     76d:	c7                   	(bad)  
     76e:	b8 99 05 26 89       	mov    $0x89260599,%eax
     773:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     778:	45                   	inc    %ebp
     779:	02 1f                	add    (%edi),%bl
     77b:	07                   	pop    %es
     77c:	61                   	popa   
     77d:	60                   	pusha  
     77e:	06                   	push   %es
     77f:	1e                   	push   %ds
     780:	8c c8                	mov    %cs,%eax
     782:	8e d8                	mov    %eax,%ds
     784:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     789:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
     78e:	00 f7                	add    %dh,%bh
     790:	e3 89                	jecxz  71b <_initialInt+0xa5>
     792:	c7                   	(bad)  
     793:	b8 9e 05 26 89       	mov    $0x8926059e,%eax
     798:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     79d:	45                   	inc    %ebp
     79e:	02 1f                	add    (%edi),%bl
     7a0:	07                   	pop    %es
     7a1:	61                   	popa   
     7a2:	60                   	pusha  
     7a3:	06                   	push   %es
     7a4:	1e                   	push   %ds
     7a5:	8c c8                	mov    %cs,%eax
     7a7:	8e d8                	mov    %eax,%ds
     7a9:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     7ae:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
     7b3:	00 f7                	add    %dh,%bh
     7b5:	e3 89                	jecxz  740 <_initialInt+0xca>
     7b7:	c7                   	(bad)  
     7b8:	b8 ae 05 26 89       	mov    $0x892605ae,%eax
     7bd:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     7c2:	45                   	inc    %ebp
     7c3:	02 1f                	add    (%edi),%bl
     7c5:	07                   	pop    %es
     7c6:	61                   	popa   
     7c7:	60                   	pusha  
     7c8:	06                   	push   %es
     7c9:	1e                   	push   %ds
     7ca:	8c c8                	mov    %cs,%eax
     7cc:	8e d8                	mov    %eax,%ds
     7ce:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     7d3:	b8 2a 00 bb 04       	mov    $0x4bb002a,%eax
     7d8:	00 f7                	add    %dh,%bh
     7da:	e3 89                	jecxz  765 <_initialInt+0xef>
     7dc:	c7                   	(bad)  
     7dd:	b8 d0 05 26 89       	mov    $0x892605d0,%eax
     7e2:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     7e7:	45                   	inc    %ebp
     7e8:	02 1f                	add    (%edi),%bl
     7ea:	07                   	pop    %es
     7eb:	61                   	popa   
     7ec:	60                   	pusha  
     7ed:	06                   	push   %es
     7ee:	1e                   	push   %ds
     7ef:	8c c8                	mov    %cs,%eax
     7f1:	8e d8                	mov    %eax,%ds
     7f3:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     7f8:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
     7fd:	00 f7                	add    %dh,%bh
     7ff:	e3 89                	jecxz  78a <_initialInt+0x114>
     801:	c7                   	(bad)  
     802:	b8 c1 05 26 89       	mov    $0x892605c1,%eax
     807:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     80c:	45                   	inc    %ebp
     80d:	02 1f                	add    (%edi),%bl
     80f:	07                   	pop    %es
     810:	61                   	popa   
     811:	60                   	pusha  
     812:	06                   	push   %es
     813:	1e                   	push   %ds
     814:	8c c8                	mov    %cs,%eax
     816:	8e d8                	mov    %eax,%ds
     818:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     81d:	b8 42 00 bb 04       	mov    $0x4bb0042,%eax
     822:	00 f7                	add    %dh,%bh
     824:	e3 89                	jecxz  7af <_initialInt+0x139>
     826:	c7                   	(bad)  
     827:	b8 29 03 26 89       	mov    $0x89260329,%eax
     82c:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     831:	45                   	inc    %ebp
     832:	02 1f                	add    (%edi),%bl
     834:	07                   	pop    %es
     835:	61                   	popa   
     836:	60                   	pusha  
     837:	06                   	push   %es
     838:	1e                   	push   %ds
     839:	8c c8                	mov    %cs,%eax
     83b:	8e d8                	mov    %eax,%ds
     83d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     842:	b8 3b 00 bb 04       	mov    $0x4bb003b,%eax
     847:	00 f7                	add    %dh,%bh
     849:	e3 89                	jecxz  7d4 <_initialInt+0x15e>
     84b:	c7                   	(bad)  
     84c:	b8 eb 05 26 89       	mov    $0x892605eb,%eax
     851:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     856:	45                   	inc    %ebp
     857:	02 1f                	add    (%edi),%bl
     859:	07                   	pop    %es
     85a:	61                   	popa   
     85b:	60                   	pusha  
     85c:	06                   	push   %es
     85d:	1e                   	push   %ds
     85e:	8c c8                	mov    %cs,%eax
     860:	8e d8                	mov    %eax,%ds
     862:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     867:	b8 3c 00 bb 04       	mov    $0x4bb003c,%eax
     86c:	00 f7                	add    %dh,%bh
     86e:	e3 89                	jecxz  7f9 <_initialInt+0x183>
     870:	c7                   	(bad)  
     871:	b8 fe 05 26 89       	mov    $0x892605fe,%eax
     876:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     87b:	45                   	inc    %ebp
     87c:	02 1f                	add    (%edi),%bl
     87e:	07                   	pop    %es
     87f:	61                   	popa   
     880:	60                   	pusha  
     881:	06                   	push   %es
     882:	1e                   	push   %ds
     883:	8c c8                	mov    %cs,%eax
     885:	8e d8                	mov    %eax,%ds
     887:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     88c:	b8 3d 00 bb 04       	mov    $0x4bb003d,%eax
     891:	00 f7                	add    %dh,%bh
     893:	e3 89                	jecxz  81e <_initialInt+0x1a8>
     895:	c7                   	(bad)  
     896:	b8 1c 06 26 89       	mov    $0x8926061c,%eax
     89b:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8a0:	45                   	inc    %ebp
     8a1:	02 1f                	add    (%edi),%bl
     8a3:	07                   	pop    %es
     8a4:	61                   	popa   
     8a5:	60                   	pusha  
     8a6:	06                   	push   %es
     8a7:	1e                   	push   %ds
     8a8:	8c c8                	mov    %cs,%eax
     8aa:	8e d8                	mov    %eax,%ds
     8ac:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8b1:	b8 3e 00 bb 04       	mov    $0x4bb003e,%eax
     8b6:	00 f7                	add    %dh,%bh
     8b8:	e3 89                	jecxz  843 <_initialInt+0x1cd>
     8ba:	c7                   	(bad)  
     8bb:	b8 3a 06 26 89       	mov    $0x8926063a,%eax
     8c0:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8c5:	45                   	inc    %ebp
     8c6:	02 1f                	add    (%edi),%bl
     8c8:	07                   	pop    %es
     8c9:	61                   	popa   
     8ca:	60                   	pusha  
     8cb:	06                   	push   %es
     8cc:	1e                   	push   %ds
     8cd:	8c c8                	mov    %cs,%eax
     8cf:	8e d8                	mov    %eax,%ds
     8d1:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8d6:	b8 3f 00 bb 04       	mov    $0x4bb003f,%eax
     8db:	00 f7                	add    %dh,%bh
     8dd:	e3 89                	jecxz  868 <_initialInt+0x1f2>
     8df:	c7                   	(bad)  
     8e0:	b8 58 06 26 89       	mov    $0x89260658,%eax
     8e5:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     8ea:	45                   	inc    %ebp
     8eb:	02 1f                	add    (%edi),%bl
     8ed:	07                   	pop    %es
     8ee:	61                   	popa   
     8ef:	c9                   	leave  
     8f0:	66 5a                	pop    %dx
     8f2:	ff e2                	jmp    *%edx

000008f4 <_initialInt_09h>:
     8f4:	c8 00 00 00          	enter  $0x0,$0x0
     8f8:	a1 24 00 a3 22       	mov    0x22a30024,%eax
     8fd:	01 a1 26 00 a3 24    	add    %esp,0x24a30026(%ecx)
     903:	01 60 06             	add    %esp,0x6(%eax)
     906:	1e                   	push   %ds
     907:	8c c8                	mov    %cs,%eax
     909:	8e d8                	mov    %eax,%ds
     90b:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     910:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
     915:	00 f7                	add    %dh,%bh
     917:	e3 89                	jecxz  8a2 <_initialInt+0x22c>
     919:	c7                   	(bad)  
     91a:	b8 ae 03 26 89       	mov    $0x892603ae,%eax
     91f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     924:	45                   	inc    %ebp
     925:	02 1f                	add    (%edi),%bl
     927:	07                   	pop    %es
     928:	61                   	popa   
     929:	c9                   	leave  
     92a:	66 5a                	pop    %dx
     92c:	ff e2                	jmp    *%edx

0000092e <_initialInt_08h>:
     92e:	c8 00 00 00          	enter  $0x0,$0x0
     932:	b0 40                	mov    $0x40,%al
     934:	e6 43                	out    %al,$0x43
     936:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
     93b:	88 e0                	mov    %ah,%al
     93d:	e6 40                	out    %al,$0x40
     93f:	60                   	pusha  
     940:	06                   	push   %es
     941:	1e                   	push   %ds
     942:	8c c8                	mov    %cs,%eax
     944:	8e d8                	mov    %eax,%ds
     946:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     94b:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
     950:	00 f7                	add    %dh,%bh
     952:	e3 89                	jecxz  8dd <_initialInt+0x267>
     954:	c7                   	(bad)  
     955:	b8 29 03 26 89       	mov    $0x89260329,%eax
     95a:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     95f:	45                   	inc    %ebp
     960:	02 1f                	add    (%edi),%bl
     962:	07                   	pop    %es
     963:	61                   	popa   
     964:	c9                   	leave  
     965:	66 5a                	pop    %dx
     967:	ff e2                	jmp    *%edx

00000969 <_save>:
     969:	66 89 26             	mov    %sp,(%esi)
     96c:	3a 01                	cmp    (%ecx),%al
     96e:	1e                   	push   %ds
     96f:	0e                   	push   %cs
     970:	1f                   	pop    %ds
     971:	8f 06                	popl   (%esi)
     973:	2a 01                	sub    (%ecx),%al
     975:	8f 06                	popl   (%esi)
     977:	2e 01 66 89          	add    %esp,%cs:-0x77(%esi)
     97b:	26 36 01 66 89       	es add %esp,%ss:%es:-0x77(%esi)
     980:	36 30 01             	xor    %al,%ss:(%ecx)
     983:	66 8b 36             	mov    (%esi),%si
     986:	5c                   	pop    %esp
     987:	37                   	aaa    
     988:	66 83 c6 2c          	add    $0x2c,%si
     98c:	67 8f 06 67 8f       	popl   -0x7099
     991:	46                   	inc    %esi
     992:	04 67                	add    $0x67,%al
     994:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
     99b:	46                   	inc    %esi
     99c:	08 67 c7             	or     %ah,-0x39(%edi)
     99f:	46                   	inc    %esi
     9a0:	0a 00                	or     (%eax),%al
     9a2:	00 66 67             	add    %ah,0x67(%esi)
     9a5:	89 66 fc             	mov    %esp,-0x4(%esi)
     9a8:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
     9ac:	8c de                	mov    %ds,%esi
     9ae:	8e d6                	mov    %esi,%ss
     9b0:	66 8b 26             	mov    (%esi),%sp
     9b3:	5c                   	pop    %esp
     9b4:	37                   	aaa    
     9b5:	66 83 c4 24          	add    $0x24,%sp
     9b9:	6a 00                	push   $0x0
     9bb:	ff 36                	pushl  (%esi)
     9bd:	2a 01                	sub    (%ecx),%al
     9bf:	6a 00                	push   $0x0
     9c1:	06                   	push   %es
     9c2:	66 55                	push   %bp
     9c4:	66 57                	push   %di
     9c6:	66 ff 36             	pushw  (%esi)
     9c9:	30 01                	xor    %al,(%ecx)
     9cb:	66 52                	push   %dx
     9cd:	66 51                	push   %cx
     9cf:	66 53                	push   %bx
     9d1:	66 50                	push   %ax
     9d3:	66 8b 26             	mov    (%esi),%sp
     9d6:	36 01 a1 2e 01 ff e0 	add    %esp,%ss:-0x1f00fed2(%ecx)

000009dd <_restart>:
     9dd:	66 89 26             	mov    %sp,(%esi)
     9e0:	36 01 66 8b          	add    %esp,%ss:-0x75(%esi)
     9e4:	26                   	es
     9e5:	5c                   	pop    %esp
     9e6:	37                   	aaa    
     9e7:	66 58                	pop    %ax
     9e9:	66 5b                	pop    %bx
     9eb:	66 59                	pop    %cx
     9ed:	66 5a                	pop    %dx
     9ef:	66 5e                	pop    %si
     9f1:	66 5f                	pop    %di
     9f3:	66 5d                	pop    %bp
     9f5:	07                   	pop    %es
     9f6:	8f 06                	popl   (%esi)
     9f8:	34 01                	xor    $0x1,%al
     9fa:	8f 06                	popl   (%esi)
     9fc:	2a 01                	sub    (%ecx),%al
     9fe:	8f 06                	popl   (%esi)
     a00:	34 01                	xor    $0x1,%al
     a02:	66 89 36             	mov    %si,(%esi)
     a05:	30 01                	xor    %al,(%ecx)
     a07:	17                   	pop    %ss
     a08:	8f 06                	popl   (%esi)
     a0a:	34 01                	xor    $0x1,%al
     a0c:	66 89 e6             	mov    %sp,%si
     a0f:	66 67 8b 26 67 ff    	mov    -0x99,%sp
     a15:	76 0c                	jbe    a23 <_restart+0x46>
     a17:	67 ff 76 08          	pushl  0x8(%bp)
     a1b:	67 ff 76 04          	pushl  0x4(%bp)
     a1f:	66 8b 36             	mov    (%esi),%si
     a22:	30 01                	xor    %al,(%ecx)
     a24:	8e 1e                	mov    (%esi),%ds
     a26:	2a 01                	sub    (%ecx),%al
     a28:	50                   	push   %eax
     a29:	b0 20                	mov    $0x20,%al
     a2b:	e6 20                	out    %al,$0x20
     a2d:	e6 a0                	out    %al,$0xa0
     a2f:	58                   	pop    %eax
     a30:	cf                   	iret   

00000a31 <RTC_Timer>:
     a31:	c8 00 00 00          	enter  $0x0,$0x0
     a35:	1e                   	push   %ds
     a36:	06                   	push   %es
     a37:	60                   	pusha  
     a38:	8c c8                	mov    %cs,%eax
     a3a:	8e d8                	mov    %eax,%ds
     a3c:	8c c8                	mov    %cs,%eax
     a3e:	8e c0                	mov    %eax,%es
     a40:	bf 20 30 b4 02       	mov    $0x2b43020,%edi
     a45:	cd 1a                	int    $0x1a
     a47:	88 e8                	mov    %ch,%al
     a49:	b4 00                	mov    $0x0,%ah
     a4b:	b3 10                	mov    $0x10,%bl
     a4d:	f6 f3                	div    %bl
     a4f:	04 30                	add    $0x30,%al
     a51:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
     a57:	88 e8                	mov    %ch,%al
     a59:	24 0f                	and    $0xf,%al
     a5b:	04 30                	add    $0x30,%al
     a5d:	88 45 01             	mov    %al,0x1(%ebp)
     a60:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
     a64:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
     a68:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
     a6c:	b4 02                	mov    $0x2,%ah
     a6e:	cd 1a                	int    $0x1a
     a70:	88 c8                	mov    %cl,%al
     a72:	b4 00                	mov    $0x0,%ah
     a74:	b3 10                	mov    $0x10,%bl
     a76:	f6 f3                	div    %bl
     a78:	04 30                	add    $0x30,%al
     a7a:	88 45 05             	mov    %al,0x5(%ebp)
     a7d:	b4 02                	mov    $0x2,%ah
     a7f:	cd 1a                	int    $0x1a
     a81:	88 c8                	mov    %cl,%al
     a83:	24 0f                	and    $0xf,%al
     a85:	04 30                	add    $0x30,%al
     a87:	88 45 06             	mov    %al,0x6(%ebp)
     a8a:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
     a8e:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
     a92:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
     a96:	8c c8                	mov    %cs,%eax
     a98:	8e d8                	mov    %eax,%ds
     a9a:	8e c0                	mov    %eax,%es
     a9c:	bd 4f 01 8c d8       	mov    $0xd88c014f,%ebp
     aa1:	8e c0                	mov    %eax,%es
     aa3:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
     aa8:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     aae:	b2 0a                	mov    $0xa,%dl
     ab0:	cd 10                	int    $0x10
     ab2:	8c c8                	mov    %cs,%eax
     ab4:	8e d8                	mov    %eax,%ds
     ab6:	8e c0                	mov    %eax,%es
     ab8:	bd 20 30 8c d8       	mov    $0xd88c3020,%ebp
     abd:	8e c0                	mov    %eax,%es
     abf:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
     ac4:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     aca:	b2 1e                	mov    $0x1e,%dl
     acc:	cd 10                	int    $0x10
     ace:	61                   	popa   
     acf:	07                   	pop    %es
     ad0:	1f                   	pop    %ds
     ad1:	c9                   	leave  
     ad2:	66 5a                	pop    %dx
     ad4:	ff e2                	jmp    *%edx

00000ad6 <_Get_Hours_1>:
     ad6:	c8 04 00 00          	enter  $0x4,$0x0
     ada:	b4 02                	mov    $0x2,%ah
     adc:	cd 1a                	int    $0x1a
     ade:	88 e8                	mov    %ch,%al
     ae0:	b4 00                	mov    $0x0,%ah
     ae2:	b3 10                	mov    $0x10,%bl
     ae4:	f6 f3                	div    %bl
     ae6:	30 e4                	xor    %ah,%ah
     ae8:	66 67 89 04          	mov    %ax,(%si)
     aec:	24 66                	and    $0x66,%al
     aee:	67 8b 04             	mov    (%si),%eax
     af1:	24 c9                	and    $0xc9,%al
     af3:	66 5a                	pop    %dx
     af5:	ff e2                	jmp    *%edx

00000af7 <_Get_Hours_2>:
     af7:	c8 04 00 00          	enter  $0x4,$0x0
     afb:	b4 02                	mov    $0x2,%ah
     afd:	cd 1a                	int    $0x1a
     aff:	88 e8                	mov    %ch,%al
     b01:	24 0f                	and    $0xf,%al
     b03:	30 e4                	xor    %ah,%ah
     b05:	66 67 89 04          	mov    %ax,(%si)
     b09:	24 66                	and    $0x66,%al
     b0b:	67 8b 04             	mov    (%si),%eax
     b0e:	24 c9                	and    $0xc9,%al
     b10:	66 5a                	pop    %dx
     b12:	ff e2                	jmp    *%edx

00000b14 <_Get_Minutes_1>:
     b14:	c8 04 00 00          	enter  $0x4,$0x0
     b18:	b4 02                	mov    $0x2,%ah
     b1a:	cd 1a                	int    $0x1a
     b1c:	88 c8                	mov    %cl,%al
     b1e:	b4 00                	mov    $0x0,%ah
     b20:	b3 10                	mov    $0x10,%bl
     b22:	f6 f3                	div    %bl
     b24:	30 e4                	xor    %ah,%ah
     b26:	66 67 89 04          	mov    %ax,(%si)
     b2a:	24 66                	and    $0x66,%al
     b2c:	67 8b 04             	mov    (%si),%eax
     b2f:	24 c9                	and    $0xc9,%al
     b31:	66 5a                	pop    %dx
     b33:	ff e2                	jmp    *%edx

00000b35 <_Get_Minutes_2>:
     b35:	c8 04 00 00          	enter  $0x4,$0x0
     b39:	b4 02                	mov    $0x2,%ah
     b3b:	cd 1a                	int    $0x1a
     b3d:	88 c8                	mov    %cl,%al
     b3f:	24 0f                	and    $0xf,%al
     b41:	30 e4                	xor    %ah,%ah
     b43:	66 67 89 04          	mov    %ax,(%si)
     b47:	24 66                	and    $0x66,%al
     b49:	67 8b 04             	mov    (%si),%eax
     b4c:	24 c9                	and    $0xc9,%al
     b4e:	66 5a                	pop    %dx
     b50:	ff e2                	jmp    *%edx

00000b52 <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
     b52:	66 55                	push   %bp
     b54:	66 89 e5             	mov    %sp,%bp
     b57:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
     b5b:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     b60:	66 89 d0             	mov    %dx,%ax
     b63:	66 c1 e0 02          	shl    $0x2,%ax
     b67:	66 01 d0             	add    %dx,%ax
     b6a:	66 c1 e0 04          	shl    $0x4,%ax
     b6e:	66 89 c2             	mov    %ax,%dx
     b71:	67 66 8b 45 10       	mov    0x10(%di),%ax
     b76:	66 01 d0             	add    %dx,%ax
     b79:	66 01 c0             	add    %ax,%ax
     b7c:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
     b81:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     b88:	00 00                	add    %al,(%eax)
	int index = 0;
     b8a:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     b91:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     b93:	eb 35                	jmp    bca <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
     b95:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     b9a:	67 66 8b 45 08       	mov    0x8(%di),%ax
     b9f:	66 01 d0             	add    %dx,%ax
     ba2:	67 8a 00             	mov    (%bx,%si),%al
     ba5:	66 0f be c0          	movsbw %al,%ax
     ba9:	67 66 ff 75 f4       	pushw  -0xc(%di)
     bae:	67 66 ff 75 fc       	pushw  -0x4(%di)
     bb3:	66 50                	push   %ax
     bb5:	66 e8 d2 f5          	callw  18b <_clearscreen+0x7>
     bb9:	ff                   	(bad)  
     bba:	ff 66 83             	jmp    *-0x7d(%esi)
     bbd:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     bc0:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     bc4:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
     bca:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     bcf:	67 66 8b 45 08       	mov    0x8(%di),%ax
     bd4:	66 01 d0             	add    %dx,%ax
     bd7:	67 8a 00             	mov    (%bx,%si),%al
     bda:	84 c0                	test   %al,%al
     bdc:	75 b7                	jne    b95 <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     bde:	90                   	nop
}
     bdf:	66 c9                	leavew 
     be1:	66 c3                	retw   

00000be3 <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
     be3:	66 55                	push   %bp
     be5:	66 89 e5             	mov    %sp,%bp
     be8:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
     bec:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     bf1:	66 89 d0             	mov    %dx,%ax
     bf4:	66 c1 e0 02          	shl    $0x2,%ax
     bf8:	66 01 d0             	add    %dx,%ax
     bfb:	66 c1 e0 04          	shl    $0x4,%ax
     bff:	66 89 c2             	mov    %ax,%dx
     c02:	67 66 8b 45 10       	mov    0x10(%di),%ax
     c07:	66 01 d0             	add    %dx,%ax
     c0a:	66 01 c0             	add    %ax,%ax
     c0d:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
     c12:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     c19:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     c1b:	eb 35                	jmp    c52 <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
     c1d:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     c22:	67 66 8b 45 08       	mov    0x8(%di),%ax
     c27:	66 01 d0             	add    %dx,%ax
     c2a:	67 8a 00             	mov    (%bx,%si),%al
     c2d:	66 0f be c0          	movsbw %al,%ax
     c31:	67 66 ff 75 14       	pushw  0x14(%di)
     c36:	67 66 ff 75 fc       	pushw  -0x4(%di)
     c3b:	66 50                	push   %ax
     c3d:	66 e8 4a f5          	callw  18b <_clearscreen+0x7>
     c41:	ff                   	(bad)  
     c42:	ff 66 83             	jmp    *-0x7d(%esi)
     c45:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     c48:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     c4c:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
     c52:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     c57:	67 66 8b 45 08       	mov    0x8(%di),%ax
     c5c:	66 01 d0             	add    %dx,%ax
     c5f:	67 8a 00             	mov    (%bx,%si),%al
     c62:	84 c0                	test   %al,%al
     c64:	75 b7                	jne    c1d <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     c66:	90                   	nop
}
     c67:	66 c9                	leavew 
     c69:	66 c3                	retw   

00000c6b <sys_showline>:
void sys_showline(){
     c6b:	66 55                	push   %bp
     c6d:	66 89 e5             	mov    %sp,%bp
     c70:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
     c74:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
     c79:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
     c7e:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
     c83:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
     c88:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
     c8d:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
     c92:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
     c97:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     c9e:	00 00                	add    %al,(%eax)
    int i = 0;
     ca0:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     ca7:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
     ca9:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     cb0:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
     cb2:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     cb9:	00 00                	add    %al,(%eax)
     cbb:	eb 52                	jmp    d0f <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
     cbd:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     cc2:	66 89 d0             	mov    %dx,%ax
     cc5:	66 c1 e0 03          	shl    $0x3,%ax
     cc9:	66 01 d0             	add    %dx,%ax
     ccc:	67 66 8d 14          	lea    (%si),%dx
     cd0:	c5 00                	lds    (%eax),%eax
     cd2:	00 00                	add    %al,(%eax)
     cd4:	00 66 01             	add    %ah,0x1(%esi)
     cd7:	d0 66 01             	shlb   0x1(%esi)
     cda:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
     cde:	45                   	inc    %ebp
     cdf:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
     ce5:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     cea:	66 01 d0             	add    %dx,%ax
     ced:	67 8a 00             	mov    (%bx,%si),%al
     cf0:	66 0f be c0          	movsbw %al,%ax
     cf4:	67 66 ff 75 f4       	pushw  -0xc(%di)
     cf9:	67 66 ff 75 f0       	pushw  -0x10(%di)
     cfe:	66 50                	push   %ax
     d00:	66 e8 87 f4          	callw  18b <_clearscreen+0x7>
     d04:	ff                   	(bad)  
     d05:	ff 66 83             	jmp    *-0x7d(%esi)
     d08:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
     d0b:	66 ff 45 fc          	incw   -0x4(%ebp)
     d0f:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
     d15:	7e a6                	jle    cbd <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
     d17:	66 c9                	leavew 
     d19:	66 c3                	retw   

00000d1b <sys_printname>:

void sys_printname(){
     d1b:	66 55                	push   %bp
     d1d:	66 89 e5             	mov    %sp,%bp
     d20:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
     d24:	67 66 c7 45 fc fc 1f 	movw   $0x1ffc,-0x4(%di)
     d2b:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
     d2d:	67 66 c7 45 f8 40 20 	movw   $0x2040,-0x8(%di)
     d34:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
     d36:	67 66 c7 45 f4 84 20 	movw   $0x2084,-0xc(%di)
     d3d:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
     d3f:	67 66 c7 45 f0 c8 20 	movw   $0x20c8,-0x10(%di)
     d46:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
     d48:	67 66 c7 45 ec 0c 21 	movw   $0x210c,-0x14(%di)
     d4f:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
     d51:	67 66 c7 45 e8 50 21 	movw   $0x2150,-0x18(%di)
     d58:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
     d5a:	67 66 c7 45 e4 94 21 	movw   $0x2194,-0x1c(%di)
     d61:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
     d63:	66 6a 0b             	pushw  $0xb
     d66:	66 6a 10             	pushw  $0x10
     d69:	67 66 ff 75 fc       	pushw  -0x4(%di)
     d6e:	66 e8 de fd          	callw  b50 <_Get_Minutes_2+0x1b>
     d72:	ff                   	(bad)  
     d73:	ff 66 83             	jmp    *-0x7d(%esi)
     d76:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
     d79:	6a 0b                	push   $0xb
     d7b:	66 6a 11             	pushw  $0x11
     d7e:	67 66 ff 75 f8       	pushw  -0x8(%di)
     d83:	66 e8 c9 fd          	callw  b50 <_Get_Minutes_2+0x1b>
     d87:	ff                   	(bad)  
     d88:	ff 66 83             	jmp    *-0x7d(%esi)
     d8b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
     d8e:	6a 0b                	push   $0xb
     d90:	66 6a 12             	pushw  $0x12
     d93:	67 66 ff 75 f4       	pushw  -0xc(%di)
     d98:	66 e8 b4 fd          	callw  b50 <_Get_Minutes_2+0x1b>
     d9c:	ff                   	(bad)  
     d9d:	ff 66 83             	jmp    *-0x7d(%esi)
     da0:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
     da3:	6a 0b                	push   $0xb
     da5:	66 6a 13             	pushw  $0x13
     da8:	67 66 ff 75 f0       	pushw  -0x10(%di)
     dad:	66 e8 9f fd          	callw  b50 <_Get_Minutes_2+0x1b>
     db1:	ff                   	(bad)  
     db2:	ff 66 83             	jmp    *-0x7d(%esi)
     db5:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
     db8:	6a 0b                	push   $0xb
     dba:	66 6a 14             	pushw  $0x14
     dbd:	67 66 ff 75 ec       	pushw  -0x14(%di)
     dc2:	66 e8 8a fd          	callw  b50 <_Get_Minutes_2+0x1b>
     dc6:	ff                   	(bad)  
     dc7:	ff 66 83             	jmp    *-0x7d(%esi)
     dca:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
     dcd:	6a 0b                	push   $0xb
     dcf:	66 6a 15             	pushw  $0x15
     dd2:	67 66 ff 75 e8       	pushw  -0x18(%di)
     dd7:	66 e8 75 fd          	callw  b50 <_Get_Minutes_2+0x1b>
     ddb:	ff                   	(bad)  
     ddc:	ff 66 83             	jmp    *-0x7d(%esi)
     ddf:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
     de2:	6a 0b                	push   $0xb
     de4:	66 6a 16             	pushw  $0x16
     de7:	67 66 ff 75 e4       	pushw  -0x1c(%di)
     dec:	66 e8 60 fd          	callw  b50 <_Get_Minutes_2+0x1b>
     df0:	ff                   	(bad)  
     df1:	ff 66 83             	jmp    *-0x7d(%esi)
     df4:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
     df7:	c9                   	leave  
     df8:	66 c3                	retw   

00000dfa <sys_printpoem>:
void sys_printpoem(){
     dfa:	66 55                	push   %bp
     dfc:	66 89 e5             	mov    %sp,%bp
     dff:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
     e03:	67 66 c7 45 f8 d8 21 	movw   $0x21d8,-0x8(%di)
     e0a:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
     e0c:	67 66 c7 45 f4 ea 21 	movw   $0x21ea,-0xc(%di)
     e13:	00 00                	add    %al,(%eax)
    int i = 1;
     e15:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     e1c:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
     e1e:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
     e25:	00 00                	add    %al,(%eax)
     e27:	eb 4b                	jmp    e74 <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
     e29:	67 66 ff 75 fc       	pushw  -0x4(%di)
     e2e:	66 6a 0a             	pushw  $0xa
     e31:	66 6a 0f             	pushw  $0xf
     e34:	67 66 ff 75 f8       	pushw  -0x8(%di)
     e39:	66 e8 a4 fd          	callw  be1 <sys_print_for_heart+0x8f>
     e3d:	ff                   	(bad)  
     e3e:	ff 66 83             	jmp    *-0x7d(%esi)
     e41:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
     e43:	67 66 ff 75 fc       	pushw  -0x4(%di)
     e48:	66 6a 0a             	pushw  $0xa
     e4b:	66 6a 10             	pushw  $0x10
     e4e:	67 66 ff 75 f4       	pushw  -0xc(%di)
     e53:	66 e8 8a fd          	callw  be1 <sys_print_for_heart+0x8f>
     e57:	ff                   	(bad)  
     e58:	ff 66 83             	jmp    *-0x7d(%esi)
     e5b:	c4 10                	les    (%eax),%edx
        int j = 0;
     e5d:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     e64:	00 00                	add    %al,(%eax)
        int k = 0;
     e66:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
     e6d:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
     e6f:	67 66 ff 45 fc       	incw   -0x4(%di)
     e74:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
     e7a:	7e ad                	jle    e29 <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
     e7c:	66 c9                	leavew 
     e7e:	66 c3                	retw   

00000e80 <sys_printheart>:
void sys_printheart(){
     e80:	66 55                	push   %bp
     e82:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
     e85:	66 6a 28             	pushw  $0x28
     e88:	66 6a 00             	pushw  $0x0
     e8b:	66 68 f3 21          	pushw  $0x21f3
     e8f:	00 00                	add    %al,(%eax)
     e91:	66 e8 bb fc          	callw  b50 <_Get_Minutes_2+0x1b>
     e95:	ff                   	(bad)  
     e96:	ff 66 83             	jmp    *-0x7d(%esi)
     e99:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
     e9c:	6a 28                	push   $0x28
     e9e:	66 6a 01             	pushw  $0x1
     ea1:	66 68 0b 22          	pushw  $0x220b
     ea5:	00 00                	add    %al,(%eax)
     ea7:	66 e8 a5 fc          	callw  b50 <_Get_Minutes_2+0x1b>
     eab:	ff                   	(bad)  
     eac:	ff 66 83             	jmp    *-0x7d(%esi)
     eaf:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
     eb2:	6a 28                	push   $0x28
     eb4:	66 6a 02             	pushw  $0x2
     eb7:	66 68 24 22          	pushw  $0x2224
     ebb:	00 00                	add    %al,(%eax)
     ebd:	66 e8 8f fc          	callw  b50 <_Get_Minutes_2+0x1b>
     ec1:	ff                   	(bad)  
     ec2:	ff 66 83             	jmp    *-0x7d(%esi)
     ec5:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
     ec8:	6a 28                	push   $0x28
     eca:	66 6a 03             	pushw  $0x3
     ecd:	66 68 3f 22          	pushw  $0x223f
     ed1:	00 00                	add    %al,(%eax)
     ed3:	66 e8 79 fc          	callw  b50 <_Get_Minutes_2+0x1b>
     ed7:	ff                   	(bad)  
     ed8:	ff 66 83             	jmp    *-0x7d(%esi)
     edb:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
     ede:	6a 28                	push   $0x28
     ee0:	66 6a 04             	pushw  $0x4
     ee3:	66 68 58 22          	pushw  $0x2258
     ee7:	00 00                	add    %al,(%eax)
     ee9:	66 e8 63 fc          	callw  b50 <_Get_Minutes_2+0x1b>
     eed:	ff                   	(bad)  
     eee:	ff 66 83             	jmp    *-0x7d(%esi)
     ef1:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
     ef4:	6a 28                	push   $0x28
     ef6:	66 6a 05             	pushw  $0x5
     ef9:	66 68 70 22          	pushw  $0x2270
     efd:	00 00                	add    %al,(%eax)
     eff:	66 e8 4d fc          	callw  b50 <_Get_Minutes_2+0x1b>
     f03:	ff                   	(bad)  
     f04:	ff 66 83             	jmp    *-0x7d(%esi)
     f07:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
     f0a:	6a 28                	push   $0x28
     f0c:	66 6a 06             	pushw  $0x6
     f0f:	66 68 87 22          	pushw  $0x2287
     f13:	00 00                	add    %al,(%eax)
     f15:	66 e8 37 fc          	callw  b50 <_Get_Minutes_2+0x1b>
     f19:	ff                   	(bad)  
     f1a:	ff 66 83             	jmp    *-0x7d(%esi)
     f1d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
     f20:	6a 28                	push   $0x28
     f22:	66 6a 07             	pushw  $0x7
     f25:	66 68 9d 22          	pushw  $0x229d
     f29:	00 00                	add    %al,(%eax)
     f2b:	66 e8 21 fc          	callw  b50 <_Get_Minutes_2+0x1b>
     f2f:	ff                   	(bad)  
     f30:	ff 66 83             	jmp    *-0x7d(%esi)
     f33:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
     f36:	c9                   	leave  
     f37:	66 c3                	retw   

00000f39 <initial_PCB>:
#include "schedule.h"
#include "use.h"
void initial_PCB(int index){
     f39:	66 55                	push   %bp
     f3b:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
     f3e:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f43:	66 40                	inc    %ax
     f45:	66 c1 e0 0c          	shl    $0xc,%ax
     f49:	66 89 c2             	mov    %ax,%dx
     f4c:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f51:	66 c1 e0 02          	shl    $0x2,%ax
     f55:	66 89 c1             	mov    %ax,%cx
     f58:	66 c1 e1 04          	shl    $0x4,%cx
     f5c:	66 01 c8             	add    %cx,%ax
     f5f:	66 05 30 32          	add    $0x3230,%ax
     f63:	00 00                	add    %al,(%eax)
     f65:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
     f69:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f6e:	66 40                	inc    %ax
     f70:	66 c1 e0 0c          	shl    $0xc,%ax
     f74:	66 89 c2             	mov    %ax,%dx
     f77:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f7c:	66 c1 e0 02          	shl    $0x2,%ax
     f80:	66 89 c1             	mov    %ax,%cx
     f83:	66 c1 e1 04          	shl    $0x4,%cx
     f87:	66 01 c8             	add    %cx,%ax
     f8a:	66 05 20 32          	add    $0x3220,%ax
     f8e:	00 00                	add    %al,(%eax)
     f90:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
     f94:	67 66 8b 45 08       	mov    0x8(%di),%ax
     f99:	66 40                	inc    %ax
     f9b:	66 c1 e0 0c          	shl    $0xc,%ax
     f9f:	66 89 c2             	mov    %ax,%dx
     fa2:	67 66 8b 45 08       	mov    0x8(%di),%ax
     fa7:	66 c1 e0 02          	shl    $0x2,%ax
     fab:	66 89 c1             	mov    %ax,%cx
     fae:	66 c1 e1 04          	shl    $0x4,%cx
     fb2:	66 01 c8             	add    %cx,%ax
     fb5:	66 05 20 32          	add    $0x3220,%ax
     fb9:	00 00                	add    %al,(%eax)
     fbb:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
     fc0:	67 66 8b 45 08       	mov    0x8(%di),%ax
     fc5:	66 c1 e0 02          	shl    $0x2,%ax
     fc9:	66 89 c2             	mov    %ax,%dx
     fcc:	66 c1 e2 04          	shl    $0x4,%dx
     fd0:	66 01 d0             	add    %dx,%ax
     fd3:	66 05 20 32          	add    $0x3220,%ax
     fd7:	00 00                	add    %al,(%eax)
     fd9:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
     fe0:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
     fe2:	67 66 8b 45 08       	mov    0x8(%di),%ax
     fe7:	66 c1 e0 02          	shl    $0x2,%ax
     feb:	66 89 c2             	mov    %ax,%dx
     fee:	66 c1 e2 04          	shl    $0x4,%dx
     ff2:	66 01 d0             	add    %dx,%ax
     ff5:	66 05 20 32          	add    $0x3220,%ax
     ff9:	00 00                	add    %al,(%eax)
     ffb:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    1002:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = READY;
    1004:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1009:	66 c1 e0 02          	shl    $0x2,%ax
    100d:	66 89 c2             	mov    %ax,%dx
    1010:	66 c1 e2 04          	shl    $0x4,%dx
    1014:	66 01 d0             	add    %dx,%ax
    1017:	66 05 30 32          	add    $0x3230,%ax
    101b:	00 00                	add    %al,(%eax)
    101d:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    1024:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    1026:	67 66 ff 75 08       	pushw  0x8(%di)
    102b:	66 68 c0 68          	pushw  $0x68c0
    102f:	00 00                	add    %al,(%eax)
    1031:	66 e8 8b 09          	callw  19c0 <size+0x11>
    1035:	00 00                	add    %al,(%eax)
    1037:	66 83 c4 08          	add    $0x8,%sp
    PCB_list[index ].eflags = 512;
    103b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1040:	66 c1 e0 02          	shl    $0x2,%ax
    1044:	66 89 c2             	mov    %ax,%dx
    1047:	66 c1 e2 04          	shl    $0x4,%dx
    104b:	66 01 d0             	add    %dx,%ax
    104e:	66 05 30 32          	add    $0x3230,%ax
    1052:	00 00                	add    %al,(%eax)
    1054:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    105b:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    105d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1062:	66 c1 e0 02          	shl    $0x2,%ax
    1066:	66 89 c2             	mov    %ax,%dx
    1069:	66 c1 e2 04          	shl    $0x4,%dx
    106d:	66 01 d0             	add    %dx,%ax
    1070:	67 66 8d 90 30 32    	lea    0x3230(%bx,%si),%dx
    1076:	00 00                	add    %al,(%eax)
    1078:	67 66 8b 45 08       	mov    0x8(%di),%ax
    107d:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 0;
    1082:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1087:	66 c1 e0 02          	shl    $0x2,%ax
    108b:	66 89 c2             	mov    %ax,%dx
    108e:	66 c1 e2 04          	shl    $0x4,%dx
    1092:	66 01 d0             	add    %dx,%ax
    1095:	66 05 40 32          	add    $0x3240,%ax
    1099:	00 00                	add    %al,(%eax)
    109b:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    10a1:	00 00                	add    %al,(%eax)
}
    10a3:	66 c9                	leavew 
    10a5:	66 c3                	retw   

000010a7 <Set_PCB>:
void Set_PCB(){
    10a7:	66 55                	push   %bp
    10a9:	66 89 e5             	mov    %sp,%bp
    10ac:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    10b0:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    10b7:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    10b9:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    10c0:	00 00                	add    %al,(%eax)
    10c2:	eb 27                	jmp    10eb <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    10c4:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    10c9:	66 c1 e0 02          	shl    $0x2,%ax
    10cd:	66 89 c2             	mov    %ax,%dx
    10d0:	66 c1 e2 04          	shl    $0x4,%dx
    10d4:	66 01 d0             	add    %dx,%ax
    10d7:	66 05 30 32          	add    $0x3230,%ax
    10db:	00 00                	add    %al,(%eax)
    10dd:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    10e4:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 0;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    10e6:	67 66 ff 45 fc       	incw   -0x4(%di)
    10eb:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    10f1:	7e d1                	jle    10c4 <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    10f3:	66 c9                	leavew 
    10f5:	66 c3                	retw   

000010f7 <sys_schedule>:
int sch_index;
int current_index ;
void sys_schedule(){
    10f7:	66 55                	push   %bp
    10f9:	66 89 e5             	mov    %sp,%bp
    int i,j;
    if(isempty(&readyqueue) != 1){
    10fc:	66 68 c0 68          	pushw  $0x68c0
    1100:	00 00                	add    %al,(%eax)
    1102:	66 e8 8a 08          	callw  1990 <stack_copy+0x35>
    1106:	00 00                	add    %al,(%eax)
    1108:	66 83 c4 04          	add    $0x4,%sp
    110c:	66 83 f8 01          	cmp    $0x1,%ax
    1110:	0f 84 e0 00 66 a1    	je     a16611f6 <_end+0xa165a79a>
        current_index = _CurrentProg - PCB_list;
    1116:	5c                   	pop    %esp
    1117:	37                   	aaa    
    1118:	66 89 c2             	mov    %ax,%dx
    111b:	66 b8 00 32          	mov    $0x3200,%ax
    111f:	00 00                	add    %al,(%eax)
    1121:	66 29 c2             	sub    %ax,%dx
    1124:	66 89 d0             	mov    %dx,%ax
    1127:	66 c1 f8 02          	sar    $0x2,%ax
    112b:	66 89 c2             	mov    %ax,%dx
    112e:	66 89 d0             	mov    %dx,%ax
    1131:	66 01 c0             	add    %ax,%ax
    1134:	66 01 d0             	add    %dx,%ax
    1137:	67 66 8d 14          	lea    (%si),%dx
    113b:	85 00                	test   %eax,(%eax)
    113d:	00 00                	add    %al,(%eax)
    113f:	00 66 01             	add    %ah,0x1(%esi)
    1142:	d0 66 89             	shlb   -0x77(%esi)
    1145:	c2 66 c1             	ret    $0xc166
    1148:	e2 08                	loop   1152 <sys_schedule+0x5b>
    114a:	66 01 d0             	add    %dx,%ax
    114d:	66 89 c2             	mov    %ax,%dx
    1150:	66 c1 e2 10          	shl    $0x10,%dx
    1154:	66 01 d0             	add    %dx,%ax
    1157:	66 f7 d8             	neg    %ax
    115a:	66 a3 60 37 66 a1    	mov    %ax,0xa1663760
        if(_CurrentProg -> prg_status == RUN){
    1160:	5c                   	pop    %esp
    1161:	37                   	aaa    
    1162:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    1167:	66 83 f8 01          	cmp    $0x1,%ax
    116b:	75 23                	jne    1190 <sys_schedule+0x99>
            _CurrentProg -> prg_status = READY;
    116d:	66 a1 5c 37 67 66    	mov    0x6667375c,%ax
    1173:	c7 40 38 03 00 00 00 	movl   $0x3,0x38(%eax)
            enqueue(&readyqueue,current_index);
    117a:	66 a1 60 37 66 50    	mov    0x50663760,%ax
    1180:	66 68 c0 68          	pushw  $0x68c0
    1184:	00 00                	add    %al,(%eax)
    1186:	66 e8 36 08          	callw  19c0 <size+0x11>
    118a:	00 00                	add    %al,(%eax)
    118c:	66 83 c4 08          	add    $0x8,%sp
        }
        dequeue(&readyqueue,&sch_index);
    1190:	66 68 50 37          	pushw  $0x3750
    1194:	00 00                	add    %al,(%eax)
    1196:	66 68 c0 68          	pushw  $0x68c0
    119a:	00 00                	add    %al,(%eax)
    119c:	66 e8 8c 08          	callw  1a2c <enqueue+0x6a>
    11a0:	00 00                	add    %al,(%eax)
    11a2:	66 83 c4 08          	add    $0x8,%sp
        if(PCB_list[sch_index].prg_status == READY){
    11a6:	66 a1 50 37 66 c1    	mov    0xc1663750,%ax
    11ac:	e0 02                	loopne 11b0 <sys_schedule+0xb9>
    11ae:	66 89 c2             	mov    %ax,%dx
    11b1:	66 c1 e2 04          	shl    $0x4,%dx
    11b5:	66 01 d0             	add    %dx,%ax
    11b8:	66 05 30 32          	add    $0x3230,%ax
    11bc:	00 00                	add    %al,(%eax)
    11be:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    11c3:	66 83 f8 03          	cmp    $0x3,%ax
    11c7:	75 2b                	jne    11f4 <sys_schedule+0xfd>
            _CurrentProg = PCB_list + sch_index;
    11c9:	66 a1 50 37 66 c1    	mov    0xc1663750,%ax
    11cf:	e0 02                	loopne 11d3 <sys_schedule+0xdc>
    11d1:	66 89 c2             	mov    %ax,%dx
    11d4:	66 c1 e2 04          	shl    $0x4,%dx
    11d8:	66 01 d0             	add    %dx,%ax
    11db:	66 05 00 32          	add    $0x3200,%ax
    11df:	00 00                	add    %al,(%eax)
    11e1:	66 a3 5c 37 66 a1    	mov    %ax,0xa166375c
            _CurrentProg -> prg_status = RUN;
    11e7:	5c                   	pop    %esp
    11e8:	37                   	aaa    
    11e9:	67 66 c7 40 38 01 00 	movw   $0x1,0x38(%bx,%si)
    11f0:	00 00                	add    %al,(%eax)
            return;
    11f2:	eb 0a                	jmp    11fe <sys_schedule+0x107>
        }
    }
    _CurrentProg = PCB_list ;
    11f4:	66 c7 06 5c 37       	movw   $0x375c,(%esi)
    11f9:	00 32                	add    %dh,(%edx)
    11fb:	00 00                	add    %al,(%eax)
    return;
    11fd:	90                   	nop
    
}
    11fe:	66 c9                	leavew 
    1200:	66 c3                	retw   

00001202 <sys_exit>:
void sys_exit(){
    1202:	66 55                	push   %bp
    1204:	66 89 e5             	mov    %sp,%bp
    1207:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    120b:	fa                   	cli    
    int index = _CurrentProg - PCB_list;
    120c:	66 a1 5c 37 66 89    	mov    0x8966375c,%ax
    1212:	c2 66 b8             	ret    $0xb866
    1215:	00 32                	add    %dh,(%edx)
    1217:	00 00                	add    %al,(%eax)
    1219:	66 29 c2             	sub    %ax,%dx
    121c:	66 89 d0             	mov    %dx,%ax
    121f:	66 c1 f8 02          	sar    $0x2,%ax
    1223:	66 89 c2             	mov    %ax,%dx
    1226:	66 89 d0             	mov    %dx,%ax
    1229:	66 01 c0             	add    %ax,%ax
    122c:	66 01 d0             	add    %dx,%ax
    122f:	67 66 8d 14          	lea    (%si),%dx
    1233:	85 00                	test   %eax,(%eax)
    1235:	00 00                	add    %al,(%eax)
    1237:	00 66 01             	add    %ah,0x1(%esi)
    123a:	d0 66 89             	shlb   -0x77(%esi)
    123d:	c2 66 c1             	ret    $0xc166
    1240:	e2 08                	loop   124a <sys_exit+0x48>
    1242:	66 01 d0             	add    %dx,%ax
    1245:	66 89 c2             	mov    %ax,%dx
    1248:	66 c1 e2 10          	shl    $0x10,%dx
    124c:	66 01 d0             	add    %dx,%ax
    124f:	66 f7 d8             	neg    %ax
    1252:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    rmele(&readyqueue,index);
    1257:	67 66 ff 75 fc       	pushw  -0x4(%di)
    125c:	66 68 c0 68          	pushw  $0x68c0
    1260:	00 00                	add    %al,(%eax)
    1262:	66 e8 6a 08          	callw  1ad0 <init_queue+0x30>
    1266:	00 00                	add    %al,(%eax)
    1268:	66 83 c4 08          	add    $0x8,%sp
    _CurrentProg -> prg_status = EXIT;
    126c:	66 a1 5c 37 67 66    	mov    0x6667375c,%ax
    1272:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    __asm__("sti\n");
    1279:	fb                   	sti    
}
    127a:	66 c9                	leavew 
    127c:	66 c3                	retw   

0000127e <sys_bolocked>:



int queuesize,tmp;//一定要是全局，否则dequeue无法将tmp修改
void sys_bolocked(int index){
    127e:	66 55                	push   %bp
    1280:	66 89 e5             	mov    %sp,%bp
    1283:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    1287:	fa                   	cli    
    PCB_list[index].prg_status = BLOCKED;
    1288:	67 66 8b 45 08       	mov    0x8(%di),%ax
    128d:	66 c1 e0 02          	shl    $0x2,%ax
    1291:	66 89 c2             	mov    %ax,%dx
    1294:	66 c1 e2 04          	shl    $0x4,%dx
    1298:	66 01 d0             	add    %dx,%ax
    129b:	66 05 30 32          	add    $0x3230,%ax
    129f:	00 00                	add    %al,(%eax)
    12a1:	67 66 c7 40 08 02 00 	movw   $0x2,0x8(%bx,%si)
    12a8:	00 00                	add    %al,(%eax)
    enqueue(&blockqueue,index);
    12aa:	67 66 ff 75 08       	pushw  0x8(%di)
    12af:	66 68 60 30          	pushw  $0x3060
    12b3:	00 00                	add    %al,(%eax)
    12b5:	66 e8 07 07          	callw  19c0 <size+0x11>
    12b9:	00 00                	add    %al,(%eax)
    12bb:	66 83 c4 08          	add    $0x8,%sp
    queuesize = size(&readyqueue);
    12bf:	66 68 c0 68          	pushw  $0x68c0
    12c3:	00 00                	add    %al,(%eax)
    12c5:	66 e8 e4 06          	callw  19ad <isempty+0x1b>
    12c9:	00 00                	add    %al,(%eax)
    12cb:	66 83 c4 04          	add    $0x4,%sp
    12cf:	66 a3 44 30 67 66    	mov    %ax,0x66673044
    int i = 0;
    12d5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    12dc:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    12e3:	00 00                	add    %al,(%eax)
    12e5:	eb 3c                	jmp    1323 <sys_bolocked+0xa5>
        dequeue(&readyqueue,&tmp);
    12e7:	66 68 40 30          	pushw  $0x3040
    12eb:	00 00                	add    %al,(%eax)
    12ed:	66 68 c0 68          	pushw  $0x68c0
    12f1:	00 00                	add    %al,(%eax)
    12f3:	66 e8 35 07          	callw  1a2c <enqueue+0x6a>
    12f7:	00 00                	add    %al,(%eax)
    12f9:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    12fd:	66 a1 40 30 67 66    	mov    0x66673040,%ax
    1303:	39 45 08             	cmp    %eax,0x8(%ebp)
    1306:	74 16                	je     131e <sys_bolocked+0xa0>
            enqueue(&readyqueue,tmp);
    1308:	66 a1 40 30 66 50    	mov    0x50663040,%ax
    130e:	66 68 c0 68          	pushw  $0x68c0
    1312:	00 00                	add    %al,(%eax)
    1314:	66 e8 a8 06          	callw  19c0 <size+0x11>
    1318:	00 00                	add    %al,(%eax)
    131a:	66 83 c4 08          	add    $0x8,%sp
    __asm__("cli\n");
    PCB_list[index].prg_status = BLOCKED;
    enqueue(&blockqueue,index);
    queuesize = size(&readyqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    131e:	67 66 ff 45 fc       	incw   -0x4(%di)
    1323:	66 a1 44 30 67 66    	mov    0x66673044,%ax
    1329:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    132c:	7c b9                	jl     12e7 <sys_bolocked+0x69>
        dequeue(&readyqueue,&tmp);
        if(index != tmp){
            enqueue(&readyqueue,tmp);
        }
    }
    __asm__("sti\n");
    132e:	fb                   	sti    
}
    132f:	66 c9                	leavew 
    1331:	66 c3                	retw   

00001333 <sys_wakeup>:
void sys_wakeup(int index){
    1333:	66 55                	push   %bp
    1335:	66 89 e5             	mov    %sp,%bp
    1338:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    133c:	fa                   	cli    
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    133d:	66 68 60 30          	pushw  $0x3060
    1341:	00 00                	add    %al,(%eax)
    1343:	66 e8 66 06          	callw  19ad <isempty+0x1b>
    1347:	00 00                	add    %al,(%eax)
    1349:	66 83 c4 04          	add    $0x4,%sp
    134d:	66 a3 44 30 67 66    	mov    %ax,0x66673044
    int i = 0;
    1353:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    135a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1361:	00 00                	add    %al,(%eax)
    1363:	eb 3c                	jmp    13a1 <sys_wakeup+0x6e>
        dequeue(&blockqueue,&tmp);
    1365:	66 68 40 30          	pushw  $0x3040
    1369:	00 00                	add    %al,(%eax)
    136b:	66 68 60 30          	pushw  $0x3060
    136f:	00 00                	add    %al,(%eax)
    1371:	66 e8 b7 06          	callw  1a2c <enqueue+0x6a>
    1375:	00 00                	add    %al,(%eax)
    1377:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    137b:	66 a1 40 30 67 66    	mov    0x66673040,%ax
    1381:	39 45 08             	cmp    %eax,0x8(%ebp)
    1384:	74 16                	je     139c <sys_wakeup+0x69>
            enqueue(&blockqueue,tmp);
    1386:	66 a1 40 30 66 50    	mov    0x50663040,%ax
    138c:	66 68 60 30          	pushw  $0x3060
    1390:	00 00                	add    %al,(%eax)
    1392:	66 e8 2a 06          	callw  19c0 <size+0x11>
    1396:	00 00                	add    %al,(%eax)
    1398:	66 83 c4 08          	add    $0x8,%sp
void sys_wakeup(int index){
    __asm__("cli\n");
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    139c:	67 66 ff 45 fc       	incw   -0x4(%di)
    13a1:	66 a1 44 30 67 66    	mov    0x66673044,%ax
    13a7:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    13aa:	7c b9                	jl     1365 <sys_wakeup+0x32>
        dequeue(&blockqueue,&tmp);
        if(index != tmp){
            enqueue(&blockqueue,tmp);
        }
    }
    PCB_list[index].prg_status = READY;
    13ac:	67 66 8b 45 08       	mov    0x8(%di),%ax
    13b1:	66 c1 e0 02          	shl    $0x2,%ax
    13b5:	66 89 c2             	mov    %ax,%dx
    13b8:	66 c1 e2 04          	shl    $0x4,%dx
    13bc:	66 01 d0             	add    %dx,%ax
    13bf:	66 05 30 32          	add    $0x3230,%ax
    13c3:	00 00                	add    %al,(%eax)
    13c5:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    13cc:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    13ce:	67 66 ff 75 08       	pushw  0x8(%di)
    13d3:	66 68 c0 68          	pushw  $0x68c0
    13d7:	00 00                	add    %al,(%eax)
    13d9:	66 e8 e3 05          	callw  19c0 <size+0x11>
    13dd:	00 00                	add    %al,(%eax)
    13df:	66 83 c4 08          	add    $0x8,%sp
    __asm__("sti\n");
    13e3:	fb                   	sti    
}
    13e4:	66 c9                	leavew 
    13e6:	66 c3                	retw   

000013e8 <sys_run>:
void sys_run(){
    13e8:	66 55                	push   %bp
    13ea:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    13ed:	66 a1 5c 37 67 66    	mov    0x6667375c,%ax
    13f3:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    13fa:	66 5d                	pop    %bp
    13fc:	66 c3                	retw   

000013fe <do_fork>:

int do_fork(){
    13fe:	66 55                	push   %bp
    1400:	66 89 e5             	mov    %sp,%bp
    1403:	66 83 ec 08          	sub    $0x8,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    1407:	67 66 c7 45 fc 44 32 	movw   $0x3244,-0x4(%di)
    140e:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN )    fork_prg = fork_prg + 1;//应该增加used位，防止被覆盖
    1410:	eb 06                	jmp    1418 <do_fork+0x1a>
    1412:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    1418:	67 66 81 7d fc 50 37 	cmpw   $0x3750,-0x4(%di)
    141f:	00 00                	add    %al,(%eax)
    1421:	73 10                	jae    1433 <do_fork+0x35>
    1423:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1428:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    142d:	66 83 f8 01          	cmp    $0x1,%ax
    1431:	74 df                	je     1412 <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    1433:	67 66 81 7d fc 0c 37 	cmpw   $0x370c,-0x4(%di)
    143a:	00 00                	add    %al,(%eax)
    143c:	76 0f                	jbe    144d <do_fork+0x4f>
    143e:	66 a1 5c 37 67 66    	mov    0x6667375c,%ax
    1444:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    144a:	e9 42 02 66 e8       	jmp    e8661691 <_end+0xe865ac35>
    else{
        _Schedule_once();
    144f:	12 ee                	adc    %dh,%ch
    1451:	ff                   	(bad)  
    1452:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    1455:	ec                   	in     (%dx),%al
    1456:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    1457:	66 a1 5c 37 67 66    	mov    0x6667375c,%ax
    145d:	ff 75 fc             	pushl  -0x4(%ebp)
    1460:	66 50                	push   %ax
    1462:	66 e8 e8 03          	callw  184e <counter+0x64>
    1466:	00 00                	add    %al,(%eax)
    1468:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    146c:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    1470:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1475:	66 b8 00 32          	mov    $0x3200,%ax
    1479:	00 00                	add    %al,(%eax)
    147b:	66 29 c2             	sub    %ax,%dx
    147e:	66 89 d0             	mov    %dx,%ax
    1481:	66 c1 f8 02          	sar    $0x2,%ax
    1485:	66 89 c2             	mov    %ax,%dx
    1488:	66 89 d0             	mov    %dx,%ax
    148b:	66 01 c0             	add    %ax,%ax
    148e:	66 01 d0             	add    %dx,%ax
    1491:	67 66 8d 14          	lea    (%si),%dx
    1495:	85 00                	test   %eax,(%eax)
    1497:	00 00                	add    %al,(%eax)
    1499:	00 66 01             	add    %ah,0x1(%esi)
    149c:	d0 66 89             	shlb   -0x77(%esi)
    149f:	c2 66 c1             	ret    $0xc166
    14a2:	e2 08                	loop   14ac <do_fork+0xae>
    14a4:	66 01 d0             	add    %dx,%ax
    14a7:	66 89 c2             	mov    %ax,%dx
    14aa:	66 c1 e2 10          	shl    $0x10,%dx
    14ae:	66 01 d0             	add    %dx,%ax
    14b1:	66 f7 d8             	neg    %ax
    14b4:	66 89 c2             	mov    %ax,%dx
    14b7:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    14bc:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    14c1:	66 a1 5c 37 66 89    	mov    0x8966375c,%ax
    14c7:	c2 66 b8             	ret    $0xb866
    14ca:	00 32                	add    %dh,(%edx)
    14cc:	00 00                	add    %al,(%eax)
    14ce:	66 29 c2             	sub    %ax,%dx
    14d1:	66 89 d0             	mov    %dx,%ax
    14d4:	66 c1 f8 02          	sar    $0x2,%ax
    14d8:	66 89 c2             	mov    %ax,%dx
    14db:	66 89 d0             	mov    %dx,%ax
    14de:	66 01 c0             	add    %ax,%ax
    14e1:	66 01 d0             	add    %dx,%ax
    14e4:	67 66 8d 14          	lea    (%si),%dx
    14e8:	85 00                	test   %eax,(%eax)
    14ea:	00 00                	add    %al,(%eax)
    14ec:	00 66 01             	add    %ah,0x1(%esi)
    14ef:	d0 66 89             	shlb   -0x77(%esi)
    14f2:	c2 66 c1             	ret    $0xc166
    14f5:	e2 08                	loop   14ff <do_fork+0x101>
    14f7:	66 01 d0             	add    %dx,%ax
    14fa:	66 89 c2             	mov    %ax,%dx
    14fd:	66 c1 e2 10          	shl    $0x10,%dx
    1501:	66 01 d0             	add    %dx,%ax
    1504:	66 f7 d8             	neg    %ax
    1507:	66 89 c2             	mov    %ax,%dx
    150a:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    150f:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    1514:	66 a1 5c 37 67 66    	mov    0x6667375c,%ax
    151a:	8b 50 20             	mov    0x20(%eax),%edx
    151d:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1522:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    1527:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    152c:	66 b8 00 32          	mov    $0x3200,%ax
    1530:	00 00                	add    %al,(%eax)
    1532:	66 29 c2             	sub    %ax,%dx
    1535:	66 89 d0             	mov    %dx,%ax
    1538:	66 c1 f8 02          	sar    $0x2,%ax
    153c:	66 89 c2             	mov    %ax,%dx
    153f:	66 89 d0             	mov    %dx,%ax
    1542:	66 01 c0             	add    %ax,%ax
    1545:	66 01 d0             	add    %dx,%ax
    1548:	67 66 8d 14          	lea    (%si),%dx
    154c:	85 00                	test   %eax,(%eax)
    154e:	00 00                	add    %al,(%eax)
    1550:	00 66 01             	add    %ah,0x1(%esi)
    1553:	d0 66 89             	shlb   -0x77(%esi)
    1556:	c2 66 c1             	ret    $0xc166
    1559:	e2 08                	loop   1563 <do_fork+0x165>
    155b:	66 01 d0             	add    %dx,%ax
    155e:	66 89 c2             	mov    %ax,%dx
    1561:	66 c1 e2 10          	shl    $0x10,%dx
    1565:	66 01 d0             	add    %dx,%ax
    1568:	66 f7 d8             	neg    %ax
    156b:	66 83 c0 02          	add    $0x2,%ax
    156f:	66 c1 e0 0c          	shl    $0xc,%ax
    1573:	66 89 c2             	mov    %ax,%dx
    1576:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    157b:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    1580:	66 a1 5c 37 67 66    	mov    0x6667375c,%ax
    1586:	8b 50 30             	mov    0x30(%eax),%edx
    1589:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    158e:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    1593:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1598:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    159f:	00 00                	add    %al,(%eax)
        
        int index = fork_prg - PCB_list;
    15a1:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    15a6:	66 b8 00 32          	mov    $0x3200,%ax
    15aa:	00 00                	add    %al,(%eax)
    15ac:	66 29 c2             	sub    %ax,%dx
    15af:	66 89 d0             	mov    %dx,%ax
    15b2:	66 c1 f8 02          	sar    $0x2,%ax
    15b6:	66 89 c2             	mov    %ax,%dx
    15b9:	66 89 d0             	mov    %dx,%ax
    15bc:	66 01 c0             	add    %ax,%ax
    15bf:	66 01 d0             	add    %dx,%ax
    15c2:	67 66 8d 14          	lea    (%si),%dx
    15c6:	85 00                	test   %eax,(%eax)
    15c8:	00 00                	add    %al,(%eax)
    15ca:	00 66 01             	add    %ah,0x1(%esi)
    15cd:	d0 66 89             	shlb   -0x77(%esi)
    15d0:	c2 66 c1             	ret    $0xc166
    15d3:	e2 08                	loop   15dd <do_fork+0x1df>
    15d5:	66 01 d0             	add    %dx,%ax
    15d8:	66 89 c2             	mov    %ax,%dx
    15db:	66 c1 e2 10          	shl    $0x10,%dx
    15df:	66 01 d0             	add    %dx,%ax
    15e2:	66 f7 d8             	neg    %ax
    15e5:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
        __asm__("sub $6,%esp");
    15ea:	66 83 ec 06          	sub    $0x6,%sp
        enqueue(&readyqueue,index); 
    15ee:	67 66 ff 75 f8       	pushw  -0x8(%di)
    15f3:	66 68 c0 68          	pushw  $0x68c0
    15f7:	00 00                	add    %al,(%eax)
    15f9:	66 e8 c3 03          	callw  19c0 <size+0x11>
    15fd:	00 00                	add    %al,(%eax)
    15ff:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    1603:	66 83 c4 06          	add    $0x6,%sp
        _Schedule_once();
    1607:	66 e8 58 ec          	callw  263 <S+0x14>
    160b:	ff                   	(bad)  
    160c:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    160f:	ec                   	in     (%dx),%al
    1610:	06                   	push   %es
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    1611:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1616:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    161b:	66 a1 5c 37 67 66    	mov    0x6667375c,%ax
    1621:	8b 50 28             	mov    0x28(%eax),%edx
    1624:	66 a1 5c 37 67 66    	mov    0x6667375c,%ax
    162a:	8b 40 24             	mov    0x24(%eax),%eax
    162d:	66 51                	push   %cx
    162f:	66 52                	push   %dx
    1631:	66 50                	push   %ax
    1633:	66 e8 1c eb          	callw  153 <Message31+0x4>
    1637:	ff                   	(bad)  
    1638:	ff 66 83             	jmp    *-0x7d(%esi)
    163b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
        __asm__("add $6,%esp");
    163e:	83 c4 06             	add    $0x6,%esp
        fork_prg -> ip = _CurrentProg -> ip;
    1641:	66 a1 5c 37 67 66    	mov    0x6667375c,%ax
    1647:	8b 50 2c             	mov    0x2c(%eax),%edx
    164a:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    164f:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    1654:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1659:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    165f:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    1661:	66 a1 5c 37 67 66    	mov    0x6667375c,%ax
    1667:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    166a:	75 08                	jne    1674 <do_fork+0x276>
            return 0;
    166c:	66 b8 00 00          	mov    $0x0,%ax
    1670:	00 00                	add    %al,(%eax)
    1672:	eb 1b                	jmp    168f <do_fork+0x291>
        }
        _CurrentProg -> eax = _CurrentProg -> id;
    1674:	66 a1 5c 37 66 8b    	mov    0x8b66375c,%ax
    167a:	16                   	push   %ss
    167b:	5c                   	pop    %esp
    167c:	37                   	aaa    
    167d:	67 66 8b 52 3c       	mov    0x3c(%bp,%si),%dx
    1682:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    1686:	66 a1 5c 37 67 66    	mov    0x6667375c,%ax
    168c:	8b 00                	mov    (%eax),%eax
    168e:	90                   	nop
    }
}
    168f:	66 c9                	leavew 
    1691:	66 c3                	retw   

00001693 <sys_exit_fork>:
void sys_exit_fork(char ch){
    1693:	66 55                	push   %bp
    1695:	66 89 e5             	mov    %sp,%bp
    1698:	66 83 ec 0c          	sub    $0xc,%sp
    169c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16a1:	67 88 45 f4          	mov    %al,-0xc(%di)
    int current_id = _CurrentProg - PCB_list;
    16a5:	66 a1 5c 37 66 89    	mov    0x8966375c,%ax
    16ab:	c2 66 b8             	ret    $0xb866
    16ae:	00 32                	add    %dh,(%edx)
    16b0:	00 00                	add    %al,(%eax)
    16b2:	66 29 c2             	sub    %ax,%dx
    16b5:	66 89 d0             	mov    %dx,%ax
    16b8:	66 c1 f8 02          	sar    $0x2,%ax
    16bc:	66 89 c2             	mov    %ax,%dx
    16bf:	66 89 d0             	mov    %dx,%ax
    16c2:	66 01 c0             	add    %ax,%ax
    16c5:	66 01 d0             	add    %dx,%ax
    16c8:	67 66 8d 14          	lea    (%si),%dx
    16cc:	85 00                	test   %eax,(%eax)
    16ce:	00 00                	add    %al,(%eax)
    16d0:	00 66 01             	add    %ah,0x1(%esi)
    16d3:	d0 66 89             	shlb   -0x77(%esi)
    16d6:	c2 66 c1             	ret    $0xc166
    16d9:	e2 08                	loop   16e3 <sys_exit_fork+0x50>
    16db:	66 01 d0             	add    %dx,%ax
    16de:	66 89 c2             	mov    %ax,%dx
    16e1:	66 c1 e2 10          	shl    $0x10,%dx
    16e5:	66 01 d0             	add    %dx,%ax
    16e8:	66 f7 d8             	neg    %ax
    16eb:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    int index = _CurrentProg -> fid;
    16f0:	66 a1 5c 37 67 66    	mov    0x6667375c,%ax
    16f6:	8b 40 40             	mov    0x40(%eax),%eax
    16f9:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    sys_wakeup(index);
    16fe:	67 66 ff 75 f8       	pushw  -0x8(%di)
    1703:	66 e8 2a fc          	callw  1331 <sys_bolocked+0xb3>
    1707:	ff                   	(bad)  
    1708:	ff 66 83             	jmp    *-0x7d(%esi)
    170b:	c4 04 66             	les    (%esi,%eiz,2),%eax
    PCB_list[_CurrentProg -> fid].eax = ch;
    170e:	a1 5c 37 67 66       	mov    0x6667375c,%eax
    1713:	8b 40 40             	mov    0x40(%eax),%eax
    1716:	67 66 0f be 55 f4    	movsbw -0xc(%di),%dx
    171c:	66 c1 e0 02          	shl    $0x2,%ax
    1720:	66 89 c1             	mov    %ax,%cx
    1723:	66 c1 e1 04          	shl    $0x4,%cx
    1727:	66 01 c8             	add    %cx,%ax
    172a:	66 05 00 32          	add    $0x3200,%ax
    172e:	00 00                	add    %al,(%eax)
    1730:	67 66 89 10          	mov    %dx,(%bx,%si)
    _CurrentProg -> prg_status = EXIT;
    1734:	66 a1 5c 37 67 66    	mov    0x6667375c,%ax
    173a:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    rmele(&readyqueue,current_id);
    1741:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1746:	66 68 c0 68          	pushw  $0x68c0
    174a:	00 00                	add    %al,(%eax)
    174c:	66 e8 80 03          	callw  1ad0 <init_queue+0x30>
    1750:	00 00                	add    %al,(%eax)
    1752:	66 83 c4 08          	add    $0x8,%sp
    _Schedule();
    1756:	66 e8 1f eb          	callw  279 <_fork_user+0x9>
    175a:	ff                   	(bad)  
    175b:	ff 66 c9             	jmp    *-0x37(%esi)
}
    175e:	66 c3                	retw   

00001760 <sys_wait>:
int sys_wait(){
    1760:	66 55                	push   %bp
    1762:	66 89 e5             	mov    %sp,%bp
    1765:	66 83 ec 04          	sub    $0x4,%sp
    int index = _CurrentProg - PCB_list;
    1769:	66 a1 5c 37 66 89    	mov    0x8966375c,%ax
    176f:	c2 66 b8             	ret    $0xb866
    1772:	00 32                	add    %dh,(%edx)
    1774:	00 00                	add    %al,(%eax)
    1776:	66 29 c2             	sub    %ax,%dx
    1779:	66 89 d0             	mov    %dx,%ax
    177c:	66 c1 f8 02          	sar    $0x2,%ax
    1780:	66 89 c2             	mov    %ax,%dx
    1783:	66 89 d0             	mov    %dx,%ax
    1786:	66 01 c0             	add    %ax,%ax
    1789:	66 01 d0             	add    %dx,%ax
    178c:	67 66 8d 14          	lea    (%si),%dx
    1790:	85 00                	test   %eax,(%eax)
    1792:	00 00                	add    %al,(%eax)
    1794:	00 66 01             	add    %ah,0x1(%esi)
    1797:	d0 66 89             	shlb   -0x77(%esi)
    179a:	c2 66 c1             	ret    $0xc166
    179d:	e2 08                	loop   17a7 <sys_wait+0x47>
    179f:	66 01 d0             	add    %dx,%ax
    17a2:	66 89 c2             	mov    %ax,%dx
    17a5:	66 c1 e2 10          	shl    $0x10,%dx
    17a9:	66 01 d0             	add    %dx,%ax
    17ac:	66 f7 d8             	neg    %ax
    17af:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_bolocked(index);
    17b4:	67 66 ff 75 fc       	pushw  -0x4(%di)
    17b9:	66 e8 bf fa          	callw  127c <sys_exit+0x7a>
    17bd:	ff                   	(bad)  
    17be:	ff 66 83             	jmp    *-0x7d(%esi)
    17c1:	c4 04 66             	les    (%esi,%eiz,2),%eax
    _Schedule();
    17c4:	e8 b2 ea ff ff       	call   27b <_Schedule>
    return _CurrentProg -> eax;
    17c9:	66 a1 5c 37 67 66    	mov    0x6667375c,%ax
    17cf:	8b 00                	mov    (%eax),%eax
}
    17d1:	66 c9                	leavew 
    17d3:	66 c3                	retw   

000017d5 <thread_join>:
void thread_join(){
    17d5:	66 55                	push   %bp
    17d7:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    17da:	90                   	nop
    17db:	66 e8 09 00          	callw  17e8 <thread_join+0x13>
    17df:	00 00                	add    %al,(%eax)
    17e1:	66 85 c0             	test   %ax,%ax
    17e4:	75 f5                	jne    17db <thread_join+0x6>
    }
}
    17e6:	66 5d                	pop    %bp
    17e8:	66 c3                	retw   

000017ea <counter>:
int counter(){
    17ea:	66 55                	push   %bp
    17ec:	66 89 e5             	mov    %sp,%bp
    17ef:	66 83 ec 08          	sub    $0x8,%sp
    __asm__("cli\n");
    17f3:	fa                   	cli    
    int i = 0;
    17f4:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    17fb:	00 00                	add    %al,(%eax)
    int count = 0;
    17fd:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    1804:	00 00                	add    %al,(%eax)
    for(i = 1;i < PCB_NUMMER;i ++){
    1806:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    180d:	00 00                	add    %al,(%eax)
    180f:	eb 2d                	jmp    183e <counter+0x54>
        if(PCB_list[i].prg_status != EXIT){
    1811:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1816:	66 c1 e0 02          	shl    $0x2,%ax
    181a:	66 89 c2             	mov    %ax,%dx
    181d:	66 c1 e2 04          	shl    $0x4,%dx
    1821:	66 01 d0             	add    %dx,%ax
    1824:	66 05 30 32          	add    $0x3230,%ax
    1828:	00 00                	add    %al,(%eax)
    182a:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    182f:	66 85 c0             	test   %ax,%ax
    1832:	74 05                	je     1839 <counter+0x4f>
            count ++;
    1834:	67 66 ff 45 f8       	incw   -0x8(%di)
}
int counter(){
    __asm__("cli\n");
    int i = 0;
    int count = 0;
    for(i = 1;i < PCB_NUMMER;i ++){
    1839:	67 66 ff 45 fc       	incw   -0x4(%di)
    183e:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    1844:	7e cb                	jle    1811 <counter+0x27>
        if(PCB_list[i].prg_status != EXIT){
            count ++;
        }
    }
    __asm__("sti\n");
    1846:	fb                   	sti    
    return count;
    1847:	67 66 8b 45 f8       	mov    -0x8(%di),%ax

}
    184c:	66 c9                	leavew 
    184e:	66 c3                	retw   

00001850 <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    1850:	66 55                	push   %bp
    1852:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    1855:	67 66 8b 45 08       	mov    0x8(%di),%ax
    185a:	67 66 8b 10          	mov    (%bx,%si),%dx
    185e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1863:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    1867:	67 66 8b 45 08       	mov    0x8(%di),%ax
    186c:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    1871:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1876:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    187b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1880:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    1885:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    188a:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    188f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1894:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    1899:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    189e:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    18a3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    18a8:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    18ad:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    18b2:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    18b7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    18bc:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    18c1:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    18c6:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    18cb:	67 66 8b 45 08       	mov    0x8(%di),%ax
    18d0:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    18d5:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    18da:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    18df:	67 66 8b 45 08       	mov    0x8(%di),%ax
    18e4:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    18e9:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    18ee:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    18f3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    18f8:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    18fd:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1902:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    1907:	67 66 8b 45 08       	mov    0x8(%di),%ax
    190c:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    1911:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1916:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    191b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1920:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    1925:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    192a:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    192f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1934:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    1939:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    193e:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    1943:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1948:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    194d:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1952:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    1957:	66 5d                	pop    %bp
    1959:	66 c3                	retw   

0000195b <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    195b:	66 55                	push   %bp
    195d:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    1960:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1965:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    196a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    196f:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    1974:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1979:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    197e:	66 51                	push   %cx
    1980:	66 52                	push   %dx
    1982:	66 50                	push   %ax
    1984:	66 e8 cb e7          	callw  153 <Message31+0x4>
    1988:	ff                   	(bad)  
    1989:	ff 66 83             	jmp    *-0x7d(%esi)
    198c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    198f:	c9                   	leave  
    1990:	66 c3                	retw   

00001992 <isempty>:
int isempty(struct Queue *queue){
    1992:	66 55                	push   %bp
    1994:	66 89 e5             	mov    %sp,%bp
    
    return (queue -> size == 0);
    1997:	67 66 8b 45 08       	mov    0x8(%di),%ax
    199c:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    19a1:	66 85 c0             	test   %ax,%ax
    19a4:	0f 94 c0             	sete   %al
    19a7:	66 0f b6 c0          	movzbw %al,%ax

}
    19ab:	66 5d                	pop    %bp
    19ad:	66 c3                	retw   

000019af <size>:
int size(struct Queue *queue){
    19af:	66 55                	push   %bp
    19b1:	66 89 e5             	mov    %sp,%bp
    return queue -> size ;
    19b4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19b9:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
}
    19be:	66 5d                	pop    %bp
    19c0:	66 c3                	retw   

000019c2 <enqueue>:
void enqueue(struct Queue *queue,int data){
    19c2:	66 55                	push   %bp
    19c4:	66 89 e5             	mov    %sp,%bp

    if(queue -> size >= MAX){
    19c7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19cc:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    19d1:	66 83 f8 63          	cmp    $0x63,%ax
    19d5:	7e 02                	jle    19d9 <enqueue+0x17>
        return;
    19d7:	eb 51                	jmp    1a2a <enqueue+0x68>
    }
    queue -> size ++;
    19d9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19de:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    19e3:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    19e8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19ed:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    queue -> tail = (queue -> tail + 1) % MAX;
    19f2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19f7:	67 66 8b 00          	mov    (%bx,%si),%ax
    19fb:	66 40                	inc    %ax
    19fd:	66 b9 64 00          	mov    $0x64,%cx
    1a01:	00 00                	add    %al,(%eax)
    1a03:	66 99                	cwtd   
    1a05:	66 f7 f9             	idiv   %cx
    1a08:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a0d:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> array[queue -> tail] = data;
    1a11:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a16:	67 66 8b 10          	mov    (%bx,%si),%dx
    1a1a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a1f:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    1a24:	67 66 89 4c 90       	mov    %cx,-0x70(%si)
    1a29:	0c 66                	or     $0x66,%al

}
    1a2b:	5d                   	pop    %ebp
    1a2c:	66 c3                	retw   

00001a2e <dequeue>:
void dequeue(struct Queue *queue,int * data){
    1a2e:	66 55                	push   %bp
    1a30:	66 89 e5             	mov    %sp,%bp

    if(queue -> size <= 0){
    1a33:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a38:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1a3d:	66 85 c0             	test   %ax,%ax
    1a40:	7f 02                	jg     1a44 <dequeue+0x16>
        return;
    1a42:	eb 58                	jmp    1a9c <dequeue+0x6e>
    }
    queue -> size --;
    1a44:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a49:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1a4e:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    1a53:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a58:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    *data = queue -> array[queue -> head];
    1a5d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a62:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    1a67:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a6c:	67 66 8b 54 90       	mov    -0x70(%si),%dx
    1a71:	0c 67                	or     $0x67,%al
    1a73:	66 8b 45 0c          	mov    0xc(%ebp),%ax
    1a77:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> head = (queue -> head + 1) % MAX;
    1a7b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a80:	67 66 8b 40 04       	mov    0x4(%bx,%si),%ax
    1a85:	66 40                	inc    %ax
    1a87:	66 b9 64 00          	mov    $0x64,%cx
    1a8b:	00 00                	add    %al,(%eax)
    1a8d:	66 99                	cwtd   
    1a8f:	66 f7 f9             	idiv   %cx
    1a92:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1a97:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)

}
    1a9c:	66 5d                	pop    %bp
    1a9e:	66 c3                	retw   

00001aa0 <init_queue>:
void init_queue(struct Queue *queue){
    1aa0:	66 55                	push   %bp
    1aa2:	66 89 e5             	mov    %sp,%bp
    queue -> size = 0;
    1aa5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1aaa:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    1ab1:	00 00                	add    %al,(%eax)
    queue -> tail = -1;
    1ab3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ab8:	67 66 c7 00 ff ff    	movw   $0xffff,(%bx,%si)
    1abe:	ff                   	(bad)  
    1abf:	ff 67 66             	jmp    *0x66(%edi)
    queue -> head = 0;
    1ac2:	8b 45 08             	mov    0x8(%ebp),%eax
    1ac5:	67 66 c7 40 04 00 00 	movw   $0x0,0x4(%bx,%si)
    1acc:	00 00                	add    %al,(%eax)
}
    1ace:	66 5d                	pop    %bp
    1ad0:	66 c3                	retw   

00001ad2 <rmele>:
int rm_tmp;
int ii;
void rmele(struct Queue *queue,int data){
    1ad2:	66 55                	push   %bp
    1ad4:	66 89 e5             	mov    %sp,%bp
    1ad7:	66 83 ec 04          	sub    $0x4,%sp
    int size_of_rmqueue= size(queue);
    1adb:	67 66 ff 75 08       	pushw  0x8(%di)
    1ae0:	66 e8 c9 fe          	callw  19ad <isempty+0x1b>
    1ae4:	ff                   	(bad)  
    1ae5:	ff 66 83             	jmp    *-0x7d(%esi)
    1ae8:	c4 04 67             	les    (%edi,%eiz,2),%eax
    1aeb:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    1aef:	66 c7 06 58 37       	movw   $0x3758,(%esi)
    1af4:	00 00                	add    %al,(%eax)
    1af6:	00 00                	add    %al,(%eax)
    1af8:	eb 3f                	jmp    1b39 <rmele+0x67>
        dequeue(queue,&rm_tmp);
    1afa:	66 68 b8 68          	pushw  $0x68b8
    1afe:	00 00                	add    %al,(%eax)
    1b00:	67 66 ff 75 08       	pushw  0x8(%di)
    1b05:	66 e8 23 ff          	callw  1a2c <enqueue+0x6a>
    1b09:	ff                   	(bad)  
    1b0a:	ff 66 83             	jmp    *-0x7d(%esi)
    1b0d:	c4 08                	les    (%eax),%ecx
        if(rm_tmp != data){
    1b0f:	66 a1 b8 68 67 66    	mov    0x666768b8,%ax
    1b15:	3b 45 0c             	cmp    0xc(%ebp),%eax
    1b18:	74 15                	je     1b2f <rmele+0x5d>
            enqueue(queue,rm_tmp);
    1b1a:	66 a1 b8 68 66 50    	mov    0x506668b8,%ax
    1b20:	67 66 ff 75 08       	pushw  0x8(%di)
    1b25:	66 e8 97 fe          	callw  19c0 <size+0x11>
    1b29:	ff                   	(bad)  
    1b2a:	ff 66 83             	jmp    *-0x7d(%esi)
    1b2d:	c4 08                	les    (%eax),%ecx
}
int rm_tmp;
int ii;
void rmele(struct Queue *queue,int data){
    int size_of_rmqueue= size(queue);
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    1b2f:	66 a1 58 37 66 40    	mov    0x40663758,%ax
    1b35:	66 a3 58 37 66 a1    	mov    %ax,0xa1663758
    1b3b:	58                   	pop    %eax
    1b3c:	37                   	aaa    
    1b3d:	67 66 3b 45 fc       	cmp    -0x4(%di),%ax
    1b42:	7c b6                	jl     1afa <rmele+0x28>
        dequeue(queue,&rm_tmp);
        if(rm_tmp != data){
            enqueue(queue,rm_tmp);
        }
    }
}
    1b44:	66 c9                	leavew 
    1b46:	66 c3                	retw   

00001b48 <init_Semlist>:
void init_Semlist(){
    1b48:	66 55                	push   %bp
    1b4a:	66 89 e5             	mov    %sp,%bp
    1b4d:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    1b51:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1b58:	00 00                	add    %al,(%eax)
    for(i = 0;i < SemMax;i ++){
    1b5a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1b61:	00 00                	add    %al,(%eax)
    1b63:	eb 69                	jmp    1bce <init_Semlist+0x86>
        SEM_list[i].used = 0;
    1b65:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1b6a:	66 89 d0             	mov    %dx,%ax
    1b6d:	66 01 c0             	add    %ax,%ax
    1b70:	66 01 d0             	add    %dx,%ax
    1b73:	66 c1 e0 02          	shl    $0x2,%ax
    1b77:	66 01 d0             	add    %dx,%ax
    1b7a:	66 c1 e0 03          	shl    $0x3,%ax
    1b7e:	66 01 d0             	add    %dx,%ax
    1b81:	66 c1 e0 02          	shl    $0x2,%ax
    1b85:	66 05 20 39          	add    $0x3920,%ax
    1b89:	00 00                	add    %al,(%eax)
    1b8b:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1b91:	00 00                	add    %al,(%eax)
        init_queue(&SEM_list[i].semaque);
    1b93:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1b98:	66 89 d0             	mov    %dx,%ax
    1b9b:	66 01 c0             	add    %ax,%ax
    1b9e:	66 01 d0             	add    %dx,%ax
    1ba1:	66 c1 e0 02          	shl    $0x2,%ax
    1ba5:	66 01 d0             	add    %dx,%ax
    1ba8:	66 c1 e0 03          	shl    $0x3,%ax
    1bac:	66 01 d0             	add    %dx,%ax
    1baf:	66 c1 e0 02          	shl    $0x2,%ax
    1bb3:	66 05 80 37          	add    $0x3780,%ax
    1bb7:	00 00                	add    %al,(%eax)
    1bb9:	66 83 c0 04          	add    $0x4,%ax
    1bbd:	66 50                	push   %ax
    1bbf:	66 e8 db fe          	callw  1a9e <dequeue+0x70>
    1bc3:	ff                   	(bad)  
    1bc4:	ff 66 83             	jmp    *-0x7d(%esi)
    1bc7:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
    }
}
void init_Semlist(){
    int i = 0;
    for(i = 0;i < SemMax;i ++){
    1bca:	66 ff 45 fc          	incw   -0x4(%ebp)
    1bce:	67 66 83 7d fc 1d    	cmpw   $0x1d,-0x4(%di)
    1bd4:	7e 8f                	jle    1b65 <init_Semlist+0x1d>
        SEM_list[i].used = 0;
        init_queue(&SEM_list[i].semaque);
    }
}
    1bd6:	66 c9                	leavew 
    1bd8:	66 c3                	retw   

00001bda <do_SemGet>:
int do_SemGet(int value){
    1bda:	66 55                	push   %bp
    1bdc:	66 89 e5             	mov    %sp,%bp
    1bdf:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    1be3:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1bea:	00 00                	add    %al,(%eax)
    while(SEM_list[i].used == 1){
    1bec:	eb 05                	jmp    1bf3 <do_SemGet+0x19>
        i ++;
    1bee:	67 66 ff 45 fc       	incw   -0x4(%di)
        init_queue(&SEM_list[i].semaque);
    }
}
int do_SemGet(int value){
    int i = 0;
    while(SEM_list[i].used == 1){
    1bf3:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1bf8:	66 89 d0             	mov    %dx,%ax
    1bfb:	66 01 c0             	add    %ax,%ax
    1bfe:	66 01 d0             	add    %dx,%ax
    1c01:	66 c1 e0 02          	shl    $0x2,%ax
    1c05:	66 01 d0             	add    %dx,%ax
    1c08:	66 c1 e0 03          	shl    $0x3,%ax
    1c0c:	66 01 d0             	add    %dx,%ax
    1c0f:	66 c1 e0 02          	shl    $0x2,%ax
    1c13:	66 05 20 39          	add    $0x3920,%ax
    1c17:	00 00                	add    %al,(%eax)
    1c19:	67 66 8b 00          	mov    (%bx,%si),%ax
    1c1d:	66 83 f8 01          	cmp    $0x1,%ax
    1c21:	74 cb                	je     1bee <do_SemGet+0x14>
        i ++;
    }
    if(i < SemMax){
    1c23:	67 66 83 7d fc 1d    	cmpw   $0x1d,-0x4(%di)
    1c29:	7f 66                	jg     1c91 <do_SemGet+0xb7>
        SEM_list[i].used = 1;
    1c2b:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1c30:	66 89 d0             	mov    %dx,%ax
    1c33:	66 01 c0             	add    %ax,%ax
    1c36:	66 01 d0             	add    %dx,%ax
    1c39:	66 c1 e0 02          	shl    $0x2,%ax
    1c3d:	66 01 d0             	add    %dx,%ax
    1c40:	66 c1 e0 03          	shl    $0x3,%ax
    1c44:	66 01 d0             	add    %dx,%ax
    1c47:	66 c1 e0 02          	shl    $0x2,%ax
    1c4b:	66 05 20 39          	add    $0x3920,%ax
    1c4f:	00 00                	add    %al,(%eax)
    1c51:	67 66 c7 00 01 00    	movw   $0x1,(%bx,%si)
    1c57:	00 00                	add    %al,(%eax)
        SEM_list[i].count = value;
    1c59:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1c5e:	66 89 d0             	mov    %dx,%ax
    1c61:	66 01 c0             	add    %ax,%ax
    1c64:	66 01 d0             	add    %dx,%ax
    1c67:	66 c1 e0 02          	shl    $0x2,%ax
    1c6b:	66 01 d0             	add    %dx,%ax
    1c6e:	66 c1 e0 03          	shl    $0x3,%ax
    1c72:	66 01 d0             	add    %dx,%ax
    1c75:	66 c1 e0 02          	shl    $0x2,%ax
    1c79:	67 66 8d 90 80 37    	lea    0x3780(%bx,%si),%dx
    1c7f:	00 00                	add    %al,(%eax)
    1c81:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1c86:	67 66 89 02          	mov    %ax,(%bp,%si)
        return i;
    1c8a:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1c8f:	eb 06                	jmp    1c97 <do_SemGet+0xbd>
    }
    else 
        return -1;
    1c91:	66 b8 ff ff          	mov    $0xffff,%ax
    1c95:	ff                   	(bad)  
    1c96:	ff 66 c9             	jmp    *-0x37(%esi)
}
    1c99:	66 c3                	retw   

00001c9b <do_SemFree>:
void do_SemFree(int s){
    1c9b:	66 55                	push   %bp
    1c9d:	66 89 e5             	mov    %sp,%bp
    SEM_list[s].used = 0;
    1ca0:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1ca5:	66 89 d0             	mov    %dx,%ax
    1ca8:	66 01 c0             	add    %ax,%ax
    1cab:	66 01 d0             	add    %dx,%ax
    1cae:	66 c1 e0 02          	shl    $0x2,%ax
    1cb2:	66 01 d0             	add    %dx,%ax
    1cb5:	66 c1 e0 03          	shl    $0x3,%ax
    1cb9:	66 01 d0             	add    %dx,%ax
    1cbc:	66 c1 e0 02          	shl    $0x2,%ax
    1cc0:	66 05 20 39          	add    $0x3920,%ax
    1cc4:	00 00                	add    %al,(%eax)
    1cc6:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1ccc:	00 00                	add    %al,(%eax)
}
    1cce:	66 5d                	pop    %bp
    1cd0:	66 c3                	retw   

00001cd2 <do_P>:
int sem_index;
void do_P(int s){
    1cd2:	66 55                	push   %bp
    1cd4:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    1cd7:	fa                   	cli    
    SEM_list[s].count = SEM_list[s].count - 1;
    1cd8:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1cdd:	66 89 d0             	mov    %dx,%ax
    1ce0:	66 01 c0             	add    %ax,%ax
    1ce3:	66 01 d0             	add    %dx,%ax
    1ce6:	66 c1 e0 02          	shl    $0x2,%ax
    1cea:	66 01 d0             	add    %dx,%ax
    1ced:	66 c1 e0 03          	shl    $0x3,%ax
    1cf1:	66 01 d0             	add    %dx,%ax
    1cf4:	66 c1 e0 02          	shl    $0x2,%ax
    1cf8:	66 05 80 37          	add    $0x3780,%ax
    1cfc:	00 00                	add    %al,(%eax)
    1cfe:	67 66 8b 00          	mov    (%bx,%si),%ax
    1d02:	67 66 8d 48 ff       	lea    -0x1(%bx,%si),%cx
    1d07:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1d0c:	66 89 d0             	mov    %dx,%ax
    1d0f:	66 01 c0             	add    %ax,%ax
    1d12:	66 01 d0             	add    %dx,%ax
    1d15:	66 c1 e0 02          	shl    $0x2,%ax
    1d19:	66 01 d0             	add    %dx,%ax
    1d1c:	66 c1 e0 03          	shl    $0x3,%ax
    1d20:	66 01 d0             	add    %dx,%ax
    1d23:	66 c1 e0 02          	shl    $0x2,%ax
    1d27:	66 05 80 37          	add    $0x3780,%ax
    1d2b:	00 00                	add    %al,(%eax)
    1d2d:	67 66 89 08          	mov    %cx,(%bx,%si)
    if(SEM_list[s].count < 0){
    1d31:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1d36:	66 89 d0             	mov    %dx,%ax
    1d39:	66 01 c0             	add    %ax,%ax
    1d3c:	66 01 d0             	add    %dx,%ax
    1d3f:	66 c1 e0 02          	shl    $0x2,%ax
    1d43:	66 01 d0             	add    %dx,%ax
    1d46:	66 c1 e0 03          	shl    $0x3,%ax
    1d4a:	66 01 d0             	add    %dx,%ax
    1d4d:	66 c1 e0 02          	shl    $0x2,%ax
    1d51:	66 05 80 37          	add    $0x3780,%ax
    1d55:	00 00                	add    %al,(%eax)
    1d57:	67 66 8b 00          	mov    (%bx,%si),%ax
    1d5b:	66 85 c0             	test   %ax,%ax
    1d5e:	0f 89 b0 00 66 a1    	jns    a1661e14 <_end+0xa165b3b8>
        _CurrentProg->prg_status = BLOCKED;
    1d64:	5c                   	pop    %esp
    1d65:	37                   	aaa    
    1d66:	67 66 c7 40 38 02 00 	movw   $0x2,0x38(%bx,%si)
    1d6d:	00 00                	add    %al,(%eax)
        sem_index = _CurrentProg - PCB_list;
    1d6f:	66 a1 5c 37 66 89    	mov    0x8966375c,%ax
    1d75:	c2 66 b8             	ret    $0xb866
    1d78:	00 32                	add    %dh,(%edx)
    1d7a:	00 00                	add    %al,(%eax)
    1d7c:	66 29 c2             	sub    %ax,%dx
    1d7f:	66 89 d0             	mov    %dx,%ax
    1d82:	66 c1 f8 02          	sar    $0x2,%ax
    1d86:	66 89 c2             	mov    %ax,%dx
    1d89:	66 89 d0             	mov    %dx,%ax
    1d8c:	66 01 c0             	add    %ax,%ax
    1d8f:	66 01 d0             	add    %dx,%ax
    1d92:	67 66 8d 14          	lea    (%si),%dx
    1d96:	85 00                	test   %eax,(%eax)
    1d98:	00 00                	add    %al,(%eax)
    1d9a:	00 66 01             	add    %ah,0x1(%esi)
    1d9d:	d0 66 89             	shlb   -0x77(%esi)
    1da0:	c2 66 c1             	ret    $0xc166
    1da3:	e2 08                	loop   1dad <do_P+0xdb>
    1da5:	66 01 d0             	add    %dx,%ax
    1da8:	66 89 c2             	mov    %ax,%dx
    1dab:	66 c1 e2 10          	shl    $0x10,%dx
    1daf:	66 01 d0             	add    %dx,%ax
    1db2:	66 f7 d8             	neg    %ax
    1db5:	66 a3 bc 68 66 a1    	mov    %ax,0xa16668bc
        rmele(&readyqueue,sem_index);
    1dbb:	bc 68 66 50 66       	mov    $0x66506668,%esp
    1dc0:	68 c0 68 00 00       	push   $0x68c0
    1dc5:	66 e8 07 fd          	callw  1ad0 <init_queue+0x30>
    1dc9:	ff                   	(bad)  
    1dca:	ff 66 83             	jmp    *-0x7d(%esi)
    1dcd:	c4 08                	les    (%eax),%ecx
        enqueue(&(SEM_list[s].semaque),sem_index);
    1dcf:	66 8b 0e             	mov    (%esi),%cx
    1dd2:	bc 68 67 66 8b       	mov    $0x8b666768,%esp
    1dd7:	55                   	push   %ebp
    1dd8:	08 66 89             	or     %ah,-0x77(%esi)
    1ddb:	d0 66 01             	shlb   0x1(%esi)
    1dde:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    1de2:	66 c1 e0 02          	shl    $0x2,%ax
    1de6:	66 01 d0             	add    %dx,%ax
    1de9:	66 c1 e0 03          	shl    $0x3,%ax
    1ded:	66 01 d0             	add    %dx,%ax
    1df0:	66 c1 e0 02          	shl    $0x2,%ax
    1df4:	66 05 80 37          	add    $0x3780,%ax
    1df8:	00 00                	add    %al,(%eax)
    1dfa:	66 83 c0 04          	add    $0x4,%ax
    1dfe:	66 51                	push   %cx
    1e00:	66 50                	push   %ax
    1e02:	66 e8 ba fb          	callw  19c0 <size+0x11>
    1e06:	ff                   	(bad)  
    1e07:	ff 66 83             	jmp    *-0x7d(%esi)
    1e0a:	c4 08                	les    (%eax),%ecx
        _Schedule_once();
    1e0c:	66 e8 53 e4          	callw  263 <S+0x14>
    1e10:	ff                   	(bad)  
    1e11:	ff                   	(bad)  
    }
    __asm("sti\n");
    1e12:	fb                   	sti    
}
    1e13:	66 c9                	leavew 
    1e15:	66 c3                	retw   

00001e17 <do_V>:
int v_res;
void do_V(int s){
    1e17:	66 55                	push   %bp
    1e19:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    1e1c:	fa                   	cli    
    SEM_list[s].count  = SEM_list[s].count + 1;
    1e1d:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1e22:	66 89 d0             	mov    %dx,%ax
    1e25:	66 01 c0             	add    %ax,%ax
    1e28:	66 01 d0             	add    %dx,%ax
    1e2b:	66 c1 e0 02          	shl    $0x2,%ax
    1e2f:	66 01 d0             	add    %dx,%ax
    1e32:	66 c1 e0 03          	shl    $0x3,%ax
    1e36:	66 01 d0             	add    %dx,%ax
    1e39:	66 c1 e0 02          	shl    $0x2,%ax
    1e3d:	66 05 80 37          	add    $0x3780,%ax
    1e41:	00 00                	add    %al,(%eax)
    1e43:	67 66 8b 00          	mov    (%bx,%si),%ax
    1e47:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    1e4c:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1e51:	66 89 d0             	mov    %dx,%ax
    1e54:	66 01 c0             	add    %ax,%ax
    1e57:	66 01 d0             	add    %dx,%ax
    1e5a:	66 c1 e0 02          	shl    $0x2,%ax
    1e5e:	66 01 d0             	add    %dx,%ax
    1e61:	66 c1 e0 03          	shl    $0x3,%ax
    1e65:	66 01 d0             	add    %dx,%ax
    1e68:	66 c1 e0 02          	shl    $0x2,%ax
    1e6c:	66 05 80 37          	add    $0x3780,%ax
    1e70:	00 00                	add    %al,(%eax)
    1e72:	67 66 89 08          	mov    %cx,(%bx,%si)
    if(SEM_list[s].count <= 0){
    1e76:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1e7b:	66 89 d0             	mov    %dx,%ax
    1e7e:	66 01 c0             	add    %ax,%ax
    1e81:	66 01 d0             	add    %dx,%ax
    1e84:	66 c1 e0 02          	shl    $0x2,%ax
    1e88:	66 01 d0             	add    %dx,%ax
    1e8b:	66 c1 e0 03          	shl    $0x3,%ax
    1e8f:	66 01 d0             	add    %dx,%ax
    1e92:	66 c1 e0 02          	shl    $0x2,%ax
    1e96:	66 05 80 37          	add    $0x3780,%ax
    1e9a:	00 00                	add    %al,(%eax)
    1e9c:	67 66 8b 00          	mov    (%bx,%si),%ax
    1ea0:	66 85 c0             	test   %ax,%ax
    1ea3:	7f 73                	jg     1f18 <do_V+0x101>
        dequeue(&(SEM_list[s].semaque),&v_res);
    1ea5:	67 66 8b 55 08       	mov    0x8(%di),%dx
    1eaa:	66 89 d0             	mov    %dx,%ax
    1ead:	66 01 c0             	add    %ax,%ax
    1eb0:	66 01 d0             	add    %dx,%ax
    1eb3:	66 c1 e0 02          	shl    $0x2,%ax
    1eb7:	66 01 d0             	add    %dx,%ax
    1eba:	66 c1 e0 03          	shl    $0x3,%ax
    1ebe:	66 01 d0             	add    %dx,%ax
    1ec1:	66 c1 e0 02          	shl    $0x2,%ax
    1ec5:	66 05 80 37          	add    $0x3780,%ax
    1ec9:	00 00                	add    %al,(%eax)
    1ecb:	66 83 c0 04          	add    $0x4,%ax
    1ecf:	66 68 54 37          	pushw  $0x3754
    1ed3:	00 00                	add    %al,(%eax)
    1ed5:	66 50                	push   %ax
    1ed7:	66 e8 51 fb          	callw  1a2c <enqueue+0x6a>
    1edb:	ff                   	(bad)  
    1edc:	ff 66 83             	jmp    *-0x7d(%esi)
    1edf:	c4 08                	les    (%eax),%ecx
        PCB_list[v_res].prg_status = READY;
    1ee1:	66 a1 54 37 66 c1    	mov    0xc1663754,%ax
    1ee7:	e0 02                	loopne 1eeb <do_V+0xd4>
    1ee9:	66 89 c2             	mov    %ax,%dx
    1eec:	66 c1 e2 04          	shl    $0x4,%dx
    1ef0:	66 01 d0             	add    %dx,%ax
    1ef3:	66 05 30 32          	add    $0x3230,%ax
    1ef7:	00 00                	add    %al,(%eax)
    1ef9:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    1f00:	00 00                	add    %al,(%eax)
        enqueue(&readyqueue,v_res);
    1f02:	66 a1 54 37 66 50    	mov    0x50663754,%ax
    1f08:	66 68 c0 68          	pushw  $0x68c0
    1f0c:	00 00                	add    %al,(%eax)
    1f0e:	66 e8 ae fa          	callw  19c0 <size+0x11>
    1f12:	ff                   	(bad)  
    1f13:	ff 66 83             	jmp    *-0x7d(%esi)
    1f16:	c4 08                	les    (%eax),%ecx
    }
    __asm__("sti\n");
    1f18:	fb                   	sti    

    1f19:	66 c9                	leavew 
    1f1b:	66 c3                	retw   

00001f1d <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    1f1d:	66 55                	push   %bp
    1f1f:	66 89 e5             	mov    %sp,%bp
    1f22:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    1f26:	66 e8 44 e3          	callw  26e <_Schedule_once+0x9>
    1f2a:	ff                   	(bad)  
    1f2b:	ff 67 66             	jmp    *0x66(%edi)
    1f2e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    1f31:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    1f36:	66 c9                	leavew 
    1f38:	66 c3                	retw   

00001f3a <wait>:
char wait(){
    1f3a:	66 55                	push   %bp
    1f3c:	66 89 e5             	mov    %sp,%bp
    1f3f:	66 83 ec 08          	sub    $0x8,%sp
    int temp_ch = _wait();
    1f43:	66 e8 3f e3          	callw  286 <_Schedule+0xb>
    1f47:	ff                   	(bad)  
    1f48:	ff 67 66             	jmp    *0x66(%edi)
    1f4b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char ch = '0' + temp_ch;
    1f4e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1f53:	66 83 c0 30          	add    $0x30,%ax
    1f57:	67 88 45 fb          	mov    %al,-0x5(%di)
    return ch;
    1f5b:	67 8a 45 fb          	mov    -0x5(%di),%al
    //_wait();
}
    1f5f:	66 c9                	leavew 
    1f61:	66 c3                	retw   

00001f63 <exit>:
void exit(char ch){
    1f63:	66 55                	push   %bp
    1f65:	66 89 e5             	mov    %sp,%bp
    1f68:	66 83 ec 04          	sub    $0x4,%sp
    1f6c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1f71:	67 88 45 fc          	mov    %al,-0x4(%di)
    _exit(ch);
    1f75:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    1f7b:	66 50                	push   %ax
    1f7d:	66 e8 10 e3          	callw  291 <_wait+0x9>
    1f81:	ff                   	(bad)  
    1f82:	ff 66 83             	jmp    *-0x7d(%esi)
    1f85:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    1f88:	c9                   	leave  
    1f89:	66 c3                	retw   

00001f8b <GetSem>:
int GetSem(int value){
    1f8b:	66 55                	push   %bp
    1f8d:	66 89 e5             	mov    %sp,%bp
    1f90:	66 83 ec 04          	sub    $0x4,%sp
    int sema = _GetSem(value);
    1f94:	67 66 ff 75 08       	pushw  0x8(%di)
    1f99:	66 e8 06 e3          	callw  2a3 <_exit+0x10>
    1f9d:	ff                   	(bad)  
    1f9e:	ff 66 83             	jmp    *-0x7d(%esi)
    1fa1:	c4 04 67             	les    (%edi,%eiz,2),%eax
    1fa4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return sema;
    1fa8:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    1fad:	66 c9                	leavew 
    1faf:	66 c3                	retw   

00001fb1 <SemFree>:
void SemFree(int value){
    1fb1:	66 55                	push   %bp
    1fb3:	66 89 e5             	mov    %sp,%bp
    _FreeSem(value);
    1fb6:	67 66 ff 75 08       	pushw  0x8(%di)
    1fbb:	66 e8 f6 e2          	callw  2b5 <_GetSem+0x10>
    1fbf:	ff                   	(bad)  
    1fc0:	ff 66 83             	jmp    *-0x7d(%esi)
    1fc3:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    1fc6:	c9                   	leave  
    1fc7:	66 c3                	retw   

00001fc9 <P>:
void P(int s){   
    1fc9:	66 55                	push   %bp
    1fcb:	66 89 e5             	mov    %sp,%bp
    _P(s);
    1fce:	67 66 ff 75 08       	pushw  0x8(%di)
    1fd3:	66 e8 f0 e2          	callw  2c7 <_FreeSem+0x10>
    1fd7:	ff                   	(bad)  
    1fd8:	ff 66 83             	jmp    *-0x7d(%esi)
    1fdb:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    1fde:	c9                   	leave  
    1fdf:	66 c3                	retw   

00001fe1 <V>:
void V(int s){
    1fe1:	66 55                	push   %bp
    1fe3:	66 89 e5             	mov    %sp,%bp
    _V(s);
    1fe6:	67 66 ff 75 08       	pushw  0x8(%di)
    1feb:	66 e8 ea e2          	callw  2d9 <_P+0x10>
    1fef:	ff                   	(bad)  
    1ff0:	ff 66 83             	jmp    *-0x7d(%esi)
    1ff3:	c4 04 66             	les    (%esi,%eiz,2),%eax
    1ff6:	c9                   	leave  
    1ff7:	66 c3                	retw   
