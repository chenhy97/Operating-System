
testsem.elf:     file format elf32-i386


Disassembly of section .text:

00000100 <main>:
int pid,sem_id;
int t;
int i,j;
int totalsave ;
int totaldraw ;
int main(){
     100:	66 55                	push   %bp
     102:	66 89 e5             	mov    %sp,%bp
    __asm__("mov $0x8000, %eax\n");
     105:	66 b8 00 80          	mov    $0x8000,%ax
     109:	00 00                	add    %al,(%eax)
    __asm__("mov %ax, %ds\n");
     10b:	8e d8                	mov    %eax,%ds
    __asm__("mov %ax, %es\n");
     10d:	8e c0                	mov    %eax,%es
    __asm__("mov %ax, %ss\n");
     10f:	8e d0                	mov    %eax,%ss
    __asm__("mov $0x100, %esp");
     111:	66 bc 00 01          	mov    $0x100,%sp
     115:	00 00                	add    %al,(%eax)
    bankbalance = 1000;
     117:	66 c7 06 4c 41       	movw   $0x414c,(%esi)
     11c:	e8 03 00 00 66       	call   66000124 <_end+0x65ffa880>
    totaldraw = 0;
     121:	c7 06 40 41 00 00    	movl   $0x4140,(%esi)
     127:	00 00                	add    %al,(%eax)
    totalsave = 0;
     129:	66 c7 06 50 41       	movw   $0x4150,(%esi)
     12e:	00 00                	add    %al,(%eax)
     130:	00 00                	add    %al,(%eax)
    sem_id = GetSem(1);
     132:	66 6a 01             	pushw  $0x1
     135:	66 e8 ba 25          	callw  26f3 <exit+0x26>
     139:	00 00                	add    %al,(%eax)
     13b:	66 83 c4 04          	add    $0x4,%sp
     13f:	66 a3 48 41 66 e8    	mov    %ax,0xe8664148
    //__asm__("sub $22,%esp");
    pid = fork();
     145:	3e                   	ds
     146:	25 00 00 66 a3       	and    $0xa3660000,%eax
     14b:	3c 41                	cmp    $0x41,%al
    //__asm__("add $22,%esp");
    if(pid == -1){
     14d:	66 a1 3c 41 66 83    	mov    0x8366413c,%ax
     153:	f8                   	clc    
     154:	ff 75 19             	pushl  0x19(%ebp)
        prints("error in fork!");
     157:	66 68 64 27          	pushw  $0x2764
     15b:	00 00                	add    %al,(%eax)
     15d:	66 e8 df 10          	callw  1240 <print+0x8f>
     161:	00 00                	add    %al,(%eax)
     163:	66 83 c4 04          	add    $0x4,%sp
        return 0;
     167:	66 b8 00 00          	mov    $0x0,%ax
     16b:	00 00                	add    %al,(%eax)
     16d:	e9 a8 01 66 a1       	jmp    a166031a <_end+0xa165aa76>
    }
    if(pid){
     172:	3c 41                	cmp    $0x41,%al
     174:	66 85 c0             	test   %ax,%ax
     177:	0f 84 c6 00 66 c7    	je     c7660243 <_end+0xc765a99f>
        i = 0;
     17d:	06                   	push   %es
     17e:	44                   	inc    %esp
     17f:	41                   	inc    %ecx
     180:	00 00                	add    %al,(%eax)
     182:	00 00                	add    %al,(%eax)
        for(i = 0;i < 50;i ++){
     184:	66 c7 06 44 41       	movw   $0x4144,(%esi)
     189:	00 00                	add    %al,(%eax)
     18b:	00 00                	add    %al,(%eax)
     18d:	e9 a2 00 66 a1       	jmp    a1660234 <_end+0xa165a990>
            P(sem_id);
     192:	48                   	dec    %eax
     193:	41                   	inc    %ecx
     194:	66 50                	push   %ax
     196:	66 e8 97 25          	callw  2731 <SemFree+0x16>
     19a:	00 00                	add    %al,(%eax)
     19c:	66 83 c4 04          	add    $0x4,%sp
            t = bankbalance;
     1a0:	66 a1 4c 41 66 a3    	mov    0xa366414c,%ax
     1a6:	34 41                	xor    $0x41,%al
            //delay(2);
            t = t + 10;
     1a8:	66 a1 34 41 66 83    	mov    0x83664134,%ax
     1ae:	c0 0a 66             	rorb   $0x66,(%edx)
     1b1:	a3 34 41 66 a1       	mov    %eax,0xa1664134
           // delay(3);
            bankbalance = t;
     1b6:	34 41                	xor    $0x41,%al
     1b8:	66 a3 4c 41 66 a1    	mov    %ax,0xa166414c
            totalsave = totalsave + 10;
     1be:	50                   	push   %eax
     1bf:	41                   	inc    %ecx
     1c0:	66 83 c0 0a          	add    $0xa,%ax
     1c4:	66 a3 50 41 66 68    	mov    %ax,0x68664150
            prints("papa:bankbalance = ");
     1ca:	73 27                	jae    1f3 <main+0xf3>
     1cc:	00 00                	add    %al,(%eax)
     1ce:	66 e8 6e 10          	callw  1240 <print+0x8f>
     1d2:	00 00                	add    %al,(%eax)
     1d4:	66 83 c4 04          	add    $0x4,%sp
            printsint(bankbalance);
     1d8:	66 a1 4c 41 66 50    	mov    0x5066414c,%ax
     1de:	66 e8 d9 10          	callw  12bb <printc+0x27>
     1e2:	00 00                	add    %al,(%eax)
     1e4:	66 83 c4 04          	add    $0x4,%sp
            prints(" papa:totalsave = ");
     1e8:	66 68 87 27          	pushw  $0x2787
     1ec:	00 00                	add    %al,(%eax)
     1ee:	66 e8 4e 10          	callw  1240 <print+0x8f>
     1f2:	00 00                	add    %al,(%eax)
     1f4:	66 83 c4 04          	add    $0x4,%sp
            printsint(totalsave);
     1f8:	66 a1 50 41 66 50    	mov    0x50664150,%ax
     1fe:	66 e8 b9 10          	callw  12bb <printc+0x27>
     202:	00 00                	add    %al,(%eax)
     204:	66 83 c4 04          	add    $0x4,%sp
            prints("\n\r");
     208:	66 68 9a 27          	pushw  $0x279a
     20c:	00 00                	add    %al,(%eax)
     20e:	66 e8 2e 10          	callw  1240 <print+0x8f>
     212:	00 00                	add    %al,(%eax)
     214:	66 83 c4 04          	add    $0x4,%sp
            V(sem_id);
     218:	66 a1 48 41 66 50    	mov    0x50664148,%ax
     21e:	66 e8 27 25          	callw  2749 <P+0x16>
     222:	00 00                	add    %al,(%eax)
     224:	66 83 c4 04          	add    $0x4,%sp
        prints("error in fork!");
        return 0;
    }
    if(pid){
        i = 0;
        for(i = 0;i < 50;i ++){
     228:	66 a1 44 41 66 40    	mov    0x40664144,%ax
     22e:	66 a3 44 41 66 a1    	mov    %ax,0xa1664144
     234:	44                   	inc    %esp
     235:	41                   	inc    %ecx
     236:	66 83 f8 31          	cmp    $0x31,%ax
     23a:	0f 8e 52 ff e9 ba    	jle    baea0192 <_end+0xbae9a8ee>
     240:	00 66 c7             	add    %ah,-0x39(%esi)
            prints("\n\r");
            V(sem_id);
        }
    }
    else{
        for(j = 0;j < 35;j ++){
     243:	06                   	push   %es
     244:	38 41 00             	cmp    %al,0x0(%ecx)
     247:	00 00                	add    %al,(%eax)
     249:	00 e9                	add    %ch,%cl
     24b:	a2 00 66 a1 48       	mov    %al,0x48a16600
            P(sem_id);
     250:	41                   	inc    %ecx
     251:	66 50                	push   %ax
     253:	66 e8 da 24          	callw  2731 <SemFree+0x16>
     257:	00 00                	add    %al,(%eax)
     259:	66 83 c4 04          	add    $0x4,%sp
            t = bankbalance;
     25d:	66 a1 4c 41 66 a3    	mov    0xa366414c,%ax
     263:	34 41                	xor    $0x41,%al
            //delay(2);
            t = t - 20;
     265:	66 a1 34 41 66 83    	mov    0x83664134,%ax
     26b:	e8 14 66 a3 34       	call   34a36884 <_end+0x34a30fe0>
     270:	41                   	inc    %ecx
            //delay(3);
            bankbalance = t;
     271:	66 a1 34 41 66 a3    	mov    0xa3664134,%ax
     277:	4c                   	dec    %esp
     278:	41                   	inc    %ecx
            totaldraw = totaldraw + 20;
     279:	66 a1 40 41 66 83    	mov    0x83664140,%ax
     27f:	c0 14 66 a3          	rclb   $0xa3,(%esi,%eiz,2)
     283:	40                   	inc    %eax
     284:	41                   	inc    %ecx
            prints("son:money = ");
     285:	66 68 9d 27          	pushw  $0x279d
     289:	00 00                	add    %al,(%eax)
     28b:	66 e8 b1 0f          	callw  1240 <print+0x8f>
     28f:	00 00                	add    %al,(%eax)
     291:	66 83 c4 04          	add    $0x4,%sp
            printsint(bankbalance);
     295:	66 a1 4c 41 66 50    	mov    0x5066414c,%ax
     29b:	66 e8 1c 10          	callw  12bb <printc+0x27>
     29f:	00 00                	add    %al,(%eax)
     2a1:	66 83 c4 04          	add    $0x4,%sp
            prints(" son:I used: ");
     2a5:	66 68 aa 27          	pushw  $0x27aa
     2a9:	00 00                	add    %al,(%eax)
     2ab:	66 e8 91 0f          	callw  1240 <print+0x8f>
     2af:	00 00                	add    %al,(%eax)
     2b1:	66 83 c4 04          	add    $0x4,%sp
            printsint(totaldraw);
     2b5:	66 a1 40 41 66 50    	mov    0x50664140,%ax
     2bb:	66 e8 fc 0f          	callw  12bb <printc+0x27>
     2bf:	00 00                	add    %al,(%eax)
     2c1:	66 83 c4 04          	add    $0x4,%sp
            prints("\n\r");
     2c5:	66 68 9a 27          	pushw  $0x279a
     2c9:	00 00                	add    %al,(%eax)
     2cb:	66 e8 71 0f          	callw  1240 <print+0x8f>
     2cf:	00 00                	add    %al,(%eax)
     2d1:	66 83 c4 04          	add    $0x4,%sp
            V(sem_id);
     2d5:	66 a1 48 41 66 50    	mov    0x50664148,%ax
     2db:	66 e8 6a 24          	callw  2749 <P+0x16>
     2df:	00 00                	add    %al,(%eax)
     2e1:	66 83 c4 04          	add    $0x4,%sp
            prints("\n\r");
            V(sem_id);
        }
    }
    else{
        for(j = 0;j < 35;j ++){
     2e5:	66 a1 38 41 66 40    	mov    0x40664138,%ax
     2eb:	66 a3 38 41 66 a1    	mov    %ax,0xa1664138
     2f1:	38 41 66             	cmp    %al,0x66(%ecx)
     2f4:	83 f8 22             	cmp    $0x22,%eax
     2f7:	0f 8e 52 ff 66 68    	jle    6867024f <_end+0x6866a9ab>
            printsint(totaldraw);
            prints("\n\r");
            V(sem_id);
        }
    }
    prints("\n\rfinished!");
     2fd:	b8 27 00 00 66       	mov    $0x66000027,%eax
     302:	e8 3b 0f 00 00       	call   1242 <prints>
     307:	66 83 c4 04          	add    $0x4,%sp
    exit(0);
     30b:	66 6a 00             	pushw  $0x0
     30e:	66 e8 b9 23          	callw  26cb <wait+0x27>
     312:	00 00                	add    %al,(%eax)
     314:	66 83 c4 04          	add    $0x4,%sp
}
     318:	66 c9                	leavew 
     31a:	66 c3                	retw   

0000031c <delay>:
void delay(int n){
     31c:	66 55                	push   %bp
     31e:	66 89 e5             	mov    %sp,%bp
     321:	66 83 ec 0c          	sub    $0xc,%sp
    int ii,jj,a;
    for(ii = 0;ii < 30 * n;ii ++ ){
     325:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     32c:	00 00                	add    %al,(%eax)
     32e:	eb 2a                	jmp    35a <delay+0x3e>
        for(jj = 0;jj < 3000;jj ++){
     330:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     337:	00 00                	add    %al,(%eax)
     339:	eb 0f                	jmp    34a <delay+0x2e>
            a += 1;
     33b:	67 66 ff 45 f4       	incw   -0xc(%di)
            a -= 1;
     340:	67 66 ff 4d f4       	decw   -0xc(%di)
    exit(0);
}
void delay(int n){
    int ii,jj,a;
    for(ii = 0;ii < 30 * n;ii ++ ){
        for(jj = 0;jj < 3000;jj ++){
     345:	67 66 ff 45 f8       	incw   -0x8(%di)
     34a:	67 66 81 7d f8 b7 0b 	cmpw   $0xbb7,-0x8(%di)
     351:	00 00                	add    %al,(%eax)
     353:	7e e6                	jle    33b <delay+0x1f>
    prints("\n\rfinished!");
    exit(0);
}
void delay(int n){
    int ii,jj,a;
    for(ii = 0;ii < 30 * n;ii ++ ){
     355:	67 66 ff 45 fc       	incw   -0x4(%di)
     35a:	67 66 8b 55 08       	mov    0x8(%di),%dx
     35f:	66 89 d0             	mov    %dx,%ax
     362:	66 01 c0             	add    %ax,%ax
     365:	66 01 d0             	add    %dx,%ax
     368:	67 66 8d 14          	lea    (%si),%dx
     36c:	85 00                	test   %eax,(%eax)
     36e:	00 00                	add    %al,(%eax)
     370:	00 66 01             	add    %ah,0x1(%esi)
     373:	d0 66 01             	shlb   0x1(%esi)
     376:	c0 67 66 3b          	shlb   $0x3b,0x66(%edi)
     37a:	45                   	inc    %ebp
     37b:	fc                   	cld    
     37c:	7f b2                	jg     330 <delay+0x14>
        for(jj = 0;jj < 3000;jj ++){
            a += 1;
            a -= 1;
        }
    }
     37e:	66 c9                	leavew 
     380:	66 c3                	retw   
     382:	66 90                	xchg   %ax,%ax
     384:	66 90                	xchg   %ax,%ax
     386:	66 90                	xchg   %ax,%ax
     388:	66 90                	xchg   %ax,%ax
     38a:	66 90                	xchg   %ax,%ax
     38c:	66 90                	xchg   %ax,%ax
     38e:	66 90                	xchg   %ax,%ax

00000390 <count>:
     390:	08 2d 00 00 00 00    	or     %ch,0x0

00000391 <alpha>:
     391:	2d 00 00 00 00       	sub    $0x0,%eax

00000392 <int_09_saved>:
     392:	00 00                	add    %al,(%eax)
	...

00000396 <program_saved>:
     396:	70 00                	jo     398 <program_saved+0x2>
	...

0000039a <ds_saved>:
     39a:	7c 00                	jl     39c <ds_saved+0x2>
	...

0000039e <return_save>:
     39e:	88 00                	mov    %al,(%eax)

000003a0 <esi_save>:
     3a0:	96                   	xchg   %eax,%esi
     3a1:	00 00                	add    %al,(%eax)
	...

000003a4 <temp>:
     3a4:	e8 03 b4 00 00       	call   b7ac <_end+0x5f08>

000003a6 <kernelesp_saved>:
     3a6:	b4 00                	mov    $0x0,%ah
	...

000003aa <esp_saved_inkernel>:
     3aa:	c8 00 00 00          	enter  $0x0,$0x0

000003ae <esp_saved_in_user>:
     3ae:	f0 00 00             	lock add %al,(%eax)
	...

000003b2 <ss_saved_in_user>:
     3b2:	2c 01                	sub    $0x1,%al
	...

000003b6 <color>:
     3b6:	01 c2                	add    %eax,%edx

000003b7 <ss_saved_fork>:
     3b7:	c2 01 00             	ret    $0x1
	...

000003bb <retaddr>:
     3bb:	58                   	pop    %eax
     3bc:	02 00                	add    (%eax),%al
	...

000003bf <Message31>:
     3bf:	74 69                	je     42a <_readinput+0x9>
     3c1:	6d                   	insl   (%dx),%es:(%edi)
     3c2:	65 3a 20             	cmp    %gs:(%eax),%ah

000003c5 <_sys_stack_copy>:
     3c5:	c8 00 00 00          	enter  $0x0,$0x0
     3c9:	8e d0                	mov    %eax,%ss
     3cb:	60                   	pusha  
     3cc:	1e                   	push   %ds
     3cd:	8b 46 06             	mov    0x6(%esi),%eax
     3d0:	8b 56 0a             	mov    0xa(%esi),%edx
     3d3:	8b 4e 0e             	mov    0xe(%esi),%ecx
     3d6:	8c db                	mov    %ds,%ebx

000003d8 <while_loop1>:
     3d8:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
     3de:	8e d8                	mov    %eax,%ds
     3e0:	67 8b 1a             	mov    (%bp,%si),%ebx
     3e3:	8e d9                	mov    %ecx,%ds
     3e5:	67 89 1a             	mov    %ebx,(%bp,%si)
     3e8:	83 c2 02             	add    $0x2,%edx
     3eb:	eb eb                	jmp    3d8 <while_loop1>

000003ed <end_for_copy>:
     3ed:	1f                   	pop    %ds
     3ee:	61                   	popa   
     3ef:	c9                   	leave  
     3f0:	66 5a                	pop    %dx
     3f2:	ff e2                	jmp    *%edx

000003f4 <_clearscreen>:
     3f4:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     3f9:	66 5a                	pop    %dx
     3fb:	ff e2                	jmp    *%edx

000003fd <_printchar>:
     3fd:	c8 00 00 00          	enter  $0x0,$0x0
     401:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
     406:	57                   	push   %edi
     407:	66 8b 4e 06          	mov    0x6(%esi),%cx
     40b:	66 8b 7e 0a          	mov    0xa(%esi),%di
     40f:	66 8b 56 0e          	mov    0xe(%esi),%dx
     413:	88 d5                	mov    %dl,%ch
     415:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
     41c:	00 66 5a             	add    %ah,0x5a(%esi)
     41f:	ff e2                	jmp    *%edx

00000421 <_readinput>:
     421:	c8 04 00 00          	enter  $0x4,$0x0
     425:	b4 00                	mov    $0x0,%ah
     427:	cd 16                	int    $0x16
     429:	b4 00                	mov    $0x0,%ah
     42b:	66 67 89 04          	mov    %ax,(%si)
     42f:	24 66                	and    $0x66,%al
     431:	67 8b 04             	mov    (%si),%eax
     434:	24 c9                	and    $0xc9,%al
     436:	66 5a                	pop    %dx
     438:	ff e2                	jmp    *%edx

0000043a <_showchar>:
     43a:	c8 00 00 00          	enter  $0x0,$0x0
     43e:	50                   	push   %eax
     43f:	53                   	push   %ebx
     440:	8b 46 06             	mov    0x6(%esi),%eax
     443:	b4 0e                	mov    $0xe,%ah
     445:	b3 00                	mov    $0x0,%bl
     447:	cd 10                	int    $0x10
     449:	fa                   	cli    
     44a:	5b                   	pop    %ebx
     44b:	58                   	pop    %eax
     44c:	c9                   	leave  
     44d:	66 5a                	pop    %dx
     44f:	ff e2                	jmp    *%edx

00000451 <_setPoint>:
     451:	c8 00 00 00          	enter  $0x0,$0x0
     455:	53                   	push   %ebx
     456:	b7 00                	mov    $0x0,%bh
     458:	8a 77 06             	mov    0x6(%edi),%dh
     45b:	8a 57 0a             	mov    0xa(%edi),%dl
     45e:	b4 02                	mov    $0x2,%ah
     460:	cd 10                	int    $0x10
     462:	5b                   	pop    %ebx
     463:	c9                   	leave  
     464:	66 5a                	pop    %dx
     466:	ff e2                	jmp    *%edx

00000468 <_loadP>:
     468:	c8 00 00 00          	enter  $0x0,$0x0
     46c:	60                   	pusha  
     46d:	06                   	push   %es
     46e:	1e                   	push   %ds
     46f:	8c c8                	mov    %cs,%eax
     471:	8e d8                	mov    %eax,%ds
     473:	8b 46 0e             	mov    0xe(%esi),%eax
     476:	8e c0                	mov    %eax,%es
     478:	b2 00                	mov    $0x0,%dl
     47a:	8b 46 0a             	mov    0xa(%esi),%eax
     47d:	b3 12                	mov    $0x12,%bl
     47f:	f6 f3                	div    %bl
     481:	88 e1                	mov    %ah,%cl
     483:	30 e4                	xor    %ah,%ah
     485:	b3 02                	mov    $0x2,%bl
     487:	f6 f3                	div    %bl
     489:	88 e6                	mov    %ah,%dh
     48b:	88 c5                	mov    %al,%ch
     48d:	8a 46 06             	mov    0x6(%esi),%al
     490:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
     495:	cd 13                	int    $0x13
     497:	1f                   	pop    %ds
     498:	07                   	pop    %es
     499:	61                   	popa   
     49a:	c9                   	leave  
     49b:	66 5a                	pop    %dx
     49d:	ff e2                	jmp    *%edx

0000049f <_RunProgress>:
     49f:	c8 00 00 00          	enter  $0x0,$0x0
     4a3:	8c c8                	mov    %cs,%eax
     4a5:	8e d8                	mov    %eax,%ds
     4a7:	8e c0                	mov    %eax,%es
     4a9:	8b 5e 06             	mov    0x6(%esi),%ebx
     4ac:	c7 06 96 03 00 01    	movl   $0x1000396,(%esi)
     4b2:	89 1e                	mov    %ebx,(%esi)
     4b4:	98                   	cwtl   
     4b5:	03 66 89             	add    -0x77(%esi),%esp
     4b8:	26                   	es
     4b9:	aa                   	stos   %al,%es:(%edi)
     4ba:	03 26                	add    (%esi),%esp
     4bc:	ff 1e                	lcall  *(%esi)
     4be:	96                   	xchg   %eax,%esi
     4bf:	03 8c c8 8e d8 8e c0 	add    -0x3f712772(%eax,%ecx,8),%ecx

000004c0 <S>:
     4c0:	8c c8                	mov    %cs,%eax
     4c2:	8e d8                	mov    %eax,%ds
     4c4:	8e c0                	mov    %eax,%es
     4c6:	8e d0                	mov    %eax,%ss
     4c8:	66 8b 26             	mov    (%esi),%sp
     4cb:	aa                   	stos   %al,%es:(%edi)
     4cc:	03 b4 00 cd 16 c9 66 	add    0x66c916cd(%eax,%eax,1),%esi
     4d3:	5a                   	pop    %edx
     4d4:	ff e2                	jmp    *%edx

000004d6 <_Schedule_once>:
     4d6:	c8 00 00 00          	enter  $0x0,$0x0
     4da:	cd 41                	int    $0x41
     4dc:	c9                   	leave  
     4dd:	66 5a                	pop    %dx
     4df:	ff e2                	jmp    *%edx

000004e1 <_fork_user>:
     4e1:	c8 00 00 00          	enter  $0x0,$0x0
     4e5:	cd 39                	int    $0x39
     4e7:	c9                   	leave  
     4e8:	66 5a                	pop    %dx
     4ea:	ff e2                	jmp    *%edx

000004ec <_Schedule>:
     4ec:	c8 00 00 00          	enter  $0x0,$0x0
     4f0:	16                   	push   %ss
     4f1:	cd 23                	int    $0x23
     4f3:	17                   	pop    %ss
     4f4:	c9                   	leave  
     4f5:	66 5a                	pop    %dx
     4f7:	ff e2                	jmp    *%edx

000004f9 <_wait>:
     4f9:	c8 00 00 00          	enter  $0x0,$0x0
     4fd:	cd 3b                	int    $0x3b
     4ff:	c9                   	leave  
     500:	66 5a                	pop    %dx
     502:	ff e2                	jmp    *%edx

00000504 <_exit>:
     504:	c8 00 00 00          	enter  $0x0,$0x0
     508:	66 67 8b 45 06       	mov    0x6(%di),%ax
     50d:	66 50                	push   %ax
     50f:	cd 2a                	int    $0x2a
     511:	c9                   	leave  
     512:	66 5a                	pop    %dx
     514:	ff e2                	jmp    *%edx

00000516 <_GetSem>:
     516:	c8 00 00 00          	enter  $0x0,$0x0
     51a:	66 67 8b 45 06       	mov    0x6(%di),%ax
     51f:	66 50                	push   %ax
     521:	cd 3c                	int    $0x3c
     523:	c9                   	leave  
     524:	66 5a                	pop    %dx
     526:	ff e2                	jmp    *%edx

00000528 <_FreeSem>:
     528:	c8 00 00 00          	enter  $0x0,$0x0
     52c:	66 67 8b 45 06       	mov    0x6(%di),%ax
     531:	66 50                	push   %ax
     533:	cd 3d                	int    $0x3d
     535:	c9                   	leave  
     536:	66 5a                	pop    %dx
     538:	ff e2                	jmp    *%edx

0000053a <_Pr>:
     53a:	c8 00 00 00          	enter  $0x0,$0x0
     53e:	66 67 8b 45 06       	mov    0x6(%di),%ax
     543:	66 50                	push   %ax
     545:	cd 3e                	int    $0x3e
     547:	c9                   	leave  
     548:	66 5a                	pop    %dx
     54a:	ff e2                	jmp    *%edx

0000054c <_Vr>:
     54c:	c8 00 00 00          	enter  $0x0,$0x0
     550:	66 67 8b 45 06       	mov    0x6(%di),%ax
     555:	66 50                	push   %ax
     557:	cd 3f                	int    $0x3f
     559:	c9                   	leave  
     55a:	66 5a                	pop    %dx
     55c:	ff e2                	jmp    *%edx

0000055e <_Schedule_PV>:
     55e:	c8 00 00 00          	enter  $0x0,$0x0
     562:	cd 23                	int    $0x23
     564:	c9                   	leave  
     565:	66 5a                	pop    %dx
     567:	ff e2                	jmp    *%edx

00000569 <_SetINT20h>:
     569:	fa                   	cli    
     56a:	1e                   	push   %ds
     56b:	06                   	push   %es
     56c:	8c c8                	mov    %cs,%eax
     56e:	8e d8                	mov    %eax,%ds
     570:	8e c0                	mov    %eax,%es
     572:	8c 16                	mov    %ss,(%esi)
     574:	b2 03                	mov    $0x3,%dl
     576:	8e d0                	mov    %eax,%ss
     578:	66 89 26             	mov    %sp,(%esi)
     57b:	ae                   	scas   %es:(%edi),%al
     57c:	03 66 8b             	add    -0x75(%esi),%esp
     57f:	26                   	es
     580:	aa                   	stos   %al,%es:(%edi)
     581:	03 53 51             	add    0x51(%ebx),%edx
     584:	52                   	push   %edx
     585:	b4 01                	mov    $0x1,%ah
     587:	cd 16                	int    $0x16
     589:	5a                   	pop    %edx
     58a:	59                   	pop    %ecx
     58b:	5b                   	pop    %ebx
     58c:	8e 16                	mov    (%esi),%ss
     58e:	b2 03                	mov    $0x3,%dl
     590:	66 8b 26             	mov    (%esi),%sp
     593:	ae                   	scas   %es:(%edi),%al
     594:	03 07                	add    (%edi),%eax
     596:	1f                   	pop    %ds
     597:	74 0a                	je     5a3 <going_on>
     599:	50                   	push   %eax
     59a:	b4 00                	mov    $0x0,%ah
     59c:	cd 16                	int    $0x16
     59e:	58                   	pop    %eax
     59f:	fb                   	sti    
     5a0:	cd 38                	int    $0x38
     5a2:	cf                   	iret   

000005a3 <going_on>:
     5a3:	fb                   	sti    
     5a4:	cf                   	iret   

000005a5 <_SetINT08h_turn_around>:
     5a5:	e8 39 06 fa 6a       	call   6afa0be3 <_end+0x6af9b33f>
     5aa:	00 e8                	add    %ch,%al
     5ac:	b0 12                	mov    $0x12,%al
     5ae:	e8 a4 06 b0 20       	call   20b00c57 <_end+0x20afb3b3>
     5b3:	e6 20                	out    %al,$0x20
     5b5:	e6 a0                	out    %al,$0xa0
     5b7:	fb                   	sti    
     5b8:	cf                   	iret   

000005b9 <_SetINT08h>:
     5b9:	60                   	pusha  
     5ba:	0f a8                	push   %gs
     5bc:	1e                   	push   %ds
     5bd:	06                   	push   %es
     5be:	16                   	push   %ss
     5bf:	8c c8                	mov    %cs,%eax
     5c1:	8e c0                	mov    %eax,%es
     5c3:	8e d8                	mov    %eax,%ds
     5c5:	8e d0                	mov    %eax,%ss
     5c7:	fe 0e                	decb   (%esi)
     5c9:	90                   	nop
     5ca:	03 75 4f             	add    0x4f(%ebp),%esi

000005cd <notc>:
     5cd:	80 3e 91             	cmpb   $0x91,(%esi)
     5d0:	03 2d 75 07 c6 06    	add    0x6c60775,%ebp
     5d6:	91                   	xchg   %eax,%ecx
     5d7:	03 5c eb 2a          	add    0x2a(%ebx,%ebp,8),%ebx

000005db <changleft>:
     5db:	80 3e 91             	cmpb   $0x91,(%esi)
     5de:	03 5c 75 07          	add    0x7(%ebp,%esi,2),%ebx
     5e2:	c6 06 91             	movb   $0x91,(%esi)
     5e5:	03 7c eb 1c          	add    0x1c(%ebx,%ebp,8),%edi

000005e9 <changright>:
     5e9:	80 3e 91             	cmpb   $0x91,(%esi)
     5ec:	03 7c 75 07          	add    0x7(%ebp,%esi,2),%edi
     5f0:	c6 06 91             	movb   $0x91,(%esi)
     5f3:	03 2f                	add    (%edi),%ebp
     5f5:	eb 0e                	jmp    605 <show>

000005f7 <changheng>:
     5f7:	80 3e 91             	cmpb   $0x91,(%esi)
     5fa:	03 2f                	add    (%edi),%ebp
     5fc:	75 cf                	jne    5cd <notc>
     5fe:	c6 06 91             	movb   $0x91,(%esi)
     601:	03 2d eb 00 b9 00    	add    0xb900eb,%ebp

00000605 <show>:
     605:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
     60a:	b4 09                	mov    $0x9,%ah
     60c:	8a 26                	mov    (%esi),%ah
     60e:	b6 03                	mov    $0x3,%dh
     610:	a0 91 03 65 a3       	mov    0xa3650391,%al
     615:	8e 00                	mov    (%eax),%es
     617:	c6 06 90             	movb   $0x90,(%esi)
     61a:	03 08                	add    (%eax),%ecx

0000061c <end>:
     61c:	b0 20                	mov    $0x20,%al
     61e:	e6 20                	out    %al,$0x20
     620:	e6 a0                	out    %al,$0xa0
     622:	17                   	pop    %ss
     623:	07                   	pop    %es
     624:	1f                   	pop    %ds
     625:	0f a9                	pop    %gs
     627:	61                   	popa   
     628:	fb                   	sti    
     629:	cf                   	iret   

0000062a <_SetINT09h>:
     62a:	fa                   	cli    
     62b:	1e                   	push   %ds
     62c:	06                   	push   %es
     62d:	8c c8                	mov    %cs,%eax
     62f:	8e d8                	mov    %eax,%ds
     631:	8e c0                	mov    %eax,%es
     633:	8e d0                	mov    %eax,%ss
     635:	8c 16                	mov    %ss,(%esi)
     637:	b2 03                	mov    $0x3,%dl
     639:	8e d0                	mov    %eax,%ss
     63b:	66 89 26             	mov    %sp,(%esi)
     63e:	ae                   	scas   %es:(%edi),%al
     63f:	03 66 8b             	add    -0x75(%esi),%esp
     642:	26                   	es
     643:	aa                   	stos   %al,%es:(%edi)
     644:	03 60 b9             	add    -0x47(%eax),%esp
     647:	00 b8 8e e9 8a 26    	add    %bh,0x268ae98e(%eax)
     64d:	b6 03                	mov    $0x3,%dh
     64f:	b0 4f                	mov    $0x4f,%al
     651:	65 a3 78 00 b0 55    	mov    %eax,%gs:0x55b00078
     657:	65 a3 7a 00 b0 43    	mov    %eax,%gs:0x43b0007a
     65d:	65 a3 7c 00 b0 48    	mov    %eax,%gs:0x48b0007c
     663:	65 a3 7e 00 b0 53    	mov    %eax,%gs:0x53b0007e
     669:	65 a3 80 00 b0 21    	mov    %eax,%gs:0x21b00080
     66f:	65 a3 82 00 b0 4f    	mov    %eax,%gs:0x4fb00082
     675:	65 a3 84 00 b0 55    	mov    %eax,%gs:0x55b00084
     67b:	65 a3 86 00 b0 43    	mov    %eax,%gs:0x43b00086
     681:	65 a3 88 00 b0 48    	mov    %eax,%gs:0x48b00088
     687:	65 a3 8a 00 b0 21    	mov    %eax,%gs:0x21b0008a
     68d:	65 a3 8c 00 61 80    	mov    %eax,%gs:0x8061008c
     693:	fc                   	cld    
     694:	06                   	push   %es
     695:	75 06                	jne    69d <cont>
     697:	b4 01                	mov    $0x1,%ah
     699:	88 26                	mov    %ah,(%esi)
     69b:	b6 03                	mov    $0x3,%dh

0000069d <cont>:
     69d:	fe 06                	incb   (%esi)
     69f:	b6 03                	mov    $0x3,%dh
     6a1:	8c c8                	mov    %cs,%eax
     6a3:	8e c0                	mov    %eax,%es
     6a5:	fb                   	sti    
     6a6:	9c                   	pushf  
     6a7:	26 ff 1e             	lcall  *%es:(%esi)
     6aa:	92                   	xchg   %eax,%edx
     6ab:	03 8e 16 b2 03 66    	add    0x6603b216(%esi),%ecx
     6b1:	8b 26                	mov    (%esi),%esp
     6b3:	ae                   	scas   %es:(%edi),%al
     6b4:	03 07                	add    (%edi),%eax
     6b6:	1f                   	pop    %ds
     6b7:	cf                   	iret   

000006b8 <_SetINT33h>:
     6b8:	fa                   	cli    
     6b9:	c8 00 00 00          	enter  $0x0,$0x0
     6bd:	60                   	pusha  
     6be:	1e                   	push   %ds
     6bf:	0f a8                	push   %gs
     6c1:	06                   	push   %es
     6c2:	8c c8                	mov    %cs,%eax
     6c4:	8e c0                	mov    %eax,%es
     6c6:	8e d8                	mov    %eax,%ds
     6c8:	8c 16                	mov    %ss,(%esi)
     6ca:	b2 03                	mov    $0x3,%dl
     6cc:	8e d0                	mov    %eax,%ss
     6ce:	66 89 26             	mov    %sp,(%esi)
     6d1:	ae                   	scas   %es:(%edi),%al
     6d2:	03 66 8b             	add    -0x75(%esi),%esp
     6d5:	26                   	es
     6d6:	aa                   	stos   %al,%es:(%edi)
     6d7:	03 6a 00             	add    0x0(%edx),%ebp
     6da:	e8 06 08 8e 16       	call   168e0ee5 <_end+0x168db641>
     6df:	b2 03                	mov    $0x3,%dl
     6e1:	66 8b 26             	mov    (%esi),%sp
     6e4:	ae                   	scas   %es:(%edi),%al
     6e5:	03 07                	add    (%edi),%eax
     6e7:	0f a9                	pop    %gs
     6e9:	1f                   	pop    %ds
     6ea:	61                   	popa   
     6eb:	fb                   	sti    
     6ec:	c9                   	leave  
     6ed:	cf                   	iret   

000006ee <_SetINT34h>:
     6ee:	fa                   	cli    
     6ef:	c8 00 00 00          	enter  $0x0,$0x0
     6f3:	60                   	pusha  
     6f4:	1e                   	push   %ds
     6f5:	0f a8                	push   %gs
     6f7:	06                   	push   %es
     6f8:	8c c8                	mov    %cs,%eax
     6fa:	8e c0                	mov    %eax,%es
     6fc:	8e d8                	mov    %eax,%ds
     6fe:	8c 16                	mov    %ss,(%esi)
     700:	b2 03                	mov    $0x3,%dl
     702:	8e d0                	mov    %eax,%ss
     704:	66 89 26             	mov    %sp,(%esi)
     707:	ae                   	scas   %es:(%edi),%al
     708:	03 66 8b             	add    -0x75(%esi),%esp
     70b:	26                   	es
     70c:	aa                   	stos   %al,%es:(%edi)
     70d:	03 6a 00             	add    0x0(%edx),%ebp
     710:	e8 80 08 8e 16       	call   168e0f95 <_end+0x168db6f1>
     715:	b2 03                	mov    $0x3,%dl
     717:	66 8b 26             	mov    (%esi),%sp
     71a:	ae                   	scas   %es:(%edi),%al
     71b:	03 07                	add    (%edi),%eax
     71d:	0f a9                	pop    %gs
     71f:	1f                   	pop    %ds
     720:	61                   	popa   
     721:	fb                   	sti    
     722:	c9                   	leave  
     723:	cf                   	iret   

00000724 <_SetINT35h>:
     724:	60                   	pusha  
     725:	1e                   	push   %ds
     726:	0f a8                	push   %gs
     728:	06                   	push   %es
     729:	8c c8                	mov    %cs,%eax
     72b:	8e c0                	mov    %eax,%es
     72d:	8e d8                	mov    %eax,%ds
     72f:	8c 16                	mov    %ss,(%esi)
     731:	b2 03                	mov    $0x3,%dl
     733:	8e d0                	mov    %eax,%ss
     735:	66 89 26             	mov    %sp,(%esi)
     738:	ae                   	scas   %es:(%edi),%al
     739:	03 66 8b             	add    -0x75(%esi),%esp
     73c:	26                   	es
     73d:	aa                   	stos   %al,%es:(%edi)
     73e:	03 6a 00             	add    0x0(%edx),%ebp
     741:	e8 2e 09 8e 16       	call   168e1074 <_end+0x168db7d0>
     746:	b2 03                	mov    $0x3,%dl
     748:	66 8b 26             	mov    (%esi),%sp
     74b:	ae                   	scas   %es:(%edi),%al
     74c:	03 07                	add    (%edi),%eax
     74e:	0f a9                	pop    %gs
     750:	1f                   	pop    %ds
     751:	61                   	popa   
     752:	fb                   	sti    
     753:	cf                   	iret   

00000754 <_SetINT36h>:
     754:	60                   	pusha  
     755:	1e                   	push   %ds
     756:	0f a8                	push   %gs
     758:	06                   	push   %es
     759:	8c c8                	mov    %cs,%eax
     75b:	8e c0                	mov    %eax,%es
     75d:	8e d8                	mov    %eax,%ds
     75f:	8c 16                	mov    %ss,(%esi)
     761:	b2 03                	mov    $0x3,%dl
     763:	8e d0                	mov    %eax,%ss
     765:	66 89 26             	mov    %sp,(%esi)
     768:	ae                   	scas   %es:(%edi),%al
     769:	03 66 8b             	add    -0x75(%esi),%esp
     76c:	26                   	es
     76d:	aa                   	stos   %al,%es:(%edi)
     76e:	03 6a 00             	add    0x0(%edx),%ebp
     771:	e8 84 09 8e 16       	call   168e10fa <_end+0x168db856>
     776:	b2 03                	mov    $0x3,%dl
     778:	66 8b 26             	mov    (%esi),%sp
     77b:	ae                   	scas   %es:(%edi),%al
     77c:	03 07                	add    (%edi),%eax
     77e:	0f a9                	pop    %gs
     780:	1f                   	pop    %ds
     781:	61                   	popa   
     782:	fb                   	sti    
     783:	cf                   	iret   

00000784 <_SetINT21h>:
     784:	c8 00 00 00          	enter  $0x0,$0x0
     788:	60                   	pusha  
     789:	1e                   	push   %ds
     78a:	0f a8                	push   %gs
     78c:	06                   	push   %es
     78d:	8c c8                	mov    %cs,%eax
     78f:	8e c0                	mov    %eax,%es
     791:	8e d8                	mov    %eax,%ds
     793:	8b 46 08             	mov    0x8(%esi),%eax
     796:	80 fc 00             	cmp    $0x0,%ah
     799:	74 16                	je     7b1 <fn0>
     79b:	80 fc 01             	cmp    $0x1,%ah
     79e:	74 21                	je     7c1 <fn1>
     7a0:	80 fc 02             	cmp    $0x2,%ah
     7a3:	74 3d                	je     7e2 <fn2>
     7a5:	80 fc 03             	cmp    $0x3,%ah
     7a8:	74 5f                	je     809 <fn3>
     7aa:	07                   	pop    %es
     7ab:	0f a9                	pop    %gs
     7ad:	1f                   	pop    %ds
     7ae:	61                   	popa   
     7af:	c9                   	leave  
     7b0:	cf                   	iret   

000007b1 <fn0>:
     7b1:	8b 46 0a             	mov    0xa(%esi),%eax
     7b4:	b4 0e                	mov    $0xe,%ah
     7b6:	b3 00                	mov    $0x0,%bl
     7b8:	cd 10                	int    $0x10
     7ba:	07                   	pop    %es
     7bb:	0f a9                	pop    %gs
     7bd:	1f                   	pop    %ds
     7be:	61                   	popa   
     7bf:	c9                   	leave  
     7c0:	cf                   	iret   

000007c1 <fn1>:
     7c1:	66 83 ec 04          	sub    $0x4,%sp
     7c5:	b4 00                	mov    $0x0,%ah
     7c7:	cd 16                	int    $0x16
     7c9:	b4 00                	mov    $0x0,%ah
     7cb:	66 67 89 04          	mov    %ax,(%si)
     7cf:	24 66                	and    $0x66,%al
     7d1:	67 8b 04             	mov    (%si),%eax
     7d4:	24 66                	and    $0x66,%al
     7d6:	83 c4 04             	add    $0x4,%esp
     7d9:	8e e0                	mov    %eax,%fs
     7db:	07                   	pop    %es
     7dc:	0f a9                	pop    %gs
     7de:	1f                   	pop    %ds
     7df:	61                   	popa   
     7e0:	c9                   	leave  
     7e1:	cf                   	iret   

000007e2 <fn2>:
     7e2:	66 83 ec 04          	sub    $0x4,%sp
     7e6:	b4 00                	mov    $0x0,%ah
     7e8:	cd 16                	int    $0x16
     7ea:	b4 00                	mov    $0x0,%ah
     7ec:	66 67 89 04          	mov    %ax,(%si)
     7f0:	24 66                	and    $0x66,%al
     7f2:	67 8b 04             	mov    (%si),%eax
     7f5:	24 b4                	and    $0xb4,%al
     7f7:	0e                   	push   %cs
     7f8:	b3 00                	mov    $0x0,%bl
     7fa:	cd 10                	int    $0x10
     7fc:	66 83 c4 04          	add    $0x4,%sp
     800:	8e e0                	mov    %eax,%fs
     802:	07                   	pop    %es
     803:	0f a9                	pop    %gs
     805:	1f                   	pop    %ds
     806:	61                   	popa   
     807:	c9                   	leave  
     808:	cf                   	iret   

00000809 <fn3>:
     809:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
     80e:	07                   	pop    %es
     80f:	0f a9                	pop    %gs
     811:	1f                   	pop    %ds
     812:	61                   	popa   
     813:	c9                   	leave  
     814:	cf                   	iret   

00000815 <_SetINT37h>:
     815:	fa                   	cli    
     816:	e8 90 04 cf fa       	call   facf0cab <_end+0xfaceb407>

0000081a <_SetINT38h>:
     81a:	fa                   	cli    
     81b:	50                   	push   %eax
     81c:	1e                   	push   %ds
     81d:	8c c8                	mov    %cs,%eax
     81f:	8e d8                	mov    %eax,%ds
     821:	6a 00                	push   $0x0
     823:	e8 43 11 1f 58       	call   581f196b <_end+0x581ec0c7>
     828:	fb                   	sti    
     829:	cf                   	iret   

0000082a <_SetINT39h>:
     82a:	fa                   	cli    
     82b:	c8 00 00 00          	enter  $0x0,$0x0
     82f:	1e                   	push   %ds
     830:	6a 00                	push   $0x0
     832:	8c c8                	mov    %cs,%eax
     834:	8e d8                	mov    %eax,%ds
     836:	e8 2c 13 1f c9       	call   c91f1b67 <_end+0xc91ec2c3>
     83b:	fb                   	sti    
     83c:	cf                   	iret   

0000083d <_SetINT41h>:
     83d:	fa                   	cli    
     83e:	e8 a0 03 e8 11       	call   11e80be3 <_end+0x11e7b33f>
     843:	04 b0                	add    $0xb0,%al
     845:	20 e6                	and    %ah,%dh
     847:	20 e6                	and    %ah,%dh
     849:	a0 fb cf fa c8       	mov    0xc8facffb,%al

0000084c <_SetINT2Ah>:
     84c:	fa                   	cli    
     84d:	c8 00 00 00          	enter  $0x0,$0x0
     851:	1e                   	push   %ds
     852:	66 67 8b 45 08       	mov    0x8(%di),%ax
     857:	66 50                	push   %ax
     859:	6a 00                	push   $0x0
     85b:	8c c8                	mov    %cs,%eax
     85d:	8e d8                	mov    %eax,%ds
     85f:	e8 98 15 58 1f       	call   1f581dfc <_end+0x1f57c558>
     864:	c9                   	leave  
     865:	fb                   	sti    
     866:	cf                   	iret   

00000867 <_SetINT3Bh>:
     867:	fa                   	cli    
     868:	c8 00 00 00          	enter  $0x0,$0x0
     86c:	1e                   	push   %ds
     86d:	6a 00                	push   $0x0
     86f:	8c c8                	mov    %cs,%eax
     871:	8e d8                	mov    %eax,%ds
     873:	e8 51 16 1f c9       	call   c91f1ec9 <_end+0xc91ec625>
     878:	fb                   	sti    
     879:	cf                   	iret   

0000087a <_SetINT3Ch>:
     87a:	fa                   	cli    
     87b:	c8 00 00 00          	enter  $0x0,$0x0
     87f:	1e                   	push   %ds
     880:	66 67 8b 45 08       	mov    0x8(%di),%ax
     885:	66 50                	push   %ax
     887:	6a 00                	push   $0x0
     889:	8c c8                	mov    %cs,%eax
     88b:	8e d8                	mov    %eax,%ds
     88d:	e8 8c 1a 66 83       	call   8366231e <_end+0x8365ca7a>
     892:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     895:	c9                   	leave  
     896:	fb                   	sti    
     897:	cf                   	iret   

00000898 <_SetINT3Dh>:
     898:	fa                   	cli    
     899:	c8 00 00 00          	enter  $0x0,$0x0
     89d:	1e                   	push   %ds
     89e:	66 67 8b 45 08       	mov    0x8(%di),%ax
     8a3:	66 50                	push   %ax
     8a5:	6a 00                	push   $0x0
     8a7:	8c c8                	mov    %cs,%eax
     8a9:	8e d8                	mov    %eax,%ds
     8ab:	e8 46 1b 66 83       	call   836623f6 <_end+0x8365cb52>
     8b0:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     8b3:	c9                   	leave  
     8b4:	fb                   	sti    
     8b5:	cf                   	iret   

000008b6 <_SetINT3Eh>:
     8b6:	c8 00 00 00          	enter  $0x0,$0x0
     8ba:	1e                   	push   %ds
     8bb:	66 67 8b 45 08       	mov    0x8(%di),%ax
     8c0:	66 50                	push   %ax
     8c2:	6a 00                	push   $0x0
     8c4:	8c c8                	mov    %cs,%eax
     8c6:	8e d8                	mov    %eax,%ds
     8c8:	e8 63 1b 66 83       	call   83662430 <_end+0x8365cb8c>
     8cd:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     8d0:	c9                   	leave  
     8d1:	cf                   	iret   

000008d2 <_SetINT3Fh>:
     8d2:	c8 00 00 00          	enter  $0x0,$0x0
     8d6:	1e                   	push   %ds
     8d7:	66 67 8b 45 08       	mov    0x8(%di),%ax
     8dc:	66 50                	push   %ax
     8de:	6a 00                	push   $0x0
     8e0:	8c c8                	mov    %cs,%eax
     8e2:	8e d8                	mov    %eax,%ds
     8e4:	e8 93 1c 66 83       	call   8366257c <_end+0x8365ccd8>
     8e9:	c4 04 1f             	les    (%edi,%ebx,1),%eax
     8ec:	c9                   	leave  
     8ed:	cf                   	iret   

000008ee <_initialInt>:
     8ee:	c8 00 00 00          	enter  $0x0,$0x0
     8f2:	60                   	pusha  
     8f3:	06                   	push   %es
     8f4:	1e                   	push   %ds
     8f5:	8c c8                	mov    %cs,%eax
     8f7:	8e d8                	mov    %eax,%ds
     8f9:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     8fe:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
     903:	00 f7                	add    %dh,%bh
     905:	e3 89                	jecxz  890 <_SetINT3Ch+0x16>
     907:	c7                   	(bad)  
     908:	b8 69 05 26 89       	mov    $0x89260569,%eax
     90d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     912:	45                   	inc    %ebp
     913:	02 1f                	add    (%edi),%bl
     915:	07                   	pop    %es
     916:	61                   	popa   
     917:	60                   	pusha  
     918:	06                   	push   %es
     919:	1e                   	push   %ds
     91a:	8c c8                	mov    %cs,%eax
     91c:	8e d8                	mov    %eax,%ds
     91e:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     923:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
     928:	00 f7                	add    %dh,%bh
     92a:	e3 89                	jecxz  8b5 <_SetINT3Dh+0x1d>
     92c:	c7                   	(bad)  
     92d:	b8 b8 06 26 89       	mov    $0x892606b8,%eax
     932:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     937:	45                   	inc    %ebp
     938:	02 1f                	add    (%edi),%bl
     93a:	07                   	pop    %es
     93b:	61                   	popa   
     93c:	60                   	pusha  
     93d:	06                   	push   %es
     93e:	1e                   	push   %ds
     93f:	8c c8                	mov    %cs,%eax
     941:	8e d8                	mov    %eax,%ds
     943:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     948:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
     94d:	00 f7                	add    %dh,%bh
     94f:	e3 89                	jecxz  8da <_SetINT3Fh+0x8>
     951:	c7                   	(bad)  
     952:	b8 ee 06 26 89       	mov    $0x892606ee,%eax
     957:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     95c:	45                   	inc    %ebp
     95d:	02 1f                	add    (%edi),%bl
     95f:	07                   	pop    %es
     960:	61                   	popa   
     961:	60                   	pusha  
     962:	06                   	push   %es
     963:	1e                   	push   %ds
     964:	8c c8                	mov    %cs,%eax
     966:	8e d8                	mov    %eax,%ds
     968:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     96d:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
     972:	00 f7                	add    %dh,%bh
     974:	e3 89                	jecxz  8ff <_initialInt+0x11>
     976:	c7                   	(bad)  
     977:	b8 24 07 26 89       	mov    $0x89260724,%eax
     97c:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     981:	45                   	inc    %ebp
     982:	02 1f                	add    (%edi),%bl
     984:	07                   	pop    %es
     985:	61                   	popa   
     986:	60                   	pusha  
     987:	06                   	push   %es
     988:	1e                   	push   %ds
     989:	8c c8                	mov    %cs,%eax
     98b:	8e d8                	mov    %eax,%ds
     98d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     992:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
     997:	00 f7                	add    %dh,%bh
     999:	e3 89                	jecxz  924 <_initialInt+0x36>
     99b:	c7                   	(bad)  
     99c:	b8 54 07 26 89       	mov    $0x89260754,%eax
     9a1:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9a6:	45                   	inc    %ebp
     9a7:	02 1f                	add    (%edi),%bl
     9a9:	07                   	pop    %es
     9aa:	61                   	popa   
     9ab:	60                   	pusha  
     9ac:	06                   	push   %es
     9ad:	1e                   	push   %ds
     9ae:	8c c8                	mov    %cs,%eax
     9b0:	8e d8                	mov    %eax,%ds
     9b2:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     9b7:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
     9bc:	00 f7                	add    %dh,%bh
     9be:	e3 89                	jecxz  949 <_initialInt+0x5b>
     9c0:	c7                   	(bad)  
     9c1:	b8 84 07 26 89       	mov    $0x89260784,%eax
     9c6:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9cb:	45                   	inc    %ebp
     9cc:	02 1f                	add    (%edi),%bl
     9ce:	07                   	pop    %es
     9cf:	61                   	popa   
     9d0:	60                   	pusha  
     9d1:	06                   	push   %es
     9d2:	1e                   	push   %ds
     9d3:	8c c8                	mov    %cs,%eax
     9d5:	8e d8                	mov    %eax,%ds
     9d7:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     9dc:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
     9e1:	00 f7                	add    %dh,%bh
     9e3:	e3 89                	jecxz  96e <_initialInt+0x80>
     9e5:	c7                   	(bad)  
     9e6:	b8 15 08 26 89       	mov    $0x89260815,%eax
     9eb:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     9f0:	45                   	inc    %ebp
     9f1:	02 1f                	add    (%edi),%bl
     9f3:	07                   	pop    %es
     9f4:	61                   	popa   
     9f5:	60                   	pusha  
     9f6:	06                   	push   %es
     9f7:	1e                   	push   %ds
     9f8:	8c c8                	mov    %cs,%eax
     9fa:	8e d8                	mov    %eax,%ds
     9fc:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a01:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
     a06:	00 f7                	add    %dh,%bh
     a08:	e3 89                	jecxz  993 <_initialInt+0xa5>
     a0a:	c7                   	(bad)  
     a0b:	b8 1a 08 26 89       	mov    $0x8926081a,%eax
     a10:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a15:	45                   	inc    %ebp
     a16:	02 1f                	add    (%edi),%bl
     a18:	07                   	pop    %es
     a19:	61                   	popa   
     a1a:	60                   	pusha  
     a1b:	06                   	push   %es
     a1c:	1e                   	push   %ds
     a1d:	8c c8                	mov    %cs,%eax
     a1f:	8e d8                	mov    %eax,%ds
     a21:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a26:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
     a2b:	00 f7                	add    %dh,%bh
     a2d:	e3 89                	jecxz  9b8 <_initialInt+0xca>
     a2f:	c7                   	(bad)  
     a30:	b8 2a 08 26 89       	mov    $0x8926082a,%eax
     a35:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a3a:	45                   	inc    %ebp
     a3b:	02 1f                	add    (%edi),%bl
     a3d:	07                   	pop    %es
     a3e:	61                   	popa   
     a3f:	60                   	pusha  
     a40:	06                   	push   %es
     a41:	1e                   	push   %ds
     a42:	8c c8                	mov    %cs,%eax
     a44:	8e d8                	mov    %eax,%ds
     a46:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a4b:	b8 2a 00 bb 04       	mov    $0x4bb002a,%eax
     a50:	00 f7                	add    %dh,%bh
     a52:	e3 89                	jecxz  9dd <_initialInt+0xef>
     a54:	c7                   	(bad)  
     a55:	b8 4c 08 26 89       	mov    $0x8926084c,%eax
     a5a:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a5f:	45                   	inc    %ebp
     a60:	02 1f                	add    (%edi),%bl
     a62:	07                   	pop    %es
     a63:	61                   	popa   
     a64:	60                   	pusha  
     a65:	06                   	push   %es
     a66:	1e                   	push   %ds
     a67:	8c c8                	mov    %cs,%eax
     a69:	8e d8                	mov    %eax,%ds
     a6b:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a70:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
     a75:	00 f7                	add    %dh,%bh
     a77:	e3 89                	jecxz  a02 <_initialInt+0x114>
     a79:	c7                   	(bad)  
     a7a:	b8 3d 08 26 89       	mov    $0x8926083d,%eax
     a7f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     a84:	45                   	inc    %ebp
     a85:	02 1f                	add    (%edi),%bl
     a87:	07                   	pop    %es
     a88:	61                   	popa   
     a89:	60                   	pusha  
     a8a:	06                   	push   %es
     a8b:	1e                   	push   %ds
     a8c:	8c c8                	mov    %cs,%eax
     a8e:	8e d8                	mov    %eax,%ds
     a90:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     a95:	b8 23 00 bb 04       	mov    $0x4bb0023,%eax
     a9a:	00 f7                	add    %dh,%bh
     a9c:	e3 89                	jecxz  a27 <_initialInt+0x139>
     a9e:	c7                   	(bad)  
     a9f:	b8 a5 05 26 89       	mov    $0x892605a5,%eax
     aa4:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     aa9:	45                   	inc    %ebp
     aaa:	02 1f                	add    (%edi),%bl
     aac:	07                   	pop    %es
     aad:	61                   	popa   
     aae:	60                   	pusha  
     aaf:	06                   	push   %es
     ab0:	1e                   	push   %ds
     ab1:	8c c8                	mov    %cs,%eax
     ab3:	8e d8                	mov    %eax,%ds
     ab5:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     aba:	b8 3b 00 bb 04       	mov    $0x4bb003b,%eax
     abf:	00 f7                	add    %dh,%bh
     ac1:	e3 89                	jecxz  a4c <_initialInt+0x15e>
     ac3:	c7                   	(bad)  
     ac4:	b8 67 08 26 89       	mov    $0x89260867,%eax
     ac9:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     ace:	45                   	inc    %ebp
     acf:	02 1f                	add    (%edi),%bl
     ad1:	07                   	pop    %es
     ad2:	61                   	popa   
     ad3:	60                   	pusha  
     ad4:	06                   	push   %es
     ad5:	1e                   	push   %ds
     ad6:	8c c8                	mov    %cs,%eax
     ad8:	8e d8                	mov    %eax,%ds
     ada:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     adf:	b8 3c 00 bb 04       	mov    $0x4bb003c,%eax
     ae4:	00 f7                	add    %dh,%bh
     ae6:	e3 89                	jecxz  a71 <_initialInt+0x183>
     ae8:	c7                   	(bad)  
     ae9:	b8 7a 08 26 89       	mov    $0x8926087a,%eax
     aee:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     af3:	45                   	inc    %ebp
     af4:	02 1f                	add    (%edi),%bl
     af6:	07                   	pop    %es
     af7:	61                   	popa   
     af8:	60                   	pusha  
     af9:	06                   	push   %es
     afa:	1e                   	push   %ds
     afb:	8c c8                	mov    %cs,%eax
     afd:	8e d8                	mov    %eax,%ds
     aff:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     b04:	b8 3d 00 bb 04       	mov    $0x4bb003d,%eax
     b09:	00 f7                	add    %dh,%bh
     b0b:	e3 89                	jecxz  a96 <_initialInt+0x1a8>
     b0d:	c7                   	(bad)  
     b0e:	b8 98 08 26 89       	mov    $0x89260898,%eax
     b13:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     b18:	45                   	inc    %ebp
     b19:	02 1f                	add    (%edi),%bl
     b1b:	07                   	pop    %es
     b1c:	61                   	popa   
     b1d:	60                   	pusha  
     b1e:	06                   	push   %es
     b1f:	1e                   	push   %ds
     b20:	8c c8                	mov    %cs,%eax
     b22:	8e d8                	mov    %eax,%ds
     b24:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     b29:	b8 3e 00 bb 04       	mov    $0x4bb003e,%eax
     b2e:	00 f7                	add    %dh,%bh
     b30:	e3 89                	jecxz  abb <_initialInt+0x1cd>
     b32:	c7                   	(bad)  
     b33:	b8 b6 08 26 89       	mov    $0x892608b6,%eax
     b38:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     b3d:	45                   	inc    %ebp
     b3e:	02 1f                	add    (%edi),%bl
     b40:	07                   	pop    %es
     b41:	61                   	popa   
     b42:	60                   	pusha  
     b43:	06                   	push   %es
     b44:	1e                   	push   %ds
     b45:	8c c8                	mov    %cs,%eax
     b47:	8e d8                	mov    %eax,%ds
     b49:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     b4e:	b8 3f 00 bb 04       	mov    $0x4bb003f,%eax
     b53:	00 f7                	add    %dh,%bh
     b55:	e3 89                	jecxz  ae0 <_initialInt+0x1f2>
     b57:	c7                   	(bad)  
     b58:	b8 d2 08 26 89       	mov    $0x892608d2,%eax
     b5d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     b62:	45                   	inc    %ebp
     b63:	02 1f                	add    (%edi),%bl
     b65:	07                   	pop    %es
     b66:	61                   	popa   
     b67:	c9                   	leave  
     b68:	66 5a                	pop    %dx
     b6a:	ff e2                	jmp    *%edx

00000b6c <_initialInt_09h>:
     b6c:	c8 00 00 00          	enter  $0x0,$0x0
     b70:	a1 24 00 a3 92       	mov    0x92a30024,%eax
     b75:	03 a1 26 00 a3 94    	add    -0x6b5cffda(%ecx),%esp
     b7b:	03 60 06             	add    0x6(%eax),%esp
     b7e:	1e                   	push   %ds
     b7f:	8c c8                	mov    %cs,%eax
     b81:	8e d8                	mov    %eax,%ds
     b83:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     b88:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
     b8d:	00 f7                	add    %dh,%bh
     b8f:	e3 89                	jecxz  b1a <_initialInt+0x22c>
     b91:	c7                   	(bad)  
     b92:	b8 2a 06 26 89       	mov    $0x8926062a,%eax
     b97:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     b9c:	45                   	inc    %ebp
     b9d:	02 1f                	add    (%edi),%bl
     b9f:	07                   	pop    %es
     ba0:	61                   	popa   
     ba1:	c9                   	leave  
     ba2:	66 5a                	pop    %dx
     ba4:	ff e2                	jmp    *%edx

00000ba6 <_initialInt_08h>:
     ba6:	c8 00 00 00          	enter  $0x0,$0x0
     baa:	b0 40                	mov    $0x40,%al
     bac:	e6 43                	out    %al,$0x43
     bae:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
     bb3:	88 e0                	mov    %ah,%al
     bb5:	e6 40                	out    %al,$0x40
     bb7:	60                   	pusha  
     bb8:	06                   	push   %es
     bb9:	1e                   	push   %ds
     bba:	8c c8                	mov    %cs,%eax
     bbc:	8e d8                	mov    %eax,%ds
     bbe:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
     bc3:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
     bc8:	00 f7                	add    %dh,%bh
     bca:	e3 89                	jecxz  b55 <_initialInt+0x267>
     bcc:	c7                   	(bad)  
     bcd:	b8 a5 05 26 89       	mov    $0x892605a5,%eax
     bd2:	05 8c c8 26 89       	add    $0x8926c88c,%eax
     bd7:	45                   	inc    %ebp
     bd8:	02 1f                	add    (%edi),%bl
     bda:	07                   	pop    %es
     bdb:	61                   	popa   
     bdc:	c9                   	leave  
     bdd:	66 5a                	pop    %dx
     bdf:	ff e2                	jmp    *%edx

00000be1 <_save>:
     be1:	66 89 26             	mov    %sp,(%esi)
     be4:	aa                   	stos   %al,%es:(%edi)
     be5:	03 1e                	add    (%esi),%ebx
     be7:	0e                   	push   %cs
     be8:	1f                   	pop    %ds
     be9:	8f 06                	popl   (%esi)
     beb:	9a 03 8f 06 9e 03 66 	lcall  $0x6603,$0x9e068f03
     bf2:	89 26                	mov    %esp,(%esi)
     bf4:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
     bf5:	03 66 89             	add    -0x77(%esi),%esp
     bf8:	36 a0 03 66 8b 36    	mov    %ss:0x368b6603,%al
     bfe:	84 47 66             	test   %al,0x66(%edi)
     c01:	83 c6 2c             	add    $0x2c,%esi
     c04:	67 8f 06 67 8f       	popl   -0x7099
     c09:	46                   	inc    %esi
     c0a:	04 67                	add    $0x67,%al
     c0c:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
     c13:	46                   	inc    %esi
     c14:	08 67 c7             	or     %ah,-0x39(%edi)
     c17:	46                   	inc    %esi
     c18:	0a 00                	or     (%eax),%al
     c1a:	00 66 67             	add    %ah,0x67(%esi)
     c1d:	89 66 fc             	mov    %esp,-0x4(%esi)
     c20:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
     c24:	8c de                	mov    %ds,%esi
     c26:	8e d6                	mov    %esi,%ss
     c28:	66 8b 26             	mov    (%esi),%sp
     c2b:	84 47 66             	test   %al,0x66(%edi)
     c2e:	83 c4 24             	add    $0x24,%esp
     c31:	6a 00                	push   $0x0
     c33:	ff 36                	pushl  (%esi)
     c35:	9a 03 6a 00 06 66 55 	lcall  $0x5566,$0x6006a03
     c3c:	66 57                	push   %di
     c3e:	66 ff 36             	pushw  (%esi)
     c41:	a0 03 66 52 66       	mov    0x66526603,%al
     c46:	51                   	push   %ecx
     c47:	66 53                	push   %bx
     c49:	66 50                	push   %ax
     c4b:	66 8b 26             	mov    (%esi),%sp
     c4e:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
     c4f:	03 a1 9e 03 ff e0    	add    -0x1f00fc62(%ecx),%esp

00000c55 <_restart>:
     c55:	66 89 26             	mov    %sp,(%esi)
     c58:	a6                   	cmpsb  %es:(%edi),%ds:(%esi)
     c59:	03 66 8b             	add    -0x75(%esi),%esp
     c5c:	26 84 47 66          	test   %al,%es:0x66(%edi)
     c60:	58                   	pop    %eax
     c61:	66 5b                	pop    %bx
     c63:	66 59                	pop    %cx
     c65:	66 5a                	pop    %dx
     c67:	66 5e                	pop    %si
     c69:	66 5f                	pop    %di
     c6b:	66 5d                	pop    %bp
     c6d:	07                   	pop    %es
     c6e:	8f 06                	popl   (%esi)
     c70:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     c71:	03 8f 06 9a 03 8f    	add    -0x70fc65fa(%edi),%ecx
     c77:	06                   	push   %es
     c78:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     c79:	03 66 89             	add    -0x77(%esi),%esp
     c7c:	36 a0 03 17 8f 06    	mov    %ss:0x68f1703,%al
     c82:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     c83:	03 66 89             	add    -0x77(%esi),%esp
     c86:	e6 66                	out    %al,$0x66
     c88:	67 8b 26 67 ff       	mov    -0x99,%esp
     c8d:	76 0c                	jbe    c9b <_restart+0x46>
     c8f:	67 ff 76 08          	pushl  0x8(%bp)
     c93:	67 ff 76 04          	pushl  0x4(%bp)
     c97:	66 8b 36             	mov    (%esi),%si
     c9a:	a0 03 8e 1e 9a       	mov    0x9a1e8e03,%al
     c9f:	03 50 b0             	add    -0x50(%eax),%edx
     ca2:	20 e6                	and    %ah,%dh
     ca4:	20 e6                	and    %ah,%dh
     ca6:	a0 58 cf c8 00       	mov    0xc8cf58,%al

00000ca9 <RTC_Timer>:
     ca9:	c8 00 00 00          	enter  $0x0,$0x0
     cad:	1e                   	push   %ds
     cae:	06                   	push   %es
     caf:	60                   	pusha  
     cb0:	8c c8                	mov    %cs,%eax
     cb2:	8e d8                	mov    %eax,%ds
     cb4:	8c c8                	mov    %cs,%eax
     cb6:	8e c0                	mov    %eax,%es
     cb8:	bf 20 41 b4 02       	mov    $0x2b44120,%edi
     cbd:	cd 1a                	int    $0x1a
     cbf:	88 e8                	mov    %ch,%al
     cc1:	b4 00                	mov    $0x0,%ah
     cc3:	b3 10                	mov    $0x10,%bl
     cc5:	f6 f3                	div    %bl
     cc7:	04 30                	add    $0x30,%al
     cc9:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
     ccf:	88 e8                	mov    %ch,%al
     cd1:	24 0f                	and    $0xf,%al
     cd3:	04 30                	add    $0x30,%al
     cd5:	88 45 01             	mov    %al,0x1(%ebp)
     cd8:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
     cdc:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
     ce0:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
     ce4:	b4 02                	mov    $0x2,%ah
     ce6:	cd 1a                	int    $0x1a
     ce8:	88 c8                	mov    %cl,%al
     cea:	b4 00                	mov    $0x0,%ah
     cec:	b3 10                	mov    $0x10,%bl
     cee:	f6 f3                	div    %bl
     cf0:	04 30                	add    $0x30,%al
     cf2:	88 45 05             	mov    %al,0x5(%ebp)
     cf5:	b4 02                	mov    $0x2,%ah
     cf7:	cd 1a                	int    $0x1a
     cf9:	88 c8                	mov    %cl,%al
     cfb:	24 0f                	and    $0xf,%al
     cfd:	04 30                	add    $0x30,%al
     cff:	88 45 06             	mov    %al,0x6(%ebp)
     d02:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
     d06:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
     d0a:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
     d0e:	8c c8                	mov    %cs,%eax
     d10:	8e d8                	mov    %eax,%ds
     d12:	8e c0                	mov    %eax,%es
     d14:	bd bf 03 8c d8       	mov    $0xd88c03bf,%ebp
     d19:	8e c0                	mov    %eax,%es
     d1b:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
     d20:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     d26:	b2 0a                	mov    $0xa,%dl
     d28:	cd 10                	int    $0x10
     d2a:	8c c8                	mov    %cs,%eax
     d2c:	8e d8                	mov    %eax,%ds
     d2e:	8e c0                	mov    %eax,%es
     d30:	bd 20 41 8c d8       	mov    $0xd88c4120,%ebp
     d35:	8e c0                	mov    %eax,%es
     d37:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
     d3c:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
     d42:	b2 1e                	mov    $0x1e,%dl
     d44:	cd 10                	int    $0x10
     d46:	61                   	popa   
     d47:	07                   	pop    %es
     d48:	1f                   	pop    %ds
     d49:	c9                   	leave  
     d4a:	66 5a                	pop    %dx
     d4c:	ff e2                	jmp    *%edx

00000d4e <_Get_Hours_1>:
     d4e:	c8 04 00 00          	enter  $0x4,$0x0
     d52:	b4 02                	mov    $0x2,%ah
     d54:	cd 1a                	int    $0x1a
     d56:	88 e8                	mov    %ch,%al
     d58:	b4 00                	mov    $0x0,%ah
     d5a:	b3 10                	mov    $0x10,%bl
     d5c:	f6 f3                	div    %bl
     d5e:	30 e4                	xor    %ah,%ah
     d60:	66 67 89 04          	mov    %ax,(%si)
     d64:	24 66                	and    $0x66,%al
     d66:	67 8b 04             	mov    (%si),%eax
     d69:	24 c9                	and    $0xc9,%al
     d6b:	66 5a                	pop    %dx
     d6d:	ff e2                	jmp    *%edx

00000d6f <_Get_Hours_2>:
     d6f:	c8 04 00 00          	enter  $0x4,$0x0
     d73:	b4 02                	mov    $0x2,%ah
     d75:	cd 1a                	int    $0x1a
     d77:	88 e8                	mov    %ch,%al
     d79:	24 0f                	and    $0xf,%al
     d7b:	30 e4                	xor    %ah,%ah
     d7d:	66 67 89 04          	mov    %ax,(%si)
     d81:	24 66                	and    $0x66,%al
     d83:	67 8b 04             	mov    (%si),%eax
     d86:	24 c9                	and    $0xc9,%al
     d88:	66 5a                	pop    %dx
     d8a:	ff e2                	jmp    *%edx

00000d8c <_Get_Minutes_1>:
     d8c:	c8 04 00 00          	enter  $0x4,$0x0
     d90:	b4 02                	mov    $0x2,%ah
     d92:	cd 1a                	int    $0x1a
     d94:	88 c8                	mov    %cl,%al
     d96:	b4 00                	mov    $0x0,%ah
     d98:	b3 10                	mov    $0x10,%bl
     d9a:	f6 f3                	div    %bl
     d9c:	30 e4                	xor    %ah,%ah
     d9e:	66 67 89 04          	mov    %ax,(%si)
     da2:	24 66                	and    $0x66,%al
     da4:	67 8b 04             	mov    (%si),%eax
     da7:	24 c9                	and    $0xc9,%al
     da9:	66 5a                	pop    %dx
     dab:	ff e2                	jmp    *%edx

00000dad <_Get_Minutes_2>:
     dad:	c8 04 00 00          	enter  $0x4,$0x0
     db1:	b4 02                	mov    $0x2,%ah
     db3:	cd 1a                	int    $0x1a
     db5:	88 c8                	mov    %cl,%al
     db7:	24 0f                	and    $0xf,%al
     db9:	30 e4                	xor    %ah,%ah
     dbb:	66 67 89 04          	mov    %ax,(%si)
     dbf:	24 66                	and    $0x66,%al
     dc1:	67 8b 04             	mov    (%si),%eax
     dc4:	24 c9                	and    $0xc9,%al
     dc6:	66 5a                	pop    %dx
     dc8:	ff e2                	jmp    *%edx

00000dca <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
     dca:	66 55                	push   %bp
     dcc:	66 89 e5             	mov    %sp,%bp
     dcf:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
     dd3:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     dd8:	66 89 d0             	mov    %dx,%ax
     ddb:	66 c1 e0 02          	shl    $0x2,%ax
     ddf:	66 01 d0             	add    %dx,%ax
     de2:	66 c1 e0 04          	shl    $0x4,%ax
     de6:	66 89 c2             	mov    %ax,%dx
     de9:	67 66 8b 45 10       	mov    0x10(%di),%ax
     dee:	66 01 d0             	add    %dx,%ax
     df1:	66 01 c0             	add    %ax,%ax
     df4:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
     df9:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     e00:	00 00                	add    %al,(%eax)
	int index = 0;
     e02:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     e09:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     e0b:	eb 35                	jmp    e42 <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
     e0d:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     e12:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e17:	66 01 d0             	add    %dx,%ax
     e1a:	67 8a 00             	mov    (%bx,%si),%al
     e1d:	66 0f be c0          	movsbw %al,%ax
     e21:	67 66 ff 75 f4       	pushw  -0xc(%di)
     e26:	67 66 ff 75 fc       	pushw  -0x4(%di)
     e2b:	66 50                	push   %ax
     e2d:	66 e8 ca f5          	callw  3fb <_clearscreen+0x7>
     e31:	ff                   	(bad)  
     e32:	ff 66 83             	jmp    *-0x7d(%esi)
     e35:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     e38:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     e3c:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
     e42:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     e47:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e4c:	66 01 d0             	add    %dx,%ax
     e4f:	67 8a 00             	mov    (%bx,%si),%al
     e52:	84 c0                	test   %al,%al
     e54:	75 b7                	jne    e0d <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     e56:	90                   	nop
}
     e57:	66 c9                	leavew 
     e59:	66 c3                	retw   

00000e5b <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
     e5b:	66 55                	push   %bp
     e5d:	66 89 e5             	mov    %sp,%bp
     e60:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
     e64:	67 66 8b 55 0c       	mov    0xc(%di),%dx
     e69:	66 89 d0             	mov    %dx,%ax
     e6c:	66 c1 e0 02          	shl    $0x2,%ax
     e70:	66 01 d0             	add    %dx,%ax
     e73:	66 c1 e0 04          	shl    $0x4,%ax
     e77:	66 89 c2             	mov    %ax,%dx
     e7a:	67 66 8b 45 10       	mov    0x10(%di),%ax
     e7f:	66 01 d0             	add    %dx,%ax
     e82:	66 01 c0             	add    %ax,%ax
     e85:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
     e8a:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
     e91:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
     e93:	eb 35                	jmp    eca <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
     e95:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     e9a:	67 66 8b 45 08       	mov    0x8(%di),%ax
     e9f:	66 01 d0             	add    %dx,%ax
     ea2:	67 8a 00             	mov    (%bx,%si),%al
     ea5:	66 0f be c0          	movsbw %al,%ax
     ea9:	67 66 ff 75 14       	pushw  0x14(%di)
     eae:	67 66 ff 75 fc       	pushw  -0x4(%di)
     eb3:	66 50                	push   %ax
     eb5:	66 e8 42 f5          	callw  3fb <_clearscreen+0x7>
     eb9:	ff                   	(bad)  
     eba:	ff 66 83             	jmp    *-0x7d(%esi)
     ebd:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
     ec0:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
     ec4:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
     eca:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
     ecf:	67 66 8b 45 08       	mov    0x8(%di),%ax
     ed4:	66 01 d0             	add    %dx,%ax
     ed7:	67 8a 00             	mov    (%bx,%si),%al
     eda:	84 c0                	test   %al,%al
     edc:	75 b7                	jne    e95 <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
     ede:	90                   	nop
}
     edf:	66 c9                	leavew 
     ee1:	66 c3                	retw   

00000ee3 <sys_showline>:
void sys_showline(){
     ee3:	66 55                	push   %bp
     ee5:	66 89 e5             	mov    %sp,%bp
     ee8:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
     eec:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
     ef1:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
     ef6:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
     efb:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
     f00:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
     f05:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
     f0a:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
     f0f:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
     f16:	00 00                	add    %al,(%eax)
    int i = 0;
     f18:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     f1f:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
     f21:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
     f28:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
     f2a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
     f31:	00 00                	add    %al,(%eax)
     f33:	eb 52                	jmp    f87 <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
     f35:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
     f3a:	66 89 d0             	mov    %dx,%ax
     f3d:	66 c1 e0 03          	shl    $0x3,%ax
     f41:	66 01 d0             	add    %dx,%ax
     f44:	67 66 8d 14          	lea    (%si),%dx
     f48:	c5 00                	lds    (%eax),%eax
     f4a:	00 00                	add    %al,(%eax)
     f4c:	00 66 01             	add    %ah,0x1(%esi)
     f4f:	d0 66 01             	shlb   0x1(%esi)
     f52:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
     f56:	45                   	inc    %ebp
     f57:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
     f5d:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
     f62:	66 01 d0             	add    %dx,%ax
     f65:	67 8a 00             	mov    (%bx,%si),%al
     f68:	66 0f be c0          	movsbw %al,%ax
     f6c:	67 66 ff 75 f4       	pushw  -0xc(%di)
     f71:	67 66 ff 75 f0       	pushw  -0x10(%di)
     f76:	66 50                	push   %ax
     f78:	66 e8 7f f4          	callw  3fb <_clearscreen+0x7>
     f7c:	ff                   	(bad)  
     f7d:	ff 66 83             	jmp    *-0x7d(%esi)
     f80:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
     f83:	66 ff 45 fc          	incw   -0x4(%ebp)
     f87:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
     f8d:	7e a6                	jle    f35 <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
     f8f:	66 c9                	leavew 
     f91:	66 c3                	retw   

00000f93 <sys_printname>:

void sys_printname(){
     f93:	66 55                	push   %bp
     f95:	66 89 e5             	mov    %sp,%bp
     f98:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
     f9c:	67 66 c7 45 fc c4 27 	movw   $0x27c4,-0x4(%di)
     fa3:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
     fa5:	67 66 c7 45 f8 08 28 	movw   $0x2808,-0x8(%di)
     fac:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
     fae:	67 66 c7 45 f4 4c 28 	movw   $0x284c,-0xc(%di)
     fb5:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
     fb7:	67 66 c7 45 f0 90 28 	movw   $0x2890,-0x10(%di)
     fbe:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
     fc0:	67 66 c7 45 ec d4 28 	movw   $0x28d4,-0x14(%di)
     fc7:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
     fc9:	67 66 c7 45 e8 18 29 	movw   $0x2918,-0x18(%di)
     fd0:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
     fd2:	67 66 c7 45 e4 5c 29 	movw   $0x295c,-0x1c(%di)
     fd9:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
     fdb:	66 6a 0b             	pushw  $0xb
     fde:	66 6a 10             	pushw  $0x10
     fe1:	67 66 ff 75 fc       	pushw  -0x4(%di)
     fe6:	66 e8 de fd          	callw  dc8 <_Get_Minutes_2+0x1b>
     fea:	ff                   	(bad)  
     feb:	ff 66 83             	jmp    *-0x7d(%esi)
     fee:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
     ff1:	6a 0b                	push   $0xb
     ff3:	66 6a 11             	pushw  $0x11
     ff6:	67 66 ff 75 f8       	pushw  -0x8(%di)
     ffb:	66 e8 c9 fd          	callw  dc8 <_Get_Minutes_2+0x1b>
     fff:	ff                   	(bad)  
    1000:	ff 66 83             	jmp    *-0x7d(%esi)
    1003:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
    1006:	6a 0b                	push   $0xb
    1008:	66 6a 12             	pushw  $0x12
    100b:	67 66 ff 75 f4       	pushw  -0xc(%di)
    1010:	66 e8 b4 fd          	callw  dc8 <_Get_Minutes_2+0x1b>
    1014:	ff                   	(bad)  
    1015:	ff 66 83             	jmp    *-0x7d(%esi)
    1018:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
    101b:	6a 0b                	push   $0xb
    101d:	66 6a 13             	pushw  $0x13
    1020:	67 66 ff 75 f0       	pushw  -0x10(%di)
    1025:	66 e8 9f fd          	callw  dc8 <_Get_Minutes_2+0x1b>
    1029:	ff                   	(bad)  
    102a:	ff 66 83             	jmp    *-0x7d(%esi)
    102d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
    1030:	6a 0b                	push   $0xb
    1032:	66 6a 14             	pushw  $0x14
    1035:	67 66 ff 75 ec       	pushw  -0x14(%di)
    103a:	66 e8 8a fd          	callw  dc8 <_Get_Minutes_2+0x1b>
    103e:	ff                   	(bad)  
    103f:	ff 66 83             	jmp    *-0x7d(%esi)
    1042:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
    1045:	6a 0b                	push   $0xb
    1047:	66 6a 15             	pushw  $0x15
    104a:	67 66 ff 75 e8       	pushw  -0x18(%di)
    104f:	66 e8 75 fd          	callw  dc8 <_Get_Minutes_2+0x1b>
    1053:	ff                   	(bad)  
    1054:	ff 66 83             	jmp    *-0x7d(%esi)
    1057:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
    105a:	6a 0b                	push   $0xb
    105c:	66 6a 16             	pushw  $0x16
    105f:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    1064:	66 e8 60 fd          	callw  dc8 <_Get_Minutes_2+0x1b>
    1068:	ff                   	(bad)  
    1069:	ff 66 83             	jmp    *-0x7d(%esi)
    106c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    106f:	c9                   	leave  
    1070:	66 c3                	retw   

00001072 <sys_printpoem>:
void sys_printpoem(){
    1072:	66 55                	push   %bp
    1074:	66 89 e5             	mov    %sp,%bp
    1077:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
    107b:	67 66 c7 45 f8 a0 29 	movw   $0x29a0,-0x8(%di)
    1082:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
    1084:	67 66 c7 45 f4 b2 29 	movw   $0x29b2,-0xc(%di)
    108b:	00 00                	add    %al,(%eax)
    int i = 1;
    108d:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    1094:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
    1096:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    109d:	00 00                	add    %al,(%eax)
    109f:	eb 4b                	jmp    10ec <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
    10a1:	67 66 ff 75 fc       	pushw  -0x4(%di)
    10a6:	66 6a 0a             	pushw  $0xa
    10a9:	66 6a 0f             	pushw  $0xf
    10ac:	67 66 ff 75 f8       	pushw  -0x8(%di)
    10b1:	66 e8 a4 fd          	callw  e59 <sys_print_for_heart+0x8f>
    10b5:	ff                   	(bad)  
    10b6:	ff 66 83             	jmp    *-0x7d(%esi)
    10b9:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
    10bb:	67 66 ff 75 fc       	pushw  -0x4(%di)
    10c0:	66 6a 0a             	pushw  $0xa
    10c3:	66 6a 10             	pushw  $0x10
    10c6:	67 66 ff 75 f4       	pushw  -0xc(%di)
    10cb:	66 e8 8a fd          	callw  e59 <sys_print_for_heart+0x8f>
    10cf:	ff                   	(bad)  
    10d0:	ff 66 83             	jmp    *-0x7d(%esi)
    10d3:	c4 10                	les    (%eax),%edx
        int j = 0;
    10d5:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    10dc:	00 00                	add    %al,(%eax)
        int k = 0;
    10de:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    10e5:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
    10e7:	67 66 ff 45 fc       	incw   -0x4(%di)
    10ec:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    10f2:	7e ad                	jle    10a1 <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
    10f4:	66 c9                	leavew 
    10f6:	66 c3                	retw   

000010f8 <sys_printheart>:
void sys_printheart(){
    10f8:	66 55                	push   %bp
    10fa:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
    10fd:	66 6a 28             	pushw  $0x28
    1100:	66 6a 00             	pushw  $0x0
    1103:	66 68 bb 29          	pushw  $0x29bb
    1107:	00 00                	add    %al,(%eax)
    1109:	66 e8 bb fc          	callw  dc8 <_Get_Minutes_2+0x1b>
    110d:	ff                   	(bad)  
    110e:	ff 66 83             	jmp    *-0x7d(%esi)
    1111:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
    1114:	6a 28                	push   $0x28
    1116:	66 6a 01             	pushw  $0x1
    1119:	66 68 d3 29          	pushw  $0x29d3
    111d:	00 00                	add    %al,(%eax)
    111f:	66 e8 a5 fc          	callw  dc8 <_Get_Minutes_2+0x1b>
    1123:	ff                   	(bad)  
    1124:	ff 66 83             	jmp    *-0x7d(%esi)
    1127:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
    112a:	6a 28                	push   $0x28
    112c:	66 6a 02             	pushw  $0x2
    112f:	66 68 ec 29          	pushw  $0x29ec
    1133:	00 00                	add    %al,(%eax)
    1135:	66 e8 8f fc          	callw  dc8 <_Get_Minutes_2+0x1b>
    1139:	ff                   	(bad)  
    113a:	ff 66 83             	jmp    *-0x7d(%esi)
    113d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
    1140:	6a 28                	push   $0x28
    1142:	66 6a 03             	pushw  $0x3
    1145:	66 68 07 2a          	pushw  $0x2a07
    1149:	00 00                	add    %al,(%eax)
    114b:	66 e8 79 fc          	callw  dc8 <_Get_Minutes_2+0x1b>
    114f:	ff                   	(bad)  
    1150:	ff 66 83             	jmp    *-0x7d(%esi)
    1153:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
    1156:	6a 28                	push   $0x28
    1158:	66 6a 04             	pushw  $0x4
    115b:	66 68 20 2a          	pushw  $0x2a20
    115f:	00 00                	add    %al,(%eax)
    1161:	66 e8 63 fc          	callw  dc8 <_Get_Minutes_2+0x1b>
    1165:	ff                   	(bad)  
    1166:	ff 66 83             	jmp    *-0x7d(%esi)
    1169:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
    116c:	6a 28                	push   $0x28
    116e:	66 6a 05             	pushw  $0x5
    1171:	66 68 38 2a          	pushw  $0x2a38
    1175:	00 00                	add    %al,(%eax)
    1177:	66 e8 4d fc          	callw  dc8 <_Get_Minutes_2+0x1b>
    117b:	ff                   	(bad)  
    117c:	ff 66 83             	jmp    *-0x7d(%esi)
    117f:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
    1182:	6a 28                	push   $0x28
    1184:	66 6a 06             	pushw  $0x6
    1187:	66 68 4f 2a          	pushw  $0x2a4f
    118b:	00 00                	add    %al,(%eax)
    118d:	66 e8 37 fc          	callw  dc8 <_Get_Minutes_2+0x1b>
    1191:	ff                   	(bad)  
    1192:	ff 66 83             	jmp    *-0x7d(%esi)
    1195:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
    1198:	6a 28                	push   $0x28
    119a:	66 6a 07             	pushw  $0x7
    119d:	66 68 65 2a          	pushw  $0x2a65
    11a1:	00 00                	add    %al,(%eax)
    11a3:	66 e8 21 fc          	callw  dc8 <_Get_Minutes_2+0x1b>
    11a7:	ff                   	(bad)  
    11a8:	ff 66 83             	jmp    *-0x7d(%esi)
    11ab:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    11ae:	c9                   	leave  
    11af:	66 c3                	retw   

000011b1 <print>:
#include "stdio.h"
//====================================================
//              显示字符串函数，可以指定位置
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
    11b1:	66 55                	push   %bp
    11b3:	66 89 e5             	mov    %sp,%bp
    11b6:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    11ba:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    11bf:	66 89 d0             	mov    %dx,%ax
    11c2:	66 c1 e0 02          	shl    $0x2,%ax
    11c6:	66 01 d0             	add    %dx,%ax
    11c9:	66 c1 e0 04          	shl    $0x4,%ax
    11cd:	66 89 c2             	mov    %ax,%dx
    11d0:	67 66 8b 45 10       	mov    0x10(%di),%ax
    11d5:	66 01 d0             	add    %dx,%ax
    11d8:	66 01 c0             	add    %ax,%ax
    11db:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    11e0:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    11e7:	00 00                	add    %al,(%eax)
	int index = 0;
    11e9:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    11f0:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    11f2:	eb 35                	jmp    1229 <print+0x78>
		_printchar(Messeage[index],pos,color);
    11f4:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    11f9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    11fe:	66 01 d0             	add    %dx,%ax
    1201:	67 8a 00             	mov    (%bx,%si),%al
    1204:	66 0f be c0          	movsbw %al,%ax
    1208:	67 66 ff 75 f4       	pushw  -0xc(%di)
    120d:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1212:	66 50                	push   %ax
    1214:	66 e8 e3 f1          	callw  3fb <_clearscreen+0x7>
    1218:	ff                   	(bad)  
    1219:	ff 66 83             	jmp    *-0x7d(%esi)
    121c:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    121f:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    1223:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    1229:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    122e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1233:	66 01 d0             	add    %dx,%ax
    1236:	67 8a 00             	mov    (%bx,%si),%al
    1239:	84 c0                	test   %al,%al
    123b:	75 b7                	jne    11f4 <print+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    123d:	90                   	nop
}
    123e:	66 c9                	leavew 
    1240:	66 c3                	retw   

00001242 <prints>:
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input	
    1242:	66 55                	push   %bp
    1244:	66 89 e5             	mov    %sp,%bp
    1247:	66 83 ec 04          	sub    $0x4,%sp
	int index = 0;
    124b:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1252:	00 00                	add    %al,(%eax)
	while(Messeage[index]){
    1254:	eb 25                	jmp    127b <prints+0x39>
		_showchar(Messeage[index]);
    1256:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    125b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1260:	66 01 d0             	add    %dx,%ax
    1263:	67 8a 00             	mov    (%bx,%si),%al
    1266:	66 0f be c0          	movsbw %al,%ax
    126a:	66 50                	push   %ax
    126c:	66 e8 c8 f1          	callw  438 <_readinput+0x17>
    1270:	ff                   	(bad)  
    1271:	ff 66 83             	jmp    *-0x7d(%esi)
    1274:	c4 04 67             	les    (%edi,%eiz,2),%eax
		index++;
    1277:	66 ff 45 fc          	incw   -0x4(%ebp)
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input	
	int index = 0;
	while(Messeage[index]){
    127b:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1280:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1285:	66 01 d0             	add    %dx,%ax
    1288:	67 8a 00             	mov    (%bx,%si),%al
    128b:	84 c0                	test   %al,%al
    128d:	75 c7                	jne    1256 <prints+0x14>
		_showchar(Messeage[index]);
		index++;
	}

	return;
    128f:	90                   	nop
}
    1290:	66 c9                	leavew 
    1292:	66 c3                	retw   

00001294 <printc>:
//====================================================
//                显示字符函数
//====================================================
void printc(char alpha){
    1294:	66 55                	push   %bp
    1296:	66 89 e5             	mov    %sp,%bp
    1299:	66 83 ec 04          	sub    $0x4,%sp
    129d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    12a2:	67 88 45 fc          	mov    %al,-0x4(%di)
	_showchar(alpha);
    12a6:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    12ac:	66 50                	push   %ax
    12ae:	66 e8 86 f1          	callw  438 <_readinput+0x17>
    12b2:	ff                   	(bad)  
    12b3:	ff 66 83             	jmp    *-0x7d(%esi)
    12b6:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    12b9:	66 c9                	leavew 
    12bb:	66 c3                	retw   

000012bd <printsint>:
//====================================================
//                数字转字符函数
//====================================================
void printsint(int num){
    12bd:	66 55                	push   %bp
    12bf:	66 89 e5             	mov    %sp,%bp
    12c2:	66 83 ec 2c          	sub    $0x2c,%sp
	 int save = num;
    12c6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    12cb:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	 int count = 0;
    12d0:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    12d7:	00 00                	add    %al,(%eax)
	 char number[30];
	 number[count] = 0;
    12d9:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    12de:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    12e3:	66 01 d0             	add    %dx,%ax
    12e6:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	if(num < 0){
    12ea:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    12f0:	79 14                	jns    1306 <printsint+0x49>
		printc('-');
    12f2:	66 6a 2d             	pushw  $0x2d
    12f5:	66 e8 99 ff          	callw  1292 <prints+0x50>
    12f9:	ff                   	(bad)  
    12fa:	ff 66 83             	jmp    *-0x7d(%esi)
    12fd:	c4 04 67             	les    (%edi,%eiz,2),%eax
		num = -num;
    1300:	66 f7 5d 08          	negw   0x8(%ebp)
    1304:	eb 15                	jmp    131b <printsint+0x5e>
	}
	else if(num == 0){
    1306:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    130c:	75 0d                	jne    131b <printsint+0x5e>
		printc('0');
    130e:	66 6a 30             	pushw  $0x30
    1311:	66 e8 7d ff          	callw  1292 <prints+0x50>
    1315:	ff                   	(bad)  
    1316:	ff 66 83             	jmp    *-0x7d(%esi)
    1319:	c4 04 eb             	les    (%ebx,%ebp,8),%eax
	}
	while(num > 0){
    131c:	50                   	push   %eax
		number[count] = num % 10 + '0';
    131d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1322:	66 b9 0a 00          	mov    $0xa,%cx
    1326:	00 00                	add    %al,(%eax)
    1328:	66 99                	cwtd   
    132a:	66 f7 f9             	idiv   %cx
    132d:	66 89 d0             	mov    %dx,%ax
    1330:	66 83 c0 30          	add    $0x30,%ax
    1334:	67 66 8d 4d d6       	lea    -0x2a(%di),%cx
    1339:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    133e:	66 01 ca             	add    %cx,%dx
    1341:	67 88 02             	mov    %al,(%bp,%si)
		num  = num / 10;
    1344:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    1349:	66 b8 67 66          	mov    $0x6667,%ax
    134d:	66 66 66 f7 e9       	data32 data32 imul %cx
    1352:	66 c1 fa 02          	sar    $0x2,%dx
    1356:	66 89 c8             	mov    %cx,%ax
    1359:	66 c1 f8 1f          	sar    $0x1f,%ax
    135d:	66 29 c2             	sub    %ax,%dx
    1360:	66 89 d0             	mov    %dx,%ax
    1363:	67 66 89 45 08       	mov    %ax,0x8(%di)
		count ++;
    1368:	67 66 ff 45 fc       	incw   -0x4(%di)
		num = -num;
	}
	else if(num == 0){
		printc('0');
	}
	while(num > 0){
    136d:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    1373:	7f a8                	jg     131d <printsint+0x60>
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    1375:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    137a:	66 48                	dec    %ax
    137c:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    1381:	eb 25                	jmp    13a8 <printsint+0xeb>
		printc(number[i]);
    1383:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    1388:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    138d:	66 01 d0             	add    %dx,%ax
    1390:	67 8a 00             	mov    (%bx,%si),%al
    1393:	66 0f be c0          	movsbw %al,%ax
    1397:	66 50                	push   %ax
    1399:	66 e8 f5 fe          	callw  1292 <prints+0x50>
    139d:	ff                   	(bad)  
    139e:	ff 66 83             	jmp    *-0x7d(%esi)
    13a1:	c4 04 67             	les    (%edi,%eiz,2),%eax
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    13a4:	66 ff 4d f8          	decw   -0x8(%ebp)
    13a8:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    13ae:	79 d3                	jns    1383 <printsint+0xc6>
		printc(number[i]);
	}
	return;
    13b0:	90                   	nop
}
    13b1:	66 c9                	leavew 
    13b3:	66 c3                	retw   

000013b5 <print_next_line>:
//====================================================
//                显示字符串并换行函数
//====================================================
 void print_next_line(char const* Messeage){
    13b5:	66 55                	push   %bp
    13b7:	66 89 e5             	mov    %sp,%bp
	prints(Messeage);
    13ba:	67 66 ff 75 08       	pushw  0x8(%di)
    13bf:	66 e8 7d fe          	callw  1240 <print+0x8f>
    13c3:	ff                   	(bad)  
    13c4:	ff 66 83             	jmp    *-0x7d(%esi)
    13c7:	c4 04 66             	les    (%esi,%eiz,2),%eax
	prints("\n\r");
    13ca:	68 7a 2a 00 00       	push   $0x2a7a
    13cf:	66 e8 6d fe          	callw  1240 <print+0x8f>
    13d3:	ff                   	(bad)  
    13d4:	ff 66 83             	jmp    *-0x7d(%esi)
    13d7:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    13da:	66 c9                	leavew 
    13dc:	66 c3                	retw   

000013de <strlen>:
//====================================================
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
    13de:	66 55                	push   %bp
    13e0:	66 89 e5             	mov    %sp,%bp
    13e3:	66 83 ec 08          	sub    $0x8,%sp
	int i = 0;
    13e7:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    13ee:	00 00                	add    %al,(%eax)
	int count = 0;
    13f0:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    13f7:	00 00                	add    %al,(%eax)
	while(Messeage[i] != 0){
    13f9:	eb 0a                	jmp    1405 <strlen+0x27>
		i++;
    13fb:	67 66 ff 45 fc       	incw   -0x4(%di)
		count++;
    1400:	67 66 ff 45 f8       	incw   -0x8(%di)
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
	int i = 0;
	int count = 0;
	while(Messeage[i] != 0){
    1405:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    140a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    140f:	66 01 d0             	add    %dx,%ax
    1412:	67 8a 00             	mov    (%bx,%si),%al
    1415:	84 c0                	test   %al,%al
    1417:	75 e2                	jne    13fb <strlen+0x1d>
		i++;
		count++;
	}
	return count;
    1419:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    141e:	66 c9                	leavew 
    1420:	66 c3                	retw   

00001422 <read_and_print_input>:
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    1422:	66 55                	push   %bp
    1424:	66 89 e5             	mov    %sp,%bp
    1427:	66 83 ec 08          	sub    $0x8,%sp
    int i = 1;
    142b:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    1432:	00 00                	add    %al,(%eax)
    while(i){
    1434:	eb 1c                	jmp    1452 <read_and_print_input+0x30>
        char savechar = _readinput();
    1436:	66 e8 e5 ef          	callw  41f <_printchar+0x22>
    143a:	ff                   	(bad)  
    143b:	ff 67 88             	jmp    *-0x78(%edi)
    143e:	45                   	inc    %ebp
    143f:	fb                   	sti    
        _showchar(savechar);
    1440:	67 66 0f be 45 fb    	movsbw -0x5(%di),%ax
    1446:	66 50                	push   %ax
    1448:	66 e8 ec ef          	callw  438 <_readinput+0x17>
    144c:	ff                   	(bad)  
    144d:	ff 66 83             	jmp    *-0x7d(%esi)
    1450:	c4 04 67             	les    (%edi,%eiz,2),%eax
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    int i = 1;
    while(i){
    1453:	66 83 7d fc 00       	cmpw   $0x0,-0x4(%ebp)
    1458:	75 dc                	jne    1436 <read_and_print_input+0x14>
        char savechar = _readinput();
        _showchar(savechar);
    }
}
    145a:	66 c9                	leavew 
    145c:	66 c3                	retw   

0000145e <getch>:
//====================================================
//        等待用户输入函数，返回用户输入在缓冲区中
//====================================================
char getch(){
    145e:	66 55                	push   %bp
    1460:	66 89 e5             	mov    %sp,%bp
    1463:	66 83 ec 04          	sub    $0x4,%sp
	char result = _readinput();
    1467:	66 e8 b4 ef          	callw  41f <_printchar+0x22>
    146b:	ff                   	(bad)  
    146c:	ff 67 88             	jmp    *-0x78(%edi)
    146f:	45                   	inc    %ebp
    1470:	ff 67 8a             	jmp    *-0x76(%edi)
	return result;
    1473:	45                   	inc    %ebp
    1474:	ff 66 c9             	jmp    *-0x37(%esi)
}
    1477:	66 c3                	retw   

00001479 <getline>:
void  getline(char str[],int length){
    1479:	66 55                	push   %bp
    147b:	66 89 e5             	mov    %sp,%bp
    147e:	66 83 ec 08          	sub    $0x8,%sp
	char save = getch();
    1482:	66 e8 d6 ff          	callw  145c <read_and_print_input+0x3a>
    1486:	ff                   	(bad)  
    1487:	ff 67 88             	jmp    *-0x78(%edi)
    148a:	45                   	inc    %ebp
    148b:	ff 67 66             	jmp    *0x66(%edi)
	int index = 0;
    148e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while(save != 13 && index < length){
    1495:	eb 46                	jmp    14dd <getline+0x64>
		printc(save);
    1497:	67 66 0f be 45 ff    	movsbw -0x1(%di),%ax
    149d:	66 50                	push   %ax
    149f:	66 e8 ef fd          	callw  1292 <prints+0x50>
    14a3:	ff                   	(bad)  
    14a4:	ff 66 83             	jmp    *-0x7d(%esi)
    14a7:	c4 04 67             	les    (%edi,%eiz,2),%eax
		str[index] = save;
    14aa:	66 8b 55 f8          	mov    -0x8(%ebp),%dx
    14ae:	67 66 8b 45 08       	mov    0x8(%di),%ax
    14b3:	66 01 c2             	add    %ax,%dx
    14b6:	67 8a 45 ff          	mov    -0x1(%di),%al
    14ba:	67 88 02             	mov    %al,(%bp,%si)
		index ++;
    14bd:	67 66 ff 45 f8       	incw   -0x8(%di)
		str[index] = 0;
    14c2:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    14c7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    14cc:	66 01 d0             	add    %dx,%ax
    14cf:	67 c6 00 00          	movb   $0x0,(%bx,%si)
		save = getch();
    14d3:	66 e8 85 ff          	callw  145c <read_and_print_input+0x3a>
    14d7:	ff                   	(bad)  
    14d8:	ff 67 88             	jmp    *-0x78(%edi)
    14db:	45                   	inc    %ebp
    14dc:	ff 67 80             	jmp    *-0x80(%edi)
	return result;
}
void  getline(char str[],int length){
	char save = getch();
	int index = 0;
	while(save != 13 && index < length){
    14df:	7d ff                	jge    14e0 <getline+0x67>
    14e1:	0d 74 0c 67 66       	or     $0x66670c74,%eax
    14e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
    14e9:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    14ee:	7c a7                	jl     1497 <getline+0x1e>
		str[index] = save;
		index ++;
		str[index] = 0;
		save = getch();
	}
	return;
    14f0:	90                   	nop
}
    14f1:	66 c9                	leavew 
    14f3:	66 c3                	retw   

000014f5 <print_different_color>:
void print_different_color(char const* Messeage,int row,int colume,int color){
    14f5:	66 55                	push   %bp
    14f7:	66 89 e5             	mov    %sp,%bp
    14fa:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    14fe:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    1503:	66 89 d0             	mov    %dx,%ax
    1506:	66 c1 e0 02          	shl    $0x2,%ax
    150a:	66 01 d0             	add    %dx,%ax
    150d:	66 c1 e0 04          	shl    $0x4,%ax
    1511:	66 89 c2             	mov    %ax,%dx
    1514:	67 66 8b 45 10       	mov    0x10(%di),%ax
    1519:	66 01 d0             	add    %dx,%ax
    151c:	66 01 c0             	add    %ax,%ax
    151f:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    1524:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    152b:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    152d:	eb 35                	jmp    1564 <print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    152f:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    1534:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1539:	66 01 d0             	add    %dx,%ax
    153c:	67 8a 00             	mov    (%bx,%si),%al
    153f:	66 0f be c0          	movsbw %al,%ax
    1543:	67 66 ff 75 14       	pushw  0x14(%di)
    1548:	67 66 ff 75 fc       	pushw  -0x4(%di)
    154d:	66 50                	push   %ax
    154f:	66 e8 a8 ee          	callw  3fb <_clearscreen+0x7>
    1553:	ff                   	(bad)  
    1554:	ff 66 83             	jmp    *-0x7d(%esi)
    1557:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    155a:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    155e:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    1564:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    1569:	67 66 8b 45 08       	mov    0x8(%di),%ax
    156e:	66 01 d0             	add    %dx,%ax
    1571:	67 8a 00             	mov    (%bx,%si),%al
    1574:	84 c0                	test   %al,%al
    1576:	75 b7                	jne    152f <print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    1578:	90                   	nop
}
    1579:	66 c9                	leavew 
    157b:	66 c3                	retw   

0000157d <strcmp>:
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
    157d:	66 55                	push   %bp
    157f:	66 89 e5             	mov    %sp,%bp
    1582:	66 83 ec 04          	sub    $0x4,%sp
	int i = 0;
    1586:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    158d:	00 00                	add    %al,(%eax)
	while(m1[i] != 0 && m2[i]!= 0){
    158f:	eb 31                	jmp    15c2 <strcmp+0x45>
		if(m1[i] != m2[i]){
    1591:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1596:	67 66 8b 45 08       	mov    0x8(%di),%ax
    159b:	66 01 d0             	add    %dx,%ax
    159e:	67 8a 10             	mov    (%bx,%si),%dl
    15a1:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    15a6:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    15ab:	66 01 c8             	add    %cx,%ax
    15ae:	67 8a 00             	mov    (%bx,%si),%al
    15b1:	38 c2                	cmp    %al,%dl
    15b3:	74 08                	je     15bd <strcmp+0x40>
			return 0;
    15b5:	66 b8 00 00          	mov    $0x0,%ax
    15b9:	00 00                	add    %al,(%eax)
    15bb:	eb 63                	jmp    1620 <strcmp+0xa3>
		}
		i++;
    15bd:	67 66 ff 45 fc       	incw   -0x4(%di)
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
	int i = 0;
	while(m1[i] != 0 && m2[i]!= 0){
    15c2:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    15c7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15cc:	66 01 d0             	add    %dx,%ax
    15cf:	67 8a 00             	mov    (%bx,%si),%al
    15d2:	84 c0                	test   %al,%al
    15d4:	74 14                	je     15ea <strcmp+0x6d>
    15d6:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    15db:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    15e0:	66 01 d0             	add    %dx,%ax
    15e3:	67 8a 00             	mov    (%bx,%si),%al
    15e6:	84 c0                	test   %al,%al
    15e8:	75 a7                	jne    1591 <strcmp+0x14>
		if(m1[i] != m2[i]){
			return 0;
		}
		i++;
	}
	if(m1[i] != 0 || m2[i] != 0){
    15ea:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    15ef:	67 66 8b 45 08       	mov    0x8(%di),%ax
    15f4:	66 01 d0             	add    %dx,%ax
    15f7:	67 8a 00             	mov    (%bx,%si),%al
    15fa:	84 c0                	test   %al,%al
    15fc:	75 14                	jne    1612 <strcmp+0x95>
    15fe:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1603:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1608:	66 01 d0             	add    %dx,%ax
    160b:	67 8a 00             	mov    (%bx,%si),%al
    160e:	84 c0                	test   %al,%al
    1610:	74 08                	je     161a <strcmp+0x9d>
		return 0;
    1612:	66 b8 00 00          	mov    $0x0,%ax
    1616:	00 00                	add    %al,(%eax)
    1618:	eb 06                	jmp    1620 <strcmp+0xa3>
	}
	return 1;
    161a:	66 b8 01 00          	mov    $0x1,%ax
    161e:	00 00                	add    %al,(%eax)
}
    1620:	66 c9                	leavew 
    1622:	66 c3                	retw   

00001624 <strcpy>:
//====================================================
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
    1624:	66 55                	push   %bp
    1626:	66 89 e5             	mov    %sp,%bp
    1629:	66 83 ec 08          	sub    $0x8,%sp
	int len = strlen(src);
    162d:	67 66 ff 75 08       	pushw  0x8(%di)
    1632:	66 e8 a6 fd          	callw  13dc <print_next_line+0x27>
    1636:	ff                   	(bad)  
    1637:	ff 66 83             	jmp    *-0x7d(%esi)
    163a:	c4 04 67             	les    (%edi,%eiz,2),%eax
    163d:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	int i = 0;
    1641:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1648:	00 00                	add    %al,(%eax)
	for(i = 0;i < len;i ++){
    164a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1651:	00 00                	add    %al,(%eax)
    1653:	eb 3b                	jmp    1690 <strcpy+0x6c>
    	des[i] =  src[i];
    1655:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    165a:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    165f:	66 01 c2             	add    %ax,%dx
    1662:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    1667:	67 66 8b 45 08       	mov    0x8(%di),%ax
    166c:	66 01 c8             	add    %cx,%ax
    166f:	67 8a 00             	mov    (%bx,%si),%al
    1672:	67 88 02             	mov    %al,(%bp,%si)
        des[i+1] = 0;
    1675:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    167a:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    167f:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1684:	66 01 d0             	add    %dx,%ax
    1687:	67 c6 00 00          	movb   $0x0,(%bx,%si)
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
	int len = strlen(src);
	int i = 0;
	for(i = 0;i < len;i ++){
    168b:	67 66 ff 45 fc       	incw   -0x4(%di)
    1690:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1695:	67 66 3b 45 f8       	cmp    -0x8(%di),%ax
    169a:	7c b9                	jl     1655 <strcpy+0x31>
    	des[i] =  src[i];
        des[i+1] = 0;
	}
    169c:	66 c9                	leavew 
    169e:	66 c3                	retw   

000016a0 <initial_PCB>:
#include "schedule.h"
#include "use.h"

void initial_PCB(int index){
    16a0:	66 55                	push   %bp
    16a2:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    16a5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16aa:	66 40                	inc    %ax
    16ac:	66 c1 e0 0c          	shl    $0xc,%ax
    16b0:	66 89 c2             	mov    %ax,%dx
    16b3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16b8:	66 c1 e0 02          	shl    $0x2,%ax
    16bc:	66 89 c1             	mov    %ax,%cx
    16bf:	66 c1 e1 04          	shl    $0x4,%cx
    16c3:	66 01 c8             	add    %cx,%ax
    16c6:	66 05 50 42          	add    $0x4250,%ax
    16ca:	00 00                	add    %al,(%eax)
    16cc:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    16d0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16d5:	66 40                	inc    %ax
    16d7:	66 c1 e0 0c          	shl    $0xc,%ax
    16db:	66 89 c2             	mov    %ax,%dx
    16de:	67 66 8b 45 08       	mov    0x8(%di),%ax
    16e3:	66 c1 e0 02          	shl    $0x2,%ax
    16e7:	66 89 c1             	mov    %ax,%cx
    16ea:	66 c1 e1 04          	shl    $0x4,%cx
    16ee:	66 01 c8             	add    %cx,%ax
    16f1:	66 05 40 42          	add    $0x4240,%ax
    16f5:	00 00                	add    %al,(%eax)
    16f7:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
    16fb:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1700:	66 40                	inc    %ax
    1702:	66 c1 e0 0c          	shl    $0xc,%ax
    1706:	66 89 c2             	mov    %ax,%dx
    1709:	67 66 8b 45 08       	mov    0x8(%di),%ax
    170e:	66 c1 e0 02          	shl    $0x2,%ax
    1712:	66 89 c1             	mov    %ax,%cx
    1715:	66 c1 e1 04          	shl    $0x4,%cx
    1719:	66 01 c8             	add    %cx,%ax
    171c:	66 05 40 42          	add    $0x4240,%ax
    1720:	00 00                	add    %al,(%eax)
    1722:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
    1727:	67 66 8b 45 08       	mov    0x8(%di),%ax
    172c:	66 c1 e0 02          	shl    $0x2,%ax
    1730:	66 89 c2             	mov    %ax,%dx
    1733:	66 c1 e2 04          	shl    $0x4,%dx
    1737:	66 01 d0             	add    %dx,%ax
    173a:	66 05 40 42          	add    $0x4240,%ax
    173e:	00 00                	add    %al,(%eax)
    1740:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
    1747:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
    1749:	67 66 8b 45 08       	mov    0x8(%di),%ax
    174e:	66 c1 e0 02          	shl    $0x2,%ax
    1752:	66 89 c2             	mov    %ax,%dx
    1755:	66 c1 e2 04          	shl    $0x4,%dx
    1759:	66 01 d0             	add    %dx,%ax
    175c:	66 05 40 42          	add    $0x4240,%ax
    1760:	00 00                	add    %al,(%eax)
    1762:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    1769:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = READY;
    176b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1770:	66 c1 e0 02          	shl    $0x2,%ax
    1774:	66 89 c2             	mov    %ax,%dx
    1777:	66 c1 e2 04          	shl    $0x4,%dx
    177b:	66 01 d0             	add    %dx,%ax
    177e:	66 05 50 42          	add    $0x4250,%ax
    1782:	00 00                	add    %al,(%eax)
    1784:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    178b:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    178d:	67 66 ff 75 08       	pushw  0x8(%di)
    1792:	66 68 20 58          	pushw  $0x5820
    1796:	00 00                	add    %al,(%eax)
    1798:	66 e8 89 09          	callw  2125 <size+0x11>
    179c:	00 00                	add    %al,(%eax)
    179e:	66 83 c4 08          	add    $0x8,%sp
    PCB_list[index ].eflags = 512;
    17a2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    17a7:	66 c1 e0 02          	shl    $0x2,%ax
    17ab:	66 89 c2             	mov    %ax,%dx
    17ae:	66 c1 e2 04          	shl    $0x4,%dx
    17b2:	66 01 d0             	add    %dx,%ax
    17b5:	66 05 50 42          	add    $0x4250,%ax
    17b9:	00 00                	add    %al,(%eax)
    17bb:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    17c2:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    17c4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    17c9:	66 c1 e0 02          	shl    $0x2,%ax
    17cd:	66 89 c2             	mov    %ax,%dx
    17d0:	66 c1 e2 04          	shl    $0x4,%dx
    17d4:	66 01 d0             	add    %dx,%ax
    17d7:	67 66 8d 90 50 42    	lea    0x4250(%bx,%si),%dx
    17dd:	00 00                	add    %al,(%eax)
    17df:	67 66 8b 45 08       	mov    0x8(%di),%ax
    17e4:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 0;
    17e9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    17ee:	66 c1 e0 02          	shl    $0x2,%ax
    17f2:	66 89 c2             	mov    %ax,%dx
    17f5:	66 c1 e2 04          	shl    $0x4,%dx
    17f9:	66 01 d0             	add    %dx,%ax
    17fc:	66 05 60 42          	add    $0x4260,%ax
    1800:	00 00                	add    %al,(%eax)
    1802:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1808:	00 00                	add    %al,(%eax)
}
    180a:	66 c9                	leavew 
    180c:	66 c3                	retw   

0000180e <Set_PCB>:
void Set_PCB(){
    180e:	66 55                	push   %bp
    1810:	66 89 e5             	mov    %sp,%bp
    1813:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    1817:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    181e:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    1820:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1827:	00 00                	add    %al,(%eax)
    1829:	eb 27                	jmp    1852 <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    182b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1830:	66 c1 e0 02          	shl    $0x2,%ax
    1834:	66 89 c2             	mov    %ax,%dx
    1837:	66 c1 e2 04          	shl    $0x4,%dx
    183b:	66 01 d0             	add    %dx,%ax
    183e:	66 05 50 42          	add    $0x4250,%ax
    1842:	00 00                	add    %al,(%eax)
    1844:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    184b:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 0;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    184d:	67 66 ff 45 fc       	incw   -0x4(%di)
    1852:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    1858:	7e d1                	jle    182b <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    185a:	66 c9                	leavew 
    185c:	66 c3                	retw   

0000185e <sys_schedule>:
int sch_index;
int current_index ;
void sys_schedule(){
    185e:	66 55                	push   %bp
    1860:	66 89 e5             	mov    %sp,%bp
    int i,j;
    if(isempty(&readyqueue) != 1){
    1863:	66 68 20 58          	pushw  $0x5820
    1867:	00 00                	add    %al,(%eax)
    1869:	66 e8 88 08          	callw  20f5 <stack_copy+0x35>
    186d:	00 00                	add    %al,(%eax)
    186f:	66 83 c4 04          	add    $0x4,%sp
    1873:	66 83 f8 01          	cmp    $0x1,%ax
    1877:	0f 84 e0 00 66 a1    	je     a166195d <_end+0xa165c0b9>
        current_index = _CurrentProg - PCB_list;
    187d:	84 47 66             	test   %al,0x66(%edi)
    1880:	89 c2                	mov    %eax,%edx
    1882:	66 b8 20 42          	mov    $0x4220,%ax
    1886:	00 00                	add    %al,(%eax)
    1888:	66 29 c2             	sub    %ax,%dx
    188b:	66 89 d0             	mov    %dx,%ax
    188e:	66 c1 f8 02          	sar    $0x2,%ax
    1892:	66 89 c2             	mov    %ax,%dx
    1895:	66 89 d0             	mov    %dx,%ax
    1898:	66 01 c0             	add    %ax,%ax
    189b:	66 01 d0             	add    %dx,%ax
    189e:	67 66 8d 14          	lea    (%si),%dx
    18a2:	85 00                	test   %eax,(%eax)
    18a4:	00 00                	add    %al,(%eax)
    18a6:	00 66 01             	add    %ah,0x1(%esi)
    18a9:	d0 66 89             	shlb   -0x77(%esi)
    18ac:	c2 66 c1             	ret    $0xc166
    18af:	e2 08                	loop   18b9 <sys_schedule+0x5b>
    18b1:	66 01 d0             	add    %dx,%ax
    18b4:	66 89 c2             	mov    %ax,%dx
    18b7:	66 c1 e2 10          	shl    $0x10,%dx
    18bb:	66 01 d0             	add    %dx,%ax
    18be:	66 f7 d8             	neg    %ax
    18c1:	66 a3 88 47 66 a1    	mov    %ax,0xa1664788
        if(_CurrentProg -> prg_status == RUN){
    18c7:	84 47 67             	test   %al,0x67(%edi)
    18ca:	66 8b 40 38          	mov    0x38(%eax),%ax
    18ce:	66 83 f8 01          	cmp    $0x1,%ax
    18d2:	75 23                	jne    18f7 <sys_schedule+0x99>
            _CurrentProg -> prg_status = READY;
    18d4:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    18da:	c7 40 38 03 00 00 00 	movl   $0x3,0x38(%eax)
            enqueue(&readyqueue,current_index);
    18e1:	66 a1 88 47 66 50    	mov    0x50664788,%ax
    18e7:	66 68 20 58          	pushw  $0x5820
    18eb:	00 00                	add    %al,(%eax)
    18ed:	66 e8 34 08          	callw  2125 <size+0x11>
    18f1:	00 00                	add    %al,(%eax)
    18f3:	66 83 c4 08          	add    $0x8,%sp
        }
        dequeue(&readyqueue,&sch_index);
    18f7:	66 68 70 47          	pushw  $0x4770
    18fb:	00 00                	add    %al,(%eax)
    18fd:	66 68 20 58          	pushw  $0x5820
    1901:	00 00                	add    %al,(%eax)
    1903:	66 e8 8a 08          	callw  2191 <enqueue+0x6a>
    1907:	00 00                	add    %al,(%eax)
    1909:	66 83 c4 08          	add    $0x8,%sp
        if(PCB_list[sch_index].prg_status == READY){
    190d:	66 a1 70 47 66 c1    	mov    0xc1664770,%ax
    1913:	e0 02                	loopne 1917 <sys_schedule+0xb9>
    1915:	66 89 c2             	mov    %ax,%dx
    1918:	66 c1 e2 04          	shl    $0x4,%dx
    191c:	66 01 d0             	add    %dx,%ax
    191f:	66 05 50 42          	add    $0x4250,%ax
    1923:	00 00                	add    %al,(%eax)
    1925:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    192a:	66 83 f8 03          	cmp    $0x3,%ax
    192e:	75 2b                	jne    195b <sys_schedule+0xfd>
            _CurrentProg = PCB_list + sch_index;
    1930:	66 a1 70 47 66 c1    	mov    0xc1664770,%ax
    1936:	e0 02                	loopne 193a <sys_schedule+0xdc>
    1938:	66 89 c2             	mov    %ax,%dx
    193b:	66 c1 e2 04          	shl    $0x4,%dx
    193f:	66 01 d0             	add    %dx,%ax
    1942:	66 05 20 42          	add    $0x4220,%ax
    1946:	00 00                	add    %al,(%eax)
    1948:	66 a3 84 47 66 a1    	mov    %ax,0xa1664784
            _CurrentProg -> prg_status = RUN;
    194e:	84 47 67             	test   %al,0x67(%edi)
    1951:	66 c7 40 38 01 00    	movw   $0x1,0x38(%eax)
    1957:	00 00                	add    %al,(%eax)
            return;
    1959:	eb 0a                	jmp    1965 <sys_schedule+0x107>
        }
    }
    _CurrentProg = PCB_list ;
    195b:	66 c7 06 84 47       	movw   $0x4784,(%esi)
    1960:	20 42 00             	and    %al,0x0(%edx)
    1963:	00 90 66 c9 66 c3    	add    %dl,-0x3c99369a(%eax)

00001969 <sys_exit>:
    return;
    
}
void sys_exit(){
    1969:	66 55                	push   %bp
    196b:	66 89 e5             	mov    %sp,%bp
    196e:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    1972:	fa                   	cli    
    int index = _CurrentProg - PCB_list;
    1973:	66 a1 84 47 66 89    	mov    0x89664784,%ax
    1979:	c2 66 b8             	ret    $0xb866
    197c:	20 42 00             	and    %al,0x0(%edx)
    197f:	00 66 29             	add    %ah,0x29(%esi)
    1982:	c2 66 89             	ret    $0x8966
    1985:	d0 66 c1             	shlb   -0x3f(%esi)
    1988:	f8                   	clc    
    1989:	02 66 89             	add    -0x77(%esi),%ah
    198c:	c2 66 89             	ret    $0x8966
    198f:	d0 66 01             	shlb   0x1(%esi)
    1992:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    1996:	67 66 8d 14          	lea    (%si),%dx
    199a:	85 00                	test   %eax,(%eax)
    199c:	00 00                	add    %al,(%eax)
    199e:	00 66 01             	add    %ah,0x1(%esi)
    19a1:	d0 66 89             	shlb   -0x77(%esi)
    19a4:	c2 66 c1             	ret    $0xc166
    19a7:	e2 08                	loop   19b1 <sys_exit+0x48>
    19a9:	66 01 d0             	add    %dx,%ax
    19ac:	66 89 c2             	mov    %ax,%dx
    19af:	66 c1 e2 10          	shl    $0x10,%dx
    19b3:	66 01 d0             	add    %dx,%ax
    19b6:	66 f7 d8             	neg    %ax
    19b9:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    rmele(&readyqueue,index);
    19be:	67 66 ff 75 fc       	pushw  -0x4(%di)
    19c3:	66 68 20 58          	pushw  $0x5820
    19c7:	00 00                	add    %al,(%eax)
    19c9:	66 e8 68 08          	callw  2235 <init_queue+0x30>
    19cd:	00 00                	add    %al,(%eax)
    19cf:	66 83 c4 08          	add    $0x8,%sp
    _CurrentProg -> prg_status = EXIT;
    19d3:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    19d9:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    __asm__("sti\n");
    19e0:	fb                   	sti    
}
    19e1:	66 c9                	leavew 
    19e3:	66 c3                	retw   

000019e5 <sys_bolocked>:



int queuesize,tmp;//一定要是全局，否则dequeue无法将tmp修改
void sys_bolocked(int index){
    19e5:	66 55                	push   %bp
    19e7:	66 89 e5             	mov    %sp,%bp
    19ea:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    19ee:	fa                   	cli    
    PCB_list[index].prg_status = BLOCKED;
    19ef:	67 66 8b 45 08       	mov    0x8(%di),%ax
    19f4:	66 c1 e0 02          	shl    $0x2,%ax
    19f8:	66 89 c2             	mov    %ax,%dx
    19fb:	66 c1 e2 04          	shl    $0x4,%dx
    19ff:	66 01 d0             	add    %dx,%ax
    1a02:	66 05 50 42          	add    $0x4250,%ax
    1a06:	00 00                	add    %al,(%eax)
    1a08:	67 66 c7 40 08 02 00 	movw   $0x2,0x8(%bx,%si)
    1a0f:	00 00                	add    %al,(%eax)
    enqueue(&blockqueue,index);
    1a11:	67 66 ff 75 08       	pushw  0x8(%di)
    1a16:	66 68 80 41          	pushw  $0x4180
    1a1a:	00 00                	add    %al,(%eax)
    1a1c:	66 e8 05 07          	callw  2125 <size+0x11>
    1a20:	00 00                	add    %al,(%eax)
    1a22:	66 83 c4 08          	add    $0x8,%sp
    queuesize = size(&readyqueue);
    1a26:	66 68 20 58          	pushw  $0x5820
    1a2a:	00 00                	add    %al,(%eax)
    1a2c:	66 e8 e2 06          	callw  2112 <isempty+0x1b>
    1a30:	00 00                	add    %al,(%eax)
    1a32:	66 83 c4 04          	add    $0x4,%sp
    1a36:	66 a3 64 41 67 66    	mov    %ax,0x66674164
    int i = 0;
    1a3c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    1a43:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1a4a:	00 00                	add    %al,(%eax)
    1a4c:	eb 3c                	jmp    1a8a <sys_bolocked+0xa5>
        dequeue(&readyqueue,&tmp);
    1a4e:	66 68 60 41          	pushw  $0x4160
    1a52:	00 00                	add    %al,(%eax)
    1a54:	66 68 20 58          	pushw  $0x5820
    1a58:	00 00                	add    %al,(%eax)
    1a5a:	66 e8 33 07          	callw  2191 <enqueue+0x6a>
    1a5e:	00 00                	add    %al,(%eax)
    1a60:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    1a64:	66 a1 60 41 67 66    	mov    0x66674160,%ax
    1a6a:	39 45 08             	cmp    %eax,0x8(%ebp)
    1a6d:	74 16                	je     1a85 <sys_bolocked+0xa0>
            enqueue(&readyqueue,tmp);
    1a6f:	66 a1 60 41 66 50    	mov    0x50664160,%ax
    1a75:	66 68 20 58          	pushw  $0x5820
    1a79:	00 00                	add    %al,(%eax)
    1a7b:	66 e8 a6 06          	callw  2125 <size+0x11>
    1a7f:	00 00                	add    %al,(%eax)
    1a81:	66 83 c4 08          	add    $0x8,%sp
    __asm__("cli\n");
    PCB_list[index].prg_status = BLOCKED;
    enqueue(&blockqueue,index);
    queuesize = size(&readyqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    1a85:	67 66 ff 45 fc       	incw   -0x4(%di)
    1a8a:	66 a1 64 41 67 66    	mov    0x66674164,%ax
    1a90:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1a93:	7c b9                	jl     1a4e <sys_bolocked+0x69>
        dequeue(&readyqueue,&tmp);
        if(index != tmp){
            enqueue(&readyqueue,tmp);
        }
    }
    __asm__("sti\n");
    1a95:	fb                   	sti    
}
    1a96:	66 c9                	leavew 
    1a98:	66 c3                	retw   

00001a9a <sys_wakeup>:
void sys_wakeup(int index){
    1a9a:	66 55                	push   %bp
    1a9c:	66 89 e5             	mov    %sp,%bp
    1a9f:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    1aa3:	fa                   	cli    
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    1aa4:	66 68 80 41          	pushw  $0x4180
    1aa8:	00 00                	add    %al,(%eax)
    1aaa:	66 e8 64 06          	callw  2112 <isempty+0x1b>
    1aae:	00 00                	add    %al,(%eax)
    1ab0:	66 83 c4 04          	add    $0x4,%sp
    1ab4:	66 a3 64 41 67 66    	mov    %ax,0x66674164
    int i = 0;
    1aba:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    1ac1:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1ac8:	00 00                	add    %al,(%eax)
    1aca:	eb 3c                	jmp    1b08 <sys_wakeup+0x6e>
        dequeue(&blockqueue,&tmp);
    1acc:	66 68 60 41          	pushw  $0x4160
    1ad0:	00 00                	add    %al,(%eax)
    1ad2:	66 68 80 41          	pushw  $0x4180
    1ad6:	00 00                	add    %al,(%eax)
    1ad8:	66 e8 b5 06          	callw  2191 <enqueue+0x6a>
    1adc:	00 00                	add    %al,(%eax)
    1ade:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    1ae2:	66 a1 60 41 67 66    	mov    0x66674160,%ax
    1ae8:	39 45 08             	cmp    %eax,0x8(%ebp)
    1aeb:	74 16                	je     1b03 <sys_wakeup+0x69>
            enqueue(&blockqueue,tmp);
    1aed:	66 a1 60 41 66 50    	mov    0x50664160,%ax
    1af3:	66 68 80 41          	pushw  $0x4180
    1af7:	00 00                	add    %al,(%eax)
    1af9:	66 e8 28 06          	callw  2125 <size+0x11>
    1afd:	00 00                	add    %al,(%eax)
    1aff:	66 83 c4 08          	add    $0x8,%sp
void sys_wakeup(int index){
    __asm__("cli\n");
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    1b03:	67 66 ff 45 fc       	incw   -0x4(%di)
    1b08:	66 a1 64 41 67 66    	mov    0x66674164,%ax
    1b0e:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1b11:	7c b9                	jl     1acc <sys_wakeup+0x32>
        dequeue(&blockqueue,&tmp);
        if(index != tmp){
            enqueue(&blockqueue,tmp);
        }
    }
    PCB_list[index].prg_status = READY;
    1b13:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1b18:	66 c1 e0 02          	shl    $0x2,%ax
    1b1c:	66 89 c2             	mov    %ax,%dx
    1b1f:	66 c1 e2 04          	shl    $0x4,%dx
    1b23:	66 01 d0             	add    %dx,%ax
    1b26:	66 05 50 42          	add    $0x4250,%ax
    1b2a:	00 00                	add    %al,(%eax)
    1b2c:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    1b33:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    1b35:	67 66 ff 75 08       	pushw  0x8(%di)
    1b3a:	66 68 20 58          	pushw  $0x5820
    1b3e:	00 00                	add    %al,(%eax)
    1b40:	66 e8 e1 05          	callw  2125 <size+0x11>
    1b44:	00 00                	add    %al,(%eax)
    1b46:	66 83 c4 08          	add    $0x8,%sp
    __asm__("sti\n");
    1b4a:	fb                   	sti    
}
    1b4b:	66 c9                	leavew 
    1b4d:	66 c3                	retw   

00001b4f <sys_run>:
void sys_run(){
    1b4f:	66 55                	push   %bp
    1b51:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    1b54:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    1b5a:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    1b61:	66 5d                	pop    %bp
    1b63:	66 c3                	retw   

00001b65 <do_fork>:

int do_fork(){
    1b65:	66 55                	push   %bp
    1b67:	66 89 e5             	mov    %sp,%bp
    1b6a:	66 83 ec 08          	sub    $0x8,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    1b6e:	67 66 c7 45 fc 64 42 	movw   $0x4264,-0x4(%di)
    1b75:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN )    fork_prg = fork_prg + 1;//应该增加used位，防止被覆盖
    1b77:	eb 06                	jmp    1b7f <do_fork+0x1a>
    1b79:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    1b7f:	67 66 81 7d fc 70 47 	cmpw   $0x4770,-0x4(%di)
    1b86:	00 00                	add    %al,(%eax)
    1b88:	73 10                	jae    1b9a <do_fork+0x35>
    1b8a:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1b8f:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    1b94:	66 83 f8 01          	cmp    $0x1,%ax
    1b98:	74 df                	je     1b79 <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    1b9a:	67 66 81 7d fc 2c 47 	cmpw   $0x472c,-0x4(%di)
    1ba1:	00 00                	add    %al,(%eax)
    1ba3:	76 0f                	jbe    1bb4 <do_fork+0x4f>
    1ba5:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    1bab:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    1bb1:	e9 42 02 66 e8       	jmp    e8661df8 <_end+0xe865c554>
    else{
        _Schedule_once();
    1bb6:	1c e9                	sbb    $0xe9,%al
    1bb8:	ff                   	(bad)  
    1bb9:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    1bbc:	ec                   	in     (%dx),%al
    1bbd:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    1bbe:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    1bc4:	ff 75 fc             	pushl  -0x4(%ebp)
    1bc7:	66 50                	push   %ax
    1bc9:	66 e8 e6 03          	callw  1fb3 <counter+0x62>
    1bcd:	00 00                	add    %al,(%eax)
    1bcf:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    1bd3:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    1bd7:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1bdc:	66 b8 20 42          	mov    $0x4220,%ax
    1be0:	00 00                	add    %al,(%eax)
    1be2:	66 29 c2             	sub    %ax,%dx
    1be5:	66 89 d0             	mov    %dx,%ax
    1be8:	66 c1 f8 02          	sar    $0x2,%ax
    1bec:	66 89 c2             	mov    %ax,%dx
    1bef:	66 89 d0             	mov    %dx,%ax
    1bf2:	66 01 c0             	add    %ax,%ax
    1bf5:	66 01 d0             	add    %dx,%ax
    1bf8:	67 66 8d 14          	lea    (%si),%dx
    1bfc:	85 00                	test   %eax,(%eax)
    1bfe:	00 00                	add    %al,(%eax)
    1c00:	00 66 01             	add    %ah,0x1(%esi)
    1c03:	d0 66 89             	shlb   -0x77(%esi)
    1c06:	c2 66 c1             	ret    $0xc166
    1c09:	e2 08                	loop   1c13 <do_fork+0xae>
    1c0b:	66 01 d0             	add    %dx,%ax
    1c0e:	66 89 c2             	mov    %ax,%dx
    1c11:	66 c1 e2 10          	shl    $0x10,%dx
    1c15:	66 01 d0             	add    %dx,%ax
    1c18:	66 f7 d8             	neg    %ax
    1c1b:	66 89 c2             	mov    %ax,%dx
    1c1e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1c23:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    1c28:	66 a1 84 47 66 89    	mov    0x89664784,%ax
    1c2e:	c2 66 b8             	ret    $0xb866
    1c31:	20 42 00             	and    %al,0x0(%edx)
    1c34:	00 66 29             	add    %ah,0x29(%esi)
    1c37:	c2 66 89             	ret    $0x8966
    1c3a:	d0 66 c1             	shlb   -0x3f(%esi)
    1c3d:	f8                   	clc    
    1c3e:	02 66 89             	add    -0x77(%esi),%ah
    1c41:	c2 66 89             	ret    $0x8966
    1c44:	d0 66 01             	shlb   0x1(%esi)
    1c47:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    1c4b:	67 66 8d 14          	lea    (%si),%dx
    1c4f:	85 00                	test   %eax,(%eax)
    1c51:	00 00                	add    %al,(%eax)
    1c53:	00 66 01             	add    %ah,0x1(%esi)
    1c56:	d0 66 89             	shlb   -0x77(%esi)
    1c59:	c2 66 c1             	ret    $0xc166
    1c5c:	e2 08                	loop   1c66 <do_fork+0x101>
    1c5e:	66 01 d0             	add    %dx,%ax
    1c61:	66 89 c2             	mov    %ax,%dx
    1c64:	66 c1 e2 10          	shl    $0x10,%dx
    1c68:	66 01 d0             	add    %dx,%ax
    1c6b:	66 f7 d8             	neg    %ax
    1c6e:	66 89 c2             	mov    %ax,%dx
    1c71:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1c76:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    1c7b:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    1c81:	8b 50 20             	mov    0x20(%eax),%edx
    1c84:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1c89:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    1c8e:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1c93:	66 b8 20 42          	mov    $0x4220,%ax
    1c97:	00 00                	add    %al,(%eax)
    1c99:	66 29 c2             	sub    %ax,%dx
    1c9c:	66 89 d0             	mov    %dx,%ax
    1c9f:	66 c1 f8 02          	sar    $0x2,%ax
    1ca3:	66 89 c2             	mov    %ax,%dx
    1ca6:	66 89 d0             	mov    %dx,%ax
    1ca9:	66 01 c0             	add    %ax,%ax
    1cac:	66 01 d0             	add    %dx,%ax
    1caf:	67 66 8d 14          	lea    (%si),%dx
    1cb3:	85 00                	test   %eax,(%eax)
    1cb5:	00 00                	add    %al,(%eax)
    1cb7:	00 66 01             	add    %ah,0x1(%esi)
    1cba:	d0 66 89             	shlb   -0x77(%esi)
    1cbd:	c2 66 c1             	ret    $0xc166
    1cc0:	e2 08                	loop   1cca <do_fork+0x165>
    1cc2:	66 01 d0             	add    %dx,%ax
    1cc5:	66 89 c2             	mov    %ax,%dx
    1cc8:	66 c1 e2 10          	shl    $0x10,%dx
    1ccc:	66 01 d0             	add    %dx,%ax
    1ccf:	66 f7 d8             	neg    %ax
    1cd2:	66 83 c0 02          	add    $0x2,%ax
    1cd6:	66 c1 e0 0c          	shl    $0xc,%ax
    1cda:	66 89 c2             	mov    %ax,%dx
    1cdd:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1ce2:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    1ce7:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    1ced:	8b 50 30             	mov    0x30(%eax),%edx
    1cf0:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1cf5:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    1cfa:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1cff:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    1d06:	00 00                	add    %al,(%eax)
        
        int index = fork_prg - PCB_list;
    1d08:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    1d0d:	66 b8 20 42          	mov    $0x4220,%ax
    1d11:	00 00                	add    %al,(%eax)
    1d13:	66 29 c2             	sub    %ax,%dx
    1d16:	66 89 d0             	mov    %dx,%ax
    1d19:	66 c1 f8 02          	sar    $0x2,%ax
    1d1d:	66 89 c2             	mov    %ax,%dx
    1d20:	66 89 d0             	mov    %dx,%ax
    1d23:	66 01 c0             	add    %ax,%ax
    1d26:	66 01 d0             	add    %dx,%ax
    1d29:	67 66 8d 14          	lea    (%si),%dx
    1d2d:	85 00                	test   %eax,(%eax)
    1d2f:	00 00                	add    %al,(%eax)
    1d31:	00 66 01             	add    %ah,0x1(%esi)
    1d34:	d0 66 89             	shlb   -0x77(%esi)
    1d37:	c2 66 c1             	ret    $0xc166
    1d3a:	e2 08                	loop   1d44 <do_fork+0x1df>
    1d3c:	66 01 d0             	add    %dx,%ax
    1d3f:	66 89 c2             	mov    %ax,%dx
    1d42:	66 c1 e2 10          	shl    $0x10,%dx
    1d46:	66 01 d0             	add    %dx,%ax
    1d49:	66 f7 d8             	neg    %ax
    1d4c:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
        __asm__("sub $6,%esp");
    1d51:	66 83 ec 06          	sub    $0x6,%sp
        enqueue(&readyqueue,index); 
    1d55:	67 66 ff 75 f8       	pushw  -0x8(%di)
    1d5a:	66 68 20 58          	pushw  $0x5820
    1d5e:	00 00                	add    %al,(%eax)
    1d60:	66 e8 c1 03          	callw  2125 <size+0x11>
    1d64:	00 00                	add    %al,(%eax)
    1d66:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    1d6a:	66 83 c4 06          	add    $0x6,%sp
        _Schedule_once();
    1d6e:	66 e8 62 e7          	callw  4d4 <S+0x14>
    1d72:	ff                   	(bad)  
    1d73:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    1d76:	ec                   	in     (%dx),%al
    1d77:	06                   	push   %es
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    1d78:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1d7d:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    1d82:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    1d88:	8b 50 28             	mov    0x28(%eax),%edx
    1d8b:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    1d91:	8b 40 24             	mov    0x24(%eax),%eax
    1d94:	66 51                	push   %cx
    1d96:	66 52                	push   %dx
    1d98:	66 50                	push   %ax
    1d9a:	66 e8 25 e6          	callw  3c3 <Message31+0x4>
    1d9e:	ff                   	(bad)  
    1d9f:	ff 66 83             	jmp    *-0x7d(%esi)
    1da2:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
        __asm__("add $6,%esp");
    1da5:	83 c4 06             	add    $0x6,%esp
        fork_prg -> ip = _CurrentProg -> ip;
    1da8:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    1dae:	8b 50 2c             	mov    0x2c(%eax),%edx
    1db1:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1db6:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    1dbb:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1dc0:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    1dc6:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    1dc8:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    1dce:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    1dd1:	75 08                	jne    1ddb <do_fork+0x276>
            return 0;
    1dd3:	66 b8 00 00          	mov    $0x0,%ax
    1dd7:	00 00                	add    %al,(%eax)
    1dd9:	eb 1b                	jmp    1df6 <do_fork+0x291>
        }
        _CurrentProg -> eax = _CurrentProg -> id;
    1ddb:	66 a1 84 47 66 8b    	mov    0x8b664784,%ax
    1de1:	16                   	push   %ss
    1de2:	84 47 67             	test   %al,0x67(%edi)
    1de5:	66 8b 52 3c          	mov    0x3c(%edx),%dx
    1de9:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    1ded:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    1df3:	8b 00                	mov    (%eax),%eax
    1df5:	90                   	nop
    }
}
    1df6:	66 c9                	leavew 
    1df8:	66 c3                	retw   

00001dfa <sys_exit_fork>:
void sys_exit_fork(char ch){
    1dfa:	66 55                	push   %bp
    1dfc:	66 89 e5             	mov    %sp,%bp
    1dff:	66 83 ec 0c          	sub    $0xc,%sp
    1e03:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1e08:	67 88 45 f4          	mov    %al,-0xc(%di)
    int current_id = _CurrentProg - PCB_list;
    1e0c:	66 a1 84 47 66 89    	mov    0x89664784,%ax
    1e12:	c2 66 b8             	ret    $0xb866
    1e15:	20 42 00             	and    %al,0x0(%edx)
    1e18:	00 66 29             	add    %ah,0x29(%esi)
    1e1b:	c2 66 89             	ret    $0x8966
    1e1e:	d0 66 c1             	shlb   -0x3f(%esi)
    1e21:	f8                   	clc    
    1e22:	02 66 89             	add    -0x77(%esi),%ah
    1e25:	c2 66 89             	ret    $0x8966
    1e28:	d0 66 01             	shlb   0x1(%esi)
    1e2b:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    1e2f:	67 66 8d 14          	lea    (%si),%dx
    1e33:	85 00                	test   %eax,(%eax)
    1e35:	00 00                	add    %al,(%eax)
    1e37:	00 66 01             	add    %ah,0x1(%esi)
    1e3a:	d0 66 89             	shlb   -0x77(%esi)
    1e3d:	c2 66 c1             	ret    $0xc166
    1e40:	e2 08                	loop   1e4a <sys_exit_fork+0x50>
    1e42:	66 01 d0             	add    %dx,%ax
    1e45:	66 89 c2             	mov    %ax,%dx
    1e48:	66 c1 e2 10          	shl    $0x10,%dx
    1e4c:	66 01 d0             	add    %dx,%ax
    1e4f:	66 f7 d8             	neg    %ax
    1e52:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    int index = _CurrentProg -> fid;
    1e57:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    1e5d:	8b 40 40             	mov    0x40(%eax),%eax
    1e60:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    sys_wakeup(index);
    1e65:	67 66 ff 75 f8       	pushw  -0x8(%di)
    1e6a:	66 e8 2a fc          	callw  1a98 <sys_bolocked+0xb3>
    1e6e:	ff                   	(bad)  
    1e6f:	ff 66 83             	jmp    *-0x7d(%esi)
    1e72:	c4 04 66             	les    (%esi,%eiz,2),%eax
    PCB_list[_CurrentProg -> fid].eax = ch;
    1e75:	a1 84 47 67 66       	mov    0x66674784,%eax
    1e7a:	8b 40 40             	mov    0x40(%eax),%eax
    1e7d:	67 66 0f be 55 f4    	movsbw -0xc(%di),%dx
    1e83:	66 c1 e0 02          	shl    $0x2,%ax
    1e87:	66 89 c1             	mov    %ax,%cx
    1e8a:	66 c1 e1 04          	shl    $0x4,%cx
    1e8e:	66 01 c8             	add    %cx,%ax
    1e91:	66 05 20 42          	add    $0x4220,%ax
    1e95:	00 00                	add    %al,(%eax)
    1e97:	67 66 89 10          	mov    %dx,(%bx,%si)
    _CurrentProg -> prg_status = EXIT;
    1e9b:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    1ea1:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    rmele(&readyqueue,current_id);
    1ea8:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1ead:	66 68 20 58          	pushw  $0x5820
    1eb1:	00 00                	add    %al,(%eax)
    1eb3:	66 e8 7e 03          	callw  2235 <init_queue+0x30>
    1eb7:	00 00                	add    %al,(%eax)
    1eb9:	66 83 c4 08          	add    $0x8,%sp
    _Schedule();
    1ebd:	66 e8 29 e6          	callw  4ea <_fork_user+0x9>
    1ec1:	ff                   	(bad)  
    1ec2:	ff 66 c9             	jmp    *-0x37(%esi)
}
    1ec5:	66 c3                	retw   

00001ec7 <sys_wait>:
int sys_wait(){
    1ec7:	66 55                	push   %bp
    1ec9:	66 89 e5             	mov    %sp,%bp
    1ecc:	66 83 ec 04          	sub    $0x4,%sp
    int index = _CurrentProg - PCB_list;
    1ed0:	66 a1 84 47 66 89    	mov    0x89664784,%ax
    1ed6:	c2 66 b8             	ret    $0xb866
    1ed9:	20 42 00             	and    %al,0x0(%edx)
    1edc:	00 66 29             	add    %ah,0x29(%esi)
    1edf:	c2 66 89             	ret    $0x8966
    1ee2:	d0 66 c1             	shlb   -0x3f(%esi)
    1ee5:	f8                   	clc    
    1ee6:	02 66 89             	add    -0x77(%esi),%ah
    1ee9:	c2 66 89             	ret    $0x8966
    1eec:	d0 66 01             	shlb   0x1(%esi)
    1eef:	c0 66 01 d0          	shlb   $0xd0,0x1(%esi)
    1ef3:	67 66 8d 14          	lea    (%si),%dx
    1ef7:	85 00                	test   %eax,(%eax)
    1ef9:	00 00                	add    %al,(%eax)
    1efb:	00 66 01             	add    %ah,0x1(%esi)
    1efe:	d0 66 89             	shlb   -0x77(%esi)
    1f01:	c2 66 c1             	ret    $0xc166
    1f04:	e2 08                	loop   1f0e <sys_wait+0x47>
    1f06:	66 01 d0             	add    %dx,%ax
    1f09:	66 89 c2             	mov    %ax,%dx
    1f0c:	66 c1 e2 10          	shl    $0x10,%dx
    1f10:	66 01 d0             	add    %dx,%ax
    1f13:	66 f7 d8             	neg    %ax
    1f16:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_bolocked(index);
    1f1b:	67 66 ff 75 fc       	pushw  -0x4(%di)
    1f20:	66 e8 bf fa          	callw  19e3 <sys_exit+0x7a>
    1f24:	ff                   	(bad)  
    1f25:	ff 66 83             	jmp    *-0x7d(%esi)
    1f28:	c4 04 66             	les    (%esi,%eiz,2),%eax
    _Schedule();
    1f2b:	e8 bc e5 ff ff       	call   4ec <_Schedule>
    return _CurrentProg -> eax;
    1f30:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    1f36:	8b 00                	mov    (%eax),%eax
}
    1f38:	66 c9                	leavew 
    1f3a:	66 c3                	retw   

00001f3c <thread_join>:
void thread_join(){
    1f3c:	66 55                	push   %bp
    1f3e:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    1f41:	90                   	nop
    1f42:	66 e8 09 00          	callw  1f4f <thread_join+0x13>
    1f46:	00 00                	add    %al,(%eax)
    1f48:	66 85 c0             	test   %ax,%ax
    1f4b:	75 f5                	jne    1f42 <thread_join+0x6>
    }
}
    1f4d:	66 5d                	pop    %bp
    1f4f:	66 c3                	retw   

00001f51 <counter>:
int counter(){
    1f51:	66 55                	push   %bp
    1f53:	66 89 e5             	mov    %sp,%bp
    1f56:	66 83 ec 08          	sub    $0x8,%sp
   // __asm__("cli\n");
    int i = 0;
    1f5a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    1f61:	00 00                	add    %al,(%eax)
    int count = 0;
    1f63:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    1f6a:	00 00                	add    %al,(%eax)
    for(i = 1;i < PCB_NUMMER;i ++){
    1f6c:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    1f73:	00 00                	add    %al,(%eax)
    1f75:	eb 2d                	jmp    1fa4 <counter+0x53>
        if(PCB_list[i].prg_status != EXIT){
    1f77:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    1f7c:	66 c1 e0 02          	shl    $0x2,%ax
    1f80:	66 89 c2             	mov    %ax,%dx
    1f83:	66 c1 e2 04          	shl    $0x4,%dx
    1f87:	66 01 d0             	add    %dx,%ax
    1f8a:	66 05 50 42          	add    $0x4250,%ax
    1f8e:	00 00                	add    %al,(%eax)
    1f90:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    1f95:	66 85 c0             	test   %ax,%ax
    1f98:	74 05                	je     1f9f <counter+0x4e>
            count ++;
    1f9a:	67 66 ff 45 f8       	incw   -0x8(%di)
}
int counter(){
   // __asm__("cli\n");
    int i = 0;
    int count = 0;
    for(i = 1;i < PCB_NUMMER;i ++){
    1f9f:	67 66 ff 45 fc       	incw   -0x4(%di)
    1fa4:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    1faa:	7e cb                	jle    1f77 <counter+0x26>
        if(PCB_list[i].prg_status != EXIT){
            count ++;
        }
    }
    //__asm__("sti\n");
    return count;
    1fac:	67 66 8b 45 f8       	mov    -0x8(%di),%ax

}
    1fb1:	66 c9                	leavew 
    1fb3:	66 c3                	retw   

00001fb5 <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    1fb5:	66 55                	push   %bp
    1fb7:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    1fba:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1fbf:	67 66 8b 10          	mov    (%bx,%si),%dx
    1fc3:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1fc8:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    1fcc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1fd1:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    1fd6:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1fdb:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    1fe0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1fe5:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    1fea:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    1fef:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    1ff4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    1ff9:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    1ffe:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    2003:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    2008:	67 66 8b 45 08       	mov    0x8(%di),%ax
    200d:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    2012:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    2017:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    201c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2021:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    2026:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    202b:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    2030:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2035:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    203a:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    203f:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    2044:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2049:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    204e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    2053:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    2058:	67 66 8b 45 08       	mov    0x8(%di),%ax
    205d:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    2062:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    2067:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    206c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2071:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    2076:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    207b:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    2080:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2085:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    208a:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    208f:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    2094:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2099:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    209e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    20a3:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    20a8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20ad:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    20b2:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    20b7:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    20bc:	66 5d                	pop    %bp
    20be:	66 c3                	retw   

000020c0 <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    20c0:	66 55                	push   %bp
    20c2:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    20c5:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    20ca:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    20cf:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20d4:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    20d9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    20de:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    20e3:	66 51                	push   %cx
    20e5:	66 52                	push   %dx
    20e7:	66 50                	push   %ax
    20e9:	66 e8 d6 e2          	callw  3c3 <Message31+0x4>
    20ed:	ff                   	(bad)  
    20ee:	ff 66 83             	jmp    *-0x7d(%esi)
    20f1:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    20f4:	c9                   	leave  
    20f5:	66 c3                	retw   

000020f7 <isempty>:
int isempty(struct Queue *queue){
    20f7:	66 55                	push   %bp
    20f9:	66 89 e5             	mov    %sp,%bp
    
    return (queue -> size == 0);
    20fc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2101:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    2106:	66 85 c0             	test   %ax,%ax
    2109:	0f 94 c0             	sete   %al
    210c:	66 0f b6 c0          	movzbw %al,%ax

}
    2110:	66 5d                	pop    %bp
    2112:	66 c3                	retw   

00002114 <size>:
int size(struct Queue *queue){
    2114:	66 55                	push   %bp
    2116:	66 89 e5             	mov    %sp,%bp
    return queue -> size ;
    2119:	67 66 8b 45 08       	mov    0x8(%di),%ax
    211e:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
}
    2123:	66 5d                	pop    %bp
    2125:	66 c3                	retw   

00002127 <enqueue>:
void enqueue(struct Queue *queue,int data){
    2127:	66 55                	push   %bp
    2129:	66 89 e5             	mov    %sp,%bp
    if(queue -> size >= MAX){
    212c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2131:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    2136:	66 83 f8 1d          	cmp    $0x1d,%ax
    213a:	7e 02                	jle    213e <enqueue+0x17>
        return;
    213c:	eb 51                	jmp    218f <enqueue+0x68>
    }
    queue -> size ++;
    213e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2143:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    2148:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    214d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2152:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    queue -> tail = (queue -> tail + 1) % MAX;
    2157:	67 66 8b 45 08       	mov    0x8(%di),%ax
    215c:	67 66 8b 00          	mov    (%bx,%si),%ax
    2160:	66 40                	inc    %ax
    2162:	66 b9 1e 00          	mov    $0x1e,%cx
    2166:	00 00                	add    %al,(%eax)
    2168:	66 99                	cwtd   
    216a:	66 f7 f9             	idiv   %cx
    216d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2172:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> array[queue -> tail] = data;
    2176:	67 66 8b 45 08       	mov    0x8(%di),%ax
    217b:	67 66 8b 10          	mov    (%bx,%si),%dx
    217f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    2184:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    2189:	67 66 89 4c 90       	mov    %cx,-0x70(%si)
    218e:	0c 66                	or     $0x66,%al

}
    2190:	5d                   	pop    %ebp
    2191:	66 c3                	retw   

00002193 <dequeue>:
void dequeue(struct Queue *queue,int * data){
    2193:	66 55                	push   %bp
    2195:	66 89 e5             	mov    %sp,%bp

    if(queue -> size <= 0){
    2198:	67 66 8b 45 08       	mov    0x8(%di),%ax
    219d:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    21a2:	66 85 c0             	test   %ax,%ax
    21a5:	7f 02                	jg     21a9 <dequeue+0x16>
        return;
    21a7:	eb 58                	jmp    2201 <dequeue+0x6e>
    }
    queue -> size --;
    21a9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    21ae:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    21b3:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    21b8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    21bd:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    *data = queue -> array[queue -> head];
    21c2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    21c7:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    21cc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    21d1:	67 66 8b 54 90       	mov    -0x70(%si),%dx
    21d6:	0c 67                	or     $0x67,%al
    21d8:	66 8b 45 0c          	mov    0xc(%ebp),%ax
    21dc:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> head = (queue -> head + 1) % MAX;
    21e0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    21e5:	67 66 8b 40 04       	mov    0x4(%bx,%si),%ax
    21ea:	66 40                	inc    %ax
    21ec:	66 b9 1e 00          	mov    $0x1e,%cx
    21f0:	00 00                	add    %al,(%eax)
    21f2:	66 99                	cwtd   
    21f4:	66 f7 f9             	idiv   %cx
    21f7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    21fc:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)

}
    2201:	66 5d                	pop    %bp
    2203:	66 c3                	retw   

00002205 <init_queue>:
void init_queue(struct Queue *queue){
    2205:	66 55                	push   %bp
    2207:	66 89 e5             	mov    %sp,%bp
    queue -> size = 0;
    220a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    220f:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    2216:	00 00                	add    %al,(%eax)
    queue -> tail = MAX - 1;
    2218:	67 66 8b 45 08       	mov    0x8(%di),%ax
    221d:	67 66 c7 00 1d 00    	movw   $0x1d,(%bx,%si)
    2223:	00 00                	add    %al,(%eax)
    queue -> head = 0;
    2225:	67 66 8b 45 08       	mov    0x8(%di),%ax
    222a:	67 66 c7 40 04 00 00 	movw   $0x0,0x4(%bx,%si)
    2231:	00 00                	add    %al,(%eax)
}
    2233:	66 5d                	pop    %bp
    2235:	66 c3                	retw   

00002237 <rmele>:
int rm_tmp;
int ii;
int size_of_rmqueue;
void rmele(struct Queue *queue,int data){
    2237:	66 55                	push   %bp
    2239:	66 89 e5             	mov    %sp,%bp
    size_of_rmqueue= size(queue);
    223c:	67 66 ff 75 08       	pushw  0x8(%di)
    2241:	66 e8 cd fe          	callw  2112 <isempty+0x1b>
    2245:	ff                   	(bad)  
    2246:	ff 66 83             	jmp    *-0x7d(%esi)
    2249:	c4 04 66             	les    (%esi,%eiz,2),%eax
    224c:	a3 78 47 66 c7       	mov    %eax,0xc7664778
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    2251:	06                   	push   %es
    2252:	7c 47                	jl     229b <rmele+0x64>
    2254:	00 00                	add    %al,(%eax)
    2256:	00 00                	add    %al,(%eax)
    2258:	eb 3f                	jmp    2299 <rmele+0x62>
        dequeue(queue,&rm_tmp);
    225a:	66 68 08 58          	pushw  $0x5808
    225e:	00 00                	add    %al,(%eax)
    2260:	67 66 ff 75 08       	pushw  0x8(%di)
    2265:	66 e8 28 ff          	callw  2191 <enqueue+0x6a>
    2269:	ff                   	(bad)  
    226a:	ff 66 83             	jmp    *-0x7d(%esi)
    226d:	c4 08                	les    (%eax),%ecx
        if(rm_tmp != data){
    226f:	66 a1 08 58 67 66    	mov    0x66675808,%ax
    2275:	3b 45 0c             	cmp    0xc(%ebp),%eax
    2278:	74 15                	je     228f <rmele+0x58>
            enqueue(queue,rm_tmp);
    227a:	66 a1 08 58 66 50    	mov    0x50665808,%ax
    2280:	67 66 ff 75 08       	pushw  0x8(%di)
    2285:	66 e8 9c fe          	callw  2125 <size+0x11>
    2289:	ff                   	(bad)  
    228a:	ff 66 83             	jmp    *-0x7d(%esi)
    228d:	c4 08                	les    (%eax),%ecx
int rm_tmp;
int ii;
int size_of_rmqueue;
void rmele(struct Queue *queue,int data){
    size_of_rmqueue= size(queue);
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    228f:	66 a1 7c 47 66 40    	mov    0x4066477c,%ax
    2295:	66 a3 7c 47 66 8b    	mov    %ax,0x8b66477c
    229b:	16                   	push   %ss
    229c:	7c 47                	jl     22e5 <init_Semlist+0x3a>
    229e:	66 a1 78 47 66 39    	mov    0x39664778,%ax
    22a4:	c2 7c b3             	ret    $0xb37c
        dequeue(queue,&rm_tmp);
        if(rm_tmp != data){
            enqueue(queue,rm_tmp);
        }
    }
}
    22a7:	66 c9                	leavew 
    22a9:	66 c3                	retw   

000022ab <init_Semlist>:
void init_Semlist(int index){
    22ab:	66 55                	push   %bp
    22ad:	66 89 e5             	mov    %sp,%bp
    SEM_list[index].used = 0;
    22b0:	67 66 8b 55 08       	mov    0x8(%di),%dx
    22b5:	66 89 d0             	mov    %dx,%ax
    22b8:	66 c1 e0 02          	shl    $0x2,%ax
    22bc:	66 01 d0             	add    %dx,%ax
    22bf:	66 c1 e0 02          	shl    $0x2,%ax
    22c3:	67 66 8d 14          	lea    (%si),%dx
    22c7:	c5 00                	lds    (%eax),%eax
    22c9:	00 00                	add    %al,(%eax)
    22cb:	00 66 29             	add    %ah,0x29(%esi)
    22ce:	c2 66 89             	ret    $0x8966
    22d1:	d0 66 05             	shlb   0x5(%esi)
    22d4:	20 48 00             	and    %cl,0x0(%eax)
    22d7:	00 67 66             	add    %ah,0x66(%edi)
    22da:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    init_queue(&SEM_list[index].semaque);
    22e1:	67 66 8b 55 08       	mov    0x8(%di),%dx
    22e6:	66 89 d0             	mov    %dx,%ax
    22e9:	66 c1 e0 02          	shl    $0x2,%ax
    22ed:	66 01 d0             	add    %dx,%ax
    22f0:	66 c1 e0 02          	shl    $0x2,%ax
    22f4:	67 66 8d 14          	lea    (%si),%dx
    22f8:	c5 00                	lds    (%eax),%eax
    22fa:	00 00                	add    %al,(%eax)
    22fc:	00 66 29             	add    %ah,0x29(%esi)
    22ff:	c2 67 66             	ret    $0x6667
    2302:	8d 82 a0 47 00 00    	lea    0x47a0(%edx),%eax
    2308:	66 83 c0 04          	add    $0x4,%ax
    230c:	66 50                	push   %ax
    230e:	66 e8 f1 fe          	callw  2203 <dequeue+0x70>
    2312:	ff                   	(bad)  
    2313:	ff 66 83             	jmp    *-0x7d(%esi)
    2316:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2319:	c9                   	leave  
    231a:	66 c3                	retw   

0000231c <do_SemGet>:
int do_SemGet(int value){
    231c:	66 55                	push   %bp
    231e:	66 89 e5             	mov    %sp,%bp
    2321:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    2325:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    232c:	00 00                	add    %al,(%eax)
    while(SEM_list[i].used == 1){
    232e:	eb 05                	jmp    2335 <do_SemGet+0x19>
        i ++;
    2330:	67 66 ff 45 fc       	incw   -0x4(%di)
    SEM_list[index].used = 0;
    init_queue(&SEM_list[index].semaque);
}
int do_SemGet(int value){
    int i = 0;
    while(SEM_list[i].used == 1){
    2335:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    233a:	66 89 d0             	mov    %dx,%ax
    233d:	66 c1 e0 02          	shl    $0x2,%ax
    2341:	66 01 d0             	add    %dx,%ax
    2344:	66 c1 e0 02          	shl    $0x2,%ax
    2348:	67 66 8d 14          	lea    (%si),%dx
    234c:	c5 00                	lds    (%eax),%eax
    234e:	00 00                	add    %al,(%eax)
    2350:	00 66 29             	add    %ah,0x29(%esi)
    2353:	c2 66 89             	ret    $0x8966
    2356:	d0 66 05             	shlb   0x5(%esi)
    2359:	20 48 00             	and    %cl,0x0(%eax)
    235c:	00 67 66             	add    %ah,0x66(%edi)
    235f:	8b 40 08             	mov    0x8(%eax),%eax
    2362:	66 83 f8 01          	cmp    $0x1,%ax
    2366:	74 c8                	je     2330 <do_SemGet+0x14>
        i ++;
    }
    if(i < SemMax){
    2368:	67 66 83 7d fc 1d    	cmpw   $0x1d,-0x4(%di)
    236e:	7f 7a                	jg     23ea <do_SemGet+0xce>
        init_Semlist(i);
    2370:	67 66 ff 75 fc       	pushw  -0x4(%di)
    2375:	66 e8 30 ff          	callw  22a9 <rmele+0x72>
    2379:	ff                   	(bad)  
    237a:	ff 66 83             	jmp    *-0x7d(%esi)
    237d:	c4 04 67             	les    (%edi,%eiz,2),%eax
        SEM_list[i].used = 1;
    2380:	66 8b 55 fc          	mov    -0x4(%ebp),%dx
    2384:	66 89 d0             	mov    %dx,%ax
    2387:	66 c1 e0 02          	shl    $0x2,%ax
    238b:	66 01 d0             	add    %dx,%ax
    238e:	66 c1 e0 02          	shl    $0x2,%ax
    2392:	67 66 8d 14          	lea    (%si),%dx
    2396:	c5 00                	lds    (%eax),%eax
    2398:	00 00                	add    %al,(%eax)
    239a:	00 66 29             	add    %ah,0x29(%esi)
    239d:	c2 66 89             	ret    $0x8966
    23a0:	d0 66 05             	shlb   0x5(%esi)
    23a3:	20 48 00             	and    %cl,0x0(%eax)
    23a6:	00 67 66             	add    %ah,0x66(%edi)
    23a9:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        SEM_list[i].count = value;
    23b0:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    23b5:	66 89 d0             	mov    %dx,%ax
    23b8:	66 c1 e0 02          	shl    $0x2,%ax
    23bc:	66 01 d0             	add    %dx,%ax
    23bf:	66 c1 e0 02          	shl    $0x2,%ax
    23c3:	67 66 8d 14          	lea    (%si),%dx
    23c7:	c5 00                	lds    (%eax),%eax
    23c9:	00 00                	add    %al,(%eax)
    23cb:	00 66 29             	add    %ah,0x29(%esi)
    23ce:	c2 66 89             	ret    $0x8966
    23d1:	d0 67 66             	shlb   0x66(%edi)
    23d4:	8d 90 a0 47 00 00    	lea    0x47a0(%eax),%edx
    23da:	67 66 8b 45 08       	mov    0x8(%di),%ax
    23df:	67 66 89 02          	mov    %ax,(%bp,%si)
        return i;
    23e3:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    23e8:	eb 06                	jmp    23f0 <do_SemGet+0xd4>
    }
    else 
        return -1;
    23ea:	66 b8 ff ff          	mov    $0xffff,%ax
    23ee:	ff                   	(bad)  
    23ef:	ff 66 c9             	jmp    *-0x37(%esi)
}
    23f2:	66 c3                	retw   

000023f4 <do_SemFree>:
void do_SemFree(int s){
    23f4:	66 55                	push   %bp
    23f6:	66 89 e5             	mov    %sp,%bp
    SEM_list[s].used = 0;
    23f9:	67 66 8b 55 08       	mov    0x8(%di),%dx
    23fe:	66 89 d0             	mov    %dx,%ax
    2401:	66 c1 e0 02          	shl    $0x2,%ax
    2405:	66 01 d0             	add    %dx,%ax
    2408:	66 c1 e0 02          	shl    $0x2,%ax
    240c:	67 66 8d 14          	lea    (%si),%dx
    2410:	c5 00                	lds    (%eax),%eax
    2412:	00 00                	add    %al,(%eax)
    2414:	00 66 29             	add    %ah,0x29(%esi)
    2417:	c2 66 89             	ret    $0x8966
    241a:	d0 66 05             	shlb   0x5(%esi)
    241d:	20 48 00             	and    %cl,0x0(%eax)
    2420:	00 67 66             	add    %ah,0x66(%edi)
    2423:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
    242a:	66 5d                	pop    %bp
    242c:	66 c3                	retw   

0000242e <do_P>:
int tempp;
int sem_index;
int t;
void do_P(int s){
    242e:	66 55                	push   %bp
    2430:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    2433:	fa                   	cli    
    SEM_list[s].count = SEM_list[s].count - 1;
    2434:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2439:	66 89 d0             	mov    %dx,%ax
    243c:	66 c1 e0 02          	shl    $0x2,%ax
    2440:	66 01 d0             	add    %dx,%ax
    2443:	66 c1 e0 02          	shl    $0x2,%ax
    2447:	67 66 8d 14          	lea    (%si),%dx
    244b:	c5 00                	lds    (%eax),%eax
    244d:	00 00                	add    %al,(%eax)
    244f:	00 66 29             	add    %ah,0x29(%esi)
    2452:	c2 66 89             	ret    $0x8966
    2455:	d0 66 05             	shlb   0x5(%esi)
    2458:	a0 47 00 00 67       	mov    0x67000047,%al
    245d:	66 8b 00             	mov    (%eax),%ax
    2460:	67 66 8d 48 ff       	lea    -0x1(%bx,%si),%cx
    2465:	67 66 8b 55 08       	mov    0x8(%di),%dx
    246a:	66 89 d0             	mov    %dx,%ax
    246d:	66 c1 e0 02          	shl    $0x2,%ax
    2471:	66 01 d0             	add    %dx,%ax
    2474:	66 c1 e0 02          	shl    $0x2,%ax
    2478:	67 66 8d 14          	lea    (%si),%dx
    247c:	c5 00                	lds    (%eax),%eax
    247e:	00 00                	add    %al,(%eax)
    2480:	00 66 29             	add    %ah,0x29(%esi)
    2483:	c2 66 89             	ret    $0x8966
    2486:	d0 66 05             	shlb   0x5(%esi)
    2489:	a0 47 00 00 67       	mov    0x67000047,%al
    248e:	66 89 08             	mov    %cx,(%eax)
    if(SEM_list[s].count < 0){
    2491:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2496:	66 89 d0             	mov    %dx,%ax
    2499:	66 c1 e0 02          	shl    $0x2,%ax
    249d:	66 01 d0             	add    %dx,%ax
    24a0:	66 c1 e0 02          	shl    $0x2,%ax
    24a4:	67 66 8d 14          	lea    (%si),%dx
    24a8:	c5 00                	lds    (%eax),%eax
    24aa:	00 00                	add    %al,(%eax)
    24ac:	00 66 29             	add    %ah,0x29(%esi)
    24af:	c2 66 89             	ret    $0x8966
    24b2:	d0 66 05             	shlb   0x5(%esi)
    24b5:	a0 47 00 00 67       	mov    0x67000047,%al
    24ba:	66 8b 00             	mov    (%eax),%ax
    24bd:	66 85 c0             	test   %ax,%ax
    24c0:	0f 89 b1 00 66 a1    	jns    a1662577 <_end+0xa165ccd3>
        sem_index = _CurrentProg - PCB_list;
    24c6:	84 47 66             	test   %al,0x66(%edi)
    24c9:	89 c2                	mov    %eax,%edx
    24cb:	66 b8 20 42          	mov    $0x4220,%ax
    24cf:	00 00                	add    %al,(%eax)
    24d1:	66 29 c2             	sub    %ax,%dx
    24d4:	66 89 d0             	mov    %dx,%ax
    24d7:	66 c1 f8 02          	sar    $0x2,%ax
    24db:	66 89 c2             	mov    %ax,%dx
    24de:	66 89 d0             	mov    %dx,%ax
    24e1:	66 01 c0             	add    %ax,%ax
    24e4:	66 01 d0             	add    %dx,%ax
    24e7:	67 66 8d 14          	lea    (%si),%dx
    24eb:	85 00                	test   %eax,(%eax)
    24ed:	00 00                	add    %al,(%eax)
    24ef:	00 66 01             	add    %ah,0x1(%esi)
    24f2:	d0 66 89             	shlb   -0x77(%esi)
    24f5:	c2 66 c1             	ret    $0xc166
    24f8:	e2 08                	loop   2502 <do_P+0xd4>
    24fa:	66 01 d0             	add    %dx,%ax
    24fd:	66 89 c2             	mov    %ax,%dx
    2500:	66 c1 e2 10          	shl    $0x10,%dx
    2504:	66 01 d0             	add    %dx,%ax
    2507:	66 f7 d8             	neg    %ax
    250a:	66 a3 0c 58 66 a1    	mov    %ax,0xa166580c
        rmele(&readyqueue,sem_index);//将进程从就绪队列中取出
    2510:	0c 58                	or     $0x58,%al
    2512:	66 50                	push   %ax
    2514:	66 68 20 58          	pushw  $0x5820
    2518:	00 00                	add    %al,(%eax)
    251a:	66 e8 17 fd          	callw  2235 <init_queue+0x30>
    251e:	ff                   	(bad)  
    251f:	ff 66 83             	jmp    *-0x7d(%esi)
    2522:	c4 08                	les    (%eax),%ecx
        _CurrentProg->prg_status = BLOCKED;
    2524:	66 a1 84 47 67 66    	mov    0x66674784,%ax
    252a:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
        enqueue(&SEM_list[s].semaque,sem_index);
    2531:	66 8b 0e             	mov    (%esi),%cx
    2534:	0c 58                	or     $0x58,%al
    2536:	67 66 8b 55 08       	mov    0x8(%di),%dx
    253b:	66 89 d0             	mov    %dx,%ax
    253e:	66 c1 e0 02          	shl    $0x2,%ax
    2542:	66 01 d0             	add    %dx,%ax
    2545:	66 c1 e0 02          	shl    $0x2,%ax
    2549:	67 66 8d 14          	lea    (%si),%dx
    254d:	c5 00                	lds    (%eax),%eax
    254f:	00 00                	add    %al,(%eax)
    2551:	00 66 29             	add    %ah,0x29(%esi)
    2554:	c2 67 66             	ret    $0x6667
    2557:	8d 82 a0 47 00 00    	lea    0x47a0(%edx),%eax
    255d:	66 83 c0 04          	add    $0x4,%ax
    2561:	66 51                	push   %cx
    2563:	66 50                	push   %ax
    2565:	66 e8 bc fb          	callw  2125 <size+0x11>
    2569:	ff                   	(bad)  
    256a:	ff 66 83             	jmp    *-0x7d(%esi)
    256d:	c4 08                	les    (%eax),%ecx
        _Schedule_PV();
    256f:	66 e8 e9 df          	callw  55c <_Vr+0x10>
    2573:	ff                   	(bad)  
    2574:	ff                   	(bad)  
    }
    __asm("sti\n");
    2575:	fb                   	sti    
}
    2576:	66 c9                	leavew 
    2578:	66 c3                	retw   

0000257a <do_V>:
int v_res;
int vtempp;
void do_V(int s){
    257a:	66 55                	push   %bp
    257c:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    257f:	fa                   	cli    
    SEM_list[s].count  = SEM_list[s].count + 1;
    2580:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2585:	66 89 d0             	mov    %dx,%ax
    2588:	66 c1 e0 02          	shl    $0x2,%ax
    258c:	66 01 d0             	add    %dx,%ax
    258f:	66 c1 e0 02          	shl    $0x2,%ax
    2593:	67 66 8d 14          	lea    (%si),%dx
    2597:	c5 00                	lds    (%eax),%eax
    2599:	00 00                	add    %al,(%eax)
    259b:	00 66 29             	add    %ah,0x29(%esi)
    259e:	c2 66 89             	ret    $0x8966
    25a1:	d0 66 05             	shlb   0x5(%esi)
    25a4:	a0 47 00 00 67       	mov    0x67000047,%al
    25a9:	66 8b 00             	mov    (%eax),%ax
    25ac:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    25b1:	67 66 8b 55 08       	mov    0x8(%di),%dx
    25b6:	66 89 d0             	mov    %dx,%ax
    25b9:	66 c1 e0 02          	shl    $0x2,%ax
    25bd:	66 01 d0             	add    %dx,%ax
    25c0:	66 c1 e0 02          	shl    $0x2,%ax
    25c4:	67 66 8d 14          	lea    (%si),%dx
    25c8:	c5 00                	lds    (%eax),%eax
    25ca:	00 00                	add    %al,(%eax)
    25cc:	00 66 29             	add    %ah,0x29(%esi)
    25cf:	c2 66 89             	ret    $0x8966
    25d2:	d0 66 05             	shlb   0x5(%esi)
    25d5:	a0 47 00 00 67       	mov    0x67000047,%al
    25da:	66 89 08             	mov    %cx,(%eax)
    if(SEM_list[s].count <= 0){
    25dd:	67 66 8b 55 08       	mov    0x8(%di),%dx
    25e2:	66 89 d0             	mov    %dx,%ax
    25e5:	66 c1 e0 02          	shl    $0x2,%ax
    25e9:	66 01 d0             	add    %dx,%ax
    25ec:	66 c1 e0 02          	shl    $0x2,%ax
    25f0:	67 66 8d 14          	lea    (%si),%dx
    25f4:	c5 00                	lds    (%eax),%eax
    25f6:	00 00                	add    %al,(%eax)
    25f8:	00 66 29             	add    %ah,0x29(%esi)
    25fb:	c2 66 89             	ret    $0x8966
    25fe:	d0 66 05             	shlb   0x5(%esi)
    2601:	a0 47 00 00 67       	mov    0x67000047,%al
    2606:	66 8b 00             	mov    (%eax),%ax
    2609:	66 85 c0             	test   %ax,%ax
    260c:	7f 74                	jg     2682 <do_V+0x108>
        dequeue(&SEM_list[s].semaque,&v_res);
    260e:	67 66 8b 55 08       	mov    0x8(%di),%dx
    2613:	66 89 d0             	mov    %dx,%ax
    2616:	66 c1 e0 02          	shl    $0x2,%ax
    261a:	66 01 d0             	add    %dx,%ax
    261d:	66 c1 e0 02          	shl    $0x2,%ax
    2621:	67 66 8d 14          	lea    (%si),%dx
    2625:	c5 00                	lds    (%eax),%eax
    2627:	00 00                	add    %al,(%eax)
    2629:	00 66 29             	add    %ah,0x29(%esi)
    262c:	c2 67 66             	ret    $0x6667
    262f:	8d 82 a0 47 00 00    	lea    0x47a0(%edx),%eax
    2635:	66 83 c0 04          	add    $0x4,%ax
    2639:	66 68 74 47          	pushw  $0x4774
    263d:	00 00                	add    %al,(%eax)
    263f:	66 50                	push   %ax
    2641:	66 e8 4c fb          	callw  2191 <enqueue+0x6a>
    2645:	ff                   	(bad)  
    2646:	ff 66 83             	jmp    *-0x7d(%esi)
    2649:	c4 08                	les    (%eax),%ecx
        PCB_list[v_res].prg_status = READY;
    264b:	66 a1 74 47 66 c1    	mov    0xc1664774,%ax
    2651:	e0 02                	loopne 2655 <do_V+0xdb>
    2653:	66 89 c2             	mov    %ax,%dx
    2656:	66 c1 e2 04          	shl    $0x4,%dx
    265a:	66 01 d0             	add    %dx,%ax
    265d:	66 05 50 42          	add    $0x4250,%ax
    2661:	00 00                	add    %al,(%eax)
    2663:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    266a:	00 00                	add    %al,(%eax)
        enqueue(&readyqueue,v_res);
    266c:	66 a1 74 47 66 50    	mov    0x50664774,%ax
    2672:	66 68 20 58          	pushw  $0x5820
    2676:	00 00                	add    %al,(%eax)
    2678:	66 e8 a9 fa          	callw  2125 <size+0x11>
    267c:	ff                   	(bad)  
    267d:	ff 66 83             	jmp    *-0x7d(%esi)
    2680:	c4 08                	les    (%eax),%ecx
    }
    __asm__("sti\n");
    2682:	fb                   	sti    

    2683:	66 c9                	leavew 
    2685:	66 c3                	retw   

00002687 <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    2687:	66 55                	push   %bp
    2689:	66 89 e5             	mov    %sp,%bp
    268c:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    2690:	66 e8 4b de          	callw  4df <_Schedule_once+0x9>
    2694:	ff                   	(bad)  
    2695:	ff 67 66             	jmp    *0x66(%edi)
    2698:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    269b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    26a0:	66 c9                	leavew 
    26a2:	66 c3                	retw   

000026a4 <wait>:
char wait(){
    26a4:	66 55                	push   %bp
    26a6:	66 89 e5             	mov    %sp,%bp
    26a9:	66 83 ec 08          	sub    $0x8,%sp
    int temp_ch = _wait();
    26ad:	66 e8 46 de          	callw  4f7 <_Schedule+0xb>
    26b1:	ff                   	(bad)  
    26b2:	ff 67 66             	jmp    *0x66(%edi)
    26b5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char ch = '0' + temp_ch;
    26b8:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    26bd:	66 83 c0 30          	add    $0x30,%ax
    26c1:	67 88 45 fb          	mov    %al,-0x5(%di)
    return ch;
    26c5:	67 8a 45 fb          	mov    -0x5(%di),%al
    //_wait();
}
    26c9:	66 c9                	leavew 
    26cb:	66 c3                	retw   

000026cd <exit>:
void exit(char ch){
    26cd:	66 55                	push   %bp
    26cf:	66 89 e5             	mov    %sp,%bp
    26d2:	66 83 ec 04          	sub    $0x4,%sp
    26d6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    26db:	67 88 45 fc          	mov    %al,-0x4(%di)
    _exit(ch);
    26df:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    26e5:	66 50                	push   %ax
    26e7:	66 e8 17 de          	callw  502 <_wait+0x9>
    26eb:	ff                   	(bad)  
    26ec:	ff 66 83             	jmp    *-0x7d(%esi)
    26ef:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    26f2:	c9                   	leave  
    26f3:	66 c3                	retw   

000026f5 <GetSem>:
int GetSem(int value){
    26f5:	66 55                	push   %bp
    26f7:	66 89 e5             	mov    %sp,%bp
    26fa:	66 83 ec 04          	sub    $0x4,%sp
    int sema = _GetSem(value);
    26fe:	67 66 ff 75 08       	pushw  0x8(%di)
    2703:	66 e8 0d de          	callw  514 <_exit+0x10>
    2707:	ff                   	(bad)  
    2708:	ff 66 83             	jmp    *-0x7d(%esi)
    270b:	c4 04 67             	les    (%edi,%eiz,2),%eax
    270e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return sema;
    2712:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    2717:	66 c9                	leavew 
    2719:	66 c3                	retw   

0000271b <SemFree>:
void SemFree(int value){
    271b:	66 55                	push   %bp
    271d:	66 89 e5             	mov    %sp,%bp
    _FreeSem(value);
    2720:	67 66 ff 75 08       	pushw  0x8(%di)
    2725:	66 e8 fd dd          	callw  526 <_GetSem+0x10>
    2729:	ff                   	(bad)  
    272a:	ff 66 83             	jmp    *-0x7d(%esi)
    272d:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2730:	c9                   	leave  
    2731:	66 c3                	retw   

00002733 <P>:
void P(int s){   
    2733:	66 55                	push   %bp
    2735:	66 89 e5             	mov    %sp,%bp
    _Pr(s);
    2738:	67 66 ff 75 08       	pushw  0x8(%di)
    273d:	66 e8 f7 dd          	callw  538 <_FreeSem+0x10>
    2741:	ff                   	(bad)  
    2742:	ff 66 83             	jmp    *-0x7d(%esi)
    2745:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    2748:	c9                   	leave  
    2749:	66 c3                	retw   

0000274b <V>:
void V(int s){
    274b:	66 55                	push   %bp
    274d:	66 89 e5             	mov    %sp,%bp
    _Vr(s);
    2750:	67 66 ff 75 08       	pushw  0x8(%di)
    2755:	66 e8 f1 dd          	callw  54a <_Pr+0x10>
    2759:	ff                   	(bad)  
    275a:	ff 66 83             	jmp    *-0x7d(%esi)
    275d:	c4 04 66             	les    (%esi,%eiz,2),%eax
    2760:	c9                   	leave  
    2761:	66 c3                	retw   
