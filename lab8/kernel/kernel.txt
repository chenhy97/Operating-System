
kernel.elf:     file format elf32-i386


Disassembly of section .text:

00007d00 <_start>:
    7d00:	66 b8 00 00          	mov    $0x0,%ax
    7d04:	00 00                	add    %al,(%eax)
    7d06:	8e d8                	mov    %eax,%ds
    7d08:	8e c0                	mov    %eax,%es
    7d0a:	8e d0                	mov    %eax,%ss
    7d0c:	66 ea 14 7d 00 00    	ljmpw  $0x0,$0x7d14
	...

00007d14 <main>:
#include"kernel.h"
#include "../syscall/stdio.h"
#include "../syscall/schedule.h"
#include "../syscall/time.h"

int main(){
    7d14:	66 55                	push   %bp
    7d16:	66 89 e5             	mov    %sp,%bp
    7d19:	66 83 ec 0c          	sub    $0xc,%sp
    clearscreen();
    7d1d:	66 e8 b1 06          	callw  83d2 <run+0x5c>
    7d21:	00 00                	add    %al,(%eax)
   // char str[100] = {};
    //getline(str,10);
   // prints(str);
    Initial_Int();
    7d23:	66 e8 bb 06          	callw  83e2 <clearscreen+0xe>
    7d27:	00 00                	add    %al,(%eax)
    init_queue(&readyqueue);
    7d29:	66 68 c0 fd          	pushw  $0xfdc0
    7d2d:	00 00                	add    %al,(%eax)
    7d2f:	66 e8 46 27          	callw  a479 <dequeue+0x70>
    7d33:	00 00                	add    %al,(%eax)
    7d35:	66 83 c4 04          	add    $0x4,%sp
    init_queue(&blockqueue);
    7d39:	66 68 80 c5          	pushw  $0xc580
    7d3d:	00 00                	add    %al,(%eax)
    7d3f:	66 e8 36 27          	callw  a479 <dequeue+0x70>
    7d43:	00 00                	add    %al,(%eax)
    7d45:	66 83 c4 04          	add    $0x4,%sp
   // printTime();
    //Initial_Int_09h();
   // Set_PCB();
    loadProg(25,95,0x2000);
    7d49:	66 68 00 20          	pushw  $0x2000
    7d4d:	00 00                	add    %al,(%eax)
    7d4f:	66 6a 5f             	pushw  $0x5f
    7d52:	66 6a 19             	pushw  $0x19
    7d55:	66 e8 b7 06          	callw  8410 <Initial_Int_08h+0xd>
    7d59:	00 00                	add    %al,(%eax)
    7d5b:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(25,125,0x3000);
    7d5f:	66 68 00 30          	pushw  $0x3000
    7d63:	00 00                	add    %al,(%eax)
    7d65:	66 6a 7d             	pushw  $0x7d
    7d68:	66 6a 19             	pushw  $0x19
    7d6b:	66 e8 a1 06          	callw  8410 <Initial_Int_08h+0xd>
    7d6f:	00 00                	add    %al,(%eax)
    7d71:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(25,155,0x4000);
    7d75:	66 68 00 40          	pushw  $0x4000
    7d79:	00 00                	add    %al,(%eax)
    7d7b:	66 68 9b 00          	pushw  $0x9b
    7d7f:	00 00                	add    %al,(%eax)
    7d81:	66 6a 19             	pushw  $0x19
    7d84:	66 e8 88 06          	callw  8410 <Initial_Int_08h+0xd>
    7d88:	00 00                	add    %al,(%eax)
    7d8a:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(25,185,0x5000);
    7d8e:	66 68 00 50          	pushw  $0x5000
    7d92:	00 00                	add    %al,(%eax)
    7d94:	66 68 b9 00          	pushw  $0xb9
    7d98:	00 00                	add    %al,(%eax)
    7d9a:	66 6a 19             	pushw  $0x19
    7d9d:	66 e8 6f 06          	callw  8410 <Initial_Int_08h+0xd>
    7da1:	00 00                	add    %al,(%eax)
    7da3:	66 83 c4 0c          	add    $0xc,%sp
    _loadP(25,215,0x6000);
    7da7:	66 68 00 60          	pushw  $0x6000
    7dab:	00 00                	add    %al,(%eax)
    7dad:	66 68 d7 00          	pushw  $0xd7
    7db1:	00 00                	add    %al,(%eax)
    7db3:	66 6a 19             	pushw  $0x19
    7db6:	66 e8 5b 07          	callw  8515 <_setPoint+0x15>
    7dba:	00 00                	add    %al,(%eax)
    7dbc:	66 83 c4 0c          	add    $0xc,%sp
    _loadP(25,235,0x7000);
    7dc0:	66 68 00 70          	pushw  $0x7000
    7dc4:	00 00                	add    %al,(%eax)
    7dc6:	66 68 eb 00          	pushw  $0xeb
    7dca:	00 00                	add    %al,(%eax)
    7dcc:	66 6a 19             	pushw  $0x19
    7dcf:	66 e8 42 07          	callw  8515 <_setPoint+0x15>
    7dd3:	00 00                	add    %al,(%eax)
    7dd5:	66 83 c4 0c          	add    $0xc,%sp
    _loadP(25,265,0x8000);
    7dd9:	66 68 00 80          	pushw  $0x8000
    7ddd:	00 00                	add    %al,(%eax)
    7ddf:	66 68 09 01          	pushw  $0x109
    7de3:	00 00                	add    %al,(%eax)
    7de5:	66 6a 19             	pushw  $0x19
    7de8:	66 e8 29 07          	callw  8515 <_setPoint+0x15>
    7dec:	00 00                	add    %al,(%eax)
    7dee:	66 83 c4 0c          	add    $0xc,%sp
    _loadP(25,295,0x9000);
    7df2:	66 68 00 90          	pushw  $0x9000
    7df6:	00 00                	add    %al,(%eax)
    7df8:	66 68 27 01          	pushw  $0x127
    7dfc:	00 00                	add    %al,(%eax)
    7dfe:	66 6a 19             	pushw  $0x19
    7e01:	66 e8 10 07          	callw  8515 <_setPoint+0x15>
    7e05:	00 00                	add    %al,(%eax)
    7e07:	66 83 c4 0c          	add    $0xc,%sp
    //initial_PCB(7);
   //_CurrentProg = PCB_list + 7;
   _CurrentProg = PCB_list;//important! mov dword ptr ds:0x9e60, 0x00009d20,把PCB_list的地址9d20存到ds的9e60处，此后就直接用9e60来织带PCB_list
    7e0b:	66 c7 06 70 cc       	movw   $0xcc70,(%esi)
    7e10:	20 c7                	and    %al,%bh
    7e12:	00 00                	add    %al,(%eax)
    Initial_Int_08h();
    7e14:	66 e8 e9 05          	callw  8401 <Initial_Int_09h+0xd>
    7e18:	00 00                	add    %al,(%eax)
    //initial_PCB(6);
    //_RunProgress(0x8000);


    char const *Messeage = "Built by Chen Hongyang on March 20, 2018";
    7e1a:	67 66 c7 45 fc f8 a8 	movw   $0xa8f8,-0x4(%di)
    7e21:	00 00                	add    %al,(%eax)
    print("===================================================",9,12);
    7e23:	66 6a 0c             	pushw  $0xc
    7e26:	66 6a 09             	pushw  $0x9
    7e29:	66 68 24 a9          	pushw  $0xa924
    7e2d:	00 00                	add    %al,(%eax)
    7e2f:	66 e8 3d 10          	callw  8e70 <_Get_Minutes_2+0x1b>
    7e33:	00 00                	add    %al,(%eax)
    7e35:	66 83 c4 0c          	add    $0xc,%sp

    print("chenhyOS",10,32);
    7e39:	66 6a 20             	pushw  $0x20
    7e3c:	66 6a 0a             	pushw  $0xa
    7e3f:	66 68 58 a9          	pushw  $0xa958
    7e43:	00 00                	add    %al,(%eax)
    7e45:	66 e8 27 10          	callw  8e70 <_Get_Minutes_2+0x1b>
    7e49:	00 00                	add    %al,(%eax)
    7e4b:	66 83 c4 0c          	add    $0xc,%sp
   print(Messeage,11,16); //print the msg
    7e4f:	66 6a 10             	pushw  $0x10
    7e52:	66 6a 0b             	pushw  $0xb
    7e55:	67 66 ff 75 fc       	pushw  -0x4(%di)
    7e5a:	66 e8 12 10          	callw  8e70 <_Get_Minutes_2+0x1b>
    7e5e:	00 00                	add    %al,(%eax)
    7e60:	66 83 c4 0c          	add    $0xc,%sp
   print("===================================================",12,12);
    7e64:	66 6a 0c             	pushw  $0xc
    7e67:	66 6a 0c             	pushw  $0xc
    7e6a:	66 68 24 a9          	pushw  $0xa924
    7e6e:	00 00                	add    %al,(%eax)
    7e70:	66 e8 fc 0f          	callw  8e70 <_Get_Minutes_2+0x1b>
    7e74:	00 00                	add    %al,(%eax)
    7e76:	66 83 c4 0c          	add    $0xc,%sp
   

   char a = getch();
    7e7a:	66 e8 a1 12          	callw  911f <read_and_print_input+0x3a>
    7e7e:	00 00                	add    %al,(%eax)
    7e80:	67 88 45 fb          	mov    %al,-0x5(%di)
   clearscreen(); 
    7e84:	66 e8 4a 05          	callw  83d2 <run+0x5c>
    7e88:	00 00                	add    %al,(%eax)
    char const *Msg1 = "Press any key to get help\n\r";
    7e8a:	67 66 c7 45 f4 61 a9 	movw   $0xa961,-0xc(%di)
    7e91:	00 00                	add    %al,(%eax)
   prints(Msg1);
    7e93:	67 66 ff 75 f4       	pushw  -0xc(%di)
    7e98:	66 e8 65 10          	callw  8f01 <print+0x8f>
    7e9c:	00 00                	add    %al,(%eax)
    7e9e:	66 83 c4 04          	add    $0x4,%sp
   print("!",13,39);
    7ea2:	66 6a 27             	pushw  $0x27
    7ea5:	66 6a 0d             	pushw  $0xd
    7ea8:	66 68 7d a9          	pushw  $0xa97d
    7eac:	00 00                	add    %al,(%eax)
    7eae:	66 e8 be 0f          	callw  8e70 <_Get_Minutes_2+0x1b>
    7eb2:	00 00                	add    %al,(%eax)
    7eb4:	66 83 c4 0c          	add    $0xc,%sp
   //Initial_Int();
    /*buildmap();还有待解决debug
    void *addr = (void*) 0xB100;
    _loadP(2,21,addr);
    showtable();*/
    terminal();
    7eb8:	66 e8 0a 00          	callw  7ec6 <main+0x1b2>
    7ebc:	00 00                	add    %al,(%eax)
    return 0;
    7ebe:	66 b8 00 00          	mov    $0x0,%ax
    7ec2:	00 00                	add    %al,(%eax)
    7ec4:	66 c9                	leavew 
    7ec6:	66 c3                	retw   

00007ec8 <terminal>:
#include "../syscall/use.h"
#include "command.h"
#include "../syscall/stdio.h"
#include "../syscall/time.h"
void run(int queue[],int size);
int terminal(){
    7ec8:	66 55                	push   %bp
    7eca:	66 89 e5             	mov    %sp,%bp
    7ecd:	66 57                	push   %di
    7ecf:	66 56                	push   %si
    7ed1:	66 53                	push   %bx
    7ed3:	66 83 ec 60          	sub    $0x60,%sp
    7ed7:	66 89 e0             	mov    %sp,%ax
    7eda:	66 89 c6             	mov    %ax,%si
    char const *help = "help";
    7edd:	67 66 c7 45 e4 80 a9 	movw   $0xa980,-0x1c(%di)
    7ee4:	00 00                	add    %al,(%eax)
    char const *quit = "quit";
    7ee6:	67 66 c7 45 e0 85 a9 	movw   $0xa985,-0x20(%di)
    7eed:	00 00                	add    %al,(%eax)
    char const *lst = "ls";
    7eef:	67 66 c7 45 dc 8a a9 	movw   $0xa98a,-0x24(%di)
    7ef6:	00 00                	add    %al,(%eax)
    char const *CMDHead = "hongyangchendeMacBook-Air:chenhyOS users$ ";
    7ef8:	67 66 c7 45 d8 90 a9 	movw   $0xa990,-0x28(%di)
    7eff:	00 00                	add    %al,(%eax)
    char const *controlMsg1 = "The queue is full,waiting for the Enter Key.";
    7f01:	67 66 c7 45 d4 bc a9 	movw   $0xa9bc,-0x2c(%di)
    7f08:	00 00                	add    %al,(%eax)
    char const *controlMsg2 = "The queue is empty!";
    7f0a:	67 66 c7 45 d0 e9 a9 	movw   $0xa9e9,-0x30(%di)
    7f11:	00 00                	add    %al,(%eax)
    char const *ByeByeMsg = "ByeBye";
    7f13:	67 66 c7 45 cc fd a9 	movw   $0xa9fd,-0x34(%di)
    7f1a:	00 00                	add    %al,(%eax)
    char const *filelist = "Program1 upleft   Program2 upright  \r\nProgram3 downleft  Program4 downright";
    7f1c:	67 66 c7 45 c8 04 aa 	movw   $0xaa04,-0x38(%di)
    7f23:	00 00                	add    %al,(%eax)
    char const *HelpMsg1 = "Enter 1,2,3,4 to run the program\n\rEnter quit,to quit\n\rEnter help to print this script again";
    7f25:	67 66 c7 45 c4 50 aa 	movw   $0xaa50,-0x3c(%di)
    7f2c:	00 00                	add    %al,(%eax)
    int Maxsize = 10;
    7f2e:	67 66 c7 45 c0 0a 00 	movw   $0xa,-0x40(%di)
    7f35:	00 00                	add    %al,(%eax)
    print_next_line(HelpMsg1);
    7f37:	67 66 ff 75 c4       	pushw  -0x3c(%di)
    7f3c:	66 e8 36 11          	callw  9076 <printsint+0xf6>
    7f40:	00 00                	add    %al,(%eax)
    7f42:	66 83 c4 04          	add    $0x4,%sp
    
            // _RunProgress(0xC000);
   prints(CMDHead);
    7f46:	67 66 ff 75 d8       	pushw  -0x28(%di)
    7f4b:	66 e8 b2 0f          	callw  8f01 <print+0x8f>
    7f4f:	00 00                	add    %al,(%eax)
    7f51:	66 83 c4 04          	add    $0x4,%sp
    char recived[10] = {};
    7f55:	67 66 8d 5d 96       	lea    -0x6a(%di),%bx
    7f5a:	66 ba 0a 00          	mov    $0xa,%dx
    7f5e:	00 00                	add    %al,(%eax)
    7f60:	b0 00                	mov    $0x0,%al
    7f62:	66 89 df             	mov    %bx,%di
    7f65:	66 89 d1             	mov    %dx,%cx
    7f68:	f3 aa                	rep stos %al,%es:(%edi)
    recived[0] = 0;
    7f6a:	67 c6 45 96 00       	movb   $0x0,-0x6a(%di)
    int index_of_str = 0;
    7f6f:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    7f76:	00 00                	add    %al,(%eax)
    int i = 1;
    7f78:	67 66 c7 45 bc 01 00 	movw   $0x1,-0x44(%di)
    7f7f:	00 00                	add    %al,(%eax)
    int queue[Maxsize];
    7f81:	67 66 8b 45 c0       	mov    -0x40(%di),%ax
    7f86:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    7f8b:	67 66 89 55 b8       	mov    %dx,-0x48(%di)
    7f90:	66 c1 e0 02          	shl    $0x2,%ax
    7f94:	67 66 8d 50 03       	lea    0x3(%bx,%si),%dx
    7f99:	66 b8 04 00          	mov    $0x4,%ax
    7f9d:	00 00                	add    %al,(%eax)
    7f9f:	66 48                	dec    %ax
    7fa1:	66 01 d0             	add    %dx,%ax
    7fa4:	66 bb 04 00          	mov    $0x4,%bx
    7fa8:	00 00                	add    %al,(%eax)
    7faa:	66 ba 00 00          	mov    $0x0,%dx
    7fae:	00 00                	add    %al,(%eax)
    7fb0:	66 f7 f3             	div    %bx
    7fb3:	66 6b c0 04          	imul   $0x4,%ax,%ax
    7fb7:	66 29 c4             	sub    %ax,%sp
    7fba:	66 89 e0             	mov    %sp,%ax
    7fbd:	66 83 c0 03          	add    $0x3,%ax
    7fc1:	66 c1 e8 02          	shr    $0x2,%ax
    7fc5:	66 c1 e0 02          	shl    $0x2,%ax
    7fc9:	67 66 89 45 b4       	mov    %ax,-0x4c(%di)
    int num_of_queue = 0;
    7fce:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    7fd5:	00 00                	add    %al,(%eax)
    int number = 0;
    7fd7:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    7fde:	00 00                	add    %al,(%eax)
    int k = 0;
    7fe0:	67 66 c7 45 b0 00 00 	movw   $0x0,-0x50(%di)
    7fe7:	00 00                	add    %al,(%eax)
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    7fe9:	e9 6e 03 66 e8       	jmp    e866835c <_end+0xe86583e0>
        char save = getch();
    7fee:	2f                   	das    
    7fef:	11 00                	adc    %eax,(%eax)
    7ff1:	00 67 88             	add    %ah,-0x78(%edi)
    7ff4:	45                   	inc    %ebp
    7ff5:	af                   	scas   %es:(%edi),%eax
        if(save == 32){//空格
    7ff6:	67 80 7d af 20       	cmpb   $0x20,-0x51(%di)
    7ffb:	75 74                	jne    8071 <terminal+0x1a9>
            if(num_of_queue == Maxsize){
    7ffd:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    8002:	67 66 3b 45 c0       	cmp    -0x40(%di),%ax
    8007:	75 31                	jne    803a <terminal+0x172>
                prints("\n\r");
    8009:	66 68 ac aa          	pushw  $0xaaac
    800d:	00 00                	add    %al,(%eax)
    800f:	66 e8 ee 0e          	callw  8f01 <print+0x8f>
    8013:	00 00                	add    %al,(%eax)
    8015:	66 83 c4 04          	add    $0x4,%sp
                print_next_line(controlMsg1);
    8019:	67 66 ff 75 d4       	pushw  -0x2c(%di)
    801e:	66 e8 54 10          	callw  9076 <printsint+0xf6>
    8022:	00 00                	add    %al,(%eax)
    8024:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    8028:	67 66 ff 75 d8       	pushw  -0x28(%di)
    802d:	66 e8 d0 0e          	callw  8f01 <print+0x8f>
    8031:	00 00                	add    %al,(%eax)
    8033:	66 83 c4 04          	add    $0x4,%sp
                continue;
    8037:	e9 20 03 67 66       	jmp    6667835c <_end+0x666683e0>
            }
            printc(save);
    803c:	0f be 45 af          	movsbl -0x51(%ebp),%eax
    8040:	66 50                	push   %ax
    8042:	66 e8 0f 0f          	callw  8f55 <prints+0x52>
    8046:	00 00                	add    %al,(%eax)
    8048:	66 83 c4 04          	add    $0x4,%sp
            queue[num_of_queue] = number;
    804c:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    8051:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    8056:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    805b:	67 66 89 0c          	mov    %cx,(%si)
    805f:	90                   	nop
            num_of_queue ++;
    8060:	67 66 ff 45 ec       	incw   -0x14(%di)
            number = 0;
    8065:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    806c:	00 00                	add    %al,(%eax)
            continue;
    806e:	e9 e9 02 67 80       	jmp    8067835c <_end+0x806683e0>
        }
       else  if(save == 13){//回车
    8073:	7d af                	jge    8024 <terminal+0x15c>
    8075:	0d 0f 85 39 02       	or     $0x239850f,%eax
            int strcmp1 = strcmp(recived,quit);
    807a:	67 66 ff 75 e0       	pushw  -0x20(%di)
    807f:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    8084:	66 50                	push   %ax
    8086:	66 e8 b4 11          	callw  923e <print_different_color+0x86>
    808a:	00 00                	add    %al,(%eax)
    808c:	66 83 c4 08          	add    $0x8,%sp
    8090:	67 66 89 45 a8       	mov    %ax,-0x58(%di)
            int strcmp2 = strcmp(recived,help);
    8095:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    809a:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    809f:	66 50                	push   %ax
    80a1:	66 e8 99 11          	callw  923e <print_different_color+0x86>
    80a5:	00 00                	add    %al,(%eax)
    80a7:	66 83 c4 08          	add    $0x8,%sp
    80ab:	67 66 89 45 a4       	mov    %ax,-0x5c(%di)
            int strcmp3 = strcmp(recived,lst);
    80b0:	67 66 ff 75 dc       	pushw  -0x24(%di)
    80b5:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    80ba:	66 50                	push   %ax
    80bc:	66 e8 7e 11          	callw  923e <print_different_color+0x86>
    80c0:	00 00                	add    %al,(%eax)
    80c2:	66 83 c4 08          	add    $0x8,%sp
    80c6:	67 66 89 45 a0       	mov    %ax,-0x60(%di)
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
    80cb:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    80d1:	75 22                	jne    80f5 <terminal+0x22d>
    80d3:	67 66 83 7d e8 00    	cmpw   $0x0,-0x18(%di)
    80d9:	75 1a                	jne    80f5 <terminal+0x22d>
    80db:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    80e1:	74 12                	je     80f5 <terminal+0x22d>
    80e3:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    80e9:	74 0a                	je     80f5 <terminal+0x22d>
    80eb:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    80f1:	0f 85 73 01 67 66    	jne    6667826a <_end+0x666682ee>
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    80f7:	83 7d a8 01          	cmpl   $0x1,-0x58(%ebp)
    80fb:	74 12                	je     810f <terminal+0x247>
    80fd:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    8103:	74 0a                	je     810f <terminal+0x247>
    8105:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    810b:	0f 85 b9 00 66 68    	jne    686681ca <_end+0x6865824e>
                    print_next_line("");
    8111:	af                   	scas   %es:(%edi),%eax
    8112:	aa                   	stos   %al,%es:(%edi)
    8113:	00 00                	add    %al,(%eax)
    8115:	66 e8 5d 0f          	callw  9076 <printsint+0xf6>
    8119:	00 00                	add    %al,(%eax)
    811b:	66 83 c4 04          	add    $0x4,%sp
                    if(strcmp1 == 1){
    811f:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    8125:	75 2b                	jne    8152 <terminal+0x28a>
                        print_next_line(ByeByeMsg);
    8127:	67 66 ff 75 cc       	pushw  -0x34(%di)
    812c:	66 e8 46 0f          	callw  9076 <printsint+0xf6>
    8130:	00 00                	add    %al,(%eax)
    8132:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    8136:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    813d:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    813f:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8144:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8149:	66 01 d0             	add    %dx,%ax
    814c:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8150:	eb 64                	jmp    81b6 <terminal+0x2ee>
                    }                  
                   else if(strcmp2 == 1){
    8152:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    8158:	75 2b                	jne    8185 <terminal+0x2bd>
                         print_next_line(HelpMsg1);
    815a:	67 66 ff 75 c4       	pushw  -0x3c(%di)
    815f:	66 e8 13 0f          	callw  9076 <printsint+0xf6>
    8163:	00 00                	add    %al,(%eax)
    8165:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    8169:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8170:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    8172:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8177:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    817c:	66 01 d0             	add    %dx,%ax
    817f:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8183:	eb 31                	jmp    81b6 <terminal+0x2ee>
                    }
                    else if(strcmp3 == 1){
    8185:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    818b:	75 29                	jne    81b6 <terminal+0x2ee>
                        print_next_line(filelist);
    818d:	67 66 ff 75 c8       	pushw  -0x38(%di)
    8192:	66 e8 e0 0e          	callw  9076 <printsint+0xf6>
    8196:	00 00                	add    %al,(%eax)
    8198:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    819c:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    81a3:	00 00                	add    %al,(%eax)
                      recived[index_of_str] = 0;
    81a5:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    81aa:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    81af:	66 01 d0             	add    %dx,%ax
    81b2:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    }
                        //prints(recived);
                    prints(CMDHead);
    81b6:	67 66 ff 75 d8       	pushw  -0x28(%di)
    81bb:	66 e8 42 0d          	callw  8f01 <print+0x8f>
    81bf:	00 00                	add    %al,(%eax)
    81c1:	66 83 c4 04          	add    $0x4,%sp
                    continue;
    81c5:	e9 92 01 67 66       	jmp    6667835c <_end+0x666683e0>
                }
            
                else if(number != 0||num_of_queue != 0){
    81ca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    81ce:	75 0a                	jne    81da <terminal+0x312>
    81d0:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    81d6:	0f 84 8a 00 67 66    	je     66678266 <_end+0x666682ea>
                    if(number != 0 ){
    81dc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    81e0:	74 28                	je     820a <terminal+0x342>
                         printsint(number);
    81e2:	67 66 ff 75 e8       	pushw  -0x18(%di)
    81e7:	66 e8 93 0d          	callw  8f7e <printc+0x27>
    81eb:	00 00                	add    %al,(%eax)
    81ed:	66 83 c4 04          	add    $0x4,%sp
                        queue[num_of_queue] = number;
    81f1:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    81f6:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    81fb:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    8200:	67 66 89 0c          	mov    %cx,(%si)
    8204:	90                   	nop
                        num_of_queue++;
    8205:	67 66 ff 45 ec       	incw   -0x14(%di)
                    }
                    run(queue,num_of_queue);
    820a:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    820f:	67 66 ff 75 ec       	pushw  -0x14(%di)
    8214:	66 50                	push   %ax
    8216:	66 e8 5a 01          	callw  8374 <terminal+0x4ac>
    821a:	00 00                	add    %al,(%eax)
    821c:	66 83 c4 08          	add    $0x8,%sp
                    num_of_queue = 0;
    8220:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    8227:	00 00                	add    %al,(%eax)
                    number = 0;
    8229:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    8230:	00 00                	add    %al,(%eax)
                    clearscreen();
    8232:	66 e8 9c 01          	callw  83d2 <run+0x5c>
    8236:	00 00                	add    %al,(%eax)
                    prints(CMDHead);
    8238:	67 66 ff 75 d8       	pushw  -0x28(%di)
    823d:	66 e8 c0 0c          	callw  8f01 <print+0x8f>
    8241:	00 00                	add    %al,(%eax)
    8243:	66 83 c4 04          	add    $0x4,%sp
                    index_of_str = 0;
    8247:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    824e:	00 00                	add    %al,(%eax)
                    recived[index_of_str] = 0;
    8250:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8255:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    825a:	66 01 d0             	add    %dx,%ax
    825d:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    continue;
    8261:	e9 f6 00 90 e9       	jmp    e990835c <_end+0xe98f83e0>
            int strcmp1 = strcmp(recived,quit);
            int strcmp2 = strcmp(recived,help);
            int strcmp3 = strcmp(recived,lst);
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    8266:	f2 00 66 68          	repnz add %ah,0x68(%esi)
                    recived[index_of_str] = 0;
                    continue;
                }
            }
            else{
                 prints("\n\r");
    826a:	ac                   	lods   %ds:(%esi),%al
    826b:	aa                   	stos   %al,%es:(%edi)
    826c:	00 00                	add    %al,(%eax)
    826e:	66 e8 8f 0c          	callw  8f01 <print+0x8f>
    8272:	00 00                	add    %al,(%eax)
    8274:	66 83 c4 04          	add    $0x4,%sp
                print_next_line(controlMsg2);
    8278:	67 66 ff 75 d0       	pushw  -0x30(%di)
    827d:	66 e8 f5 0d          	callw  9076 <printsint+0xf6>
    8281:	00 00                	add    %al,(%eax)
    8283:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    8287:	67 66 ff 75 d8       	pushw  -0x28(%di)
    828c:	66 e8 71 0c          	callw  8f01 <print+0x8f>
    8290:	00 00                	add    %al,(%eax)
    8292:	66 83 c4 04          	add    $0x4,%sp
                index_of_str = 0;
    8296:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    829d:	00 00                	add    %al,(%eax)
                recived[index_of_str] = 0;
    829f:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    82a4:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    82a9:	66 01 d0             	add    %dx,%ax
    82ac:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                continue;
    82b0:	e9 a7 00 67 80       	jmp    8067835c <_end+0x806683e0>
            }
        }
        else if(save >= '0' && save <='9'){
    82b5:	7d af                	jge    8266 <terminal+0x39e>
    82b7:	2f                   	das    
    82b8:	7e 42                	jle    82fc <terminal+0x434>
    82ba:	67 80 7d af 39       	cmpb   $0x39,-0x51(%di)
    82bf:	7f 3b                	jg     82fc <terminal+0x434>
           printc(save);
    82c1:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    82c7:	66 50                	push   %ax
    82c9:	66 e8 88 0c          	callw  8f55 <prints+0x52>
    82cd:	00 00                	add    %al,(%eax)
    82cf:	66 83 c4 04          	add    $0x4,%sp
            number = number * 10 + save -'0';
    82d3:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
    82d8:	66 89 d0             	mov    %dx,%ax
    82db:	66 c1 e0 02          	shl    $0x2,%ax
    82df:	66 01 d0             	add    %dx,%ax
    82e2:	66 01 c0             	add    %ax,%ax
    82e5:	66 89 c2             	mov    %ax,%dx
    82e8:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    82ee:	66 01 d0             	add    %dx,%ax
    82f1:	66 83 e8 30          	sub    $0x30,%ax
    82f5:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
           // printsint(number);
            continue;
    82fa:	eb 5e                	jmp    835a <terminal+0x492>
        }
        else{
           printc(save);
    82fc:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    8302:	66 50                	push   %ax
    8304:	66 e8 4d 0c          	callw  8f55 <prints+0x52>
    8308:	00 00                	add    %al,(%eax)
    830a:	66 83 c4 04          	add    $0x4,%sp
           // if(save == '-' || save == 'q' || save == 'h' || save == 'l' || save =='s'){
            if(index_of_str < 10){
    830e:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    8314:	7f 2c                	jg     8342 <terminal+0x47a>
                recived[index_of_str] =  save;
    8316:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    831b:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8320:	66 01 c2             	add    %ax,%dx
    8323:	67 8a 45 af          	mov    -0x51(%di),%al
    8327:	67 88 02             	mov    %al,(%bp,%si)
                index_of_str ++;
    832a:	67 66 ff 45 f0       	incw   -0x10(%di)
                recived[index_of_str] = 0;
    832f:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8334:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8339:	66 01 d0             	add    %dx,%ax
    833c:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8340:	eb 18                	jmp    835a <terminal+0x492>
            }
            else if(index_of_str >= 10){
    8342:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    8348:	7e 10                	jle    835a <terminal+0x492>
                prints("not added");
    834a:	66 68 b0 aa          	pushw  $0xaab0
    834e:	00 00                	add    %al,(%eax)
    8350:	66 e8 ad 0b          	callw  8f01 <print+0x8f>
    8354:	00 00                	add    %al,(%eax)
    8356:	66 83 c4 04          	add    $0x4,%sp
    int number = 0;
    int k = 0;
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    835a:	67 66 83 7d bc 00    	cmpw   $0x0,-0x44(%di)
    8360:	0f 85 88 fc 66 89    	jne    89677fee <_end+0x89668072>
    8366:	f4                   	hlt    
            else if(index_of_str >= 10){
                prints("not added");
            }
        }
    }
}
    8367:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    836c:	66 5b                	pop    %bx
    836e:	66 5e                	pop    %si
    8370:	66 5f                	pop    %di
    8372:	66 5d                	pop    %bp
    8374:	66 c3                	retw   

00008376 <run>:
void run(int queue[],int size){
    8376:	66 55                	push   %bp
    8378:	66 89 e5             	mov    %sp,%bp
    837b:	66 83 ec 04          	sub    $0x4,%sp
    int j = 0;
    837f:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8386:	00 00                	add    %al,(%eax)
    clearscreen();
    8388:	66 e8 46 00          	callw  83d2 <run+0x5c>
    838c:	00 00                	add    %al,(%eax)
    for(j = 0;j < size;j ++){
    838e:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8395:	00 00                	add    %al,(%eax)
    8397:	eb 2b                	jmp    83c4 <run+0x4e>
        //_delay();
        //_load_userProgram(queue[j]);
        //_delay();
        initial_PCB(queue[j]);
    8399:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    839e:	67 66 8d 14          	lea    (%si),%dx
    83a2:	85 00                	test   %eax,(%eax)
    83a4:	00 00                	add    %al,(%eax)
    83a6:	00 67 66             	add    %ah,0x66(%edi)
    83a9:	8b 45 08             	mov    0x8(%ebp),%eax
    83ac:	66 01 d0             	add    %dx,%ax
    83af:	67 66 8b 00          	mov    (%bx,%si),%ax
    83b3:	66 50                	push   %ax
    83b5:	66 e8 59 15          	callw  9912 <V+0x16>
    83b9:	00 00                	add    %al,(%eax)
    83bb:	66 83 c4 04          	add    $0x4,%sp
    }
}
void run(int queue[],int size){
    int j = 0;
    clearscreen();
    for(j = 0;j < size;j ++){
    83bf:	67 66 ff 45 fc       	incw   -0x4(%di)
    83c4:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    83c9:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    83ce:	7c c9                	jl     8399 <run+0x23>
    //}
    
   // clearscreen();;
   //thread_join();
    //Initial_Int_08h();
    83d0:	66 c9                	leavew 
    83d2:	66 c3                	retw   

000083d4 <clearscreen>:
#include "use.h"
//====================================================
//                封装清屏函数
//====================================================
void clearscreen(){
    83d4:	66 55                	push   %bp
    83d6:	66 89 e5             	mov    %sp,%bp
	_clearscreen();//C调用汇编时会压入四个字节，必须考虑到这个，写出newret，是pop edx,而非 pop dx；
    83d9:	66 e8 c5 00          	callw  84a2 <end_for_copy+0x5>
    83dd:	00 00                	add    %al,(%eax)
	//__asm__("pop %ax");
	return ;
    83df:	90                   	nop
}
    83e0:	66 5d                	pop    %bp
    83e2:	66 c3                	retw   

000083e4 <Initial_Int>:
	}
}*/
//====================================================
//                封装中断初始化函数
//====================================================
void Initial_Int(){
    83e4:	66 55                	push   %bp
    83e6:	66 89 e5             	mov    %sp,%bp
	_initialInt();
    83e9:	66 e8 a7 05          	callw  8994 <_SetINT3Fh+0x1c>
    83ed:	00 00                	add    %al,(%eax)
	return;
    83ef:	90                   	nop
}
    83f0:	66 5d                	pop    %bp
    83f2:	66 c3                	retw   

000083f4 <Initial_Int_09h>:
void Initial_Int_09h(){
    83f4:	66 55                	push   %bp
    83f6:	66 89 e5             	mov    %sp,%bp
	_initialInt_09h();
    83f9:	66 e8 15 08          	callw  8c12 <_initialInt+0x27c>
    83fd:	00 00                	add    %al,(%eax)
}
    83ff:	66 5d                	pop    %bp
    8401:	66 c3                	retw   

00008403 <Initial_Int_08h>:
void Initial_Int_08h(){
    8403:	66 55                	push   %bp
    8405:	66 89 e5             	mov    %sp,%bp
	_initialInt_08h();
    8408:	66 e8 40 08          	callw  8c4c <_initialInt_09h+0x38>
    840c:	00 00                	add    %al,(%eax)
}
    840e:	66 5d                	pop    %bp
    8410:	66 c3                	retw   

00008412 <loadProg>:
void loadProg(int count,int begin,int memory_postion){
    8412:	66 55                	push   %bp
    8414:	66 89 e5             	mov    %sp,%bp
    _loadP(count,begin,memory_postion);
    8417:	67 66 ff 75 10       	pushw  0x10(%di)
    841c:	67 66 ff 75 0c       	pushw  0xc(%di)
    8421:	67 66 ff 75 08       	pushw  0x8(%di)
    8426:	66 e8 eb 00          	callw  8515 <_setPoint+0x15>
    842a:	00 00                	add    %al,(%eax)
    842c:	66 83 c4 0c          	add    $0xc,%sp
    8430:	66 c9                	leavew 
    8432:	66 c3                	retw   
    8434:	66 90                	xchg   %ax,%ax
    8436:	66 90                	xchg   %ax,%ax
    8438:	66 90                	xchg   %ax,%ax
    843a:	66 90                	xchg   %ax,%ax
    843c:	66 90                	xchg   %ax,%ax
    843e:	66 90                	xchg   %ax,%ax

00008440 <count>:
    8440:	08 2d 00 00 00 00    	or     %ch,0x0

00008441 <alpha>:
    8441:	2d 00 00 00 00       	sub    $0x0,%eax

00008442 <int_09_saved>:
    8442:	00 00                	add    %al,(%eax)
	...

00008446 <program_saved>:
    8446:	70 00                	jo     8448 <program_saved+0x2>
	...

0000844a <ds_saved>:
    844a:	7c 00                	jl     844c <ds_saved+0x2>
	...

0000844e <return_save>:
    844e:	88 00                	mov    %al,(%eax)

00008450 <esi_save>:
    8450:	96                   	xchg   %eax,%esi
    8451:	00 00                	add    %al,(%eax)
	...

00008454 <temp>:
    8454:	e8 03 b4 00 00       	call   1385c <_end+0x38e0>

00008456 <kernelesp_saved>:
    8456:	b4 00                	mov    $0x0,%ah
	...

0000845a <esp_saved_inkernel>:
    845a:	c8 00 00 00          	enter  $0x0,$0x0

0000845e <esp_saved_in_user>:
    845e:	f0 00 00             	lock add %al,(%eax)
	...

00008462 <ss_saved_in_user>:
    8462:	2c 01                	sub    $0x1,%al
	...

00008466 <color>:
    8466:	01 c2                	add    %eax,%edx

00008467 <ss_saved_fork>:
    8467:	c2 01 00             	ret    $0x1
	...

0000846b <retaddr>:
    846b:	58                   	pop    %eax
    846c:	02 00                	add    (%eax),%al
	...

0000846f <Message31>:
    846f:	74 69                	je     84da <_readinput+0x9>
    8471:	6d                   	insl   (%dx),%es:(%edi)
    8472:	65 3a 20             	cmp    %gs:(%eax),%ah

00008475 <_sys_stack_copy>:
    8475:	c8 00 00 00          	enter  $0x0,$0x0
    8479:	8e d0                	mov    %eax,%ss
    847b:	60                   	pusha  
    847c:	1e                   	push   %ds
    847d:	8b 46 06             	mov    0x6(%esi),%eax
    8480:	8b 56 0a             	mov    0xa(%esi),%edx
    8483:	8b 4e 0e             	mov    0xe(%esi),%ecx
    8486:	8c db                	mov    %ds,%ebx

00008488 <while_loop1>:
    8488:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
    848e:	8e d8                	mov    %eax,%ds
    8490:	67 8b 1a             	mov    (%bp,%si),%ebx
    8493:	8e d9                	mov    %ecx,%ds
    8495:	67 89 1a             	mov    %ebx,(%bp,%si)
    8498:	83 c2 02             	add    $0x2,%edx
    849b:	eb eb                	jmp    8488 <while_loop1>

0000849d <end_for_copy>:
    849d:	1f                   	pop    %ds
    849e:	61                   	popa   
    849f:	c9                   	leave  
    84a0:	66 5a                	pop    %dx
    84a2:	ff e2                	jmp    *%edx

000084a4 <_clearscreen>:
    84a4:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    84a9:	66 5a                	pop    %dx
    84ab:	ff e2                	jmp    *%edx

000084ad <_printchar>:
    84ad:	c8 00 00 00          	enter  $0x0,$0x0
    84b1:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
    84b6:	57                   	push   %edi
    84b7:	66 8b 4e 06          	mov    0x6(%esi),%cx
    84bb:	66 8b 7e 0a          	mov    0xa(%esi),%di
    84bf:	66 8b 56 0e          	mov    0xe(%esi),%dx
    84c3:	88 d5                	mov    %dl,%ch
    84c5:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
    84cc:	00 66 5a             	add    %ah,0x5a(%esi)
    84cf:	ff e2                	jmp    *%edx

000084d1 <_readinput>:
    84d1:	c8 04 00 00          	enter  $0x4,$0x0
    84d5:	b4 00                	mov    $0x0,%ah
    84d7:	cd 16                	int    $0x16
    84d9:	b4 00                	mov    $0x0,%ah
    84db:	66 67 89 04          	mov    %ax,(%si)
    84df:	24 66                	and    $0x66,%al
    84e1:	67 8b 04             	mov    (%si),%eax
    84e4:	24 c9                	and    $0xc9,%al
    84e6:	66 5a                	pop    %dx
    84e8:	ff e2                	jmp    *%edx

000084ea <_showchar>:
    84ea:	c8 00 00 00          	enter  $0x0,$0x0
    84ee:	50                   	push   %eax
    84ef:	53                   	push   %ebx
    84f0:	8b 46 06             	mov    0x6(%esi),%eax
    84f3:	b4 0e                	mov    $0xe,%ah
    84f5:	b3 00                	mov    $0x0,%bl
    84f7:	cd 10                	int    $0x10
    84f9:	5b                   	pop    %ebx
    84fa:	58                   	pop    %eax
    84fb:	c9                   	leave  
    84fc:	66 5a                	pop    %dx
    84fe:	ff e2                	jmp    *%edx

00008500 <_setPoint>:
    8500:	c8 00 00 00          	enter  $0x0,$0x0
    8504:	53                   	push   %ebx
    8505:	b7 00                	mov    $0x0,%bh
    8507:	8a 77 06             	mov    0x6(%edi),%dh
    850a:	8a 57 0a             	mov    0xa(%edi),%dl
    850d:	b4 02                	mov    $0x2,%ah
    850f:	cd 10                	int    $0x10
    8511:	5b                   	pop    %ebx
    8512:	c9                   	leave  
    8513:	66 5a                	pop    %dx
    8515:	ff e2                	jmp    *%edx

00008517 <_loadP>:
    8517:	c8 00 00 00          	enter  $0x0,$0x0
    851b:	60                   	pusha  
    851c:	06                   	push   %es
    851d:	1e                   	push   %ds
    851e:	8c c8                	mov    %cs,%eax
    8520:	8e d8                	mov    %eax,%ds
    8522:	8b 46 0e             	mov    0xe(%esi),%eax
    8525:	8e c0                	mov    %eax,%es
    8527:	b2 00                	mov    $0x0,%dl
    8529:	8b 46 0a             	mov    0xa(%esi),%eax
    852c:	b3 12                	mov    $0x12,%bl
    852e:	f6 f3                	div    %bl
    8530:	88 e1                	mov    %ah,%cl
    8532:	30 e4                	xor    %ah,%ah
    8534:	b3 02                	mov    $0x2,%bl
    8536:	f6 f3                	div    %bl
    8538:	88 e6                	mov    %ah,%dh
    853a:	88 c5                	mov    %al,%ch
    853c:	8a 46 06             	mov    0x6(%esi),%al
    853f:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
    8544:	cd 13                	int    $0x13
    8546:	1f                   	pop    %ds
    8547:	07                   	pop    %es
    8548:	61                   	popa   
    8549:	c9                   	leave  
    854a:	66 5a                	pop    %dx
    854c:	ff e2                	jmp    *%edx

0000854e <_RunProgress>:
    854e:	c8 00 00 00          	enter  $0x0,$0x0
    8552:	8c c8                	mov    %cs,%eax
    8554:	8e d8                	mov    %eax,%ds
    8556:	8e c0                	mov    %eax,%es
    8558:	8b 5e 06             	mov    0x6(%esi),%ebx
    855b:	c7 06 46 84 00 01    	movl   $0x1008446,(%esi)
    8561:	89 1e                	mov    %ebx,(%esi)
    8563:	48                   	dec    %eax
    8564:	84 66 89             	test   %ah,-0x77(%esi)
    8567:	26                   	es
    8568:	5a                   	pop    %edx
    8569:	84 26                	test   %ah,(%esi)
    856b:	ff 1e                	lcall  *(%esi)
    856d:	46                   	inc    %esi
    856e:	84 8c c8 8e d8 8e c0 	test   %cl,-0x3f712772(%eax,%ecx,8)

0000856f <S>:
    856f:	8c c8                	mov    %cs,%eax
    8571:	8e d8                	mov    %eax,%ds
    8573:	8e c0                	mov    %eax,%es
    8575:	8e d0                	mov    %eax,%ss
    8577:	66 8b 26             	mov    (%esi),%sp
    857a:	5a                   	pop    %edx
    857b:	84 b4 00 cd 16 c9 66 	test   %dh,0x66c916cd(%eax,%eax,1)
    8582:	5a                   	pop    %edx
    8583:	ff e2                	jmp    *%edx

00008585 <_Schedule_once>:
    8585:	c8 00 00 00          	enter  $0x0,$0x0
    8589:	cd 41                	int    $0x41
    858b:	c9                   	leave  
    858c:	66 5a                	pop    %dx
    858e:	ff e2                	jmp    *%edx

00008590 <_fork_user>:
    8590:	c8 00 00 00          	enter  $0x0,$0x0
    8594:	cd 39                	int    $0x39
    8596:	c9                   	leave  
    8597:	66 5a                	pop    %dx
    8599:	ff e2                	jmp    *%edx

0000859b <_Schedule>:
    859b:	c8 00 00 00          	enter  $0x0,$0x0
    859f:	16                   	push   %ss
    85a0:	cd 42                	int    $0x42
    85a2:	17                   	pop    %ss
    85a3:	c9                   	leave  
    85a4:	66 5a                	pop    %dx
    85a6:	ff e2                	jmp    *%edx

000085a8 <_wait>:
    85a8:	c8 00 00 00          	enter  $0x0,$0x0
    85ac:	cd 3b                	int    $0x3b
    85ae:	c9                   	leave  
    85af:	66 5a                	pop    %dx
    85b1:	ff e2                	jmp    *%edx

000085b3 <_exit>:
    85b3:	c8 00 00 00          	enter  $0x0,$0x0
    85b7:	66 67 8b 45 06       	mov    0x6(%di),%ax
    85bc:	66 50                	push   %ax
    85be:	cd 2a                	int    $0x2a
    85c0:	c9                   	leave  
    85c1:	66 5a                	pop    %dx
    85c3:	ff e2                	jmp    *%edx

000085c5 <_GetSem>:
    85c5:	c8 00 00 00          	enter  $0x0,$0x0
    85c9:	66 67 8b 45 06       	mov    0x6(%di),%ax
    85ce:	66 50                	push   %ax
    85d0:	cd 3c                	int    $0x3c
    85d2:	c9                   	leave  
    85d3:	66 5a                	pop    %dx
    85d5:	ff e2                	jmp    *%edx

000085d7 <_FreeSem>:
    85d7:	c8 00 00 00          	enter  $0x0,$0x0
    85db:	66 67 8b 45 06       	mov    0x6(%di),%ax
    85e0:	66 50                	push   %ax
    85e2:	cd 3d                	int    $0x3d
    85e4:	c9                   	leave  
    85e5:	66 5a                	pop    %dx
    85e7:	ff e2                	jmp    *%edx

000085e9 <_P>:
    85e9:	c8 00 00 00          	enter  $0x0,$0x0
    85ed:	66 67 8b 45 06       	mov    0x6(%di),%ax
    85f2:	66 50                	push   %ax
    85f4:	cd 3e                	int    $0x3e
    85f6:	c9                   	leave  
    85f7:	66 5a                	pop    %dx
    85f9:	ff e2                	jmp    *%edx

000085fb <_V>:
    85fb:	c8 00 00 00          	enter  $0x0,$0x0
    85ff:	66 67 8b 45 06       	mov    0x6(%di),%ax
    8604:	66 50                	push   %ax
    8606:	cd 3f                	int    $0x3f
    8608:	c9                   	leave  
    8609:	66 5a                	pop    %dx
    860b:	ff e2                	jmp    *%edx

0000860d <_SetINT20h>:
    860d:	fa                   	cli    
    860e:	1e                   	push   %ds
    860f:	06                   	push   %es
    8610:	8c c8                	mov    %cs,%eax
    8612:	8e d8                	mov    %eax,%ds
    8614:	8e c0                	mov    %eax,%es
    8616:	8c 16                	mov    %ss,(%esi)
    8618:	62 84 8e d0 66 89 26 	bound  %eax,0x268966d0(%esi,%ecx,4)
    861f:	5e                   	pop    %esi
    8620:	84 66 8b             	test   %ah,-0x75(%esi)
    8623:	26                   	es
    8624:	5a                   	pop    %edx
    8625:	84 53 51             	test   %dl,0x51(%ebx)
    8628:	52                   	push   %edx
    8629:	b4 01                	mov    $0x1,%ah
    862b:	cd 16                	int    $0x16
    862d:	5a                   	pop    %edx
    862e:	59                   	pop    %ecx
    862f:	5b                   	pop    %ebx
    8630:	8e 16                	mov    (%esi),%ss
    8632:	62 84 66 8b 26 5e 84 	bound  %eax,-0x7ba1d975(%esi,%eiz,2)
    8639:	07                   	pop    %es
    863a:	1f                   	pop    %ds
    863b:	74 0a                	je     8647 <going_on>
    863d:	50                   	push   %eax
    863e:	b4 00                	mov    $0x0,%ah
    8640:	cd 16                	int    $0x16
    8642:	58                   	pop    %eax
    8643:	fb                   	sti    
    8644:	cd 38                	int    $0x38
    8646:	cf                   	iret   

00008647 <going_on>:
    8647:	fb                   	sti    
    8648:	cf                   	iret   

00008649 <_SetINT08h_turn_around>:
    8649:	e8 3d 06 fa 6a       	call   6afa8c8b <_end+0x6af98d0f>
    864e:	00 e8                	add    %ch,%al
    8650:	80 14 e8 a8          	adcb   $0xa8,(%eax,%ebp,8)
    8654:	06                   	push   %es
    8655:	b0 20                	mov    $0x20,%al
    8657:	e6 20                	out    %al,$0x20
    8659:	e6 a0                	out    %al,$0xa0
    865b:	fb                   	sti    
    865c:	cf                   	iret   

0000865d <_SetINT08h>:
    865d:	60                   	pusha  
    865e:	0f a8                	push   %gs
    8660:	1e                   	push   %ds
    8661:	06                   	push   %es
    8662:	16                   	push   %ss
    8663:	8c c8                	mov    %cs,%eax
    8665:	8e c0                	mov    %eax,%es
    8667:	8e d8                	mov    %eax,%ds
    8669:	8e d0                	mov    %eax,%ss
    866b:	fe 0e                	decb   (%esi)
    866d:	40                   	inc    %eax
    866e:	84 75 4f             	test   %dh,0x4f(%ebp)

00008671 <notc>:
    8671:	80 3e 41             	cmpb   $0x41,(%esi)
    8674:	84 2d 75 07 c6 06    	test   %ch,0x6c60775
    867a:	41                   	inc    %ecx
    867b:	84 5c eb 2a          	test   %bl,0x2a(%ebx,%ebp,8)

0000867f <changleft>:
    867f:	80 3e 41             	cmpb   $0x41,(%esi)
    8682:	84 5c 75 07          	test   %bl,0x7(%ebp,%esi,2)
    8686:	c6 06 41             	movb   $0x41,(%esi)
    8689:	84 7c eb 1c          	test   %bh,0x1c(%ebx,%ebp,8)

0000868d <changright>:
    868d:	80 3e 41             	cmpb   $0x41,(%esi)
    8690:	84 7c 75 07          	test   %bh,0x7(%ebp,%esi,2)
    8694:	c6 06 41             	movb   $0x41,(%esi)
    8697:	84 2f                	test   %ch,(%edi)
    8699:	eb 0e                	jmp    86a9 <show>

0000869b <changheng>:
    869b:	80 3e 41             	cmpb   $0x41,(%esi)
    869e:	84 2f                	test   %ch,(%edi)
    86a0:	75 cf                	jne    8671 <notc>
    86a2:	c6 06 41             	movb   $0x41,(%esi)
    86a5:	84 2d eb 00 b9 00    	test   %ch,0xb900eb

000086a9 <show>:
    86a9:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    86ae:	b4 09                	mov    $0x9,%ah
    86b0:	8a 26                	mov    (%esi),%ah
    86b2:	66                   	data16
    86b3:	84 a0 41 84 65 a3    	test   %ah,-0x5c9a7bbf(%eax)
    86b9:	8e 00                	mov    (%eax),%es
    86bb:	c6 06 40             	movb   $0x40,(%esi)
    86be:	84 08                	test   %cl,(%eax)

000086c0 <end>:
    86c0:	b0 20                	mov    $0x20,%al
    86c2:	e6 20                	out    %al,$0x20
    86c4:	e6 a0                	out    %al,$0xa0
    86c6:	17                   	pop    %ss
    86c7:	07                   	pop    %es
    86c8:	1f                   	pop    %ds
    86c9:	0f a9                	pop    %gs
    86cb:	61                   	popa   
    86cc:	fb                   	sti    
    86cd:	cf                   	iret   

000086ce <_SetINT09h>:
    86ce:	fa                   	cli    
    86cf:	1e                   	push   %ds
    86d0:	06                   	push   %es
    86d1:	8c c8                	mov    %cs,%eax
    86d3:	8e d8                	mov    %eax,%ds
    86d5:	8e c0                	mov    %eax,%es
    86d7:	8e d0                	mov    %eax,%ss
    86d9:	8c 16                	mov    %ss,(%esi)
    86db:	62 84 8e d0 66 89 26 	bound  %eax,0x268966d0(%esi,%ecx,4)
    86e2:	5e                   	pop    %esi
    86e3:	84 66 8b             	test   %ah,-0x75(%esi)
    86e6:	26                   	es
    86e7:	5a                   	pop    %edx
    86e8:	84 60 b9             	test   %ah,-0x47(%eax)
    86eb:	00 b8 8e e9 8a 26    	add    %bh,0x268ae98e(%eax)
    86f1:	66                   	data16
    86f2:	84 b0 4f 65 a3 78    	test   %dh,0x78a3654f(%eax)
    86f8:	00 b0 55 65 a3 7a    	add    %dh,0x7aa36555(%eax)
    86fe:	00 b0 43 65 a3 7c    	add    %dh,0x7ca36543(%eax)
    8704:	00 b0 48 65 a3 7e    	add    %dh,0x7ea36548(%eax)
    870a:	00 b0 53 65 a3 80    	add    %dh,-0x7f5c9aad(%eax)
    8710:	00 b0 21 65 a3 82    	add    %dh,-0x7d5c9adf(%eax)
    8716:	00 b0 4f 65 a3 84    	add    %dh,-0x7b5c9ab1(%eax)
    871c:	00 b0 55 65 a3 86    	add    %dh,-0x795c9aab(%eax)
    8722:	00 b0 43 65 a3 88    	add    %dh,-0x775c9abd(%eax)
    8728:	00 b0 48 65 a3 8a    	add    %dh,-0x755c9ab8(%eax)
    872e:	00 b0 21 65 a3 8c    	add    %dh,-0x735c9adf(%eax)
    8734:	00 61 80             	add    %ah,-0x80(%ecx)
    8737:	fc                   	cld    
    8738:	06                   	push   %es
    8739:	75 06                	jne    8741 <cont>
    873b:	b4 01                	mov    $0x1,%ah
    873d:	88 26                	mov    %ah,(%esi)
    873f:	66                   	data16
    8740:	84 fe                	test   %bh,%dh

00008741 <cont>:
    8741:	fe 06                	incb   (%esi)
    8743:	66                   	data16
    8744:	84 8c c8 8e c0 fb 9c 	test   %cl,-0x63043f72(%eax,%ecx,8)
    874b:	26 ff 1e             	lcall  *%es:(%esi)
    874e:	42                   	inc    %edx
    874f:	84 8e 16 62 84 66    	test   %cl,0x66846216(%esi)
    8755:	8b 26                	mov    (%esi),%esp
    8757:	5e                   	pop    %esi
    8758:	84 07                	test   %al,(%edi)
    875a:	1f                   	pop    %ds
    875b:	cf                   	iret   

0000875c <_SetINT33h>:
    875c:	fa                   	cli    
    875d:	c8 00 00 00          	enter  $0x0,$0x0
    8761:	60                   	pusha  
    8762:	1e                   	push   %ds
    8763:	0f a8                	push   %gs
    8765:	06                   	push   %es
    8766:	8c c8                	mov    %cs,%eax
    8768:	8e c0                	mov    %eax,%es
    876a:	8e d8                	mov    %eax,%ds
    876c:	8c 16                	mov    %ss,(%esi)
    876e:	62 84 8e d0 66 89 26 	bound  %eax,0x268966d0(%esi,%ecx,4)
    8775:	5e                   	pop    %esi
    8776:	84 66 8b             	test   %ah,-0x75(%esi)
    8779:	26                   	es
    877a:	5a                   	pop    %edx
    877b:	84 6a 00             	test   %ch,0x0(%edx)
    877e:	e8 fb 0c 8e 16       	call   168e947e <_end+0x168d9502>
    8783:	62 84 66 8b 26 5e 84 	bound  %eax,-0x7ba1d975(%esi,%eiz,2)
    878a:	07                   	pop    %es
    878b:	0f a9                	pop    %gs
    878d:	1f                   	pop    %ds
    878e:	61                   	popa   
    878f:	fb                   	sti    
    8790:	c9                   	leave  
    8791:	cf                   	iret   

00008792 <_SetINT34h>:
    8792:	fa                   	cli    
    8793:	c8 00 00 00          	enter  $0x0,$0x0
    8797:	60                   	pusha  
    8798:	1e                   	push   %ds
    8799:	0f a8                	push   %gs
    879b:	06                   	push   %es
    879c:	8c c8                	mov    %cs,%eax
    879e:	8e c0                	mov    %eax,%es
    87a0:	8e d8                	mov    %eax,%ds
    87a2:	8c 16                	mov    %ss,(%esi)
    87a4:	62 84 8e d0 66 89 26 	bound  %eax,0x268966d0(%esi,%ecx,4)
    87ab:	5e                   	pop    %esi
    87ac:	84 66 8b             	test   %ah,-0x75(%esi)
    87af:	26                   	es
    87b0:	5a                   	pop    %edx
    87b1:	84 6a 00             	test   %ch,0x0(%edx)
    87b4:	e8 75 0d 8e 16       	call   168e952e <_end+0x168d95b2>
    87b9:	62 84 66 8b 26 5e 84 	bound  %eax,-0x7ba1d975(%esi,%eiz,2)
    87c0:	07                   	pop    %es
    87c1:	0f a9                	pop    %gs
    87c3:	1f                   	pop    %ds
    87c4:	61                   	popa   
    87c5:	fb                   	sti    
    87c6:	c9                   	leave  
    87c7:	cf                   	iret   

000087c8 <_SetINT35h>:
    87c8:	60                   	pusha  
    87c9:	1e                   	push   %ds
    87ca:	0f a8                	push   %gs
    87cc:	06                   	push   %es
    87cd:	8c c8                	mov    %cs,%eax
    87cf:	8e c0                	mov    %eax,%es
    87d1:	8e d8                	mov    %eax,%ds
    87d3:	8c 16                	mov    %ss,(%esi)
    87d5:	62 84 8e d0 66 89 26 	bound  %eax,0x268966d0(%esi,%ecx,4)
    87dc:	5e                   	pop    %esi
    87dd:	84 66 8b             	test   %ah,-0x75(%esi)
    87e0:	26                   	es
    87e1:	5a                   	pop    %edx
    87e2:	84 6a 00             	test   %ch,0x0(%edx)
    87e5:	e8 23 0e 8e 16       	call   168e960d <_end+0x168d9691>
    87ea:	62 84 66 8b 26 5e 84 	bound  %eax,-0x7ba1d975(%esi,%eiz,2)
    87f1:	07                   	pop    %es
    87f2:	0f a9                	pop    %gs
    87f4:	1f                   	pop    %ds
    87f5:	61                   	popa   
    87f6:	fb                   	sti    
    87f7:	cf                   	iret   

000087f8 <_SetINT36h>:
    87f8:	60                   	pusha  
    87f9:	1e                   	push   %ds
    87fa:	0f a8                	push   %gs
    87fc:	06                   	push   %es
    87fd:	8c c8                	mov    %cs,%eax
    87ff:	8e c0                	mov    %eax,%es
    8801:	8e d8                	mov    %eax,%ds
    8803:	8c 16                	mov    %ss,(%esi)
    8805:	62 84 8e d0 66 89 26 	bound  %eax,0x268966d0(%esi,%ecx,4)
    880c:	5e                   	pop    %esi
    880d:	84 66 8b             	test   %ah,-0x75(%esi)
    8810:	26                   	es
    8811:	5a                   	pop    %edx
    8812:	84 6a 00             	test   %ch,0x0(%edx)
    8815:	e8 79 0e 8e 16       	call   168e9693 <_end+0x168d9717>
    881a:	62 84 66 8b 26 5e 84 	bound  %eax,-0x7ba1d975(%esi,%eiz,2)
    8821:	07                   	pop    %es
    8822:	0f a9                	pop    %gs
    8824:	1f                   	pop    %ds
    8825:	61                   	popa   
    8826:	fb                   	sti    
    8827:	cf                   	iret   

00008828 <_SetINT21h>:
    8828:	c8 00 00 00          	enter  $0x0,$0x0
    882c:	60                   	pusha  
    882d:	1e                   	push   %ds
    882e:	0f a8                	push   %gs
    8830:	06                   	push   %es
    8831:	8c c8                	mov    %cs,%eax
    8833:	8e c0                	mov    %eax,%es
    8835:	8e d8                	mov    %eax,%ds
    8837:	8b 46 08             	mov    0x8(%esi),%eax
    883a:	80 fc 00             	cmp    $0x0,%ah
    883d:	74 16                	je     8855 <fn0>
    883f:	80 fc 01             	cmp    $0x1,%ah
    8842:	74 21                	je     8865 <fn1>
    8844:	80 fc 02             	cmp    $0x2,%ah
    8847:	74 3d                	je     8886 <fn2>
    8849:	80 fc 03             	cmp    $0x3,%ah
    884c:	74 5f                	je     88ad <fn3>
    884e:	07                   	pop    %es
    884f:	0f a9                	pop    %gs
    8851:	1f                   	pop    %ds
    8852:	61                   	popa   
    8853:	c9                   	leave  
    8854:	cf                   	iret   

00008855 <fn0>:
    8855:	8b 46 0a             	mov    0xa(%esi),%eax
    8858:	b4 0e                	mov    $0xe,%ah
    885a:	b3 00                	mov    $0x0,%bl
    885c:	cd 10                	int    $0x10
    885e:	07                   	pop    %es
    885f:	0f a9                	pop    %gs
    8861:	1f                   	pop    %ds
    8862:	61                   	popa   
    8863:	c9                   	leave  
    8864:	cf                   	iret   

00008865 <fn1>:
    8865:	66 83 ec 04          	sub    $0x4,%sp
    8869:	b4 00                	mov    $0x0,%ah
    886b:	cd 16                	int    $0x16
    886d:	b4 00                	mov    $0x0,%ah
    886f:	66 67 89 04          	mov    %ax,(%si)
    8873:	24 66                	and    $0x66,%al
    8875:	67 8b 04             	mov    (%si),%eax
    8878:	24 66                	and    $0x66,%al
    887a:	83 c4 04             	add    $0x4,%esp
    887d:	8e e0                	mov    %eax,%fs
    887f:	07                   	pop    %es
    8880:	0f a9                	pop    %gs
    8882:	1f                   	pop    %ds
    8883:	61                   	popa   
    8884:	c9                   	leave  
    8885:	cf                   	iret   

00008886 <fn2>:
    8886:	66 83 ec 04          	sub    $0x4,%sp
    888a:	b4 00                	mov    $0x0,%ah
    888c:	cd 16                	int    $0x16
    888e:	b4 00                	mov    $0x0,%ah
    8890:	66 67 89 04          	mov    %ax,(%si)
    8894:	24 66                	and    $0x66,%al
    8896:	67 8b 04             	mov    (%si),%eax
    8899:	24 b4                	and    $0xb4,%al
    889b:	0e                   	push   %cs
    889c:	b3 00                	mov    $0x0,%bl
    889e:	cd 10                	int    $0x10
    88a0:	66 83 c4 04          	add    $0x4,%sp
    88a4:	8e e0                	mov    %eax,%fs
    88a6:	07                   	pop    %es
    88a7:	0f a9                	pop    %gs
    88a9:	1f                   	pop    %ds
    88aa:	61                   	popa   
    88ab:	c9                   	leave  
    88ac:	cf                   	iret   

000088ad <fn3>:
    88ad:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    88b2:	07                   	pop    %es
    88b3:	0f a9                	pop    %gs
    88b5:	1f                   	pop    %ds
    88b6:	61                   	popa   
    88b7:	c9                   	leave  
    88b8:	cf                   	iret   

000088b9 <_SetINT37h>:
    88b9:	fa                   	cli    
    88ba:	e8 94 04 cf fa       	call   facf8d53 <_end+0xface8dd7>

000088be <_SetINT38h>:
    88be:	fa                   	cli    
    88bf:	50                   	push   %eax
    88c0:	1e                   	push   %ds
    88c1:	8c c8                	mov    %cs,%eax
    88c3:	8e d8                	mov    %eax,%ds
    88c5:	6a 00                	push   $0x0
    88c7:	e8 13 13 1f 58       	call   581f9bdf <_end+0x581e9c63>
    88cc:	fb                   	sti    
    88cd:	cf                   	iret   

000088ce <_SetINT39h>:
    88ce:	fa                   	cli    
    88cf:	c8 00 00 00          	enter  $0x0,$0x0
    88d3:	1e                   	push   %ds
    88d4:	6a 00                	push   $0x0
    88d6:	8c c8                	mov    %cs,%eax
    88d8:	8e d8                	mov    %eax,%ds
    88da:	e8 fc 14 1f c9       	call   c91f9ddb <_end+0xc91e9e5f>
    88df:	fb                   	sti    
    88e0:	cf                   	iret   

000088e1 <_SetINT41h>:
    88e1:	fa                   	cli    
    88e2:	e8 a4 03 e8 15       	call   15e88c8b <_end+0x15e78d0f>
    88e7:	04 b0                	add    $0xb0,%al
    88e9:	20 e6                	and    %ah,%dh
    88eb:	20 e6                	and    %ah,%dh
    88ed:	a0 fb cf fa c8       	mov    0xc8facffb,%al

000088f0 <_SetINT2Ah>:
    88f0:	fa                   	cli    
    88f1:	c8 00 00 00          	enter  $0x0,$0x0
    88f5:	1e                   	push   %ds
    88f6:	66 67 8b 45 08       	mov    0x8(%di),%ax
    88fb:	66 50                	push   %ax
    88fd:	6a 00                	push   $0x0
    88ff:	8c c8                	mov    %cs,%eax
    8901:	8e d8                	mov    %eax,%ds
    8903:	e8 68 17 58 1f       	call   1f58a070 <_end+0x1f57a0f4>
    8908:	c9                   	leave  
    8909:	fb                   	sti    
    890a:	cf                   	iret   

0000890b <_SetINT3Bh>:
    890b:	fa                   	cli    
    890c:	c8 00 00 00          	enter  $0x0,$0x0
    8910:	1e                   	push   %ds
    8911:	6a 00                	push   $0x0
    8913:	8c c8                	mov    %cs,%eax
    8915:	8e d8                	mov    %eax,%ds
    8917:	e8 21 18 1f c9       	call   c91fa13d <_end+0xc91ea1c1>
    891c:	fb                   	sti    
    891d:	cf                   	iret   

0000891e <_SetINT3Ch>:
    891e:	fa                   	cli    
    891f:	c8 00 00 00          	enter  $0x0,$0x0
    8923:	1e                   	push   %ds
    8924:	66 67 8b 45 08       	mov    0x8(%di),%ax
    8929:	66 50                	push   %ax
    892b:	6a 00                	push   $0x0
    892d:	8c c8                	mov    %cs,%eax
    892f:	8e d8                	mov    %eax,%ds
    8931:	e8 81 1c 66 83       	call   8366a5b7 <_end+0x8365a63b>
    8936:	c4 04 1f             	les    (%edi,%ebx,1),%eax
    8939:	c9                   	leave  
    893a:	fb                   	sti    
    893b:	cf                   	iret   

0000893c <_SetINT3Dh>:
    893c:	fa                   	cli    
    893d:	c8 00 00 00          	enter  $0x0,$0x0
    8941:	1e                   	push   %ds
    8942:	66 67 8b 45 08       	mov    0x8(%di),%ax
    8947:	66 50                	push   %ax
    8949:	6a 00                	push   $0x0
    894b:	8c c8                	mov    %cs,%eax
    894d:	8e d8                	mov    %eax,%ds
    894f:	e8 24 1d 66 83       	call   8366a678 <_end+0x8365a6fc>
    8954:	c4 04 1f             	les    (%edi,%ebx,1),%eax
    8957:	c9                   	leave  
    8958:	fb                   	sti    
    8959:	cf                   	iret   

0000895a <_SetINT3Eh>:
    895a:	fa                   	cli    
    895b:	c8 00 00 00          	enter  $0x0,$0x0
    895f:	1e                   	push   %ds
    8960:	66 67 8b 45 08       	mov    0x8(%di),%ax
    8965:	66 50                	push   %ax
    8967:	6a 00                	push   $0x0
    8969:	8c c8                	mov    %cs,%eax
    896b:	8e d8                	mov    %eax,%ds
    896d:	e8 3d 1d 66 83       	call   8366a6af <_end+0x8365a733>
    8972:	c4 04 1f             	les    (%edi,%ebx,1),%eax
    8975:	c9                   	leave  
    8976:	fb                   	sti    
    8977:	cf                   	iret   

00008978 <_SetINT3Fh>:
    8978:	fa                   	cli    
    8979:	c8 00 00 00          	enter  $0x0,$0x0
    897d:	1e                   	push   %ds
    897e:	66 67 8b 45 08       	mov    0x8(%di),%ax
    8983:	66 50                	push   %ax
    8985:	6a 00                	push   $0x0
    8987:	8c c8                	mov    %cs,%eax
    8989:	8e d8                	mov    %eax,%ds
    898b:	e8 64 1e 66 83       	call   8366a7f4 <_end+0x8365a878>
    8990:	c4 04 1f             	les    (%edi,%ebx,1),%eax
    8993:	c9                   	leave  
    8994:	fb                   	sti    
    8995:	cf                   	iret   

00008996 <_initialInt>:
    8996:	c8 00 00 00          	enter  $0x0,$0x0
    899a:	60                   	pusha  
    899b:	06                   	push   %es
    899c:	1e                   	push   %ds
    899d:	8c c8                	mov    %cs,%eax
    899f:	8e d8                	mov    %eax,%ds
    89a1:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    89a6:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
    89ab:	00 f7                	add    %dh,%bh
    89ad:	e3 89                	jecxz  8938 <_SetINT3Ch+0x1a>
    89af:	c7                   	(bad)  
    89b0:	b8 0d 86 26 89       	mov    $0x8926860d,%eax
    89b5:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    89ba:	45                   	inc    %ebp
    89bb:	02 1f                	add    (%edi),%bl
    89bd:	07                   	pop    %es
    89be:	61                   	popa   
    89bf:	60                   	pusha  
    89c0:	06                   	push   %es
    89c1:	1e                   	push   %ds
    89c2:	8c c8                	mov    %cs,%eax
    89c4:	8e d8                	mov    %eax,%ds
    89c6:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    89cb:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
    89d0:	00 f7                	add    %dh,%bh
    89d2:	e3 89                	jecxz  895d <_SetINT3Eh+0x3>
    89d4:	c7                   	(bad)  
    89d5:	b8 5c 87 26 89       	mov    $0x8926875c,%eax
    89da:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    89df:	45                   	inc    %ebp
    89e0:	02 1f                	add    (%edi),%bl
    89e2:	07                   	pop    %es
    89e3:	61                   	popa   
    89e4:	60                   	pusha  
    89e5:	06                   	push   %es
    89e6:	1e                   	push   %ds
    89e7:	8c c8                	mov    %cs,%eax
    89e9:	8e d8                	mov    %eax,%ds
    89eb:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    89f0:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
    89f5:	00 f7                	add    %dh,%bh
    89f7:	e3 89                	jecxz  8982 <_SetINT3Fh+0xa>
    89f9:	c7                   	(bad)  
    89fa:	b8 92 87 26 89       	mov    $0x89268792,%eax
    89ff:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8a04:	45                   	inc    %ebp
    8a05:	02 1f                	add    (%edi),%bl
    8a07:	07                   	pop    %es
    8a08:	61                   	popa   
    8a09:	60                   	pusha  
    8a0a:	06                   	push   %es
    8a0b:	1e                   	push   %ds
    8a0c:	8c c8                	mov    %cs,%eax
    8a0e:	8e d8                	mov    %eax,%ds
    8a10:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8a15:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
    8a1a:	00 f7                	add    %dh,%bh
    8a1c:	e3 89                	jecxz  89a7 <_initialInt+0x11>
    8a1e:	c7                   	(bad)  
    8a1f:	b8 c8 87 26 89       	mov    $0x892687c8,%eax
    8a24:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8a29:	45                   	inc    %ebp
    8a2a:	02 1f                	add    (%edi),%bl
    8a2c:	07                   	pop    %es
    8a2d:	61                   	popa   
    8a2e:	60                   	pusha  
    8a2f:	06                   	push   %es
    8a30:	1e                   	push   %ds
    8a31:	8c c8                	mov    %cs,%eax
    8a33:	8e d8                	mov    %eax,%ds
    8a35:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8a3a:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
    8a3f:	00 f7                	add    %dh,%bh
    8a41:	e3 89                	jecxz  89cc <_initialInt+0x36>
    8a43:	c7                   	(bad)  
    8a44:	b8 f8 87 26 89       	mov    $0x892687f8,%eax
    8a49:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8a4e:	45                   	inc    %ebp
    8a4f:	02 1f                	add    (%edi),%bl
    8a51:	07                   	pop    %es
    8a52:	61                   	popa   
    8a53:	60                   	pusha  
    8a54:	06                   	push   %es
    8a55:	1e                   	push   %ds
    8a56:	8c c8                	mov    %cs,%eax
    8a58:	8e d8                	mov    %eax,%ds
    8a5a:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8a5f:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
    8a64:	00 f7                	add    %dh,%bh
    8a66:	e3 89                	jecxz  89f1 <_initialInt+0x5b>
    8a68:	c7                   	(bad)  
    8a69:	b8 28 88 26 89       	mov    $0x89268828,%eax
    8a6e:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8a73:	45                   	inc    %ebp
    8a74:	02 1f                	add    (%edi),%bl
    8a76:	07                   	pop    %es
    8a77:	61                   	popa   
    8a78:	60                   	pusha  
    8a79:	06                   	push   %es
    8a7a:	1e                   	push   %ds
    8a7b:	8c c8                	mov    %cs,%eax
    8a7d:	8e d8                	mov    %eax,%ds
    8a7f:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8a84:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
    8a89:	00 f7                	add    %dh,%bh
    8a8b:	e3 89                	jecxz  8a16 <_initialInt+0x80>
    8a8d:	c7                   	(bad)  
    8a8e:	b8 b9 88 26 89       	mov    $0x892688b9,%eax
    8a93:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8a98:	45                   	inc    %ebp
    8a99:	02 1f                	add    (%edi),%bl
    8a9b:	07                   	pop    %es
    8a9c:	61                   	popa   
    8a9d:	60                   	pusha  
    8a9e:	06                   	push   %es
    8a9f:	1e                   	push   %ds
    8aa0:	8c c8                	mov    %cs,%eax
    8aa2:	8e d8                	mov    %eax,%ds
    8aa4:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8aa9:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
    8aae:	00 f7                	add    %dh,%bh
    8ab0:	e3 89                	jecxz  8a3b <_initialInt+0xa5>
    8ab2:	c7                   	(bad)  
    8ab3:	b8 be 88 26 89       	mov    $0x892688be,%eax
    8ab8:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8abd:	45                   	inc    %ebp
    8abe:	02 1f                	add    (%edi),%bl
    8ac0:	07                   	pop    %es
    8ac1:	61                   	popa   
    8ac2:	60                   	pusha  
    8ac3:	06                   	push   %es
    8ac4:	1e                   	push   %ds
    8ac5:	8c c8                	mov    %cs,%eax
    8ac7:	8e d8                	mov    %eax,%ds
    8ac9:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8ace:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
    8ad3:	00 f7                	add    %dh,%bh
    8ad5:	e3 89                	jecxz  8a60 <_initialInt+0xca>
    8ad7:	c7                   	(bad)  
    8ad8:	b8 ce 88 26 89       	mov    $0x892688ce,%eax
    8add:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8ae2:	45                   	inc    %ebp
    8ae3:	02 1f                	add    (%edi),%bl
    8ae5:	07                   	pop    %es
    8ae6:	61                   	popa   
    8ae7:	60                   	pusha  
    8ae8:	06                   	push   %es
    8ae9:	1e                   	push   %ds
    8aea:	8c c8                	mov    %cs,%eax
    8aec:	8e d8                	mov    %eax,%ds
    8aee:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8af3:	b8 2a 00 bb 04       	mov    $0x4bb002a,%eax
    8af8:	00 f7                	add    %dh,%bh
    8afa:	e3 89                	jecxz  8a85 <_initialInt+0xef>
    8afc:	c7                   	(bad)  
    8afd:	b8 f0 88 26 89       	mov    $0x892688f0,%eax
    8b02:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b07:	45                   	inc    %ebp
    8b08:	02 1f                	add    (%edi),%bl
    8b0a:	07                   	pop    %es
    8b0b:	61                   	popa   
    8b0c:	60                   	pusha  
    8b0d:	06                   	push   %es
    8b0e:	1e                   	push   %ds
    8b0f:	8c c8                	mov    %cs,%eax
    8b11:	8e d8                	mov    %eax,%ds
    8b13:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b18:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
    8b1d:	00 f7                	add    %dh,%bh
    8b1f:	e3 89                	jecxz  8aaa <_initialInt+0x114>
    8b21:	c7                   	(bad)  
    8b22:	b8 e1 88 26 89       	mov    $0x892688e1,%eax
    8b27:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b2c:	45                   	inc    %ebp
    8b2d:	02 1f                	add    (%edi),%bl
    8b2f:	07                   	pop    %es
    8b30:	61                   	popa   
    8b31:	60                   	pusha  
    8b32:	06                   	push   %es
    8b33:	1e                   	push   %ds
    8b34:	8c c8                	mov    %cs,%eax
    8b36:	8e d8                	mov    %eax,%ds
    8b38:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b3d:	b8 42 00 bb 04       	mov    $0x4bb0042,%eax
    8b42:	00 f7                	add    %dh,%bh
    8b44:	e3 89                	jecxz  8acf <_initialInt+0x139>
    8b46:	c7                   	(bad)  
    8b47:	b8 49 86 26 89       	mov    $0x89268649,%eax
    8b4c:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b51:	45                   	inc    %ebp
    8b52:	02 1f                	add    (%edi),%bl
    8b54:	07                   	pop    %es
    8b55:	61                   	popa   
    8b56:	60                   	pusha  
    8b57:	06                   	push   %es
    8b58:	1e                   	push   %ds
    8b59:	8c c8                	mov    %cs,%eax
    8b5b:	8e d8                	mov    %eax,%ds
    8b5d:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b62:	b8 3b 00 bb 04       	mov    $0x4bb003b,%eax
    8b67:	00 f7                	add    %dh,%bh
    8b69:	e3 89                	jecxz  8af4 <_initialInt+0x15e>
    8b6b:	c7                   	(bad)  
    8b6c:	b8 0b 89 26 89       	mov    $0x8926890b,%eax
    8b71:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b76:	45                   	inc    %ebp
    8b77:	02 1f                	add    (%edi),%bl
    8b79:	07                   	pop    %es
    8b7a:	61                   	popa   
    8b7b:	60                   	pusha  
    8b7c:	06                   	push   %es
    8b7d:	1e                   	push   %ds
    8b7e:	8c c8                	mov    %cs,%eax
    8b80:	8e d8                	mov    %eax,%ds
    8b82:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b87:	b8 3c 00 bb 04       	mov    $0x4bb003c,%eax
    8b8c:	00 f7                	add    %dh,%bh
    8b8e:	e3 89                	jecxz  8b19 <_initialInt+0x183>
    8b90:	c7                   	(bad)  
    8b91:	b8 1e 89 26 89       	mov    $0x8926891e,%eax
    8b96:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b9b:	45                   	inc    %ebp
    8b9c:	02 1f                	add    (%edi),%bl
    8b9e:	07                   	pop    %es
    8b9f:	61                   	popa   
    8ba0:	60                   	pusha  
    8ba1:	06                   	push   %es
    8ba2:	1e                   	push   %ds
    8ba3:	8c c8                	mov    %cs,%eax
    8ba5:	8e d8                	mov    %eax,%ds
    8ba7:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8bac:	b8 3d 00 bb 04       	mov    $0x4bb003d,%eax
    8bb1:	00 f7                	add    %dh,%bh
    8bb3:	e3 89                	jecxz  8b3e <_initialInt+0x1a8>
    8bb5:	c7                   	(bad)  
    8bb6:	b8 3c 89 26 89       	mov    $0x8926893c,%eax
    8bbb:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8bc0:	45                   	inc    %ebp
    8bc1:	02 1f                	add    (%edi),%bl
    8bc3:	07                   	pop    %es
    8bc4:	61                   	popa   
    8bc5:	60                   	pusha  
    8bc6:	06                   	push   %es
    8bc7:	1e                   	push   %ds
    8bc8:	8c c8                	mov    %cs,%eax
    8bca:	8e d8                	mov    %eax,%ds
    8bcc:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8bd1:	b8 3e 00 bb 04       	mov    $0x4bb003e,%eax
    8bd6:	00 f7                	add    %dh,%bh
    8bd8:	e3 89                	jecxz  8b63 <_initialInt+0x1cd>
    8bda:	c7                   	(bad)  
    8bdb:	b8 5a 89 26 89       	mov    $0x8926895a,%eax
    8be0:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8be5:	45                   	inc    %ebp
    8be6:	02 1f                	add    (%edi),%bl
    8be8:	07                   	pop    %es
    8be9:	61                   	popa   
    8bea:	60                   	pusha  
    8beb:	06                   	push   %es
    8bec:	1e                   	push   %ds
    8bed:	8c c8                	mov    %cs,%eax
    8bef:	8e d8                	mov    %eax,%ds
    8bf1:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8bf6:	b8 3f 00 bb 04       	mov    $0x4bb003f,%eax
    8bfb:	00 f7                	add    %dh,%bh
    8bfd:	e3 89                	jecxz  8b88 <_initialInt+0x1f2>
    8bff:	c7                   	(bad)  
    8c00:	b8 78 89 26 89       	mov    $0x89268978,%eax
    8c05:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c0a:	45                   	inc    %ebp
    8c0b:	02 1f                	add    (%edi),%bl
    8c0d:	07                   	pop    %es
    8c0e:	61                   	popa   
    8c0f:	c9                   	leave  
    8c10:	66 5a                	pop    %dx
    8c12:	ff e2                	jmp    *%edx

00008c14 <_initialInt_09h>:
    8c14:	c8 00 00 00          	enter  $0x0,$0x0
    8c18:	a1 24 00 a3 42       	mov    0x42a30024,%eax
    8c1d:	84 a1 26 00 a3 44    	test   %ah,0x44a30026(%ecx)
    8c23:	84 60 06             	test   %ah,0x6(%eax)
    8c26:	1e                   	push   %ds
    8c27:	8c c8                	mov    %cs,%eax
    8c29:	8e d8                	mov    %eax,%ds
    8c2b:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8c30:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
    8c35:	00 f7                	add    %dh,%bh
    8c37:	e3 89                	jecxz  8bc2 <_initialInt+0x22c>
    8c39:	c7                   	(bad)  
    8c3a:	b8 ce 86 26 89       	mov    $0x892686ce,%eax
    8c3f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c44:	45                   	inc    %ebp
    8c45:	02 1f                	add    (%edi),%bl
    8c47:	07                   	pop    %es
    8c48:	61                   	popa   
    8c49:	c9                   	leave  
    8c4a:	66 5a                	pop    %dx
    8c4c:	ff e2                	jmp    *%edx

00008c4e <_initialInt_08h>:
    8c4e:	c8 00 00 00          	enter  $0x0,$0x0
    8c52:	b0 40                	mov    $0x40,%al
    8c54:	e6 43                	out    %al,$0x43
    8c56:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
    8c5b:	88 e0                	mov    %ah,%al
    8c5d:	e6 40                	out    %al,$0x40
    8c5f:	60                   	pusha  
    8c60:	06                   	push   %es
    8c61:	1e                   	push   %ds
    8c62:	8c c8                	mov    %cs,%eax
    8c64:	8e d8                	mov    %eax,%ds
    8c66:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8c6b:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
    8c70:	00 f7                	add    %dh,%bh
    8c72:	e3 89                	jecxz  8bfd <_initialInt+0x267>
    8c74:	c7                   	(bad)  
    8c75:	b8 49 86 26 89       	mov    $0x89268649,%eax
    8c7a:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c7f:	45                   	inc    %ebp
    8c80:	02 1f                	add    (%edi),%bl
    8c82:	07                   	pop    %es
    8c83:	61                   	popa   
    8c84:	c9                   	leave  
    8c85:	66 5a                	pop    %dx
    8c87:	ff e2                	jmp    *%edx

00008c89 <_save>:
    8c89:	66 89 26             	mov    %sp,(%esi)
    8c8c:	5a                   	pop    %edx
    8c8d:	84 1e                	test   %bl,(%esi)
    8c8f:	0e                   	push   %cs
    8c90:	1f                   	pop    %ds
    8c91:	8f 06                	popl   (%esi)
    8c93:	4a                   	dec    %edx
    8c94:	84 8f 06 4e 84 66    	test   %cl,0x66844e06(%edi)
    8c9a:	89 26                	mov    %esp,(%esi)
    8c9c:	56                   	push   %esi
    8c9d:	84 66 89             	test   %ah,-0x77(%esi)
    8ca0:	36                   	ss
    8ca1:	50                   	push   %eax
    8ca2:	84 66 8b             	test   %ah,-0x75(%esi)
    8ca5:	36                   	ss
    8ca6:	70 cc                	jo     8c74 <_initialInt_08h+0x26>
    8ca8:	66 83 c6 2c          	add    $0x2c,%si
    8cac:	67 8f 06 67 8f       	popl   -0x7099
    8cb1:	46                   	inc    %esi
    8cb2:	04 67                	add    $0x67,%al
    8cb4:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
    8cbb:	46                   	inc    %esi
    8cbc:	08 67 c7             	or     %ah,-0x39(%edi)
    8cbf:	46                   	inc    %esi
    8cc0:	0a 00                	or     (%eax),%al
    8cc2:	00 66 67             	add    %ah,0x67(%esi)
    8cc5:	89 66 fc             	mov    %esp,-0x4(%esi)
    8cc8:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
    8ccc:	8c de                	mov    %ds,%esi
    8cce:	8e d6                	mov    %esi,%ss
    8cd0:	66 8b 26             	mov    (%esi),%sp
    8cd3:	70 cc                	jo     8ca1 <_save+0x18>
    8cd5:	66 83 c4 24          	add    $0x24,%sp
    8cd9:	6a 00                	push   $0x0
    8cdb:	ff 36                	pushl  (%esi)
    8cdd:	4a                   	dec    %edx
    8cde:	84 6a 00             	test   %ch,0x0(%edx)
    8ce1:	06                   	push   %es
    8ce2:	66 55                	push   %bp
    8ce4:	66 57                	push   %di
    8ce6:	66 ff 36             	pushw  (%esi)
    8ce9:	50                   	push   %eax
    8cea:	84 66 52             	test   %ah,0x52(%esi)
    8ced:	66 51                	push   %cx
    8cef:	66 53                	push   %bx
    8cf1:	66 50                	push   %ax
    8cf3:	66 8b 26             	mov    (%esi),%sp
    8cf6:	56                   	push   %esi
    8cf7:	84 a1 4e 84 ff e0    	test   %ah,-0x1f007bb2(%ecx)

00008cfd <_restart>:
    8cfd:	66 89 26             	mov    %sp,(%esi)
    8d00:	56                   	push   %esi
    8d01:	84 66 8b             	test   %ah,-0x75(%esi)
    8d04:	26                   	es
    8d05:	70 cc                	jo     8cd3 <_save+0x4a>
    8d07:	66 58                	pop    %ax
    8d09:	66 5b                	pop    %bx
    8d0b:	66 59                	pop    %cx
    8d0d:	66 5a                	pop    %dx
    8d0f:	66 5e                	pop    %si
    8d11:	66 5f                	pop    %di
    8d13:	66 5d                	pop    %bp
    8d15:	07                   	pop    %es
    8d16:	8f 06                	popl   (%esi)
    8d18:	54                   	push   %esp
    8d19:	84 8f 06 4a 84 8f    	test   %cl,-0x707bb5fa(%edi)
    8d1f:	06                   	push   %es
    8d20:	54                   	push   %esp
    8d21:	84 66 89             	test   %ah,-0x77(%esi)
    8d24:	36                   	ss
    8d25:	50                   	push   %eax
    8d26:	84 17                	test   %dl,(%edi)
    8d28:	8f 06                	popl   (%esi)
    8d2a:	54                   	push   %esp
    8d2b:	84 66 89             	test   %ah,-0x77(%esi)
    8d2e:	e6 66                	out    %al,$0x66
    8d30:	67 8b 26 67 ff       	mov    -0x99,%esp
    8d35:	76 0c                	jbe    8d43 <_restart+0x46>
    8d37:	67 ff 76 08          	pushl  0x8(%bp)
    8d3b:	67 ff 76 04          	pushl  0x4(%bp)
    8d3f:	66 8b 36             	mov    (%esi),%si
    8d42:	50                   	push   %eax
    8d43:	84 8e 1e 4a 84 50    	test   %cl,0x50844a1e(%esi)
    8d49:	b0 20                	mov    $0x20,%al
    8d4b:	e6 20                	out    %al,$0x20
    8d4d:	e6 a0                	out    %al,$0xa0
    8d4f:	58                   	pop    %eax
    8d50:	cf                   	iret   

00008d51 <RTC_Timer>:
    8d51:	c8 00 00 00          	enter  $0x0,$0x0
    8d55:	1e                   	push   %ds
    8d56:	06                   	push   %es
    8d57:	60                   	pusha  
    8d58:	8c c8                	mov    %cs,%eax
    8d5a:	8e d8                	mov    %eax,%ds
    8d5c:	8c c8                	mov    %cs,%eax
    8d5e:	8e c0                	mov    %eax,%es
    8d60:	bf 60 c5 b4 02       	mov    $0x2b4c560,%edi
    8d65:	cd 1a                	int    $0x1a
    8d67:	88 e8                	mov    %ch,%al
    8d69:	b4 00                	mov    $0x0,%ah
    8d6b:	b3 10                	mov    $0x10,%bl
    8d6d:	f6 f3                	div    %bl
    8d6f:	04 30                	add    $0x30,%al
    8d71:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
    8d77:	88 e8                	mov    %ch,%al
    8d79:	24 0f                	and    $0xf,%al
    8d7b:	04 30                	add    $0x30,%al
    8d7d:	88 45 01             	mov    %al,0x1(%ebp)
    8d80:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
    8d84:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
    8d88:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
    8d8c:	b4 02                	mov    $0x2,%ah
    8d8e:	cd 1a                	int    $0x1a
    8d90:	88 c8                	mov    %cl,%al
    8d92:	b4 00                	mov    $0x0,%ah
    8d94:	b3 10                	mov    $0x10,%bl
    8d96:	f6 f3                	div    %bl
    8d98:	04 30                	add    $0x30,%al
    8d9a:	88 45 05             	mov    %al,0x5(%ebp)
    8d9d:	b4 02                	mov    $0x2,%ah
    8d9f:	cd 1a                	int    $0x1a
    8da1:	88 c8                	mov    %cl,%al
    8da3:	24 0f                	and    $0xf,%al
    8da5:	04 30                	add    $0x30,%al
    8da7:	88 45 06             	mov    %al,0x6(%ebp)
    8daa:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
    8dae:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
    8db2:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
    8db6:	8c c8                	mov    %cs,%eax
    8db8:	8e d8                	mov    %eax,%ds
    8dba:	8e c0                	mov    %eax,%es
    8dbc:	bd 6f 84 8c d8       	mov    $0xd88c846f,%ebp
    8dc1:	8e c0                	mov    %eax,%es
    8dc3:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
    8dc8:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
    8dce:	b2 0a                	mov    $0xa,%dl
    8dd0:	cd 10                	int    $0x10
    8dd2:	8c c8                	mov    %cs,%eax
    8dd4:	8e d8                	mov    %eax,%ds
    8dd6:	8e c0                	mov    %eax,%es
    8dd8:	bd 60 c5 8c d8       	mov    $0xd88cc560,%ebp
    8ddd:	8e c0                	mov    %eax,%es
    8ddf:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
    8de4:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
    8dea:	b2 1e                	mov    $0x1e,%dl
    8dec:	cd 10                	int    $0x10
    8dee:	61                   	popa   
    8def:	07                   	pop    %es
    8df0:	1f                   	pop    %ds
    8df1:	c9                   	leave  
    8df2:	66 5a                	pop    %dx
    8df4:	ff e2                	jmp    *%edx

00008df6 <_Get_Hours_1>:
    8df6:	c8 04 00 00          	enter  $0x4,$0x0
    8dfa:	b4 02                	mov    $0x2,%ah
    8dfc:	cd 1a                	int    $0x1a
    8dfe:	88 e8                	mov    %ch,%al
    8e00:	b4 00                	mov    $0x0,%ah
    8e02:	b3 10                	mov    $0x10,%bl
    8e04:	f6 f3                	div    %bl
    8e06:	30 e4                	xor    %ah,%ah
    8e08:	66 67 89 04          	mov    %ax,(%si)
    8e0c:	24 66                	and    $0x66,%al
    8e0e:	67 8b 04             	mov    (%si),%eax
    8e11:	24 c9                	and    $0xc9,%al
    8e13:	66 5a                	pop    %dx
    8e15:	ff e2                	jmp    *%edx

00008e17 <_Get_Hours_2>:
    8e17:	c8 04 00 00          	enter  $0x4,$0x0
    8e1b:	b4 02                	mov    $0x2,%ah
    8e1d:	cd 1a                	int    $0x1a
    8e1f:	88 e8                	mov    %ch,%al
    8e21:	24 0f                	and    $0xf,%al
    8e23:	30 e4                	xor    %ah,%ah
    8e25:	66 67 89 04          	mov    %ax,(%si)
    8e29:	24 66                	and    $0x66,%al
    8e2b:	67 8b 04             	mov    (%si),%eax
    8e2e:	24 c9                	and    $0xc9,%al
    8e30:	66 5a                	pop    %dx
    8e32:	ff e2                	jmp    *%edx

00008e34 <_Get_Minutes_1>:
    8e34:	c8 04 00 00          	enter  $0x4,$0x0
    8e38:	b4 02                	mov    $0x2,%ah
    8e3a:	cd 1a                	int    $0x1a
    8e3c:	88 c8                	mov    %cl,%al
    8e3e:	b4 00                	mov    $0x0,%ah
    8e40:	b3 10                	mov    $0x10,%bl
    8e42:	f6 f3                	div    %bl
    8e44:	30 e4                	xor    %ah,%ah
    8e46:	66 67 89 04          	mov    %ax,(%si)
    8e4a:	24 66                	and    $0x66,%al
    8e4c:	67 8b 04             	mov    (%si),%eax
    8e4f:	24 c9                	and    $0xc9,%al
    8e51:	66 5a                	pop    %dx
    8e53:	ff e2                	jmp    *%edx

00008e55 <_Get_Minutes_2>:
    8e55:	c8 04 00 00          	enter  $0x4,$0x0
    8e59:	b4 02                	mov    $0x2,%ah
    8e5b:	cd 1a                	int    $0x1a
    8e5d:	88 c8                	mov    %cl,%al
    8e5f:	24 0f                	and    $0xf,%al
    8e61:	30 e4                	xor    %ah,%ah
    8e63:	66 67 89 04          	mov    %ax,(%si)
    8e67:	24 66                	and    $0x66,%al
    8e69:	67 8b 04             	mov    (%si),%eax
    8e6c:	24 c9                	and    $0xc9,%al
    8e6e:	66 5a                	pop    %dx
    8e70:	ff e2                	jmp    *%edx

00008e72 <print>:
#include "stdio.h"
//====================================================
//              显示字符串函数，可以指定位置
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
    8e72:	66 55                	push   %bp
    8e74:	66 89 e5             	mov    %sp,%bp
    8e77:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    8e7b:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    8e80:	66 89 d0             	mov    %dx,%ax
    8e83:	66 c1 e0 02          	shl    $0x2,%ax
    8e87:	66 01 d0             	add    %dx,%ax
    8e8a:	66 c1 e0 04          	shl    $0x4,%ax
    8e8e:	66 89 c2             	mov    %ax,%dx
    8e91:	67 66 8b 45 10       	mov    0x10(%di),%ax
    8e96:	66 01 d0             	add    %dx,%ax
    8e99:	66 01 c0             	add    %ax,%ax
    8e9c:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    8ea1:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    8ea8:	00 00                	add    %al,(%eax)
	int index = 0;
    8eaa:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8eb1:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    8eb3:	eb 35                	jmp    8eea <print+0x78>
		_printchar(Messeage[index],pos,color);
    8eb5:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8eba:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8ebf:	66 01 d0             	add    %dx,%ax
    8ec2:	67 8a 00             	mov    (%bx,%si),%al
    8ec5:	66 0f be c0          	movsbw %al,%ax
    8ec9:	67 66 ff 75 f4       	pushw  -0xc(%di)
    8ece:	67 66 ff 75 fc       	pushw  -0x4(%di)
    8ed3:	66 50                	push   %ax
    8ed5:	66 e8 d2 f5          	callw  84ab <_clearscreen+0x7>
    8ed9:	ff                   	(bad)  
    8eda:	ff 66 83             	jmp    *-0x7d(%esi)
    8edd:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    8ee0:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    8ee4:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    8eea:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8eef:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8ef4:	66 01 d0             	add    %dx,%ax
    8ef7:	67 8a 00             	mov    (%bx,%si),%al
    8efa:	84 c0                	test   %al,%al
    8efc:	75 b7                	jne    8eb5 <print+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    8efe:	90                   	nop
}
    8eff:	66 c9                	leavew 
    8f01:	66 c3                	retw   

00008f03 <prints>:
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input	
    8f03:	66 55                	push   %bp
    8f05:	66 89 e5             	mov    %sp,%bp
    8f08:	66 83 ec 04          	sub    $0x4,%sp
	__asm__("cli\n");
    8f0c:	fa                   	cli    
	int index = 0;
    8f0d:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8f14:	00 00                	add    %al,(%eax)
	while(Messeage[index]){
    8f16:	eb 25                	jmp    8f3d <prints+0x3a>
		_showchar(Messeage[index]);
    8f18:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8f1d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8f22:	66 01 d0             	add    %dx,%ax
    8f25:	67 8a 00             	mov    (%bx,%si),%al
    8f28:	66 0f be c0          	movsbw %al,%ax
    8f2c:	66 50                	push   %ax
    8f2e:	66 e8 b6 f5          	callw  84e8 <_readinput+0x17>
    8f32:	ff                   	(bad)  
    8f33:	ff 66 83             	jmp    *-0x7d(%esi)
    8f36:	c4 04 67             	les    (%edi,%eiz,2),%eax
		index++;
    8f39:	66 ff 45 fc          	incw   -0x4(%ebp)
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input	
	__asm__("cli\n");
	int index = 0;
	while(Messeage[index]){
    8f3d:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8f42:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8f47:	66 01 d0             	add    %dx,%ax
    8f4a:	67 8a 00             	mov    (%bx,%si),%al
    8f4d:	84 c0                	test   %al,%al
    8f4f:	75 c7                	jne    8f18 <prints+0x15>
		_showchar(Messeage[index]);
		index++;
	}
	__asm__("sti\n");
    8f51:	fb                   	sti    
	return;
    8f52:	90                   	nop
}
    8f53:	66 c9                	leavew 
    8f55:	66 c3                	retw   

00008f57 <printc>:
//====================================================
//                显示字符函数
//====================================================
void printc(char alpha){
    8f57:	66 55                	push   %bp
    8f59:	66 89 e5             	mov    %sp,%bp
    8f5c:	66 83 ec 04          	sub    $0x4,%sp
    8f60:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8f65:	67 88 45 fc          	mov    %al,-0x4(%di)
	_showchar(alpha);
    8f69:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    8f6f:	66 50                	push   %ax
    8f71:	66 e8 73 f5          	callw  84e8 <_readinput+0x17>
    8f75:	ff                   	(bad)  
    8f76:	ff 66 83             	jmp    *-0x7d(%esi)
    8f79:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    8f7c:	66 c9                	leavew 
    8f7e:	66 c3                	retw   

00008f80 <printsint>:
//====================================================
//                数字转字符函数
//====================================================
void printsint(int num){
    8f80:	66 55                	push   %bp
    8f82:	66 89 e5             	mov    %sp,%bp
    8f85:	66 83 ec 2c          	sub    $0x2c,%sp
	 int save = num;
    8f89:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8f8e:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	 int count = 0;
    8f93:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8f9a:	00 00                	add    %al,(%eax)
	 char number[30];
	 number[count] = 0;
    8f9c:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    8fa1:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8fa6:	66 01 d0             	add    %dx,%ax
    8fa9:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	if(num < 0){
    8fad:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    8fb3:	79 14                	jns    8fc9 <printsint+0x49>
		printc('-');
    8fb5:	66 6a 2d             	pushw  $0x2d
    8fb8:	66 e8 99 ff          	callw  8f55 <prints+0x52>
    8fbc:	ff                   	(bad)  
    8fbd:	ff 66 83             	jmp    *-0x7d(%esi)
    8fc0:	c4 04 67             	les    (%edi,%eiz,2),%eax
		num = -num;
    8fc3:	66 f7 5d 08          	negw   0x8(%ebp)
    8fc7:	eb 15                	jmp    8fde <printsint+0x5e>
	}
	else if(num == 0){
    8fc9:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    8fcf:	75 0d                	jne    8fde <printsint+0x5e>
		printc('0');
    8fd1:	66 6a 30             	pushw  $0x30
    8fd4:	66 e8 7d ff          	callw  8f55 <prints+0x52>
    8fd8:	ff                   	(bad)  
    8fd9:	ff 66 83             	jmp    *-0x7d(%esi)
    8fdc:	c4 04 eb             	les    (%ebx,%ebp,8),%eax
	}
	while(num > 0){
    8fdf:	50                   	push   %eax
		number[count] = num % 10 + '0';
    8fe0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8fe5:	66 b9 0a 00          	mov    $0xa,%cx
    8fe9:	00 00                	add    %al,(%eax)
    8feb:	66 99                	cwtd   
    8fed:	66 f7 f9             	idiv   %cx
    8ff0:	66 89 d0             	mov    %dx,%ax
    8ff3:	66 83 c0 30          	add    $0x30,%ax
    8ff7:	67 66 8d 4d d6       	lea    -0x2a(%di),%cx
    8ffc:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9001:	66 01 ca             	add    %cx,%dx
    9004:	67 88 02             	mov    %al,(%bp,%si)
		num  = num / 10;
    9007:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    900c:	66 b8 67 66          	mov    $0x6667,%ax
    9010:	66 66 66 f7 e9       	data32 data32 imul %cx
    9015:	66 c1 fa 02          	sar    $0x2,%dx
    9019:	66 89 c8             	mov    %cx,%ax
    901c:	66 c1 f8 1f          	sar    $0x1f,%ax
    9020:	66 29 c2             	sub    %ax,%dx
    9023:	66 89 d0             	mov    %dx,%ax
    9026:	67 66 89 45 08       	mov    %ax,0x8(%di)
		count ++;
    902b:	67 66 ff 45 fc       	incw   -0x4(%di)
		num = -num;
	}
	else if(num == 0){
		printc('0');
	}
	while(num > 0){
    9030:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    9036:	7f a8                	jg     8fe0 <printsint+0x60>
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    9038:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    903d:	66 48                	dec    %ax
    903f:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    9044:	eb 25                	jmp    906b <printsint+0xeb>
		printc(number[i]);
    9046:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    904b:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    9050:	66 01 d0             	add    %dx,%ax
    9053:	67 8a 00             	mov    (%bx,%si),%al
    9056:	66 0f be c0          	movsbw %al,%ax
    905a:	66 50                	push   %ax
    905c:	66 e8 f5 fe          	callw  8f55 <prints+0x52>
    9060:	ff                   	(bad)  
    9061:	ff 66 83             	jmp    *-0x7d(%esi)
    9064:	c4 04 67             	les    (%edi,%eiz,2),%eax
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    9067:	66 ff 4d f8          	decw   -0x8(%ebp)
    906b:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    9071:	79 d3                	jns    9046 <printsint+0xc6>
		printc(number[i]);
	}
	return;
    9073:	90                   	nop
}
    9074:	66 c9                	leavew 
    9076:	66 c3                	retw   

00009078 <print_next_line>:
//====================================================
//                显示字符串并换行函数
//====================================================
 void print_next_line(char const* Messeage){
    9078:	66 55                	push   %bp
    907a:	66 89 e5             	mov    %sp,%bp
	prints(Messeage);
    907d:	67 66 ff 75 08       	pushw  0x8(%di)
    9082:	66 e8 7b fe          	callw  8f01 <print+0x8f>
    9086:	ff                   	(bad)  
    9087:	ff 66 83             	jmp    *-0x7d(%esi)
    908a:	c4 04 66             	les    (%esi,%eiz,2),%eax
	prints("\n\r");
    908d:	68 ba aa 00 00       	push   $0xaaba
    9092:	66 e8 6b fe          	callw  8f01 <print+0x8f>
    9096:	ff                   	(bad)  
    9097:	ff 66 83             	jmp    *-0x7d(%esi)
    909a:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    909d:	66 c9                	leavew 
    909f:	66 c3                	retw   

000090a1 <strlen>:
//====================================================
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
    90a1:	66 55                	push   %bp
    90a3:	66 89 e5             	mov    %sp,%bp
    90a6:	66 83 ec 08          	sub    $0x8,%sp
	int i = 0;
    90aa:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    90b1:	00 00                	add    %al,(%eax)
	int count = 0;
    90b3:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    90ba:	00 00                	add    %al,(%eax)
	while(Messeage[i] != 0){
    90bc:	eb 0a                	jmp    90c8 <strlen+0x27>
		i++;
    90be:	67 66 ff 45 fc       	incw   -0x4(%di)
		count++;
    90c3:	67 66 ff 45 f8       	incw   -0x8(%di)
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
	int i = 0;
	int count = 0;
	while(Messeage[i] != 0){
    90c8:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    90cd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    90d2:	66 01 d0             	add    %dx,%ax
    90d5:	67 8a 00             	mov    (%bx,%si),%al
    90d8:	84 c0                	test   %al,%al
    90da:	75 e2                	jne    90be <strlen+0x1d>
		i++;
		count++;
	}
	return count;
    90dc:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    90e1:	66 c9                	leavew 
    90e3:	66 c3                	retw   

000090e5 <read_and_print_input>:
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    90e5:	66 55                	push   %bp
    90e7:	66 89 e5             	mov    %sp,%bp
    90ea:	66 83 ec 08          	sub    $0x8,%sp
    int i = 1;
    90ee:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    90f5:	00 00                	add    %al,(%eax)
    while(i){
    90f7:	eb 1c                	jmp    9115 <read_and_print_input+0x30>
        char savechar = _readinput();
    90f9:	66 e8 d2 f3          	callw  84cf <_printchar+0x22>
    90fd:	ff                   	(bad)  
    90fe:	ff 67 88             	jmp    *-0x78(%edi)
    9101:	45                   	inc    %ebp
    9102:	fb                   	sti    
        _showchar(savechar);
    9103:	67 66 0f be 45 fb    	movsbw -0x5(%di),%ax
    9109:	66 50                	push   %ax
    910b:	66 e8 d9 f3          	callw  84e8 <_readinput+0x17>
    910f:	ff                   	(bad)  
    9110:	ff 66 83             	jmp    *-0x7d(%esi)
    9113:	c4 04 67             	les    (%edi,%eiz,2),%eax
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    int i = 1;
    while(i){
    9116:	66 83 7d fc 00       	cmpw   $0x0,-0x4(%ebp)
    911b:	75 dc                	jne    90f9 <read_and_print_input+0x14>
        char savechar = _readinput();
        _showchar(savechar);
    }
}
    911d:	66 c9                	leavew 
    911f:	66 c3                	retw   

00009121 <getch>:
//====================================================
//        等待用户输入函数，返回用户输入在缓冲区中
//====================================================
char getch(){
    9121:	66 55                	push   %bp
    9123:	66 89 e5             	mov    %sp,%bp
    9126:	66 83 ec 04          	sub    $0x4,%sp
	char result = _readinput();
    912a:	66 e8 a1 f3          	callw  84cf <_printchar+0x22>
    912e:	ff                   	(bad)  
    912f:	ff 67 88             	jmp    *-0x78(%edi)
    9132:	45                   	inc    %ebp
    9133:	ff 67 8a             	jmp    *-0x76(%edi)
	return result;
    9136:	45                   	inc    %ebp
    9137:	ff 66 c9             	jmp    *-0x37(%esi)
}
    913a:	66 c3                	retw   

0000913c <getline>:
void  getline(char str[],int length){
    913c:	66 55                	push   %bp
    913e:	66 89 e5             	mov    %sp,%bp
    9141:	66 83 ec 08          	sub    $0x8,%sp
	char save = getch();
    9145:	66 e8 d6 ff          	callw  911f <read_and_print_input+0x3a>
    9149:	ff                   	(bad)  
    914a:	ff 67 88             	jmp    *-0x78(%edi)
    914d:	45                   	inc    %ebp
    914e:	ff 67 66             	jmp    *0x66(%edi)
	int index = 0;
    9151:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while(save != 13 && index < length){
    9158:	eb 46                	jmp    91a0 <getline+0x64>
		printc(save);
    915a:	67 66 0f be 45 ff    	movsbw -0x1(%di),%ax
    9160:	66 50                	push   %ax
    9162:	66 e8 ef fd          	callw  8f55 <prints+0x52>
    9166:	ff                   	(bad)  
    9167:	ff 66 83             	jmp    *-0x7d(%esi)
    916a:	c4 04 67             	les    (%edi,%eiz,2),%eax
		str[index] = save;
    916d:	66 8b 55 f8          	mov    -0x8(%ebp),%dx
    9171:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9176:	66 01 c2             	add    %ax,%dx
    9179:	67 8a 45 ff          	mov    -0x1(%di),%al
    917d:	67 88 02             	mov    %al,(%bp,%si)
		index ++;
    9180:	67 66 ff 45 f8       	incw   -0x8(%di)
		str[index] = 0;
    9185:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    918a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    918f:	66 01 d0             	add    %dx,%ax
    9192:	67 c6 00 00          	movb   $0x0,(%bx,%si)
		save = getch();
    9196:	66 e8 85 ff          	callw  911f <read_and_print_input+0x3a>
    919a:	ff                   	(bad)  
    919b:	ff 67 88             	jmp    *-0x78(%edi)
    919e:	45                   	inc    %ebp
    919f:	ff 67 80             	jmp    *-0x80(%edi)
	return result;
}
void  getline(char str[],int length){
	char save = getch();
	int index = 0;
	while(save != 13 && index < length){
    91a2:	7d ff                	jge    91a3 <getline+0x67>
    91a4:	0d 74 0c 67 66       	or     $0x66670c74,%eax
    91a9:	8b 45 f8             	mov    -0x8(%ebp),%eax
    91ac:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    91b1:	7c a7                	jl     915a <getline+0x1e>
		str[index] = save;
		index ++;
		str[index] = 0;
		save = getch();
	}
	return;
    91b3:	90                   	nop
}
    91b4:	66 c9                	leavew 
    91b6:	66 c3                	retw   

000091b8 <print_different_color>:
void print_different_color(char const* Messeage,int row,int colume,int color){
    91b8:	66 55                	push   %bp
    91ba:	66 89 e5             	mov    %sp,%bp
    91bd:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    91c1:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    91c6:	66 89 d0             	mov    %dx,%ax
    91c9:	66 c1 e0 02          	shl    $0x2,%ax
    91cd:	66 01 d0             	add    %dx,%ax
    91d0:	66 c1 e0 04          	shl    $0x4,%ax
    91d4:	66 89 c2             	mov    %ax,%dx
    91d7:	67 66 8b 45 10       	mov    0x10(%di),%ax
    91dc:	66 01 d0             	add    %dx,%ax
    91df:	66 01 c0             	add    %ax,%ax
    91e2:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    91e7:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    91ee:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    91f0:	eb 35                	jmp    9227 <print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    91f2:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    91f7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    91fc:	66 01 d0             	add    %dx,%ax
    91ff:	67 8a 00             	mov    (%bx,%si),%al
    9202:	66 0f be c0          	movsbw %al,%ax
    9206:	67 66 ff 75 14       	pushw  0x14(%di)
    920b:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9210:	66 50                	push   %ax
    9212:	66 e8 95 f2          	callw  84ab <_clearscreen+0x7>
    9216:	ff                   	(bad)  
    9217:	ff 66 83             	jmp    *-0x7d(%esi)
    921a:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    921d:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    9221:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    9227:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    922c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9231:	66 01 d0             	add    %dx,%ax
    9234:	67 8a 00             	mov    (%bx,%si),%al
    9237:	84 c0                	test   %al,%al
    9239:	75 b7                	jne    91f2 <print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    923b:	90                   	nop
}
    923c:	66 c9                	leavew 
    923e:	66 c3                	retw   

00009240 <strcmp>:
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
    9240:	66 55                	push   %bp
    9242:	66 89 e5             	mov    %sp,%bp
    9245:	66 83 ec 04          	sub    $0x4,%sp
	int i = 0;
    9249:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9250:	00 00                	add    %al,(%eax)
	while(m1[i] != 0 && m2[i]!= 0){
    9252:	eb 31                	jmp    9285 <strcmp+0x45>
		if(m1[i] != m2[i]){
    9254:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9259:	67 66 8b 45 08       	mov    0x8(%di),%ax
    925e:	66 01 d0             	add    %dx,%ax
    9261:	67 8a 10             	mov    (%bx,%si),%dl
    9264:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    9269:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    926e:	66 01 c8             	add    %cx,%ax
    9271:	67 8a 00             	mov    (%bx,%si),%al
    9274:	38 c2                	cmp    %al,%dl
    9276:	74 08                	je     9280 <strcmp+0x40>
			return 0;
    9278:	66 b8 00 00          	mov    $0x0,%ax
    927c:	00 00                	add    %al,(%eax)
    927e:	eb 63                	jmp    92e3 <strcmp+0xa3>
		}
		i++;
    9280:	67 66 ff 45 fc       	incw   -0x4(%di)
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
	int i = 0;
	while(m1[i] != 0 && m2[i]!= 0){
    9285:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    928a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    928f:	66 01 d0             	add    %dx,%ax
    9292:	67 8a 00             	mov    (%bx,%si),%al
    9295:	84 c0                	test   %al,%al
    9297:	74 14                	je     92ad <strcmp+0x6d>
    9299:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    929e:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    92a3:	66 01 d0             	add    %dx,%ax
    92a6:	67 8a 00             	mov    (%bx,%si),%al
    92a9:	84 c0                	test   %al,%al
    92ab:	75 a7                	jne    9254 <strcmp+0x14>
		if(m1[i] != m2[i]){
			return 0;
		}
		i++;
	}
	if(m1[i] != 0 || m2[i] != 0){
    92ad:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    92b2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    92b7:	66 01 d0             	add    %dx,%ax
    92ba:	67 8a 00             	mov    (%bx,%si),%al
    92bd:	84 c0                	test   %al,%al
    92bf:	75 14                	jne    92d5 <strcmp+0x95>
    92c1:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    92c6:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    92cb:	66 01 d0             	add    %dx,%ax
    92ce:	67 8a 00             	mov    (%bx,%si),%al
    92d1:	84 c0                	test   %al,%al
    92d3:	74 08                	je     92dd <strcmp+0x9d>
		return 0;
    92d5:	66 b8 00 00          	mov    $0x0,%ax
    92d9:	00 00                	add    %al,(%eax)
    92db:	eb 06                	jmp    92e3 <strcmp+0xa3>
	}
	return 1;
    92dd:	66 b8 01 00          	mov    $0x1,%ax
    92e1:	00 00                	add    %al,(%eax)
}
    92e3:	66 c9                	leavew 
    92e5:	66 c3                	retw   

000092e7 <strcpy>:
//====================================================
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
    92e7:	66 55                	push   %bp
    92e9:	66 89 e5             	mov    %sp,%bp
    92ec:	66 83 ec 08          	sub    $0x8,%sp
	int len = strlen(src);
    92f0:	67 66 ff 75 08       	pushw  0x8(%di)
    92f5:	66 e8 a6 fd          	callw  909f <print_next_line+0x27>
    92f9:	ff                   	(bad)  
    92fa:	ff 66 83             	jmp    *-0x7d(%esi)
    92fd:	c4 04 67             	les    (%edi,%eiz,2),%eax
    9300:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	int i = 0;
    9304:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    930b:	00 00                	add    %al,(%eax)
	for(i = 0;i < len;i ++){
    930d:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9314:	00 00                	add    %al,(%eax)
    9316:	eb 3b                	jmp    9353 <strcpy+0x6c>
    	des[i] =  src[i];
    9318:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    931d:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9322:	66 01 c2             	add    %ax,%dx
    9325:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    932a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    932f:	66 01 c8             	add    %cx,%ax
    9332:	67 8a 00             	mov    (%bx,%si),%al
    9335:	67 88 02             	mov    %al,(%bp,%si)
        des[i+1] = 0;
    9338:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    933d:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    9342:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9347:	66 01 d0             	add    %dx,%ax
    934a:	67 c6 00 00          	movb   $0x0,(%bx,%si)
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
	int len = strlen(src);
	int i = 0;
	for(i = 0;i < len;i ++){
    934e:	67 66 ff 45 fc       	incw   -0x4(%di)
    9353:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9358:	67 66 3b 45 f8       	cmp    -0x8(%di),%ax
    935d:	7c b9                	jl     9318 <strcpy+0x31>
    	des[i] =  src[i];
        des[i+1] = 0;
	}
    935f:	66 c9                	leavew 
    9361:	66 c3                	retw   

00009363 <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
    9363:	66 55                	push   %bp
    9365:	66 89 e5             	mov    %sp,%bp
    9368:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    936c:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    9371:	66 89 d0             	mov    %dx,%ax
    9374:	66 c1 e0 02          	shl    $0x2,%ax
    9378:	66 01 d0             	add    %dx,%ax
    937b:	66 c1 e0 04          	shl    $0x4,%ax
    937f:	66 89 c2             	mov    %ax,%dx
    9382:	67 66 8b 45 10       	mov    0x10(%di),%ax
    9387:	66 01 d0             	add    %dx,%ax
    938a:	66 01 c0             	add    %ax,%ax
    938d:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    9392:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    9399:	00 00                	add    %al,(%eax)
	int index = 0;
    939b:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    93a2:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    93a4:	eb 35                	jmp    93db <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
    93a6:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    93ab:	67 66 8b 45 08       	mov    0x8(%di),%ax
    93b0:	66 01 d0             	add    %dx,%ax
    93b3:	67 8a 00             	mov    (%bx,%si),%al
    93b6:	66 0f be c0          	movsbw %al,%ax
    93ba:	67 66 ff 75 f4       	pushw  -0xc(%di)
    93bf:	67 66 ff 75 fc       	pushw  -0x4(%di)
    93c4:	66 50                	push   %ax
    93c6:	66 e8 e1 f0          	callw  84ab <_clearscreen+0x7>
    93ca:	ff                   	(bad)  
    93cb:	ff 66 83             	jmp    *-0x7d(%esi)
    93ce:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    93d1:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    93d5:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    93db:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    93e0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    93e5:	66 01 d0             	add    %dx,%ax
    93e8:	67 8a 00             	mov    (%bx,%si),%al
    93eb:	84 c0                	test   %al,%al
    93ed:	75 b7                	jne    93a6 <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    93ef:	90                   	nop
}
    93f0:	66 c9                	leavew 
    93f2:	66 c3                	retw   

000093f4 <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    93f4:	66 55                	push   %bp
    93f6:	66 89 e5             	mov    %sp,%bp
    93f9:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    93fd:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    9402:	66 89 d0             	mov    %dx,%ax
    9405:	66 c1 e0 02          	shl    $0x2,%ax
    9409:	66 01 d0             	add    %dx,%ax
    940c:	66 c1 e0 04          	shl    $0x4,%ax
    9410:	66 89 c2             	mov    %ax,%dx
    9413:	67 66 8b 45 10       	mov    0x10(%di),%ax
    9418:	66 01 d0             	add    %dx,%ax
    941b:	66 01 c0             	add    %ax,%ax
    941e:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    9423:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    942a:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    942c:	eb 35                	jmp    9463 <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    942e:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9433:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9438:	66 01 d0             	add    %dx,%ax
    943b:	67 8a 00             	mov    (%bx,%si),%al
    943e:	66 0f be c0          	movsbw %al,%ax
    9442:	67 66 ff 75 14       	pushw  0x14(%di)
    9447:	67 66 ff 75 fc       	pushw  -0x4(%di)
    944c:	66 50                	push   %ax
    944e:	66 e8 59 f0          	callw  84ab <_clearscreen+0x7>
    9452:	ff                   	(bad)  
    9453:	ff 66 83             	jmp    *-0x7d(%esi)
    9456:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    9459:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    945d:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    9463:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9468:	67 66 8b 45 08       	mov    0x8(%di),%ax
    946d:	66 01 d0             	add    %dx,%ax
    9470:	67 8a 00             	mov    (%bx,%si),%al
    9473:	84 c0                	test   %al,%al
    9475:	75 b7                	jne    942e <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    9477:	90                   	nop
}
    9478:	66 c9                	leavew 
    947a:	66 c3                	retw   

0000947c <sys_showline>:
void sys_showline(){
    947c:	66 55                	push   %bp
    947e:	66 89 e5             	mov    %sp,%bp
    9481:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
    9485:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
    948a:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
    948f:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
    9494:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
    9499:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
    949e:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
    94a3:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
    94a8:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    94af:	00 00                	add    %al,(%eax)
    int i = 0;
    94b1:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    94b8:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
    94ba:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    94c1:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
    94c3:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    94ca:	00 00                	add    %al,(%eax)
    94cc:	eb 52                	jmp    9520 <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
    94ce:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    94d3:	66 89 d0             	mov    %dx,%ax
    94d6:	66 c1 e0 03          	shl    $0x3,%ax
    94da:	66 01 d0             	add    %dx,%ax
    94dd:	67 66 8d 14          	lea    (%si),%dx
    94e1:	c5 00                	lds    (%eax),%eax
    94e3:	00 00                	add    %al,(%eax)
    94e5:	00 66 01             	add    %ah,0x1(%esi)
    94e8:	d0 66 01             	shlb   0x1(%esi)
    94eb:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
    94ef:	45                   	inc    %ebp
    94f0:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
    94f6:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    94fb:	66 01 d0             	add    %dx,%ax
    94fe:	67 8a 00             	mov    (%bx,%si),%al
    9501:	66 0f be c0          	movsbw %al,%ax
    9505:	67 66 ff 75 f4       	pushw  -0xc(%di)
    950a:	67 66 ff 75 f0       	pushw  -0x10(%di)
    950f:	66 50                	push   %ax
    9511:	66 e8 96 ef          	callw  84ab <_clearscreen+0x7>
    9515:	ff                   	(bad)  
    9516:	ff 66 83             	jmp    *-0x7d(%esi)
    9519:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
    951c:	66 ff 45 fc          	incw   -0x4(%ebp)
    9520:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
    9526:	7e a6                	jle    94ce <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
    9528:	66 c9                	leavew 
    952a:	66 c3                	retw   

0000952c <sys_printname>:

void sys_printname(){
    952c:	66 55                	push   %bp
    952e:	66 89 e5             	mov    %sp,%bp
    9531:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
    9535:	67 66 c7 45 fc c0 aa 	movw   $0xaac0,-0x4(%di)
    953c:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
    953e:	67 66 c7 45 f8 04 ab 	movw   $0xab04,-0x8(%di)
    9545:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
    9547:	67 66 c7 45 f4 48 ab 	movw   $0xab48,-0xc(%di)
    954e:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
    9550:	67 66 c7 45 f0 8c ab 	movw   $0xab8c,-0x10(%di)
    9557:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
    9559:	67 66 c7 45 ec d0 ab 	movw   $0xabd0,-0x14(%di)
    9560:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
    9562:	67 66 c7 45 e8 14 ac 	movw   $0xac14,-0x18(%di)
    9569:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
    956b:	67 66 c7 45 e4 58 ac 	movw   $0xac58,-0x1c(%di)
    9572:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
    9574:	66 6a 0b             	pushw  $0xb
    9577:	66 6a 10             	pushw  $0x10
    957a:	67 66 ff 75 fc       	pushw  -0x4(%di)
    957f:	66 e8 de fd          	callw  9361 <strcpy+0x7a>
    9583:	ff                   	(bad)  
    9584:	ff 66 83             	jmp    *-0x7d(%esi)
    9587:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
    958a:	6a 0b                	push   $0xb
    958c:	66 6a 11             	pushw  $0x11
    958f:	67 66 ff 75 f8       	pushw  -0x8(%di)
    9594:	66 e8 c9 fd          	callw  9361 <strcpy+0x7a>
    9598:	ff                   	(bad)  
    9599:	ff 66 83             	jmp    *-0x7d(%esi)
    959c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
    959f:	6a 0b                	push   $0xb
    95a1:	66 6a 12             	pushw  $0x12
    95a4:	67 66 ff 75 f4       	pushw  -0xc(%di)
    95a9:	66 e8 b4 fd          	callw  9361 <strcpy+0x7a>
    95ad:	ff                   	(bad)  
    95ae:	ff 66 83             	jmp    *-0x7d(%esi)
    95b1:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
    95b4:	6a 0b                	push   $0xb
    95b6:	66 6a 13             	pushw  $0x13
    95b9:	67 66 ff 75 f0       	pushw  -0x10(%di)
    95be:	66 e8 9f fd          	callw  9361 <strcpy+0x7a>
    95c2:	ff                   	(bad)  
    95c3:	ff 66 83             	jmp    *-0x7d(%esi)
    95c6:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
    95c9:	6a 0b                	push   $0xb
    95cb:	66 6a 14             	pushw  $0x14
    95ce:	67 66 ff 75 ec       	pushw  -0x14(%di)
    95d3:	66 e8 8a fd          	callw  9361 <strcpy+0x7a>
    95d7:	ff                   	(bad)  
    95d8:	ff 66 83             	jmp    *-0x7d(%esi)
    95db:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
    95de:	6a 0b                	push   $0xb
    95e0:	66 6a 15             	pushw  $0x15
    95e3:	67 66 ff 75 e8       	pushw  -0x18(%di)
    95e8:	66 e8 75 fd          	callw  9361 <strcpy+0x7a>
    95ec:	ff                   	(bad)  
    95ed:	ff 66 83             	jmp    *-0x7d(%esi)
    95f0:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
    95f3:	6a 0b                	push   $0xb
    95f5:	66 6a 16             	pushw  $0x16
    95f8:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    95fd:	66 e8 60 fd          	callw  9361 <strcpy+0x7a>
    9601:	ff                   	(bad)  
    9602:	ff 66 83             	jmp    *-0x7d(%esi)
    9605:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    9608:	c9                   	leave  
    9609:	66 c3                	retw   

0000960b <sys_printpoem>:
void sys_printpoem(){
    960b:	66 55                	push   %bp
    960d:	66 89 e5             	mov    %sp,%bp
    9610:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
    9614:	67 66 c7 45 f8 9c ac 	movw   $0xac9c,-0x8(%di)
    961b:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
    961d:	67 66 c7 45 f4 ae ac 	movw   $0xacae,-0xc(%di)
    9624:	00 00                	add    %al,(%eax)
    int i = 1;
    9626:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    962d:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
    962f:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    9636:	00 00                	add    %al,(%eax)
    9638:	eb 4b                	jmp    9685 <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
    963a:	67 66 ff 75 fc       	pushw  -0x4(%di)
    963f:	66 6a 0a             	pushw  $0xa
    9642:	66 6a 0f             	pushw  $0xf
    9645:	67 66 ff 75 f8       	pushw  -0x8(%di)
    964a:	66 e8 a4 fd          	callw  93f2 <sys_print_for_heart+0x8f>
    964e:	ff                   	(bad)  
    964f:	ff 66 83             	jmp    *-0x7d(%esi)
    9652:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
    9654:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9659:	66 6a 0a             	pushw  $0xa
    965c:	66 6a 10             	pushw  $0x10
    965f:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9664:	66 e8 8a fd          	callw  93f2 <sys_print_for_heart+0x8f>
    9668:	ff                   	(bad)  
    9669:	ff 66 83             	jmp    *-0x7d(%esi)
    966c:	c4 10                	les    (%eax),%edx
        int j = 0;
    966e:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9675:	00 00                	add    %al,(%eax)
        int k = 0;
    9677:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    967e:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
    9680:	67 66 ff 45 fc       	incw   -0x4(%di)
    9685:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    968b:	7e ad                	jle    963a <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
    968d:	66 c9                	leavew 
    968f:	66 c3                	retw   

00009691 <sys_printheart>:
void sys_printheart(){
    9691:	66 55                	push   %bp
    9693:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
    9696:	66 6a 28             	pushw  $0x28
    9699:	66 6a 00             	pushw  $0x0
    969c:	66 68 b7 ac          	pushw  $0xacb7
    96a0:	00 00                	add    %al,(%eax)
    96a2:	66 e8 bb fc          	callw  9361 <strcpy+0x7a>
    96a6:	ff                   	(bad)  
    96a7:	ff 66 83             	jmp    *-0x7d(%esi)
    96aa:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
    96ad:	6a 28                	push   $0x28
    96af:	66 6a 01             	pushw  $0x1
    96b2:	66 68 cf ac          	pushw  $0xaccf
    96b6:	00 00                	add    %al,(%eax)
    96b8:	66 e8 a5 fc          	callw  9361 <strcpy+0x7a>
    96bc:	ff                   	(bad)  
    96bd:	ff 66 83             	jmp    *-0x7d(%esi)
    96c0:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
    96c3:	6a 28                	push   $0x28
    96c5:	66 6a 02             	pushw  $0x2
    96c8:	66 68 e8 ac          	pushw  $0xace8
    96cc:	00 00                	add    %al,(%eax)
    96ce:	66 e8 8f fc          	callw  9361 <strcpy+0x7a>
    96d2:	ff                   	(bad)  
    96d3:	ff 66 83             	jmp    *-0x7d(%esi)
    96d6:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
    96d9:	6a 28                	push   $0x28
    96db:	66 6a 03             	pushw  $0x3
    96de:	66 68 03 ad          	pushw  $0xad03
    96e2:	00 00                	add    %al,(%eax)
    96e4:	66 e8 79 fc          	callw  9361 <strcpy+0x7a>
    96e8:	ff                   	(bad)  
    96e9:	ff 66 83             	jmp    *-0x7d(%esi)
    96ec:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
    96ef:	6a 28                	push   $0x28
    96f1:	66 6a 04             	pushw  $0x4
    96f4:	66 68 1c ad          	pushw  $0xad1c
    96f8:	00 00                	add    %al,(%eax)
    96fa:	66 e8 63 fc          	callw  9361 <strcpy+0x7a>
    96fe:	ff                   	(bad)  
    96ff:	ff 66 83             	jmp    *-0x7d(%esi)
    9702:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
    9705:	6a 28                	push   $0x28
    9707:	66 6a 05             	pushw  $0x5
    970a:	66 68 34 ad          	pushw  $0xad34
    970e:	00 00                	add    %al,(%eax)
    9710:	66 e8 4d fc          	callw  9361 <strcpy+0x7a>
    9714:	ff                   	(bad)  
    9715:	ff 66 83             	jmp    *-0x7d(%esi)
    9718:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
    971b:	6a 28                	push   $0x28
    971d:	66 6a 06             	pushw  $0x6
    9720:	66 68 4b ad          	pushw  $0xad4b
    9724:	00 00                	add    %al,(%eax)
    9726:	66 e8 37 fc          	callw  9361 <strcpy+0x7a>
    972a:	ff                   	(bad)  
    972b:	ff 66 83             	jmp    *-0x7d(%esi)
    972e:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
    9731:	6a 28                	push   $0x28
    9733:	66 6a 07             	pushw  $0x7
    9736:	66 68 61 ad          	pushw  $0xad61
    973a:	00 00                	add    %al,(%eax)
    973c:	66 e8 21 fc          	callw  9361 <strcpy+0x7a>
    9740:	ff                   	(bad)  
    9741:	ff 66 83             	jmp    *-0x7d(%esi)
    9744:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    9747:	c9                   	leave  
    9748:	66 c3                	retw   

0000974a <Get_Hours>:
#include "time.h"
#include "stdio.h"

int Get_Hours(){
    974a:	66 55                	push   %bp
    974c:	66 89 e5             	mov    %sp,%bp
    974f:	66 53                	push   %bx
    9751:	66 83 ec 04          	sub    $0x4,%sp
    int hours = _Get_Hours_1();
    9755:	66 e8 9b f6          	callw  8df4 <RTC_Timer+0xa3>
    9759:	ff                   	(bad)  
    975a:	ff 67 66             	jmp    *0x66(%edi)
    975d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    hours = hours * 10 + _Get_Hours_2();
    9760:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9765:	66 89 d0             	mov    %dx,%ax
    9768:	66 c1 e0 02          	shl    $0x2,%ax
    976c:	66 01 d0             	add    %dx,%ax
    976f:	66 01 c0             	add    %ax,%ax
    9772:	66 89 c3             	mov    %ax,%bx
    9775:	66 e8 9c f6          	callw  8e15 <_Get_Hours_1+0x1f>
    9779:	ff                   	(bad)  
    977a:	ff 66 01             	jmp    *0x1(%esi)
    977d:	d8 67 66             	fsubs  0x66(%edi)
    9780:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return hours;
    9783:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
   // printsint(hours);
}
    9788:	66 83 c4 04          	add    $0x4,%sp
    978c:	66 5b                	pop    %bx
    978e:	66 5d                	pop    %bp
    9790:	66 c3                	retw   

00009792 <Get_Minutes>:
int Get_Minutes(){
    9792:	66 55                	push   %bp
    9794:	66 89 e5             	mov    %sp,%bp
    9797:	66 53                	push   %bx
    9799:	66 83 ec 04          	sub    $0x4,%sp
    int minutes = _Get_Minutes_1();
    979d:	66 e8 91 f6          	callw  8e32 <_Get_Hours_2+0x1b>
    97a1:	ff                   	(bad)  
    97a2:	ff 67 66             	jmp    *0x66(%edi)
    97a5:	89 45 f8             	mov    %eax,-0x8(%ebp)
    minutes = minutes * 10 + _Get_Minutes_2();
    97a8:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    97ad:	66 89 d0             	mov    %dx,%ax
    97b0:	66 c1 e0 02          	shl    $0x2,%ax
    97b4:	66 01 d0             	add    %dx,%ax
    97b7:	66 01 c0             	add    %ax,%ax
    97ba:	66 89 c3             	mov    %ax,%bx
    97bd:	66 e8 92 f6          	callw  8e53 <_Get_Minutes_1+0x1f>
    97c1:	ff                   	(bad)  
    97c2:	ff 66 01             	jmp    *0x1(%esi)
    97c5:	d8 67 66             	fsubs  0x66(%edi)
    97c8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return minutes;
    97cb:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    97d0:	66 83 c4 04          	add    $0x4,%sp
    97d4:	66 5b                	pop    %bx
    97d6:	66 5d                	pop    %bp
    97d8:	66 c3                	retw   

000097da <printTime>:
void printTime(){
    97da:	66 55                	push   %bp
    97dc:	66 89 e5             	mov    %sp,%bp
    97df:	66 83 ec 08          	sub    $0x8,%sp
    int hour = Get_Hours();
    97e3:	66 e8 61 ff          	callw  9748 <sys_printheart+0xb7>
    97e7:	ff                   	(bad)  
    97e8:	ff 67 66             	jmp    *0x66(%edi)
    97eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int minute = Get_Minutes();
    97ee:	66 e8 9e ff          	callw  9790 <Get_Hours+0x46>
    97f2:	ff                   	(bad)  
    97f3:	ff 67 66             	jmp    *0x66(%edi)
    97f6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    printsint(hour);
    97f9:	67 66 ff 75 fc       	pushw  -0x4(%di)
    97fe:	66 e8 7c f7          	callw  8f7e <printc+0x27>
    9802:	ff                   	(bad)  
    9803:	ff 66 83             	jmp    *-0x7d(%esi)
    9806:	c4 04 66             	les    (%esi,%eiz,2),%eax
    prints("h : ");
    9809:	68 76 ad 00 00       	push   $0xad76
    980e:	66 e8 ef f6          	callw  8f01 <print+0x8f>
    9812:	ff                   	(bad)  
    9813:	ff 66 83             	jmp    *-0x7d(%esi)
    9816:	c4 04 67             	les    (%edi,%eiz,2),%eax
    printsint(minute);
    9819:	66 ff 75 f8          	pushw  -0x8(%ebp)
    981d:	66 e8 5d f7          	callw  8f7e <printc+0x27>
    9821:	ff                   	(bad)  
    9822:	ff 66 83             	jmp    *-0x7d(%esi)
    9825:	c4 04 66             	les    (%esi,%eiz,2),%eax
    printc('m');
    9828:	6a 6d                	push   $0x6d
    982a:	66 e8 27 f7          	callw  8f55 <prints+0x52>
    982e:	ff                   	(bad)  
    982f:	ff 66 83             	jmp    *-0x7d(%esi)
    9832:	c4 04 66             	les    (%esi,%eiz,2),%eax

    9835:	c9                   	leave  
    9836:	66 c3                	retw   

00009838 <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    9838:	66 55                	push   %bp
    983a:	66 89 e5             	mov    %sp,%bp
    983d:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    9841:	66 e8 49 ed          	callw  858e <_Schedule_once+0x9>
    9845:	ff                   	(bad)  
    9846:	ff 67 66             	jmp    *0x66(%edi)
    9849:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    984c:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    9851:	66 c9                	leavew 
    9853:	66 c3                	retw   

00009855 <wait>:
char wait(){
    9855:	66 55                	push   %bp
    9857:	66 89 e5             	mov    %sp,%bp
    985a:	66 83 ec 08          	sub    $0x8,%sp
    int temp_ch = _wait();
    985e:	66 e8 44 ed          	callw  85a6 <_Schedule+0xb>
    9862:	ff                   	(bad)  
    9863:	ff 67 66             	jmp    *0x66(%edi)
    9866:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char ch = '0' + temp_ch;
    9869:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    986e:	66 83 c0 30          	add    $0x30,%ax
    9872:	67 88 45 fb          	mov    %al,-0x5(%di)
    return ch;
    9876:	67 8a 45 fb          	mov    -0x5(%di),%al
    //_wait();
}
    987a:	66 c9                	leavew 
    987c:	66 c3                	retw   

0000987e <exit>:
void exit(char ch){
    987e:	66 55                	push   %bp
    9880:	66 89 e5             	mov    %sp,%bp
    9883:	66 83 ec 04          	sub    $0x4,%sp
    9887:	67 66 8b 45 08       	mov    0x8(%di),%ax
    988c:	67 88 45 fc          	mov    %al,-0x4(%di)
    _exit(ch);
    9890:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    9896:	66 50                	push   %ax
    9898:	66 e8 15 ed          	callw  85b1 <_wait+0x9>
    989c:	ff                   	(bad)  
    989d:	ff 66 83             	jmp    *-0x7d(%esi)
    98a0:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    98a3:	c9                   	leave  
    98a4:	66 c3                	retw   

000098a6 <GetSem>:
int GetSem(int value){
    98a6:	66 55                	push   %bp
    98a8:	66 89 e5             	mov    %sp,%bp
    98ab:	66 83 ec 04          	sub    $0x4,%sp
    int sema = _GetSem(value);
    98af:	67 66 ff 75 08       	pushw  0x8(%di)
    98b4:	66 e8 0b ed          	callw  85c3 <_exit+0x10>
    98b8:	ff                   	(bad)  
    98b9:	ff 66 83             	jmp    *-0x7d(%esi)
    98bc:	c4 04 67             	les    (%edi,%eiz,2),%eax
    98bf:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return sema;
    98c3:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    98c8:	66 c9                	leavew 
    98ca:	66 c3                	retw   

000098cc <SemFree>:
void SemFree(int value){
    98cc:	66 55                	push   %bp
    98ce:	66 89 e5             	mov    %sp,%bp
    _FreeSem(value);
    98d1:	67 66 ff 75 08       	pushw  0x8(%di)
    98d6:	66 e8 fb ec          	callw  85d5 <_GetSem+0x10>
    98da:	ff                   	(bad)  
    98db:	ff 66 83             	jmp    *-0x7d(%esi)
    98de:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    98e1:	c9                   	leave  
    98e2:	66 c3                	retw   

000098e4 <P>:
void P(int s){   
    98e4:	66 55                	push   %bp
    98e6:	66 89 e5             	mov    %sp,%bp
    _P(s);
    98e9:	67 66 ff 75 08       	pushw  0x8(%di)
    98ee:	66 e8 f5 ec          	callw  85e7 <_FreeSem+0x10>
    98f2:	ff                   	(bad)  
    98f3:	ff 66 83             	jmp    *-0x7d(%esi)
    98f6:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    98f9:	c9                   	leave  
    98fa:	66 c3                	retw   

000098fc <V>:
void V(int s){
    98fc:	66 55                	push   %bp
    98fe:	66 89 e5             	mov    %sp,%bp
    _V(s);
    9901:	67 66 ff 75 08       	pushw  0x8(%di)
    9906:	66 e8 ef ec          	callw  85f9 <_P+0x10>
    990a:	ff                   	(bad)  
    990b:	ff 66 83             	jmp    *-0x7d(%esi)
    990e:	c4 04 66             	les    (%esi,%eiz,2),%eax
    9911:	c9                   	leave  
    9912:	66 c3                	retw   

00009914 <initial_PCB>:
#include "schedule.h"
#include "use.h"
void initial_PCB(int index){
    9914:	66 55                	push   %bp
    9916:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    9919:	67 66 8b 45 08       	mov    0x8(%di),%ax
    991e:	66 40                	inc    %ax
    9920:	66 c1 e0 0c          	shl    $0xc,%ax
    9924:	66 89 c2             	mov    %ax,%dx
    9927:	67 66 8b 45 08       	mov    0x8(%di),%ax
    992c:	66 c1 e0 02          	shl    $0x2,%ax
    9930:	66 89 c1             	mov    %ax,%cx
    9933:	66 c1 e1 04          	shl    $0x4,%cx
    9937:	66 01 c8             	add    %cx,%ax
    993a:	66 05 50 c7          	add    $0xc750,%ax
    993e:	00 00                	add    %al,(%eax)
    9940:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    9944:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9949:	66 40                	inc    %ax
    994b:	66 c1 e0 0c          	shl    $0xc,%ax
    994f:	66 89 c2             	mov    %ax,%dx
    9952:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9957:	66 c1 e0 02          	shl    $0x2,%ax
    995b:	66 89 c1             	mov    %ax,%cx
    995e:	66 c1 e1 04          	shl    $0x4,%cx
    9962:	66 01 c8             	add    %cx,%ax
    9965:	66 05 40 c7          	add    $0xc740,%ax
    9969:	00 00                	add    %al,(%eax)
    996b:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
    996f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9974:	66 40                	inc    %ax
    9976:	66 c1 e0 0c          	shl    $0xc,%ax
    997a:	66 89 c2             	mov    %ax,%dx
    997d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9982:	66 c1 e0 02          	shl    $0x2,%ax
    9986:	66 89 c1             	mov    %ax,%cx
    9989:	66 c1 e1 04          	shl    $0x4,%cx
    998d:	66 01 c8             	add    %cx,%ax
    9990:	66 05 40 c7          	add    $0xc740,%ax
    9994:	00 00                	add    %al,(%eax)
    9996:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
    999b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    99a0:	66 c1 e0 02          	shl    $0x2,%ax
    99a4:	66 89 c2             	mov    %ax,%dx
    99a7:	66 c1 e2 04          	shl    $0x4,%dx
    99ab:	66 01 d0             	add    %dx,%ax
    99ae:	66 05 40 c7          	add    $0xc740,%ax
    99b2:	00 00                	add    %al,(%eax)
    99b4:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
    99bb:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
    99bd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    99c2:	66 c1 e0 02          	shl    $0x2,%ax
    99c6:	66 89 c2             	mov    %ax,%dx
    99c9:	66 c1 e2 04          	shl    $0x4,%dx
    99cd:	66 01 d0             	add    %dx,%ax
    99d0:	66 05 40 c7          	add    $0xc740,%ax
    99d4:	00 00                	add    %al,(%eax)
    99d6:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    99dd:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = READY;
    99df:	67 66 8b 45 08       	mov    0x8(%di),%ax
    99e4:	66 c1 e0 02          	shl    $0x2,%ax
    99e8:	66 89 c2             	mov    %ax,%dx
    99eb:	66 c1 e2 04          	shl    $0x4,%dx
    99ef:	66 01 d0             	add    %dx,%ax
    99f2:	66 05 50 c7          	add    $0xc750,%ax
    99f6:	00 00                	add    %al,(%eax)
    99f8:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    99ff:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    9a01:	67 66 ff 75 08       	pushw  0x8(%di)
    9a06:	66 68 c0 fd          	pushw  $0xfdc0
    9a0a:	00 00                	add    %al,(%eax)
    9a0c:	66 e8 8b 09          	callw  a39b <size+0x11>
    9a10:	00 00                	add    %al,(%eax)
    9a12:	66 83 c4 08          	add    $0x8,%sp
    PCB_list[index ].eflags = 512;
    9a16:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9a1b:	66 c1 e0 02          	shl    $0x2,%ax
    9a1f:	66 89 c2             	mov    %ax,%dx
    9a22:	66 c1 e2 04          	shl    $0x4,%dx
    9a26:	66 01 d0             	add    %dx,%ax
    9a29:	66 05 50 c7          	add    $0xc750,%ax
    9a2d:	00 00                	add    %al,(%eax)
    9a2f:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    9a36:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    9a38:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9a3d:	66 c1 e0 02          	shl    $0x2,%ax
    9a41:	66 89 c2             	mov    %ax,%dx
    9a44:	66 c1 e2 04          	shl    $0x4,%dx
    9a48:	66 01 d0             	add    %dx,%ax
    9a4b:	67 66 8d 90 50 c7    	lea    -0x38b0(%bx,%si),%dx
    9a51:	00 00                	add    %al,(%eax)
    9a53:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9a58:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 0;
    9a5d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9a62:	66 c1 e0 02          	shl    $0x2,%ax
    9a66:	66 89 c2             	mov    %ax,%dx
    9a69:	66 c1 e2 04          	shl    $0x4,%dx
    9a6d:	66 01 d0             	add    %dx,%ax
    9a70:	66 05 60 c7          	add    $0xc760,%ax
    9a74:	00 00                	add    %al,(%eax)
    9a76:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    9a7c:	00 00                	add    %al,(%eax)
}
    9a7e:	66 c9                	leavew 
    9a80:	66 c3                	retw   

00009a82 <Set_PCB>:
void Set_PCB(){
    9a82:	66 55                	push   %bp
    9a84:	66 89 e5             	mov    %sp,%bp
    9a87:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    9a8b:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9a92:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    9a94:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9a9b:	00 00                	add    %al,(%eax)
    9a9d:	eb 27                	jmp    9ac6 <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    9a9f:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9aa4:	66 c1 e0 02          	shl    $0x2,%ax
    9aa8:	66 89 c2             	mov    %ax,%dx
    9aab:	66 c1 e2 04          	shl    $0x4,%dx
    9aaf:	66 01 d0             	add    %dx,%ax
    9ab2:	66 05 50 c7          	add    $0xc750,%ax
    9ab6:	00 00                	add    %al,(%eax)
    9ab8:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    9abf:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 0;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    9ac1:	67 66 ff 45 fc       	incw   -0x4(%di)
    9ac6:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    9acc:	7e d1                	jle    9a9f <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    9ace:	66 c9                	leavew 
    9ad0:	66 c3                	retw   

00009ad2 <sys_schedule>:
int sch_index;
int current_index ;
void sys_schedule(){
    9ad2:	66 55                	push   %bp
    9ad4:	66 89 e5             	mov    %sp,%bp
    int i,j;
    if(isempty(&readyqueue) != 1){
    9ad7:	66 68 c0 fd          	pushw  $0xfdc0
    9adb:	00 00                	add    %al,(%eax)
    9add:	66 e8 8a 08          	callw  a36b <stack_copy+0x35>
    9ae1:	00 00                	add    %al,(%eax)
    9ae3:	66 83 c4 04          	add    $0x4,%sp
    9ae7:	66 83 f8 01          	cmp    $0x1,%ax
    9aeb:	0f 84 e0 00 66 a1    	je     a1669bd1 <_end+0xa1659c55>
        current_index = _CurrentProg - PCB_list;
    9af1:	70 cc                	jo     9abf <Set_PCB+0x3d>
    9af3:	66 89 c2             	mov    %ax,%dx
    9af6:	66 b8 20 c7          	mov    $0xc720,%ax
    9afa:	00 00                	add    %al,(%eax)
    9afc:	66 29 c2             	sub    %ax,%dx
    9aff:	66 89 d0             	mov    %dx,%ax
    9b02:	66 c1 f8 02          	sar    $0x2,%ax
    9b06:	66 89 c2             	mov    %ax,%dx
    9b09:	66 89 d0             	mov    %dx,%ax
    9b0c:	66 01 c0             	add    %ax,%ax
    9b0f:	66 01 d0             	add    %dx,%ax
    9b12:	67 66 8d 14          	lea    (%si),%dx
    9b16:	85 00                	test   %eax,(%eax)
    9b18:	00 00                	add    %al,(%eax)
    9b1a:	00 66 01             	add    %ah,0x1(%esi)
    9b1d:	d0 66 89             	shlb   -0x77(%esi)
    9b20:	c2 66 c1             	ret    $0xc166
    9b23:	e2 08                	loop   9b2d <sys_schedule+0x5b>
    9b25:	66 01 d0             	add    %dx,%ax
    9b28:	66 89 c2             	mov    %ax,%dx
    9b2b:	66 c1 e2 10          	shl    $0x10,%dx
    9b2f:	66 01 d0             	add    %dx,%ax
    9b32:	66 f7 d8             	neg    %ax
    9b35:	66 a3 70 ff 66 a1    	mov    %ax,0xa166ff70
        if(_CurrentProg -> prg_status == RUN){
    9b3b:	70 cc                	jo     9b09 <sys_schedule+0x37>
    9b3d:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    9b42:	66 83 f8 01          	cmp    $0x1,%ax
    9b46:	75 23                	jne    9b6b <sys_schedule+0x99>
            _CurrentProg -> prg_status = READY;
    9b48:	66 a1 70 cc 67 66    	mov    0x6667cc70,%ax
    9b4e:	c7 40 38 03 00 00 00 	movl   $0x3,0x38(%eax)
            enqueue(&readyqueue,current_index);
    9b55:	66 a1 70 ff 66 50    	mov    0x5066ff70,%ax
    9b5b:	66 68 c0 fd          	pushw  $0xfdc0
    9b5f:	00 00                	add    %al,(%eax)
    9b61:	66 e8 36 08          	callw  a39b <size+0x11>
    9b65:	00 00                	add    %al,(%eax)
    9b67:	66 83 c4 08          	add    $0x8,%sp
        }
        dequeue(&readyqueue,&sch_index);
    9b6b:	66 68 64 ff          	pushw  $0xff64
    9b6f:	00 00                	add    %al,(%eax)
    9b71:	66 68 c0 fd          	pushw  $0xfdc0
    9b75:	00 00                	add    %al,(%eax)
    9b77:	66 e8 8c 08          	callw  a407 <enqueue+0x6a>
    9b7b:	00 00                	add    %al,(%eax)
    9b7d:	66 83 c4 08          	add    $0x8,%sp
        if(PCB_list[sch_index].prg_status == READY){
    9b81:	66 a1 64 ff 66 c1    	mov    0xc166ff64,%ax
    9b87:	e0 02                	loopne 9b8b <sys_schedule+0xb9>
    9b89:	66 89 c2             	mov    %ax,%dx
    9b8c:	66 c1 e2 04          	shl    $0x4,%dx
    9b90:	66 01 d0             	add    %dx,%ax
    9b93:	66 05 50 c7          	add    $0xc750,%ax
    9b97:	00 00                	add    %al,(%eax)
    9b99:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    9b9e:	66 83 f8 03          	cmp    $0x3,%ax
    9ba2:	75 2b                	jne    9bcf <sys_schedule+0xfd>
            _CurrentProg = PCB_list + sch_index;
    9ba4:	66 a1 64 ff 66 c1    	mov    0xc166ff64,%ax
    9baa:	e0 02                	loopne 9bae <sys_schedule+0xdc>
    9bac:	66 89 c2             	mov    %ax,%dx
    9baf:	66 c1 e2 04          	shl    $0x4,%dx
    9bb3:	66 01 d0             	add    %dx,%ax
    9bb6:	66 05 20 c7          	add    $0xc720,%ax
    9bba:	00 00                	add    %al,(%eax)
    9bbc:	66 a3 70 cc 66 a1    	mov    %ax,0xa166cc70
            _CurrentProg -> prg_status = RUN;
    9bc2:	70 cc                	jo     9b90 <sys_schedule+0xbe>
    9bc4:	67 66 c7 40 38 01 00 	movw   $0x1,0x38(%bx,%si)
    9bcb:	00 00                	add    %al,(%eax)
            return;
    9bcd:	eb 0a                	jmp    9bd9 <sys_schedule+0x107>
        }
    }
    _CurrentProg = PCB_list ;
    9bcf:	66 c7 06 70 cc       	movw   $0xcc70,(%esi)
    9bd4:	20 c7                	and    %al,%bh
    9bd6:	00 00                	add    %al,(%eax)
    return;
    9bd8:	90                   	nop
    
}
    9bd9:	66 c9                	leavew 
    9bdb:	66 c3                	retw   

00009bdd <sys_exit>:
void sys_exit(){
    9bdd:	66 55                	push   %bp
    9bdf:	66 89 e5             	mov    %sp,%bp
    9be2:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    9be6:	fa                   	cli    
    int index = _CurrentProg - PCB_list;
    9be7:	66 a1 70 cc 66 89    	mov    0x8966cc70,%ax
    9bed:	c2 66 b8             	ret    $0xb866
    9bf0:	20 c7                	and    %al,%bh
    9bf2:	00 00                	add    %al,(%eax)
    9bf4:	66 29 c2             	sub    %ax,%dx
    9bf7:	66 89 d0             	mov    %dx,%ax
    9bfa:	66 c1 f8 02          	sar    $0x2,%ax
    9bfe:	66 89 c2             	mov    %ax,%dx
    9c01:	66 89 d0             	mov    %dx,%ax
    9c04:	66 01 c0             	add    %ax,%ax
    9c07:	66 01 d0             	add    %dx,%ax
    9c0a:	67 66 8d 14          	lea    (%si),%dx
    9c0e:	85 00                	test   %eax,(%eax)
    9c10:	00 00                	add    %al,(%eax)
    9c12:	00 66 01             	add    %ah,0x1(%esi)
    9c15:	d0 66 89             	shlb   -0x77(%esi)
    9c18:	c2 66 c1             	ret    $0xc166
    9c1b:	e2 08                	loop   9c25 <sys_exit+0x48>
    9c1d:	66 01 d0             	add    %dx,%ax
    9c20:	66 89 c2             	mov    %ax,%dx
    9c23:	66 c1 e2 10          	shl    $0x10,%dx
    9c27:	66 01 d0             	add    %dx,%ax
    9c2a:	66 f7 d8             	neg    %ax
    9c2d:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    rmele(&readyqueue,index);
    9c32:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9c37:	66 68 c0 fd          	pushw  $0xfdc0
    9c3b:	00 00                	add    %al,(%eax)
    9c3d:	66 e8 6a 08          	callw  a4ab <init_queue+0x30>
    9c41:	00 00                	add    %al,(%eax)
    9c43:	66 83 c4 08          	add    $0x8,%sp
    _CurrentProg -> prg_status = EXIT;
    9c47:	66 a1 70 cc 67 66    	mov    0x6667cc70,%ax
    9c4d:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    __asm__("sti\n");
    9c54:	fb                   	sti    
}
    9c55:	66 c9                	leavew 
    9c57:	66 c3                	retw   

00009c59 <sys_bolocked>:



int queuesize,tmp;//一定要是全局，否则dequeue无法将tmp修改
void sys_bolocked(int index){
    9c59:	66 55                	push   %bp
    9c5b:	66 89 e5             	mov    %sp,%bp
    9c5e:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    9c62:	fa                   	cli    
    PCB_list[index].prg_status = BLOCKED;
    9c63:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9c68:	66 c1 e0 02          	shl    $0x2,%ax
    9c6c:	66 89 c2             	mov    %ax,%dx
    9c6f:	66 c1 e2 04          	shl    $0x4,%dx
    9c73:	66 01 d0             	add    %dx,%ax
    9c76:	66 05 50 c7          	add    $0xc750,%ax
    9c7a:	00 00                	add    %al,(%eax)
    9c7c:	67 66 c7 40 08 02 00 	movw   $0x2,0x8(%bx,%si)
    9c83:	00 00                	add    %al,(%eax)
    enqueue(&blockqueue,index);
    9c85:	67 66 ff 75 08       	pushw  0x8(%di)
    9c8a:	66 68 80 c5          	pushw  $0xc580
    9c8e:	00 00                	add    %al,(%eax)
    9c90:	66 e8 07 07          	callw  a39b <size+0x11>
    9c94:	00 00                	add    %al,(%eax)
    9c96:	66 83 c4 08          	add    $0x8,%sp
    queuesize = size(&readyqueue);
    9c9a:	66 68 c0 fd          	pushw  $0xfdc0
    9c9e:	00 00                	add    %al,(%eax)
    9ca0:	66 e8 e4 06          	callw  a388 <isempty+0x1b>
    9ca4:	00 00                	add    %al,(%eax)
    9ca6:	66 83 c4 04          	add    $0x4,%sp
    9caa:	66 a3 60 ff 67 66    	mov    %ax,0x6667ff60
    int i = 0;
    9cb0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    9cb7:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9cbe:	00 00                	add    %al,(%eax)
    9cc0:	eb 3c                	jmp    9cfe <sys_bolocked+0xa5>
        dequeue(&readyqueue,&tmp);
    9cc2:	66 68 5c ff          	pushw  $0xff5c
    9cc6:	00 00                	add    %al,(%eax)
    9cc8:	66 68 c0 fd          	pushw  $0xfdc0
    9ccc:	00 00                	add    %al,(%eax)
    9cce:	66 e8 35 07          	callw  a407 <enqueue+0x6a>
    9cd2:	00 00                	add    %al,(%eax)
    9cd4:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    9cd8:	66 a1 5c ff 67 66    	mov    0x6667ff5c,%ax
    9cde:	39 45 08             	cmp    %eax,0x8(%ebp)
    9ce1:	74 16                	je     9cf9 <sys_bolocked+0xa0>
            enqueue(&readyqueue,tmp);
    9ce3:	66 a1 5c ff 66 50    	mov    0x5066ff5c,%ax
    9ce9:	66 68 c0 fd          	pushw  $0xfdc0
    9ced:	00 00                	add    %al,(%eax)
    9cef:	66 e8 a8 06          	callw  a39b <size+0x11>
    9cf3:	00 00                	add    %al,(%eax)
    9cf5:	66 83 c4 08          	add    $0x8,%sp
    __asm__("cli\n");
    PCB_list[index].prg_status = BLOCKED;
    enqueue(&blockqueue,index);
    queuesize = size(&readyqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    9cf9:	67 66 ff 45 fc       	incw   -0x4(%di)
    9cfe:	66 a1 60 ff 67 66    	mov    0x6667ff60,%ax
    9d04:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    9d07:	7c b9                	jl     9cc2 <sys_bolocked+0x69>
        dequeue(&readyqueue,&tmp);
        if(index != tmp){
            enqueue(&readyqueue,tmp);
        }
    }
    __asm__("sti\n");
    9d09:	fb                   	sti    
}
    9d0a:	66 c9                	leavew 
    9d0c:	66 c3                	retw   

00009d0e <sys_wakeup>:
void sys_wakeup(int index){
    9d0e:	66 55                	push   %bp
    9d10:	66 89 e5             	mov    %sp,%bp
    9d13:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    9d17:	fa                   	cli    
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    9d18:	66 68 80 c5          	pushw  $0xc580
    9d1c:	00 00                	add    %al,(%eax)
    9d1e:	66 e8 66 06          	callw  a388 <isempty+0x1b>
    9d22:	00 00                	add    %al,(%eax)
    9d24:	66 83 c4 04          	add    $0x4,%sp
    9d28:	66 a3 60 ff 67 66    	mov    %ax,0x6667ff60
    int i = 0;
    9d2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    9d35:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9d3c:	00 00                	add    %al,(%eax)
    9d3e:	eb 3c                	jmp    9d7c <sys_wakeup+0x6e>
        dequeue(&blockqueue,&tmp);
    9d40:	66 68 5c ff          	pushw  $0xff5c
    9d44:	00 00                	add    %al,(%eax)
    9d46:	66 68 80 c5          	pushw  $0xc580
    9d4a:	00 00                	add    %al,(%eax)
    9d4c:	66 e8 b7 06          	callw  a407 <enqueue+0x6a>
    9d50:	00 00                	add    %al,(%eax)
    9d52:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    9d56:	66 a1 5c ff 67 66    	mov    0x6667ff5c,%ax
    9d5c:	39 45 08             	cmp    %eax,0x8(%ebp)
    9d5f:	74 16                	je     9d77 <sys_wakeup+0x69>
            enqueue(&blockqueue,tmp);
    9d61:	66 a1 5c ff 66 50    	mov    0x5066ff5c,%ax
    9d67:	66 68 80 c5          	pushw  $0xc580
    9d6b:	00 00                	add    %al,(%eax)
    9d6d:	66 e8 2a 06          	callw  a39b <size+0x11>
    9d71:	00 00                	add    %al,(%eax)
    9d73:	66 83 c4 08          	add    $0x8,%sp
void sys_wakeup(int index){
    __asm__("cli\n");
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    9d77:	67 66 ff 45 fc       	incw   -0x4(%di)
    9d7c:	66 a1 60 ff 67 66    	mov    0x6667ff60,%ax
    9d82:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    9d85:	7c b9                	jl     9d40 <sys_wakeup+0x32>
        dequeue(&blockqueue,&tmp);
        if(index != tmp){
            enqueue(&blockqueue,tmp);
        }
    }
    PCB_list[index].prg_status = READY;
    9d87:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9d8c:	66 c1 e0 02          	shl    $0x2,%ax
    9d90:	66 89 c2             	mov    %ax,%dx
    9d93:	66 c1 e2 04          	shl    $0x4,%dx
    9d97:	66 01 d0             	add    %dx,%ax
    9d9a:	66 05 50 c7          	add    $0xc750,%ax
    9d9e:	00 00                	add    %al,(%eax)
    9da0:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    9da7:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    9da9:	67 66 ff 75 08       	pushw  0x8(%di)
    9dae:	66 68 c0 fd          	pushw  $0xfdc0
    9db2:	00 00                	add    %al,(%eax)
    9db4:	66 e8 e3 05          	callw  a39b <size+0x11>
    9db8:	00 00                	add    %al,(%eax)
    9dba:	66 83 c4 08          	add    $0x8,%sp
    __asm__("sti\n");
    9dbe:	fb                   	sti    
}
    9dbf:	66 c9                	leavew 
    9dc1:	66 c3                	retw   

00009dc3 <sys_run>:
void sys_run(){
    9dc3:	66 55                	push   %bp
    9dc5:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    9dc8:	66 a1 70 cc 67 66    	mov    0x6667cc70,%ax
    9dce:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    9dd5:	66 5d                	pop    %bp
    9dd7:	66 c3                	retw   

00009dd9 <do_fork>:

int do_fork(){
    9dd9:	66 55                	push   %bp
    9ddb:	66 89 e5             	mov    %sp,%bp
    9dde:	66 83 ec 08          	sub    $0x8,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    9de2:	67 66 c7 45 fc 64 c7 	movw   $0xc764,-0x4(%di)
    9de9:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN )    fork_prg = fork_prg + 1;//应该增加used位，防止被覆盖
    9deb:	eb 06                	jmp    9df3 <do_fork+0x1a>
    9ded:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    9df3:	67 66 81 7d fc 70 cc 	cmpw   $0xcc70,-0x4(%di)
    9dfa:	00 00                	add    %al,(%eax)
    9dfc:	73 10                	jae    9e0e <do_fork+0x35>
    9dfe:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9e03:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    9e08:	66 83 f8 01          	cmp    $0x1,%ax
    9e0c:	74 df                	je     9ded <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    9e0e:	67 66 81 7d fc 2c cc 	cmpw   $0xcc2c,-0x4(%di)
    9e15:	00 00                	add    %al,(%eax)
    9e17:	76 0f                	jbe    9e28 <do_fork+0x4f>
    9e19:	66 a1 70 cc 67 66    	mov    0x6667cc70,%ax
    9e1f:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    9e25:	e9 42 02 66 e8       	jmp    e866a06c <_end+0xe865a0f0>
    else{
        _Schedule_once();
    9e2a:	57                   	push   %edi
    9e2b:	e7 ff                	out    %eax,$0xff
    9e2d:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    9e30:	ec                   	in     (%dx),%al
    9e31:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    9e32:	66 a1 70 cc 67 66    	mov    0x6667cc70,%ax
    9e38:	ff 75 fc             	pushl  -0x4(%ebp)
    9e3b:	66 50                	push   %ax
    9e3d:	66 e8 e8 03          	callw  a229 <counter+0x64>
    9e41:	00 00                	add    %al,(%eax)
    9e43:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    9e47:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    9e4b:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9e50:	66 b8 20 c7          	mov    $0xc720,%ax
    9e54:	00 00                	add    %al,(%eax)
    9e56:	66 29 c2             	sub    %ax,%dx
    9e59:	66 89 d0             	mov    %dx,%ax
    9e5c:	66 c1 f8 02          	sar    $0x2,%ax
    9e60:	66 89 c2             	mov    %ax,%dx
    9e63:	66 89 d0             	mov    %dx,%ax
    9e66:	66 01 c0             	add    %ax,%ax
    9e69:	66 01 d0             	add    %dx,%ax
    9e6c:	67 66 8d 14          	lea    (%si),%dx
    9e70:	85 00                	test   %eax,(%eax)
    9e72:	00 00                	add    %al,(%eax)
    9e74:	00 66 01             	add    %ah,0x1(%esi)
    9e77:	d0 66 89             	shlb   -0x77(%esi)
    9e7a:	c2 66 c1             	ret    $0xc166
    9e7d:	e2 08                	loop   9e87 <do_fork+0xae>
    9e7f:	66 01 d0             	add    %dx,%ax
    9e82:	66 89 c2             	mov    %ax,%dx
    9e85:	66 c1 e2 10          	shl    $0x10,%dx
    9e89:	66 01 d0             	add    %dx,%ax
    9e8c:	66 f7 d8             	neg    %ax
    9e8f:	66 89 c2             	mov    %ax,%dx
    9e92:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9e97:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    9e9c:	66 a1 70 cc 66 89    	mov    0x8966cc70,%ax
    9ea2:	c2 66 b8             	ret    $0xb866
    9ea5:	20 c7                	and    %al,%bh
    9ea7:	00 00                	add    %al,(%eax)
    9ea9:	66 29 c2             	sub    %ax,%dx
    9eac:	66 89 d0             	mov    %dx,%ax
    9eaf:	66 c1 f8 02          	sar    $0x2,%ax
    9eb3:	66 89 c2             	mov    %ax,%dx
    9eb6:	66 89 d0             	mov    %dx,%ax
    9eb9:	66 01 c0             	add    %ax,%ax
    9ebc:	66 01 d0             	add    %dx,%ax
    9ebf:	67 66 8d 14          	lea    (%si),%dx
    9ec3:	85 00                	test   %eax,(%eax)
    9ec5:	00 00                	add    %al,(%eax)
    9ec7:	00 66 01             	add    %ah,0x1(%esi)
    9eca:	d0 66 89             	shlb   -0x77(%esi)
    9ecd:	c2 66 c1             	ret    $0xc166
    9ed0:	e2 08                	loop   9eda <do_fork+0x101>
    9ed2:	66 01 d0             	add    %dx,%ax
    9ed5:	66 89 c2             	mov    %ax,%dx
    9ed8:	66 c1 e2 10          	shl    $0x10,%dx
    9edc:	66 01 d0             	add    %dx,%ax
    9edf:	66 f7 d8             	neg    %ax
    9ee2:	66 89 c2             	mov    %ax,%dx
    9ee5:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9eea:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    9eef:	66 a1 70 cc 67 66    	mov    0x6667cc70,%ax
    9ef5:	8b 50 20             	mov    0x20(%eax),%edx
    9ef8:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9efd:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    9f02:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9f07:	66 b8 20 c7          	mov    $0xc720,%ax
    9f0b:	00 00                	add    %al,(%eax)
    9f0d:	66 29 c2             	sub    %ax,%dx
    9f10:	66 89 d0             	mov    %dx,%ax
    9f13:	66 c1 f8 02          	sar    $0x2,%ax
    9f17:	66 89 c2             	mov    %ax,%dx
    9f1a:	66 89 d0             	mov    %dx,%ax
    9f1d:	66 01 c0             	add    %ax,%ax
    9f20:	66 01 d0             	add    %dx,%ax
    9f23:	67 66 8d 14          	lea    (%si),%dx
    9f27:	85 00                	test   %eax,(%eax)
    9f29:	00 00                	add    %al,(%eax)
    9f2b:	00 66 01             	add    %ah,0x1(%esi)
    9f2e:	d0 66 89             	shlb   -0x77(%esi)
    9f31:	c2 66 c1             	ret    $0xc166
    9f34:	e2 08                	loop   9f3e <do_fork+0x165>
    9f36:	66 01 d0             	add    %dx,%ax
    9f39:	66 89 c2             	mov    %ax,%dx
    9f3c:	66 c1 e2 10          	shl    $0x10,%dx
    9f40:	66 01 d0             	add    %dx,%ax
    9f43:	66 f7 d8             	neg    %ax
    9f46:	66 83 c0 02          	add    $0x2,%ax
    9f4a:	66 c1 e0 0c          	shl    $0xc,%ax
    9f4e:	66 89 c2             	mov    %ax,%dx
    9f51:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9f56:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    9f5b:	66 a1 70 cc 67 66    	mov    0x6667cc70,%ax
    9f61:	8b 50 30             	mov    0x30(%eax),%edx
    9f64:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9f69:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    9f6e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9f73:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    9f7a:	00 00                	add    %al,(%eax)
        
        int index = fork_prg - PCB_list;
    9f7c:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9f81:	66 b8 20 c7          	mov    $0xc720,%ax
    9f85:	00 00                	add    %al,(%eax)
    9f87:	66 29 c2             	sub    %ax,%dx
    9f8a:	66 89 d0             	mov    %dx,%ax
    9f8d:	66 c1 f8 02          	sar    $0x2,%ax
    9f91:	66 89 c2             	mov    %ax,%dx
    9f94:	66 89 d0             	mov    %dx,%ax
    9f97:	66 01 c0             	add    %ax,%ax
    9f9a:	66 01 d0             	add    %dx,%ax
    9f9d:	67 66 8d 14          	lea    (%si),%dx
    9fa1:	85 00                	test   %eax,(%eax)
    9fa3:	00 00                	add    %al,(%eax)
    9fa5:	00 66 01             	add    %ah,0x1(%esi)
    9fa8:	d0 66 89             	shlb   -0x77(%esi)
    9fab:	c2 66 c1             	ret    $0xc166
    9fae:	e2 08                	loop   9fb8 <do_fork+0x1df>
    9fb0:	66 01 d0             	add    %dx,%ax
    9fb3:	66 89 c2             	mov    %ax,%dx
    9fb6:	66 c1 e2 10          	shl    $0x10,%dx
    9fba:	66 01 d0             	add    %dx,%ax
    9fbd:	66 f7 d8             	neg    %ax
    9fc0:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
        __asm__("sub $6,%esp");
    9fc5:	66 83 ec 06          	sub    $0x6,%sp
        enqueue(&readyqueue,index); 
    9fc9:	67 66 ff 75 f8       	pushw  -0x8(%di)
    9fce:	66 68 c0 fd          	pushw  $0xfdc0
    9fd2:	00 00                	add    %al,(%eax)
    9fd4:	66 e8 c3 03          	callw  a39b <size+0x11>
    9fd8:	00 00                	add    %al,(%eax)
    9fda:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    9fde:	66 83 c4 06          	add    $0x6,%sp
        _Schedule_once();
    9fe2:	66 e8 9d e5          	callw  8583 <S+0x14>
    9fe6:	ff                   	(bad)  
    9fe7:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    9fea:	ec                   	in     (%dx),%al
    9feb:	06                   	push   %es
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    9fec:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9ff1:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    9ff6:	66 a1 70 cc 67 66    	mov    0x6667cc70,%ax
    9ffc:	8b 50 28             	mov    0x28(%eax),%edx
    9fff:	66 a1 70 cc 67 66    	mov    0x6667cc70,%ax
    a005:	8b 40 24             	mov    0x24(%eax),%eax
    a008:	66 51                	push   %cx
    a00a:	66 52                	push   %dx
    a00c:	66 50                	push   %ax
    a00e:	66 e8 61 e4          	callw  8473 <Message31+0x4>
    a012:	ff                   	(bad)  
    a013:	ff 66 83             	jmp    *-0x7d(%esi)
    a016:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
        __asm__("add $6,%esp");
    a019:	83 c4 06             	add    $0x6,%esp
        fork_prg -> ip = _CurrentProg -> ip;
    a01c:	66 a1 70 cc 67 66    	mov    0x6667cc70,%ax
    a022:	8b 50 2c             	mov    0x2c(%eax),%edx
    a025:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    a02a:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    a02f:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    a034:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    a03a:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    a03c:	66 a1 70 cc 67 66    	mov    0x6667cc70,%ax
    a042:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    a045:	75 08                	jne    a04f <do_fork+0x276>
            return 0;
    a047:	66 b8 00 00          	mov    $0x0,%ax
    a04b:	00 00                	add    %al,(%eax)
    a04d:	eb 1b                	jmp    a06a <do_fork+0x291>
        }
        _CurrentProg -> eax = _CurrentProg -> id;
    a04f:	66 a1 70 cc 66 8b    	mov    0x8b66cc70,%ax
    a055:	16                   	push   %ss
    a056:	70 cc                	jo     a024 <do_fork+0x24b>
    a058:	67 66 8b 52 3c       	mov    0x3c(%bp,%si),%dx
    a05d:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    a061:	66 a1 70 cc 67 66    	mov    0x6667cc70,%ax
    a067:	8b 00                	mov    (%eax),%eax
    a069:	90                   	nop
    }
}
    a06a:	66 c9                	leavew 
    a06c:	66 c3                	retw   

0000a06e <sys_exit_fork>:
void sys_exit_fork(char ch){
    a06e:	66 55                	push   %bp
    a070:	66 89 e5             	mov    %sp,%bp
    a073:	66 83 ec 0c          	sub    $0xc,%sp
    a077:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a07c:	67 88 45 f4          	mov    %al,-0xc(%di)
    int current_id = _CurrentProg - PCB_list;
    a080:	66 a1 70 cc 66 89    	mov    0x8966cc70,%ax
    a086:	c2 66 b8             	ret    $0xb866
    a089:	20 c7                	and    %al,%bh
    a08b:	00 00                	add    %al,(%eax)
    a08d:	66 29 c2             	sub    %ax,%dx
    a090:	66 89 d0             	mov    %dx,%ax
    a093:	66 c1 f8 02          	sar    $0x2,%ax
    a097:	66 89 c2             	mov    %ax,%dx
    a09a:	66 89 d0             	mov    %dx,%ax
    a09d:	66 01 c0             	add    %ax,%ax
    a0a0:	66 01 d0             	add    %dx,%ax
    a0a3:	67 66 8d 14          	lea    (%si),%dx
    a0a7:	85 00                	test   %eax,(%eax)
    a0a9:	00 00                	add    %al,(%eax)
    a0ab:	00 66 01             	add    %ah,0x1(%esi)
    a0ae:	d0 66 89             	shlb   -0x77(%esi)
    a0b1:	c2 66 c1             	ret    $0xc166
    a0b4:	e2 08                	loop   a0be <sys_exit_fork+0x50>
    a0b6:	66 01 d0             	add    %dx,%ax
    a0b9:	66 89 c2             	mov    %ax,%dx
    a0bc:	66 c1 e2 10          	shl    $0x10,%dx
    a0c0:	66 01 d0             	add    %dx,%ax
    a0c3:	66 f7 d8             	neg    %ax
    a0c6:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    int index = _CurrentProg -> fid;
    a0cb:	66 a1 70 cc 67 66    	mov    0x6667cc70,%ax
    a0d1:	8b 40 40             	mov    0x40(%eax),%eax
    a0d4:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    sys_wakeup(index);
    a0d9:	67 66 ff 75 f8       	pushw  -0x8(%di)
    a0de:	66 e8 2a fc          	callw  9d0c <sys_bolocked+0xb3>
    a0e2:	ff                   	(bad)  
    a0e3:	ff 66 83             	jmp    *-0x7d(%esi)
    a0e6:	c4 04 66             	les    (%esi,%eiz,2),%eax
    PCB_list[_CurrentProg -> fid].eax = ch;
    a0e9:	a1 70 cc 67 66       	mov    0x6667cc70,%eax
    a0ee:	8b 40 40             	mov    0x40(%eax),%eax
    a0f1:	67 66 0f be 55 f4    	movsbw -0xc(%di),%dx
    a0f7:	66 c1 e0 02          	shl    $0x2,%ax
    a0fb:	66 89 c1             	mov    %ax,%cx
    a0fe:	66 c1 e1 04          	shl    $0x4,%cx
    a102:	66 01 c8             	add    %cx,%ax
    a105:	66 05 20 c7          	add    $0xc720,%ax
    a109:	00 00                	add    %al,(%eax)
    a10b:	67 66 89 10          	mov    %dx,(%bx,%si)
    _CurrentProg -> prg_status = EXIT;
    a10f:	66 a1 70 cc 67 66    	mov    0x6667cc70,%ax
    a115:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    rmele(&readyqueue,current_id);
    a11c:	67 66 ff 75 fc       	pushw  -0x4(%di)
    a121:	66 68 c0 fd          	pushw  $0xfdc0
    a125:	00 00                	add    %al,(%eax)
    a127:	66 e8 80 03          	callw  a4ab <init_queue+0x30>
    a12b:	00 00                	add    %al,(%eax)
    a12d:	66 83 c4 08          	add    $0x8,%sp
    _Schedule();
    a131:	66 e8 64 e4          	callw  8599 <_fork_user+0x9>
    a135:	ff                   	(bad)  
    a136:	ff 66 c9             	jmp    *-0x37(%esi)
}
    a139:	66 c3                	retw   

0000a13b <sys_wait>:
int sys_wait(){
    a13b:	66 55                	push   %bp
    a13d:	66 89 e5             	mov    %sp,%bp
    a140:	66 83 ec 04          	sub    $0x4,%sp
    int index = _CurrentProg - PCB_list;
    a144:	66 a1 70 cc 66 89    	mov    0x8966cc70,%ax
    a14a:	c2 66 b8             	ret    $0xb866
    a14d:	20 c7                	and    %al,%bh
    a14f:	00 00                	add    %al,(%eax)
    a151:	66 29 c2             	sub    %ax,%dx
    a154:	66 89 d0             	mov    %dx,%ax
    a157:	66 c1 f8 02          	sar    $0x2,%ax
    a15b:	66 89 c2             	mov    %ax,%dx
    a15e:	66 89 d0             	mov    %dx,%ax
    a161:	66 01 c0             	add    %ax,%ax
    a164:	66 01 d0             	add    %dx,%ax
    a167:	67 66 8d 14          	lea    (%si),%dx
    a16b:	85 00                	test   %eax,(%eax)
    a16d:	00 00                	add    %al,(%eax)
    a16f:	00 66 01             	add    %ah,0x1(%esi)
    a172:	d0 66 89             	shlb   -0x77(%esi)
    a175:	c2 66 c1             	ret    $0xc166
    a178:	e2 08                	loop   a182 <sys_wait+0x47>
    a17a:	66 01 d0             	add    %dx,%ax
    a17d:	66 89 c2             	mov    %ax,%dx
    a180:	66 c1 e2 10          	shl    $0x10,%dx
    a184:	66 01 d0             	add    %dx,%ax
    a187:	66 f7 d8             	neg    %ax
    a18a:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_bolocked(index);
    a18f:	67 66 ff 75 fc       	pushw  -0x4(%di)
    a194:	66 e8 bf fa          	callw  9c57 <sys_exit+0x7a>
    a198:	ff                   	(bad)  
    a199:	ff 66 83             	jmp    *-0x7d(%esi)
    a19c:	c4 04 66             	les    (%esi,%eiz,2),%eax
    _Schedule();
    a19f:	e8 f7 e3 ff ff       	call   859b <_Schedule>
    return _CurrentProg -> eax;
    a1a4:	66 a1 70 cc 67 66    	mov    0x6667cc70,%ax
    a1aa:	8b 00                	mov    (%eax),%eax
}
    a1ac:	66 c9                	leavew 
    a1ae:	66 c3                	retw   

0000a1b0 <thread_join>:
void thread_join(){
    a1b0:	66 55                	push   %bp
    a1b2:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    a1b5:	90                   	nop
    a1b6:	66 e8 09 00          	callw  a1c3 <thread_join+0x13>
    a1ba:	00 00                	add    %al,(%eax)
    a1bc:	66 85 c0             	test   %ax,%ax
    a1bf:	75 f5                	jne    a1b6 <thread_join+0x6>
    }
}
    a1c1:	66 5d                	pop    %bp
    a1c3:	66 c3                	retw   

0000a1c5 <counter>:
int counter(){
    a1c5:	66 55                	push   %bp
    a1c7:	66 89 e5             	mov    %sp,%bp
    a1ca:	66 83 ec 08          	sub    $0x8,%sp
    __asm__("cli\n");
    a1ce:	fa                   	cli    
    int i = 0;
    a1cf:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    a1d6:	00 00                	add    %al,(%eax)
    int count = 0;
    a1d8:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    a1df:	00 00                	add    %al,(%eax)
    for(i = 1;i < PCB_NUMMER;i ++){
    a1e1:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    a1e8:	00 00                	add    %al,(%eax)
    a1ea:	eb 2d                	jmp    a219 <counter+0x54>
        if(PCB_list[i].prg_status != EXIT){
    a1ec:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    a1f1:	66 c1 e0 02          	shl    $0x2,%ax
    a1f5:	66 89 c2             	mov    %ax,%dx
    a1f8:	66 c1 e2 04          	shl    $0x4,%dx
    a1fc:	66 01 d0             	add    %dx,%ax
    a1ff:	66 05 50 c7          	add    $0xc750,%ax
    a203:	00 00                	add    %al,(%eax)
    a205:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a20a:	66 85 c0             	test   %ax,%ax
    a20d:	74 05                	je     a214 <counter+0x4f>
            count ++;
    a20f:	67 66 ff 45 f8       	incw   -0x8(%di)
}
int counter(){
    __asm__("cli\n");
    int i = 0;
    int count = 0;
    for(i = 1;i < PCB_NUMMER;i ++){
    a214:	67 66 ff 45 fc       	incw   -0x4(%di)
    a219:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    a21f:	7e cb                	jle    a1ec <counter+0x27>
        if(PCB_list[i].prg_status != EXIT){
            count ++;
        }
    }
    __asm__("sti\n");
    a221:	fb                   	sti    
    return count;
    a222:	67 66 8b 45 f8       	mov    -0x8(%di),%ax

}
    a227:	66 c9                	leavew 
    a229:	66 c3                	retw   

0000a22b <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    a22b:	66 55                	push   %bp
    a22d:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    a230:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a235:	67 66 8b 10          	mov    (%bx,%si),%dx
    a239:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a23e:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    a242:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a247:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    a24c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a251:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    a256:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a25b:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    a260:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a265:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    a26a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a26f:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    a274:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a279:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    a27e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a283:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    a288:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a28d:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    a292:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a297:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    a29c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a2a1:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    a2a6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a2ab:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    a2b0:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a2b5:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    a2ba:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a2bf:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    a2c4:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a2c9:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    a2ce:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a2d3:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    a2d8:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a2dd:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    a2e2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a2e7:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    a2ec:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a2f1:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    a2f6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a2fb:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    a300:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a305:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    a30a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a30f:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    a314:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a319:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    a31e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a323:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    a328:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a32d:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    a332:	66 5d                	pop    %bp
    a334:	66 c3                	retw   

0000a336 <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    a336:	66 55                	push   %bp
    a338:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    a33b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a340:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    a345:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a34a:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    a34f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a354:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    a359:	66 51                	push   %cx
    a35b:	66 52                	push   %dx
    a35d:	66 50                	push   %ax
    a35f:	66 e8 10 e1          	callw  8473 <Message31+0x4>
    a363:	ff                   	(bad)  
    a364:	ff 66 83             	jmp    *-0x7d(%esi)
    a367:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    a36a:	c9                   	leave  
    a36b:	66 c3                	retw   

0000a36d <isempty>:
int isempty(struct Queue *queue){
    a36d:	66 55                	push   %bp
    a36f:	66 89 e5             	mov    %sp,%bp
    
    return (queue -> size == 0);
    a372:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a377:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a37c:	66 85 c0             	test   %ax,%ax
    a37f:	0f 94 c0             	sete   %al
    a382:	66 0f b6 c0          	movzbw %al,%ax

}
    a386:	66 5d                	pop    %bp
    a388:	66 c3                	retw   

0000a38a <size>:
int size(struct Queue *queue){
    a38a:	66 55                	push   %bp
    a38c:	66 89 e5             	mov    %sp,%bp
    return queue -> size ;
    a38f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a394:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
}
    a399:	66 5d                	pop    %bp
    a39b:	66 c3                	retw   

0000a39d <enqueue>:
void enqueue(struct Queue *queue,int data){
    a39d:	66 55                	push   %bp
    a39f:	66 89 e5             	mov    %sp,%bp

    if(queue -> size >= MAX){
    a3a2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a3a7:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a3ac:	66 83 f8 63          	cmp    $0x63,%ax
    a3b0:	7e 02                	jle    a3b4 <enqueue+0x17>
        return;
    a3b2:	eb 51                	jmp    a405 <enqueue+0x68>
    }
    queue -> size ++;
    a3b4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a3b9:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a3be:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    a3c3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a3c8:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    queue -> tail = (queue -> tail + 1) % MAX;
    a3cd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a3d2:	67 66 8b 00          	mov    (%bx,%si),%ax
    a3d6:	66 40                	inc    %ax
    a3d8:	66 b9 64 00          	mov    $0x64,%cx
    a3dc:	00 00                	add    %al,(%eax)
    a3de:	66 99                	cwtd   
    a3e0:	66 f7 f9             	idiv   %cx
    a3e3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a3e8:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> array[queue -> tail] = data;
    a3ec:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a3f1:	67 66 8b 10          	mov    (%bx,%si),%dx
    a3f5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a3fa:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    a3ff:	67 66 89 4c 90       	mov    %cx,-0x70(%si)
    a404:	0c 66                	or     $0x66,%al

}
    a406:	5d                   	pop    %ebp
    a407:	66 c3                	retw   

0000a409 <dequeue>:
void dequeue(struct Queue *queue,int * data){
    a409:	66 55                	push   %bp
    a40b:	66 89 e5             	mov    %sp,%bp

    if(queue -> size <= 0){
    a40e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a413:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a418:	66 85 c0             	test   %ax,%ax
    a41b:	7f 02                	jg     a41f <dequeue+0x16>
        return;
    a41d:	eb 58                	jmp    a477 <dequeue+0x6e>
    }
    queue -> size --;
    a41f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a424:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a429:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    a42e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a433:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    *data = queue -> array[queue -> head];
    a438:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a43d:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    a442:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a447:	67 66 8b 54 90       	mov    -0x70(%si),%dx
    a44c:	0c 67                	or     $0x67,%al
    a44e:	66 8b 45 0c          	mov    0xc(%ebp),%ax
    a452:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> head = (queue -> head + 1) % MAX;
    a456:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a45b:	67 66 8b 40 04       	mov    0x4(%bx,%si),%ax
    a460:	66 40                	inc    %ax
    a462:	66 b9 64 00          	mov    $0x64,%cx
    a466:	00 00                	add    %al,(%eax)
    a468:	66 99                	cwtd   
    a46a:	66 f7 f9             	idiv   %cx
    a46d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a472:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)

}
    a477:	66 5d                	pop    %bp
    a479:	66 c3                	retw   

0000a47b <init_queue>:
void init_queue(struct Queue *queue){
    a47b:	66 55                	push   %bp
    a47d:	66 89 e5             	mov    %sp,%bp
    queue -> size = 0;
    a480:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a485:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    a48c:	00 00                	add    %al,(%eax)
    queue -> tail = -1;
    a48e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a493:	67 66 c7 00 ff ff    	movw   $0xffff,(%bx,%si)
    a499:	ff                   	(bad)  
    a49a:	ff 67 66             	jmp    *0x66(%edi)
    queue -> head = 0;
    a49d:	8b 45 08             	mov    0x8(%ebp),%eax
    a4a0:	67 66 c7 40 04 00 00 	movw   $0x0,0x4(%bx,%si)
    a4a7:	00 00                	add    %al,(%eax)
}
    a4a9:	66 5d                	pop    %bp
    a4ab:	66 c3                	retw   

0000a4ad <rmele>:
int rm_tmp;
int ii;
void rmele(struct Queue *queue,int data){
    a4ad:	66 55                	push   %bp
    a4af:	66 89 e5             	mov    %sp,%bp
    a4b2:	66 83 ec 04          	sub    $0x4,%sp
    int size_of_rmqueue= size(queue);
    a4b6:	67 66 ff 75 08       	pushw  0x8(%di)
    a4bb:	66 e8 c9 fe          	callw  a388 <isempty+0x1b>
    a4bf:	ff                   	(bad)  
    a4c0:	ff 66 83             	jmp    *-0x7d(%esi)
    a4c3:	c4 04 67             	les    (%edi,%eiz,2),%eax
    a4c6:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    a4ca:	66 c7 06 6c ff       	movw   $0xff6c,(%esi)
    a4cf:	00 00                	add    %al,(%eax)
    a4d1:	00 00                	add    %al,(%eax)
    a4d3:	eb 3f                	jmp    a514 <rmele+0x67>
        dequeue(queue,&rm_tmp);
    a4d5:	66 68 74 ff          	pushw  $0xff74
    a4d9:	00 00                	add    %al,(%eax)
    a4db:	67 66 ff 75 08       	pushw  0x8(%di)
    a4e0:	66 e8 23 ff          	callw  a407 <enqueue+0x6a>
    a4e4:	ff                   	(bad)  
    a4e5:	ff 66 83             	jmp    *-0x7d(%esi)
    a4e8:	c4 08                	les    (%eax),%ecx
        if(rm_tmp != data){
    a4ea:	66 a1 74 ff 67 66    	mov    0x6667ff74,%ax
    a4f0:	3b 45 0c             	cmp    0xc(%ebp),%eax
    a4f3:	74 15                	je     a50a <rmele+0x5d>
            enqueue(queue,rm_tmp);
    a4f5:	66 a1 74 ff 66 50    	mov    0x5066ff74,%ax
    a4fb:	67 66 ff 75 08       	pushw  0x8(%di)
    a500:	66 e8 97 fe          	callw  a39b <size+0x11>
    a504:	ff                   	(bad)  
    a505:	ff 66 83             	jmp    *-0x7d(%esi)
    a508:	c4 08                	les    (%eax),%ecx
}
int rm_tmp;
int ii;
void rmele(struct Queue *queue,int data){
    int size_of_rmqueue= size(queue);
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    a50a:	66 a1 6c ff 66 40    	mov    0x4066ff6c,%ax
    a510:	66 a3 6c ff 66 a1    	mov    %ax,0xa166ff6c
    a516:	6c                   	insb   (%dx),%es:(%edi)
    a517:	ff 67 66             	jmp    *0x66(%edi)
    a51a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
    a51d:	7c b6                	jl     a4d5 <rmele+0x28>
        dequeue(queue,&rm_tmp);
        if(rm_tmp != data){
            enqueue(queue,rm_tmp);
        }
    }
}
    a51f:	66 c9                	leavew 
    a521:	66 c3                	retw   

0000a523 <init_Semlist>:
void init_Semlist(){
    a523:	66 55                	push   %bp
    a525:	66 89 e5             	mov    %sp,%bp
    a528:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    a52c:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    a533:	00 00                	add    %al,(%eax)
    for(i = 0;i < SemMax;i ++){
    a535:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    a53c:	00 00                	add    %al,(%eax)
    a53e:	eb 69                	jmp    a5a9 <init_Semlist+0x86>
        SEM_list[i].used = 0;
    a540:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    a545:	66 89 d0             	mov    %dx,%ax
    a548:	66 01 c0             	add    %ax,%ax
    a54b:	66 01 d0             	add    %dx,%ax
    a54e:	66 c1 e0 02          	shl    $0x2,%ax
    a552:	66 01 d0             	add    %dx,%ax
    a555:	66 c1 e0 03          	shl    $0x3,%ax
    a559:	66 01 d0             	add    %dx,%ax
    a55c:	66 c1 e0 02          	shl    $0x2,%ax
    a560:	66 05 20 ce          	add    $0xce20,%ax
    a564:	00 00                	add    %al,(%eax)
    a566:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    a56c:	00 00                	add    %al,(%eax)
        init_queue(&SEM_list[i].semaque);
    a56e:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    a573:	66 89 d0             	mov    %dx,%ax
    a576:	66 01 c0             	add    %ax,%ax
    a579:	66 01 d0             	add    %dx,%ax
    a57c:	66 c1 e0 02          	shl    $0x2,%ax
    a580:	66 01 d0             	add    %dx,%ax
    a583:	66 c1 e0 03          	shl    $0x3,%ax
    a587:	66 01 d0             	add    %dx,%ax
    a58a:	66 c1 e0 02          	shl    $0x2,%ax
    a58e:	66 05 80 cc          	add    $0xcc80,%ax
    a592:	00 00                	add    %al,(%eax)
    a594:	66 83 c0 04          	add    $0x4,%ax
    a598:	66 50                	push   %ax
    a59a:	66 e8 db fe          	callw  a479 <dequeue+0x70>
    a59e:	ff                   	(bad)  
    a59f:	ff 66 83             	jmp    *-0x7d(%esi)
    a5a2:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
    }
}
void init_Semlist(){
    int i = 0;
    for(i = 0;i < SemMax;i ++){
    a5a5:	66 ff 45 fc          	incw   -0x4(%ebp)
    a5a9:	67 66 83 7d fc 1d    	cmpw   $0x1d,-0x4(%di)
    a5af:	7e 8f                	jle    a540 <init_Semlist+0x1d>
        SEM_list[i].used = 0;
        init_queue(&SEM_list[i].semaque);
    }
}
    a5b1:	66 c9                	leavew 
    a5b3:	66 c3                	retw   

0000a5b5 <do_SemGet>:
int do_SemGet(int value){
    a5b5:	66 55                	push   %bp
    a5b7:	66 89 e5             	mov    %sp,%bp
    a5ba:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    a5be:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    a5c5:	00 00                	add    %al,(%eax)
    while(SEM_list[i].used == 1){
    a5c7:	eb 05                	jmp    a5ce <do_SemGet+0x19>
        i ++;
    a5c9:	67 66 ff 45 fc       	incw   -0x4(%di)
        init_queue(&SEM_list[i].semaque);
    }
}
int do_SemGet(int value){
    int i = 0;
    while(SEM_list[i].used == 1){
    a5ce:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    a5d3:	66 89 d0             	mov    %dx,%ax
    a5d6:	66 01 c0             	add    %ax,%ax
    a5d9:	66 01 d0             	add    %dx,%ax
    a5dc:	66 c1 e0 02          	shl    $0x2,%ax
    a5e0:	66 01 d0             	add    %dx,%ax
    a5e3:	66 c1 e0 03          	shl    $0x3,%ax
    a5e7:	66 01 d0             	add    %dx,%ax
    a5ea:	66 c1 e0 02          	shl    $0x2,%ax
    a5ee:	66 05 20 ce          	add    $0xce20,%ax
    a5f2:	00 00                	add    %al,(%eax)
    a5f4:	67 66 8b 00          	mov    (%bx,%si),%ax
    a5f8:	66 83 f8 01          	cmp    $0x1,%ax
    a5fc:	74 cb                	je     a5c9 <do_SemGet+0x14>
        i ++;
    }
    if(i < SemMax){
    a5fe:	67 66 83 7d fc 1d    	cmpw   $0x1d,-0x4(%di)
    a604:	7f 66                	jg     a66c <do_SemGet+0xb7>
        SEM_list[i].used = 1;
    a606:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    a60b:	66 89 d0             	mov    %dx,%ax
    a60e:	66 01 c0             	add    %ax,%ax
    a611:	66 01 d0             	add    %dx,%ax
    a614:	66 c1 e0 02          	shl    $0x2,%ax
    a618:	66 01 d0             	add    %dx,%ax
    a61b:	66 c1 e0 03          	shl    $0x3,%ax
    a61f:	66 01 d0             	add    %dx,%ax
    a622:	66 c1 e0 02          	shl    $0x2,%ax
    a626:	66 05 20 ce          	add    $0xce20,%ax
    a62a:	00 00                	add    %al,(%eax)
    a62c:	67 66 c7 00 01 00    	movw   $0x1,(%bx,%si)
    a632:	00 00                	add    %al,(%eax)
        SEM_list[i].count = value;
    a634:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    a639:	66 89 d0             	mov    %dx,%ax
    a63c:	66 01 c0             	add    %ax,%ax
    a63f:	66 01 d0             	add    %dx,%ax
    a642:	66 c1 e0 02          	shl    $0x2,%ax
    a646:	66 01 d0             	add    %dx,%ax
    a649:	66 c1 e0 03          	shl    $0x3,%ax
    a64d:	66 01 d0             	add    %dx,%ax
    a650:	66 c1 e0 02          	shl    $0x2,%ax
    a654:	67 66 8d 90 80 cc    	lea    -0x3380(%bx,%si),%dx
    a65a:	00 00                	add    %al,(%eax)
    a65c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a661:	67 66 89 02          	mov    %ax,(%bp,%si)
        return i;
    a665:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    a66a:	eb 06                	jmp    a672 <do_SemGet+0xbd>
    }
    else 
        return -1;
    a66c:	66 b8 ff ff          	mov    $0xffff,%ax
    a670:	ff                   	(bad)  
    a671:	ff 66 c9             	jmp    *-0x37(%esi)
}
    a674:	66 c3                	retw   

0000a676 <do_SemFree>:
void do_SemFree(int s){
    a676:	66 55                	push   %bp
    a678:	66 89 e5             	mov    %sp,%bp
    SEM_list[s].used = 0;
    a67b:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a680:	66 89 d0             	mov    %dx,%ax
    a683:	66 01 c0             	add    %ax,%ax
    a686:	66 01 d0             	add    %dx,%ax
    a689:	66 c1 e0 02          	shl    $0x2,%ax
    a68d:	66 01 d0             	add    %dx,%ax
    a690:	66 c1 e0 03          	shl    $0x3,%ax
    a694:	66 01 d0             	add    %dx,%ax
    a697:	66 c1 e0 02          	shl    $0x2,%ax
    a69b:	66 05 20 ce          	add    $0xce20,%ax
    a69f:	00 00                	add    %al,(%eax)
    a6a1:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    a6a7:	00 00                	add    %al,(%eax)
}
    a6a9:	66 5d                	pop    %bp
    a6ab:	66 c3                	retw   

0000a6ad <do_P>:
int sem_index;
void do_P(int s){
    a6ad:	66 55                	push   %bp
    a6af:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    a6b2:	fa                   	cli    
    SEM_list[s].count = SEM_list[s].count - 1;
    a6b3:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a6b8:	66 89 d0             	mov    %dx,%ax
    a6bb:	66 01 c0             	add    %ax,%ax
    a6be:	66 01 d0             	add    %dx,%ax
    a6c1:	66 c1 e0 02          	shl    $0x2,%ax
    a6c5:	66 01 d0             	add    %dx,%ax
    a6c8:	66 c1 e0 03          	shl    $0x3,%ax
    a6cc:	66 01 d0             	add    %dx,%ax
    a6cf:	66 c1 e0 02          	shl    $0x2,%ax
    a6d3:	66 05 80 cc          	add    $0xcc80,%ax
    a6d7:	00 00                	add    %al,(%eax)
    a6d9:	67 66 8b 00          	mov    (%bx,%si),%ax
    a6dd:	67 66 8d 48 ff       	lea    -0x1(%bx,%si),%cx
    a6e2:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a6e7:	66 89 d0             	mov    %dx,%ax
    a6ea:	66 01 c0             	add    %ax,%ax
    a6ed:	66 01 d0             	add    %dx,%ax
    a6f0:	66 c1 e0 02          	shl    $0x2,%ax
    a6f4:	66 01 d0             	add    %dx,%ax
    a6f7:	66 c1 e0 03          	shl    $0x3,%ax
    a6fb:	66 01 d0             	add    %dx,%ax
    a6fe:	66 c1 e0 02          	shl    $0x2,%ax
    a702:	66 05 80 cc          	add    $0xcc80,%ax
    a706:	00 00                	add    %al,(%eax)
    a708:	67 66 89 08          	mov    %cx,(%bx,%si)
    if(SEM_list[s].count < 0){
    a70c:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a711:	66 89 d0             	mov    %dx,%ax
    a714:	66 01 c0             	add    %ax,%ax
    a717:	66 01 d0             	add    %dx,%ax
    a71a:	66 c1 e0 02          	shl    $0x2,%ax
    a71e:	66 01 d0             	add    %dx,%ax
    a721:	66 c1 e0 03          	shl    $0x3,%ax
    a725:	66 01 d0             	add    %dx,%ax
    a728:	66 c1 e0 02          	shl    $0x2,%ax
    a72c:	66 05 80 cc          	add    $0xcc80,%ax
    a730:	00 00                	add    %al,(%eax)
    a732:	67 66 8b 00          	mov    (%bx,%si),%ax
    a736:	66 85 c0             	test   %ax,%ax
    a739:	0f 89 b0 00 66 a1    	jns    a166a7ef <_end+0xa165a873>
        _CurrentProg->prg_status = BLOCKED;
    a73f:	70 cc                	jo     a70d <do_P+0x60>
    a741:	67 66 c7 40 38 02 00 	movw   $0x2,0x38(%bx,%si)
    a748:	00 00                	add    %al,(%eax)
        sem_index = _CurrentProg - PCB_list;
    a74a:	66 a1 70 cc 66 89    	mov    0x8966cc70,%ax
    a750:	c2 66 b8             	ret    $0xb866
    a753:	20 c7                	and    %al,%bh
    a755:	00 00                	add    %al,(%eax)
    a757:	66 29 c2             	sub    %ax,%dx
    a75a:	66 89 d0             	mov    %dx,%ax
    a75d:	66 c1 f8 02          	sar    $0x2,%ax
    a761:	66 89 c2             	mov    %ax,%dx
    a764:	66 89 d0             	mov    %dx,%ax
    a767:	66 01 c0             	add    %ax,%ax
    a76a:	66 01 d0             	add    %dx,%ax
    a76d:	67 66 8d 14          	lea    (%si),%dx
    a771:	85 00                	test   %eax,(%eax)
    a773:	00 00                	add    %al,(%eax)
    a775:	00 66 01             	add    %ah,0x1(%esi)
    a778:	d0 66 89             	shlb   -0x77(%esi)
    a77b:	c2 66 c1             	ret    $0xc166
    a77e:	e2 08                	loop   a788 <do_P+0xdb>
    a780:	66 01 d0             	add    %dx,%ax
    a783:	66 89 c2             	mov    %ax,%dx
    a786:	66 c1 e2 10          	shl    $0x10,%dx
    a78a:	66 01 d0             	add    %dx,%ax
    a78d:	66 f7 d8             	neg    %ax
    a790:	66 a3 78 ff 66 a1    	mov    %ax,0xa166ff78
        rmele(&readyqueue,sem_index);
    a796:	78 ff                	js     a797 <do_P+0xea>
    a798:	66 50                	push   %ax
    a79a:	66 68 c0 fd          	pushw  $0xfdc0
    a79e:	00 00                	add    %al,(%eax)
    a7a0:	66 e8 07 fd          	callw  a4ab <init_queue+0x30>
    a7a4:	ff                   	(bad)  
    a7a5:	ff 66 83             	jmp    *-0x7d(%esi)
    a7a8:	c4 08                	les    (%eax),%ecx
        enqueue(&(SEM_list[s].semaque),sem_index);
    a7aa:	66 8b 0e             	mov    (%esi),%cx
    a7ad:	78 ff                	js     a7ae <do_P+0x101>
    a7af:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a7b4:	66 89 d0             	mov    %dx,%ax
    a7b7:	66 01 c0             	add    %ax,%ax
    a7ba:	66 01 d0             	add    %dx,%ax
    a7bd:	66 c1 e0 02          	shl    $0x2,%ax
    a7c1:	66 01 d0             	add    %dx,%ax
    a7c4:	66 c1 e0 03          	shl    $0x3,%ax
    a7c8:	66 01 d0             	add    %dx,%ax
    a7cb:	66 c1 e0 02          	shl    $0x2,%ax
    a7cf:	66 05 80 cc          	add    $0xcc80,%ax
    a7d3:	00 00                	add    %al,(%eax)
    a7d5:	66 83 c0 04          	add    $0x4,%ax
    a7d9:	66 51                	push   %cx
    a7db:	66 50                	push   %ax
    a7dd:	66 e8 ba fb          	callw  a39b <size+0x11>
    a7e1:	ff                   	(bad)  
    a7e2:	ff 66 83             	jmp    *-0x7d(%esi)
    a7e5:	c4 08                	les    (%eax),%ecx
        _Schedule_once();
    a7e7:	66 e8 98 dd          	callw  8583 <S+0x14>
    a7eb:	ff                   	(bad)  
    a7ec:	ff                   	(bad)  
    }
    __asm("sti\n");
    a7ed:	fb                   	sti    
}
    a7ee:	66 c9                	leavew 
    a7f0:	66 c3                	retw   

0000a7f2 <do_V>:
int v_res;
void do_V(int s){
    a7f2:	66 55                	push   %bp
    a7f4:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    a7f7:	fa                   	cli    
    SEM_list[s].count  = SEM_list[s].count + 1;
    a7f8:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a7fd:	66 89 d0             	mov    %dx,%ax
    a800:	66 01 c0             	add    %ax,%ax
    a803:	66 01 d0             	add    %dx,%ax
    a806:	66 c1 e0 02          	shl    $0x2,%ax
    a80a:	66 01 d0             	add    %dx,%ax
    a80d:	66 c1 e0 03          	shl    $0x3,%ax
    a811:	66 01 d0             	add    %dx,%ax
    a814:	66 c1 e0 02          	shl    $0x2,%ax
    a818:	66 05 80 cc          	add    $0xcc80,%ax
    a81c:	00 00                	add    %al,(%eax)
    a81e:	67 66 8b 00          	mov    (%bx,%si),%ax
    a822:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    a827:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a82c:	66 89 d0             	mov    %dx,%ax
    a82f:	66 01 c0             	add    %ax,%ax
    a832:	66 01 d0             	add    %dx,%ax
    a835:	66 c1 e0 02          	shl    $0x2,%ax
    a839:	66 01 d0             	add    %dx,%ax
    a83c:	66 c1 e0 03          	shl    $0x3,%ax
    a840:	66 01 d0             	add    %dx,%ax
    a843:	66 c1 e0 02          	shl    $0x2,%ax
    a847:	66 05 80 cc          	add    $0xcc80,%ax
    a84b:	00 00                	add    %al,(%eax)
    a84d:	67 66 89 08          	mov    %cx,(%bx,%si)
    if(SEM_list[s].count <= 0){
    a851:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a856:	66 89 d0             	mov    %dx,%ax
    a859:	66 01 c0             	add    %ax,%ax
    a85c:	66 01 d0             	add    %dx,%ax
    a85f:	66 c1 e0 02          	shl    $0x2,%ax
    a863:	66 01 d0             	add    %dx,%ax
    a866:	66 c1 e0 03          	shl    $0x3,%ax
    a86a:	66 01 d0             	add    %dx,%ax
    a86d:	66 c1 e0 02          	shl    $0x2,%ax
    a871:	66 05 80 cc          	add    $0xcc80,%ax
    a875:	00 00                	add    %al,(%eax)
    a877:	67 66 8b 00          	mov    (%bx,%si),%ax
    a87b:	66 85 c0             	test   %ax,%ax
    a87e:	7f 73                	jg     a8f3 <do_V+0x101>
        dequeue(&(SEM_list[s].semaque),&v_res);
    a880:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a885:	66 89 d0             	mov    %dx,%ax
    a888:	66 01 c0             	add    %ax,%ax
    a88b:	66 01 d0             	add    %dx,%ax
    a88e:	66 c1 e0 02          	shl    $0x2,%ax
    a892:	66 01 d0             	add    %dx,%ax
    a895:	66 c1 e0 03          	shl    $0x3,%ax
    a899:	66 01 d0             	add    %dx,%ax
    a89c:	66 c1 e0 02          	shl    $0x2,%ax
    a8a0:	66 05 80 cc          	add    $0xcc80,%ax
    a8a4:	00 00                	add    %al,(%eax)
    a8a6:	66 83 c0 04          	add    $0x4,%ax
    a8aa:	66 68 68 ff          	pushw  $0xff68
    a8ae:	00 00                	add    %al,(%eax)
    a8b0:	66 50                	push   %ax
    a8b2:	66 e8 51 fb          	callw  a407 <enqueue+0x6a>
    a8b6:	ff                   	(bad)  
    a8b7:	ff 66 83             	jmp    *-0x7d(%esi)
    a8ba:	c4 08                	les    (%eax),%ecx
        PCB_list[v_res].prg_status = READY;
    a8bc:	66 a1 68 ff 66 c1    	mov    0xc166ff68,%ax
    a8c2:	e0 02                	loopne a8c6 <do_V+0xd4>
    a8c4:	66 89 c2             	mov    %ax,%dx
    a8c7:	66 c1 e2 04          	shl    $0x4,%dx
    a8cb:	66 01 d0             	add    %dx,%ax
    a8ce:	66 05 50 c7          	add    $0xc750,%ax
    a8d2:	00 00                	add    %al,(%eax)
    a8d4:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    a8db:	00 00                	add    %al,(%eax)
        enqueue(&readyqueue,v_res);
    a8dd:	66 a1 68 ff 66 50    	mov    0x5066ff68,%ax
    a8e3:	66 68 c0 fd          	pushw  $0xfdc0
    a8e7:	00 00                	add    %al,(%eax)
    a8e9:	66 e8 ae fa          	callw  a39b <size+0x11>
    a8ed:	ff                   	(bad)  
    a8ee:	ff 66 83             	jmp    *-0x7d(%esi)
    a8f1:	c4 08                	les    (%eax),%ecx
    }
    __asm__("sti\n");
    a8f3:	fb                   	sti    

    a8f4:	66 c9                	leavew 
    a8f6:	66 c3                	retw   
