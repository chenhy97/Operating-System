
kernel.elf:     file format elf32-i386


Disassembly of section .text:

00007d00 <_start>:
    7d00:	66 b8 00 00          	mov    $0x0,%ax
    7d04:	00 00                	add    %al,(%eax)
    7d06:	8e d8                	mov    %eax,%ds
    7d08:	8e c0                	mov    %eax,%es
    7d0a:	8e d0                	mov    %eax,%ss
    7d0c:	66 ea 14 7d 00 00    	ljmpw  $0x0,$0x7d14
	...

00007d14 <main>:
#include"kernel.h"
#include "../syscall/stdio.h"
#include "../syscall/schedule.h"
#include "../syscall/time.h"

int main(){
    7d14:	66 55                	push   %bp
    7d16:	66 89 e5             	mov    %sp,%bp
    7d19:	66 83 ec 0c          	sub    $0xc,%sp
    clearscreen();
    7d1d:	66 e8 63 07          	callw  8484 <run+0x129>
    7d21:	00 00                	add    %al,(%eax)
   // char str[100] = {};
    //getline(str,10);
   // prints(str);
    Initial_Int();
    7d23:	66 e8 6d 07          	callw  8494 <clearscreen+0xe>
    7d27:	00 00                	add    %al,(%eax)
    init_queue(&readyqueue);
    7d29:	66 68 c0 b2          	pushw  $0xb2c0
    7d2d:	00 00                	add    %al,(%eax)
    7d2f:	66 e8 6e 25          	callw  a2a1 <dequeue+0x70>
    7d33:	00 00                	add    %al,(%eax)
    7d35:	66 83 c4 04          	add    $0x4,%sp
    init_queue(&blockqueue);
    7d39:	66 68 20 b0          	pushw  $0xb020
    7d3d:	00 00                	add    %al,(%eax)
    7d3f:	66 e8 5e 25          	callw  a2a1 <dequeue+0x70>
    7d43:	00 00                	add    %al,(%eax)
    7d45:	66 83 c4 04          	add    $0x4,%sp
   // printTime();
    //Initial_Int_09h();
   // Set_PCB();
    loadProg(15,95,0x2000);
    7d49:	66 68 00 20          	pushw  $0x2000
    7d4d:	00 00                	add    %al,(%eax)
    7d4f:	66 6a 5f             	pushw  $0x5f
    7d52:	66 6a 0f             	pushw  $0xf
    7d55:	66 e8 69 07          	callw  84c2 <Initial_Int_08h+0xd>
    7d59:	00 00                	add    %al,(%eax)
    7d5b:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(15,115,0x3000);
    7d5f:	66 68 00 30          	pushw  $0x3000
    7d63:	00 00                	add    %al,(%eax)
    7d65:	66 6a 73             	pushw  $0x73
    7d68:	66 6a 0f             	pushw  $0xf
    7d6b:	66 e8 53 07          	callw  84c2 <Initial_Int_08h+0xd>
    7d6f:	00 00                	add    %al,(%eax)
    7d71:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(15,135,0x4000);
    7d75:	66 68 00 40          	pushw  $0x4000
    7d79:	00 00                	add    %al,(%eax)
    7d7b:	66 68 87 00          	pushw  $0x87
    7d7f:	00 00                	add    %al,(%eax)
    7d81:	66 6a 0f             	pushw  $0xf
    7d84:	66 e8 3a 07          	callw  84c2 <Initial_Int_08h+0xd>
    7d88:	00 00                	add    %al,(%eax)
    7d8a:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(15,155,0x5000);
    7d8e:	66 68 00 50          	pushw  $0x5000
    7d92:	00 00                	add    %al,(%eax)
    7d94:	66 68 9b 00          	pushw  $0x9b
    7d98:	00 00                	add    %al,(%eax)
    7d9a:	66 6a 0f             	pushw  $0xf
    7d9d:	66 e8 21 07          	callw  84c2 <Initial_Int_08h+0xd>
    7da1:	00 00                	add    %al,(%eax)
    7da3:	66 83 c4 0c          	add    $0xc,%sp
    _loadP(15,175,0x6000);
    7da7:	66 68 00 60          	pushw  $0x6000
    7dab:	00 00                	add    %al,(%eax)
    7dad:	66 68 af 00          	pushw  $0xaf
    7db1:	00 00                	add    %al,(%eax)
    7db3:	66 6a 0f             	pushw  $0xf
    7db6:	66 e8 0b 08          	callw  85c5 <_setPoint+0x15>
    7dba:	00 00                	add    %al,(%eax)
    7dbc:	66 83 c4 0c          	add    $0xc,%sp
    _loadP(20,195,0x7000);
    7dc0:	66 68 00 70          	pushw  $0x7000
    7dc4:	00 00                	add    %al,(%eax)
    7dc6:	66 68 c3 00          	pushw  $0xc3
    7dca:	00 00                	add    %al,(%eax)
    7dcc:	66 6a 14             	pushw  $0x14
    7dcf:	66 e8 f2 07          	callw  85c5 <_setPoint+0x15>
    7dd3:	00 00                	add    %al,(%eax)
    7dd5:	66 83 c4 0c          	add    $0xc,%sp
    initial_PCB(6);
    7dd9:	66 6a 06             	pushw  $0x6
    7ddc:	66 e8 28 1a          	callw  9808 <savePCB+0xd>
    7de0:	00 00                	add    %al,(%eax)
    7de2:	66 83 c4 04          	add    $0x4,%sp
   _CurrentProg = PCB_list + 6;
    7de6:	66 c7 06 a0 b2       	movw   $0xb2a0,(%esi)
    7deb:	18 b2 00 00 66 68    	sbb    %dh,0x68660000(%edx)
   // _CurrentProg = PCB_list;//important! mov dword ptr ds:0x9e60, 0x00009d20,把PCB_list的地址9d20存到ds的9e60处，此后就直接用9e60来织带PCB_list
    //Initial_Int_08h();
    _RunProgress(0x7000);
    7df1:	00 70 00             	add    %dh,0x0(%eax)
    7df4:	00 66 e8             	add    %ah,-0x18(%esi)
    7df7:	03 08                	add    (%eax),%ecx
    7df9:	00 00                	add    %al,(%eax)
    7dfb:	66 83 c4 04          	add    $0x4,%sp


    char const *Messeage = "Built by Chen Hongyang on March 20, 2018";
    7dff:	67 66 c7 45 fc d8 a2 	movw   $0xa2d8,-0x4(%di)
    7e06:	00 00                	add    %al,(%eax)
    print("===================================================",9,12);
    7e08:	66 6a 0c             	pushw  $0xc
    7e0b:	66 6a 09             	pushw  $0x9
    7e0e:	66 68 04 a3          	pushw  $0xa304
    7e12:	00 00                	add    %al,(%eax)
    7e14:	66 e8 af 0f          	callw  8dc7 <_Get_Minutes_2+0x1b>
    7e18:	00 00                	add    %al,(%eax)
    7e1a:	66 83 c4 0c          	add    $0xc,%sp

    print("chenhyOS",10,32);
    7e1e:	66 6a 20             	pushw  $0x20
    7e21:	66 6a 0a             	pushw  $0xa
    7e24:	66 68 38 a3          	pushw  $0xa338
    7e28:	00 00                	add    %al,(%eax)
    7e2a:	66 e8 99 0f          	callw  8dc7 <_Get_Minutes_2+0x1b>
    7e2e:	00 00                	add    %al,(%eax)
    7e30:	66 83 c4 0c          	add    $0xc,%sp
   print(Messeage,11,16); //print the msg
    7e34:	66 6a 10             	pushw  $0x10
    7e37:	66 6a 0b             	pushw  $0xb
    7e3a:	67 66 ff 75 fc       	pushw  -0x4(%di)
    7e3f:	66 e8 84 0f          	callw  8dc7 <_Get_Minutes_2+0x1b>
    7e43:	00 00                	add    %al,(%eax)
    7e45:	66 83 c4 0c          	add    $0xc,%sp
   print("===================================================",12,12);
    7e49:	66 6a 0c             	pushw  $0xc
    7e4c:	66 6a 0c             	pushw  $0xc
    7e4f:	66 68 04 a3          	pushw  $0xa304
    7e53:	00 00                	add    %al,(%eax)
    7e55:	66 e8 6e 0f          	callw  8dc7 <_Get_Minutes_2+0x1b>
    7e59:	00 00                	add    %al,(%eax)
    7e5b:	66 83 c4 0c          	add    $0xc,%sp
   

   char a = getch();
    7e5f:	66 e8 11 12          	callw  9074 <read_and_print_input+0x3a>
    7e63:	00 00                	add    %al,(%eax)
    7e65:	67 88 45 fb          	mov    %al,-0x5(%di)
   clearscreen(); 
    7e69:	66 e8 17 06          	callw  8484 <run+0x129>
    7e6d:	00 00                	add    %al,(%eax)
    char const *Msg1 = "Press any key to get help\n\r";
    7e6f:	67 66 c7 45 f4 41 a3 	movw   $0xa341,-0xc(%di)
    7e76:	00 00                	add    %al,(%eax)
   prints(Msg1);
    7e78:	67 66 ff 75 f4       	pushw  -0xc(%di)
    7e7d:	66 e8 d7 0f          	callw  8e58 <print+0x8f>
    7e81:	00 00                	add    %al,(%eax)
    7e83:	66 83 c4 04          	add    $0x4,%sp
   print("!",13,39);
    7e87:	66 6a 27             	pushw  $0x27
    7e8a:	66 6a 0d             	pushw  $0xd
    7e8d:	66 68 5d a3          	pushw  $0xa35d
    7e91:	00 00                	add    %al,(%eax)
    7e93:	66 e8 30 0f          	callw  8dc7 <_Get_Minutes_2+0x1b>
    7e97:	00 00                	add    %al,(%eax)
    7e99:	66 83 c4 0c          	add    $0xc,%sp
   //Initial_Int();
    /*buildmap();还有待解决debug
    void *addr = (void*) 0xB100;
    _loadP(2,21,addr);
    showtable();*/
    terminal();
    7e9d:	66 e8 0a 00          	callw  7eab <main+0x197>
    7ea1:	00 00                	add    %al,(%eax)
    return 0;
    7ea3:	66 b8 00 00          	mov    $0x0,%ax
    7ea7:	00 00                	add    %al,(%eax)
    7ea9:	66 c9                	leavew 
    7eab:	66 c3                	retw   

00007ead <terminal>:
#include "../syscall/use.h"
#include "command.h"
#include "../syscall/stdio.h"
#include "../syscall/time.h"
void run(int queue[],int size);
int terminal(){
    7ead:	66 55                	push   %bp
    7eaf:	66 89 e5             	mov    %sp,%bp
    7eb2:	66 57                	push   %di
    7eb4:	66 56                	push   %si
    7eb6:	66 53                	push   %bx
    7eb8:	66 83 ec 60          	sub    $0x60,%sp
    7ebc:	66 89 e0             	mov    %sp,%ax
    7ebf:	66 89 c6             	mov    %ax,%si
    char const *help = "help";
    7ec2:	67 66 c7 45 e4 60 a3 	movw   $0xa360,-0x1c(%di)
    7ec9:	00 00                	add    %al,(%eax)
    char const *quit = "quit";
    7ecb:	67 66 c7 45 e0 65 a3 	movw   $0xa365,-0x20(%di)
    7ed2:	00 00                	add    %al,(%eax)
    char const *lst = "ls";
    7ed4:	67 66 c7 45 dc 6a a3 	movw   $0xa36a,-0x24(%di)
    7edb:	00 00                	add    %al,(%eax)
    char const *CMDHead = "hongyangchendeMacBook-Air:chenhyOS users$ ";
    7edd:	67 66 c7 45 d8 70 a3 	movw   $0xa370,-0x28(%di)
    7ee4:	00 00                	add    %al,(%eax)
    char const *controlMsg1 = "The queue is full,waiting for the Enter Key.";
    7ee6:	67 66 c7 45 d4 9c a3 	movw   $0xa39c,-0x2c(%di)
    7eed:	00 00                	add    %al,(%eax)
    char const *controlMsg2 = "The queue is empty!";
    7eef:	67 66 c7 45 d0 c9 a3 	movw   $0xa3c9,-0x30(%di)
    7ef6:	00 00                	add    %al,(%eax)
    char const *ByeByeMsg = "ByeBye";
    7ef8:	67 66 c7 45 cc dd a3 	movw   $0xa3dd,-0x34(%di)
    7eff:	00 00                	add    %al,(%eax)
    char const *filelist = "Program1 upleft   Program2 upright  \r\nProgram3 downleft  Program4 downright";
    7f01:	67 66 c7 45 c8 e4 a3 	movw   $0xa3e4,-0x38(%di)
    7f08:	00 00                	add    %al,(%eax)
    char const *HelpMsg1 = "Enter 1,2,3,4 to run the program\n\rEnter quit,to quit\n\rEnter help to print this script again";
    7f0a:	67 66 c7 45 c4 30 a4 	movw   $0xa430,-0x3c(%di)
    7f11:	00 00                	add    %al,(%eax)
    int Maxsize = 10;
    7f13:	67 66 c7 45 c0 0a 00 	movw   $0xa,-0x40(%di)
    7f1a:	00 00                	add    %al,(%eax)
    print_next_line(HelpMsg1);
    7f1c:	67 66 ff 75 c4       	pushw  -0x3c(%di)
    7f21:	66 e8 a6 10          	callw  8fcb <printsint+0xf6>
    7f25:	00 00                	add    %al,(%eax)
    7f27:	66 83 c4 04          	add    $0x4,%sp
    
            // _RunProgress(0xC000);
   prints(CMDHead);
    7f2b:	67 66 ff 75 d8       	pushw  -0x28(%di)
    7f30:	66 e8 24 0f          	callw  8e58 <print+0x8f>
    7f34:	00 00                	add    %al,(%eax)
    7f36:	66 83 c4 04          	add    $0x4,%sp
    char recived[10] = {};
    7f3a:	67 66 8d 5d 96       	lea    -0x6a(%di),%bx
    7f3f:	66 ba 0a 00          	mov    $0xa,%dx
    7f43:	00 00                	add    %al,(%eax)
    7f45:	b0 00                	mov    $0x0,%al
    7f47:	66 89 df             	mov    %bx,%di
    7f4a:	66 89 d1             	mov    %dx,%cx
    7f4d:	f3 aa                	rep stos %al,%es:(%edi)
    recived[0] = 0;
    7f4f:	67 c6 45 96 00       	movb   $0x0,-0x6a(%di)
    int index_of_str = 0;
    7f54:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    7f5b:	00 00                	add    %al,(%eax)
    int i = 1;
    7f5d:	67 66 c7 45 bc 01 00 	movw   $0x1,-0x44(%di)
    7f64:	00 00                	add    %al,(%eax)
    int queue[Maxsize];
    7f66:	67 66 8b 45 c0       	mov    -0x40(%di),%ax
    7f6b:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    7f70:	67 66 89 55 b8       	mov    %dx,-0x48(%di)
    7f75:	66 c1 e0 02          	shl    $0x2,%ax
    7f79:	67 66 8d 50 03       	lea    0x3(%bx,%si),%dx
    7f7e:	66 b8 04 00          	mov    $0x4,%ax
    7f82:	00 00                	add    %al,(%eax)
    7f84:	66 48                	dec    %ax
    7f86:	66 01 d0             	add    %dx,%ax
    7f89:	66 bb 04 00          	mov    $0x4,%bx
    7f8d:	00 00                	add    %al,(%eax)
    7f8f:	66 ba 00 00          	mov    $0x0,%dx
    7f93:	00 00                	add    %al,(%eax)
    7f95:	66 f7 f3             	div    %bx
    7f98:	66 6b c0 04          	imul   $0x4,%ax,%ax
    7f9c:	66 29 c4             	sub    %ax,%sp
    7f9f:	66 89 e0             	mov    %sp,%ax
    7fa2:	66 83 c0 03          	add    $0x3,%ax
    7fa6:	66 c1 e8 02          	shr    $0x2,%ax
    7faa:	66 c1 e0 02          	shl    $0x2,%ax
    7fae:	67 66 89 45 b4       	mov    %ax,-0x4c(%di)
    int num_of_queue = 0;
    7fb3:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    7fba:	00 00                	add    %al,(%eax)
    int number = 0;
    7fbc:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    7fc3:	00 00                	add    %al,(%eax)
    int k = 0;
    7fc5:	67 66 c7 45 b0 00 00 	movw   $0x0,-0x50(%di)
    7fcc:	00 00                	add    %al,(%eax)
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    7fce:	e9 6e 03 66 e8       	jmp    e8668341 <_end+0xe865d021>
        char save = getch();
    7fd3:	9f                   	lahf   
    7fd4:	10 00                	adc    %al,(%eax)
    7fd6:	00 67 88             	add    %ah,-0x78(%edi)
    7fd9:	45                   	inc    %ebp
    7fda:	af                   	scas   %es:(%edi),%eax
        if(save == 32){//空格
    7fdb:	67 80 7d af 20       	cmpb   $0x20,-0x51(%di)
    7fe0:	75 74                	jne    8056 <terminal+0x1a9>
            if(num_of_queue == Maxsize){
    7fe2:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    7fe7:	67 66 3b 45 c0       	cmp    -0x40(%di),%ax
    7fec:	75 31                	jne    801f <terminal+0x172>
                prints("\n\r");
    7fee:	66 68 8c a4          	pushw  $0xa48c
    7ff2:	00 00                	add    %al,(%eax)
    7ff4:	66 e8 60 0e          	callw  8e58 <print+0x8f>
    7ff8:	00 00                	add    %al,(%eax)
    7ffa:	66 83 c4 04          	add    $0x4,%sp
                print_next_line(controlMsg1);
    7ffe:	67 66 ff 75 d4       	pushw  -0x2c(%di)
    8003:	66 e8 c4 0f          	callw  8fcb <printsint+0xf6>
    8007:	00 00                	add    %al,(%eax)
    8009:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    800d:	67 66 ff 75 d8       	pushw  -0x28(%di)
    8012:	66 e8 42 0e          	callw  8e58 <print+0x8f>
    8016:	00 00                	add    %al,(%eax)
    8018:	66 83 c4 04          	add    $0x4,%sp
                continue;
    801c:	e9 20 03 67 66       	jmp    66678341 <_end+0x6666d021>
            }
            printc(save);
    8021:	0f be 45 af          	movsbl -0x51(%ebp),%eax
    8025:	66 50                	push   %ax
    8027:	66 e8 7f 0e          	callw  8eaa <prints+0x50>
    802b:	00 00                	add    %al,(%eax)
    802d:	66 83 c4 04          	add    $0x4,%sp
            queue[num_of_queue] = number;
    8031:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    8036:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    803b:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    8040:	67 66 89 0c          	mov    %cx,(%si)
    8044:	90                   	nop
            num_of_queue ++;
    8045:	67 66 ff 45 ec       	incw   -0x14(%di)
            number = 0;
    804a:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    8051:	00 00                	add    %al,(%eax)
            continue;
    8053:	e9 e9 02 67 80       	jmp    80678341 <_end+0x8066d021>
        }
       else  if(save == 13){//回车
    8058:	7d af                	jge    8009 <terminal+0x15c>
    805a:	0d 0f 85 39 02       	or     $0x239850f,%eax
            int strcmp1 = strcmp(recived,quit);
    805f:	67 66 ff 75 e0       	pushw  -0x20(%di)
    8064:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    8069:	66 50                	push   %ax
    806b:	66 e8 24 11          	callw  9193 <print_different_color+0x86>
    806f:	00 00                	add    %al,(%eax)
    8071:	66 83 c4 08          	add    $0x8,%sp
    8075:	67 66 89 45 a8       	mov    %ax,-0x58(%di)
            int strcmp2 = strcmp(recived,help);
    807a:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    807f:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    8084:	66 50                	push   %ax
    8086:	66 e8 09 11          	callw  9193 <print_different_color+0x86>
    808a:	00 00                	add    %al,(%eax)
    808c:	66 83 c4 08          	add    $0x8,%sp
    8090:	67 66 89 45 a4       	mov    %ax,-0x5c(%di)
            int strcmp3 = strcmp(recived,lst);
    8095:	67 66 ff 75 dc       	pushw  -0x24(%di)
    809a:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    809f:	66 50                	push   %ax
    80a1:	66 e8 ee 10          	callw  9193 <print_different_color+0x86>
    80a5:	00 00                	add    %al,(%eax)
    80a7:	66 83 c4 08          	add    $0x8,%sp
    80ab:	67 66 89 45 a0       	mov    %ax,-0x60(%di)
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
    80b0:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    80b6:	75 22                	jne    80da <terminal+0x22d>
    80b8:	67 66 83 7d e8 00    	cmpw   $0x0,-0x18(%di)
    80be:	75 1a                	jne    80da <terminal+0x22d>
    80c0:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    80c6:	74 12                	je     80da <terminal+0x22d>
    80c8:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    80ce:	74 0a                	je     80da <terminal+0x22d>
    80d0:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    80d6:	0f 85 73 01 67 66    	jne    6667824f <_end+0x6666cf2f>
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    80dc:	83 7d a8 01          	cmpl   $0x1,-0x58(%ebp)
    80e0:	74 12                	je     80f4 <terminal+0x247>
    80e2:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    80e8:	74 0a                	je     80f4 <terminal+0x247>
    80ea:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    80f0:	0f 85 b9 00 66 68    	jne    686681af <_end+0x6865ce8f>
                    print_next_line("");
    80f6:	8f                   	(bad)  
    80f7:	a4                   	movsb  %ds:(%esi),%es:(%edi)
    80f8:	00 00                	add    %al,(%eax)
    80fa:	66 e8 cd 0e          	callw  8fcb <printsint+0xf6>
    80fe:	00 00                	add    %al,(%eax)
    8100:	66 83 c4 04          	add    $0x4,%sp
                    if(strcmp1 == 1){
    8104:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    810a:	75 2b                	jne    8137 <terminal+0x28a>
                        print_next_line(ByeByeMsg);
    810c:	67 66 ff 75 cc       	pushw  -0x34(%di)
    8111:	66 e8 b6 0e          	callw  8fcb <printsint+0xf6>
    8115:	00 00                	add    %al,(%eax)
    8117:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    811b:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8122:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    8124:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8129:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    812e:	66 01 d0             	add    %dx,%ax
    8131:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8135:	eb 64                	jmp    819b <terminal+0x2ee>
                    }                  
                   else if(strcmp2 == 1){
    8137:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    813d:	75 2b                	jne    816a <terminal+0x2bd>
                         print_next_line(HelpMsg1);
    813f:	67 66 ff 75 c4       	pushw  -0x3c(%di)
    8144:	66 e8 83 0e          	callw  8fcb <printsint+0xf6>
    8148:	00 00                	add    %al,(%eax)
    814a:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    814e:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8155:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    8157:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    815c:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8161:	66 01 d0             	add    %dx,%ax
    8164:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8168:	eb 31                	jmp    819b <terminal+0x2ee>
                    }
                    else if(strcmp3 == 1){
    816a:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    8170:	75 29                	jne    819b <terminal+0x2ee>
                        print_next_line(filelist);
    8172:	67 66 ff 75 c8       	pushw  -0x38(%di)
    8177:	66 e8 50 0e          	callw  8fcb <printsint+0xf6>
    817b:	00 00                	add    %al,(%eax)
    817d:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    8181:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8188:	00 00                	add    %al,(%eax)
                      recived[index_of_str] = 0;
    818a:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    818f:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8194:	66 01 d0             	add    %dx,%ax
    8197:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    }
                        //prints(recived);
                    prints(CMDHead);
    819b:	67 66 ff 75 d8       	pushw  -0x28(%di)
    81a0:	66 e8 b4 0c          	callw  8e58 <print+0x8f>
    81a4:	00 00                	add    %al,(%eax)
    81a6:	66 83 c4 04          	add    $0x4,%sp
                    continue;
    81aa:	e9 92 01 67 66       	jmp    66678341 <_end+0x6666d021>
                }
            
                else if(number != 0||num_of_queue != 0){
    81af:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    81b3:	75 0a                	jne    81bf <terminal+0x312>
    81b5:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    81bb:	0f 84 8a 00 67 66    	je     6667824b <_end+0x6666cf2b>
                    if(number != 0 ){
    81c1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    81c5:	74 28                	je     81ef <terminal+0x342>
                         printsint(number);
    81c7:	67 66 ff 75 e8       	pushw  -0x18(%di)
    81cc:	66 e8 03 0d          	callw  8ed3 <printc+0x27>
    81d0:	00 00                	add    %al,(%eax)
    81d2:	66 83 c4 04          	add    $0x4,%sp
                        queue[num_of_queue] = number;
    81d6:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    81db:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    81e0:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    81e5:	67 66 89 0c          	mov    %cx,(%si)
    81e9:	90                   	nop
                        num_of_queue++;
    81ea:	67 66 ff 45 ec       	incw   -0x14(%di)
                    }
                    run(queue,num_of_queue);
    81ef:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    81f4:	67 66 ff 75 ec       	pushw  -0x14(%di)
    81f9:	66 50                	push   %ax
    81fb:	66 e8 5a 01          	callw  8359 <terminal+0x4ac>
    81ff:	00 00                	add    %al,(%eax)
    8201:	66 83 c4 08          	add    $0x8,%sp
                    num_of_queue = 0;
    8205:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    820c:	00 00                	add    %al,(%eax)
                    number = 0;
    820e:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    8215:	00 00                	add    %al,(%eax)
                    clearscreen();
    8217:	66 e8 69 02          	callw  8484 <run+0x129>
    821b:	00 00                	add    %al,(%eax)
                    prints(CMDHead);
    821d:	67 66 ff 75 d8       	pushw  -0x28(%di)
    8222:	66 e8 32 0c          	callw  8e58 <print+0x8f>
    8226:	00 00                	add    %al,(%eax)
    8228:	66 83 c4 04          	add    $0x4,%sp
                    index_of_str = 0;
    822c:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8233:	00 00                	add    %al,(%eax)
                    recived[index_of_str] = 0;
    8235:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    823a:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    823f:	66 01 d0             	add    %dx,%ax
    8242:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    continue;
    8246:	e9 f6 00 90 e9       	jmp    e9908341 <_end+0xe98fd021>
            int strcmp1 = strcmp(recived,quit);
            int strcmp2 = strcmp(recived,help);
            int strcmp3 = strcmp(recived,lst);
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    824b:	f2 00 66 68          	repnz add %ah,0x68(%esi)
                    recived[index_of_str] = 0;
                    continue;
                }
            }
            else{
                 prints("\n\r");
    824f:	8c a4 00 00 66 e8 01 	mov    %fs,0x1e86600(%eax,%eax,1)
    8256:	0c 00                	or     $0x0,%al
    8258:	00 66 83             	add    %ah,-0x7d(%esi)
    825b:	c4 04 67             	les    (%edi,%eiz,2),%eax
                print_next_line(controlMsg2);
    825e:	66 ff 75 d0          	pushw  -0x30(%ebp)
    8262:	66 e8 65 0d          	callw  8fcb <printsint+0xf6>
    8266:	00 00                	add    %al,(%eax)
    8268:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    826c:	67 66 ff 75 d8       	pushw  -0x28(%di)
    8271:	66 e8 e3 0b          	callw  8e58 <print+0x8f>
    8275:	00 00                	add    %al,(%eax)
    8277:	66 83 c4 04          	add    $0x4,%sp
                index_of_str = 0;
    827b:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8282:	00 00                	add    %al,(%eax)
                recived[index_of_str] = 0;
    8284:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8289:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    828e:	66 01 d0             	add    %dx,%ax
    8291:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                continue;
    8295:	e9 a7 00 67 80       	jmp    80678341 <_end+0x8066d021>
            }
        }
        else if(save >= '0' && save <='9'){
    829a:	7d af                	jge    824b <terminal+0x39e>
    829c:	2f                   	das    
    829d:	7e 42                	jle    82e1 <terminal+0x434>
    829f:	67 80 7d af 39       	cmpb   $0x39,-0x51(%di)
    82a4:	7f 3b                	jg     82e1 <terminal+0x434>
           printc(save);
    82a6:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    82ac:	66 50                	push   %ax
    82ae:	66 e8 f8 0b          	callw  8eaa <prints+0x50>
    82b2:	00 00                	add    %al,(%eax)
    82b4:	66 83 c4 04          	add    $0x4,%sp
            number = number * 10 + save -'0';
    82b8:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
    82bd:	66 89 d0             	mov    %dx,%ax
    82c0:	66 c1 e0 02          	shl    $0x2,%ax
    82c4:	66 01 d0             	add    %dx,%ax
    82c7:	66 01 c0             	add    %ax,%ax
    82ca:	66 89 c2             	mov    %ax,%dx
    82cd:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    82d3:	66 01 d0             	add    %dx,%ax
    82d6:	66 83 e8 30          	sub    $0x30,%ax
    82da:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
           // printsint(number);
            continue;
    82df:	eb 5e                	jmp    833f <terminal+0x492>
        }
        else{
           printc(save);
    82e1:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    82e7:	66 50                	push   %ax
    82e9:	66 e8 bd 0b          	callw  8eaa <prints+0x50>
    82ed:	00 00                	add    %al,(%eax)
    82ef:	66 83 c4 04          	add    $0x4,%sp
           // if(save == '-' || save == 'q' || save == 'h' || save == 'l' || save =='s'){
            if(index_of_str < 10){
    82f3:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    82f9:	7f 2c                	jg     8327 <terminal+0x47a>
                recived[index_of_str] =  save;
    82fb:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8300:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8305:	66 01 c2             	add    %ax,%dx
    8308:	67 8a 45 af          	mov    -0x51(%di),%al
    830c:	67 88 02             	mov    %al,(%bp,%si)
                index_of_str ++;
    830f:	67 66 ff 45 f0       	incw   -0x10(%di)
                recived[index_of_str] = 0;
    8314:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8319:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    831e:	66 01 d0             	add    %dx,%ax
    8321:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8325:	eb 18                	jmp    833f <terminal+0x492>
            }
            else if(index_of_str >= 10){
    8327:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    832d:	7e 10                	jle    833f <terminal+0x492>
                prints("not added");
    832f:	66 68 90 a4          	pushw  $0xa490
    8333:	00 00                	add    %al,(%eax)
    8335:	66 e8 1f 0b          	callw  8e58 <print+0x8f>
    8339:	00 00                	add    %al,(%eax)
    833b:	66 83 c4 04          	add    $0x4,%sp
    int number = 0;
    int k = 0;
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    833f:	67 66 83 7d bc 00    	cmpw   $0x0,-0x44(%di)
    8345:	0f 85 88 fc 66 89    	jne    89677fd3 <_end+0x8966ccb3>
    834b:	f4                   	hlt    
            else if(index_of_str >= 10){
                prints("not added");
            }
        }
    }
}
    834c:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8351:	66 5b                	pop    %bx
    8353:	66 5e                	pop    %si
    8355:	66 5f                	pop    %di
    8357:	66 5d                	pop    %bp
    8359:	66 c3                	retw   

0000835b <run>:
void run(int queue[],int size){
    835b:	66 55                	push   %bp
    835d:	66 89 e5             	mov    %sp,%bp
    8360:	66 83 ec 04          	sub    $0x4,%sp
    int j = 0;
    8364:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    836b:	00 00                	add    %al,(%eax)
    clearscreen();
    836d:	66 e8 13 01          	callw  8484 <run+0x129>
    8371:	00 00                	add    %al,(%eax)
    for(j = 0;j < size;j ++){
    8373:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    837a:	00 00                	add    %al,(%eax)
    837c:	e9 f5 00 67 66       	jmp    66678476 <_end+0x6666d156>
        //_delay();
        //_load_userProgram(queue[j]);
        //_delay();
        if(queue[j] == 1){
    8381:	8b 45 fc             	mov    -0x4(%ebp),%eax
    8384:	67 66 8d 14          	lea    (%si),%dx
    8388:	85 00                	test   %eax,(%eax)
    838a:	00 00                	add    %al,(%eax)
    838c:	00 67 66             	add    %ah,0x66(%edi)
    838f:	8b 45 08             	mov    0x8(%ebp),%eax
    8392:	66 01 d0             	add    %dx,%ax
    8395:	67 66 8b 00          	mov    (%bx,%si),%ax
    8399:	66 83 f8 01          	cmp    $0x1,%ax
    839d:	75 10                	jne    83af <run+0x54>
           // _loadP(10,25,0x1000);
             _RunProgress(0x1000);
    839f:	66 68 00 10          	pushw  $0x1000
    83a3:	00 00                	add    %al,(%eax)
    83a5:	66 e8 53 02          	callw  85fc <_loadP+0x35>
    83a9:	00 00                	add    %al,(%eax)
    83ab:	66 83 c4 04          	add    $0x4,%sp
        }
        if(queue[j] == 2){
    83af:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    83b4:	67 66 8d 14          	lea    (%si),%dx
    83b8:	85 00                	test   %eax,(%eax)
    83ba:	00 00                	add    %al,(%eax)
    83bc:	00 67 66             	add    %ah,0x66(%edi)
    83bf:	8b 45 08             	mov    0x8(%ebp),%eax
    83c2:	66 01 d0             	add    %dx,%ax
    83c5:	67 66 8b 00          	mov    (%bx,%si),%ax
    83c9:	66 83 f8 02          	cmp    $0x2,%ax
    83cd:	75 10                	jne    83df <run+0x84>
            //_loadP(10,35,0x2000);
            _RunProgress(0x2000);
    83cf:	66 68 00 20          	pushw  $0x2000
    83d3:	00 00                	add    %al,(%eax)
    83d5:	66 e8 23 02          	callw  85fc <_loadP+0x35>
    83d9:	00 00                	add    %al,(%eax)
    83db:	66 83 c4 04          	add    $0x4,%sp
        }
        if(queue[j] == 3){
    83df:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    83e4:	67 66 8d 14          	lea    (%si),%dx
    83e8:	85 00                	test   %eax,(%eax)
    83ea:	00 00                	add    %al,(%eax)
    83ec:	00 67 66             	add    %ah,0x66(%edi)
    83ef:	8b 45 08             	mov    0x8(%ebp),%eax
    83f2:	66 01 d0             	add    %dx,%ax
    83f5:	67 66 8b 00          	mov    (%bx,%si),%ax
    83f9:	66 83 f8 03          	cmp    $0x3,%ax
    83fd:	75 10                	jne    840f <run+0xb4>
           // _loadP(10,45,0x3000);
            _RunProgress(0x3000);
    83ff:	66 68 00 30          	pushw  $0x3000
    8403:	00 00                	add    %al,(%eax)
    8405:	66 e8 f3 01          	callw  85fc <_loadP+0x35>
    8409:	00 00                	add    %al,(%eax)
    840b:	66 83 c4 04          	add    $0x4,%sp
        }
        if(queue[j] == 4){
    840f:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8414:	67 66 8d 14          	lea    (%si),%dx
    8418:	85 00                	test   %eax,(%eax)
    841a:	00 00                	add    %al,(%eax)
    841c:	00 67 66             	add    %ah,0x66(%edi)
    841f:	8b 45 08             	mov    0x8(%ebp),%eax
    8422:	66 01 d0             	add    %dx,%ax
    8425:	67 66 8b 00          	mov    (%bx,%si),%ax
    8429:	66 83 f8 04          	cmp    $0x4,%ax
    842d:	75 10                	jne    843f <run+0xe4>
            //_loadP(10,55,0x4000);
            _RunProgress(0x4000);
    842f:	66 68 00 40          	pushw  $0x4000
    8433:	00 00                	add    %al,(%eax)
    8435:	66 e8 c3 01          	callw  85fc <_loadP+0x35>
    8439:	00 00                	add    %al,(%eax)
    843b:	66 83 c4 04          	add    $0x4,%sp
        }
        if(queue[j] == 6){
    843f:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8444:	67 66 8d 14          	lea    (%si),%dx
    8448:	85 00                	test   %eax,(%eax)
    844a:	00 00                	add    %al,(%eax)
    844c:	00 67 66             	add    %ah,0x66(%edi)
    844f:	8b 45 08             	mov    0x8(%ebp),%eax
    8452:	66 01 d0             	add    %dx,%ax
    8455:	67 66 8b 00          	mov    (%bx,%si),%ax
    8459:	66 83 f8 06          	cmp    $0x6,%ax
    845d:	75 10                	jne    846f <run+0x114>
            _RunProgress(0x7000);
    845f:	66 68 00 70          	pushw  $0x7000
    8463:	00 00                	add    %al,(%eax)
    8465:	66 e8 93 01          	callw  85fc <_loadP+0x35>
    8469:	00 00                	add    %al,(%eax)
    846b:	66 83 c4 04          	add    $0x4,%sp
    }
}
void run(int queue[],int size){
    int j = 0;
    clearscreen();
    for(j = 0;j < size;j ++){
    846f:	67 66 ff 45 fc       	incw   -0x4(%di)
    8474:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8479:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    847e:	0f 8c fd fe 66 c9    	jl     c9678381 <_end+0xc966d061>
    //}
    
   // clearscreen();;
   // thread_join();
    //Initial_Int_08h();
    8484:	66 c3                	retw   

00008486 <clearscreen>:
#include "use.h"
//====================================================
//                封装清屏函数
//====================================================
void clearscreen(){
    8486:	66 55                	push   %bp
    8488:	66 89 e5             	mov    %sp,%bp
	_clearscreen();//C调用汇编时会压入四个字节，必须考虑到这个，写出newret，是pop edx,而非 pop dx；
    848b:	66 e8 c3 00          	callw  8552 <end_for_copy+0x5>
    848f:	00 00                	add    %al,(%eax)
	//__asm__("pop %ax");
	return ;
    8491:	90                   	nop
}
    8492:	66 5d                	pop    %bp
    8494:	66 c3                	retw   

00008496 <Initial_Int>:
	}
}*/
//====================================================
//                封装中断初始化函数
//====================================================
void Initial_Int(){
    8496:	66 55                	push   %bp
    8498:	66 89 e5             	mov    %sp,%bp
	_initialInt();
    849b:	66 e8 e0 04          	callw  897f <_SetINT3Ah+0x17>
    849f:	00 00                	add    %al,(%eax)
	return;
    84a1:	90                   	nop
}
    84a2:	66 5d                	pop    %bp
    84a4:	66 c3                	retw   

000084a6 <Initial_Int_09h>:
void Initial_Int_09h(){
    84a6:	66 55                	push   %bp
    84a8:	66 89 e5             	mov    %sp,%bp
	_initialInt_09h();
    84ab:	66 e8 ba 06          	callw  8b69 <_initialInt+0x1e8>
    84af:	00 00                	add    %al,(%eax)
}
    84b1:	66 5d                	pop    %bp
    84b3:	66 c3                	retw   

000084b5 <Initial_Int_08h>:
void Initial_Int_08h(){
    84b5:	66 55                	push   %bp
    84b7:	66 89 e5             	mov    %sp,%bp
	_initialInt_08h();
    84ba:	66 e8 e5 06          	callw  8ba3 <_initialInt_09h+0x38>
    84be:	00 00                	add    %al,(%eax)
}
    84c0:	66 5d                	pop    %bp
    84c2:	66 c3                	retw   

000084c4 <loadProg>:
void loadProg(int count,int begin,int memory_postion){
    84c4:	66 55                	push   %bp
    84c6:	66 89 e5             	mov    %sp,%bp
    _loadP(count,begin,memory_postion);
    84c9:	67 66 ff 75 10       	pushw  0x10(%di)
    84ce:	67 66 ff 75 0c       	pushw  0xc(%di)
    84d3:	67 66 ff 75 08       	pushw  0x8(%di)
    84d8:	66 e8 e9 00          	callw  85c5 <_setPoint+0x15>
    84dc:	00 00                	add    %al,(%eax)
    84de:	66 83 c4 0c          	add    $0xc,%sp
    84e2:	66 c9                	leavew 
    84e4:	66 c3                	retw   
    84e6:	66 90                	xchg   %ax,%ax
    84e8:	66 90                	xchg   %ax,%ax
    84ea:	66 90                	xchg   %ax,%ax
    84ec:	66 90                	xchg   %ax,%ax
    84ee:	66 90                	xchg   %ax,%ax

000084f0 <count>:
    84f0:	08 2d 00 00 00 00    	or     %ch,0x0

000084f1 <alpha>:
    84f1:	2d 00 00 00 00       	sub    $0x0,%eax

000084f2 <int_09_saved>:
    84f2:	00 00                	add    %al,(%eax)
	...

000084f6 <program_saved>:
    84f6:	70 00                	jo     84f8 <program_saved+0x2>
	...

000084fa <ds_saved>:
    84fa:	7c 00                	jl     84fc <ds_saved+0x2>
	...

000084fe <return_save>:
    84fe:	88 00                	mov    %al,(%eax)

00008500 <esi_save>:
    8500:	96                   	xchg   %eax,%esi
    8501:	00 00                	add    %al,(%eax)
	...

00008504 <temp>:
    8504:	e8 03 b4 00 00       	call   1390c <_end+0x85ec>

00008506 <kernelesp_saved>:
    8506:	b4 00                	mov    $0x0,%ah
	...

0000850a <esp_saved_inkernel>:
    850a:	c8 00 00 00          	enter  $0x0,$0x0

0000850e <esp_saved_in_user>:
    850e:	f0 00 00             	lock add %al,(%eax)
	...

00008512 <ss_saved_in_user>:
    8512:	2c 01                	sub    $0x1,%al
	...

00008516 <color>:
    8516:	01 c2                	add    %eax,%edx

00008517 <ss_saved_fork>:
    8517:	c2 01 00             	ret    $0x1
	...

0000851b <retaddr>:
    851b:	58                   	pop    %eax
    851c:	02 00                	add    (%eax),%al
	...

0000851f <Message31>:
    851f:	74 69                	je     858a <_readinput+0x9>
    8521:	6d                   	insl   (%dx),%es:(%edi)
    8522:	65 3a 20             	cmp    %gs:(%eax),%ah

00008525 <_sys_stack_copy>:
    8525:	c8 00 00 00          	enter  $0x0,$0x0
    8529:	8e d0                	mov    %eax,%ss
    852b:	60                   	pusha  
    852c:	1e                   	push   %ds
    852d:	8b 46 06             	mov    0x6(%esi),%eax
    8530:	8b 56 0a             	mov    0xa(%esi),%edx
    8533:	8b 4e 0e             	mov    0xe(%esi),%ecx
    8536:	8c db                	mov    %ds,%ebx

00008538 <while_loop1>:
    8538:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
    853e:	8e d8                	mov    %eax,%ds
    8540:	67 8b 1a             	mov    (%bp,%si),%ebx
    8543:	8e d9                	mov    %ecx,%ds
    8545:	67 89 1a             	mov    %ebx,(%bp,%si)
    8548:	83 c2 02             	add    $0x2,%edx
    854b:	eb eb                	jmp    8538 <while_loop1>

0000854d <end_for_copy>:
    854d:	1f                   	pop    %ds
    854e:	61                   	popa   
    854f:	c9                   	leave  
    8550:	66 5a                	pop    %dx
    8552:	ff e2                	jmp    *%edx

00008554 <_clearscreen>:
    8554:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    8559:	66 5a                	pop    %dx
    855b:	ff e2                	jmp    *%edx

0000855d <_printchar>:
    855d:	c8 00 00 00          	enter  $0x0,$0x0
    8561:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
    8566:	57                   	push   %edi
    8567:	66 8b 4e 06          	mov    0x6(%esi),%cx
    856b:	66 8b 7e 0a          	mov    0xa(%esi),%di
    856f:	66 8b 56 0e          	mov    0xe(%esi),%dx
    8573:	88 d5                	mov    %dl,%ch
    8575:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
    857c:	00 66 5a             	add    %ah,0x5a(%esi)
    857f:	ff e2                	jmp    *%edx

00008581 <_readinput>:
    8581:	c8 04 00 00          	enter  $0x4,$0x0
    8585:	b4 00                	mov    $0x0,%ah
    8587:	cd 16                	int    $0x16
    8589:	b4 00                	mov    $0x0,%ah
    858b:	66 67 89 04          	mov    %ax,(%si)
    858f:	24 66                	and    $0x66,%al
    8591:	67 8b 04             	mov    (%si),%eax
    8594:	24 c9                	and    $0xc9,%al
    8596:	66 5a                	pop    %dx
    8598:	ff e2                	jmp    *%edx

0000859a <_showchar>:
    859a:	c8 00 00 00          	enter  $0x0,$0x0
    859e:	50                   	push   %eax
    859f:	53                   	push   %ebx
    85a0:	8b 46 06             	mov    0x6(%esi),%eax
    85a3:	b4 0e                	mov    $0xe,%ah
    85a5:	b3 00                	mov    $0x0,%bl
    85a7:	cd 10                	int    $0x10
    85a9:	5b                   	pop    %ebx
    85aa:	58                   	pop    %eax
    85ab:	c9                   	leave  
    85ac:	66 5a                	pop    %dx
    85ae:	ff e2                	jmp    *%edx

000085b0 <_setPoint>:
    85b0:	c8 00 00 00          	enter  $0x0,$0x0
    85b4:	53                   	push   %ebx
    85b5:	b7 00                	mov    $0x0,%bh
    85b7:	8a 77 06             	mov    0x6(%edi),%dh
    85ba:	8a 57 0a             	mov    0xa(%edi),%dl
    85bd:	b4 02                	mov    $0x2,%ah
    85bf:	cd 10                	int    $0x10
    85c1:	5b                   	pop    %ebx
    85c2:	c9                   	leave  
    85c3:	66 5a                	pop    %dx
    85c5:	ff e2                	jmp    *%edx

000085c7 <_loadP>:
    85c7:	c8 00 00 00          	enter  $0x0,$0x0
    85cb:	60                   	pusha  
    85cc:	06                   	push   %es
    85cd:	1e                   	push   %ds
    85ce:	8c c8                	mov    %cs,%eax
    85d0:	8e d8                	mov    %eax,%ds
    85d2:	8b 46 0e             	mov    0xe(%esi),%eax
    85d5:	8e c0                	mov    %eax,%es
    85d7:	b2 00                	mov    $0x0,%dl
    85d9:	8b 46 0a             	mov    0xa(%esi),%eax
    85dc:	b3 12                	mov    $0x12,%bl
    85de:	f6 f3                	div    %bl
    85e0:	88 e1                	mov    %ah,%cl
    85e2:	30 e4                	xor    %ah,%ah
    85e4:	b3 02                	mov    $0x2,%bl
    85e6:	f6 f3                	div    %bl
    85e8:	88 e6                	mov    %ah,%dh
    85ea:	88 c5                	mov    %al,%ch
    85ec:	8a 46 06             	mov    0x6(%esi),%al
    85ef:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
    85f4:	cd 13                	int    $0x13
    85f6:	1f                   	pop    %ds
    85f7:	07                   	pop    %es
    85f8:	61                   	popa   
    85f9:	c9                   	leave  
    85fa:	66 5a                	pop    %dx
    85fc:	ff e2                	jmp    *%edx

000085fe <_RunProgress>:
    85fe:	c8 00 00 00          	enter  $0x0,$0x0
    8602:	8c c8                	mov    %cs,%eax
    8604:	8e d8                	mov    %eax,%ds
    8606:	8e c0                	mov    %eax,%es
    8608:	8b 5e 06             	mov    0x6(%esi),%ebx
    860b:	c7 06 f6 84 00 01    	movl   $0x10084f6,(%esi)
    8611:	89 1e                	mov    %ebx,(%esi)
    8613:	f8                   	clc    
    8614:	84 66 89             	test   %ah,-0x77(%esi)
    8617:	26 0a 85 26 ff 1e f6 	or     %es:-0x9e100da(%ebp),%al
    861e:	84 8c c8 8e d8 8e c0 	test   %cl,-0x3f712772(%eax,%ecx,8)

0000861f <S>:
    861f:	8c c8                	mov    %cs,%eax
    8621:	8e d8                	mov    %eax,%ds
    8623:	8e c0                	mov    %eax,%es
    8625:	8e d0                	mov    %eax,%ss
    8627:	66 8b 26             	mov    (%esi),%sp
    862a:	0a 85 b4 00 cd 16    	or     0x16cd00b4(%ebp),%al
    8630:	c9                   	leave  
    8631:	66 5a                	pop    %dx
    8633:	ff e2                	jmp    *%edx

00008635 <_Schedule_once>:
    8635:	c8 00 00 00          	enter  $0x0,$0x0
    8639:	cd 41                	int    $0x41
    863b:	c9                   	leave  
    863c:	66 5a                	pop    %dx
    863e:	ff e2                	jmp    *%edx

00008640 <_fork_user>:
    8640:	c8 00 00 00          	enter  $0x0,$0x0
    8644:	cd 39                	int    $0x39
    8646:	c9                   	leave  
    8647:	66 5a                	pop    %dx
    8649:	ff e2                	jmp    *%edx

0000864b <_Schedule>:
    864b:	c8 00 00 00          	enter  $0x0,$0x0
    864f:	16                   	push   %ss
    8650:	cd 42                	int    $0x42
    8652:	17                   	pop    %ss
    8653:	c9                   	leave  
    8654:	66 5a                	pop    %dx
    8656:	ff e2                	jmp    *%edx

00008658 <_wait>:
    8658:	c8 00 00 00          	enter  $0x0,$0x0
    865c:	cd 43                	int    $0x43
    865e:	c9                   	leave  
    865f:	66 5a                	pop    %dx
    8661:	ff e2                	jmp    *%edx

00008663 <_exit>:
    8663:	c8 00 00 00          	enter  $0x0,$0x0
    8667:	66 67 8b 45 06       	mov    0x6(%di),%ax
    866c:	66 50                	push   %ax
    866e:	cd 3a                	int    $0x3a
    8670:	c9                   	leave  
    8671:	66 5a                	pop    %dx
    8673:	ff e2                	jmp    *%edx

00008675 <_SetINT20h>:
    8675:	fa                   	cli    
    8676:	1e                   	push   %ds
    8677:	06                   	push   %es
    8678:	8c c8                	mov    %cs,%eax
    867a:	8e d8                	mov    %eax,%ds
    867c:	8e c0                	mov    %eax,%es
    867e:	8c 16                	mov    %ss,(%esi)
    8680:	12 85 8e d0 66 89    	adc    -0x76992f72(%ebp),%al
    8686:	26                   	es
    8687:	0e                   	push   %cs
    8688:	85 66 8b             	test   %esp,-0x75(%esi)
    868b:	26 0a 85 53 51 52 b4 	or     %es:-0x4badaead(%ebp),%al
    8692:	01 cd                	add    %ecx,%ebp
    8694:	16                   	push   %ss
    8695:	5a                   	pop    %edx
    8696:	59                   	pop    %ecx
    8697:	5b                   	pop    %ebx
    8698:	8e 16                	mov    (%esi),%ss
    869a:	12 85 66 8b 26 0e    	adc    0xe268b66(%ebp),%al
    86a0:	85 07                	test   %eax,(%edi)
    86a2:	1f                   	pop    %ds
    86a3:	74 0a                	je     86af <going_on>
    86a5:	50                   	push   %eax
    86a6:	b4 00                	mov    $0x0,%ah
    86a8:	cd 16                	int    $0x16
    86aa:	58                   	pop    %eax
    86ab:	fb                   	sti    
    86ac:	cd 38                	int    $0x38
    86ae:	cf                   	iret   

000086af <going_on>:
    86af:	fb                   	sti    
    86b0:	cf                   	iret   

000086b1 <_SetINT08h_turn_around>:
    86b1:	fa                   	cli    
    86b2:	e8 2b 05 6a 00       	call   6a8be2 <_end+0x69d8c2>
    86b7:	e8 f9 12 e8 97       	call   97e899b5 <_end+0x97e7e695>
    86bc:	05 b0 20 e6 20       	add    $0x20e620b0,%eax
    86c1:	e6 a0                	out    %al,$0xa0
    86c3:	fb                   	sti    
    86c4:	cf                   	iret   

000086c5 <_SetINT08h>:
    86c5:	60                   	pusha  
    86c6:	0f a8                	push   %gs
    86c8:	1e                   	push   %ds
    86c9:	06                   	push   %es
    86ca:	16                   	push   %ss
    86cb:	8c c8                	mov    %cs,%eax
    86cd:	8e c0                	mov    %eax,%es
    86cf:	8e d8                	mov    %eax,%ds
    86d1:	8e d0                	mov    %eax,%ss
    86d3:	fe 0e                	decb   (%esi)
    86d5:	f0 84 75 4f          	lock test %dh,0x4f(%ebp)

000086d9 <notc>:
    86d9:	80 3e f1             	cmpb   $0xf1,(%esi)
    86dc:	84 2d 75 07 c6 06    	test   %ch,0x6c60775
    86e2:	f1                   	icebp  
    86e3:	84 5c eb 2a          	test   %bl,0x2a(%ebx,%ebp,8)

000086e7 <changleft>:
    86e7:	80 3e f1             	cmpb   $0xf1,(%esi)
    86ea:	84 5c 75 07          	test   %bl,0x7(%ebp,%esi,2)
    86ee:	c6 06 f1             	movb   $0xf1,(%esi)
    86f1:	84 7c eb 1c          	test   %bh,0x1c(%ebx,%ebp,8)

000086f5 <changright>:
    86f5:	80 3e f1             	cmpb   $0xf1,(%esi)
    86f8:	84 7c 75 07          	test   %bh,0x7(%ebp,%esi,2)
    86fc:	c6 06 f1             	movb   $0xf1,(%esi)
    86ff:	84 2f                	test   %ch,(%edi)
    8701:	eb 0e                	jmp    8711 <show>

00008703 <changheng>:
    8703:	80 3e f1             	cmpb   $0xf1,(%esi)
    8706:	84 2f                	test   %ch,(%edi)
    8708:	75 cf                	jne    86d9 <notc>
    870a:	c6 06 f1             	movb   $0xf1,(%esi)
    870d:	84 2d eb 00 b9 00    	test   %ch,0xb900eb

00008711 <show>:
    8711:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    8716:	b4 09                	mov    $0x9,%ah
    8718:	8a 26                	mov    (%esi),%ah
    871a:	16                   	push   %ss
    871b:	85 a0 f1 84 65 a3    	test   %esp,-0x5c9a7b0f(%eax)
    8721:	8e 00                	mov    (%eax),%es
    8723:	c6 06 f0             	movb   $0xf0,(%esi)
    8726:	84 08                	test   %cl,(%eax)

00008728 <end>:
    8728:	b0 20                	mov    $0x20,%al
    872a:	e6 20                	out    %al,$0x20
    872c:	e6 a0                	out    %al,$0xa0
    872e:	17                   	pop    %ss
    872f:	07                   	pop    %es
    8730:	1f                   	pop    %ds
    8731:	0f a9                	pop    %gs
    8733:	61                   	popa   
    8734:	fb                   	sti    
    8735:	cf                   	iret   

00008736 <_SetINT09h>:
    8736:	fa                   	cli    
    8737:	1e                   	push   %ds
    8738:	06                   	push   %es
    8739:	8c c8                	mov    %cs,%eax
    873b:	8e d8                	mov    %eax,%ds
    873d:	8e c0                	mov    %eax,%es
    873f:	8e d0                	mov    %eax,%ss
    8741:	8c 16                	mov    %ss,(%esi)
    8743:	12 85 8e d0 66 89    	adc    -0x76992f72(%ebp),%al
    8749:	26                   	es
    874a:	0e                   	push   %cs
    874b:	85 66 8b             	test   %esp,-0x75(%esi)
    874e:	26 0a 85 60 b9 00 b8 	or     %es:-0x47ff46a0(%ebp),%al
    8755:	8e e9                	mov    %ecx,%gs
    8757:	8a 26                	mov    (%esi),%ah
    8759:	16                   	push   %ss
    875a:	85 b0 4f 65 a3 78    	test   %esi,0x78a3654f(%eax)
    8760:	00 b0 55 65 a3 7a    	add    %dh,0x7aa36555(%eax)
    8766:	00 b0 43 65 a3 7c    	add    %dh,0x7ca36543(%eax)
    876c:	00 b0 48 65 a3 7e    	add    %dh,0x7ea36548(%eax)
    8772:	00 b0 53 65 a3 80    	add    %dh,-0x7f5c9aad(%eax)
    8778:	00 b0 21 65 a3 82    	add    %dh,-0x7d5c9adf(%eax)
    877e:	00 b0 4f 65 a3 84    	add    %dh,-0x7b5c9ab1(%eax)
    8784:	00 b0 55 65 a3 86    	add    %dh,-0x795c9aab(%eax)
    878a:	00 b0 43 65 a3 88    	add    %dh,-0x775c9abd(%eax)
    8790:	00 b0 48 65 a3 8a    	add    %dh,-0x755c9ab8(%eax)
    8796:	00 b0 21 65 a3 8c    	add    %dh,-0x735c9adf(%eax)
    879c:	00 61 80             	add    %ah,-0x80(%ecx)
    879f:	fc                   	cld    
    87a0:	06                   	push   %es
    87a1:	75 06                	jne    87a9 <cont>
    87a3:	b4 01                	mov    $0x1,%ah
    87a5:	88 26                	mov    %ah,(%esi)
    87a7:	16                   	push   %ss
    87a8:	85 fe                	test   %edi,%esi

000087a9 <cont>:
    87a9:	fe 06                	incb   (%esi)
    87ab:	16                   	push   %ss
    87ac:	85 8c c8 8e c0 fb 9c 	test   %ecx,-0x63043f72(%eax,%ecx,8)
    87b3:	26 ff 1e             	lcall  *%es:(%esi)
    87b6:	f2 84 8e 16 12 85 66 	repnz test %cl,0x66851216(%esi)
    87bd:	8b 26                	mov    (%esi),%esp
    87bf:	0e                   	push   %cs
    87c0:	85 07                	test   %eax,(%edi)
    87c2:	1f                   	pop    %ds
    87c3:	cf                   	iret   

000087c4 <_SetINT33h>:
    87c4:	fa                   	cli    
    87c5:	c8 00 00 00          	enter  $0x0,$0x0
    87c9:	60                   	pusha  
    87ca:	1e                   	push   %ds
    87cb:	0f a8                	push   %gs
    87cd:	06                   	push   %es
    87ce:	8c c8                	mov    %cs,%eax
    87d0:	8e c0                	mov    %eax,%es
    87d2:	8e d8                	mov    %eax,%ds
    87d4:	8c 16                	mov    %ss,(%esi)
    87d6:	12 85 8e d0 66 89    	adc    -0x76992f72(%ebp),%al
    87dc:	26                   	es
    87dd:	0e                   	push   %cs
    87de:	85 66 8b             	test   %esp,-0x75(%esi)
    87e1:	26 0a 85 6a 00 e8 e8 	or     %es:-0x1717ff96(%ebp),%al
    87e8:	0b 8e 16 12 85 66    	or     0x66851216(%esi),%ecx
    87ee:	8b 26                	mov    (%esi),%esp
    87f0:	0e                   	push   %cs
    87f1:	85 07                	test   %eax,(%edi)
    87f3:	0f a9                	pop    %gs
    87f5:	1f                   	pop    %ds
    87f6:	61                   	popa   
    87f7:	fb                   	sti    
    87f8:	c9                   	leave  
    87f9:	cf                   	iret   

000087fa <_SetINT34h>:
    87fa:	fa                   	cli    
    87fb:	c8 00 00 00          	enter  $0x0,$0x0
    87ff:	60                   	pusha  
    8800:	1e                   	push   %ds
    8801:	0f a8                	push   %gs
    8803:	06                   	push   %es
    8804:	8c c8                	mov    %cs,%eax
    8806:	8e c0                	mov    %eax,%es
    8808:	8e d8                	mov    %eax,%ds
    880a:	8c 16                	mov    %ss,(%esi)
    880c:	12 85 8e d0 66 89    	adc    -0x76992f72(%ebp),%al
    8812:	26                   	es
    8813:	0e                   	push   %cs
    8814:	85 66 8b             	test   %esp,-0x75(%esi)
    8817:	26 0a 85 6a 00 e8 62 	or     %es:0x62e8006a(%ebp),%al
    881e:	0c 8e                	or     $0x8e,%al
    8820:	16                   	push   %ss
    8821:	12 85 66 8b 26 0e    	adc    0xe268b66(%ebp),%al
    8827:	85 07                	test   %eax,(%edi)
    8829:	0f a9                	pop    %gs
    882b:	1f                   	pop    %ds
    882c:	61                   	popa   
    882d:	fb                   	sti    
    882e:	c9                   	leave  
    882f:	cf                   	iret   

00008830 <_SetINT35h>:
    8830:	60                   	pusha  
    8831:	1e                   	push   %ds
    8832:	0f a8                	push   %gs
    8834:	06                   	push   %es
    8835:	8c c8                	mov    %cs,%eax
    8837:	8e c0                	mov    %eax,%es
    8839:	8e d8                	mov    %eax,%ds
    883b:	8c 16                	mov    %ss,(%esi)
    883d:	12 85 8e d0 66 89    	adc    -0x76992f72(%ebp),%al
    8843:	26                   	es
    8844:	0e                   	push   %cs
    8845:	85 66 8b             	test   %esp,-0x75(%esi)
    8848:	26 0a 85 6a 00 e8 10 	or     %es:0x10e8006a(%ebp),%al
    884f:	0d 8e 16 12 85       	or     $0x8512168e,%eax
    8854:	66 8b 26             	mov    (%esi),%sp
    8857:	0e                   	push   %cs
    8858:	85 07                	test   %eax,(%edi)
    885a:	0f a9                	pop    %gs
    885c:	1f                   	pop    %ds
    885d:	61                   	popa   
    885e:	fb                   	sti    
    885f:	cf                   	iret   

00008860 <_SetINT36h>:
    8860:	60                   	pusha  
    8861:	1e                   	push   %ds
    8862:	0f a8                	push   %gs
    8864:	06                   	push   %es
    8865:	8c c8                	mov    %cs,%eax
    8867:	8e c0                	mov    %eax,%es
    8869:	8e d8                	mov    %eax,%ds
    886b:	8c 16                	mov    %ss,(%esi)
    886d:	12 85 8e d0 66 89    	adc    -0x76992f72(%ebp),%al
    8873:	26                   	es
    8874:	0e                   	push   %cs
    8875:	85 66 8b             	test   %esp,-0x75(%esi)
    8878:	26 0a 85 6a 00 e8 66 	or     %es:0x66e8006a(%ebp),%al
    887f:	0d 8e 16 12 85       	or     $0x8512168e,%eax
    8884:	66 8b 26             	mov    (%esi),%sp
    8887:	0e                   	push   %cs
    8888:	85 07                	test   %eax,(%edi)
    888a:	0f a9                	pop    %gs
    888c:	1f                   	pop    %ds
    888d:	61                   	popa   
    888e:	fb                   	sti    
    888f:	cf                   	iret   

00008890 <_SetINT21h>:
    8890:	c8 00 00 00          	enter  $0x0,$0x0
    8894:	60                   	pusha  
    8895:	1e                   	push   %ds
    8896:	0f a8                	push   %gs
    8898:	06                   	push   %es
    8899:	8c c8                	mov    %cs,%eax
    889b:	8e c0                	mov    %eax,%es
    889d:	8e d8                	mov    %eax,%ds
    889f:	8b 46 08             	mov    0x8(%esi),%eax
    88a2:	80 fc 00             	cmp    $0x0,%ah
    88a5:	74 16                	je     88bd <fn0>
    88a7:	80 fc 01             	cmp    $0x1,%ah
    88aa:	74 21                	je     88cd <fn1>
    88ac:	80 fc 02             	cmp    $0x2,%ah
    88af:	74 3d                	je     88ee <fn2>
    88b1:	80 fc 03             	cmp    $0x3,%ah
    88b4:	74 5f                	je     8915 <fn3>
    88b6:	07                   	pop    %es
    88b7:	0f a9                	pop    %gs
    88b9:	1f                   	pop    %ds
    88ba:	61                   	popa   
    88bb:	c9                   	leave  
    88bc:	cf                   	iret   

000088bd <fn0>:
    88bd:	8b 46 0a             	mov    0xa(%esi),%eax
    88c0:	b4 0e                	mov    $0xe,%ah
    88c2:	b3 00                	mov    $0x0,%bl
    88c4:	cd 10                	int    $0x10
    88c6:	07                   	pop    %es
    88c7:	0f a9                	pop    %gs
    88c9:	1f                   	pop    %ds
    88ca:	61                   	popa   
    88cb:	c9                   	leave  
    88cc:	cf                   	iret   

000088cd <fn1>:
    88cd:	66 83 ec 04          	sub    $0x4,%sp
    88d1:	b4 00                	mov    $0x0,%ah
    88d3:	cd 16                	int    $0x16
    88d5:	b4 00                	mov    $0x0,%ah
    88d7:	66 67 89 04          	mov    %ax,(%si)
    88db:	24 66                	and    $0x66,%al
    88dd:	67 8b 04             	mov    (%si),%eax
    88e0:	24 66                	and    $0x66,%al
    88e2:	83 c4 04             	add    $0x4,%esp
    88e5:	8e e0                	mov    %eax,%fs
    88e7:	07                   	pop    %es
    88e8:	0f a9                	pop    %gs
    88ea:	1f                   	pop    %ds
    88eb:	61                   	popa   
    88ec:	c9                   	leave  
    88ed:	cf                   	iret   

000088ee <fn2>:
    88ee:	66 83 ec 04          	sub    $0x4,%sp
    88f2:	b4 00                	mov    $0x0,%ah
    88f4:	cd 16                	int    $0x16
    88f6:	b4 00                	mov    $0x0,%ah
    88f8:	66 67 89 04          	mov    %ax,(%si)
    88fc:	24 66                	and    $0x66,%al
    88fe:	67 8b 04             	mov    (%si),%eax
    8901:	24 b4                	and    $0xb4,%al
    8903:	0e                   	push   %cs
    8904:	b3 00                	mov    $0x0,%bl
    8906:	cd 10                	int    $0x10
    8908:	66 83 c4 04          	add    $0x4,%sp
    890c:	8e e0                	mov    %eax,%fs
    890e:	07                   	pop    %es
    890f:	0f a9                	pop    %gs
    8911:	1f                   	pop    %ds
    8912:	61                   	popa   
    8913:	c9                   	leave  
    8914:	cf                   	iret   

00008915 <fn3>:
    8915:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    891a:	07                   	pop    %es
    891b:	0f a9                	pop    %gs
    891d:	1f                   	pop    %ds
    891e:	61                   	popa   
    891f:	c9                   	leave  
    8920:	cf                   	iret   

00008921 <_SetINT37h>:
    8921:	fa                   	cli    
    8922:	e8 83 03 cf fa       	call   facf8caa <_end+0xfaced98a>

00008926 <_SetINT38h>:
    8926:	fa                   	cli    
    8927:	50                   	push   %eax
    8928:	1e                   	push   %ds
    8929:	8c c8                	mov    %cs,%eax
    892b:	8e d8                	mov    %eax,%ds
    892d:	6a 00                	push   $0x0
    892f:	e8 99 11 1f 58       	call   581f9acd <_end+0x581ee7ad>
    8934:	cf                   	iret   

00008935 <_SetINT39h>:
    8935:	fa                   	cli    
    8936:	c8 00 00 00          	enter  $0x0,$0x0
    893a:	1e                   	push   %ds
    893b:	6a 00                	push   $0x0
    893d:	8c c8                	mov    %cs,%eax
    893f:	8e d8                	mov    %eax,%ds
    8941:	e8 1f 13 1f c9       	call   c91f9c65 <_end+0xc91ee945>
    8946:	cf                   	iret   

00008947 <_SetINT41h>:
    8947:	fa                   	cli    
    8948:	e8 95 02 e8 06       	call   6e88be2 <_end+0x6e7d8c2>
    894d:	03 b0 20 e6 20 e6    	add    -0x19df19e0(%eax),%esi
    8953:	a0 fb cf fa c8       	mov    0xc8facffb,%al

00008956 <_SetINT43h>:
    8956:	fa                   	cli    
    8957:	c8 00 00 00          	enter  $0x0,$0x0
    895b:	1e                   	push   %ds
    895c:	6a 00                	push   $0x0
    895e:	8c c8                	mov    %cs,%eax
    8960:	8e d8                	mov    %eax,%ds
    8962:	e8 00 16 1f c9       	call   c91f9f67 <_end+0xc91eec47>
    8967:	cf                   	iret   

00008968 <_SetINT3Ah>:
    8968:	fa                   	cli    
    8969:	c8 00 00 00          	enter  $0x0,$0x0
    896d:	1e                   	push   %ds
    896e:	66 67 8b 45 08       	mov    0x8(%di),%ax
    8973:	66 50                	push   %ax
    8975:	6a 00                	push   $0x0
    8977:	8c c8                	mov    %cs,%eax
    8979:	8e d8                	mov    %eax,%ds
    897b:	e8 7a 15 1f c9       	call   c91f9efa <_end+0xc91eebda>
    8980:	cf                   	iret   

00008981 <_initialInt>:
    8981:	c8 00 00 00          	enter  $0x0,$0x0
    8985:	60                   	pusha  
    8986:	06                   	push   %es
    8987:	1e                   	push   %ds
    8988:	8c c8                	mov    %cs,%eax
    898a:	8e d8                	mov    %eax,%ds
    898c:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8991:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
    8996:	00 f7                	add    %dh,%bh
    8998:	e3 89                	jecxz  8923 <_SetINT37h+0x2>
    899a:	c7                   	(bad)  
    899b:	b8 75 86 26 89       	mov    $0x89268675,%eax
    89a0:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    89a5:	45                   	inc    %ebp
    89a6:	02 1f                	add    (%edi),%bl
    89a8:	07                   	pop    %es
    89a9:	61                   	popa   
    89aa:	60                   	pusha  
    89ab:	06                   	push   %es
    89ac:	1e                   	push   %ds
    89ad:	8c c8                	mov    %cs,%eax
    89af:	8e d8                	mov    %eax,%ds
    89b1:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    89b6:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
    89bb:	00 f7                	add    %dh,%bh
    89bd:	e3 89                	jecxz  8948 <_SetINT41h+0x1>
    89bf:	c7                   	(bad)  
    89c0:	b8 c4 87 26 89       	mov    $0x892687c4,%eax
    89c5:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    89ca:	45                   	inc    %ebp
    89cb:	02 1f                	add    (%edi),%bl
    89cd:	07                   	pop    %es
    89ce:	61                   	popa   
    89cf:	60                   	pusha  
    89d0:	06                   	push   %es
    89d1:	1e                   	push   %ds
    89d2:	8c c8                	mov    %cs,%eax
    89d4:	8e d8                	mov    %eax,%ds
    89d6:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    89db:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
    89e0:	00 f7                	add    %dh,%bh
    89e2:	e3 89                	jecxz  896d <_SetINT3Ah+0x5>
    89e4:	c7                   	(bad)  
    89e5:	b8 fa 87 26 89       	mov    $0x892687fa,%eax
    89ea:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    89ef:	45                   	inc    %ebp
    89f0:	02 1f                	add    (%edi),%bl
    89f2:	07                   	pop    %es
    89f3:	61                   	popa   
    89f4:	60                   	pusha  
    89f5:	06                   	push   %es
    89f6:	1e                   	push   %ds
    89f7:	8c c8                	mov    %cs,%eax
    89f9:	8e d8                	mov    %eax,%ds
    89fb:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8a00:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
    8a05:	00 f7                	add    %dh,%bh
    8a07:	e3 89                	jecxz  8992 <_initialInt+0x11>
    8a09:	c7                   	(bad)  
    8a0a:	b8 30 88 26 89       	mov    $0x89268830,%eax
    8a0f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8a14:	45                   	inc    %ebp
    8a15:	02 1f                	add    (%edi),%bl
    8a17:	07                   	pop    %es
    8a18:	61                   	popa   
    8a19:	60                   	pusha  
    8a1a:	06                   	push   %es
    8a1b:	1e                   	push   %ds
    8a1c:	8c c8                	mov    %cs,%eax
    8a1e:	8e d8                	mov    %eax,%ds
    8a20:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8a25:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
    8a2a:	00 f7                	add    %dh,%bh
    8a2c:	e3 89                	jecxz  89b7 <_initialInt+0x36>
    8a2e:	c7                   	(bad)  
    8a2f:	b8 60 88 26 89       	mov    $0x89268860,%eax
    8a34:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8a39:	45                   	inc    %ebp
    8a3a:	02 1f                	add    (%edi),%bl
    8a3c:	07                   	pop    %es
    8a3d:	61                   	popa   
    8a3e:	60                   	pusha  
    8a3f:	06                   	push   %es
    8a40:	1e                   	push   %ds
    8a41:	8c c8                	mov    %cs,%eax
    8a43:	8e d8                	mov    %eax,%ds
    8a45:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8a4a:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
    8a4f:	00 f7                	add    %dh,%bh
    8a51:	e3 89                	jecxz  89dc <_initialInt+0x5b>
    8a53:	c7                   	(bad)  
    8a54:	b8 90 88 26 89       	mov    $0x89268890,%eax
    8a59:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8a5e:	45                   	inc    %ebp
    8a5f:	02 1f                	add    (%edi),%bl
    8a61:	07                   	pop    %es
    8a62:	61                   	popa   
    8a63:	60                   	pusha  
    8a64:	06                   	push   %es
    8a65:	1e                   	push   %ds
    8a66:	8c c8                	mov    %cs,%eax
    8a68:	8e d8                	mov    %eax,%ds
    8a6a:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8a6f:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
    8a74:	00 f7                	add    %dh,%bh
    8a76:	e3 89                	jecxz  8a01 <_initialInt+0x80>
    8a78:	c7                   	(bad)  
    8a79:	b8 21 89 26 89       	mov    $0x89268921,%eax
    8a7e:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8a83:	45                   	inc    %ebp
    8a84:	02 1f                	add    (%edi),%bl
    8a86:	07                   	pop    %es
    8a87:	61                   	popa   
    8a88:	60                   	pusha  
    8a89:	06                   	push   %es
    8a8a:	1e                   	push   %ds
    8a8b:	8c c8                	mov    %cs,%eax
    8a8d:	8e d8                	mov    %eax,%ds
    8a8f:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8a94:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
    8a99:	00 f7                	add    %dh,%bh
    8a9b:	e3 89                	jecxz  8a26 <_initialInt+0xa5>
    8a9d:	c7                   	(bad)  
    8a9e:	b8 26 89 26 89       	mov    $0x89268926,%eax
    8aa3:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8aa8:	45                   	inc    %ebp
    8aa9:	02 1f                	add    (%edi),%bl
    8aab:	07                   	pop    %es
    8aac:	61                   	popa   
    8aad:	60                   	pusha  
    8aae:	06                   	push   %es
    8aaf:	1e                   	push   %ds
    8ab0:	8c c8                	mov    %cs,%eax
    8ab2:	8e d8                	mov    %eax,%ds
    8ab4:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8ab9:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
    8abe:	00 f7                	add    %dh,%bh
    8ac0:	e3 89                	jecxz  8a4b <_initialInt+0xca>
    8ac2:	c7                   	(bad)  
    8ac3:	b8 35 89 26 89       	mov    $0x89268935,%eax
    8ac8:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8acd:	45                   	inc    %ebp
    8ace:	02 1f                	add    (%edi),%bl
    8ad0:	07                   	pop    %es
    8ad1:	61                   	popa   
    8ad2:	60                   	pusha  
    8ad3:	06                   	push   %es
    8ad4:	1e                   	push   %ds
    8ad5:	8c c8                	mov    %cs,%eax
    8ad7:	8e d8                	mov    %eax,%ds
    8ad9:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8ade:	b8 3a 00 bb 04       	mov    $0x4bb003a,%eax
    8ae3:	00 f7                	add    %dh,%bh
    8ae5:	e3 89                	jecxz  8a70 <_initialInt+0xef>
    8ae7:	c7                   	(bad)  
    8ae8:	b8 68 89 26 89       	mov    $0x89268968,%eax
    8aed:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8af2:	45                   	inc    %ebp
    8af3:	02 1f                	add    (%edi),%bl
    8af5:	07                   	pop    %es
    8af6:	61                   	popa   
    8af7:	60                   	pusha  
    8af8:	06                   	push   %es
    8af9:	1e                   	push   %ds
    8afa:	8c c8                	mov    %cs,%eax
    8afc:	8e d8                	mov    %eax,%ds
    8afe:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b03:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
    8b08:	00 f7                	add    %dh,%bh
    8b0a:	e3 89                	jecxz  8a95 <_initialInt+0x114>
    8b0c:	c7                   	(bad)  
    8b0d:	b8 47 89 26 89       	mov    $0x89268947,%eax
    8b12:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b17:	45                   	inc    %ebp
    8b18:	02 1f                	add    (%edi),%bl
    8b1a:	07                   	pop    %es
    8b1b:	61                   	popa   
    8b1c:	60                   	pusha  
    8b1d:	06                   	push   %es
    8b1e:	1e                   	push   %ds
    8b1f:	8c c8                	mov    %cs,%eax
    8b21:	8e d8                	mov    %eax,%ds
    8b23:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b28:	b8 42 00 bb 04       	mov    $0x4bb0042,%eax
    8b2d:	00 f7                	add    %dh,%bh
    8b2f:	e3 89                	jecxz  8aba <_initialInt+0x139>
    8b31:	c7                   	(bad)  
    8b32:	b8 b1 86 26 89       	mov    $0x892686b1,%eax
    8b37:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b3c:	45                   	inc    %ebp
    8b3d:	02 1f                	add    (%edi),%bl
    8b3f:	07                   	pop    %es
    8b40:	61                   	popa   
    8b41:	60                   	pusha  
    8b42:	06                   	push   %es
    8b43:	1e                   	push   %ds
    8b44:	8c c8                	mov    %cs,%eax
    8b46:	8e d8                	mov    %eax,%ds
    8b48:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b4d:	b8 43 00 bb 04       	mov    $0x4bb0043,%eax
    8b52:	00 f7                	add    %dh,%bh
    8b54:	e3 89                	jecxz  8adf <_initialInt+0x15e>
    8b56:	c7                   	(bad)  
    8b57:	b8 56 89 26 89       	mov    $0x89268956,%eax
    8b5c:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b61:	45                   	inc    %ebp
    8b62:	02 1f                	add    (%edi),%bl
    8b64:	07                   	pop    %es
    8b65:	61                   	popa   
    8b66:	c9                   	leave  
    8b67:	66 5a                	pop    %dx
    8b69:	ff e2                	jmp    *%edx

00008b6b <_initialInt_09h>:
    8b6b:	c8 00 00 00          	enter  $0x0,$0x0
    8b6f:	a1 24 00 a3 f2       	mov    0xf2a30024,%eax
    8b74:	84 a1 26 00 a3 f4    	test   %ah,-0xb5cffda(%ecx)
    8b7a:	84 60 06             	test   %ah,0x6(%eax)
    8b7d:	1e                   	push   %ds
    8b7e:	8c c8                	mov    %cs,%eax
    8b80:	8e d8                	mov    %eax,%ds
    8b82:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b87:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
    8b8c:	00 f7                	add    %dh,%bh
    8b8e:	e3 89                	jecxz  8b19 <_initialInt+0x198>
    8b90:	c7                   	(bad)  
    8b91:	b8 36 87 26 89       	mov    $0x89268736,%eax
    8b96:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b9b:	45                   	inc    %ebp
    8b9c:	02 1f                	add    (%edi),%bl
    8b9e:	07                   	pop    %es
    8b9f:	61                   	popa   
    8ba0:	c9                   	leave  
    8ba1:	66 5a                	pop    %dx
    8ba3:	ff e2                	jmp    *%edx

00008ba5 <_initialInt_08h>:
    8ba5:	c8 00 00 00          	enter  $0x0,$0x0
    8ba9:	b0 40                	mov    $0x40,%al
    8bab:	e6 43                	out    %al,$0x43
    8bad:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
    8bb2:	88 e0                	mov    %ah,%al
    8bb4:	e6 40                	out    %al,$0x40
    8bb6:	60                   	pusha  
    8bb7:	06                   	push   %es
    8bb8:	1e                   	push   %ds
    8bb9:	8c c8                	mov    %cs,%eax
    8bbb:	8e d8                	mov    %eax,%ds
    8bbd:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8bc2:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
    8bc7:	00 f7                	add    %dh,%bh
    8bc9:	e3 89                	jecxz  8b54 <_initialInt+0x1d3>
    8bcb:	c7                   	(bad)  
    8bcc:	b8 b1 86 26 89       	mov    $0x892686b1,%eax
    8bd1:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8bd6:	45                   	inc    %ebp
    8bd7:	02 1f                	add    (%edi),%bl
    8bd9:	07                   	pop    %es
    8bda:	61                   	popa   
    8bdb:	c9                   	leave  
    8bdc:	66 5a                	pop    %dx
    8bde:	ff e2                	jmp    *%edx

00008be0 <_save>:
    8be0:	66 89 26             	mov    %sp,(%esi)
    8be3:	0a 85 1e 0e 1f 8f    	or     -0x70e0f1e2(%ebp),%al
    8be9:	06                   	push   %es
    8bea:	fa                   	cli    
    8beb:	84 8f 06 fe 84 66    	test   %cl,0x6684fe06(%edi)
    8bf1:	89 26                	mov    %esp,(%esi)
    8bf3:	06                   	push   %es
    8bf4:	85 66 89             	test   %esp,-0x77(%esi)
    8bf7:	36 00 85 66 8b 36 a0 	add    %al,%ss:-0x5fc9749a(%ebp)
    8bfe:	b2 66                	mov    $0x66,%dl
    8c00:	83 c6 2c             	add    $0x2c,%esi
    8c03:	67 8f 06 67 8f       	popl   -0x7099
    8c08:	46                   	inc    %esi
    8c09:	04 67                	add    $0x67,%al
    8c0b:	c7 46 06 00 00 67 8f 	movl   $0x8f670000,0x6(%esi)
    8c12:	46                   	inc    %esi
    8c13:	08 67 c7             	or     %ah,-0x39(%edi)
    8c16:	46                   	inc    %esi
    8c17:	0a 00                	or     (%eax),%al
    8c19:	00 66 67             	add    %ah,0x67(%esi)
    8c1c:	89 66 fc             	mov    %esp,-0x4(%esi)
    8c1f:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
    8c23:	8c de                	mov    %ds,%esi
    8c25:	8e d6                	mov    %esi,%ss
    8c27:	66 8b 26             	mov    (%esi),%sp
    8c2a:	a0 b2 66 83 c4       	mov    0xc48366b2,%al
    8c2f:	24 6a                	and    $0x6a,%al
    8c31:	00 ff                	add    %bh,%bh
    8c33:	36                   	ss
    8c34:	fa                   	cli    
    8c35:	84 6a 00             	test   %ch,0x0(%edx)
    8c38:	06                   	push   %es
    8c39:	66 55                	push   %bp
    8c3b:	66 57                	push   %di
    8c3d:	66 ff 36             	pushw  (%esi)
    8c40:	00 85 66 52 66 51    	add    %al,0x51665266(%ebp)
    8c46:	66 53                	push   %bx
    8c48:	66 50                	push   %ax
    8c4a:	66 8b 26             	mov    (%esi),%sp
    8c4d:	06                   	push   %es
    8c4e:	85 a1 fe 84 ff e0    	test   %esp,-0x1f007b02(%ecx)

00008c54 <_restart>:
    8c54:	66 89 26             	mov    %sp,(%esi)
    8c57:	06                   	push   %es
    8c58:	85 66 8b             	test   %esp,-0x75(%esi)
    8c5b:	26 a0 b2 66 58 66    	mov    %es:0x665866b2,%al
    8c61:	5b                   	pop    %ebx
    8c62:	66 59                	pop    %cx
    8c64:	66 5a                	pop    %dx
    8c66:	66 5e                	pop    %si
    8c68:	66 5f                	pop    %di
    8c6a:	66 5d                	pop    %bp
    8c6c:	07                   	pop    %es
    8c6d:	8f 06                	popl   (%esi)
    8c6f:	04 85                	add    $0x85,%al
    8c71:	8f 06                	popl   (%esi)
    8c73:	fa                   	cli    
    8c74:	84 8f 06 04 85 66    	test   %cl,0x66850406(%edi)
    8c7a:	89 36                	mov    %esi,(%esi)
    8c7c:	00 85 17 8f 06 04    	add    %al,0x4068f17(%ebp)
    8c82:	85 66 89             	test   %esp,-0x77(%esi)
    8c85:	e6 66                	out    %al,$0x66
    8c87:	67 8b 26 67 ff       	mov    -0x99,%esp
    8c8c:	76 0c                	jbe    8c9a <_restart+0x46>
    8c8e:	67 ff 76 08          	pushl  0x8(%bp)
    8c92:	67 ff 76 04          	pushl  0x4(%bp)
    8c96:	66 8b 36             	mov    (%esi),%si
    8c99:	00 85 8e 1e fa 84    	add    %al,-0x7b05e172(%ebp)
    8c9f:	50                   	push   %eax
    8ca0:	b0 20                	mov    $0x20,%al
    8ca2:	e6 20                	out    %al,$0x20
    8ca4:	e6 a0                	out    %al,$0xa0
    8ca6:	58                   	pop    %eax
    8ca7:	cf                   	iret   

00008ca8 <RTC_Timer>:
    8ca8:	c8 00 00 00          	enter  $0x0,$0x0
    8cac:	1e                   	push   %ds
    8cad:	06                   	push   %es
    8cae:	60                   	pusha  
    8caf:	8c c8                	mov    %cs,%eax
    8cb1:	8e d8                	mov    %eax,%ds
    8cb3:	8c c8                	mov    %cs,%eax
    8cb5:	8e c0                	mov    %eax,%es
    8cb7:	bf 00 b0 b4 02       	mov    $0x2b4b000,%edi
    8cbc:	cd 1a                	int    $0x1a
    8cbe:	88 e8                	mov    %ch,%al
    8cc0:	b4 00                	mov    $0x0,%ah
    8cc2:	b3 10                	mov    $0x10,%bl
    8cc4:	f6 f3                	div    %bl
    8cc6:	04 30                	add    $0x30,%al
    8cc8:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
    8cce:	88 e8                	mov    %ch,%al
    8cd0:	24 0f                	and    $0xf,%al
    8cd2:	04 30                	add    $0x30,%al
    8cd4:	88 45 01             	mov    %al,0x1(%ebp)
    8cd7:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
    8cdb:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
    8cdf:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
    8ce3:	b4 02                	mov    $0x2,%ah
    8ce5:	cd 1a                	int    $0x1a
    8ce7:	88 c8                	mov    %cl,%al
    8ce9:	b4 00                	mov    $0x0,%ah
    8ceb:	b3 10                	mov    $0x10,%bl
    8ced:	f6 f3                	div    %bl
    8cef:	04 30                	add    $0x30,%al
    8cf1:	88 45 05             	mov    %al,0x5(%ebp)
    8cf4:	b4 02                	mov    $0x2,%ah
    8cf6:	cd 1a                	int    $0x1a
    8cf8:	88 c8                	mov    %cl,%al
    8cfa:	24 0f                	and    $0xf,%al
    8cfc:	04 30                	add    $0x30,%al
    8cfe:	88 45 06             	mov    %al,0x6(%ebp)
    8d01:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
    8d05:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
    8d09:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
    8d0d:	8c c8                	mov    %cs,%eax
    8d0f:	8e d8                	mov    %eax,%ds
    8d11:	8e c0                	mov    %eax,%es
    8d13:	bd 1f 85 8c d8       	mov    $0xd88c851f,%ebp
    8d18:	8e c0                	mov    %eax,%es
    8d1a:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
    8d1f:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
    8d25:	b2 0a                	mov    $0xa,%dl
    8d27:	cd 10                	int    $0x10
    8d29:	8c c8                	mov    %cs,%eax
    8d2b:	8e d8                	mov    %eax,%ds
    8d2d:	8e c0                	mov    %eax,%es
    8d2f:	bd 00 b0 8c d8       	mov    $0xd88cb000,%ebp
    8d34:	8e c0                	mov    %eax,%es
    8d36:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
    8d3b:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
    8d41:	b2 1e                	mov    $0x1e,%dl
    8d43:	cd 10                	int    $0x10
    8d45:	61                   	popa   
    8d46:	07                   	pop    %es
    8d47:	1f                   	pop    %ds
    8d48:	c9                   	leave  
    8d49:	66 5a                	pop    %dx
    8d4b:	ff e2                	jmp    *%edx

00008d4d <_Get_Hours_1>:
    8d4d:	c8 04 00 00          	enter  $0x4,$0x0
    8d51:	b4 02                	mov    $0x2,%ah
    8d53:	cd 1a                	int    $0x1a
    8d55:	88 e8                	mov    %ch,%al
    8d57:	b4 00                	mov    $0x0,%ah
    8d59:	b3 10                	mov    $0x10,%bl
    8d5b:	f6 f3                	div    %bl
    8d5d:	30 e4                	xor    %ah,%ah
    8d5f:	66 67 89 04          	mov    %ax,(%si)
    8d63:	24 66                	and    $0x66,%al
    8d65:	67 8b 04             	mov    (%si),%eax
    8d68:	24 c9                	and    $0xc9,%al
    8d6a:	66 5a                	pop    %dx
    8d6c:	ff e2                	jmp    *%edx

00008d6e <_Get_Hours_2>:
    8d6e:	c8 04 00 00          	enter  $0x4,$0x0
    8d72:	b4 02                	mov    $0x2,%ah
    8d74:	cd 1a                	int    $0x1a
    8d76:	88 e8                	mov    %ch,%al
    8d78:	24 0f                	and    $0xf,%al
    8d7a:	30 e4                	xor    %ah,%ah
    8d7c:	66 67 89 04          	mov    %ax,(%si)
    8d80:	24 66                	and    $0x66,%al
    8d82:	67 8b 04             	mov    (%si),%eax
    8d85:	24 c9                	and    $0xc9,%al
    8d87:	66 5a                	pop    %dx
    8d89:	ff e2                	jmp    *%edx

00008d8b <_Get_Minutes_1>:
    8d8b:	c8 04 00 00          	enter  $0x4,$0x0
    8d8f:	b4 02                	mov    $0x2,%ah
    8d91:	cd 1a                	int    $0x1a
    8d93:	88 c8                	mov    %cl,%al
    8d95:	b4 00                	mov    $0x0,%ah
    8d97:	b3 10                	mov    $0x10,%bl
    8d99:	f6 f3                	div    %bl
    8d9b:	30 e4                	xor    %ah,%ah
    8d9d:	66 67 89 04          	mov    %ax,(%si)
    8da1:	24 66                	and    $0x66,%al
    8da3:	67 8b 04             	mov    (%si),%eax
    8da6:	24 c9                	and    $0xc9,%al
    8da8:	66 5a                	pop    %dx
    8daa:	ff e2                	jmp    *%edx

00008dac <_Get_Minutes_2>:
    8dac:	c8 04 00 00          	enter  $0x4,$0x0
    8db0:	b4 02                	mov    $0x2,%ah
    8db2:	cd 1a                	int    $0x1a
    8db4:	88 c8                	mov    %cl,%al
    8db6:	24 0f                	and    $0xf,%al
    8db8:	30 e4                	xor    %ah,%ah
    8dba:	66 67 89 04          	mov    %ax,(%si)
    8dbe:	24 66                	and    $0x66,%al
    8dc0:	67 8b 04             	mov    (%si),%eax
    8dc3:	24 c9                	and    $0xc9,%al
    8dc5:	66 5a                	pop    %dx
    8dc7:	ff e2                	jmp    *%edx

00008dc9 <print>:
#include "stdio.h"
//====================================================
//              显示字符串函数，可以指定位置
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
    8dc9:	66 55                	push   %bp
    8dcb:	66 89 e5             	mov    %sp,%bp
    8dce:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    8dd2:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    8dd7:	66 89 d0             	mov    %dx,%ax
    8dda:	66 c1 e0 02          	shl    $0x2,%ax
    8dde:	66 01 d0             	add    %dx,%ax
    8de1:	66 c1 e0 04          	shl    $0x4,%ax
    8de5:	66 89 c2             	mov    %ax,%dx
    8de8:	67 66 8b 45 10       	mov    0x10(%di),%ax
    8ded:	66 01 d0             	add    %dx,%ax
    8df0:	66 01 c0             	add    %ax,%ax
    8df3:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    8df8:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    8dff:	00 00                	add    %al,(%eax)
	int index = 0;
    8e01:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8e08:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    8e0a:	eb 35                	jmp    8e41 <print+0x78>
		_printchar(Messeage[index],pos,color);
    8e0c:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8e11:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8e16:	66 01 d0             	add    %dx,%ax
    8e19:	67 8a 00             	mov    (%bx,%si),%al
    8e1c:	66 0f be c0          	movsbw %al,%ax
    8e20:	67 66 ff 75 f4       	pushw  -0xc(%di)
    8e25:	67 66 ff 75 fc       	pushw  -0x4(%di)
    8e2a:	66 50                	push   %ax
    8e2c:	66 e8 2b f7          	callw  855b <_clearscreen+0x7>
    8e30:	ff                   	(bad)  
    8e31:	ff 66 83             	jmp    *-0x7d(%esi)
    8e34:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    8e37:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    8e3b:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    8e41:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8e46:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8e4b:	66 01 d0             	add    %dx,%ax
    8e4e:	67 8a 00             	mov    (%bx,%si),%al
    8e51:	84 c0                	test   %al,%al
    8e53:	75 b7                	jne    8e0c <print+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    8e55:	90                   	nop
}
    8e56:	66 c9                	leavew 
    8e58:	66 c3                	retw   

00008e5a <prints>:
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input
    8e5a:	66 55                	push   %bp
    8e5c:	66 89 e5             	mov    %sp,%bp
    8e5f:	66 83 ec 04          	sub    $0x4,%sp
	int index = 0;
    8e63:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8e6a:	00 00                	add    %al,(%eax)
	while(Messeage[index]){
    8e6c:	eb 25                	jmp    8e93 <prints+0x39>
		_showchar(Messeage[index]);
    8e6e:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8e73:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8e78:	66 01 d0             	add    %dx,%ax
    8e7b:	67 8a 00             	mov    (%bx,%si),%al
    8e7e:	66 0f be c0          	movsbw %al,%ax
    8e82:	66 50                	push   %ax
    8e84:	66 e8 10 f7          	callw  8598 <_readinput+0x17>
    8e88:	ff                   	(bad)  
    8e89:	ff 66 83             	jmp    *-0x7d(%esi)
    8e8c:	c4 04 67             	les    (%edi,%eiz,2),%eax
		index++;
    8e8f:	66 ff 45 fc          	incw   -0x4(%ebp)
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input
	int index = 0;
	while(Messeage[index]){
    8e93:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8e98:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8e9d:	66 01 d0             	add    %dx,%ax
    8ea0:	67 8a 00             	mov    (%bx,%si),%al
    8ea3:	84 c0                	test   %al,%al
    8ea5:	75 c7                	jne    8e6e <prints+0x14>
		_showchar(Messeage[index]);
		index++;
	}
	return;
    8ea7:	90                   	nop
}
    8ea8:	66 c9                	leavew 
    8eaa:	66 c3                	retw   

00008eac <printc>:
//====================================================
//                显示字符函数
//====================================================
void printc(char alpha){
    8eac:	66 55                	push   %bp
    8eae:	66 89 e5             	mov    %sp,%bp
    8eb1:	66 83 ec 04          	sub    $0x4,%sp
    8eb5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8eba:	67 88 45 fc          	mov    %al,-0x4(%di)
	_showchar(alpha);
    8ebe:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    8ec4:	66 50                	push   %ax
    8ec6:	66 e8 ce f6          	callw  8598 <_readinput+0x17>
    8eca:	ff                   	(bad)  
    8ecb:	ff 66 83             	jmp    *-0x7d(%esi)
    8ece:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    8ed1:	66 c9                	leavew 
    8ed3:	66 c3                	retw   

00008ed5 <printsint>:
//====================================================
//                数字转字符函数
//====================================================
void printsint(int num){
    8ed5:	66 55                	push   %bp
    8ed7:	66 89 e5             	mov    %sp,%bp
    8eda:	66 83 ec 2c          	sub    $0x2c,%sp
	 int save = num;
    8ede:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8ee3:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	 int count = 0;
    8ee8:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8eef:	00 00                	add    %al,(%eax)
	 char number[30];
	 number[count] = 0;
    8ef1:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    8ef6:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8efb:	66 01 d0             	add    %dx,%ax
    8efe:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	if(num < 0){
    8f02:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    8f08:	79 14                	jns    8f1e <printsint+0x49>
		printc('-');
    8f0a:	66 6a 2d             	pushw  $0x2d
    8f0d:	66 e8 99 ff          	callw  8eaa <prints+0x50>
    8f11:	ff                   	(bad)  
    8f12:	ff 66 83             	jmp    *-0x7d(%esi)
    8f15:	c4 04 67             	les    (%edi,%eiz,2),%eax
		num = -num;
    8f18:	66 f7 5d 08          	negw   0x8(%ebp)
    8f1c:	eb 15                	jmp    8f33 <printsint+0x5e>
	}
	else if(num == 0){
    8f1e:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    8f24:	75 0d                	jne    8f33 <printsint+0x5e>
		printc('0');
    8f26:	66 6a 30             	pushw  $0x30
    8f29:	66 e8 7d ff          	callw  8eaa <prints+0x50>
    8f2d:	ff                   	(bad)  
    8f2e:	ff 66 83             	jmp    *-0x7d(%esi)
    8f31:	c4 04 eb             	les    (%ebx,%ebp,8),%eax
	}
	while(num > 0){
    8f34:	50                   	push   %eax
		number[count] = num % 10 + '0';
    8f35:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8f3a:	66 b9 0a 00          	mov    $0xa,%cx
    8f3e:	00 00                	add    %al,(%eax)
    8f40:	66 99                	cwtd   
    8f42:	66 f7 f9             	idiv   %cx
    8f45:	66 89 d0             	mov    %dx,%ax
    8f48:	66 83 c0 30          	add    $0x30,%ax
    8f4c:	67 66 8d 4d d6       	lea    -0x2a(%di),%cx
    8f51:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8f56:	66 01 ca             	add    %cx,%dx
    8f59:	67 88 02             	mov    %al,(%bp,%si)
		num  = num / 10;
    8f5c:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    8f61:	66 b8 67 66          	mov    $0x6667,%ax
    8f65:	66 66 66 f7 e9       	data32 data32 imul %cx
    8f6a:	66 c1 fa 02          	sar    $0x2,%dx
    8f6e:	66 89 c8             	mov    %cx,%ax
    8f71:	66 c1 f8 1f          	sar    $0x1f,%ax
    8f75:	66 29 c2             	sub    %ax,%dx
    8f78:	66 89 d0             	mov    %dx,%ax
    8f7b:	67 66 89 45 08       	mov    %ax,0x8(%di)
		count ++;
    8f80:	67 66 ff 45 fc       	incw   -0x4(%di)
		num = -num;
	}
	else if(num == 0){
		printc('0');
	}
	while(num > 0){
    8f85:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    8f8b:	7f a8                	jg     8f35 <printsint+0x60>
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    8f8d:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8f92:	66 48                	dec    %ax
    8f94:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    8f99:	eb 25                	jmp    8fc0 <printsint+0xeb>
		printc(number[i]);
    8f9b:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    8fa0:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    8fa5:	66 01 d0             	add    %dx,%ax
    8fa8:	67 8a 00             	mov    (%bx,%si),%al
    8fab:	66 0f be c0          	movsbw %al,%ax
    8faf:	66 50                	push   %ax
    8fb1:	66 e8 f5 fe          	callw  8eaa <prints+0x50>
    8fb5:	ff                   	(bad)  
    8fb6:	ff 66 83             	jmp    *-0x7d(%esi)
    8fb9:	c4 04 67             	les    (%edi,%eiz,2),%eax
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    8fbc:	66 ff 4d f8          	decw   -0x8(%ebp)
    8fc0:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    8fc6:	79 d3                	jns    8f9b <printsint+0xc6>
		printc(number[i]);
	}
	return;
    8fc8:	90                   	nop
}
    8fc9:	66 c9                	leavew 
    8fcb:	66 c3                	retw   

00008fcd <print_next_line>:
//====================================================
//                显示字符串并换行函数
//====================================================
 void print_next_line(char const* Messeage){
    8fcd:	66 55                	push   %bp
    8fcf:	66 89 e5             	mov    %sp,%bp
	prints(Messeage);
    8fd2:	67 66 ff 75 08       	pushw  0x8(%di)
    8fd7:	66 e8 7d fe          	callw  8e58 <print+0x8f>
    8fdb:	ff                   	(bad)  
    8fdc:	ff 66 83             	jmp    *-0x7d(%esi)
    8fdf:	c4 04 66             	les    (%esi,%eiz,2),%eax
	prints("\n\r");
    8fe2:	68 9a a4 00 00       	push   $0xa49a
    8fe7:	66 e8 6d fe          	callw  8e58 <print+0x8f>
    8feb:	ff                   	(bad)  
    8fec:	ff 66 83             	jmp    *-0x7d(%esi)
    8fef:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    8ff2:	66 c9                	leavew 
    8ff4:	66 c3                	retw   

00008ff6 <strlen>:
//====================================================
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
    8ff6:	66 55                	push   %bp
    8ff8:	66 89 e5             	mov    %sp,%bp
    8ffb:	66 83 ec 08          	sub    $0x8,%sp
	int i = 0;
    8fff:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9006:	00 00                	add    %al,(%eax)
	int count = 0;
    9008:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    900f:	00 00                	add    %al,(%eax)
	while(Messeage[i] != 0){
    9011:	eb 0a                	jmp    901d <strlen+0x27>
		i++;
    9013:	67 66 ff 45 fc       	incw   -0x4(%di)
		count++;
    9018:	67 66 ff 45 f8       	incw   -0x8(%di)
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
	int i = 0;
	int count = 0;
	while(Messeage[i] != 0){
    901d:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9022:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9027:	66 01 d0             	add    %dx,%ax
    902a:	67 8a 00             	mov    (%bx,%si),%al
    902d:	84 c0                	test   %al,%al
    902f:	75 e2                	jne    9013 <strlen+0x1d>
		i++;
		count++;
	}
	return count;
    9031:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    9036:	66 c9                	leavew 
    9038:	66 c3                	retw   

0000903a <read_and_print_input>:
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    903a:	66 55                	push   %bp
    903c:	66 89 e5             	mov    %sp,%bp
    903f:	66 83 ec 08          	sub    $0x8,%sp
    int i = 1;
    9043:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    904a:	00 00                	add    %al,(%eax)
    while(i){
    904c:	eb 1c                	jmp    906a <read_and_print_input+0x30>
        char savechar = _readinput();
    904e:	66 e8 2d f5          	callw  857f <_printchar+0x22>
    9052:	ff                   	(bad)  
    9053:	ff 67 88             	jmp    *-0x78(%edi)
    9056:	45                   	inc    %ebp
    9057:	fb                   	sti    
        _showchar(savechar);
    9058:	67 66 0f be 45 fb    	movsbw -0x5(%di),%ax
    905e:	66 50                	push   %ax
    9060:	66 e8 34 f5          	callw  8598 <_readinput+0x17>
    9064:	ff                   	(bad)  
    9065:	ff 66 83             	jmp    *-0x7d(%esi)
    9068:	c4 04 67             	les    (%edi,%eiz,2),%eax
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    int i = 1;
    while(i){
    906b:	66 83 7d fc 00       	cmpw   $0x0,-0x4(%ebp)
    9070:	75 dc                	jne    904e <read_and_print_input+0x14>
        char savechar = _readinput();
        _showchar(savechar);
    }
}
    9072:	66 c9                	leavew 
    9074:	66 c3                	retw   

00009076 <getch>:
//====================================================
//        等待用户输入函数，返回用户输入在缓冲区中
//====================================================
char getch(){
    9076:	66 55                	push   %bp
    9078:	66 89 e5             	mov    %sp,%bp
    907b:	66 83 ec 04          	sub    $0x4,%sp
	char result = _readinput();
    907f:	66 e8 fc f4          	callw  857f <_printchar+0x22>
    9083:	ff                   	(bad)  
    9084:	ff 67 88             	jmp    *-0x78(%edi)
    9087:	45                   	inc    %ebp
    9088:	ff 67 8a             	jmp    *-0x76(%edi)
	return result;
    908b:	45                   	inc    %ebp
    908c:	ff 66 c9             	jmp    *-0x37(%esi)
}
    908f:	66 c3                	retw   

00009091 <getline>:
void  getline(char str[],int length){
    9091:	66 55                	push   %bp
    9093:	66 89 e5             	mov    %sp,%bp
    9096:	66 83 ec 08          	sub    $0x8,%sp
	char save = getch();
    909a:	66 e8 d6 ff          	callw  9074 <read_and_print_input+0x3a>
    909e:	ff                   	(bad)  
    909f:	ff 67 88             	jmp    *-0x78(%edi)
    90a2:	45                   	inc    %ebp
    90a3:	ff 67 66             	jmp    *0x66(%edi)
	int index = 0;
    90a6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while(save != 13 && index < length){
    90ad:	eb 46                	jmp    90f5 <getline+0x64>
		printc(save);
    90af:	67 66 0f be 45 ff    	movsbw -0x1(%di),%ax
    90b5:	66 50                	push   %ax
    90b7:	66 e8 ef fd          	callw  8eaa <prints+0x50>
    90bb:	ff                   	(bad)  
    90bc:	ff 66 83             	jmp    *-0x7d(%esi)
    90bf:	c4 04 67             	les    (%edi,%eiz,2),%eax
		str[index] = save;
    90c2:	66 8b 55 f8          	mov    -0x8(%ebp),%dx
    90c6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    90cb:	66 01 c2             	add    %ax,%dx
    90ce:	67 8a 45 ff          	mov    -0x1(%di),%al
    90d2:	67 88 02             	mov    %al,(%bp,%si)
		index ++;
    90d5:	67 66 ff 45 f8       	incw   -0x8(%di)
		str[index] = 0;
    90da:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    90df:	67 66 8b 45 08       	mov    0x8(%di),%ax
    90e4:	66 01 d0             	add    %dx,%ax
    90e7:	67 c6 00 00          	movb   $0x0,(%bx,%si)
		save = getch();
    90eb:	66 e8 85 ff          	callw  9074 <read_and_print_input+0x3a>
    90ef:	ff                   	(bad)  
    90f0:	ff 67 88             	jmp    *-0x78(%edi)
    90f3:	45                   	inc    %ebp
    90f4:	ff 67 80             	jmp    *-0x80(%edi)
	return result;
}
void  getline(char str[],int length){
	char save = getch();
	int index = 0;
	while(save != 13 && index < length){
    90f7:	7d ff                	jge    90f8 <getline+0x67>
    90f9:	0d 74 0c 67 66       	or     $0x66670c74,%eax
    90fe:	8b 45 f8             	mov    -0x8(%ebp),%eax
    9101:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    9106:	7c a7                	jl     90af <getline+0x1e>
		str[index] = save;
		index ++;
		str[index] = 0;
		save = getch();
	}
	return;
    9108:	90                   	nop
}
    9109:	66 c9                	leavew 
    910b:	66 c3                	retw   

0000910d <print_different_color>:
void print_different_color(char const* Messeage,int row,int colume,int color){
    910d:	66 55                	push   %bp
    910f:	66 89 e5             	mov    %sp,%bp
    9112:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    9116:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    911b:	66 89 d0             	mov    %dx,%ax
    911e:	66 c1 e0 02          	shl    $0x2,%ax
    9122:	66 01 d0             	add    %dx,%ax
    9125:	66 c1 e0 04          	shl    $0x4,%ax
    9129:	66 89 c2             	mov    %ax,%dx
    912c:	67 66 8b 45 10       	mov    0x10(%di),%ax
    9131:	66 01 d0             	add    %dx,%ax
    9134:	66 01 c0             	add    %ax,%ax
    9137:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    913c:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    9143:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    9145:	eb 35                	jmp    917c <print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    9147:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    914c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9151:	66 01 d0             	add    %dx,%ax
    9154:	67 8a 00             	mov    (%bx,%si),%al
    9157:	66 0f be c0          	movsbw %al,%ax
    915b:	67 66 ff 75 14       	pushw  0x14(%di)
    9160:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9165:	66 50                	push   %ax
    9167:	66 e8 f0 f3          	callw  855b <_clearscreen+0x7>
    916b:	ff                   	(bad)  
    916c:	ff 66 83             	jmp    *-0x7d(%esi)
    916f:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    9172:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    9176:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    917c:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9181:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9186:	66 01 d0             	add    %dx,%ax
    9189:	67 8a 00             	mov    (%bx,%si),%al
    918c:	84 c0                	test   %al,%al
    918e:	75 b7                	jne    9147 <print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    9190:	90                   	nop
}
    9191:	66 c9                	leavew 
    9193:	66 c3                	retw   

00009195 <strcmp>:
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
    9195:	66 55                	push   %bp
    9197:	66 89 e5             	mov    %sp,%bp
    919a:	66 83 ec 04          	sub    $0x4,%sp
	int i = 0;
    919e:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    91a5:	00 00                	add    %al,(%eax)
	while(m1[i] != 0 && m2[i]!= 0){
    91a7:	eb 31                	jmp    91da <strcmp+0x45>
		if(m1[i] != m2[i]){
    91a9:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    91ae:	67 66 8b 45 08       	mov    0x8(%di),%ax
    91b3:	66 01 d0             	add    %dx,%ax
    91b6:	67 8a 10             	mov    (%bx,%si),%dl
    91b9:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    91be:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    91c3:	66 01 c8             	add    %cx,%ax
    91c6:	67 8a 00             	mov    (%bx,%si),%al
    91c9:	38 c2                	cmp    %al,%dl
    91cb:	74 08                	je     91d5 <strcmp+0x40>
			return 0;
    91cd:	66 b8 00 00          	mov    $0x0,%ax
    91d1:	00 00                	add    %al,(%eax)
    91d3:	eb 63                	jmp    9238 <strcmp+0xa3>
		}
		i++;
    91d5:	67 66 ff 45 fc       	incw   -0x4(%di)
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
	int i = 0;
	while(m1[i] != 0 && m2[i]!= 0){
    91da:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    91df:	67 66 8b 45 08       	mov    0x8(%di),%ax
    91e4:	66 01 d0             	add    %dx,%ax
    91e7:	67 8a 00             	mov    (%bx,%si),%al
    91ea:	84 c0                	test   %al,%al
    91ec:	74 14                	je     9202 <strcmp+0x6d>
    91ee:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    91f3:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    91f8:	66 01 d0             	add    %dx,%ax
    91fb:	67 8a 00             	mov    (%bx,%si),%al
    91fe:	84 c0                	test   %al,%al
    9200:	75 a7                	jne    91a9 <strcmp+0x14>
		if(m1[i] != m2[i]){
			return 0;
		}
		i++;
	}
	if(m1[i] != 0 || m2[i] != 0){
    9202:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9207:	67 66 8b 45 08       	mov    0x8(%di),%ax
    920c:	66 01 d0             	add    %dx,%ax
    920f:	67 8a 00             	mov    (%bx,%si),%al
    9212:	84 c0                	test   %al,%al
    9214:	75 14                	jne    922a <strcmp+0x95>
    9216:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    921b:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9220:	66 01 d0             	add    %dx,%ax
    9223:	67 8a 00             	mov    (%bx,%si),%al
    9226:	84 c0                	test   %al,%al
    9228:	74 08                	je     9232 <strcmp+0x9d>
		return 0;
    922a:	66 b8 00 00          	mov    $0x0,%ax
    922e:	00 00                	add    %al,(%eax)
    9230:	eb 06                	jmp    9238 <strcmp+0xa3>
	}
	return 1;
    9232:	66 b8 01 00          	mov    $0x1,%ax
    9236:	00 00                	add    %al,(%eax)
}
    9238:	66 c9                	leavew 
    923a:	66 c3                	retw   

0000923c <strcpy>:
//====================================================
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
    923c:	66 55                	push   %bp
    923e:	66 89 e5             	mov    %sp,%bp
    9241:	66 83 ec 08          	sub    $0x8,%sp
	int len = strlen(src);
    9245:	67 66 ff 75 08       	pushw  0x8(%di)
    924a:	66 e8 a6 fd          	callw  8ff4 <print_next_line+0x27>
    924e:	ff                   	(bad)  
    924f:	ff 66 83             	jmp    *-0x7d(%esi)
    9252:	c4 04 67             	les    (%edi,%eiz,2),%eax
    9255:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	int i = 0;
    9259:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9260:	00 00                	add    %al,(%eax)
	for(i = 0;i < len;i ++){
    9262:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9269:	00 00                	add    %al,(%eax)
    926b:	eb 3b                	jmp    92a8 <strcpy+0x6c>
    	des[i] =  src[i];
    926d:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9272:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9277:	66 01 c2             	add    %ax,%dx
    927a:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    927f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9284:	66 01 c8             	add    %cx,%ax
    9287:	67 8a 00             	mov    (%bx,%si),%al
    928a:	67 88 02             	mov    %al,(%bp,%si)
        des[i+1] = 0;
    928d:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9292:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    9297:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    929c:	66 01 d0             	add    %dx,%ax
    929f:	67 c6 00 00          	movb   $0x0,(%bx,%si)
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
	int len = strlen(src);
	int i = 0;
	for(i = 0;i < len;i ++){
    92a3:	67 66 ff 45 fc       	incw   -0x4(%di)
    92a8:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    92ad:	67 66 3b 45 f8       	cmp    -0x8(%di),%ax
    92b2:	7c b9                	jl     926d <strcpy+0x31>
    	des[i] =  src[i];
        des[i+1] = 0;
	}
    92b4:	66 c9                	leavew 
    92b6:	66 c3                	retw   

000092b8 <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
    92b8:	66 55                	push   %bp
    92ba:	66 89 e5             	mov    %sp,%bp
    92bd:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    92c1:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    92c6:	66 89 d0             	mov    %dx,%ax
    92c9:	66 c1 e0 02          	shl    $0x2,%ax
    92cd:	66 01 d0             	add    %dx,%ax
    92d0:	66 c1 e0 04          	shl    $0x4,%ax
    92d4:	66 89 c2             	mov    %ax,%dx
    92d7:	67 66 8b 45 10       	mov    0x10(%di),%ax
    92dc:	66 01 d0             	add    %dx,%ax
    92df:	66 01 c0             	add    %ax,%ax
    92e2:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    92e7:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    92ee:	00 00                	add    %al,(%eax)
	int index = 0;
    92f0:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    92f7:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    92f9:	eb 35                	jmp    9330 <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
    92fb:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9300:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9305:	66 01 d0             	add    %dx,%ax
    9308:	67 8a 00             	mov    (%bx,%si),%al
    930b:	66 0f be c0          	movsbw %al,%ax
    930f:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9314:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9319:	66 50                	push   %ax
    931b:	66 e8 3c f2          	callw  855b <_clearscreen+0x7>
    931f:	ff                   	(bad)  
    9320:	ff 66 83             	jmp    *-0x7d(%esi)
    9323:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    9326:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    932a:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    9330:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9335:	67 66 8b 45 08       	mov    0x8(%di),%ax
    933a:	66 01 d0             	add    %dx,%ax
    933d:	67 8a 00             	mov    (%bx,%si),%al
    9340:	84 c0                	test   %al,%al
    9342:	75 b7                	jne    92fb <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    9344:	90                   	nop
}
    9345:	66 c9                	leavew 
    9347:	66 c3                	retw   

00009349 <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    9349:	66 55                	push   %bp
    934b:	66 89 e5             	mov    %sp,%bp
    934e:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    9352:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    9357:	66 89 d0             	mov    %dx,%ax
    935a:	66 c1 e0 02          	shl    $0x2,%ax
    935e:	66 01 d0             	add    %dx,%ax
    9361:	66 c1 e0 04          	shl    $0x4,%ax
    9365:	66 89 c2             	mov    %ax,%dx
    9368:	67 66 8b 45 10       	mov    0x10(%di),%ax
    936d:	66 01 d0             	add    %dx,%ax
    9370:	66 01 c0             	add    %ax,%ax
    9373:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    9378:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    937f:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    9381:	eb 35                	jmp    93b8 <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    9383:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9388:	67 66 8b 45 08       	mov    0x8(%di),%ax
    938d:	66 01 d0             	add    %dx,%ax
    9390:	67 8a 00             	mov    (%bx,%si),%al
    9393:	66 0f be c0          	movsbw %al,%ax
    9397:	67 66 ff 75 14       	pushw  0x14(%di)
    939c:	67 66 ff 75 fc       	pushw  -0x4(%di)
    93a1:	66 50                	push   %ax
    93a3:	66 e8 b4 f1          	callw  855b <_clearscreen+0x7>
    93a7:	ff                   	(bad)  
    93a8:	ff 66 83             	jmp    *-0x7d(%esi)
    93ab:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    93ae:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    93b2:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    93b8:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    93bd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    93c2:	66 01 d0             	add    %dx,%ax
    93c5:	67 8a 00             	mov    (%bx,%si),%al
    93c8:	84 c0                	test   %al,%al
    93ca:	75 b7                	jne    9383 <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    93cc:	90                   	nop
}
    93cd:	66 c9                	leavew 
    93cf:	66 c3                	retw   

000093d1 <sys_showline>:
void sys_showline(){
    93d1:	66 55                	push   %bp
    93d3:	66 89 e5             	mov    %sp,%bp
    93d6:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
    93da:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
    93df:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
    93e4:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
    93e9:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
    93ee:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
    93f3:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
    93f8:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
    93fd:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    9404:	00 00                	add    %al,(%eax)
    int i = 0;
    9406:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    940d:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
    940f:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9416:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
    9418:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    941f:	00 00                	add    %al,(%eax)
    9421:	eb 52                	jmp    9475 <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
    9423:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9428:	66 89 d0             	mov    %dx,%ax
    942b:	66 c1 e0 03          	shl    $0x3,%ax
    942f:	66 01 d0             	add    %dx,%ax
    9432:	67 66 8d 14          	lea    (%si),%dx
    9436:	c5 00                	lds    (%eax),%eax
    9438:	00 00                	add    %al,(%eax)
    943a:	00 66 01             	add    %ah,0x1(%esi)
    943d:	d0 66 01             	shlb   0x1(%esi)
    9440:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
    9444:	45                   	inc    %ebp
    9445:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
    944b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9450:	66 01 d0             	add    %dx,%ax
    9453:	67 8a 00             	mov    (%bx,%si),%al
    9456:	66 0f be c0          	movsbw %al,%ax
    945a:	67 66 ff 75 f4       	pushw  -0xc(%di)
    945f:	67 66 ff 75 f0       	pushw  -0x10(%di)
    9464:	66 50                	push   %ax
    9466:	66 e8 f1 f0          	callw  855b <_clearscreen+0x7>
    946a:	ff                   	(bad)  
    946b:	ff 66 83             	jmp    *-0x7d(%esi)
    946e:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
    9471:	66 ff 45 fc          	incw   -0x4(%ebp)
    9475:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
    947b:	7e a6                	jle    9423 <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
    947d:	66 c9                	leavew 
    947f:	66 c3                	retw   

00009481 <sys_printname>:

void sys_printname(){
    9481:	66 55                	push   %bp
    9483:	66 89 e5             	mov    %sp,%bp
    9486:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
    948a:	67 66 c7 45 fc a0 a4 	movw   $0xa4a0,-0x4(%di)
    9491:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
    9493:	67 66 c7 45 f8 e4 a4 	movw   $0xa4e4,-0x8(%di)
    949a:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
    949c:	67 66 c7 45 f4 28 a5 	movw   $0xa528,-0xc(%di)
    94a3:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
    94a5:	67 66 c7 45 f0 6c a5 	movw   $0xa56c,-0x10(%di)
    94ac:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
    94ae:	67 66 c7 45 ec b0 a5 	movw   $0xa5b0,-0x14(%di)
    94b5:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
    94b7:	67 66 c7 45 e8 f4 a5 	movw   $0xa5f4,-0x18(%di)
    94be:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
    94c0:	67 66 c7 45 e4 38 a6 	movw   $0xa638,-0x1c(%di)
    94c7:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
    94c9:	66 6a 0b             	pushw  $0xb
    94cc:	66 6a 10             	pushw  $0x10
    94cf:	67 66 ff 75 fc       	pushw  -0x4(%di)
    94d4:	66 e8 de fd          	callw  92b6 <strcpy+0x7a>
    94d8:	ff                   	(bad)  
    94d9:	ff 66 83             	jmp    *-0x7d(%esi)
    94dc:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
    94df:	6a 0b                	push   $0xb
    94e1:	66 6a 11             	pushw  $0x11
    94e4:	67 66 ff 75 f8       	pushw  -0x8(%di)
    94e9:	66 e8 c9 fd          	callw  92b6 <strcpy+0x7a>
    94ed:	ff                   	(bad)  
    94ee:	ff 66 83             	jmp    *-0x7d(%esi)
    94f1:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
    94f4:	6a 0b                	push   $0xb
    94f6:	66 6a 12             	pushw  $0x12
    94f9:	67 66 ff 75 f4       	pushw  -0xc(%di)
    94fe:	66 e8 b4 fd          	callw  92b6 <strcpy+0x7a>
    9502:	ff                   	(bad)  
    9503:	ff 66 83             	jmp    *-0x7d(%esi)
    9506:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
    9509:	6a 0b                	push   $0xb
    950b:	66 6a 13             	pushw  $0x13
    950e:	67 66 ff 75 f0       	pushw  -0x10(%di)
    9513:	66 e8 9f fd          	callw  92b6 <strcpy+0x7a>
    9517:	ff                   	(bad)  
    9518:	ff 66 83             	jmp    *-0x7d(%esi)
    951b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
    951e:	6a 0b                	push   $0xb
    9520:	66 6a 14             	pushw  $0x14
    9523:	67 66 ff 75 ec       	pushw  -0x14(%di)
    9528:	66 e8 8a fd          	callw  92b6 <strcpy+0x7a>
    952c:	ff                   	(bad)  
    952d:	ff 66 83             	jmp    *-0x7d(%esi)
    9530:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
    9533:	6a 0b                	push   $0xb
    9535:	66 6a 15             	pushw  $0x15
    9538:	67 66 ff 75 e8       	pushw  -0x18(%di)
    953d:	66 e8 75 fd          	callw  92b6 <strcpy+0x7a>
    9541:	ff                   	(bad)  
    9542:	ff 66 83             	jmp    *-0x7d(%esi)
    9545:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
    9548:	6a 0b                	push   $0xb
    954a:	66 6a 16             	pushw  $0x16
    954d:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    9552:	66 e8 60 fd          	callw  92b6 <strcpy+0x7a>
    9556:	ff                   	(bad)  
    9557:	ff 66 83             	jmp    *-0x7d(%esi)
    955a:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    955d:	c9                   	leave  
    955e:	66 c3                	retw   

00009560 <sys_printpoem>:
void sys_printpoem(){
    9560:	66 55                	push   %bp
    9562:	66 89 e5             	mov    %sp,%bp
    9565:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
    9569:	67 66 c7 45 f8 7c a6 	movw   $0xa67c,-0x8(%di)
    9570:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
    9572:	67 66 c7 45 f4 8e a6 	movw   $0xa68e,-0xc(%di)
    9579:	00 00                	add    %al,(%eax)
    int i = 1;
    957b:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    9582:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
    9584:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    958b:	00 00                	add    %al,(%eax)
    958d:	eb 4b                	jmp    95da <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
    958f:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9594:	66 6a 0a             	pushw  $0xa
    9597:	66 6a 0f             	pushw  $0xf
    959a:	67 66 ff 75 f8       	pushw  -0x8(%di)
    959f:	66 e8 a4 fd          	callw  9347 <sys_print_for_heart+0x8f>
    95a3:	ff                   	(bad)  
    95a4:	ff 66 83             	jmp    *-0x7d(%esi)
    95a7:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
    95a9:	67 66 ff 75 fc       	pushw  -0x4(%di)
    95ae:	66 6a 0a             	pushw  $0xa
    95b1:	66 6a 10             	pushw  $0x10
    95b4:	67 66 ff 75 f4       	pushw  -0xc(%di)
    95b9:	66 e8 8a fd          	callw  9347 <sys_print_for_heart+0x8f>
    95bd:	ff                   	(bad)  
    95be:	ff 66 83             	jmp    *-0x7d(%esi)
    95c1:	c4 10                	les    (%eax),%edx
        int j = 0;
    95c3:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    95ca:	00 00                	add    %al,(%eax)
        int k = 0;
    95cc:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    95d3:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
    95d5:	67 66 ff 45 fc       	incw   -0x4(%di)
    95da:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    95e0:	7e ad                	jle    958f <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
    95e2:	66 c9                	leavew 
    95e4:	66 c3                	retw   

000095e6 <sys_printheart>:
void sys_printheart(){
    95e6:	66 55                	push   %bp
    95e8:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
    95eb:	66 6a 28             	pushw  $0x28
    95ee:	66 6a 00             	pushw  $0x0
    95f1:	66 68 97 a6          	pushw  $0xa697
    95f5:	00 00                	add    %al,(%eax)
    95f7:	66 e8 bb fc          	callw  92b6 <strcpy+0x7a>
    95fb:	ff                   	(bad)  
    95fc:	ff 66 83             	jmp    *-0x7d(%esi)
    95ff:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
    9602:	6a 28                	push   $0x28
    9604:	66 6a 01             	pushw  $0x1
    9607:	66 68 af a6          	pushw  $0xa6af
    960b:	00 00                	add    %al,(%eax)
    960d:	66 e8 a5 fc          	callw  92b6 <strcpy+0x7a>
    9611:	ff                   	(bad)  
    9612:	ff 66 83             	jmp    *-0x7d(%esi)
    9615:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
    9618:	6a 28                	push   $0x28
    961a:	66 6a 02             	pushw  $0x2
    961d:	66 68 c8 a6          	pushw  $0xa6c8
    9621:	00 00                	add    %al,(%eax)
    9623:	66 e8 8f fc          	callw  92b6 <strcpy+0x7a>
    9627:	ff                   	(bad)  
    9628:	ff 66 83             	jmp    *-0x7d(%esi)
    962b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
    962e:	6a 28                	push   $0x28
    9630:	66 6a 03             	pushw  $0x3
    9633:	66 68 e3 a6          	pushw  $0xa6e3
    9637:	00 00                	add    %al,(%eax)
    9639:	66 e8 79 fc          	callw  92b6 <strcpy+0x7a>
    963d:	ff                   	(bad)  
    963e:	ff 66 83             	jmp    *-0x7d(%esi)
    9641:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
    9644:	6a 28                	push   $0x28
    9646:	66 6a 04             	pushw  $0x4
    9649:	66 68 fc a6          	pushw  $0xa6fc
    964d:	00 00                	add    %al,(%eax)
    964f:	66 e8 63 fc          	callw  92b6 <strcpy+0x7a>
    9653:	ff                   	(bad)  
    9654:	ff 66 83             	jmp    *-0x7d(%esi)
    9657:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
    965a:	6a 28                	push   $0x28
    965c:	66 6a 05             	pushw  $0x5
    965f:	66 68 14 a7          	pushw  $0xa714
    9663:	00 00                	add    %al,(%eax)
    9665:	66 e8 4d fc          	callw  92b6 <strcpy+0x7a>
    9669:	ff                   	(bad)  
    966a:	ff 66 83             	jmp    *-0x7d(%esi)
    966d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
    9670:	6a 28                	push   $0x28
    9672:	66 6a 06             	pushw  $0x6
    9675:	66 68 2b a7          	pushw  $0xa72b
    9679:	00 00                	add    %al,(%eax)
    967b:	66 e8 37 fc          	callw  92b6 <strcpy+0x7a>
    967f:	ff                   	(bad)  
    9680:	ff 66 83             	jmp    *-0x7d(%esi)
    9683:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
    9686:	6a 28                	push   $0x28
    9688:	66 6a 07             	pushw  $0x7
    968b:	66 68 41 a7          	pushw  $0xa741
    968f:	00 00                	add    %al,(%eax)
    9691:	66 e8 21 fc          	callw  92b6 <strcpy+0x7a>
    9695:	ff                   	(bad)  
    9696:	ff 66 83             	jmp    *-0x7d(%esi)
    9699:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    969c:	c9                   	leave  
    969d:	66 c3                	retw   

0000969f <Get_Hours>:
#include "time.h"
#include "stdio.h"

int Get_Hours(){
    969f:	66 55                	push   %bp
    96a1:	66 89 e5             	mov    %sp,%bp
    96a4:	66 53                	push   %bx
    96a6:	66 83 ec 04          	sub    $0x4,%sp
    int hours = _Get_Hours_1();
    96aa:	66 e8 9d f6          	callw  8d4b <RTC_Timer+0xa3>
    96ae:	ff                   	(bad)  
    96af:	ff 67 66             	jmp    *0x66(%edi)
    96b2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    hours = hours * 10 + _Get_Hours_2();
    96b5:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    96ba:	66 89 d0             	mov    %dx,%ax
    96bd:	66 c1 e0 02          	shl    $0x2,%ax
    96c1:	66 01 d0             	add    %dx,%ax
    96c4:	66 01 c0             	add    %ax,%ax
    96c7:	66 89 c3             	mov    %ax,%bx
    96ca:	66 e8 9e f6          	callw  8d6c <_Get_Hours_1+0x1f>
    96ce:	ff                   	(bad)  
    96cf:	ff 66 01             	jmp    *0x1(%esi)
    96d2:	d8 67 66             	fsubs  0x66(%edi)
    96d5:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return hours;
    96d8:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
   // printsint(hours);
}
    96dd:	66 83 c4 04          	add    $0x4,%sp
    96e1:	66 5b                	pop    %bx
    96e3:	66 5d                	pop    %bp
    96e5:	66 c3                	retw   

000096e7 <Get_Minutes>:
int Get_Minutes(){
    96e7:	66 55                	push   %bp
    96e9:	66 89 e5             	mov    %sp,%bp
    96ec:	66 53                	push   %bx
    96ee:	66 83 ec 04          	sub    $0x4,%sp
    int minutes = _Get_Minutes_1();
    96f2:	66 e8 93 f6          	callw  8d89 <_Get_Hours_2+0x1b>
    96f6:	ff                   	(bad)  
    96f7:	ff 67 66             	jmp    *0x66(%edi)
    96fa:	89 45 f8             	mov    %eax,-0x8(%ebp)
    minutes = minutes * 10 + _Get_Minutes_2();
    96fd:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9702:	66 89 d0             	mov    %dx,%ax
    9705:	66 c1 e0 02          	shl    $0x2,%ax
    9709:	66 01 d0             	add    %dx,%ax
    970c:	66 01 c0             	add    %ax,%ax
    970f:	66 89 c3             	mov    %ax,%bx
    9712:	66 e8 94 f6          	callw  8daa <_Get_Minutes_1+0x1f>
    9716:	ff                   	(bad)  
    9717:	ff 66 01             	jmp    *0x1(%esi)
    971a:	d8 67 66             	fsubs  0x66(%edi)
    971d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return minutes;
    9720:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    9725:	66 83 c4 04          	add    $0x4,%sp
    9729:	66 5b                	pop    %bx
    972b:	66 5d                	pop    %bp
    972d:	66 c3                	retw   

0000972f <printTime>:
void printTime(){
    972f:	66 55                	push   %bp
    9731:	66 89 e5             	mov    %sp,%bp
    9734:	66 83 ec 08          	sub    $0x8,%sp
    int hour = Get_Hours();
    9738:	66 e8 61 ff          	callw  969d <sys_printheart+0xb7>
    973c:	ff                   	(bad)  
    973d:	ff 67 66             	jmp    *0x66(%edi)
    9740:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int minute = Get_Minutes();
    9743:	66 e8 9e ff          	callw  96e5 <Get_Hours+0x46>
    9747:	ff                   	(bad)  
    9748:	ff 67 66             	jmp    *0x66(%edi)
    974b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    printsint(hour);
    974e:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9753:	66 e8 7c f7          	callw  8ed3 <printc+0x27>
    9757:	ff                   	(bad)  
    9758:	ff 66 83             	jmp    *-0x7d(%esi)
    975b:	c4 04 66             	les    (%esi,%eiz,2),%eax
    prints("h : ");
    975e:	68 56 a7 00 00       	push   $0xa756
    9763:	66 e8 f1 f6          	callw  8e58 <print+0x8f>
    9767:	ff                   	(bad)  
    9768:	ff 66 83             	jmp    *-0x7d(%esi)
    976b:	c4 04 67             	les    (%edi,%eiz,2),%eax
    printsint(minute);
    976e:	66 ff 75 f8          	pushw  -0x8(%ebp)
    9772:	66 e8 5d f7          	callw  8ed3 <printc+0x27>
    9776:	ff                   	(bad)  
    9777:	ff 66 83             	jmp    *-0x7d(%esi)
    977a:	c4 04 66             	les    (%esi,%eiz,2),%eax
    printc('m');
    977d:	6a 6d                	push   $0x6d
    977f:	66 e8 27 f7          	callw  8eaa <prints+0x50>
    9783:	ff                   	(bad)  
    9784:	ff 66 83             	jmp    *-0x7d(%esi)
    9787:	c4 04 66             	les    (%esi,%eiz,2),%eax

    978a:	c9                   	leave  
    978b:	66 c3                	retw   

0000978d <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    978d:	66 55                	push   %bp
    978f:	66 89 e5             	mov    %sp,%bp
    9792:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    9796:	66 e8 a4 ee          	callw  863e <_Schedule_once+0x9>
    979a:	ff                   	(bad)  
    979b:	ff 67 66             	jmp    *0x66(%edi)
    979e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    97a1:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    97a6:	66 c9                	leavew 
    97a8:	66 c3                	retw   

000097aa <wait>:
char wait(){
    97aa:	66 55                	push   %bp
    97ac:	66 89 e5             	mov    %sp,%bp
    97af:	66 83 ec 08          	sub    $0x8,%sp
    int temp_ch = _wait();
    97b3:	66 e8 9f ee          	callw  8656 <_Schedule+0xb>
    97b7:	ff                   	(bad)  
    97b8:	ff 67 66             	jmp    *0x66(%edi)
    97bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char ch = '0' + temp_ch;
    97be:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    97c3:	66 83 c0 30          	add    $0x30,%ax
    97c7:	67 88 45 fb          	mov    %al,-0x5(%di)
    return ch;
    97cb:	67 8a 45 fb          	mov    -0x5(%di),%al
    //_wait();
}
    97cf:	66 c9                	leavew 
    97d1:	66 c3                	retw   

000097d3 <exit>:
void exit(char ch){
    97d3:	66 55                	push   %bp
    97d5:	66 89 e5             	mov    %sp,%bp
    97d8:	66 83 ec 04          	sub    $0x4,%sp
    97dc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    97e1:	67 88 45 fc          	mov    %al,-0x4(%di)
    _exit(ch);
    97e5:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    97eb:	66 50                	push   %ax
    97ed:	66 e8 70 ee          	callw  8661 <_wait+0x9>
    97f1:	ff                   	(bad)  
    97f2:	ff 66 83             	jmp    *-0x7d(%esi)
    97f5:	c4 04 66             	les    (%esi,%eiz,2),%eax
    97f8:	c9                   	leave  
    97f9:	66 c3                	retw   

000097fb <savePCB>:
#include "schedule.h"

void savePCB(){
    97fb:	66 55                	push   %bp
    97fd:	66 89 e5             	mov    %sp,%bp
    _save();
    9800:	66 e8 da f3          	callw  8bde <_initialInt_08h+0x39>
    9804:	ff                   	(bad)  
    9805:	ff 66 5d             	jmp    *0x5d(%esi)
}
    9808:	66 c3                	retw   

0000980a <initial_PCB>:
void initial_PCB(int index){
    980a:	66 55                	push   %bp
    980c:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    980f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9814:	66 40                	inc    %ax
    9816:	66 c1 e0 0c          	shl    $0xc,%ax
    981a:	66 89 c2             	mov    %ax,%dx
    981d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9822:	66 c1 e0 02          	shl    $0x2,%ax
    9826:	66 89 c1             	mov    %ax,%cx
    9829:	66 c1 e1 04          	shl    $0x4,%cx
    982d:	66 01 c8             	add    %cx,%ax
    9830:	66 05 b0 b0          	add    $0xb0b0,%ax
    9834:	00 00                	add    %al,(%eax)
    9836:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    983a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    983f:	66 40                	inc    %ax
    9841:	66 c1 e0 0c          	shl    $0xc,%ax
    9845:	66 89 c2             	mov    %ax,%dx
    9848:	67 66 8b 45 08       	mov    0x8(%di),%ax
    984d:	66 c1 e0 02          	shl    $0x2,%ax
    9851:	66 89 c1             	mov    %ax,%cx
    9854:	66 c1 e1 04          	shl    $0x4,%cx
    9858:	66 01 c8             	add    %cx,%ax
    985b:	66 05 a0 b0          	add    $0xb0a0,%ax
    985f:	00 00                	add    %al,(%eax)
    9861:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
    9865:	67 66 8b 45 08       	mov    0x8(%di),%ax
    986a:	66 40                	inc    %ax
    986c:	66 c1 e0 0c          	shl    $0xc,%ax
    9870:	66 89 c2             	mov    %ax,%dx
    9873:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9878:	66 c1 e0 02          	shl    $0x2,%ax
    987c:	66 89 c1             	mov    %ax,%cx
    987f:	66 c1 e1 04          	shl    $0x4,%cx
    9883:	66 01 c8             	add    %cx,%ax
    9886:	66 05 a0 b0          	add    $0xb0a0,%ax
    988a:	00 00                	add    %al,(%eax)
    988c:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
    9891:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9896:	66 c1 e0 02          	shl    $0x2,%ax
    989a:	66 89 c2             	mov    %ax,%dx
    989d:	66 c1 e2 04          	shl    $0x4,%dx
    98a1:	66 01 d0             	add    %dx,%ax
    98a4:	66 05 a0 b0          	add    $0xb0a0,%ax
    98a8:	00 00                	add    %al,(%eax)
    98aa:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
    98b1:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
    98b3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    98b8:	66 c1 e0 02          	shl    $0x2,%ax
    98bc:	66 89 c2             	mov    %ax,%dx
    98bf:	66 c1 e2 04          	shl    $0x4,%dx
    98c3:	66 01 d0             	add    %dx,%ax
    98c6:	66 05 a0 b0          	add    $0xb0a0,%ax
    98ca:	00 00                	add    %al,(%eax)
    98cc:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    98d3:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = RUN;
    98d5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    98da:	66 c1 e0 02          	shl    $0x2,%ax
    98de:	66 89 c2             	mov    %ax,%dx
    98e1:	66 c1 e2 04          	shl    $0x4,%dx
    98e5:	66 01 d0             	add    %dx,%ax
    98e8:	66 05 b0 b0          	add    $0xb0b0,%ax
    98ec:	00 00                	add    %al,(%eax)
    98ee:	67 66 c7 40 08 01 00 	movw   $0x1,0x8(%bx,%si)
    98f5:	00 00                	add    %al,(%eax)
    PCB_list[index ].eflags = 512;
    98f7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    98fc:	66 c1 e0 02          	shl    $0x2,%ax
    9900:	66 89 c2             	mov    %ax,%dx
    9903:	66 c1 e2 04          	shl    $0x4,%dx
    9907:	66 01 d0             	add    %dx,%ax
    990a:	66 05 b0 b0          	add    $0xb0b0,%ax
    990e:	00 00                	add    %al,(%eax)
    9910:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    9917:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    9919:	67 66 8b 45 08       	mov    0x8(%di),%ax
    991e:	66 c1 e0 02          	shl    $0x2,%ax
    9922:	66 89 c2             	mov    %ax,%dx
    9925:	66 c1 e2 04          	shl    $0x4,%dx
    9929:	66 01 d0             	add    %dx,%ax
    992c:	67 66 8d 90 b0 b0    	lea    -0x4f50(%bx,%si),%dx
    9932:	00 00                	add    %al,(%eax)
    9934:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9939:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 0;
    993e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9943:	66 c1 e0 02          	shl    $0x2,%ax
    9947:	66 89 c2             	mov    %ax,%dx
    994a:	66 c1 e2 04          	shl    $0x4,%dx
    994e:	66 01 d0             	add    %dx,%ax
    9951:	66 05 c0 b0          	add    $0xb0c0,%ax
    9955:	00 00                	add    %al,(%eax)
    9957:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    995d:	00 00                	add    %al,(%eax)
}
    995f:	66 5d                	pop    %bp
    9961:	66 c3                	retw   

00009963 <Set_PCB>:
void Set_PCB(){
    9963:	66 55                	push   %bp
    9965:	66 89 e5             	mov    %sp,%bp
    9968:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    996c:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9973:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    9975:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    997c:	00 00                	add    %al,(%eax)
    997e:	eb 27                	jmp    99a7 <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    9980:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9985:	66 c1 e0 02          	shl    $0x2,%ax
    9989:	66 89 c2             	mov    %ax,%dx
    998c:	66 c1 e2 04          	shl    $0x4,%dx
    9990:	66 01 d0             	add    %dx,%ax
    9993:	66 05 b0 b0          	add    $0xb0b0,%ax
    9997:	00 00                	add    %al,(%eax)
    9999:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    99a0:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 0;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    99a2:	67 66 ff 45 fc       	incw   -0x4(%di)
    99a7:	67 66 83 7d fc 07    	cmpw   $0x7,-0x4(%di)
    99ad:	7e d1                	jle    9980 <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    99af:	66 c9                	leavew 
    99b1:	66 c3                	retw   

000099b3 <sys_schedule>:
int sch_index;
void sys_schedule(){
    99b3:	66 55                	push   %bp
    99b5:	66 89 e5             	mov    %sp,%bp
    99b8:	66 83 ec 0c          	sub    $0xc,%sp
    int i,j;
    int index = -1;
    99bc:	67 66 c7 45 f4 ff ff 	movw   $0xffff,-0xc(%di)
    99c3:	ff                   	(bad)  
    99c4:	ff 66 a1             	jmp    *-0x5f(%esi)
    i = _CurrentProg - PCB_list;
    99c7:	a0 b2 66 89 c2       	mov    0xc28966b2,%al
    99cc:	66 b8 80 b0          	mov    $0xb080,%ax
    99d0:	00 00                	add    %al,(%eax)
    99d2:	66 29 c2             	sub    %ax,%dx
    99d5:	66 89 d0             	mov    %dx,%ax
    99d8:	66 c1 f8 02          	sar    $0x2,%ax
    99dc:	66 89 c2             	mov    %ax,%dx
    99df:	66 89 d0             	mov    %dx,%ax
    99e2:	66 01 c0             	add    %ax,%ax
    99e5:	66 01 d0             	add    %dx,%ax
    99e8:	67 66 8d 14          	lea    (%si),%dx
    99ec:	85 00                	test   %eax,(%eax)
    99ee:	00 00                	add    %al,(%eax)
    99f0:	00 66 01             	add    %ah,0x1(%esi)
    99f3:	d0 66 89             	shlb   -0x77(%esi)
    99f6:	c2 66 c1             	ret    $0xc166
    99f9:	e2 08                	loop   9a03 <sys_schedule+0x50>
    99fb:	66 01 d0             	add    %dx,%ax
    99fe:	66 89 c2             	mov    %ax,%dx
    9a01:	66 c1 e2 10          	shl    $0x10,%dx
    9a05:	66 01 d0             	add    %dx,%ax
    9a08:	66 f7 d8             	neg    %ax
    9a0b:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    for(j = 0;j < PCB_NUMMER;j ++){
    9a10:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    9a17:	00 00                	add    %al,(%eax)
    9a19:	eb 43                	jmp    9a5e <sys_schedule+0xab>
        if(i == PCB_NUMMER - 1){
    9a1b:	67 66 83 7d fc 07    	cmpw   $0x7,-0x4(%di)
    9a21:	75 14                	jne    9a37 <sys_schedule+0x84>
            _CurrentProg = PCB_list + 1;
    9a23:	66 c7 06 a0 b2       	movw   $0xb2a0,(%esi)
    9a28:	c4 b0 00 00 67 66    	les    0x66670000(%eax),%esi
            i = 1;
    9a2e:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    9a35:	eb 11                	jmp    9a48 <sys_schedule+0x95>
        }
        else{
            _CurrentProg ++;
    9a37:	66 a1 a0 b2 66 83    	mov    0x8366b2a0,%ax
    9a3d:	c0 44 66 a3 a0       	rolb   $0xa0,-0x5d(%esi,%eiz,2)
    9a42:	b2 67                	mov    $0x67,%dl
            i ++;
    9a44:	66 ff 45 fc          	incw   -0x4(%ebp)
        }
        if(_CurrentProg -> prg_status == RUN){
    9a48:	66 a1 a0 b2 67 66    	mov    0x6667b2a0,%ax
    9a4e:	8b 40 38             	mov    0x38(%eax),%eax
    9a51:	66 83 f8 01          	cmp    $0x1,%ax
    9a55:	75 02                	jne    9a59 <sys_schedule+0xa6>
            return;
    9a57:	eb 6e                	jmp    9ac7 <sys_schedule+0x114>
int sch_index;
void sys_schedule(){
    int i,j;
    int index = -1;
    i = _CurrentProg - PCB_list;
    for(j = 0;j < PCB_NUMMER;j ++){
    9a59:	67 66 ff 45 f8       	incw   -0x8(%di)
    9a5e:	67 66 83 7d f8 07    	cmpw   $0x7,-0x8(%di)
    9a64:	7e b5                	jle    9a1b <sys_schedule+0x68>
        }
        if(_CurrentProg -> prg_status == RUN){
            return;
        }
    }
    if(isempty(&readyqueue) != 1){
    9a66:	66 68 c0 b2          	pushw  $0xb2c0
    9a6a:	00 00                	add    %al,(%eax)
    9a6c:	66 e8 23 07          	callw  a193 <stack_copy+0x35>
    9a70:	00 00                	add    %al,(%eax)
    9a72:	66 83 c4 04          	add    $0x4,%sp
    9a76:	66 83 f8 01          	cmp    $0x1,%ax
    9a7a:	74 41                	je     9abd <sys_schedule+0x10a>
        dequeue(&readyqueue,&sch_index);
    9a7c:	66 68 1c b3          	pushw  $0xb31c
    9a80:	00 00                	add    %al,(%eax)
    9a82:	66 68 c0 b2          	pushw  $0xb2c0
    9a86:	00 00                	add    %al,(%eax)
    9a88:	66 e8 a3 07          	callw  a22f <enqueue+0x6a>
    9a8c:	00 00                	add    %al,(%eax)
    9a8e:	66 83 c4 08          	add    $0x8,%sp
        _CurrentProg = PCB_list + sch_index;
    9a92:	66 a1 1c b3 66 c1    	mov    0xc166b31c,%ax
    9a98:	e0 02                	loopne 9a9c <sys_schedule+0xe9>
    9a9a:	66 89 c2             	mov    %ax,%dx
    9a9d:	66 c1 e2 04          	shl    $0x4,%dx
    9aa1:	66 01 d0             	add    %dx,%ax
    9aa4:	66 05 80 b0          	add    $0xb080,%ax
    9aa8:	00 00                	add    %al,(%eax)
    9aaa:	66 a3 a0 b2 66 a1    	mov    %ax,0xa166b2a0
        _CurrentProg -> prg_status = RUN;
    9ab0:	a0 b2 67 66 c7       	mov    0xc76667b2,%al
    9ab5:	40                   	inc    %eax
    9ab6:	38 01                	cmp    %al,(%ecx)
    9ab8:	00 00                	add    %al,(%eax)
    9aba:	00 eb                	add    %ch,%bl
        return;
    9abc:	0a 66 c7             	or     -0x39(%esi),%ah
    }
    _CurrentProg = PCB_list ;
    9abf:	06                   	push   %es
    9ac0:	a0 b2 80 b0 00       	mov    0xb080b2,%al
    9ac5:	00 90 66 c9 66 c3    	add    %dl,-0x3c99369a(%eax)

00009acb <sys_exit>:
    return;
}
void sys_exit(){
    9acb:	66 55                	push   %bp
    9acd:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    9ad0:	fa                   	cli    
    _CurrentProg -> prg_status = EXIT;
    9ad1:	66 a1 a0 b2 67 66    	mov    0x6667b2a0,%ax
    9ad7:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    __asm__("sti\n");
    9ade:	fb                   	sti    
}
    9adf:	66 5d                	pop    %bp
    9ae1:	66 c3                	retw   

00009ae3 <sys_bolocked>:



int queuesize,tmp;//一定要是全局，否则dequeue无法将tmp修改
void sys_bolocked(int index){
    9ae3:	66 55                	push   %bp
    9ae5:	66 89 e5             	mov    %sp,%bp
    9ae8:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    9aec:	fa                   	cli    
    PCB_list[index].prg_status = BLOCKED;
    9aed:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9af2:	66 c1 e0 02          	shl    $0x2,%ax
    9af6:	66 89 c2             	mov    %ax,%dx
    9af9:	66 c1 e2 04          	shl    $0x4,%dx
    9afd:	66 01 d0             	add    %dx,%ax
    9b00:	66 05 b0 b0          	add    $0xb0b0,%ax
    9b04:	00 00                	add    %al,(%eax)
    9b06:	67 66 c7 40 08 02 00 	movw   $0x2,0x8(%bx,%si)
    9b0d:	00 00                	add    %al,(%eax)
    enqueue(&blockqueue,index);
    9b0f:	67 66 ff 75 08       	pushw  0x8(%di)
    9b14:	66 68 20 b0          	pushw  $0xb020
    9b18:	00 00                	add    %al,(%eax)
    9b1a:	66 e8 a5 06          	callw  a1c3 <size+0x11>
    9b1e:	00 00                	add    %al,(%eax)
    9b20:	66 83 c4 08          	add    $0x8,%sp
    queuesize = size(&readyqueue);
    9b24:	66 68 c0 b2          	pushw  $0xb2c0
    9b28:	00 00                	add    %al,(%eax)
    9b2a:	66 e8 82 06          	callw  a1b0 <isempty+0x1b>
    9b2e:	00 00                	add    %al,(%eax)
    9b30:	66 83 c4 04          	add    $0x4,%sp
    9b34:	66 a3 18 b3 67 66    	mov    %ax,0x6667b318
    int i = 0;
    9b3a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    9b41:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9b48:	00 00                	add    %al,(%eax)
    9b4a:	eb 3c                	jmp    9b88 <sys_bolocked+0xa5>
        dequeue(&readyqueue,&tmp);
    9b4c:	66 68 14 b3          	pushw  $0xb314
    9b50:	00 00                	add    %al,(%eax)
    9b52:	66 68 c0 b2          	pushw  $0xb2c0
    9b56:	00 00                	add    %al,(%eax)
    9b58:	66 e8 d3 06          	callw  a22f <enqueue+0x6a>
    9b5c:	00 00                	add    %al,(%eax)
    9b5e:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    9b62:	66 a1 14 b3 67 66    	mov    0x6667b314,%ax
    9b68:	39 45 08             	cmp    %eax,0x8(%ebp)
    9b6b:	74 16                	je     9b83 <sys_bolocked+0xa0>
            enqueue(&readyqueue,tmp);
    9b6d:	66 a1 14 b3 66 50    	mov    0x5066b314,%ax
    9b73:	66 68 c0 b2          	pushw  $0xb2c0
    9b77:	00 00                	add    %al,(%eax)
    9b79:	66 e8 46 06          	callw  a1c3 <size+0x11>
    9b7d:	00 00                	add    %al,(%eax)
    9b7f:	66 83 c4 08          	add    $0x8,%sp
    __asm__("cli\n");
    PCB_list[index].prg_status = BLOCKED;
    enqueue(&blockqueue,index);
    queuesize = size(&readyqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    9b83:	67 66 ff 45 fc       	incw   -0x4(%di)
    9b88:	66 a1 18 b3 67 66    	mov    0x6667b318,%ax
    9b8e:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    9b91:	7c b9                	jl     9b4c <sys_bolocked+0x69>
        dequeue(&readyqueue,&tmp);
        if(index != tmp){
            enqueue(&readyqueue,tmp);
        }
    }
    __asm__("sti\n");
    9b93:	fb                   	sti    
}
    9b94:	66 c9                	leavew 
    9b96:	66 c3                	retw   

00009b98 <sys_wakeup>:
void sys_wakeup(int index){
    9b98:	66 55                	push   %bp
    9b9a:	66 89 e5             	mov    %sp,%bp
    9b9d:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    9ba1:	fa                   	cli    
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    9ba2:	66 68 20 b0          	pushw  $0xb020
    9ba6:	00 00                	add    %al,(%eax)
    9ba8:	66 e8 04 06          	callw  a1b0 <isempty+0x1b>
    9bac:	00 00                	add    %al,(%eax)
    9bae:	66 83 c4 04          	add    $0x4,%sp
    9bb2:	66 a3 18 b3 67 66    	mov    %ax,0x6667b318
    int i = 0;
    9bb8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    9bbf:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9bc6:	00 00                	add    %al,(%eax)
    9bc8:	eb 3c                	jmp    9c06 <sys_wakeup+0x6e>
        dequeue(&blockqueue,&tmp);
    9bca:	66 68 14 b3          	pushw  $0xb314
    9bce:	00 00                	add    %al,(%eax)
    9bd0:	66 68 20 b0          	pushw  $0xb020
    9bd4:	00 00                	add    %al,(%eax)
    9bd6:	66 e8 55 06          	callw  a22f <enqueue+0x6a>
    9bda:	00 00                	add    %al,(%eax)
    9bdc:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    9be0:	66 a1 14 b3 67 66    	mov    0x6667b314,%ax
    9be6:	39 45 08             	cmp    %eax,0x8(%ebp)
    9be9:	74 16                	je     9c01 <sys_wakeup+0x69>
            enqueue(&blockqueue,tmp);
    9beb:	66 a1 14 b3 66 50    	mov    0x5066b314,%ax
    9bf1:	66 68 20 b0          	pushw  $0xb020
    9bf5:	00 00                	add    %al,(%eax)
    9bf7:	66 e8 c8 05          	callw  a1c3 <size+0x11>
    9bfb:	00 00                	add    %al,(%eax)
    9bfd:	66 83 c4 08          	add    $0x8,%sp
void sys_wakeup(int index){
    __asm__("cli\n");
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    9c01:	67 66 ff 45 fc       	incw   -0x4(%di)
    9c06:	66 a1 18 b3 67 66    	mov    0x6667b318,%ax
    9c0c:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    9c0f:	7c b9                	jl     9bca <sys_wakeup+0x32>
        dequeue(&blockqueue,&tmp);
        if(index != tmp){
            enqueue(&blockqueue,tmp);
        }
    }
    PCB_list[index].prg_status = READY;
    9c11:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9c16:	66 c1 e0 02          	shl    $0x2,%ax
    9c1a:	66 89 c2             	mov    %ax,%dx
    9c1d:	66 c1 e2 04          	shl    $0x4,%dx
    9c21:	66 01 d0             	add    %dx,%ax
    9c24:	66 05 b0 b0          	add    $0xb0b0,%ax
    9c28:	00 00                	add    %al,(%eax)
    9c2a:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    9c31:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    9c33:	67 66 ff 75 08       	pushw  0x8(%di)
    9c38:	66 68 c0 b2          	pushw  $0xb2c0
    9c3c:	00 00                	add    %al,(%eax)
    9c3e:	66 e8 81 05          	callw  a1c3 <size+0x11>
    9c42:	00 00                	add    %al,(%eax)
    9c44:	66 83 c4 08          	add    $0x8,%sp
    __asm__("sti\n");
    9c48:	fb                   	sti    
}
    9c49:	66 c9                	leavew 
    9c4b:	66 c3                	retw   

00009c4d <sys_run>:
void sys_run(){
    9c4d:	66 55                	push   %bp
    9c4f:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    9c52:	66 a1 a0 b2 67 66    	mov    0x6667b2a0,%ax
    9c58:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    9c5f:	66 5d                	pop    %bp
    9c61:	66 c3                	retw   

00009c63 <do_fork>:

int do_fork(){
    9c63:	66 55                	push   %bp
    9c65:	66 89 e5             	mov    %sp,%bp
    9c68:	66 83 ec 08          	sub    $0x8,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    9c6c:	67 66 c7 45 fc c4 b0 	movw   $0xb0c4,-0x4(%di)
    9c73:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN )    fork_prg = fork_prg + 1;//应该增加used位，防止被覆盖
    9c75:	eb 06                	jmp    9c7d <do_fork+0x1a>
    9c77:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    9c7d:	67 66 81 7d fc a0 b2 	cmpw   $0xb2a0,-0x4(%di)
    9c84:	00 00                	add    %al,(%eax)
    9c86:	73 10                	jae    9c98 <do_fork+0x35>
    9c88:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9c8d:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    9c92:	66 83 f8 01          	cmp    $0x1,%ax
    9c96:	74 df                	je     9c77 <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    9c98:	67 66 81 7d fc 5c b2 	cmpw   $0xb25c,-0x4(%di)
    9c9f:	00 00                	add    %al,(%eax)
    9ca1:	76 0f                	jbe    9cb2 <do_fork+0x4f>
    9ca3:	66 a1 a0 b2 67 66    	mov    0x6667b2a0,%ax
    9ca9:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    9caf:	e9 42 02 66 e8       	jmp    e8669ef6 <_end+0xe865ebd6>
    else{
        _Schedule_once();
    9cb4:	7d e9                	jge    9c9f <do_fork+0x3c>
    9cb6:	ff                   	(bad)  
    9cb7:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    9cba:	ec                   	in     (%dx),%al
    9cbb:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    9cbc:	66 a1 a0 b2 67 66    	mov    0x6667b2a0,%ax
    9cc2:	ff 75 fc             	pushl  -0x4(%ebp)
    9cc5:	66 50                	push   %ax
    9cc7:	66 e8 86 03          	callw  a051 <counter+0x62>
    9ccb:	00 00                	add    %al,(%eax)
    9ccd:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    9cd1:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    9cd5:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9cda:	66 b8 80 b0          	mov    $0xb080,%ax
    9cde:	00 00                	add    %al,(%eax)
    9ce0:	66 29 c2             	sub    %ax,%dx
    9ce3:	66 89 d0             	mov    %dx,%ax
    9ce6:	66 c1 f8 02          	sar    $0x2,%ax
    9cea:	66 89 c2             	mov    %ax,%dx
    9ced:	66 89 d0             	mov    %dx,%ax
    9cf0:	66 01 c0             	add    %ax,%ax
    9cf3:	66 01 d0             	add    %dx,%ax
    9cf6:	67 66 8d 14          	lea    (%si),%dx
    9cfa:	85 00                	test   %eax,(%eax)
    9cfc:	00 00                	add    %al,(%eax)
    9cfe:	00 66 01             	add    %ah,0x1(%esi)
    9d01:	d0 66 89             	shlb   -0x77(%esi)
    9d04:	c2 66 c1             	ret    $0xc166
    9d07:	e2 08                	loop   9d11 <do_fork+0xae>
    9d09:	66 01 d0             	add    %dx,%ax
    9d0c:	66 89 c2             	mov    %ax,%dx
    9d0f:	66 c1 e2 10          	shl    $0x10,%dx
    9d13:	66 01 d0             	add    %dx,%ax
    9d16:	66 f7 d8             	neg    %ax
    9d19:	66 89 c2             	mov    %ax,%dx
    9d1c:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9d21:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    9d26:	66 a1 a0 b2 66 89    	mov    0x8966b2a0,%ax
    9d2c:	c2 66 b8             	ret    $0xb866
    9d2f:	80 b0 00 00 66 29 c2 	xorb   $0xc2,0x29660000(%eax)
    9d36:	66 89 d0             	mov    %dx,%ax
    9d39:	66 c1 f8 02          	sar    $0x2,%ax
    9d3d:	66 89 c2             	mov    %ax,%dx
    9d40:	66 89 d0             	mov    %dx,%ax
    9d43:	66 01 c0             	add    %ax,%ax
    9d46:	66 01 d0             	add    %dx,%ax
    9d49:	67 66 8d 14          	lea    (%si),%dx
    9d4d:	85 00                	test   %eax,(%eax)
    9d4f:	00 00                	add    %al,(%eax)
    9d51:	00 66 01             	add    %ah,0x1(%esi)
    9d54:	d0 66 89             	shlb   -0x77(%esi)
    9d57:	c2 66 c1             	ret    $0xc166
    9d5a:	e2 08                	loop   9d64 <do_fork+0x101>
    9d5c:	66 01 d0             	add    %dx,%ax
    9d5f:	66 89 c2             	mov    %ax,%dx
    9d62:	66 c1 e2 10          	shl    $0x10,%dx
    9d66:	66 01 d0             	add    %dx,%ax
    9d69:	66 f7 d8             	neg    %ax
    9d6c:	66 89 c2             	mov    %ax,%dx
    9d6f:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9d74:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    9d79:	66 a1 a0 b2 67 66    	mov    0x6667b2a0,%ax
    9d7f:	8b 50 20             	mov    0x20(%eax),%edx
    9d82:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9d87:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    9d8c:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9d91:	66 b8 80 b0          	mov    $0xb080,%ax
    9d95:	00 00                	add    %al,(%eax)
    9d97:	66 29 c2             	sub    %ax,%dx
    9d9a:	66 89 d0             	mov    %dx,%ax
    9d9d:	66 c1 f8 02          	sar    $0x2,%ax
    9da1:	66 89 c2             	mov    %ax,%dx
    9da4:	66 89 d0             	mov    %dx,%ax
    9da7:	66 01 c0             	add    %ax,%ax
    9daa:	66 01 d0             	add    %dx,%ax
    9dad:	67 66 8d 14          	lea    (%si),%dx
    9db1:	85 00                	test   %eax,(%eax)
    9db3:	00 00                	add    %al,(%eax)
    9db5:	00 66 01             	add    %ah,0x1(%esi)
    9db8:	d0 66 89             	shlb   -0x77(%esi)
    9dbb:	c2 66 c1             	ret    $0xc166
    9dbe:	e2 08                	loop   9dc8 <do_fork+0x165>
    9dc0:	66 01 d0             	add    %dx,%ax
    9dc3:	66 89 c2             	mov    %ax,%dx
    9dc6:	66 c1 e2 10          	shl    $0x10,%dx
    9dca:	66 01 d0             	add    %dx,%ax
    9dcd:	66 f7 d8             	neg    %ax
    9dd0:	66 83 c0 02          	add    $0x2,%ax
    9dd4:	66 c1 e0 0c          	shl    $0xc,%ax
    9dd8:	66 89 c2             	mov    %ax,%dx
    9ddb:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9de0:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    9de5:	66 a1 a0 b2 67 66    	mov    0x6667b2a0,%ax
    9deb:	8b 50 30             	mov    0x30(%eax),%edx
    9dee:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9df3:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    9df8:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9dfd:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    9e04:	00 00                	add    %al,(%eax)
        
        int index = fork_prg - PCB_list;
    9e06:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9e0b:	66 b8 80 b0          	mov    $0xb080,%ax
    9e0f:	00 00                	add    %al,(%eax)
    9e11:	66 29 c2             	sub    %ax,%dx
    9e14:	66 89 d0             	mov    %dx,%ax
    9e17:	66 c1 f8 02          	sar    $0x2,%ax
    9e1b:	66 89 c2             	mov    %ax,%dx
    9e1e:	66 89 d0             	mov    %dx,%ax
    9e21:	66 01 c0             	add    %ax,%ax
    9e24:	66 01 d0             	add    %dx,%ax
    9e27:	67 66 8d 14          	lea    (%si),%dx
    9e2b:	85 00                	test   %eax,(%eax)
    9e2d:	00 00                	add    %al,(%eax)
    9e2f:	00 66 01             	add    %ah,0x1(%esi)
    9e32:	d0 66 89             	shlb   -0x77(%esi)
    9e35:	c2 66 c1             	ret    $0xc166
    9e38:	e2 08                	loop   9e42 <do_fork+0x1df>
    9e3a:	66 01 d0             	add    %dx,%ax
    9e3d:	66 89 c2             	mov    %ax,%dx
    9e40:	66 c1 e2 10          	shl    $0x10,%dx
    9e44:	66 01 d0             	add    %dx,%ax
    9e47:	66 f7 d8             	neg    %ax
    9e4a:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
        __asm__("sub $6,%esp");
    9e4f:	66 83 ec 06          	sub    $0x6,%sp
        enqueue(&readyqueue,index); 
    9e53:	67 66 ff 75 f8       	pushw  -0x8(%di)
    9e58:	66 68 c0 b2          	pushw  $0xb2c0
    9e5c:	00 00                	add    %al,(%eax)
    9e5e:	66 e8 61 03          	callw  a1c3 <size+0x11>
    9e62:	00 00                	add    %al,(%eax)
    9e64:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    9e68:	66 83 c4 06          	add    $0x6,%sp
        _Schedule_once();
    9e6c:	66 e8 c3 e7          	callw  8633 <S+0x14>
    9e70:	ff                   	(bad)  
    9e71:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    9e74:	ec                   	in     (%dx),%al
    9e75:	06                   	push   %es
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    9e76:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9e7b:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    9e80:	66 a1 a0 b2 67 66    	mov    0x6667b2a0,%ax
    9e86:	8b 50 28             	mov    0x28(%eax),%edx
    9e89:	66 a1 a0 b2 67 66    	mov    0x6667b2a0,%ax
    9e8f:	8b 40 24             	mov    0x24(%eax),%eax
    9e92:	66 51                	push   %cx
    9e94:	66 52                	push   %dx
    9e96:	66 50                	push   %ax
    9e98:	66 e8 87 e6          	callw  8523 <Message31+0x4>
    9e9c:	ff                   	(bad)  
    9e9d:	ff 66 83             	jmp    *-0x7d(%esi)
    9ea0:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
        __asm__("add $6,%esp");
    9ea3:	83 c4 06             	add    $0x6,%esp
        fork_prg -> ip = _CurrentProg -> ip;
    9ea6:	66 a1 a0 b2 67 66    	mov    0x6667b2a0,%ax
    9eac:	8b 50 2c             	mov    0x2c(%eax),%edx
    9eaf:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9eb4:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    9eb9:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9ebe:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    9ec4:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    9ec6:	66 a1 a0 b2 67 66    	mov    0x6667b2a0,%ax
    9ecc:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    9ecf:	75 08                	jne    9ed9 <do_fork+0x276>
            return 0;
    9ed1:	66 b8 00 00          	mov    $0x0,%ax
    9ed5:	00 00                	add    %al,(%eax)
    9ed7:	eb 1b                	jmp    9ef4 <do_fork+0x291>
        }
        _CurrentProg -> eax = _CurrentProg -> id;
    9ed9:	66 a1 a0 b2 66 8b    	mov    0x8b66b2a0,%ax
    9edf:	16                   	push   %ss
    9ee0:	a0 b2 67 66 8b       	mov    0x8b6667b2,%al
    9ee5:	52                   	push   %edx
    9ee6:	3c 67                	cmp    $0x67,%al
    9ee8:	66 89 10             	mov    %dx,(%eax)
        return _CurrentProg -> eax;
    9eeb:	66 a1 a0 b2 67 66    	mov    0x6667b2a0,%ax
    9ef1:	8b 00                	mov    (%eax),%eax
    9ef3:	90                   	nop
    }
}
    9ef4:	66 c9                	leavew 
    9ef6:	66 c3                	retw   

00009ef8 <sys_exit_fork>:
void sys_exit_fork(char ch){
    9ef8:	66 55                	push   %bp
    9efa:	66 89 e5             	mov    %sp,%bp
    9efd:	66 83 ec 08          	sub    $0x8,%sp
    9f01:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9f06:	67 88 45 f8          	mov    %al,-0x8(%di)
    int index = _CurrentProg -> fid;
    9f0a:	66 a1 a0 b2 67 66    	mov    0x6667b2a0,%ax
    9f10:	8b 40 40             	mov    0x40(%eax),%eax
    9f13:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_wakeup(index);
    9f18:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9f1d:	66 e8 75 fc          	callw  9b96 <sys_bolocked+0xb3>
    9f21:	ff                   	(bad)  
    9f22:	ff 66 83             	jmp    *-0x7d(%esi)
    9f25:	c4 04 66             	les    (%esi,%eiz,2),%eax
    PCB_list[_CurrentProg -> fid].eax = ch;
    9f28:	a1 a0 b2 67 66       	mov    0x6667b2a0,%eax
    9f2d:	8b 40 40             	mov    0x40(%eax),%eax
    9f30:	67 66 0f be 55 f8    	movsbw -0x8(%di),%dx
    9f36:	66 c1 e0 02          	shl    $0x2,%ax
    9f3a:	66 89 c1             	mov    %ax,%cx
    9f3d:	66 c1 e1 04          	shl    $0x4,%cx
    9f41:	66 01 c8             	add    %cx,%ax
    9f44:	66 05 80 b0          	add    $0xb080,%ax
    9f48:	00 00                	add    %al,(%eax)
    9f4a:	67 66 89 10          	mov    %dx,(%bx,%si)
    _CurrentProg -> prg_status = EXIT;
    9f4e:	66 a1 a0 b2 67 66    	mov    0x6667b2a0,%ax
    9f54:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    _Schedule();
    9f5b:	66 e8 ea e6          	callw  8649 <_fork_user+0x9>
    9f5f:	ff                   	(bad)  
    9f60:	ff 66 c9             	jmp    *-0x37(%esi)
}
    9f63:	66 c3                	retw   

00009f65 <sys_wait>:
int sys_wait(){
    9f65:	66 55                	push   %bp
    9f67:	66 89 e5             	mov    %sp,%bp
    9f6a:	66 83 ec 04          	sub    $0x4,%sp
    int index = _CurrentProg - PCB_list;
    9f6e:	66 a1 a0 b2 66 89    	mov    0x8966b2a0,%ax
    9f74:	c2 66 b8             	ret    $0xb866
    9f77:	80 b0 00 00 66 29 c2 	xorb   $0xc2,0x29660000(%eax)
    9f7e:	66 89 d0             	mov    %dx,%ax
    9f81:	66 c1 f8 02          	sar    $0x2,%ax
    9f85:	66 89 c2             	mov    %ax,%dx
    9f88:	66 89 d0             	mov    %dx,%ax
    9f8b:	66 01 c0             	add    %ax,%ax
    9f8e:	66 01 d0             	add    %dx,%ax
    9f91:	67 66 8d 14          	lea    (%si),%dx
    9f95:	85 00                	test   %eax,(%eax)
    9f97:	00 00                	add    %al,(%eax)
    9f99:	00 66 01             	add    %ah,0x1(%esi)
    9f9c:	d0 66 89             	shlb   -0x77(%esi)
    9f9f:	c2 66 c1             	ret    $0xc166
    9fa2:	e2 08                	loop   9fac <sys_wait+0x47>
    9fa4:	66 01 d0             	add    %dx,%ax
    9fa7:	66 89 c2             	mov    %ax,%dx
    9faa:	66 c1 e2 10          	shl    $0x10,%dx
    9fae:	66 01 d0             	add    %dx,%ax
    9fb1:	66 f7 d8             	neg    %ax
    9fb4:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_bolocked(index);
    9fb9:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9fbe:	66 e8 1f fb          	callw  9ae1 <sys_exit+0x16>
    9fc2:	ff                   	(bad)  
    9fc3:	ff 66 83             	jmp    *-0x7d(%esi)
    9fc6:	c4 04 66             	les    (%esi,%eiz,2),%eax
    _Schedule();
    9fc9:	e8 7d e6 ff ff       	call   864b <_Schedule>
    return _CurrentProg -> eax;
    9fce:	66 a1 a0 b2 67 66    	mov    0x6667b2a0,%ax
    9fd4:	8b 00                	mov    (%eax),%eax
}
    9fd6:	66 c9                	leavew 
    9fd8:	66 c3                	retw   

00009fda <thread_join>:
void thread_join(){
    9fda:	66 55                	push   %bp
    9fdc:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    9fdf:	90                   	nop
    9fe0:	66 e8 09 00          	callw  9fed <thread_join+0x13>
    9fe4:	00 00                	add    %al,(%eax)
    9fe6:	66 85 c0             	test   %ax,%ax
    9fe9:	75 f5                	jne    9fe0 <thread_join+0x6>
    }
}
    9feb:	66 5d                	pop    %bp
    9fed:	66 c3                	retw   

00009fef <counter>:
int counter(){
    9fef:	66 55                	push   %bp
    9ff1:	66 89 e5             	mov    %sp,%bp
    9ff4:	66 83 ec 08          	sub    $0x8,%sp
    int i = 0;
    9ff8:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9fff:	00 00                	add    %al,(%eax)
    int count = 0;
    a001:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    a008:	00 00                	add    %al,(%eax)
    for(i = 1;i < PCB_NUMMER;i ++){
    a00a:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    a011:	00 00                	add    %al,(%eax)
    a013:	eb 2d                	jmp    a042 <counter+0x53>
        if(PCB_list[i].prg_status != EXIT){
    a015:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    a01a:	66 c1 e0 02          	shl    $0x2,%ax
    a01e:	66 89 c2             	mov    %ax,%dx
    a021:	66 c1 e2 04          	shl    $0x4,%dx
    a025:	66 01 d0             	add    %dx,%ax
    a028:	66 05 b0 b0          	add    $0xb0b0,%ax
    a02c:	00 00                	add    %al,(%eax)
    a02e:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a033:	66 85 c0             	test   %ax,%ax
    a036:	74 05                	je     a03d <counter+0x4e>
            count ++;
    a038:	67 66 ff 45 f8       	incw   -0x8(%di)
    }
}
int counter(){
    int i = 0;
    int count = 0;
    for(i = 1;i < PCB_NUMMER;i ++){
    a03d:	67 66 ff 45 fc       	incw   -0x4(%di)
    a042:	67 66 83 7d fc 07    	cmpw   $0x7,-0x4(%di)
    a048:	7e cb                	jle    a015 <counter+0x26>
        if(PCB_list[i].prg_status != EXIT){
            count ++;
        }
    }
    return count;
    a04a:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    a04f:	66 c9                	leavew 
    a051:	66 c3                	retw   

0000a053 <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    a053:	66 55                	push   %bp
    a055:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    a058:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a05d:	67 66 8b 10          	mov    (%bx,%si),%dx
    a061:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a066:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    a06a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a06f:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    a074:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a079:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    a07e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a083:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    a088:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a08d:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    a092:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a097:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    a09c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a0a1:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    a0a6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a0ab:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    a0b0:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a0b5:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    a0ba:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a0bf:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    a0c4:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a0c9:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    a0ce:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a0d3:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    a0d8:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a0dd:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    a0e2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a0e7:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    a0ec:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a0f1:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    a0f6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a0fb:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    a100:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a105:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    a10a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a10f:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    a114:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a119:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    a11e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a123:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    a128:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a12d:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    a132:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a137:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    a13c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a141:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    a146:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a14b:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    a150:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a155:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    a15a:	66 5d                	pop    %bp
    a15c:	66 c3                	retw   

0000a15e <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    a15e:	66 55                	push   %bp
    a160:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    a163:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a168:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    a16d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a172:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    a177:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a17c:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    a181:	66 51                	push   %cx
    a183:	66 52                	push   %dx
    a185:	66 50                	push   %ax
    a187:	66 e8 98 e3          	callw  8523 <Message31+0x4>
    a18b:	ff                   	(bad)  
    a18c:	ff 66 83             	jmp    *-0x7d(%esi)
    a18f:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    a192:	c9                   	leave  
    a193:	66 c3                	retw   

0000a195 <isempty>:
int isempty(struct Queue *queue){
    a195:	66 55                	push   %bp
    a197:	66 89 e5             	mov    %sp,%bp
    return (queue -> size == 0);
    a19a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a19f:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a1a4:	66 85 c0             	test   %ax,%ax
    a1a7:	0f 94 c0             	sete   %al
    a1aa:	66 0f b6 c0          	movzbw %al,%ax
}
    a1ae:	66 5d                	pop    %bp
    a1b0:	66 c3                	retw   

0000a1b2 <size>:
int size(struct Queue *queue){
    a1b2:	66 55                	push   %bp
    a1b4:	66 89 e5             	mov    %sp,%bp
    return queue -> size ;
    a1b7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a1bc:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
}
    a1c1:	66 5d                	pop    %bp
    a1c3:	66 c3                	retw   

0000a1c5 <enqueue>:
void enqueue(struct Queue *queue,int data){
    a1c5:	66 55                	push   %bp
    a1c7:	66 89 e5             	mov    %sp,%bp
    if(queue -> size >= MAX){
    a1ca:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a1cf:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a1d4:	66 83 f8 11          	cmp    $0x11,%ax
    a1d8:	7e 02                	jle    a1dc <enqueue+0x17>
        return;
    a1da:	eb 51                	jmp    a22d <enqueue+0x68>
    }
    queue -> size ++;
    a1dc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a1e1:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a1e6:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    a1eb:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a1f0:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    queue -> tail = (queue -> tail + 1) % MAX;
    a1f5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a1fa:	67 66 8b 00          	mov    (%bx,%si),%ax
    a1fe:	66 40                	inc    %ax
    a200:	66 b9 12 00          	mov    $0x12,%cx
    a204:	00 00                	add    %al,(%eax)
    a206:	66 99                	cwtd   
    a208:	66 f7 f9             	idiv   %cx
    a20b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a210:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> array[queue -> tail] = data;
    a214:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a219:	67 66 8b 10          	mov    (%bx,%si),%dx
    a21d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a222:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    a227:	67 66 89 4c 90       	mov    %cx,-0x70(%si)
    a22c:	0c 66                	or     $0x66,%al
}
    a22e:	5d                   	pop    %ebp
    a22f:	66 c3                	retw   

0000a231 <dequeue>:
void dequeue(struct Queue *queue,int * data){
    a231:	66 55                	push   %bp
    a233:	66 89 e5             	mov    %sp,%bp
    if(queue -> size <= 0){
    a236:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a23b:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a240:	66 85 c0             	test   %ax,%ax
    a243:	7f 02                	jg     a247 <dequeue+0x16>
        return;
    a245:	eb 58                	jmp    a29f <dequeue+0x6e>
    }
    queue -> size --;
    a247:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a24c:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a251:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    a256:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a25b:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    *data = queue -> array[queue -> head];
    a260:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a265:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    a26a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a26f:	67 66 8b 54 90       	mov    -0x70(%si),%dx
    a274:	0c 67                	or     $0x67,%al
    a276:	66 8b 45 0c          	mov    0xc(%ebp),%ax
    a27a:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> head = (queue -> head + 1) % MAX;
    a27e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a283:	67 66 8b 40 04       	mov    0x4(%bx,%si),%ax
    a288:	66 40                	inc    %ax
    a28a:	66 b9 12 00          	mov    $0x12,%cx
    a28e:	00 00                	add    %al,(%eax)
    a290:	66 99                	cwtd   
    a292:	66 f7 f9             	idiv   %cx
    a295:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a29a:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
}
    a29f:	66 5d                	pop    %bp
    a2a1:	66 c3                	retw   

0000a2a3 <init_queue>:
void init_queue(struct Queue *queue){
    a2a3:	66 55                	push   %bp
    a2a5:	66 89 e5             	mov    %sp,%bp
    queue -> size = 0;
    a2a8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a2ad:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    a2b4:	00 00                	add    %al,(%eax)
    queue -> tail = -1;
    a2b6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a2bb:	67 66 c7 00 ff ff    	movw   $0xffff,(%bx,%si)
    a2c1:	ff                   	(bad)  
    a2c2:	ff 67 66             	jmp    *0x66(%edi)
    queue -> head = 0;
    a2c5:	8b 45 08             	mov    0x8(%ebp),%eax
    a2c8:	67 66 c7 40 04 00 00 	movw   $0x0,0x4(%bx,%si)
    a2cf:	00 00                	add    %al,(%eax)
    a2d1:	66 5d                	pop    %bp
    a2d3:	66 c3                	retw   
