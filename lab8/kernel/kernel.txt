
kernel.elf:     file format elf32-i386


Disassembly of section .text:

00007d00 <_start>:
    7d00:	66 b8 00 00          	mov    $0x0,%ax
    7d04:	00 00                	add    %al,(%eax)
    7d06:	8e d8                	mov    %eax,%ds
    7d08:	8e c0                	mov    %eax,%es
    7d0a:	8e d0                	mov    %eax,%ss
    7d0c:	66 ea 14 7d 00 00    	ljmpw  $0x0,$0x7d14
	...

00007d14 <main>:
#include"kernel.h"
#include "../syscall/stdio.h"
#include "../syscall/schedule.h"
#include "../syscall/time.h"

int main(){
    7d14:	66 55                	push   %bp
    7d16:	66 89 e5             	mov    %sp,%bp
    7d19:	66 83 ec 0c          	sub    $0xc,%sp
    clearscreen();
    7d1d:	66 e8 3a 06          	callw  835b <run+0x5c>
    7d21:	00 00                	add    %al,(%eax)
   // char str[100] = {};
    //getline(str,10);
   // prints(str);
    Initial_Int();
    7d23:	66 e8 44 06          	callw  836b <clearscreen+0xe>
    7d27:	00 00                	add    %al,(%eax)
    init_queue(&readyqueue);
    7d29:	66 68 80 db          	pushw  $0xdb80
    7d2d:	00 00                	add    %al,(%eax)
    7d2f:	66 e8 ca 26          	callw  a3fd <dequeue+0x70>
    7d33:	00 00                	add    %al,(%eax)
    7d35:	66 83 c4 04          	add    $0x4,%sp
    init_queue(&blockqueue);
    7d39:	66 68 00 c5          	pushw  $0xc500
    7d3d:	00 00                	add    %al,(%eax)
    7d3f:	66 e8 ba 26          	callw  a3fd <dequeue+0x70>
    7d43:	00 00                	add    %al,(%eax)
    7d45:	66 83 c4 04          	add    $0x4,%sp
    //loadProg(25,95,0x2000);
    //loadProg(25,125,0x3000);
    //loadProg(25,155,0x4000);
    //loadProg(25,185,0x5000);
    //_loadP(25,215,0x6000);
    _loadP(25,235,0x7000);
    7d49:	66 68 00 70          	pushw  $0x7000
    7d4d:	00 00                	add    %al,(%eax)
    7d4f:	66 68 eb 00          	pushw  $0xeb
    7d53:	00 00                	add    %al,(%eax)
    7d55:	66 6a 19             	pushw  $0x19
    7d58:	66 e8 3a 07          	callw  8496 <_setPoint+0x15>
    7d5c:	00 00                	add    %al,(%eax)
    7d5e:	66 83 c4 0c          	add    $0xc,%sp
    _loadP(25,265,0x8000);
    7d62:	66 68 00 80          	pushw  $0x8000
    7d66:	00 00                	add    %al,(%eax)
    7d68:	66 68 09 01          	pushw  $0x109
    7d6c:	00 00                	add    %al,(%eax)
    7d6e:	66 6a 19             	pushw  $0x19
    7d71:	66 e8 21 07          	callw  8496 <_setPoint+0x15>
    7d75:	00 00                	add    %al,(%eax)
    7d77:	66 83 c4 0c          	add    $0xc,%sp
    _loadP(25,295,0x9000);
    7d7b:	66 68 00 90          	pushw  $0x9000
    7d7f:	00 00                	add    %al,(%eax)
    7d81:	66 68 27 01          	pushw  $0x127
    7d85:	00 00                	add    %al,(%eax)
    7d87:	66 6a 19             	pushw  $0x19
    7d8a:	66 e8 08 07          	callw  8496 <_setPoint+0x15>
    7d8e:	00 00                	add    %al,(%eax)
    7d90:	66 83 c4 0c          	add    $0xc,%sp
    //initial_PCB(7);
   //_CurrentProg = PCB_list + 7;
   _CurrentProg = PCB_list;//important! mov dword ptr ds:0x9e60, 0x00009d20,把PCB_list的地址9d20存到ds的9e60处，此后就直接用9e60来织带PCB_list
    7d94:	66 c7 06 f0 ca       	movw   $0xcaf0,(%esi)
    7d99:	a0 c5 00 00 66       	mov    0x660000c5,%al
    Initial_Int_08h();
    7d9e:	e8 e9 05 00 00       	call   838c <Initial_Int_08h>
    //initial_PCB(6);
    //_RunProgress(0x2000);


    char const *Messeage = "Built by Chen Hongyang on March 20, 2018";
    7da3:	67 66 c7 45 fc 84 a8 	movw   $0xa884,-0x4(%di)
    7daa:	00 00                	add    %al,(%eax)
    print("===================================================",9,12);
    7dac:	66 6a 0c             	pushw  $0xc
    7daf:	66 6a 09             	pushw  $0x9
    7db2:	66 68 b0 a8          	pushw  $0xa8b0
    7db6:	00 00                	add    %al,(%eax)
    7db8:	66 e8 3c 10          	callw  8df8 <_Get_Minutes_2+0x1b>
    7dbc:	00 00                	add    %al,(%eax)
    7dbe:	66 83 c4 0c          	add    $0xc,%sp

    print("chenhyOS",10,32);
    7dc2:	66 6a 20             	pushw  $0x20
    7dc5:	66 6a 0a             	pushw  $0xa
    7dc8:	66 68 e4 a8          	pushw  $0xa8e4
    7dcc:	00 00                	add    %al,(%eax)
    7dce:	66 e8 26 10          	callw  8df8 <_Get_Minutes_2+0x1b>
    7dd2:	00 00                	add    %al,(%eax)
    7dd4:	66 83 c4 0c          	add    $0xc,%sp
   print(Messeage,11,16); //print the msg
    7dd8:	66 6a 10             	pushw  $0x10
    7ddb:	66 6a 0b             	pushw  $0xb
    7dde:	67 66 ff 75 fc       	pushw  -0x4(%di)
    7de3:	66 e8 11 10          	callw  8df8 <_Get_Minutes_2+0x1b>
    7de7:	00 00                	add    %al,(%eax)
    7de9:	66 83 c4 0c          	add    $0xc,%sp
   print("===================================================",12,12);
    7ded:	66 6a 0c             	pushw  $0xc
    7df0:	66 6a 0c             	pushw  $0xc
    7df3:	66 68 b0 a8          	pushw  $0xa8b0
    7df7:	00 00                	add    %al,(%eax)
    7df9:	66 e8 fb 0f          	callw  8df8 <_Get_Minutes_2+0x1b>
    7dfd:	00 00                	add    %al,(%eax)
    7dff:	66 83 c4 0c          	add    $0xc,%sp
   

   char a = getch();
    7e03:	66 e8 9e 12          	callw  90a5 <read_and_print_input+0x3a>
    7e07:	00 00                	add    %al,(%eax)
    7e09:	67 88 45 fb          	mov    %al,-0x5(%di)
   clearscreen(); 
    7e0d:	66 e8 4a 05          	callw  835b <run+0x5c>
    7e11:	00 00                	add    %al,(%eax)
    char const *Msg1 = "Press any key to get help\n\r";
    7e13:	67 66 c7 45 f4 ed a8 	movw   $0xa8ed,-0xc(%di)
    7e1a:	00 00                	add    %al,(%eax)
   prints(Msg1);
    7e1c:	67 66 ff 75 f4       	pushw  -0xc(%di)
    7e21:	66 e8 64 10          	callw  8e89 <print+0x8f>
    7e25:	00 00                	add    %al,(%eax)
    7e27:	66 83 c4 04          	add    $0x4,%sp
   print("!",13,39);
    7e2b:	66 6a 27             	pushw  $0x27
    7e2e:	66 6a 0d             	pushw  $0xd
    7e31:	66 68 09 a9          	pushw  $0xa909
    7e35:	00 00                	add    %al,(%eax)
    7e37:	66 e8 bd 0f          	callw  8df8 <_Get_Minutes_2+0x1b>
    7e3b:	00 00                	add    %al,(%eax)
    7e3d:	66 83 c4 0c          	add    $0xc,%sp
   //Initial_Int();
    /*buildmap();还有待解决debug
    void *addr = (void*) 0xB100;
    _loadP(2,21,addr);
    showtable();*/
    terminal();
    7e41:	66 e8 0a 00          	callw  7e4f <main+0x13b>
    7e45:	00 00                	add    %al,(%eax)
    return 0;
    7e47:	66 b8 00 00          	mov    $0x0,%ax
    7e4b:	00 00                	add    %al,(%eax)
    7e4d:	66 c9                	leavew 
    7e4f:	66 c3                	retw   

00007e51 <terminal>:
#include "../syscall/use.h"
#include "command.h"
#include "../syscall/stdio.h"
#include "../syscall/time.h"
void run(int queue[],int size);
int terminal(){
    7e51:	66 55                	push   %bp
    7e53:	66 89 e5             	mov    %sp,%bp
    7e56:	66 57                	push   %di
    7e58:	66 56                	push   %si
    7e5a:	66 53                	push   %bx
    7e5c:	66 83 ec 60          	sub    $0x60,%sp
    7e60:	66 89 e0             	mov    %sp,%ax
    7e63:	66 89 c6             	mov    %ax,%si
    char const *help = "help";
    7e66:	67 66 c7 45 e4 0c a9 	movw   $0xa90c,-0x1c(%di)
    7e6d:	00 00                	add    %al,(%eax)
    char const *quit = "quit";
    7e6f:	67 66 c7 45 e0 11 a9 	movw   $0xa911,-0x20(%di)
    7e76:	00 00                	add    %al,(%eax)
    char const *lst = "ls";
    7e78:	67 66 c7 45 dc 16 a9 	movw   $0xa916,-0x24(%di)
    7e7f:	00 00                	add    %al,(%eax)
    char const *CMDHead = "hongyangchendeMacBook-Air:chenhyOS users$ ";
    7e81:	67 66 c7 45 d8 1c a9 	movw   $0xa91c,-0x28(%di)
    7e88:	00 00                	add    %al,(%eax)
    char const *controlMsg1 = "The queue is full,waiting for the Enter Key.";
    7e8a:	67 66 c7 45 d4 48 a9 	movw   $0xa948,-0x2c(%di)
    7e91:	00 00                	add    %al,(%eax)
    char const *controlMsg2 = "The queue is empty!";
    7e93:	67 66 c7 45 d0 75 a9 	movw   $0xa975,-0x30(%di)
    7e9a:	00 00                	add    %al,(%eax)
    char const *ByeByeMsg = "ByeBye";
    7e9c:	67 66 c7 45 cc 89 a9 	movw   $0xa989,-0x34(%di)
    7ea3:	00 00                	add    %al,(%eax)
    char const *filelist = "Program1 upleft   Program2 upright  \r\nProgram3 downleft  Program4 downright";
    7ea5:	67 66 c7 45 c8 90 a9 	movw   $0xa990,-0x38(%di)
    7eac:	00 00                	add    %al,(%eax)
    char const *HelpMsg1 = "Enter 1,2,3,4 to run the program\n\rEnter quit,to quit\n\rEnter help to print this script again";
    7eae:	67 66 c7 45 c4 dc a9 	movw   $0xa9dc,-0x3c(%di)
    7eb5:	00 00                	add    %al,(%eax)
    int Maxsize = 10;
    7eb7:	67 66 c7 45 c0 0a 00 	movw   $0xa,-0x40(%di)
    7ebe:	00 00                	add    %al,(%eax)
    print_next_line(HelpMsg1);
    7ec0:	67 66 ff 75 c4       	pushw  -0x3c(%di)
    7ec5:	66 e8 33 11          	callw  8ffc <printsint+0xf6>
    7ec9:	00 00                	add    %al,(%eax)
    7ecb:	66 83 c4 04          	add    $0x4,%sp
    
            // _RunProgress(0xC000);
   prints(CMDHead);
    7ecf:	67 66 ff 75 d8       	pushw  -0x28(%di)
    7ed4:	66 e8 b1 0f          	callw  8e89 <print+0x8f>
    7ed8:	00 00                	add    %al,(%eax)
    7eda:	66 83 c4 04          	add    $0x4,%sp
    char recived[10] = {};
    7ede:	67 66 8d 5d 96       	lea    -0x6a(%di),%bx
    7ee3:	66 ba 0a 00          	mov    $0xa,%dx
    7ee7:	00 00                	add    %al,(%eax)
    7ee9:	b0 00                	mov    $0x0,%al
    7eeb:	66 89 df             	mov    %bx,%di
    7eee:	66 89 d1             	mov    %dx,%cx
    7ef1:	f3 aa                	rep stos %al,%es:(%edi)
    recived[0] = 0;
    7ef3:	67 c6 45 96 00       	movb   $0x0,-0x6a(%di)
    int index_of_str = 0;
    7ef8:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    7eff:	00 00                	add    %al,(%eax)
    int i = 1;
    7f01:	67 66 c7 45 bc 01 00 	movw   $0x1,-0x44(%di)
    7f08:	00 00                	add    %al,(%eax)
    int queue[Maxsize];
    7f0a:	67 66 8b 45 c0       	mov    -0x40(%di),%ax
    7f0f:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    7f14:	67 66 89 55 b8       	mov    %dx,-0x48(%di)
    7f19:	66 c1 e0 02          	shl    $0x2,%ax
    7f1d:	67 66 8d 50 03       	lea    0x3(%bx,%si),%dx
    7f22:	66 b8 04 00          	mov    $0x4,%ax
    7f26:	00 00                	add    %al,(%eax)
    7f28:	66 48                	dec    %ax
    7f2a:	66 01 d0             	add    %dx,%ax
    7f2d:	66 bb 04 00          	mov    $0x4,%bx
    7f31:	00 00                	add    %al,(%eax)
    7f33:	66 ba 00 00          	mov    $0x0,%dx
    7f37:	00 00                	add    %al,(%eax)
    7f39:	66 f7 f3             	div    %bx
    7f3c:	66 6b c0 04          	imul   $0x4,%ax,%ax
    7f40:	66 29 c4             	sub    %ax,%sp
    7f43:	66 89 e0             	mov    %sp,%ax
    7f46:	66 83 c0 03          	add    $0x3,%ax
    7f4a:	66 c1 e8 02          	shr    $0x2,%ax
    7f4e:	66 c1 e0 02          	shl    $0x2,%ax
    7f52:	67 66 89 45 b4       	mov    %ax,-0x4c(%di)
    int num_of_queue = 0;
    7f57:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    7f5e:	00 00                	add    %al,(%eax)
    int number = 0;
    7f60:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    7f67:	00 00                	add    %al,(%eax)
    int k = 0;
    7f69:	67 66 c7 45 b0 00 00 	movw   $0x0,-0x50(%di)
    7f70:	00 00                	add    %al,(%eax)
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    7f72:	e9 6e 03 66 e8       	jmp    e86682e5 <_end+0xe865a6b1>
        char save = getch();
    7f77:	2c 11                	sub    $0x11,%al
    7f79:	00 00                	add    %al,(%eax)
    7f7b:	67 88 45 af          	mov    %al,-0x51(%di)
        if(save == 32){//空格
    7f7f:	67 80 7d af 20       	cmpb   $0x20,-0x51(%di)
    7f84:	75 74                	jne    7ffa <terminal+0x1a9>
            if(num_of_queue == Maxsize){
    7f86:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    7f8b:	67 66 3b 45 c0       	cmp    -0x40(%di),%ax
    7f90:	75 31                	jne    7fc3 <terminal+0x172>
                prints("\n\r");
    7f92:	66 68 38 aa          	pushw  $0xaa38
    7f96:	00 00                	add    %al,(%eax)
    7f98:	66 e8 ed 0e          	callw  8e89 <print+0x8f>
    7f9c:	00 00                	add    %al,(%eax)
    7f9e:	66 83 c4 04          	add    $0x4,%sp
                print_next_line(controlMsg1);
    7fa2:	67 66 ff 75 d4       	pushw  -0x2c(%di)
    7fa7:	66 e8 51 10          	callw  8ffc <printsint+0xf6>
    7fab:	00 00                	add    %al,(%eax)
    7fad:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    7fb1:	67 66 ff 75 d8       	pushw  -0x28(%di)
    7fb6:	66 e8 cf 0e          	callw  8e89 <print+0x8f>
    7fba:	00 00                	add    %al,(%eax)
    7fbc:	66 83 c4 04          	add    $0x4,%sp
                continue;
    7fc0:	e9 20 03 67 66       	jmp    666782e5 <_end+0x6666a6b1>
            }
            printc(save);
    7fc5:	0f be 45 af          	movsbl -0x51(%ebp),%eax
    7fc9:	66 50                	push   %ax
    7fcb:	66 e8 0c 0f          	callw  8edb <prints+0x50>
    7fcf:	00 00                	add    %al,(%eax)
    7fd1:	66 83 c4 04          	add    $0x4,%sp
            queue[num_of_queue] = number;
    7fd5:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    7fda:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    7fdf:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    7fe4:	67 66 89 0c          	mov    %cx,(%si)
    7fe8:	90                   	nop
            num_of_queue ++;
    7fe9:	67 66 ff 45 ec       	incw   -0x14(%di)
            number = 0;
    7fee:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    7ff5:	00 00                	add    %al,(%eax)
            continue;
    7ff7:	e9 e9 02 67 80       	jmp    806782e5 <_end+0x8066a6b1>
        }
       else  if(save == 13){//回车
    7ffc:	7d af                	jge    7fad <terminal+0x15c>
    7ffe:	0d 0f 85 39 02       	or     $0x239850f,%eax
            int strcmp1 = strcmp(recived,quit);
    8003:	67 66 ff 75 e0       	pushw  -0x20(%di)
    8008:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    800d:	66 50                	push   %ax
    800f:	66 e8 b1 11          	callw  91c4 <print_different_color+0x86>
    8013:	00 00                	add    %al,(%eax)
    8015:	66 83 c4 08          	add    $0x8,%sp
    8019:	67 66 89 45 a8       	mov    %ax,-0x58(%di)
            int strcmp2 = strcmp(recived,help);
    801e:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    8023:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    8028:	66 50                	push   %ax
    802a:	66 e8 96 11          	callw  91c4 <print_different_color+0x86>
    802e:	00 00                	add    %al,(%eax)
    8030:	66 83 c4 08          	add    $0x8,%sp
    8034:	67 66 89 45 a4       	mov    %ax,-0x5c(%di)
            int strcmp3 = strcmp(recived,lst);
    8039:	67 66 ff 75 dc       	pushw  -0x24(%di)
    803e:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    8043:	66 50                	push   %ax
    8045:	66 e8 7b 11          	callw  91c4 <print_different_color+0x86>
    8049:	00 00                	add    %al,(%eax)
    804b:	66 83 c4 08          	add    $0x8,%sp
    804f:	67 66 89 45 a0       	mov    %ax,-0x60(%di)
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
    8054:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    805a:	75 22                	jne    807e <terminal+0x22d>
    805c:	67 66 83 7d e8 00    	cmpw   $0x0,-0x18(%di)
    8062:	75 1a                	jne    807e <terminal+0x22d>
    8064:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    806a:	74 12                	je     807e <terminal+0x22d>
    806c:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    8072:	74 0a                	je     807e <terminal+0x22d>
    8074:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    807a:	0f 85 73 01 67 66    	jne    666781f3 <_end+0x6666a5bf>
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    8080:	83 7d a8 01          	cmpl   $0x1,-0x58(%ebp)
    8084:	74 12                	je     8098 <terminal+0x247>
    8086:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    808c:	74 0a                	je     8098 <terminal+0x247>
    808e:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    8094:	0f 85 b9 00 66 68    	jne    68668153 <_end+0x6865a51f>
                    print_next_line("");
    809a:	3b aa 00 00 66 e8    	cmp    -0x179a0000(%edx),%ebp
    80a0:	5a                   	pop    %edx
    80a1:	0f 00 00             	sldt   (%eax)
    80a4:	66 83 c4 04          	add    $0x4,%sp
                    if(strcmp1 == 1){
    80a8:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    80ae:	75 2b                	jne    80db <terminal+0x28a>
                        print_next_line(ByeByeMsg);
    80b0:	67 66 ff 75 cc       	pushw  -0x34(%di)
    80b5:	66 e8 43 0f          	callw  8ffc <printsint+0xf6>
    80b9:	00 00                	add    %al,(%eax)
    80bb:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    80bf:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    80c6:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    80c8:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    80cd:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    80d2:	66 01 d0             	add    %dx,%ax
    80d5:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    80d9:	eb 64                	jmp    813f <terminal+0x2ee>
                    }                  
                   else if(strcmp2 == 1){
    80db:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    80e1:	75 2b                	jne    810e <terminal+0x2bd>
                         print_next_line(HelpMsg1);
    80e3:	67 66 ff 75 c4       	pushw  -0x3c(%di)
    80e8:	66 e8 10 0f          	callw  8ffc <printsint+0xf6>
    80ec:	00 00                	add    %al,(%eax)
    80ee:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    80f2:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    80f9:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    80fb:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8100:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8105:	66 01 d0             	add    %dx,%ax
    8108:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    810c:	eb 31                	jmp    813f <terminal+0x2ee>
                    }
                    else if(strcmp3 == 1){
    810e:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    8114:	75 29                	jne    813f <terminal+0x2ee>
                        print_next_line(filelist);
    8116:	67 66 ff 75 c8       	pushw  -0x38(%di)
    811b:	66 e8 dd 0e          	callw  8ffc <printsint+0xf6>
    811f:	00 00                	add    %al,(%eax)
    8121:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    8125:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    812c:	00 00                	add    %al,(%eax)
                      recived[index_of_str] = 0;
    812e:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8133:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8138:	66 01 d0             	add    %dx,%ax
    813b:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    }
                        //prints(recived);
                    prints(CMDHead);
    813f:	67 66 ff 75 d8       	pushw  -0x28(%di)
    8144:	66 e8 41 0d          	callw  8e89 <print+0x8f>
    8148:	00 00                	add    %al,(%eax)
    814a:	66 83 c4 04          	add    $0x4,%sp
                    continue;
    814e:	e9 92 01 67 66       	jmp    666782e5 <_end+0x6666a6b1>
                }
            
                else if(number != 0||num_of_queue != 0){
    8153:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    8157:	75 0a                	jne    8163 <terminal+0x312>
    8159:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    815f:	0f 84 8a 00 67 66    	je     666781ef <_end+0x6666a5bb>
                    if(number != 0 ){
    8165:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    8169:	74 28                	je     8193 <terminal+0x342>
                         printsint(number);
    816b:	67 66 ff 75 e8       	pushw  -0x18(%di)
    8170:	66 e8 90 0d          	callw  8f04 <printc+0x27>
    8174:	00 00                	add    %al,(%eax)
    8176:	66 83 c4 04          	add    $0x4,%sp
                        queue[num_of_queue] = number;
    817a:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    817f:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    8184:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    8189:	67 66 89 0c          	mov    %cx,(%si)
    818d:	90                   	nop
                        num_of_queue++;
    818e:	67 66 ff 45 ec       	incw   -0x14(%di)
                    }
                    run(queue,num_of_queue);
    8193:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    8198:	67 66 ff 75 ec       	pushw  -0x14(%di)
    819d:	66 50                	push   %ax
    819f:	66 e8 5a 01          	callw  82fd <terminal+0x4ac>
    81a3:	00 00                	add    %al,(%eax)
    81a5:	66 83 c4 08          	add    $0x8,%sp
                    num_of_queue = 0;
    81a9:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    81b0:	00 00                	add    %al,(%eax)
                    number = 0;
    81b2:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    81b9:	00 00                	add    %al,(%eax)
                    clearscreen();
    81bb:	66 e8 9c 01          	callw  835b <run+0x5c>
    81bf:	00 00                	add    %al,(%eax)
                    prints(CMDHead);
    81c1:	67 66 ff 75 d8       	pushw  -0x28(%di)
    81c6:	66 e8 bf 0c          	callw  8e89 <print+0x8f>
    81ca:	00 00                	add    %al,(%eax)
    81cc:	66 83 c4 04          	add    $0x4,%sp
                    index_of_str = 0;
    81d0:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    81d7:	00 00                	add    %al,(%eax)
                    recived[index_of_str] = 0;
    81d9:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    81de:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    81e3:	66 01 d0             	add    %dx,%ax
    81e6:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    continue;
    81ea:	e9 f6 00 90 e9       	jmp    e99082e5 <_end+0xe98fa6b1>
            int strcmp1 = strcmp(recived,quit);
            int strcmp2 = strcmp(recived,help);
            int strcmp3 = strcmp(recived,lst);
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    81ef:	f2 00 66 68          	repnz add %ah,0x68(%esi)
                    recived[index_of_str] = 0;
                    continue;
                }
            }
            else{
                 prints("\n\r");
    81f3:	38 aa 00 00 66 e8    	cmp    %ch,-0x179a0000(%edx)
    81f9:	8e 0c 00             	mov    (%eax,%eax,1),%cs
    81fc:	00 66 83             	add    %ah,-0x7d(%esi)
    81ff:	c4 04 67             	les    (%edi,%eiz,2),%eax
                print_next_line(controlMsg2);
    8202:	66 ff 75 d0          	pushw  -0x30(%ebp)
    8206:	66 e8 f2 0d          	callw  8ffc <printsint+0xf6>
    820a:	00 00                	add    %al,(%eax)
    820c:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    8210:	67 66 ff 75 d8       	pushw  -0x28(%di)
    8215:	66 e8 70 0c          	callw  8e89 <print+0x8f>
    8219:	00 00                	add    %al,(%eax)
    821b:	66 83 c4 04          	add    $0x4,%sp
                index_of_str = 0;
    821f:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8226:	00 00                	add    %al,(%eax)
                recived[index_of_str] = 0;
    8228:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    822d:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8232:	66 01 d0             	add    %dx,%ax
    8235:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                continue;
    8239:	e9 a7 00 67 80       	jmp    806782e5 <_end+0x8066a6b1>
            }
        }
        else if(save >= '0' && save <='9'){
    823e:	7d af                	jge    81ef <terminal+0x39e>
    8240:	2f                   	das    
    8241:	7e 42                	jle    8285 <terminal+0x434>
    8243:	67 80 7d af 39       	cmpb   $0x39,-0x51(%di)
    8248:	7f 3b                	jg     8285 <terminal+0x434>
           printc(save);
    824a:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    8250:	66 50                	push   %ax
    8252:	66 e8 85 0c          	callw  8edb <prints+0x50>
    8256:	00 00                	add    %al,(%eax)
    8258:	66 83 c4 04          	add    $0x4,%sp
            number = number * 10 + save -'0';
    825c:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
    8261:	66 89 d0             	mov    %dx,%ax
    8264:	66 c1 e0 02          	shl    $0x2,%ax
    8268:	66 01 d0             	add    %dx,%ax
    826b:	66 01 c0             	add    %ax,%ax
    826e:	66 89 c2             	mov    %ax,%dx
    8271:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    8277:	66 01 d0             	add    %dx,%ax
    827a:	66 83 e8 30          	sub    $0x30,%ax
    827e:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
           // printsint(number);
            continue;
    8283:	eb 5e                	jmp    82e3 <terminal+0x492>
        }
        else{
           printc(save);
    8285:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    828b:	66 50                	push   %ax
    828d:	66 e8 4a 0c          	callw  8edb <prints+0x50>
    8291:	00 00                	add    %al,(%eax)
    8293:	66 83 c4 04          	add    $0x4,%sp
           // if(save == '-' || save == 'q' || save == 'h' || save == 'l' || save =='s'){
            if(index_of_str < 10){
    8297:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    829d:	7f 2c                	jg     82cb <terminal+0x47a>
                recived[index_of_str] =  save;
    829f:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    82a4:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    82a9:	66 01 c2             	add    %ax,%dx
    82ac:	67 8a 45 af          	mov    -0x51(%di),%al
    82b0:	67 88 02             	mov    %al,(%bp,%si)
                index_of_str ++;
    82b3:	67 66 ff 45 f0       	incw   -0x10(%di)
                recived[index_of_str] = 0;
    82b8:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    82bd:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    82c2:	66 01 d0             	add    %dx,%ax
    82c5:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    82c9:	eb 18                	jmp    82e3 <terminal+0x492>
            }
            else if(index_of_str >= 10){
    82cb:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    82d1:	7e 10                	jle    82e3 <terminal+0x492>
                prints("not added");
    82d3:	66 68 3c aa          	pushw  $0xaa3c
    82d7:	00 00                	add    %al,(%eax)
    82d9:	66 e8 ac 0b          	callw  8e89 <print+0x8f>
    82dd:	00 00                	add    %al,(%eax)
    82df:	66 83 c4 04          	add    $0x4,%sp
    int number = 0;
    int k = 0;
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    82e3:	67 66 83 7d bc 00    	cmpw   $0x0,-0x44(%di)
    82e9:	0f 85 88 fc 66 89    	jne    89677f77 <_end+0x8966a343>
    82ef:	f4                   	hlt    
            else if(index_of_str >= 10){
                prints("not added");
            }
        }
    }
}
    82f0:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    82f5:	66 5b                	pop    %bx
    82f7:	66 5e                	pop    %si
    82f9:	66 5f                	pop    %di
    82fb:	66 5d                	pop    %bp
    82fd:	66 c3                	retw   

000082ff <run>:
void run(int queue[],int size){
    82ff:	66 55                	push   %bp
    8301:	66 89 e5             	mov    %sp,%bp
    8304:	66 83 ec 04          	sub    $0x4,%sp
    int j = 0;
    8308:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    830f:	00 00                	add    %al,(%eax)
    clearscreen();
    8311:	66 e8 46 00          	callw  835b <run+0x5c>
    8315:	00 00                	add    %al,(%eax)
    for(j = 0;j < size;j ++){
    8317:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    831e:	00 00                	add    %al,(%eax)
    8320:	eb 2b                	jmp    834d <run+0x4e>
        //_delay();
        //_load_userProgram(queue[j]);
        //_delay();
        initial_PCB(queue[j]);
    8322:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8327:	67 66 8d 14          	lea    (%si),%dx
    832b:	85 00                	test   %eax,(%eax)
    832d:	00 00                	add    %al,(%eax)
    832f:	00 67 66             	add    %ah,0x66(%edi)
    8332:	8b 45 08             	mov    0x8(%ebp),%eax
    8335:	66 01 d0             	add    %dx,%ax
    8338:	67 66 8b 00          	mov    (%bx,%si),%ax
    833c:	66 50                	push   %ax
    833e:	66 e8 56 15          	callw  9898 <V+0x16>
    8342:	00 00                	add    %al,(%eax)
    8344:	66 83 c4 04          	add    $0x4,%sp
    }
}
void run(int queue[],int size){
    int j = 0;
    clearscreen();
    for(j = 0;j < size;j ++){
    8348:	67 66 ff 45 fc       	incw   -0x4(%di)
    834d:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8352:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    8357:	7c c9                	jl     8322 <run+0x23>
        //_delay();
        //_load_userProgram(queue[j]);
        //_delay();
        initial_PCB(queue[j]);
    }
    8359:	66 c9                	leavew 
    835b:	66 c3                	retw   

0000835d <clearscreen>:
#include "use.h"
//====================================================
//                封装清屏函数
//====================================================
void clearscreen(){
    835d:	66 55                	push   %bp
    835f:	66 89 e5             	mov    %sp,%bp
	_clearscreen();//C调用汇编时会压入四个字节，必须考虑到这个，写出newret，是pop edx,而非 pop dx；
    8362:	66 e8 bc 00          	callw  8422 <end_for_copy+0x5>
    8366:	00 00                	add    %al,(%eax)
	//__asm__("pop %ax");
	return ;
    8368:	90                   	nop
}
    8369:	66 5d                	pop    %bp
    836b:	66 c3                	retw   

0000836d <Initial_Int>:
	}
}*/
//====================================================
//                封装中断初始化函数
//====================================================
void Initial_Int(){
    836d:	66 55                	push   %bp
    836f:	66 89 e5             	mov    %sp,%bp
	_initialInt();
    8372:	66 e8 a6 05          	callw  891c <_SetINT3Fh+0x1a>
    8376:	00 00                	add    %al,(%eax)
	return;
    8378:	90                   	nop
}
    8379:	66 5d                	pop    %bp
    837b:	66 c3                	retw   

0000837d <Initial_Int_09h>:
void Initial_Int_09h(){
    837d:	66 55                	push   %bp
    837f:	66 89 e5             	mov    %sp,%bp
	_initialInt_09h();
    8382:	66 e8 14 08          	callw  8b9a <_initialInt+0x27c>
    8386:	00 00                	add    %al,(%eax)
}
    8388:	66 5d                	pop    %bp
    838a:	66 c3                	retw   

0000838c <Initial_Int_08h>:
void Initial_Int_08h(){
    838c:	66 55                	push   %bp
    838e:	66 89 e5             	mov    %sp,%bp
	_initialInt_08h();
    8391:	66 e8 3f 08          	callw  8bd4 <_initialInt_09h+0x38>
    8395:	00 00                	add    %al,(%eax)
}
    8397:	66 5d                	pop    %bp
    8399:	66 c3                	retw   

0000839b <loadProg>:
void loadProg(int count,int begin,int memory_postion){
    839b:	66 55                	push   %bp
    839d:	66 89 e5             	mov    %sp,%bp
    _loadP(count,begin,memory_postion);
    83a0:	67 66 ff 75 10       	pushw  0x10(%di)
    83a5:	67 66 ff 75 0c       	pushw  0xc(%di)
    83aa:	67 66 ff 75 08       	pushw  0x8(%di)
    83af:	66 e8 e3 00          	callw  8496 <_setPoint+0x15>
    83b3:	00 00                	add    %al,(%eax)
    83b5:	66 83 c4 0c          	add    $0xc,%sp
    83b9:	66 c9                	leavew 
    83bb:	66 c3                	retw   
    83bd:	66 90                	xchg   %ax,%ax
    83bf:	90                   	nop

000083c0 <count>:
    83c0:	08 2d 00 00 00 00    	or     %ch,0x0

000083c1 <alpha>:
    83c1:	2d 00 00 00 00       	sub    $0x0,%eax

000083c2 <int_09_saved>:
    83c2:	00 00                	add    %al,(%eax)
	...

000083c6 <program_saved>:
    83c6:	70 00                	jo     83c8 <program_saved+0x2>
	...

000083ca <ds_saved>:
    83ca:	7c 00                	jl     83cc <ds_saved+0x2>
	...

000083ce <return_save>:
    83ce:	88 00                	mov    %al,(%eax)

000083d0 <esi_save>:
    83d0:	96                   	xchg   %eax,%esi
    83d1:	00 00                	add    %al,(%eax)
	...

000083d4 <temp>:
    83d4:	e8 03 b4 00 00       	call   137dc <_end+0x5ba8>

000083d6 <kernelesp_saved>:
    83d6:	b4 00                	mov    $0x0,%ah
	...

000083da <esp_saved_inkernel>:
    83da:	c8 00 00 00          	enter  $0x0,$0x0

000083de <esp_saved_in_user>:
    83de:	f0 00 00             	lock add %al,(%eax)
	...

000083e2 <ss_saved_in_user>:
    83e2:	2c 01                	sub    $0x1,%al
	...

000083e6 <color>:
    83e6:	01 c2                	add    %eax,%edx

000083e7 <ss_saved_fork>:
    83e7:	c2 01 00             	ret    $0x1
	...

000083eb <retaddr>:
    83eb:	58                   	pop    %eax
    83ec:	02 00                	add    (%eax),%al
	...

000083ef <Message31>:
    83ef:	74 69                	je     845a <_readinput+0x9>
    83f1:	6d                   	insl   (%dx),%es:(%edi)
    83f2:	65 3a 20             	cmp    %gs:(%eax),%ah

000083f5 <_sys_stack_copy>:
    83f5:	c8 00 00 00          	enter  $0x0,$0x0
    83f9:	8e d0                	mov    %eax,%ss
    83fb:	60                   	pusha  
    83fc:	1e                   	push   %ds
    83fd:	8b 46 06             	mov    0x6(%esi),%eax
    8400:	8b 56 0a             	mov    0xa(%esi),%edx
    8403:	8b 4e 0e             	mov    0xe(%esi),%ecx
    8406:	8c db                	mov    %ds,%ebx

00008408 <while_loop1>:
    8408:	81 fa 00 01 74 0f    	cmp    $0xf740100,%edx
    840e:	8e d8                	mov    %eax,%ds
    8410:	67 8b 1a             	mov    (%bp,%si),%ebx
    8413:	8e d9                	mov    %ecx,%ds
    8415:	67 89 1a             	mov    %ebx,(%bp,%si)
    8418:	83 c2 02             	add    $0x2,%edx
    841b:	eb eb                	jmp    8408 <while_loop1>

0000841d <end_for_copy>:
    841d:	1f                   	pop    %ds
    841e:	61                   	popa   
    841f:	c9                   	leave  
    8420:	66 5a                	pop    %dx
    8422:	ff e2                	jmp    *%edx

00008424 <_clearscreen>:
    8424:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    8429:	66 5a                	pop    %dx
    842b:	ff e2                	jmp    *%edx

0000842d <_printchar>:
    842d:	c8 00 00 00          	enter  $0x0,$0x0
    8431:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
    8436:	57                   	push   %edi
    8437:	66 8b 4e 06          	mov    0x6(%esi),%cx
    843b:	66 8b 7e 0a          	mov    0xa(%esi),%di
    843f:	66 8b 56 0e          	mov    0xe(%esi),%dx
    8443:	88 d5                	mov    %dl,%ch
    8445:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
    844c:	00 66 5a             	add    %ah,0x5a(%esi)
    844f:	ff e2                	jmp    *%edx

00008451 <_readinput>:
    8451:	c8 04 00 00          	enter  $0x4,$0x0
    8455:	b4 00                	mov    $0x0,%ah
    8457:	cd 16                	int    $0x16
    8459:	b4 00                	mov    $0x0,%ah
    845b:	66 67 89 04          	mov    %ax,(%si)
    845f:	24 66                	and    $0x66,%al
    8461:	67 8b 04             	mov    (%si),%eax
    8464:	24 c9                	and    $0xc9,%al
    8466:	66 5a                	pop    %dx
    8468:	ff e2                	jmp    *%edx

0000846a <_showchar>:
    846a:	c8 00 00 00          	enter  $0x0,$0x0
    846e:	50                   	push   %eax
    846f:	53                   	push   %ebx
    8470:	8b 46 06             	mov    0x6(%esi),%eax
    8473:	b4 0e                	mov    $0xe,%ah
    8475:	b3 00                	mov    $0x0,%bl
    8477:	cd 10                	int    $0x10
    8479:	fa                   	cli    
    847a:	5b                   	pop    %ebx
    847b:	58                   	pop    %eax
    847c:	c9                   	leave  
    847d:	66 5a                	pop    %dx
    847f:	ff e2                	jmp    *%edx

00008481 <_setPoint>:
    8481:	c8 00 00 00          	enter  $0x0,$0x0
    8485:	53                   	push   %ebx
    8486:	b7 00                	mov    $0x0,%bh
    8488:	8a 77 06             	mov    0x6(%edi),%dh
    848b:	8a 57 0a             	mov    0xa(%edi),%dl
    848e:	b4 02                	mov    $0x2,%ah
    8490:	cd 10                	int    $0x10
    8492:	5b                   	pop    %ebx
    8493:	c9                   	leave  
    8494:	66 5a                	pop    %dx
    8496:	ff e2                	jmp    *%edx

00008498 <_loadP>:
    8498:	c8 00 00 00          	enter  $0x0,$0x0
    849c:	60                   	pusha  
    849d:	06                   	push   %es
    849e:	1e                   	push   %ds
    849f:	8c c8                	mov    %cs,%eax
    84a1:	8e d8                	mov    %eax,%ds
    84a3:	8b 46 0e             	mov    0xe(%esi),%eax
    84a6:	8e c0                	mov    %eax,%es
    84a8:	b2 00                	mov    $0x0,%dl
    84aa:	8b 46 0a             	mov    0xa(%esi),%eax
    84ad:	b3 12                	mov    $0x12,%bl
    84af:	f6 f3                	div    %bl
    84b1:	88 e1                	mov    %ah,%cl
    84b3:	30 e4                	xor    %ah,%ah
    84b5:	b3 02                	mov    $0x2,%bl
    84b7:	f6 f3                	div    %bl
    84b9:	88 e6                	mov    %ah,%dh
    84bb:	88 c5                	mov    %al,%ch
    84bd:	8a 46 06             	mov    0x6(%esi),%al
    84c0:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
    84c5:	cd 13                	int    $0x13
    84c7:	1f                   	pop    %ds
    84c8:	07                   	pop    %es
    84c9:	61                   	popa   
    84ca:	c9                   	leave  
    84cb:	66 5a                	pop    %dx
    84cd:	ff e2                	jmp    *%edx

000084cf <_RunProgress>:
    84cf:	c8 00 00 00          	enter  $0x0,$0x0
    84d3:	8c c8                	mov    %cs,%eax
    84d5:	8e d8                	mov    %eax,%ds
    84d7:	8e c0                	mov    %eax,%es
    84d9:	8b 5e 06             	mov    0x6(%esi),%ebx
    84dc:	c7 06 c6 83 00 01    	movl   $0x10083c6,(%esi)
    84e2:	89 1e                	mov    %ebx,(%esi)
    84e4:	c8 83 66 89          	enter  $0x6683,$0x89
    84e8:	26 da 83 26 ff 1e c6 	fiaddl %es:-0x39e100da(%ebx)
    84ef:	83 8c c8 8e d8 8e c0 	orl    $0xffffff8e,-0x3f712772(%eax,%ecx,8)
    84f6:	8e 

000084f0 <S>:
    84f0:	8c c8                	mov    %cs,%eax
    84f2:	8e d8                	mov    %eax,%ds
    84f4:	8e c0                	mov    %eax,%es
    84f6:	8e d0                	mov    %eax,%ss
    84f8:	66 8b 26             	mov    (%esi),%sp
    84fb:	da 83 b4 00 cd 16    	fiaddl 0x16cd00b4(%ebx)
    8501:	c9                   	leave  
    8502:	66 5a                	pop    %dx
    8504:	ff e2                	jmp    *%edx

00008506 <_Schedule_once>:
    8506:	c8 00 00 00          	enter  $0x0,$0x0
    850a:	cd 41                	int    $0x41
    850c:	c9                   	leave  
    850d:	66 5a                	pop    %dx
    850f:	ff e2                	jmp    *%edx

00008511 <_fork_user>:
    8511:	c8 00 00 00          	enter  $0x0,$0x0
    8515:	cd 39                	int    $0x39
    8517:	c9                   	leave  
    8518:	66 5a                	pop    %dx
    851a:	ff e2                	jmp    *%edx

0000851c <_Schedule>:
    851c:	c8 00 00 00          	enter  $0x0,$0x0
    8520:	16                   	push   %ss
    8521:	cd 23                	int    $0x23
    8523:	17                   	pop    %ss
    8524:	c9                   	leave  
    8525:	66 5a                	pop    %dx
    8527:	ff e2                	jmp    *%edx

00008529 <_wait>:
    8529:	c8 00 00 00          	enter  $0x0,$0x0
    852d:	cd 3b                	int    $0x3b
    852f:	c9                   	leave  
    8530:	66 5a                	pop    %dx
    8532:	ff e2                	jmp    *%edx

00008534 <_exit>:
    8534:	c8 00 00 00          	enter  $0x0,$0x0
    8538:	66 67 8b 45 06       	mov    0x6(%di),%ax
    853d:	66 50                	push   %ax
    853f:	cd 2a                	int    $0x2a
    8541:	c9                   	leave  
    8542:	66 5a                	pop    %dx
    8544:	ff e2                	jmp    *%edx

00008546 <_GetSem>:
    8546:	c8 00 00 00          	enter  $0x0,$0x0
    854a:	66 67 8b 45 06       	mov    0x6(%di),%ax
    854f:	66 50                	push   %ax
    8551:	cd 3c                	int    $0x3c
    8553:	c9                   	leave  
    8554:	66 5a                	pop    %dx
    8556:	ff e2                	jmp    *%edx

00008558 <_FreeSem>:
    8558:	c8 00 00 00          	enter  $0x0,$0x0
    855c:	66 67 8b 45 06       	mov    0x6(%di),%ax
    8561:	66 50                	push   %ax
    8563:	cd 3d                	int    $0x3d
    8565:	c9                   	leave  
    8566:	66 5a                	pop    %dx
    8568:	ff e2                	jmp    *%edx

0000856a <_Pr>:
    856a:	c8 00 00 00          	enter  $0x0,$0x0
    856e:	66 67 8b 45 06       	mov    0x6(%di),%ax
    8573:	66 50                	push   %ax
    8575:	cd 3e                	int    $0x3e
    8577:	c9                   	leave  
    8578:	66 5a                	pop    %dx
    857a:	ff e2                	jmp    *%edx

0000857c <_Vr>:
    857c:	c8 00 00 00          	enter  $0x0,$0x0
    8580:	66 67 8b 45 06       	mov    0x6(%di),%ax
    8585:	66 50                	push   %ax
    8587:	cd 3f                	int    $0x3f
    8589:	c9                   	leave  
    858a:	66 5a                	pop    %dx
    858c:	ff e2                	jmp    *%edx

0000858e <_Schedule_PV>:
    858e:	c8 00 00 00          	enter  $0x0,$0x0
    8592:	cd 23                	int    $0x23
    8594:	c9                   	leave  
    8595:	66 5a                	pop    %dx
    8597:	ff e2                	jmp    *%edx

00008599 <_SetINT20h>:
    8599:	fa                   	cli    
    859a:	1e                   	push   %ds
    859b:	06                   	push   %es
    859c:	8c c8                	mov    %cs,%eax
    859e:	8e d8                	mov    %eax,%ds
    85a0:	8e c0                	mov    %eax,%es
    85a2:	8c 16                	mov    %ss,(%esi)
    85a4:	e2 83                	loop   8529 <_wait>
    85a6:	8e d0                	mov    %eax,%ss
    85a8:	66 89 26             	mov    %sp,(%esi)
    85ab:	de 83 66 8b 26 da    	fiadd  -0x25d9749a(%ebx)
    85b1:	83 53 51 52          	adcl   $0x52,0x51(%ebx)
    85b5:	b4 01                	mov    $0x1,%ah
    85b7:	cd 16                	int    $0x16
    85b9:	5a                   	pop    %edx
    85ba:	59                   	pop    %ecx
    85bb:	5b                   	pop    %ebx
    85bc:	8e 16                	mov    (%esi),%ss
    85be:	e2 83                	loop   8543 <_exit+0xf>
    85c0:	66 8b 26             	mov    (%esi),%sp
    85c3:	de 83 07 1f 74 0a    	fiadd  0xa741f07(%ebx)
    85c9:	50                   	push   %eax
    85ca:	b4 00                	mov    $0x0,%ah
    85cc:	cd 16                	int    $0x16
    85ce:	58                   	pop    %eax
    85cf:	fb                   	sti    
    85d0:	cd 38                	int    $0x38
    85d2:	cf                   	iret   

000085d3 <going_on>:
    85d3:	fb                   	sti    
    85d4:	cf                   	iret   

000085d5 <_SetINT08h_turn_around>:
    85d5:	e8 39 06 fa 6a       	call   6afa8c13 <_end+0x6af9afdf>
    85da:	00 e8                	add    %ch,%al
    85dc:	7a 14                	jp     85f2 <_SetINT08h+0x9>
    85de:	e8 a4 06 b0 20       	call   20b08c87 <_end+0x20afb053>
    85e3:	e6 20                	out    %al,$0x20
    85e5:	e6 a0                	out    %al,$0xa0
    85e7:	fb                   	sti    
    85e8:	cf                   	iret   

000085e9 <_SetINT08h>:
    85e9:	60                   	pusha  
    85ea:	0f a8                	push   %gs
    85ec:	1e                   	push   %ds
    85ed:	06                   	push   %es
    85ee:	16                   	push   %ss
    85ef:	8c c8                	mov    %cs,%eax
    85f1:	8e c0                	mov    %eax,%es
    85f3:	8e d8                	mov    %eax,%ds
    85f5:	8e d0                	mov    %eax,%ss
    85f7:	fe 0e                	decb   (%esi)
    85f9:	c0 83 75 4f 80 3e c1 	rolb   $0xc1,0x3e804f75(%ebx)

000085fd <notc>:
    85fd:	80 3e c1             	cmpb   $0xc1,(%esi)
    8600:	83 2d 75 07 c6 06 c1 	subl   $0xffffffc1,0x6c60775
    8607:	83 5c eb 2a 80       	sbbl   $0xffffff80,0x2a(%ebx,%ebp,8)

0000860b <changleft>:
    860b:	80 3e c1             	cmpb   $0xc1,(%esi)
    860e:	83 5c 75 07 c6       	sbbl   $0xffffffc6,0x7(%ebp,%esi,2)
    8613:	06                   	push   %es
    8614:	c1 83 7c eb 1c 80 3e 	roll   $0x3e,-0x7fe31484(%ebx)

00008619 <changright>:
    8619:	80 3e c1             	cmpb   $0xc1,(%esi)
    861c:	83 7c 75 07 c6       	cmpl   $0xffffffc6,0x7(%ebp,%esi,2)
    8621:	06                   	push   %es
    8622:	c1 83 2f eb 0e 80 3e 	roll   $0x3e,-0x7ff114d1(%ebx)

00008627 <changheng>:
    8627:	80 3e c1             	cmpb   $0xc1,(%esi)
    862a:	83 2f 75             	subl   $0x75,(%edi)
    862d:	cf                   	iret   
    862e:	c6 06 c1             	movb   $0xc1,(%esi)
    8631:	83 2d eb 00 b9 00 b8 	subl   $0xffffffb8,0xb900eb

00008635 <show>:
    8635:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    863a:	b4 09                	mov    $0x9,%ah
    863c:	8a 26                	mov    (%esi),%ah
    863e:	e6 83                	out    %al,$0x83
    8640:	a0 c1 83 65 a3       	mov    0xa36583c1,%al
    8645:	8e 00                	mov    (%eax),%es
    8647:	c6 06 c0             	movb   $0xc0,(%esi)
    864a:	83 08 b0             	orl    $0xffffffb0,(%eax)

0000864c <end>:
    864c:	b0 20                	mov    $0x20,%al
    864e:	e6 20                	out    %al,$0x20
    8650:	e6 a0                	out    %al,$0xa0
    8652:	17                   	pop    %ss
    8653:	07                   	pop    %es
    8654:	1f                   	pop    %ds
    8655:	0f a9                	pop    %gs
    8657:	61                   	popa   
    8658:	fb                   	sti    
    8659:	cf                   	iret   

0000865a <_SetINT09h>:
    865a:	fa                   	cli    
    865b:	1e                   	push   %ds
    865c:	06                   	push   %es
    865d:	8c c8                	mov    %cs,%eax
    865f:	8e d8                	mov    %eax,%ds
    8661:	8e c0                	mov    %eax,%es
    8663:	8e d0                	mov    %eax,%ss
    8665:	8c 16                	mov    %ss,(%esi)
    8667:	e2 83                	loop   85ec <_SetINT08h+0x3>
    8669:	8e d0                	mov    %eax,%ss
    866b:	66 89 26             	mov    %sp,(%esi)
    866e:	de 83 66 8b 26 da    	fiadd  -0x25d9749a(%ebx)
    8674:	83 60 b9 00          	andl   $0x0,-0x47(%eax)
    8678:	b8 8e e9 8a 26       	mov    $0x268ae98e,%eax
    867d:	e6 83                	out    %al,$0x83
    867f:	b0 4f                	mov    $0x4f,%al
    8681:	65 a3 78 00 b0 55    	mov    %eax,%gs:0x55b00078
    8687:	65 a3 7a 00 b0 43    	mov    %eax,%gs:0x43b0007a
    868d:	65 a3 7c 00 b0 48    	mov    %eax,%gs:0x48b0007c
    8693:	65 a3 7e 00 b0 53    	mov    %eax,%gs:0x53b0007e
    8699:	65 a3 80 00 b0 21    	mov    %eax,%gs:0x21b00080
    869f:	65 a3 82 00 b0 4f    	mov    %eax,%gs:0x4fb00082
    86a5:	65 a3 84 00 b0 55    	mov    %eax,%gs:0x55b00084
    86ab:	65 a3 86 00 b0 43    	mov    %eax,%gs:0x43b00086
    86b1:	65 a3 88 00 b0 48    	mov    %eax,%gs:0x48b00088
    86b7:	65 a3 8a 00 b0 21    	mov    %eax,%gs:0x21b0008a
    86bd:	65 a3 8c 00 61 80    	mov    %eax,%gs:0x8061008c
    86c3:	fc                   	cld    
    86c4:	06                   	push   %es
    86c5:	75 06                	jne    86cd <cont>
    86c7:	b4 01                	mov    $0x1,%ah
    86c9:	88 26                	mov    %ah,(%esi)
    86cb:	e6 83                	out    %al,$0x83

000086cd <cont>:
    86cd:	fe 06                	incb   (%esi)
    86cf:	e6 83                	out    %al,$0x83
    86d1:	8c c8                	mov    %cs,%eax
    86d3:	8e c0                	mov    %eax,%es
    86d5:	fb                   	sti    
    86d6:	9c                   	pushf  
    86d7:	26 ff 1e             	lcall  *%es:(%esi)
    86da:	c2 83 8e             	ret    $0x8e83
    86dd:	16                   	push   %ss
    86de:	e2 83                	loop   8663 <_SetINT09h+0x9>
    86e0:	66 8b 26             	mov    (%esi),%sp
    86e3:	de 83 07 1f cf fa    	fiadd  -0x530e0f9(%ebx)

000086e8 <_SetINT33h>:
    86e8:	fa                   	cli    
    86e9:	c8 00 00 00          	enter  $0x0,$0x0
    86ed:	60                   	pusha  
    86ee:	1e                   	push   %ds
    86ef:	0f a8                	push   %gs
    86f1:	06                   	push   %es
    86f2:	8c c8                	mov    %cs,%eax
    86f4:	8e c0                	mov    %eax,%es
    86f6:	8e d8                	mov    %eax,%ds
    86f8:	8c 16                	mov    %ss,(%esi)
    86fa:	e2 83                	loop   867f <_SetINT09h+0x25>
    86fc:	8e d0                	mov    %eax,%ss
    86fe:	66 89 26             	mov    %sp,(%esi)
    8701:	de 83 66 8b 26 da    	fiadd  -0x25d9749a(%ebx)
    8707:	83 6a 00 e8          	subl   $0xffffffe8,0x0(%edx)
    870b:	f5                   	cmc    
    870c:	0c 8e                	or     $0x8e,%al
    870e:	16                   	push   %ss
    870f:	e2 83                	loop   8694 <_SetINT09h+0x3a>
    8711:	66 8b 26             	mov    (%esi),%sp
    8714:	de 83 07 0f a9 1f    	fiadd  0x1fa90f07(%ebx)
    871a:	61                   	popa   
    871b:	fb                   	sti    
    871c:	c9                   	leave  
    871d:	cf                   	iret   

0000871e <_SetINT34h>:
    871e:	fa                   	cli    
    871f:	c8 00 00 00          	enter  $0x0,$0x0
    8723:	60                   	pusha  
    8724:	1e                   	push   %ds
    8725:	0f a8                	push   %gs
    8727:	06                   	push   %es
    8728:	8c c8                	mov    %cs,%eax
    872a:	8e c0                	mov    %eax,%es
    872c:	8e d8                	mov    %eax,%ds
    872e:	8c 16                	mov    %ss,(%esi)
    8730:	e2 83                	loop   86b5 <_SetINT09h+0x5b>
    8732:	8e d0                	mov    %eax,%ss
    8734:	66 89 26             	mov    %sp,(%esi)
    8737:	de 83 66 8b 26 da    	fiadd  -0x25d9749a(%ebx)
    873d:	83 6a 00 e8          	subl   $0xffffffe8,0x0(%edx)
    8741:	6f                   	outsl  %ds:(%esi),(%dx)
    8742:	0d 8e 16 e2 83       	or     $0x83e2168e,%eax
    8747:	66 8b 26             	mov    (%esi),%sp
    874a:	de 83 07 0f a9 1f    	fiadd  0x1fa90f07(%ebx)
    8750:	61                   	popa   
    8751:	fb                   	sti    
    8752:	c9                   	leave  
    8753:	cf                   	iret   

00008754 <_SetINT35h>:
    8754:	60                   	pusha  
    8755:	1e                   	push   %ds
    8756:	0f a8                	push   %gs
    8758:	06                   	push   %es
    8759:	8c c8                	mov    %cs,%eax
    875b:	8e c0                	mov    %eax,%es
    875d:	8e d8                	mov    %eax,%ds
    875f:	8c 16                	mov    %ss,(%esi)
    8761:	e2 83                	loop   86e6 <cont+0x19>
    8763:	8e d0                	mov    %eax,%ss
    8765:	66 89 26             	mov    %sp,(%esi)
    8768:	de 83 66 8b 26 da    	fiadd  -0x25d9749a(%ebx)
    876e:	83 6a 00 e8          	subl   $0xffffffe8,0x0(%edx)
    8772:	1d 0e 8e 16 e2       	sbb    $0xe2168e0e,%eax
    8777:	83 66 8b 26          	andl   $0x26,-0x75(%esi)
    877b:	de 83 07 0f a9 1f    	fiadd  0x1fa90f07(%ebx)
    8781:	61                   	popa   
    8782:	fb                   	sti    
    8783:	cf                   	iret   

00008784 <_SetINT36h>:
    8784:	60                   	pusha  
    8785:	1e                   	push   %ds
    8786:	0f a8                	push   %gs
    8788:	06                   	push   %es
    8789:	8c c8                	mov    %cs,%eax
    878b:	8e c0                	mov    %eax,%es
    878d:	8e d8                	mov    %eax,%ds
    878f:	8c 16                	mov    %ss,(%esi)
    8791:	e2 83                	loop   8716 <_SetINT33h+0x2e>
    8793:	8e d0                	mov    %eax,%ss
    8795:	66 89 26             	mov    %sp,(%esi)
    8798:	de 83 66 8b 26 da    	fiadd  -0x25d9749a(%ebx)
    879e:	83 6a 00 e8          	subl   $0xffffffe8,0x0(%edx)
    87a2:	73 0e                	jae    87b2 <_SetINT36h+0x2e>
    87a4:	8e 16                	mov    (%esi),%ss
    87a6:	e2 83                	loop   872b <_SetINT34h+0xd>
    87a8:	66 8b 26             	mov    (%esi),%sp
    87ab:	de 83 07 0f a9 1f    	fiadd  0x1fa90f07(%ebx)
    87b1:	61                   	popa   
    87b2:	fb                   	sti    
    87b3:	cf                   	iret   

000087b4 <_SetINT21h>:
    87b4:	c8 00 00 00          	enter  $0x0,$0x0
    87b8:	60                   	pusha  
    87b9:	1e                   	push   %ds
    87ba:	0f a8                	push   %gs
    87bc:	06                   	push   %es
    87bd:	8c c8                	mov    %cs,%eax
    87bf:	8e c0                	mov    %eax,%es
    87c1:	8e d8                	mov    %eax,%ds
    87c3:	8b 46 08             	mov    0x8(%esi),%eax
    87c6:	80 fc 00             	cmp    $0x0,%ah
    87c9:	74 16                	je     87e1 <fn0>
    87cb:	80 fc 01             	cmp    $0x1,%ah
    87ce:	74 21                	je     87f1 <fn1>
    87d0:	80 fc 02             	cmp    $0x2,%ah
    87d3:	74 3d                	je     8812 <fn2>
    87d5:	80 fc 03             	cmp    $0x3,%ah
    87d8:	74 5f                	je     8839 <fn3>
    87da:	07                   	pop    %es
    87db:	0f a9                	pop    %gs
    87dd:	1f                   	pop    %ds
    87de:	61                   	popa   
    87df:	c9                   	leave  
    87e0:	cf                   	iret   

000087e1 <fn0>:
    87e1:	8b 46 0a             	mov    0xa(%esi),%eax
    87e4:	b4 0e                	mov    $0xe,%ah
    87e6:	b3 00                	mov    $0x0,%bl
    87e8:	cd 10                	int    $0x10
    87ea:	07                   	pop    %es
    87eb:	0f a9                	pop    %gs
    87ed:	1f                   	pop    %ds
    87ee:	61                   	popa   
    87ef:	c9                   	leave  
    87f0:	cf                   	iret   

000087f1 <fn1>:
    87f1:	66 83 ec 04          	sub    $0x4,%sp
    87f5:	b4 00                	mov    $0x0,%ah
    87f7:	cd 16                	int    $0x16
    87f9:	b4 00                	mov    $0x0,%ah
    87fb:	66 67 89 04          	mov    %ax,(%si)
    87ff:	24 66                	and    $0x66,%al
    8801:	67 8b 04             	mov    (%si),%eax
    8804:	24 66                	and    $0x66,%al
    8806:	83 c4 04             	add    $0x4,%esp
    8809:	8e e0                	mov    %eax,%fs
    880b:	07                   	pop    %es
    880c:	0f a9                	pop    %gs
    880e:	1f                   	pop    %ds
    880f:	61                   	popa   
    8810:	c9                   	leave  
    8811:	cf                   	iret   

00008812 <fn2>:
    8812:	66 83 ec 04          	sub    $0x4,%sp
    8816:	b4 00                	mov    $0x0,%ah
    8818:	cd 16                	int    $0x16
    881a:	b4 00                	mov    $0x0,%ah
    881c:	66 67 89 04          	mov    %ax,(%si)
    8820:	24 66                	and    $0x66,%al
    8822:	67 8b 04             	mov    (%si),%eax
    8825:	24 b4                	and    $0xb4,%al
    8827:	0e                   	push   %cs
    8828:	b3 00                	mov    $0x0,%bl
    882a:	cd 10                	int    $0x10
    882c:	66 83 c4 04          	add    $0x4,%sp
    8830:	8e e0                	mov    %eax,%fs
    8832:	07                   	pop    %es
    8833:	0f a9                	pop    %gs
    8835:	1f                   	pop    %ds
    8836:	61                   	popa   
    8837:	c9                   	leave  
    8838:	cf                   	iret   

00008839 <fn3>:
    8839:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    883e:	07                   	pop    %es
    883f:	0f a9                	pop    %gs
    8841:	1f                   	pop    %ds
    8842:	61                   	popa   
    8843:	c9                   	leave  
    8844:	cf                   	iret   

00008845 <_SetINT37h>:
    8845:	fa                   	cli    
    8846:	e8 90 04 cf fa       	call   facf8cdb <_end+0xfaceb0a7>

0000884a <_SetINT38h>:
    884a:	fa                   	cli    
    884b:	50                   	push   %eax
    884c:	1e                   	push   %ds
    884d:	8c c8                	mov    %cs,%eax
    884f:	8e d8                	mov    %eax,%ds
    8851:	6a 00                	push   $0x0
    8853:	e8 0d 13 1f 58       	call   581f9b65 <_end+0x581ebf31>
    8858:	fb                   	sti    
    8859:	cf                   	iret   

0000885a <_SetINT39h>:
    885a:	fa                   	cli    
    885b:	c8 00 00 00          	enter  $0x0,$0x0
    885f:	1e                   	push   %ds
    8860:	6a 00                	push   $0x0
    8862:	8c c8                	mov    %cs,%eax
    8864:	8e d8                	mov    %eax,%ds
    8866:	e8 f6 14 1f c9       	call   c91f9d61 <_end+0xc91ec12d>
    886b:	fb                   	sti    
    886c:	cf                   	iret   

0000886d <_SetINT41h>:
    886d:	fa                   	cli    
    886e:	e8 a0 03 e8 11       	call   11e88c13 <_end+0x11e7afdf>
    8873:	04 b0                	add    $0xb0,%al
    8875:	20 e6                	and    %ah,%dh
    8877:	20 e6                	and    %ah,%dh
    8879:	a0 fb cf fa c8       	mov    0xc8facffb,%al

0000887c <_SetINT2Ah>:
    887c:	fa                   	cli    
    887d:	c8 00 00 00          	enter  $0x0,$0x0
    8881:	1e                   	push   %ds
    8882:	66 67 8b 45 08       	mov    0x8(%di),%ax
    8887:	66 50                	push   %ax
    8889:	6a 00                	push   $0x0
    888b:	8c c8                	mov    %cs,%eax
    888d:	8e d8                	mov    %eax,%ds
    888f:	e8 62 17 58 1f       	call   1f589ff6 <_end+0x1f57c3c2>
    8894:	c9                   	leave  
    8895:	fb                   	sti    
    8896:	cf                   	iret   

00008897 <_SetINT3Bh>:
    8897:	fa                   	cli    
    8898:	c8 00 00 00          	enter  $0x0,$0x0
    889c:	1e                   	push   %ds
    889d:	6a 00                	push   $0x0
    889f:	8c c8                	mov    %cs,%eax
    88a1:	8e d8                	mov    %eax,%ds
    88a3:	e8 1b 18 1f c9       	call   c91fa0c3 <_end+0xc91ec48f>
    88a8:	fb                   	sti    
    88a9:	cf                   	iret   

000088aa <_SetINT3Ch>:
    88aa:	fa                   	cli    
    88ab:	c8 00 00 00          	enter  $0x0,$0x0
    88af:	1e                   	push   %ds
    88b0:	66 67 8b 45 08       	mov    0x8(%di),%ax
    88b5:	66 50                	push   %ax
    88b7:	6a 00                	push   $0x0
    88b9:	8c c8                	mov    %cs,%eax
    88bb:	8e d8                	mov    %eax,%ds
    88bd:	e8 56 1c 66 83       	call   8366a518 <_end+0x8365c8e4>
    88c2:	c4 04 1f             	les    (%edi,%ebx,1),%eax
    88c5:	c9                   	leave  
    88c6:	fb                   	sti    
    88c7:	cf                   	iret   

000088c8 <_SetINT3Dh>:
    88c8:	fa                   	cli    
    88c9:	c8 00 00 00          	enter  $0x0,$0x0
    88cd:	1e                   	push   %ds
    88ce:	66 67 8b 45 08       	mov    0x8(%di),%ax
    88d3:	66 50                	push   %ax
    88d5:	6a 00                	push   $0x0
    88d7:	8c c8                	mov    %cs,%eax
    88d9:	8e d8                	mov    %eax,%ds
    88db:	e8 10 1d 66 83       	call   8366a5f0 <_end+0x8365c9bc>
    88e0:	c4 04 1f             	les    (%edi,%ebx,1),%eax
    88e3:	c9                   	leave  
    88e4:	fb                   	sti    
    88e5:	cf                   	iret   

000088e6 <_SetINT3Eh>:
    88e6:	c8 00 00 00          	enter  $0x0,$0x0
    88ea:	1e                   	push   %ds
    88eb:	66 67 8b 45 08       	mov    0x8(%di),%ax
    88f0:	66 50                	push   %ax
    88f2:	6a 00                	push   $0x0
    88f4:	8c c8                	mov    %cs,%eax
    88f6:	8e d8                	mov    %eax,%ds
    88f8:	e8 2d 1d 66 83       	call   8366a62a <_end+0x8365c9f6>
    88fd:	c4 04 1f             	les    (%edi,%ebx,1),%eax
    8900:	c9                   	leave  
    8901:	cf                   	iret   

00008902 <_SetINT3Fh>:
    8902:	c8 00 00 00          	enter  $0x0,$0x0
    8906:	1e                   	push   %ds
    8907:	66 67 8b 45 08       	mov    0x8(%di),%ax
    890c:	66 50                	push   %ax
    890e:	6a 00                	push   $0x0
    8910:	8c c8                	mov    %cs,%eax
    8912:	8e d8                	mov    %eax,%ds
    8914:	e8 5d 1e 66 83       	call   8366a776 <_end+0x8365cb42>
    8919:	c4 04 1f             	les    (%edi,%ebx,1),%eax
    891c:	c9                   	leave  
    891d:	cf                   	iret   

0000891e <_initialInt>:
    891e:	c8 00 00 00          	enter  $0x0,$0x0
    8922:	60                   	pusha  
    8923:	06                   	push   %es
    8924:	1e                   	push   %ds
    8925:	8c c8                	mov    %cs,%eax
    8927:	8e d8                	mov    %eax,%ds
    8929:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    892e:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
    8933:	00 f7                	add    %dh,%bh
    8935:	e3 89                	jecxz  88c0 <_SetINT3Ch+0x16>
    8937:	c7                   	(bad)  
    8938:	b8 99 85 26 89       	mov    $0x89268599,%eax
    893d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8942:	45                   	inc    %ebp
    8943:	02 1f                	add    (%edi),%bl
    8945:	07                   	pop    %es
    8946:	61                   	popa   
    8947:	60                   	pusha  
    8948:	06                   	push   %es
    8949:	1e                   	push   %ds
    894a:	8c c8                	mov    %cs,%eax
    894c:	8e d8                	mov    %eax,%ds
    894e:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8953:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
    8958:	00 f7                	add    %dh,%bh
    895a:	e3 89                	jecxz  88e5 <_SetINT3Dh+0x1d>
    895c:	c7                   	(bad)  
    895d:	b8 e8 86 26 89       	mov    $0x892686e8,%eax
    8962:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8967:	45                   	inc    %ebp
    8968:	02 1f                	add    (%edi),%bl
    896a:	07                   	pop    %es
    896b:	61                   	popa   
    896c:	60                   	pusha  
    896d:	06                   	push   %es
    896e:	1e                   	push   %ds
    896f:	8c c8                	mov    %cs,%eax
    8971:	8e d8                	mov    %eax,%ds
    8973:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8978:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
    897d:	00 f7                	add    %dh,%bh
    897f:	e3 89                	jecxz  890a <_SetINT3Fh+0x8>
    8981:	c7                   	(bad)  
    8982:	b8 1e 87 26 89       	mov    $0x8926871e,%eax
    8987:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    898c:	45                   	inc    %ebp
    898d:	02 1f                	add    (%edi),%bl
    898f:	07                   	pop    %es
    8990:	61                   	popa   
    8991:	60                   	pusha  
    8992:	06                   	push   %es
    8993:	1e                   	push   %ds
    8994:	8c c8                	mov    %cs,%eax
    8996:	8e d8                	mov    %eax,%ds
    8998:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    899d:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
    89a2:	00 f7                	add    %dh,%bh
    89a4:	e3 89                	jecxz  892f <_initialInt+0x11>
    89a6:	c7                   	(bad)  
    89a7:	b8 54 87 26 89       	mov    $0x89268754,%eax
    89ac:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    89b1:	45                   	inc    %ebp
    89b2:	02 1f                	add    (%edi),%bl
    89b4:	07                   	pop    %es
    89b5:	61                   	popa   
    89b6:	60                   	pusha  
    89b7:	06                   	push   %es
    89b8:	1e                   	push   %ds
    89b9:	8c c8                	mov    %cs,%eax
    89bb:	8e d8                	mov    %eax,%ds
    89bd:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    89c2:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
    89c7:	00 f7                	add    %dh,%bh
    89c9:	e3 89                	jecxz  8954 <_initialInt+0x36>
    89cb:	c7                   	(bad)  
    89cc:	b8 84 87 26 89       	mov    $0x89268784,%eax
    89d1:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    89d6:	45                   	inc    %ebp
    89d7:	02 1f                	add    (%edi),%bl
    89d9:	07                   	pop    %es
    89da:	61                   	popa   
    89db:	60                   	pusha  
    89dc:	06                   	push   %es
    89dd:	1e                   	push   %ds
    89de:	8c c8                	mov    %cs,%eax
    89e0:	8e d8                	mov    %eax,%ds
    89e2:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    89e7:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
    89ec:	00 f7                	add    %dh,%bh
    89ee:	e3 89                	jecxz  8979 <_initialInt+0x5b>
    89f0:	c7                   	(bad)  
    89f1:	b8 b4 87 26 89       	mov    $0x892687b4,%eax
    89f6:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    89fb:	45                   	inc    %ebp
    89fc:	02 1f                	add    (%edi),%bl
    89fe:	07                   	pop    %es
    89ff:	61                   	popa   
    8a00:	60                   	pusha  
    8a01:	06                   	push   %es
    8a02:	1e                   	push   %ds
    8a03:	8c c8                	mov    %cs,%eax
    8a05:	8e d8                	mov    %eax,%ds
    8a07:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8a0c:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
    8a11:	00 f7                	add    %dh,%bh
    8a13:	e3 89                	jecxz  899e <_initialInt+0x80>
    8a15:	c7                   	(bad)  
    8a16:	b8 45 88 26 89       	mov    $0x89268845,%eax
    8a1b:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8a20:	45                   	inc    %ebp
    8a21:	02 1f                	add    (%edi),%bl
    8a23:	07                   	pop    %es
    8a24:	61                   	popa   
    8a25:	60                   	pusha  
    8a26:	06                   	push   %es
    8a27:	1e                   	push   %ds
    8a28:	8c c8                	mov    %cs,%eax
    8a2a:	8e d8                	mov    %eax,%ds
    8a2c:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8a31:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
    8a36:	00 f7                	add    %dh,%bh
    8a38:	e3 89                	jecxz  89c3 <_initialInt+0xa5>
    8a3a:	c7                   	(bad)  
    8a3b:	b8 4a 88 26 89       	mov    $0x8926884a,%eax
    8a40:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8a45:	45                   	inc    %ebp
    8a46:	02 1f                	add    (%edi),%bl
    8a48:	07                   	pop    %es
    8a49:	61                   	popa   
    8a4a:	60                   	pusha  
    8a4b:	06                   	push   %es
    8a4c:	1e                   	push   %ds
    8a4d:	8c c8                	mov    %cs,%eax
    8a4f:	8e d8                	mov    %eax,%ds
    8a51:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8a56:	b8 39 00 bb 04       	mov    $0x4bb0039,%eax
    8a5b:	00 f7                	add    %dh,%bh
    8a5d:	e3 89                	jecxz  89e8 <_initialInt+0xca>
    8a5f:	c7                   	(bad)  
    8a60:	b8 5a 88 26 89       	mov    $0x8926885a,%eax
    8a65:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8a6a:	45                   	inc    %ebp
    8a6b:	02 1f                	add    (%edi),%bl
    8a6d:	07                   	pop    %es
    8a6e:	61                   	popa   
    8a6f:	60                   	pusha  
    8a70:	06                   	push   %es
    8a71:	1e                   	push   %ds
    8a72:	8c c8                	mov    %cs,%eax
    8a74:	8e d8                	mov    %eax,%ds
    8a76:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8a7b:	b8 2a 00 bb 04       	mov    $0x4bb002a,%eax
    8a80:	00 f7                	add    %dh,%bh
    8a82:	e3 89                	jecxz  8a0d <_initialInt+0xef>
    8a84:	c7                   	(bad)  
    8a85:	b8 7c 88 26 89       	mov    $0x8926887c,%eax
    8a8a:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8a8f:	45                   	inc    %ebp
    8a90:	02 1f                	add    (%edi),%bl
    8a92:	07                   	pop    %es
    8a93:	61                   	popa   
    8a94:	60                   	pusha  
    8a95:	06                   	push   %es
    8a96:	1e                   	push   %ds
    8a97:	8c c8                	mov    %cs,%eax
    8a99:	8e d8                	mov    %eax,%ds
    8a9b:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8aa0:	b8 41 00 bb 04       	mov    $0x4bb0041,%eax
    8aa5:	00 f7                	add    %dh,%bh
    8aa7:	e3 89                	jecxz  8a32 <_initialInt+0x114>
    8aa9:	c7                   	(bad)  
    8aaa:	b8 6d 88 26 89       	mov    $0x8926886d,%eax
    8aaf:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8ab4:	45                   	inc    %ebp
    8ab5:	02 1f                	add    (%edi),%bl
    8ab7:	07                   	pop    %es
    8ab8:	61                   	popa   
    8ab9:	60                   	pusha  
    8aba:	06                   	push   %es
    8abb:	1e                   	push   %ds
    8abc:	8c c8                	mov    %cs,%eax
    8abe:	8e d8                	mov    %eax,%ds
    8ac0:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8ac5:	b8 23 00 bb 04       	mov    $0x4bb0023,%eax
    8aca:	00 f7                	add    %dh,%bh
    8acc:	e3 89                	jecxz  8a57 <_initialInt+0x139>
    8ace:	c7                   	(bad)  
    8acf:	b8 d5 85 26 89       	mov    $0x892685d5,%eax
    8ad4:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8ad9:	45                   	inc    %ebp
    8ada:	02 1f                	add    (%edi),%bl
    8adc:	07                   	pop    %es
    8add:	61                   	popa   
    8ade:	60                   	pusha  
    8adf:	06                   	push   %es
    8ae0:	1e                   	push   %ds
    8ae1:	8c c8                	mov    %cs,%eax
    8ae3:	8e d8                	mov    %eax,%ds
    8ae5:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8aea:	b8 3b 00 bb 04       	mov    $0x4bb003b,%eax
    8aef:	00 f7                	add    %dh,%bh
    8af1:	e3 89                	jecxz  8a7c <_initialInt+0x15e>
    8af3:	c7                   	(bad)  
    8af4:	b8 97 88 26 89       	mov    $0x89268897,%eax
    8af9:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8afe:	45                   	inc    %ebp
    8aff:	02 1f                	add    (%edi),%bl
    8b01:	07                   	pop    %es
    8b02:	61                   	popa   
    8b03:	60                   	pusha  
    8b04:	06                   	push   %es
    8b05:	1e                   	push   %ds
    8b06:	8c c8                	mov    %cs,%eax
    8b08:	8e d8                	mov    %eax,%ds
    8b0a:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b0f:	b8 3c 00 bb 04       	mov    $0x4bb003c,%eax
    8b14:	00 f7                	add    %dh,%bh
    8b16:	e3 89                	jecxz  8aa1 <_initialInt+0x183>
    8b18:	c7                   	(bad)  
    8b19:	b8 aa 88 26 89       	mov    $0x892688aa,%eax
    8b1e:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b23:	45                   	inc    %ebp
    8b24:	02 1f                	add    (%edi),%bl
    8b26:	07                   	pop    %es
    8b27:	61                   	popa   
    8b28:	60                   	pusha  
    8b29:	06                   	push   %es
    8b2a:	1e                   	push   %ds
    8b2b:	8c c8                	mov    %cs,%eax
    8b2d:	8e d8                	mov    %eax,%ds
    8b2f:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b34:	b8 3d 00 bb 04       	mov    $0x4bb003d,%eax
    8b39:	00 f7                	add    %dh,%bh
    8b3b:	e3 89                	jecxz  8ac6 <_initialInt+0x1a8>
    8b3d:	c7                   	(bad)  
    8b3e:	b8 c8 88 26 89       	mov    $0x892688c8,%eax
    8b43:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b48:	45                   	inc    %ebp
    8b49:	02 1f                	add    (%edi),%bl
    8b4b:	07                   	pop    %es
    8b4c:	61                   	popa   
    8b4d:	60                   	pusha  
    8b4e:	06                   	push   %es
    8b4f:	1e                   	push   %ds
    8b50:	8c c8                	mov    %cs,%eax
    8b52:	8e d8                	mov    %eax,%ds
    8b54:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b59:	b8 3e 00 bb 04       	mov    $0x4bb003e,%eax
    8b5e:	00 f7                	add    %dh,%bh
    8b60:	e3 89                	jecxz  8aeb <_initialInt+0x1cd>
    8b62:	c7                   	(bad)  
    8b63:	b8 e6 88 26 89       	mov    $0x892688e6,%eax
    8b68:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b6d:	45                   	inc    %ebp
    8b6e:	02 1f                	add    (%edi),%bl
    8b70:	07                   	pop    %es
    8b71:	61                   	popa   
    8b72:	60                   	pusha  
    8b73:	06                   	push   %es
    8b74:	1e                   	push   %ds
    8b75:	8c c8                	mov    %cs,%eax
    8b77:	8e d8                	mov    %eax,%ds
    8b79:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8b7e:	b8 3f 00 bb 04       	mov    $0x4bb003f,%eax
    8b83:	00 f7                	add    %dh,%bh
    8b85:	e3 89                	jecxz  8b10 <_initialInt+0x1f2>
    8b87:	c7                   	(bad)  
    8b88:	b8 02 89 26 89       	mov    $0x89268902,%eax
    8b8d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8b92:	45                   	inc    %ebp
    8b93:	02 1f                	add    (%edi),%bl
    8b95:	07                   	pop    %es
    8b96:	61                   	popa   
    8b97:	c9                   	leave  
    8b98:	66 5a                	pop    %dx
    8b9a:	ff e2                	jmp    *%edx

00008b9c <_initialInt_09h>:
    8b9c:	c8 00 00 00          	enter  $0x0,$0x0
    8ba0:	a1 24 00 a3 c2       	mov    0xc2a30024,%eax
    8ba5:	83 a1 26 00 a3 c4 83 	andl   $0xffffff83,-0x3b5cffda(%ecx)
    8bac:	60                   	pusha  
    8bad:	06                   	push   %es
    8bae:	1e                   	push   %ds
    8baf:	8c c8                	mov    %cs,%eax
    8bb1:	8e d8                	mov    %eax,%ds
    8bb3:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8bb8:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
    8bbd:	00 f7                	add    %dh,%bh
    8bbf:	e3 89                	jecxz  8b4a <_initialInt+0x22c>
    8bc1:	c7                   	(bad)  
    8bc2:	b8 5a 86 26 89       	mov    $0x8926865a,%eax
    8bc7:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8bcc:	45                   	inc    %ebp
    8bcd:	02 1f                	add    (%edi),%bl
    8bcf:	07                   	pop    %es
    8bd0:	61                   	popa   
    8bd1:	c9                   	leave  
    8bd2:	66 5a                	pop    %dx
    8bd4:	ff e2                	jmp    *%edx

00008bd6 <_initialInt_08h>:
    8bd6:	c8 00 00 00          	enter  $0x0,$0x0
    8bda:	b0 40                	mov    $0x40,%al
    8bdc:	e6 43                	out    %al,$0x43
    8bde:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
    8be3:	88 e0                	mov    %ah,%al
    8be5:	e6 40                	out    %al,$0x40
    8be7:	60                   	pusha  
    8be8:	06                   	push   %es
    8be9:	1e                   	push   %ds
    8bea:	8c c8                	mov    %cs,%eax
    8bec:	8e d8                	mov    %eax,%ds
    8bee:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8bf3:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
    8bf8:	00 f7                	add    %dh,%bh
    8bfa:	e3 89                	jecxz  8b85 <_initialInt+0x267>
    8bfc:	c7                   	(bad)  
    8bfd:	b8 d5 85 26 89       	mov    $0x892685d5,%eax
    8c02:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8c07:	45                   	inc    %ebp
    8c08:	02 1f                	add    (%edi),%bl
    8c0a:	07                   	pop    %es
    8c0b:	61                   	popa   
    8c0c:	c9                   	leave  
    8c0d:	66 5a                	pop    %dx
    8c0f:	ff e2                	jmp    *%edx

00008c11 <_save>:
    8c11:	66 89 26             	mov    %sp,(%esi)
    8c14:	da 83 1e 0e 1f 8f    	fiaddl -0x70e0f1e2(%ebx)
    8c1a:	06                   	push   %es
    8c1b:	ca 83 8f             	lret   $0x8f83
    8c1e:	06                   	push   %es
    8c1f:	ce                   	into   
    8c20:	83 66 89 26          	andl   $0x26,-0x77(%esi)
    8c24:	d6                   	(bad)  
    8c25:	83 66 89 36          	andl   $0x36,-0x77(%esi)
    8c29:	d0 83 66 8b 36 f0    	rolb   -0xfc9749a(%ebx)
    8c2f:	ca 66 83             	lret   $0x8366
    8c32:	c6                   	(bad)  
    8c33:	2c 67                	sub    $0x67,%al
    8c35:	8f 06                	popl   (%esi)
    8c37:	67 8f 46 04          	popl   0x4(%bp)
    8c3b:	67 c7 46 06 00 00 67 	movl   $0x8f670000,0x6(%bp)
    8c42:	8f 
    8c43:	46                   	inc    %esi
    8c44:	08 67 c7             	or     %ah,-0x39(%edi)
    8c47:	46                   	inc    %esi
    8c48:	0a 00                	or     (%eax),%al
    8c4a:	00 66 67             	add    %ah,0x67(%esi)
    8c4d:	89 66 fc             	mov    %esp,-0x4(%esi)
    8c50:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
    8c54:	8c de                	mov    %ds,%esi
    8c56:	8e d6                	mov    %esi,%ss
    8c58:	66 8b 26             	mov    (%esi),%sp
    8c5b:	f0 ca 66 83          	lock lret $0x8366
    8c5f:	c4 24 6a             	les    (%edx,%ebp,2),%esp
    8c62:	00 ff                	add    %bh,%bh
    8c64:	36                   	ss
    8c65:	ca 83 6a             	lret   $0x6a83
    8c68:	00 06                	add    %al,(%esi)
    8c6a:	66 55                	push   %bp
    8c6c:	66 57                	push   %di
    8c6e:	66 ff 36             	pushw  (%esi)
    8c71:	d0 83 66 52 66 51    	rolb   0x51665266(%ebx)
    8c77:	66 53                	push   %bx
    8c79:	66 50                	push   %ax
    8c7b:	66 8b 26             	mov    (%esi),%sp
    8c7e:	d6                   	(bad)  
    8c7f:	83 a1 ce 83 ff e0 66 	andl   $0x66,-0x1f007c32(%ecx)

00008c85 <_restart>:
    8c85:	66 89 26             	mov    %sp,(%esi)
    8c88:	d6                   	(bad)  
    8c89:	83 66 8b 26          	andl   $0x26,-0x75(%esi)
    8c8d:	f0 ca 66 58          	lock lret $0x5866
    8c91:	66 5b                	pop    %bx
    8c93:	66 59                	pop    %cx
    8c95:	66 5a                	pop    %dx
    8c97:	66 5e                	pop    %si
    8c99:	66 5f                	pop    %di
    8c9b:	66 5d                	pop    %bp
    8c9d:	07                   	pop    %es
    8c9e:	8f 06                	popl   (%esi)
    8ca0:	d4 83                	aam    $0x83
    8ca2:	8f 06                	popl   (%esi)
    8ca4:	ca 83 8f             	lret   $0x8f83
    8ca7:	06                   	push   %es
    8ca8:	d4 83                	aam    $0x83
    8caa:	66 89 36             	mov    %si,(%esi)
    8cad:	d0 83 17 8f 06 d4    	rolb   -0x2bf970e9(%ebx)
    8cb3:	83 66 89 e6          	andl   $0xffffffe6,-0x77(%esi)
    8cb7:	66 67 8b 26 67 ff    	mov    -0x99,%sp
    8cbd:	76 0c                	jbe    8ccb <_restart+0x46>
    8cbf:	67 ff 76 08          	pushl  0x8(%bp)
    8cc3:	67 ff 76 04          	pushl  0x4(%bp)
    8cc7:	66 8b 36             	mov    (%esi),%si
    8cca:	d0 83 8e 1e ca 83    	rolb   -0x7c35e172(%ebx)
    8cd0:	50                   	push   %eax
    8cd1:	b0 20                	mov    $0x20,%al
    8cd3:	e6 20                	out    %al,$0x20
    8cd5:	e6 a0                	out    %al,$0xa0
    8cd7:	58                   	pop    %eax
    8cd8:	cf                   	iret   

00008cd9 <RTC_Timer>:
    8cd9:	c8 00 00 00          	enter  $0x0,$0x0
    8cdd:	1e                   	push   %ds
    8cde:	06                   	push   %es
    8cdf:	60                   	pusha  
    8ce0:	8c c8                	mov    %cs,%eax
    8ce2:	8e d8                	mov    %eax,%ds
    8ce4:	8c c8                	mov    %cs,%eax
    8ce6:	8e c0                	mov    %eax,%es
    8ce8:	bf e0 c4 b4 02       	mov    $0x2b4c4e0,%edi
    8ced:	cd 1a                	int    $0x1a
    8cef:	88 e8                	mov    %ch,%al
    8cf1:	b4 00                	mov    $0x0,%ah
    8cf3:	b3 10                	mov    $0x10,%bl
    8cf5:	f6 f3                	div    %bl
    8cf7:	04 30                	add    $0x30,%al
    8cf9:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
    8cff:	88 e8                	mov    %ch,%al
    8d01:	24 0f                	and    $0xf,%al
    8d03:	04 30                	add    $0x30,%al
    8d05:	88 45 01             	mov    %al,0x1(%ebp)
    8d08:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
    8d0c:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
    8d10:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
    8d14:	b4 02                	mov    $0x2,%ah
    8d16:	cd 1a                	int    $0x1a
    8d18:	88 c8                	mov    %cl,%al
    8d1a:	b4 00                	mov    $0x0,%ah
    8d1c:	b3 10                	mov    $0x10,%bl
    8d1e:	f6 f3                	div    %bl
    8d20:	04 30                	add    $0x30,%al
    8d22:	88 45 05             	mov    %al,0x5(%ebp)
    8d25:	b4 02                	mov    $0x2,%ah
    8d27:	cd 1a                	int    $0x1a
    8d29:	88 c8                	mov    %cl,%al
    8d2b:	24 0f                	and    $0xf,%al
    8d2d:	04 30                	add    $0x30,%al
    8d2f:	88 45 06             	mov    %al,0x6(%ebp)
    8d32:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
    8d36:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
    8d3a:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
    8d3e:	8c c8                	mov    %cs,%eax
    8d40:	8e d8                	mov    %eax,%ds
    8d42:	8e c0                	mov    %eax,%es
    8d44:	bd ef 83 8c d8       	mov    $0xd88c83ef,%ebp
    8d49:	8e c0                	mov    %eax,%es
    8d4b:	b9 06 00 b8 01       	mov    $0x1b80006,%ecx
    8d50:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
    8d56:	b2 0a                	mov    $0xa,%dl
    8d58:	cd 10                	int    $0x10
    8d5a:	8c c8                	mov    %cs,%eax
    8d5c:	8e d8                	mov    %eax,%ds
    8d5e:	8e c0                	mov    %eax,%es
    8d60:	bd e0 c4 8c d8       	mov    $0xd88cc4e0,%ebp
    8d65:	8e c0                	mov    %eax,%es
    8d67:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
    8d6c:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
    8d72:	b2 1e                	mov    $0x1e,%dl
    8d74:	cd 10                	int    $0x10
    8d76:	61                   	popa   
    8d77:	07                   	pop    %es
    8d78:	1f                   	pop    %ds
    8d79:	c9                   	leave  
    8d7a:	66 5a                	pop    %dx
    8d7c:	ff e2                	jmp    *%edx

00008d7e <_Get_Hours_1>:
    8d7e:	c8 04 00 00          	enter  $0x4,$0x0
    8d82:	b4 02                	mov    $0x2,%ah
    8d84:	cd 1a                	int    $0x1a
    8d86:	88 e8                	mov    %ch,%al
    8d88:	b4 00                	mov    $0x0,%ah
    8d8a:	b3 10                	mov    $0x10,%bl
    8d8c:	f6 f3                	div    %bl
    8d8e:	30 e4                	xor    %ah,%ah
    8d90:	66 67 89 04          	mov    %ax,(%si)
    8d94:	24 66                	and    $0x66,%al
    8d96:	67 8b 04             	mov    (%si),%eax
    8d99:	24 c9                	and    $0xc9,%al
    8d9b:	66 5a                	pop    %dx
    8d9d:	ff e2                	jmp    *%edx

00008d9f <_Get_Hours_2>:
    8d9f:	c8 04 00 00          	enter  $0x4,$0x0
    8da3:	b4 02                	mov    $0x2,%ah
    8da5:	cd 1a                	int    $0x1a
    8da7:	88 e8                	mov    %ch,%al
    8da9:	24 0f                	and    $0xf,%al
    8dab:	30 e4                	xor    %ah,%ah
    8dad:	66 67 89 04          	mov    %ax,(%si)
    8db1:	24 66                	and    $0x66,%al
    8db3:	67 8b 04             	mov    (%si),%eax
    8db6:	24 c9                	and    $0xc9,%al
    8db8:	66 5a                	pop    %dx
    8dba:	ff e2                	jmp    *%edx

00008dbc <_Get_Minutes_1>:
    8dbc:	c8 04 00 00          	enter  $0x4,$0x0
    8dc0:	b4 02                	mov    $0x2,%ah
    8dc2:	cd 1a                	int    $0x1a
    8dc4:	88 c8                	mov    %cl,%al
    8dc6:	b4 00                	mov    $0x0,%ah
    8dc8:	b3 10                	mov    $0x10,%bl
    8dca:	f6 f3                	div    %bl
    8dcc:	30 e4                	xor    %ah,%ah
    8dce:	66 67 89 04          	mov    %ax,(%si)
    8dd2:	24 66                	and    $0x66,%al
    8dd4:	67 8b 04             	mov    (%si),%eax
    8dd7:	24 c9                	and    $0xc9,%al
    8dd9:	66 5a                	pop    %dx
    8ddb:	ff e2                	jmp    *%edx

00008ddd <_Get_Minutes_2>:
    8ddd:	c8 04 00 00          	enter  $0x4,$0x0
    8de1:	b4 02                	mov    $0x2,%ah
    8de3:	cd 1a                	int    $0x1a
    8de5:	88 c8                	mov    %cl,%al
    8de7:	24 0f                	and    $0xf,%al
    8de9:	30 e4                	xor    %ah,%ah
    8deb:	66 67 89 04          	mov    %ax,(%si)
    8def:	24 66                	and    $0x66,%al
    8df1:	67 8b 04             	mov    (%si),%eax
    8df4:	24 c9                	and    $0xc9,%al
    8df6:	66 5a                	pop    %dx
    8df8:	ff e2                	jmp    *%edx

00008dfa <print>:
#include "stdio.h"
//====================================================
//              显示字符串函数，可以指定位置
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
    8dfa:	66 55                	push   %bp
    8dfc:	66 89 e5             	mov    %sp,%bp
    8dff:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    8e03:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    8e08:	66 89 d0             	mov    %dx,%ax
    8e0b:	66 c1 e0 02          	shl    $0x2,%ax
    8e0f:	66 01 d0             	add    %dx,%ax
    8e12:	66 c1 e0 04          	shl    $0x4,%ax
    8e16:	66 89 c2             	mov    %ax,%dx
    8e19:	67 66 8b 45 10       	mov    0x10(%di),%ax
    8e1e:	66 01 d0             	add    %dx,%ax
    8e21:	66 01 c0             	add    %ax,%ax
    8e24:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    8e29:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    8e30:	00 00                	add    %al,(%eax)
	int index = 0;
    8e32:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8e39:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    8e3b:	eb 35                	jmp    8e72 <print+0x78>
		_printchar(Messeage[index],pos,color);
    8e3d:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8e42:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8e47:	66 01 d0             	add    %dx,%ax
    8e4a:	67 8a 00             	mov    (%bx,%si),%al
    8e4d:	66 0f be c0          	movsbw %al,%ax
    8e51:	67 66 ff 75 f4       	pushw  -0xc(%di)
    8e56:	67 66 ff 75 fc       	pushw  -0x4(%di)
    8e5b:	66 50                	push   %ax
    8e5d:	66 e8 ca f5          	callw  842b <_clearscreen+0x7>
    8e61:	ff                   	(bad)  
    8e62:	ff 66 83             	jmp    *-0x7d(%esi)
    8e65:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    8e68:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    8e6c:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    8e72:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8e77:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8e7c:	66 01 d0             	add    %dx,%ax
    8e7f:	67 8a 00             	mov    (%bx,%si),%al
    8e82:	84 c0                	test   %al,%al
    8e84:	75 b7                	jne    8e3d <print+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    8e86:	90                   	nop
}
    8e87:	66 c9                	leavew 
    8e89:	66 c3                	retw   

00008e8b <prints>:
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input	
    8e8b:	66 55                	push   %bp
    8e8d:	66 89 e5             	mov    %sp,%bp
    8e90:	66 83 ec 04          	sub    $0x4,%sp
	int index = 0;
    8e94:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8e9b:	00 00                	add    %al,(%eax)
	while(Messeage[index]){
    8e9d:	eb 25                	jmp    8ec4 <prints+0x39>
		_showchar(Messeage[index]);
    8e9f:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8ea4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8ea9:	66 01 d0             	add    %dx,%ax
    8eac:	67 8a 00             	mov    (%bx,%si),%al
    8eaf:	66 0f be c0          	movsbw %al,%ax
    8eb3:	66 50                	push   %ax
    8eb5:	66 e8 af f5          	callw  8468 <_readinput+0x17>
    8eb9:	ff                   	(bad)  
    8eba:	ff 66 83             	jmp    *-0x7d(%esi)
    8ebd:	c4 04 67             	les    (%edi,%eiz,2),%eax
		index++;
    8ec0:	66 ff 45 fc          	incw   -0x4(%ebp)
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input	
	int index = 0;
	while(Messeage[index]){
    8ec4:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8ec9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8ece:	66 01 d0             	add    %dx,%ax
    8ed1:	67 8a 00             	mov    (%bx,%si),%al
    8ed4:	84 c0                	test   %al,%al
    8ed6:	75 c7                	jne    8e9f <prints+0x14>
		_showchar(Messeage[index]);
		index++;
	}

	return;
    8ed8:	90                   	nop
}
    8ed9:	66 c9                	leavew 
    8edb:	66 c3                	retw   

00008edd <printc>:
//====================================================
//                显示字符函数
//====================================================
void printc(char alpha){
    8edd:	66 55                	push   %bp
    8edf:	66 89 e5             	mov    %sp,%bp
    8ee2:	66 83 ec 04          	sub    $0x4,%sp
    8ee6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8eeb:	67 88 45 fc          	mov    %al,-0x4(%di)
	_showchar(alpha);
    8eef:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    8ef5:	66 50                	push   %ax
    8ef7:	66 e8 6d f5          	callw  8468 <_readinput+0x17>
    8efb:	ff                   	(bad)  
    8efc:	ff 66 83             	jmp    *-0x7d(%esi)
    8eff:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    8f02:	66 c9                	leavew 
    8f04:	66 c3                	retw   

00008f06 <printsint>:
//====================================================
//                数字转字符函数
//====================================================
void printsint(int num){
    8f06:	66 55                	push   %bp
    8f08:	66 89 e5             	mov    %sp,%bp
    8f0b:	66 83 ec 2c          	sub    $0x2c,%sp
	 int save = num;
    8f0f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8f14:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	 int count = 0;
    8f19:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8f20:	00 00                	add    %al,(%eax)
	 char number[30];
	 number[count] = 0;
    8f22:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    8f27:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8f2c:	66 01 d0             	add    %dx,%ax
    8f2f:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	if(num < 0){
    8f33:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    8f39:	79 14                	jns    8f4f <printsint+0x49>
		printc('-');
    8f3b:	66 6a 2d             	pushw  $0x2d
    8f3e:	66 e8 99 ff          	callw  8edb <prints+0x50>
    8f42:	ff                   	(bad)  
    8f43:	ff 66 83             	jmp    *-0x7d(%esi)
    8f46:	c4 04 67             	les    (%edi,%eiz,2),%eax
		num = -num;
    8f49:	66 f7 5d 08          	negw   0x8(%ebp)
    8f4d:	eb 15                	jmp    8f64 <printsint+0x5e>
	}
	else if(num == 0){
    8f4f:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    8f55:	75 0d                	jne    8f64 <printsint+0x5e>
		printc('0');
    8f57:	66 6a 30             	pushw  $0x30
    8f5a:	66 e8 7d ff          	callw  8edb <prints+0x50>
    8f5e:	ff                   	(bad)  
    8f5f:	ff 66 83             	jmp    *-0x7d(%esi)
    8f62:	c4 04 eb             	les    (%ebx,%ebp,8),%eax
	}
	while(num > 0){
    8f65:	50                   	push   %eax
		number[count] = num % 10 + '0';
    8f66:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8f6b:	66 b9 0a 00          	mov    $0xa,%cx
    8f6f:	00 00                	add    %al,(%eax)
    8f71:	66 99                	cwtd   
    8f73:	66 f7 f9             	idiv   %cx
    8f76:	66 89 d0             	mov    %dx,%ax
    8f79:	66 83 c0 30          	add    $0x30,%ax
    8f7d:	67 66 8d 4d d6       	lea    -0x2a(%di),%cx
    8f82:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8f87:	66 01 ca             	add    %cx,%dx
    8f8a:	67 88 02             	mov    %al,(%bp,%si)
		num  = num / 10;
    8f8d:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    8f92:	66 b8 67 66          	mov    $0x6667,%ax
    8f96:	66 66 66 f7 e9       	data32 data32 imul %cx
    8f9b:	66 c1 fa 02          	sar    $0x2,%dx
    8f9f:	66 89 c8             	mov    %cx,%ax
    8fa2:	66 c1 f8 1f          	sar    $0x1f,%ax
    8fa6:	66 29 c2             	sub    %ax,%dx
    8fa9:	66 89 d0             	mov    %dx,%ax
    8fac:	67 66 89 45 08       	mov    %ax,0x8(%di)
		count ++;
    8fb1:	67 66 ff 45 fc       	incw   -0x4(%di)
		num = -num;
	}
	else if(num == 0){
		printc('0');
	}
	while(num > 0){
    8fb6:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    8fbc:	7f a8                	jg     8f66 <printsint+0x60>
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    8fbe:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8fc3:	66 48                	dec    %ax
    8fc5:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    8fca:	eb 25                	jmp    8ff1 <printsint+0xeb>
		printc(number[i]);
    8fcc:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    8fd1:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    8fd6:	66 01 d0             	add    %dx,%ax
    8fd9:	67 8a 00             	mov    (%bx,%si),%al
    8fdc:	66 0f be c0          	movsbw %al,%ax
    8fe0:	66 50                	push   %ax
    8fe2:	66 e8 f5 fe          	callw  8edb <prints+0x50>
    8fe6:	ff                   	(bad)  
    8fe7:	ff 66 83             	jmp    *-0x7d(%esi)
    8fea:	c4 04 67             	les    (%edi,%eiz,2),%eax
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    8fed:	66 ff 4d f8          	decw   -0x8(%ebp)
    8ff1:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    8ff7:	79 d3                	jns    8fcc <printsint+0xc6>
		printc(number[i]);
	}
	return;
    8ff9:	90                   	nop
}
    8ffa:	66 c9                	leavew 
    8ffc:	66 c3                	retw   

00008ffe <print_next_line>:
//====================================================
//                显示字符串并换行函数
//====================================================
 void print_next_line(char const* Messeage){
    8ffe:	66 55                	push   %bp
    9000:	66 89 e5             	mov    %sp,%bp
	prints(Messeage);
    9003:	67 66 ff 75 08       	pushw  0x8(%di)
    9008:	66 e8 7d fe          	callw  8e89 <print+0x8f>
    900c:	ff                   	(bad)  
    900d:	ff 66 83             	jmp    *-0x7d(%esi)
    9010:	c4 04 66             	les    (%esi,%eiz,2),%eax
	prints("\n\r");
    9013:	68 46 aa 00 00       	push   $0xaa46
    9018:	66 e8 6d fe          	callw  8e89 <print+0x8f>
    901c:	ff                   	(bad)  
    901d:	ff 66 83             	jmp    *-0x7d(%esi)
    9020:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    9023:	66 c9                	leavew 
    9025:	66 c3                	retw   

00009027 <strlen>:
//====================================================
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
    9027:	66 55                	push   %bp
    9029:	66 89 e5             	mov    %sp,%bp
    902c:	66 83 ec 08          	sub    $0x8,%sp
	int i = 0;
    9030:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9037:	00 00                	add    %al,(%eax)
	int count = 0;
    9039:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    9040:	00 00                	add    %al,(%eax)
	while(Messeage[i] != 0){
    9042:	eb 0a                	jmp    904e <strlen+0x27>
		i++;
    9044:	67 66 ff 45 fc       	incw   -0x4(%di)
		count++;
    9049:	67 66 ff 45 f8       	incw   -0x8(%di)
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
	int i = 0;
	int count = 0;
	while(Messeage[i] != 0){
    904e:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9053:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9058:	66 01 d0             	add    %dx,%ax
    905b:	67 8a 00             	mov    (%bx,%si),%al
    905e:	84 c0                	test   %al,%al
    9060:	75 e2                	jne    9044 <strlen+0x1d>
		i++;
		count++;
	}
	return count;
    9062:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    9067:	66 c9                	leavew 
    9069:	66 c3                	retw   

0000906b <read_and_print_input>:
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    906b:	66 55                	push   %bp
    906d:	66 89 e5             	mov    %sp,%bp
    9070:	66 83 ec 08          	sub    $0x8,%sp
    int i = 1;
    9074:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    907b:	00 00                	add    %al,(%eax)
    while(i){
    907d:	eb 1c                	jmp    909b <read_and_print_input+0x30>
        char savechar = _readinput();
    907f:	66 e8 cc f3          	callw  844f <_printchar+0x22>
    9083:	ff                   	(bad)  
    9084:	ff 67 88             	jmp    *-0x78(%edi)
    9087:	45                   	inc    %ebp
    9088:	fb                   	sti    
        _showchar(savechar);
    9089:	67 66 0f be 45 fb    	movsbw -0x5(%di),%ax
    908f:	66 50                	push   %ax
    9091:	66 e8 d3 f3          	callw  8468 <_readinput+0x17>
    9095:	ff                   	(bad)  
    9096:	ff 66 83             	jmp    *-0x7d(%esi)
    9099:	c4 04 67             	les    (%edi,%eiz,2),%eax
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    int i = 1;
    while(i){
    909c:	66 83 7d fc 00       	cmpw   $0x0,-0x4(%ebp)
    90a1:	75 dc                	jne    907f <read_and_print_input+0x14>
        char savechar = _readinput();
        _showchar(savechar);
    }
}
    90a3:	66 c9                	leavew 
    90a5:	66 c3                	retw   

000090a7 <getch>:
//====================================================
//        等待用户输入函数，返回用户输入在缓冲区中
//====================================================
char getch(){
    90a7:	66 55                	push   %bp
    90a9:	66 89 e5             	mov    %sp,%bp
    90ac:	66 83 ec 04          	sub    $0x4,%sp
	char result = _readinput();
    90b0:	66 e8 9b f3          	callw  844f <_printchar+0x22>
    90b4:	ff                   	(bad)  
    90b5:	ff 67 88             	jmp    *-0x78(%edi)
    90b8:	45                   	inc    %ebp
    90b9:	ff 67 8a             	jmp    *-0x76(%edi)
	return result;
    90bc:	45                   	inc    %ebp
    90bd:	ff 66 c9             	jmp    *-0x37(%esi)
}
    90c0:	66 c3                	retw   

000090c2 <getline>:
void  getline(char str[],int length){
    90c2:	66 55                	push   %bp
    90c4:	66 89 e5             	mov    %sp,%bp
    90c7:	66 83 ec 08          	sub    $0x8,%sp
	char save = getch();
    90cb:	66 e8 d6 ff          	callw  90a5 <read_and_print_input+0x3a>
    90cf:	ff                   	(bad)  
    90d0:	ff 67 88             	jmp    *-0x78(%edi)
    90d3:	45                   	inc    %ebp
    90d4:	ff 67 66             	jmp    *0x66(%edi)
	int index = 0;
    90d7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while(save != 13 && index < length){
    90de:	eb 46                	jmp    9126 <getline+0x64>
		printc(save);
    90e0:	67 66 0f be 45 ff    	movsbw -0x1(%di),%ax
    90e6:	66 50                	push   %ax
    90e8:	66 e8 ef fd          	callw  8edb <prints+0x50>
    90ec:	ff                   	(bad)  
    90ed:	ff 66 83             	jmp    *-0x7d(%esi)
    90f0:	c4 04 67             	les    (%edi,%eiz,2),%eax
		str[index] = save;
    90f3:	66 8b 55 f8          	mov    -0x8(%ebp),%dx
    90f7:	67 66 8b 45 08       	mov    0x8(%di),%ax
    90fc:	66 01 c2             	add    %ax,%dx
    90ff:	67 8a 45 ff          	mov    -0x1(%di),%al
    9103:	67 88 02             	mov    %al,(%bp,%si)
		index ++;
    9106:	67 66 ff 45 f8       	incw   -0x8(%di)
		str[index] = 0;
    910b:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9110:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9115:	66 01 d0             	add    %dx,%ax
    9118:	67 c6 00 00          	movb   $0x0,(%bx,%si)
		save = getch();
    911c:	66 e8 85 ff          	callw  90a5 <read_and_print_input+0x3a>
    9120:	ff                   	(bad)  
    9121:	ff 67 88             	jmp    *-0x78(%edi)
    9124:	45                   	inc    %ebp
    9125:	ff 67 80             	jmp    *-0x80(%edi)
	return result;
}
void  getline(char str[],int length){
	char save = getch();
	int index = 0;
	while(save != 13 && index < length){
    9128:	7d ff                	jge    9129 <getline+0x67>
    912a:	0d 74 0c 67 66       	or     $0x66670c74,%eax
    912f:	8b 45 f8             	mov    -0x8(%ebp),%eax
    9132:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    9137:	7c a7                	jl     90e0 <getline+0x1e>
		str[index] = save;
		index ++;
		str[index] = 0;
		save = getch();
	}
	return;
    9139:	90                   	nop
}
    913a:	66 c9                	leavew 
    913c:	66 c3                	retw   

0000913e <print_different_color>:
void print_different_color(char const* Messeage,int row,int colume,int color){
    913e:	66 55                	push   %bp
    9140:	66 89 e5             	mov    %sp,%bp
    9143:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    9147:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    914c:	66 89 d0             	mov    %dx,%ax
    914f:	66 c1 e0 02          	shl    $0x2,%ax
    9153:	66 01 d0             	add    %dx,%ax
    9156:	66 c1 e0 04          	shl    $0x4,%ax
    915a:	66 89 c2             	mov    %ax,%dx
    915d:	67 66 8b 45 10       	mov    0x10(%di),%ax
    9162:	66 01 d0             	add    %dx,%ax
    9165:	66 01 c0             	add    %ax,%ax
    9168:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    916d:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    9174:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    9176:	eb 35                	jmp    91ad <print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    9178:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    917d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9182:	66 01 d0             	add    %dx,%ax
    9185:	67 8a 00             	mov    (%bx,%si),%al
    9188:	66 0f be c0          	movsbw %al,%ax
    918c:	67 66 ff 75 14       	pushw  0x14(%di)
    9191:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9196:	66 50                	push   %ax
    9198:	66 e8 8f f2          	callw  842b <_clearscreen+0x7>
    919c:	ff                   	(bad)  
    919d:	ff 66 83             	jmp    *-0x7d(%esi)
    91a0:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    91a3:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    91a7:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    91ad:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    91b2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    91b7:	66 01 d0             	add    %dx,%ax
    91ba:	67 8a 00             	mov    (%bx,%si),%al
    91bd:	84 c0                	test   %al,%al
    91bf:	75 b7                	jne    9178 <print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    91c1:	90                   	nop
}
    91c2:	66 c9                	leavew 
    91c4:	66 c3                	retw   

000091c6 <strcmp>:
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
    91c6:	66 55                	push   %bp
    91c8:	66 89 e5             	mov    %sp,%bp
    91cb:	66 83 ec 04          	sub    $0x4,%sp
	int i = 0;
    91cf:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    91d6:	00 00                	add    %al,(%eax)
	while(m1[i] != 0 && m2[i]!= 0){
    91d8:	eb 31                	jmp    920b <strcmp+0x45>
		if(m1[i] != m2[i]){
    91da:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    91df:	67 66 8b 45 08       	mov    0x8(%di),%ax
    91e4:	66 01 d0             	add    %dx,%ax
    91e7:	67 8a 10             	mov    (%bx,%si),%dl
    91ea:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    91ef:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    91f4:	66 01 c8             	add    %cx,%ax
    91f7:	67 8a 00             	mov    (%bx,%si),%al
    91fa:	38 c2                	cmp    %al,%dl
    91fc:	74 08                	je     9206 <strcmp+0x40>
			return 0;
    91fe:	66 b8 00 00          	mov    $0x0,%ax
    9202:	00 00                	add    %al,(%eax)
    9204:	eb 63                	jmp    9269 <strcmp+0xa3>
		}
		i++;
    9206:	67 66 ff 45 fc       	incw   -0x4(%di)
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
	int i = 0;
	while(m1[i] != 0 && m2[i]!= 0){
    920b:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9210:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9215:	66 01 d0             	add    %dx,%ax
    9218:	67 8a 00             	mov    (%bx,%si),%al
    921b:	84 c0                	test   %al,%al
    921d:	74 14                	je     9233 <strcmp+0x6d>
    921f:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9224:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9229:	66 01 d0             	add    %dx,%ax
    922c:	67 8a 00             	mov    (%bx,%si),%al
    922f:	84 c0                	test   %al,%al
    9231:	75 a7                	jne    91da <strcmp+0x14>
		if(m1[i] != m2[i]){
			return 0;
		}
		i++;
	}
	if(m1[i] != 0 || m2[i] != 0){
    9233:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9238:	67 66 8b 45 08       	mov    0x8(%di),%ax
    923d:	66 01 d0             	add    %dx,%ax
    9240:	67 8a 00             	mov    (%bx,%si),%al
    9243:	84 c0                	test   %al,%al
    9245:	75 14                	jne    925b <strcmp+0x95>
    9247:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    924c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    9251:	66 01 d0             	add    %dx,%ax
    9254:	67 8a 00             	mov    (%bx,%si),%al
    9257:	84 c0                	test   %al,%al
    9259:	74 08                	je     9263 <strcmp+0x9d>
		return 0;
    925b:	66 b8 00 00          	mov    $0x0,%ax
    925f:	00 00                	add    %al,(%eax)
    9261:	eb 06                	jmp    9269 <strcmp+0xa3>
	}
	return 1;
    9263:	66 b8 01 00          	mov    $0x1,%ax
    9267:	00 00                	add    %al,(%eax)
}
    9269:	66 c9                	leavew 
    926b:	66 c3                	retw   

0000926d <strcpy>:
//====================================================
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
    926d:	66 55                	push   %bp
    926f:	66 89 e5             	mov    %sp,%bp
    9272:	66 83 ec 08          	sub    $0x8,%sp
	int len = strlen(src);
    9276:	67 66 ff 75 08       	pushw  0x8(%di)
    927b:	66 e8 a6 fd          	callw  9025 <print_next_line+0x27>
    927f:	ff                   	(bad)  
    9280:	ff 66 83             	jmp    *-0x7d(%esi)
    9283:	c4 04 67             	les    (%edi,%eiz,2),%eax
    9286:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	int i = 0;
    928a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9291:	00 00                	add    %al,(%eax)
	for(i = 0;i < len;i ++){
    9293:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    929a:	00 00                	add    %al,(%eax)
    929c:	eb 3b                	jmp    92d9 <strcpy+0x6c>
    	des[i] =  src[i];
    929e:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    92a3:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    92a8:	66 01 c2             	add    %ax,%dx
    92ab:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    92b0:	67 66 8b 45 08       	mov    0x8(%di),%ax
    92b5:	66 01 c8             	add    %cx,%ax
    92b8:	67 8a 00             	mov    (%bx,%si),%al
    92bb:	67 88 02             	mov    %al,(%bp,%si)
        des[i+1] = 0;
    92be:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    92c3:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    92c8:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    92cd:	66 01 d0             	add    %dx,%ax
    92d0:	67 c6 00 00          	movb   $0x0,(%bx,%si)
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
	int len = strlen(src);
	int i = 0;
	for(i = 0;i < len;i ++){
    92d4:	67 66 ff 45 fc       	incw   -0x4(%di)
    92d9:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    92de:	67 66 3b 45 f8       	cmp    -0x8(%di),%ax
    92e3:	7c b9                	jl     929e <strcpy+0x31>
    	des[i] =  src[i];
        des[i+1] = 0;
	}
    92e5:	66 c9                	leavew 
    92e7:	66 c3                	retw   

000092e9 <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
    92e9:	66 55                	push   %bp
    92eb:	66 89 e5             	mov    %sp,%bp
    92ee:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    92f2:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    92f7:	66 89 d0             	mov    %dx,%ax
    92fa:	66 c1 e0 02          	shl    $0x2,%ax
    92fe:	66 01 d0             	add    %dx,%ax
    9301:	66 c1 e0 04          	shl    $0x4,%ax
    9305:	66 89 c2             	mov    %ax,%dx
    9308:	67 66 8b 45 10       	mov    0x10(%di),%ax
    930d:	66 01 d0             	add    %dx,%ax
    9310:	66 01 c0             	add    %ax,%ax
    9313:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    9318:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    931f:	00 00                	add    %al,(%eax)
	int index = 0;
    9321:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    9328:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    932a:	eb 35                	jmp    9361 <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
    932c:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9331:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9336:	66 01 d0             	add    %dx,%ax
    9339:	67 8a 00             	mov    (%bx,%si),%al
    933c:	66 0f be c0          	movsbw %al,%ax
    9340:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9345:	67 66 ff 75 fc       	pushw  -0x4(%di)
    934a:	66 50                	push   %ax
    934c:	66 e8 db f0          	callw  842b <_clearscreen+0x7>
    9350:	ff                   	(bad)  
    9351:	ff 66 83             	jmp    *-0x7d(%esi)
    9354:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    9357:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    935b:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    9361:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9366:	67 66 8b 45 08       	mov    0x8(%di),%ax
    936b:	66 01 d0             	add    %dx,%ax
    936e:	67 8a 00             	mov    (%bx,%si),%al
    9371:	84 c0                	test   %al,%al
    9373:	75 b7                	jne    932c <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    9375:	90                   	nop
}
    9376:	66 c9                	leavew 
    9378:	66 c3                	retw   

0000937a <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    937a:	66 55                	push   %bp
    937c:	66 89 e5             	mov    %sp,%bp
    937f:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    9383:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    9388:	66 89 d0             	mov    %dx,%ax
    938b:	66 c1 e0 02          	shl    $0x2,%ax
    938f:	66 01 d0             	add    %dx,%ax
    9392:	66 c1 e0 04          	shl    $0x4,%ax
    9396:	66 89 c2             	mov    %ax,%dx
    9399:	67 66 8b 45 10       	mov    0x10(%di),%ax
    939e:	66 01 d0             	add    %dx,%ax
    93a1:	66 01 c0             	add    %ax,%ax
    93a4:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    93a9:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    93b0:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    93b2:	eb 35                	jmp    93e9 <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    93b4:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    93b9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    93be:	66 01 d0             	add    %dx,%ax
    93c1:	67 8a 00             	mov    (%bx,%si),%al
    93c4:	66 0f be c0          	movsbw %al,%ax
    93c8:	67 66 ff 75 14       	pushw  0x14(%di)
    93cd:	67 66 ff 75 fc       	pushw  -0x4(%di)
    93d2:	66 50                	push   %ax
    93d4:	66 e8 53 f0          	callw  842b <_clearscreen+0x7>
    93d8:	ff                   	(bad)  
    93d9:	ff 66 83             	jmp    *-0x7d(%esi)
    93dc:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    93df:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    93e3:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    93e9:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    93ee:	67 66 8b 45 08       	mov    0x8(%di),%ax
    93f3:	66 01 d0             	add    %dx,%ax
    93f6:	67 8a 00             	mov    (%bx,%si),%al
    93f9:	84 c0                	test   %al,%al
    93fb:	75 b7                	jne    93b4 <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    93fd:	90                   	nop
}
    93fe:	66 c9                	leavew 
    9400:	66 c3                	retw   

00009402 <sys_showline>:
void sys_showline(){
    9402:	66 55                	push   %bp
    9404:	66 89 e5             	mov    %sp,%bp
    9407:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
    940b:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
    9410:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
    9415:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
    941a:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
    941f:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
    9424:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
    9429:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
    942e:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    9435:	00 00                	add    %al,(%eax)
    int i = 0;
    9437:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    943e:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
    9440:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9447:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
    9449:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9450:	00 00                	add    %al,(%eax)
    9452:	eb 52                	jmp    94a6 <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
    9454:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9459:	66 89 d0             	mov    %dx,%ax
    945c:	66 c1 e0 03          	shl    $0x3,%ax
    9460:	66 01 d0             	add    %dx,%ax
    9463:	67 66 8d 14          	lea    (%si),%dx
    9467:	c5 00                	lds    (%eax),%eax
    9469:	00 00                	add    %al,(%eax)
    946b:	00 66 01             	add    %ah,0x1(%esi)
    946e:	d0 66 01             	shlb   0x1(%esi)
    9471:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
    9475:	45                   	inc    %ebp
    9476:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
    947c:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9481:	66 01 d0             	add    %dx,%ax
    9484:	67 8a 00             	mov    (%bx,%si),%al
    9487:	66 0f be c0          	movsbw %al,%ax
    948b:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9490:	67 66 ff 75 f0       	pushw  -0x10(%di)
    9495:	66 50                	push   %ax
    9497:	66 e8 90 ef          	callw  842b <_clearscreen+0x7>
    949b:	ff                   	(bad)  
    949c:	ff 66 83             	jmp    *-0x7d(%esi)
    949f:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
    94a2:	66 ff 45 fc          	incw   -0x4(%ebp)
    94a6:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
    94ac:	7e a6                	jle    9454 <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
    94ae:	66 c9                	leavew 
    94b0:	66 c3                	retw   

000094b2 <sys_printname>:

void sys_printname(){
    94b2:	66 55                	push   %bp
    94b4:	66 89 e5             	mov    %sp,%bp
    94b7:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
    94bb:	67 66 c7 45 fc 4c aa 	movw   $0xaa4c,-0x4(%di)
    94c2:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
    94c4:	67 66 c7 45 f8 90 aa 	movw   $0xaa90,-0x8(%di)
    94cb:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
    94cd:	67 66 c7 45 f4 d4 aa 	movw   $0xaad4,-0xc(%di)
    94d4:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
    94d6:	67 66 c7 45 f0 18 ab 	movw   $0xab18,-0x10(%di)
    94dd:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
    94df:	67 66 c7 45 ec 5c ab 	movw   $0xab5c,-0x14(%di)
    94e6:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
    94e8:	67 66 c7 45 e8 a0 ab 	movw   $0xaba0,-0x18(%di)
    94ef:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
    94f1:	67 66 c7 45 e4 e4 ab 	movw   $0xabe4,-0x1c(%di)
    94f8:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
    94fa:	66 6a 0b             	pushw  $0xb
    94fd:	66 6a 10             	pushw  $0x10
    9500:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9505:	66 e8 de fd          	callw  92e7 <strcpy+0x7a>
    9509:	ff                   	(bad)  
    950a:	ff 66 83             	jmp    *-0x7d(%esi)
    950d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
    9510:	6a 0b                	push   $0xb
    9512:	66 6a 11             	pushw  $0x11
    9515:	67 66 ff 75 f8       	pushw  -0x8(%di)
    951a:	66 e8 c9 fd          	callw  92e7 <strcpy+0x7a>
    951e:	ff                   	(bad)  
    951f:	ff 66 83             	jmp    *-0x7d(%esi)
    9522:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
    9525:	6a 0b                	push   $0xb
    9527:	66 6a 12             	pushw  $0x12
    952a:	67 66 ff 75 f4       	pushw  -0xc(%di)
    952f:	66 e8 b4 fd          	callw  92e7 <strcpy+0x7a>
    9533:	ff                   	(bad)  
    9534:	ff 66 83             	jmp    *-0x7d(%esi)
    9537:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
    953a:	6a 0b                	push   $0xb
    953c:	66 6a 13             	pushw  $0x13
    953f:	67 66 ff 75 f0       	pushw  -0x10(%di)
    9544:	66 e8 9f fd          	callw  92e7 <strcpy+0x7a>
    9548:	ff                   	(bad)  
    9549:	ff 66 83             	jmp    *-0x7d(%esi)
    954c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
    954f:	6a 0b                	push   $0xb
    9551:	66 6a 14             	pushw  $0x14
    9554:	67 66 ff 75 ec       	pushw  -0x14(%di)
    9559:	66 e8 8a fd          	callw  92e7 <strcpy+0x7a>
    955d:	ff                   	(bad)  
    955e:	ff 66 83             	jmp    *-0x7d(%esi)
    9561:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
    9564:	6a 0b                	push   $0xb
    9566:	66 6a 15             	pushw  $0x15
    9569:	67 66 ff 75 e8       	pushw  -0x18(%di)
    956e:	66 e8 75 fd          	callw  92e7 <strcpy+0x7a>
    9572:	ff                   	(bad)  
    9573:	ff 66 83             	jmp    *-0x7d(%esi)
    9576:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
    9579:	6a 0b                	push   $0xb
    957b:	66 6a 16             	pushw  $0x16
    957e:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    9583:	66 e8 60 fd          	callw  92e7 <strcpy+0x7a>
    9587:	ff                   	(bad)  
    9588:	ff 66 83             	jmp    *-0x7d(%esi)
    958b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    958e:	c9                   	leave  
    958f:	66 c3                	retw   

00009591 <sys_printpoem>:
void sys_printpoem(){
    9591:	66 55                	push   %bp
    9593:	66 89 e5             	mov    %sp,%bp
    9596:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
    959a:	67 66 c7 45 f8 28 ac 	movw   $0xac28,-0x8(%di)
    95a1:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
    95a3:	67 66 c7 45 f4 3a ac 	movw   $0xac3a,-0xc(%di)
    95aa:	00 00                	add    %al,(%eax)
    int i = 1;
    95ac:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    95b3:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
    95b5:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    95bc:	00 00                	add    %al,(%eax)
    95be:	eb 4b                	jmp    960b <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
    95c0:	67 66 ff 75 fc       	pushw  -0x4(%di)
    95c5:	66 6a 0a             	pushw  $0xa
    95c8:	66 6a 0f             	pushw  $0xf
    95cb:	67 66 ff 75 f8       	pushw  -0x8(%di)
    95d0:	66 e8 a4 fd          	callw  9378 <sys_print_for_heart+0x8f>
    95d4:	ff                   	(bad)  
    95d5:	ff 66 83             	jmp    *-0x7d(%esi)
    95d8:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
    95da:	67 66 ff 75 fc       	pushw  -0x4(%di)
    95df:	66 6a 0a             	pushw  $0xa
    95e2:	66 6a 10             	pushw  $0x10
    95e5:	67 66 ff 75 f4       	pushw  -0xc(%di)
    95ea:	66 e8 8a fd          	callw  9378 <sys_print_for_heart+0x8f>
    95ee:	ff                   	(bad)  
    95ef:	ff 66 83             	jmp    *-0x7d(%esi)
    95f2:	c4 10                	les    (%eax),%edx
        int j = 0;
    95f4:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    95fb:	00 00                	add    %al,(%eax)
        int k = 0;
    95fd:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    9604:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
    9606:	67 66 ff 45 fc       	incw   -0x4(%di)
    960b:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    9611:	7e ad                	jle    95c0 <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
    9613:	66 c9                	leavew 
    9615:	66 c3                	retw   

00009617 <sys_printheart>:
void sys_printheart(){
    9617:	66 55                	push   %bp
    9619:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
    961c:	66 6a 28             	pushw  $0x28
    961f:	66 6a 00             	pushw  $0x0
    9622:	66 68 43 ac          	pushw  $0xac43
    9626:	00 00                	add    %al,(%eax)
    9628:	66 e8 bb fc          	callw  92e7 <strcpy+0x7a>
    962c:	ff                   	(bad)  
    962d:	ff 66 83             	jmp    *-0x7d(%esi)
    9630:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
    9633:	6a 28                	push   $0x28
    9635:	66 6a 01             	pushw  $0x1
    9638:	66 68 5b ac          	pushw  $0xac5b
    963c:	00 00                	add    %al,(%eax)
    963e:	66 e8 a5 fc          	callw  92e7 <strcpy+0x7a>
    9642:	ff                   	(bad)  
    9643:	ff 66 83             	jmp    *-0x7d(%esi)
    9646:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
    9649:	6a 28                	push   $0x28
    964b:	66 6a 02             	pushw  $0x2
    964e:	66 68 74 ac          	pushw  $0xac74
    9652:	00 00                	add    %al,(%eax)
    9654:	66 e8 8f fc          	callw  92e7 <strcpy+0x7a>
    9658:	ff                   	(bad)  
    9659:	ff 66 83             	jmp    *-0x7d(%esi)
    965c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
    965f:	6a 28                	push   $0x28
    9661:	66 6a 03             	pushw  $0x3
    9664:	66 68 8f ac          	pushw  $0xac8f
    9668:	00 00                	add    %al,(%eax)
    966a:	66 e8 79 fc          	callw  92e7 <strcpy+0x7a>
    966e:	ff                   	(bad)  
    966f:	ff 66 83             	jmp    *-0x7d(%esi)
    9672:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
    9675:	6a 28                	push   $0x28
    9677:	66 6a 04             	pushw  $0x4
    967a:	66 68 a8 ac          	pushw  $0xaca8
    967e:	00 00                	add    %al,(%eax)
    9680:	66 e8 63 fc          	callw  92e7 <strcpy+0x7a>
    9684:	ff                   	(bad)  
    9685:	ff 66 83             	jmp    *-0x7d(%esi)
    9688:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
    968b:	6a 28                	push   $0x28
    968d:	66 6a 05             	pushw  $0x5
    9690:	66 68 c0 ac          	pushw  $0xacc0
    9694:	00 00                	add    %al,(%eax)
    9696:	66 e8 4d fc          	callw  92e7 <strcpy+0x7a>
    969a:	ff                   	(bad)  
    969b:	ff 66 83             	jmp    *-0x7d(%esi)
    969e:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
    96a1:	6a 28                	push   $0x28
    96a3:	66 6a 06             	pushw  $0x6
    96a6:	66 68 d7 ac          	pushw  $0xacd7
    96aa:	00 00                	add    %al,(%eax)
    96ac:	66 e8 37 fc          	callw  92e7 <strcpy+0x7a>
    96b0:	ff                   	(bad)  
    96b1:	ff 66 83             	jmp    *-0x7d(%esi)
    96b4:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
    96b7:	6a 28                	push   $0x28
    96b9:	66 6a 07             	pushw  $0x7
    96bc:	66 68 ed ac          	pushw  $0xaced
    96c0:	00 00                	add    %al,(%eax)
    96c2:	66 e8 21 fc          	callw  92e7 <strcpy+0x7a>
    96c6:	ff                   	(bad)  
    96c7:	ff 66 83             	jmp    *-0x7d(%esi)
    96ca:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    96cd:	c9                   	leave  
    96ce:	66 c3                	retw   

000096d0 <Get_Hours>:
#include "time.h"
#include "stdio.h"

int Get_Hours(){
    96d0:	66 55                	push   %bp
    96d2:	66 89 e5             	mov    %sp,%bp
    96d5:	66 53                	push   %bx
    96d7:	66 83 ec 04          	sub    $0x4,%sp
    int hours = _Get_Hours_1();
    96db:	66 e8 9d f6          	callw  8d7c <RTC_Timer+0xa3>
    96df:	ff                   	(bad)  
    96e0:	ff 67 66             	jmp    *0x66(%edi)
    96e3:	89 45 f8             	mov    %eax,-0x8(%ebp)
    hours = hours * 10 + _Get_Hours_2();
    96e6:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    96eb:	66 89 d0             	mov    %dx,%ax
    96ee:	66 c1 e0 02          	shl    $0x2,%ax
    96f2:	66 01 d0             	add    %dx,%ax
    96f5:	66 01 c0             	add    %ax,%ax
    96f8:	66 89 c3             	mov    %ax,%bx
    96fb:	66 e8 9e f6          	callw  8d9d <_Get_Hours_1+0x1f>
    96ff:	ff                   	(bad)  
    9700:	ff 66 01             	jmp    *0x1(%esi)
    9703:	d8 67 66             	fsubs  0x66(%edi)
    9706:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return hours;
    9709:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
   // printsint(hours);
}
    970e:	66 83 c4 04          	add    $0x4,%sp
    9712:	66 5b                	pop    %bx
    9714:	66 5d                	pop    %bp
    9716:	66 c3                	retw   

00009718 <Get_Minutes>:
int Get_Minutes(){
    9718:	66 55                	push   %bp
    971a:	66 89 e5             	mov    %sp,%bp
    971d:	66 53                	push   %bx
    971f:	66 83 ec 04          	sub    $0x4,%sp
    int minutes = _Get_Minutes_1();
    9723:	66 e8 93 f6          	callw  8dba <_Get_Hours_2+0x1b>
    9727:	ff                   	(bad)  
    9728:	ff 67 66             	jmp    *0x66(%edi)
    972b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    minutes = minutes * 10 + _Get_Minutes_2();
    972e:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9733:	66 89 d0             	mov    %dx,%ax
    9736:	66 c1 e0 02          	shl    $0x2,%ax
    973a:	66 01 d0             	add    %dx,%ax
    973d:	66 01 c0             	add    %ax,%ax
    9740:	66 89 c3             	mov    %ax,%bx
    9743:	66 e8 94 f6          	callw  8ddb <_Get_Minutes_1+0x1f>
    9747:	ff                   	(bad)  
    9748:	ff 66 01             	jmp    *0x1(%esi)
    974b:	d8 67 66             	fsubs  0x66(%edi)
    974e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return minutes;
    9751:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    9756:	66 83 c4 04          	add    $0x4,%sp
    975a:	66 5b                	pop    %bx
    975c:	66 5d                	pop    %bp
    975e:	66 c3                	retw   

00009760 <printTime>:
void printTime(){
    9760:	66 55                	push   %bp
    9762:	66 89 e5             	mov    %sp,%bp
    9765:	66 83 ec 08          	sub    $0x8,%sp
    int hour = Get_Hours();
    9769:	66 e8 61 ff          	callw  96ce <sys_printheart+0xb7>
    976d:	ff                   	(bad)  
    976e:	ff 67 66             	jmp    *0x66(%edi)
    9771:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int minute = Get_Minutes();
    9774:	66 e8 9e ff          	callw  9716 <Get_Hours+0x46>
    9778:	ff                   	(bad)  
    9779:	ff 67 66             	jmp    *0x66(%edi)
    977c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    printsint(hour);
    977f:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9784:	66 e8 7c f7          	callw  8f04 <printc+0x27>
    9788:	ff                   	(bad)  
    9789:	ff 66 83             	jmp    *-0x7d(%esi)
    978c:	c4 04 66             	les    (%esi,%eiz,2),%eax
    prints("h : ");
    978f:	68 02 ad 00 00       	push   $0xad02
    9794:	66 e8 f1 f6          	callw  8e89 <print+0x8f>
    9798:	ff                   	(bad)  
    9799:	ff 66 83             	jmp    *-0x7d(%esi)
    979c:	c4 04 67             	les    (%edi,%eiz,2),%eax
    printsint(minute);
    979f:	66 ff 75 f8          	pushw  -0x8(%ebp)
    97a3:	66 e8 5d f7          	callw  8f04 <printc+0x27>
    97a7:	ff                   	(bad)  
    97a8:	ff 66 83             	jmp    *-0x7d(%esi)
    97ab:	c4 04 66             	les    (%esi,%eiz,2),%eax
    printc('m');
    97ae:	6a 6d                	push   $0x6d
    97b0:	66 e8 27 f7          	callw  8edb <prints+0x50>
    97b4:	ff                   	(bad)  
    97b5:	ff 66 83             	jmp    *-0x7d(%esi)
    97b8:	c4 04 66             	les    (%esi,%eiz,2),%eax

    97bb:	c9                   	leave  
    97bc:	66 c3                	retw   

000097be <fork>:
#include "fork.h"
#include "use.h"
#include "schedule.h"
int fork(){
    97be:	66 55                	push   %bp
    97c0:	66 89 e5             	mov    %sp,%bp
    97c3:	66 83 ec 04          	sub    $0x4,%sp
    int a = _fork_user();
    97c7:	66 e8 44 ed          	callw  850f <_Schedule_once+0x9>
    97cb:	ff                   	(bad)  
    97cc:	ff 67 66             	jmp    *0x66(%edi)
    97cf:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return a;
    97d2:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    97d7:	66 c9                	leavew 
    97d9:	66 c3                	retw   

000097db <wait>:
char wait(){
    97db:	66 55                	push   %bp
    97dd:	66 89 e5             	mov    %sp,%bp
    97e0:	66 83 ec 08          	sub    $0x8,%sp
    int temp_ch = _wait();
    97e4:	66 e8 3f ed          	callw  8527 <_Schedule+0xb>
    97e8:	ff                   	(bad)  
    97e9:	ff 67 66             	jmp    *0x66(%edi)
    97ec:	89 45 fc             	mov    %eax,-0x4(%ebp)
    char ch = '0' + temp_ch;
    97ef:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    97f4:	66 83 c0 30          	add    $0x30,%ax
    97f8:	67 88 45 fb          	mov    %al,-0x5(%di)
    return ch;
    97fc:	67 8a 45 fb          	mov    -0x5(%di),%al
    //_wait();
}
    9800:	66 c9                	leavew 
    9802:	66 c3                	retw   

00009804 <exit>:
void exit(char ch){
    9804:	66 55                	push   %bp
    9806:	66 89 e5             	mov    %sp,%bp
    9809:	66 83 ec 04          	sub    $0x4,%sp
    980d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9812:	67 88 45 fc          	mov    %al,-0x4(%di)
    _exit(ch);
    9816:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    981c:	66 50                	push   %ax
    981e:	66 e8 10 ed          	callw  8532 <_wait+0x9>
    9822:	ff                   	(bad)  
    9823:	ff 66 83             	jmp    *-0x7d(%esi)
    9826:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    9829:	c9                   	leave  
    982a:	66 c3                	retw   

0000982c <GetSem>:
int GetSem(int value){
    982c:	66 55                	push   %bp
    982e:	66 89 e5             	mov    %sp,%bp
    9831:	66 83 ec 04          	sub    $0x4,%sp
    int sema = _GetSem(value);
    9835:	67 66 ff 75 08       	pushw  0x8(%di)
    983a:	66 e8 06 ed          	callw  8544 <_exit+0x10>
    983e:	ff                   	(bad)  
    983f:	ff 66 83             	jmp    *-0x7d(%esi)
    9842:	c4 04 67             	les    (%edi,%eiz,2),%eax
    9845:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return sema;
    9849:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
}
    984e:	66 c9                	leavew 
    9850:	66 c3                	retw   

00009852 <SemFree>:
void SemFree(int value){
    9852:	66 55                	push   %bp
    9854:	66 89 e5             	mov    %sp,%bp
    _FreeSem(value);
    9857:	67 66 ff 75 08       	pushw  0x8(%di)
    985c:	66 e8 f6 ec          	callw  8556 <_GetSem+0x10>
    9860:	ff                   	(bad)  
    9861:	ff 66 83             	jmp    *-0x7d(%esi)
    9864:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    9867:	c9                   	leave  
    9868:	66 c3                	retw   

0000986a <P>:
void P(int s){   
    986a:	66 55                	push   %bp
    986c:	66 89 e5             	mov    %sp,%bp
    _Pr(s);
    986f:	67 66 ff 75 08       	pushw  0x8(%di)
    9874:	66 e8 f0 ec          	callw  8568 <_FreeSem+0x10>
    9878:	ff                   	(bad)  
    9879:	ff 66 83             	jmp    *-0x7d(%esi)
    987c:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    987f:	c9                   	leave  
    9880:	66 c3                	retw   

00009882 <V>:
void V(int s){
    9882:	66 55                	push   %bp
    9884:	66 89 e5             	mov    %sp,%bp
    _Vr(s);
    9887:	67 66 ff 75 08       	pushw  0x8(%di)
    988c:	66 e8 ea ec          	callw  857a <_Pr+0x10>
    9890:	ff                   	(bad)  
    9891:	ff 66 83             	jmp    *-0x7d(%esi)
    9894:	c4 04 66             	les    (%esi,%eiz,2),%eax
    9897:	c9                   	leave  
    9898:	66 c3                	retw   

0000989a <initial_PCB>:
#include "schedule.h"
#include "use.h"

void initial_PCB(int index){
    989a:	66 55                	push   %bp
    989c:	66 89 e5             	mov    %sp,%bp
    PCB_list[index ].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    989f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    98a4:	66 40                	inc    %ax
    98a6:	66 c1 e0 0c          	shl    $0xc,%ax
    98aa:	66 89 c2             	mov    %ax,%dx
    98ad:	67 66 8b 45 08       	mov    0x8(%di),%ax
    98b2:	66 c1 e0 02          	shl    $0x2,%ax
    98b6:	66 89 c1             	mov    %ax,%cx
    98b9:	66 c1 e1 04          	shl    $0x4,%cx
    98bd:	66 01 c8             	add    %cx,%ax
    98c0:	66 05 d0 c5          	add    $0xc5d0,%ax
    98c4:	00 00                	add    %al,(%eax)
    98c6:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    98ca:	67 66 8b 45 08       	mov    0x8(%di),%ax
    98cf:	66 40                	inc    %ax
    98d1:	66 c1 e0 0c          	shl    $0xc,%ax
    98d5:	66 89 c2             	mov    %ax,%dx
    98d8:	67 66 8b 45 08       	mov    0x8(%di),%ax
    98dd:	66 c1 e0 02          	shl    $0x2,%ax
    98e1:	66 89 c1             	mov    %ax,%cx
    98e4:	66 c1 e1 04          	shl    $0x4,%cx
    98e8:	66 01 c8             	add    %cx,%ax
    98eb:	66 05 c0 c5          	add    $0xc5c0,%ax
    98ef:	00 00                	add    %al,(%eax)
    98f1:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index ].ss = 0x2000+0x1000*(index - 1);
    98f5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    98fa:	66 40                	inc    %ax
    98fc:	66 c1 e0 0c          	shl    $0xc,%ax
    9900:	66 89 c2             	mov    %ax,%dx
    9903:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9908:	66 c1 e0 02          	shl    $0x2,%ax
    990c:	66 89 c1             	mov    %ax,%cx
    990f:	66 c1 e1 04          	shl    $0x4,%cx
    9913:	66 01 c8             	add    %cx,%ax
    9916:	66 05 c0 c5          	add    $0xc5c0,%ax
    991a:	00 00                	add    %al,(%eax)
    991c:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    PCB_list[index ].esp = 0x100;
    9921:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9926:	66 c1 e0 02          	shl    $0x2,%ax
    992a:	66 89 c2             	mov    %ax,%dx
    992d:	66 c1 e2 04          	shl    $0x4,%dx
    9931:	66 01 d0             	add    %dx,%ax
    9934:	66 05 c0 c5          	add    $0xc5c0,%ax
    9938:	00 00                	add    %al,(%eax)
    993a:	67 66 c7 40 08 00 01 	movw   $0x100,0x8(%bx,%si)
    9941:	00 00                	add    %al,(%eax)
    PCB_list[index ].ip = 0x100;
    9943:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9948:	66 c1 e0 02          	shl    $0x2,%ax
    994c:	66 89 c2             	mov    %ax,%dx
    994f:	66 c1 e2 04          	shl    $0x4,%dx
    9953:	66 01 d0             	add    %dx,%ax
    9956:	66 05 c0 c5          	add    $0xc5c0,%ax
    995a:	00 00                	add    %al,(%eax)
    995c:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    9963:	00 00                	add    %al,(%eax)
    PCB_list[index ].prg_status = READY;
    9965:	67 66 8b 45 08       	mov    0x8(%di),%ax
    996a:	66 c1 e0 02          	shl    $0x2,%ax
    996e:	66 89 c2             	mov    %ax,%dx
    9971:	66 c1 e2 04          	shl    $0x4,%dx
    9975:	66 01 d0             	add    %dx,%ax
    9978:	66 05 d0 c5          	add    $0xc5d0,%ax
    997c:	00 00                	add    %al,(%eax)
    997e:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    9985:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    9987:	67 66 ff 75 08       	pushw  0x8(%di)
    998c:	66 68 80 db          	pushw  $0xdb80
    9990:	00 00                	add    %al,(%eax)
    9992:	66 e8 89 09          	callw  a31f <size+0x11>
    9996:	00 00                	add    %al,(%eax)
    9998:	66 83 c4 08          	add    $0x8,%sp
    PCB_list[index ].eflags = 512;
    999c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    99a1:	66 c1 e0 02          	shl    $0x2,%ax
    99a5:	66 89 c2             	mov    %ax,%dx
    99a8:	66 c1 e2 04          	shl    $0x4,%dx
    99ac:	66 01 d0             	add    %dx,%ax
    99af:	66 05 d0 c5          	add    $0xc5d0,%ax
    99b3:	00 00                	add    %al,(%eax)
    99b5:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    99bc:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    99be:	67 66 8b 45 08       	mov    0x8(%di),%ax
    99c3:	66 c1 e0 02          	shl    $0x2,%ax
    99c7:	66 89 c2             	mov    %ax,%dx
    99ca:	66 c1 e2 04          	shl    $0x4,%dx
    99ce:	66 01 d0             	add    %dx,%ax
    99d1:	67 66 8d 90 d0 c5    	lea    -0x3a30(%bx,%si),%dx
    99d7:	00 00                	add    %al,(%eax)
    99d9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    99de:	67 66 89 42 0c       	mov    %ax,0xc(%bp,%si)
    PCB_list[index ].fid = 0;
    99e3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    99e8:	66 c1 e0 02          	shl    $0x2,%ax
    99ec:	66 89 c2             	mov    %ax,%dx
    99ef:	66 c1 e2 04          	shl    $0x4,%dx
    99f3:	66 01 d0             	add    %dx,%ax
    99f6:	66 05 e0 c5          	add    $0xc5e0,%ax
    99fa:	00 00                	add    %al,(%eax)
    99fc:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    9a02:	00 00                	add    %al,(%eax)
}
    9a04:	66 c9                	leavew 
    9a06:	66 c3                	retw   

00009a08 <Set_PCB>:
void Set_PCB(){
    9a08:	66 55                	push   %bp
    9a0a:	66 89 e5             	mov    %sp,%bp
    9a0d:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    9a11:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9a18:	00 00                	add    %al,(%eax)
    for(i = 0;i < PCB_NUMMER;i ++){
    9a1a:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9a21:	00 00                	add    %al,(%eax)
    9a23:	eb 27                	jmp    9a4c <Set_PCB+0x44>
        PCB_list[i].prg_status = EXIT;
    9a25:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9a2a:	66 c1 e0 02          	shl    $0x2,%ax
    9a2e:	66 89 c2             	mov    %ax,%dx
    9a31:	66 c1 e2 04          	shl    $0x4,%dx
    9a35:	66 01 d0             	add    %dx,%ax
    9a38:	66 05 d0 c5          	add    $0xc5d0,%ax
    9a3c:	00 00                	add    %al,(%eax)
    9a3e:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    9a45:	00 00                	add    %al,(%eax)
    PCB_list[index ].id = index;
    PCB_list[index ].fid = 0;
}
void Set_PCB(){
    int i = 0;
    for(i = 0;i < PCB_NUMMER;i ++){
    9a47:	67 66 ff 45 fc       	incw   -0x4(%di)
    9a4c:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    9a52:	7e d1                	jle    9a25 <Set_PCB+0x1d>
        PCB_list[i].prg_status = EXIT;
    }
}
    9a54:	66 c9                	leavew 
    9a56:	66 c3                	retw   

00009a58 <sys_schedule>:
int sch_index;
int current_index ;
void sys_schedule(){
    9a58:	66 55                	push   %bp
    9a5a:	66 89 e5             	mov    %sp,%bp
    int i,j;
    if(isempty(&readyqueue) != 1){
    9a5d:	66 68 80 db          	pushw  $0xdb80
    9a61:	00 00                	add    %al,(%eax)
    9a63:	66 e8 88 08          	callw  a2ef <stack_copy+0x35>
    9a67:	00 00                	add    %al,(%eax)
    9a69:	66 83 c4 04          	add    $0x4,%sp
    9a6d:	66 83 f8 01          	cmp    $0x1,%ax
    9a71:	0f 84 e0 00 66 a1    	je     a1669b57 <_end+0xa165bf23>
        current_index = _CurrentProg - PCB_list;
    9a77:	f0 ca 66 89          	lock lret $0x8966
    9a7b:	c2 66 b8             	ret    $0xb866
    9a7e:	a0 c5 00 00 66       	mov    0x660000c5,%al
    9a83:	29 c2                	sub    %eax,%edx
    9a85:	66 89 d0             	mov    %dx,%ax
    9a88:	66 c1 f8 02          	sar    $0x2,%ax
    9a8c:	66 89 c2             	mov    %ax,%dx
    9a8f:	66 89 d0             	mov    %dx,%ax
    9a92:	66 01 c0             	add    %ax,%ax
    9a95:	66 01 d0             	add    %dx,%ax
    9a98:	67 66 8d 14          	lea    (%si),%dx
    9a9c:	85 00                	test   %eax,(%eax)
    9a9e:	00 00                	add    %al,(%eax)
    9aa0:	00 66 01             	add    %ah,0x1(%esi)
    9aa3:	d0 66 89             	shlb   -0x77(%esi)
    9aa6:	c2 66 c1             	ret    $0xc166
    9aa9:	e2 08                	loop   9ab3 <sys_schedule+0x5b>
    9aab:	66 01 d0             	add    %dx,%ax
    9aae:	66 89 c2             	mov    %ax,%dx
    9ab1:	66 c1 e2 10          	shl    $0x10,%dx
    9ab5:	66 01 d0             	add    %dx,%ax
    9ab8:	66 f7 d8             	neg    %ax
    9abb:	66 a3 28 dc 66 a1    	mov    %ax,0xa166dc28
        if(_CurrentProg -> prg_status == RUN){
    9ac1:	f0 ca 67 66          	lock lret $0x6667
    9ac5:	8b 40 38             	mov    0x38(%eax),%eax
    9ac8:	66 83 f8 01          	cmp    $0x1,%ax
    9acc:	75 23                	jne    9af1 <sys_schedule+0x99>
            _CurrentProg -> prg_status = READY;
    9ace:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    9ad4:	c7 40 38 03 00 00 00 	movl   $0x3,0x38(%eax)
            enqueue(&readyqueue,current_index);
    9adb:	66 a1 28 dc 66 50    	mov    0x5066dc28,%ax
    9ae1:	66 68 80 db          	pushw  $0xdb80
    9ae5:	00 00                	add    %al,(%eax)
    9ae7:	66 e8 34 08          	callw  a31f <size+0x11>
    9aeb:	00 00                	add    %al,(%eax)
    9aed:	66 83 c4 08          	add    $0x8,%sp
        }
        dequeue(&readyqueue,&sch_index);
    9af1:	66 68 14 dc          	pushw  $0xdc14
    9af5:	00 00                	add    %al,(%eax)
    9af7:	66 68 80 db          	pushw  $0xdb80
    9afb:	00 00                	add    %al,(%eax)
    9afd:	66 e8 8a 08          	callw  a38b <enqueue+0x6a>
    9b01:	00 00                	add    %al,(%eax)
    9b03:	66 83 c4 08          	add    $0x8,%sp
        if(PCB_list[sch_index].prg_status == READY){
    9b07:	66 a1 14 dc 66 c1    	mov    0xc166dc14,%ax
    9b0d:	e0 02                	loopne 9b11 <sys_schedule+0xb9>
    9b0f:	66 89 c2             	mov    %ax,%dx
    9b12:	66 c1 e2 04          	shl    $0x4,%dx
    9b16:	66 01 d0             	add    %dx,%ax
    9b19:	66 05 d0 c5          	add    $0xc5d0,%ax
    9b1d:	00 00                	add    %al,(%eax)
    9b1f:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    9b24:	66 83 f8 03          	cmp    $0x3,%ax
    9b28:	75 2b                	jne    9b55 <sys_schedule+0xfd>
            _CurrentProg = PCB_list + sch_index;
    9b2a:	66 a1 14 dc 66 c1    	mov    0xc166dc14,%ax
    9b30:	e0 02                	loopne 9b34 <sys_schedule+0xdc>
    9b32:	66 89 c2             	mov    %ax,%dx
    9b35:	66 c1 e2 04          	shl    $0x4,%dx
    9b39:	66 01 d0             	add    %dx,%ax
    9b3c:	66 05 a0 c5          	add    $0xc5a0,%ax
    9b40:	00 00                	add    %al,(%eax)
    9b42:	66 a3 f0 ca 66 a1    	mov    %ax,0xa166caf0
            _CurrentProg -> prg_status = RUN;
    9b48:	f0 ca 67 66          	lock lret $0x6667
    9b4c:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
            return;
    9b53:	eb 0a                	jmp    9b5f <sys_schedule+0x107>
        }
    }
    _CurrentProg = PCB_list ;
    9b55:	66 c7 06 f0 ca       	movw   $0xcaf0,(%esi)
    9b5a:	a0 c5 00 00 90       	mov    0x900000c5,%al
    return;
    
}
    9b5f:	66 c9                	leavew 
    9b61:	66 c3                	retw   

00009b63 <sys_exit>:
void sys_exit(){
    9b63:	66 55                	push   %bp
    9b65:	66 89 e5             	mov    %sp,%bp
    9b68:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    9b6c:	fa                   	cli    
    int index = _CurrentProg - PCB_list;
    9b6d:	66 a1 f0 ca 66 89    	mov    0x8966caf0,%ax
    9b73:	c2 66 b8             	ret    $0xb866
    9b76:	a0 c5 00 00 66       	mov    0x660000c5,%al
    9b7b:	29 c2                	sub    %eax,%edx
    9b7d:	66 89 d0             	mov    %dx,%ax
    9b80:	66 c1 f8 02          	sar    $0x2,%ax
    9b84:	66 89 c2             	mov    %ax,%dx
    9b87:	66 89 d0             	mov    %dx,%ax
    9b8a:	66 01 c0             	add    %ax,%ax
    9b8d:	66 01 d0             	add    %dx,%ax
    9b90:	67 66 8d 14          	lea    (%si),%dx
    9b94:	85 00                	test   %eax,(%eax)
    9b96:	00 00                	add    %al,(%eax)
    9b98:	00 66 01             	add    %ah,0x1(%esi)
    9b9b:	d0 66 89             	shlb   -0x77(%esi)
    9b9e:	c2 66 c1             	ret    $0xc166
    9ba1:	e2 08                	loop   9bab <sys_exit+0x48>
    9ba3:	66 01 d0             	add    %dx,%ax
    9ba6:	66 89 c2             	mov    %ax,%dx
    9ba9:	66 c1 e2 10          	shl    $0x10,%dx
    9bad:	66 01 d0             	add    %dx,%ax
    9bb0:	66 f7 d8             	neg    %ax
    9bb3:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    rmele(&readyqueue,index);
    9bb8:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9bbd:	66 68 80 db          	pushw  $0xdb80
    9bc1:	00 00                	add    %al,(%eax)
    9bc3:	66 e8 68 08          	callw  a42f <init_queue+0x30>
    9bc7:	00 00                	add    %al,(%eax)
    9bc9:	66 83 c4 08          	add    $0x8,%sp
    _CurrentProg -> prg_status = EXIT;
    9bcd:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    9bd3:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    __asm__("sti\n");
    9bda:	fb                   	sti    
}
    9bdb:	66 c9                	leavew 
    9bdd:	66 c3                	retw   

00009bdf <sys_bolocked>:



int queuesize,tmp;//一定要是全局，否则dequeue无法将tmp修改
void sys_bolocked(int index){
    9bdf:	66 55                	push   %bp
    9be1:	66 89 e5             	mov    %sp,%bp
    9be4:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    9be8:	fa                   	cli    
    PCB_list[index].prg_status = BLOCKED;
    9be9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9bee:	66 c1 e0 02          	shl    $0x2,%ax
    9bf2:	66 89 c2             	mov    %ax,%dx
    9bf5:	66 c1 e2 04          	shl    $0x4,%dx
    9bf9:	66 01 d0             	add    %dx,%ax
    9bfc:	66 05 d0 c5          	add    $0xc5d0,%ax
    9c00:	00 00                	add    %al,(%eax)
    9c02:	67 66 c7 40 08 02 00 	movw   $0x2,0x8(%bx,%si)
    9c09:	00 00                	add    %al,(%eax)
    enqueue(&blockqueue,index);
    9c0b:	67 66 ff 75 08       	pushw  0x8(%di)
    9c10:	66 68 00 c5          	pushw  $0xc500
    9c14:	00 00                	add    %al,(%eax)
    9c16:	66 e8 05 07          	callw  a31f <size+0x11>
    9c1a:	00 00                	add    %al,(%eax)
    9c1c:	66 83 c4 08          	add    $0x8,%sp
    queuesize = size(&readyqueue);
    9c20:	66 68 80 db          	pushw  $0xdb80
    9c24:	00 00                	add    %al,(%eax)
    9c26:	66 e8 e2 06          	callw  a30c <isempty+0x1b>
    9c2a:	00 00                	add    %al,(%eax)
    9c2c:	66 83 c4 04          	add    $0x4,%sp
    9c30:	66 a3 0c dc 67 66    	mov    %ax,0x6667dc0c
    int i = 0;
    9c36:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    9c3d:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9c44:	00 00                	add    %al,(%eax)
    9c46:	eb 3c                	jmp    9c84 <sys_bolocked+0xa5>
        dequeue(&readyqueue,&tmp);
    9c48:	66 68 08 dc          	pushw  $0xdc08
    9c4c:	00 00                	add    %al,(%eax)
    9c4e:	66 68 80 db          	pushw  $0xdb80
    9c52:	00 00                	add    %al,(%eax)
    9c54:	66 e8 33 07          	callw  a38b <enqueue+0x6a>
    9c58:	00 00                	add    %al,(%eax)
    9c5a:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    9c5e:	66 a1 08 dc 67 66    	mov    0x6667dc08,%ax
    9c64:	39 45 08             	cmp    %eax,0x8(%ebp)
    9c67:	74 16                	je     9c7f <sys_bolocked+0xa0>
            enqueue(&readyqueue,tmp);
    9c69:	66 a1 08 dc 66 50    	mov    0x5066dc08,%ax
    9c6f:	66 68 80 db          	pushw  $0xdb80
    9c73:	00 00                	add    %al,(%eax)
    9c75:	66 e8 a6 06          	callw  a31f <size+0x11>
    9c79:	00 00                	add    %al,(%eax)
    9c7b:	66 83 c4 08          	add    $0x8,%sp
    __asm__("cli\n");
    PCB_list[index].prg_status = BLOCKED;
    enqueue(&blockqueue,index);
    queuesize = size(&readyqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    9c7f:	67 66 ff 45 fc       	incw   -0x4(%di)
    9c84:	66 a1 0c dc 67 66    	mov    0x6667dc0c,%ax
    9c8a:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    9c8d:	7c b9                	jl     9c48 <sys_bolocked+0x69>
        dequeue(&readyqueue,&tmp);
        if(index != tmp){
            enqueue(&readyqueue,tmp);
        }
    }
    __asm__("sti\n");
    9c8f:	fb                   	sti    
}
    9c90:	66 c9                	leavew 
    9c92:	66 c3                	retw   

00009c94 <sys_wakeup>:
void sys_wakeup(int index){
    9c94:	66 55                	push   %bp
    9c96:	66 89 e5             	mov    %sp,%bp
    9c99:	66 83 ec 04          	sub    $0x4,%sp
    __asm__("cli\n");
    9c9d:	fa                   	cli    
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    9c9e:	66 68 00 c5          	pushw  $0xc500
    9ca2:	00 00                	add    %al,(%eax)
    9ca4:	66 e8 64 06          	callw  a30c <isempty+0x1b>
    9ca8:	00 00                	add    %al,(%eax)
    9caa:	66 83 c4 04          	add    $0x4,%sp
    9cae:	66 a3 0c dc 67 66    	mov    %ax,0x6667dc0c
    int i = 0;
    9cb4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for(i = 0;i < queuesize;i ++){
    9cbb:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9cc2:	00 00                	add    %al,(%eax)
    9cc4:	eb 3c                	jmp    9d02 <sys_wakeup+0x6e>
        dequeue(&blockqueue,&tmp);
    9cc6:	66 68 08 dc          	pushw  $0xdc08
    9cca:	00 00                	add    %al,(%eax)
    9ccc:	66 68 00 c5          	pushw  $0xc500
    9cd0:	00 00                	add    %al,(%eax)
    9cd2:	66 e8 b5 06          	callw  a38b <enqueue+0x6a>
    9cd6:	00 00                	add    %al,(%eax)
    9cd8:	66 83 c4 08          	add    $0x8,%sp
        if(index != tmp){
    9cdc:	66 a1 08 dc 67 66    	mov    0x6667dc08,%ax
    9ce2:	39 45 08             	cmp    %eax,0x8(%ebp)
    9ce5:	74 16                	je     9cfd <sys_wakeup+0x69>
            enqueue(&blockqueue,tmp);
    9ce7:	66 a1 08 dc 66 50    	mov    0x5066dc08,%ax
    9ced:	66 68 00 c5          	pushw  $0xc500
    9cf1:	00 00                	add    %al,(%eax)
    9cf3:	66 e8 28 06          	callw  a31f <size+0x11>
    9cf7:	00 00                	add    %al,(%eax)
    9cf9:	66 83 c4 08          	add    $0x8,%sp
void sys_wakeup(int index){
    __asm__("cli\n");
    //int queuesize,tmp;
    queuesize = size(&blockqueue);
    int i = 0;
    for(i = 0;i < queuesize;i ++){
    9cfd:	67 66 ff 45 fc       	incw   -0x4(%di)
    9d02:	66 a1 0c dc 67 66    	mov    0x6667dc0c,%ax
    9d08:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    9d0b:	7c b9                	jl     9cc6 <sys_wakeup+0x32>
        dequeue(&blockqueue,&tmp);
        if(index != tmp){
            enqueue(&blockqueue,tmp);
        }
    }
    PCB_list[index].prg_status = READY;
    9d0d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9d12:	66 c1 e0 02          	shl    $0x2,%ax
    9d16:	66 89 c2             	mov    %ax,%dx
    9d19:	66 c1 e2 04          	shl    $0x4,%dx
    9d1d:	66 01 d0             	add    %dx,%ax
    9d20:	66 05 d0 c5          	add    $0xc5d0,%ax
    9d24:	00 00                	add    %al,(%eax)
    9d26:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    9d2d:	00 00                	add    %al,(%eax)
    enqueue(&readyqueue,index);
    9d2f:	67 66 ff 75 08       	pushw  0x8(%di)
    9d34:	66 68 80 db          	pushw  $0xdb80
    9d38:	00 00                	add    %al,(%eax)
    9d3a:	66 e8 e1 05          	callw  a31f <size+0x11>
    9d3e:	00 00                	add    %al,(%eax)
    9d40:	66 83 c4 08          	add    $0x8,%sp
    __asm__("sti\n");
    9d44:	fb                   	sti    
}
    9d45:	66 c9                	leavew 
    9d47:	66 c3                	retw   

00009d49 <sys_run>:
void sys_run(){
    9d49:	66 55                	push   %bp
    9d4b:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = RUN;
    9d4e:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    9d54:	c7 40 38 01 00 00 00 	movl   $0x1,0x38(%eax)
}
    9d5b:	66 5d                	pop    %bp
    9d5d:	66 c3                	retw   

00009d5f <do_fork>:

int do_fork(){
    9d5f:	66 55                	push   %bp
    9d61:	66 89 e5             	mov    %sp,%bp
    9d64:	66 83 ec 08          	sub    $0x8,%sp
   struct PCB* fork_prg;
    fork_prg = PCB_list + 1;
    9d68:	67 66 c7 45 fc e4 c5 	movw   $0xc5e4,-0x4(%di)
    9d6f:	00 00                	add    %al,(%eax)
    while(fork_prg < PCB_list+PCB_NUMMER && fork_prg -> prg_status == RUN )    fork_prg = fork_prg + 1;//应该增加used位，防止被覆盖
    9d71:	eb 06                	jmp    9d79 <do_fork+0x1a>
    9d73:	67 66 83 45 fc 44    	addw   $0x44,-0x4(%di)
    9d79:	67 66 81 7d fc f0 ca 	cmpw   $0xcaf0,-0x4(%di)
    9d80:	00 00                	add    %al,(%eax)
    9d82:	73 10                	jae    9d94 <do_fork+0x35>
    9d84:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9d89:	67 66 8b 40 38       	mov    0x38(%bx,%si),%ax
    9d8e:	66 83 f8 01          	cmp    $0x1,%ax
    9d92:	74 df                	je     9d73 <do_fork+0x14>
    if(fork_prg > PCB_list+(PCB_NUMMER - 1)) _CurrentProg -> eax = -1;
    9d94:	67 66 81 7d fc ac ca 	cmpw   $0xcaac,-0x4(%di)
    9d9b:	00 00                	add    %al,(%eax)
    9d9d:	76 0f                	jbe    9dae <do_fork+0x4f>
    9d9f:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    9da5:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    9dab:	e9 42 02 66 e8       	jmp    e8669ff2 <_end+0xe865c3be>
    else{
        _Schedule_once();
    9db0:	52                   	push   %edx
    9db1:	e7 ff                	out    %eax,$0xff
    9db3:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    9db6:	ec                   	in     (%dx),%al
    9db7:	06                   	push   %es
        pcb_copy(_CurrentProg,fork_prg);//copy PCB
    9db8:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    9dbe:	ff 75 fc             	pushl  -0x4(%ebp)
    9dc1:	66 50                	push   %ax
    9dc3:	66 e8 e6 03          	callw  a1ad <counter+0x62>
    9dc7:	00 00                	add    %al,(%eax)
    9dc9:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    9dcd:	66 83 c4 06          	add    $0x6,%sp
        fork_prg -> id = (fork_prg - PCB_list);//id = 44,是否有问题？？？
    9dd1:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9dd6:	66 b8 a0 c5          	mov    $0xc5a0,%ax
    9dda:	00 00                	add    %al,(%eax)
    9ddc:	66 29 c2             	sub    %ax,%dx
    9ddf:	66 89 d0             	mov    %dx,%ax
    9de2:	66 c1 f8 02          	sar    $0x2,%ax
    9de6:	66 89 c2             	mov    %ax,%dx
    9de9:	66 89 d0             	mov    %dx,%ax
    9dec:	66 01 c0             	add    %ax,%ax
    9def:	66 01 d0             	add    %dx,%ax
    9df2:	67 66 8d 14          	lea    (%si),%dx
    9df6:	85 00                	test   %eax,(%eax)
    9df8:	00 00                	add    %al,(%eax)
    9dfa:	00 66 01             	add    %ah,0x1(%esi)
    9dfd:	d0 66 89             	shlb   -0x77(%esi)
    9e00:	c2 66 c1             	ret    $0xc166
    9e03:	e2 08                	loop   9e0d <do_fork+0xae>
    9e05:	66 01 d0             	add    %dx,%ax
    9e08:	66 89 c2             	mov    %ax,%dx
    9e0b:	66 c1 e2 10          	shl    $0x10,%dx
    9e0f:	66 01 d0             	add    %dx,%ax
    9e12:	66 f7 d8             	neg    %ax
    9e15:	66 89 c2             	mov    %ax,%dx
    9e18:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9e1d:	67 66 89 50 3c       	mov    %dx,0x3c(%bx,%si)
        fork_prg -> fid = _CurrentProg - PCB_list;
    9e22:	66 a1 f0 ca 66 89    	mov    0x8966caf0,%ax
    9e28:	c2 66 b8             	ret    $0xb866
    9e2b:	a0 c5 00 00 66       	mov    0x660000c5,%al
    9e30:	29 c2                	sub    %eax,%edx
    9e32:	66 89 d0             	mov    %dx,%ax
    9e35:	66 c1 f8 02          	sar    $0x2,%ax
    9e39:	66 89 c2             	mov    %ax,%dx
    9e3c:	66 89 d0             	mov    %dx,%ax
    9e3f:	66 01 c0             	add    %ax,%ax
    9e42:	66 01 d0             	add    %dx,%ax
    9e45:	67 66 8d 14          	lea    (%si),%dx
    9e49:	85 00                	test   %eax,(%eax)
    9e4b:	00 00                	add    %al,(%eax)
    9e4d:	00 66 01             	add    %ah,0x1(%esi)
    9e50:	d0 66 89             	shlb   -0x77(%esi)
    9e53:	c2 66 c1             	ret    $0xc166
    9e56:	e2 08                	loop   9e60 <do_fork+0x101>
    9e58:	66 01 d0             	add    %dx,%ax
    9e5b:	66 89 c2             	mov    %ax,%dx
    9e5e:	66 c1 e2 10          	shl    $0x10,%dx
    9e62:	66 01 d0             	add    %dx,%ax
    9e65:	66 f7 d8             	neg    %ax
    9e68:	66 89 c2             	mov    %ax,%dx
    9e6b:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9e70:	67 66 89 50 40       	mov    %dx,0x40(%bx,%si)
        fork_prg -> ds = _CurrentProg -> ds;
    9e75:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    9e7b:	8b 50 20             	mov    0x20(%eax),%edx
    9e7e:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9e83:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
        fork_prg -> ss = 0x2000 + 0x1000 * (fork_prg - PCB_list);
    9e88:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9e8d:	66 b8 a0 c5          	mov    $0xc5a0,%ax
    9e91:	00 00                	add    %al,(%eax)
    9e93:	66 29 c2             	sub    %ax,%dx
    9e96:	66 89 d0             	mov    %dx,%ax
    9e99:	66 c1 f8 02          	sar    $0x2,%ax
    9e9d:	66 89 c2             	mov    %ax,%dx
    9ea0:	66 89 d0             	mov    %dx,%ax
    9ea3:	66 01 c0             	add    %ax,%ax
    9ea6:	66 01 d0             	add    %dx,%ax
    9ea9:	67 66 8d 14          	lea    (%si),%dx
    9ead:	85 00                	test   %eax,(%eax)
    9eaf:	00 00                	add    %al,(%eax)
    9eb1:	00 66 01             	add    %ah,0x1(%esi)
    9eb4:	d0 66 89             	shlb   -0x77(%esi)
    9eb7:	c2 66 c1             	ret    $0xc166
    9eba:	e2 08                	loop   9ec4 <do_fork+0x165>
    9ebc:	66 01 d0             	add    %dx,%ax
    9ebf:	66 89 c2             	mov    %ax,%dx
    9ec2:	66 c1 e2 10          	shl    $0x10,%dx
    9ec6:	66 01 d0             	add    %dx,%ax
    9ec9:	66 f7 d8             	neg    %ax
    9ecc:	66 83 c0 02          	add    $0x2,%ax
    9ed0:	66 c1 e0 0c          	shl    $0xc,%ax
    9ed4:	66 89 c2             	mov    %ax,%dx
    9ed7:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9edc:	67 66 89 50 24       	mov    %dx,0x24(%bx,%si)
        fork_prg -> cs = _CurrentProg -> cs;
    9ee1:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    9ee7:	8b 50 30             	mov    0x30(%eax),%edx
    9eea:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9eef:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
        fork_prg -> prg_status = READY;
    9ef4:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9ef9:	67 66 c7 40 38 03 00 	movw   $0x3,0x38(%bx,%si)
    9f00:	00 00                	add    %al,(%eax)
        
        int index = fork_prg - PCB_list;
    9f02:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    9f07:	66 b8 a0 c5          	mov    $0xc5a0,%ax
    9f0b:	00 00                	add    %al,(%eax)
    9f0d:	66 29 c2             	sub    %ax,%dx
    9f10:	66 89 d0             	mov    %dx,%ax
    9f13:	66 c1 f8 02          	sar    $0x2,%ax
    9f17:	66 89 c2             	mov    %ax,%dx
    9f1a:	66 89 d0             	mov    %dx,%ax
    9f1d:	66 01 c0             	add    %ax,%ax
    9f20:	66 01 d0             	add    %dx,%ax
    9f23:	67 66 8d 14          	lea    (%si),%dx
    9f27:	85 00                	test   %eax,(%eax)
    9f29:	00 00                	add    %al,(%eax)
    9f2b:	00 66 01             	add    %ah,0x1(%esi)
    9f2e:	d0 66 89             	shlb   -0x77(%esi)
    9f31:	c2 66 c1             	ret    $0xc166
    9f34:	e2 08                	loop   9f3e <do_fork+0x1df>
    9f36:	66 01 d0             	add    %dx,%ax
    9f39:	66 89 c2             	mov    %ax,%dx
    9f3c:	66 c1 e2 10          	shl    $0x10,%dx
    9f40:	66 01 d0             	add    %dx,%ax
    9f43:	66 f7 d8             	neg    %ax
    9f46:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
        __asm__("sub $6,%esp");
    9f4b:	66 83 ec 06          	sub    $0x6,%sp
        enqueue(&readyqueue,index); 
    9f4f:	67 66 ff 75 f8       	pushw  -0x8(%di)
    9f54:	66 68 80 db          	pushw  $0xdb80
    9f58:	00 00                	add    %al,(%eax)
    9f5a:	66 e8 c1 03          	callw  a31f <size+0x11>
    9f5e:	00 00                	add    %al,(%eax)
    9f60:	66 83 c4 08          	add    $0x8,%sp
        __asm__("add $6,%esp");
    9f64:	66 83 c4 06          	add    $0x6,%sp
        _Schedule_once();
    9f68:	66 e8 98 e5          	callw  8504 <S+0x14>
    9f6c:	ff                   	(bad)  
    9f6d:	ff 66 83             	jmp    *-0x7d(%esi)
        __asm__("sub $6,%esp");
    9f70:	ec                   	in     (%dx),%al
    9f71:	06                   	push   %es
        _sys_stack_copy(_CurrentProg -> ss,_CurrentProg -> esp,fork_prg -> ss);
    9f72:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9f77:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    9f7c:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    9f82:	8b 50 28             	mov    0x28(%eax),%edx
    9f85:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    9f8b:	8b 40 24             	mov    0x24(%eax),%eax
    9f8e:	66 51                	push   %cx
    9f90:	66 52                	push   %dx
    9f92:	66 50                	push   %ax
    9f94:	66 e8 5b e4          	callw  83f3 <Message31+0x4>
    9f98:	ff                   	(bad)  
    9f99:	ff 66 83             	jmp    *-0x7d(%esi)
    9f9c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
        __asm__("add $6,%esp");
    9f9f:	83 c4 06             	add    $0x6,%esp
        fork_prg -> ip = _CurrentProg -> ip;
    9fa2:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    9fa8:	8b 50 2c             	mov    0x2c(%eax),%edx
    9fab:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9fb0:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
        fork_prg -> eax = 0;
    9fb5:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9fba:	67 66 c7 00 00 00    	movw   $0x0,(%bx,%si)
    9fc0:	00 00                	add    %al,(%eax)
        if(fork_prg == _CurrentProg){
    9fc2:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    9fc8:	39 45 fc             	cmp    %eax,-0x4(%ebp)
    9fcb:	75 08                	jne    9fd5 <do_fork+0x276>
            return 0;
    9fcd:	66 b8 00 00          	mov    $0x0,%ax
    9fd1:	00 00                	add    %al,(%eax)
    9fd3:	eb 1b                	jmp    9ff0 <do_fork+0x291>
        }
        _CurrentProg -> eax = _CurrentProg -> id;
    9fd5:	66 a1 f0 ca 66 8b    	mov    0x8b66caf0,%ax
    9fdb:	16                   	push   %ss
    9fdc:	f0 ca 67 66          	lock lret $0x6667
    9fe0:	8b 52 3c             	mov    0x3c(%edx),%edx
    9fe3:	67 66 89 10          	mov    %dx,(%bx,%si)
        return _CurrentProg -> eax;
    9fe7:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    9fed:	8b 00                	mov    (%eax),%eax
    9fef:	90                   	nop
    }
}
    9ff0:	66 c9                	leavew 
    9ff2:	66 c3                	retw   

00009ff4 <sys_exit_fork>:
void sys_exit_fork(char ch){
    9ff4:	66 55                	push   %bp
    9ff6:	66 89 e5             	mov    %sp,%bp
    9ff9:	66 83 ec 0c          	sub    $0xc,%sp
    9ffd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a002:	67 88 45 f4          	mov    %al,-0xc(%di)
    int current_id = _CurrentProg - PCB_list;
    a006:	66 a1 f0 ca 66 89    	mov    0x8966caf0,%ax
    a00c:	c2 66 b8             	ret    $0xb866
    a00f:	a0 c5 00 00 66       	mov    0x660000c5,%al
    a014:	29 c2                	sub    %eax,%edx
    a016:	66 89 d0             	mov    %dx,%ax
    a019:	66 c1 f8 02          	sar    $0x2,%ax
    a01d:	66 89 c2             	mov    %ax,%dx
    a020:	66 89 d0             	mov    %dx,%ax
    a023:	66 01 c0             	add    %ax,%ax
    a026:	66 01 d0             	add    %dx,%ax
    a029:	67 66 8d 14          	lea    (%si),%dx
    a02d:	85 00                	test   %eax,(%eax)
    a02f:	00 00                	add    %al,(%eax)
    a031:	00 66 01             	add    %ah,0x1(%esi)
    a034:	d0 66 89             	shlb   -0x77(%esi)
    a037:	c2 66 c1             	ret    $0xc166
    a03a:	e2 08                	loop   a044 <sys_exit_fork+0x50>
    a03c:	66 01 d0             	add    %dx,%ax
    a03f:	66 89 c2             	mov    %ax,%dx
    a042:	66 c1 e2 10          	shl    $0x10,%dx
    a046:	66 01 d0             	add    %dx,%ax
    a049:	66 f7 d8             	neg    %ax
    a04c:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    int index = _CurrentProg -> fid;
    a051:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    a057:	8b 40 40             	mov    0x40(%eax),%eax
    a05a:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    sys_wakeup(index);
    a05f:	67 66 ff 75 f8       	pushw  -0x8(%di)
    a064:	66 e8 2a fc          	callw  9c92 <sys_bolocked+0xb3>
    a068:	ff                   	(bad)  
    a069:	ff 66 83             	jmp    *-0x7d(%esi)
    a06c:	c4 04 66             	les    (%esi,%eiz,2),%eax
    PCB_list[_CurrentProg -> fid].eax = ch;
    a06f:	a1 f0 ca 67 66       	mov    0x6667caf0,%eax
    a074:	8b 40 40             	mov    0x40(%eax),%eax
    a077:	67 66 0f be 55 f4    	movsbw -0xc(%di),%dx
    a07d:	66 c1 e0 02          	shl    $0x2,%ax
    a081:	66 89 c1             	mov    %ax,%cx
    a084:	66 c1 e1 04          	shl    $0x4,%cx
    a088:	66 01 c8             	add    %cx,%ax
    a08b:	66 05 a0 c5          	add    $0xc5a0,%ax
    a08f:	00 00                	add    %al,(%eax)
    a091:	67 66 89 10          	mov    %dx,(%bx,%si)
    _CurrentProg -> prg_status = EXIT;
    a095:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    a09b:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    rmele(&readyqueue,current_id);
    a0a2:	67 66 ff 75 fc       	pushw  -0x4(%di)
    a0a7:	66 68 80 db          	pushw  $0xdb80
    a0ab:	00 00                	add    %al,(%eax)
    a0ad:	66 e8 7e 03          	callw  a42f <init_queue+0x30>
    a0b1:	00 00                	add    %al,(%eax)
    a0b3:	66 83 c4 08          	add    $0x8,%sp
    _Schedule();
    a0b7:	66 e8 5f e4          	callw  851a <_fork_user+0x9>
    a0bb:	ff                   	(bad)  
    a0bc:	ff 66 c9             	jmp    *-0x37(%esi)
}
    a0bf:	66 c3                	retw   

0000a0c1 <sys_wait>:
int sys_wait(){
    a0c1:	66 55                	push   %bp
    a0c3:	66 89 e5             	mov    %sp,%bp
    a0c6:	66 83 ec 04          	sub    $0x4,%sp
    int index = _CurrentProg - PCB_list;
    a0ca:	66 a1 f0 ca 66 89    	mov    0x8966caf0,%ax
    a0d0:	c2 66 b8             	ret    $0xb866
    a0d3:	a0 c5 00 00 66       	mov    0x660000c5,%al
    a0d8:	29 c2                	sub    %eax,%edx
    a0da:	66 89 d0             	mov    %dx,%ax
    a0dd:	66 c1 f8 02          	sar    $0x2,%ax
    a0e1:	66 89 c2             	mov    %ax,%dx
    a0e4:	66 89 d0             	mov    %dx,%ax
    a0e7:	66 01 c0             	add    %ax,%ax
    a0ea:	66 01 d0             	add    %dx,%ax
    a0ed:	67 66 8d 14          	lea    (%si),%dx
    a0f1:	85 00                	test   %eax,(%eax)
    a0f3:	00 00                	add    %al,(%eax)
    a0f5:	00 66 01             	add    %ah,0x1(%esi)
    a0f8:	d0 66 89             	shlb   -0x77(%esi)
    a0fb:	c2 66 c1             	ret    $0xc166
    a0fe:	e2 08                	loop   a108 <sys_wait+0x47>
    a100:	66 01 d0             	add    %dx,%ax
    a103:	66 89 c2             	mov    %ax,%dx
    a106:	66 c1 e2 10          	shl    $0x10,%dx
    a10a:	66 01 d0             	add    %dx,%ax
    a10d:	66 f7 d8             	neg    %ax
    a110:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
    sys_bolocked(index);
    a115:	67 66 ff 75 fc       	pushw  -0x4(%di)
    a11a:	66 e8 bf fa          	callw  9bdd <sys_exit+0x7a>
    a11e:	ff                   	(bad)  
    a11f:	ff 66 83             	jmp    *-0x7d(%esi)
    a122:	c4 04 66             	les    (%esi,%eiz,2),%eax
    _Schedule();
    a125:	e8 f2 e3 ff ff       	call   851c <_Schedule>
    return _CurrentProg -> eax;
    a12a:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    a130:	8b 00                	mov    (%eax),%eax
}
    a132:	66 c9                	leavew 
    a134:	66 c3                	retw   

0000a136 <thread_join>:
void thread_join(){
    a136:	66 55                	push   %bp
    a138:	66 89 e5             	mov    %sp,%bp
    while(counter()){
    a13b:	90                   	nop
    a13c:	66 e8 09 00          	callw  a149 <thread_join+0x13>
    a140:	00 00                	add    %al,(%eax)
    a142:	66 85 c0             	test   %ax,%ax
    a145:	75 f5                	jne    a13c <thread_join+0x6>
    }
}
    a147:	66 5d                	pop    %bp
    a149:	66 c3                	retw   

0000a14b <counter>:
int counter(){
    a14b:	66 55                	push   %bp
    a14d:	66 89 e5             	mov    %sp,%bp
    a150:	66 83 ec 08          	sub    $0x8,%sp
   // __asm__("cli\n");
    int i = 0;
    a154:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    a15b:	00 00                	add    %al,(%eax)
    int count = 0;
    a15d:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    a164:	00 00                	add    %al,(%eax)
    for(i = 1;i < PCB_NUMMER;i ++){
    a166:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    a16d:	00 00                	add    %al,(%eax)
    a16f:	eb 2d                	jmp    a19e <counter+0x53>
        if(PCB_list[i].prg_status != EXIT){
    a171:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    a176:	66 c1 e0 02          	shl    $0x2,%ax
    a17a:	66 89 c2             	mov    %ax,%dx
    a17d:	66 c1 e2 04          	shl    $0x4,%dx
    a181:	66 01 d0             	add    %dx,%ax
    a184:	66 05 d0 c5          	add    $0xc5d0,%ax
    a188:	00 00                	add    %al,(%eax)
    a18a:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a18f:	66 85 c0             	test   %ax,%ax
    a192:	74 05                	je     a199 <counter+0x4e>
            count ++;
    a194:	67 66 ff 45 f8       	incw   -0x8(%di)
}
int counter(){
   // __asm__("cli\n");
    int i = 0;
    int count = 0;
    for(i = 1;i < PCB_NUMMER;i ++){
    a199:	67 66 ff 45 fc       	incw   -0x4(%di)
    a19e:	67 66 83 7d fc 13    	cmpw   $0x13,-0x4(%di)
    a1a4:	7e cb                	jle    a171 <counter+0x26>
        if(PCB_list[i].prg_status != EXIT){
            count ++;
        }
    }
    //__asm__("sti\n");
    return count;
    a1a6:	67 66 8b 45 f8       	mov    -0x8(%di),%ax

}
    a1ab:	66 c9                	leavew 
    a1ad:	66 c3                	retw   

0000a1af <pcb_copy>:
void pcb_copy(struct PCB* old,struct PCB* newone){
    a1af:	66 55                	push   %bp
    a1b1:	66 89 e5             	mov    %sp,%bp
    newone -> eax = old -> eax;
    a1b4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a1b9:	67 66 8b 10          	mov    (%bx,%si),%dx
    a1bd:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a1c2:	67 66 89 10          	mov    %dx,(%bx,%si)
    newone -> ebx = old -> ebx;
    a1c6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a1cb:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    a1d0:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a1d5:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)
    newone -> ecx = old -> ecx;
    a1da:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a1df:	67 66 8b 50 08       	mov    0x8(%bx,%si),%dx
    a1e4:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a1e9:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    newone -> edx = old -> edx;
    a1ee:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a1f3:	67 66 8b 50 0c       	mov    0xc(%bx,%si),%dx
    a1f8:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a1fd:	67 66 89 50 0c       	mov    %dx,0xc(%bx,%si)
    newone -> ebp = old -> ebp;
    a202:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a207:	67 66 8b 50 18       	mov    0x18(%bx,%si),%dx
    a20c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a211:	67 66 89 50 18       	mov    %dx,0x18(%bx,%si)
    newone -> esp = old -> esp;
    a216:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a21b:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    a220:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a225:	67 66 89 50 28       	mov    %dx,0x28(%bx,%si)
    newone -> esi = old -> esi;
    a22a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a22f:	67 66 8b 50 10       	mov    0x10(%bx,%si),%dx
    a234:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a239:	67 66 89 50 10       	mov    %dx,0x10(%bx,%si)
    newone -> edi = old -> edi;
    a23e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a243:	67 66 8b 50 14       	mov    0x14(%bx,%si),%dx
    a248:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a24d:	67 66 89 50 14       	mov    %dx,0x14(%bx,%si)
    newone -> es = old -> es;
    a252:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a257:	67 66 8b 50 1c       	mov    0x1c(%bx,%si),%dx
    a25c:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a261:	67 66 89 50 1c       	mov    %dx,0x1c(%bx,%si)
    newone -> ds = old -> ds;
    a266:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a26b:	67 66 8b 50 20       	mov    0x20(%bx,%si),%dx
    a270:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a275:	67 66 89 50 20       	mov    %dx,0x20(%bx,%si)
    newone -> cs = old -> cs;
    a27a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a27f:	67 66 8b 50 30       	mov    0x30(%bx,%si),%dx
    a284:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a289:	67 66 89 50 30       	mov    %dx,0x30(%bx,%si)
    newone -> ip = old -> ip;
    a28e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a293:	67 66 8b 50 2c       	mov    0x2c(%bx,%si),%dx
    a298:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a29d:	67 66 89 50 2c       	mov    %dx,0x2c(%bx,%si)
    newone -> eflags = old -> eflags;
    a2a2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a2a7:	67 66 8b 50 34       	mov    0x34(%bx,%si),%dx
    a2ac:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a2b1:	67 66 89 50 34       	mov    %dx,0x34(%bx,%si)
}
    a2b6:	66 5d                	pop    %bp
    a2b8:	66 c3                	retw   

0000a2ba <stack_copy>:
void stack_copy(struct PCB* old,struct PCB* newone){
    a2ba:	66 55                	push   %bp
    a2bc:	66 89 e5             	mov    %sp,%bp
    _sys_stack_copy(old -> ss,old -> esp,newone -> ss);
    a2bf:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    a2c4:	67 66 8b 48 24       	mov    0x24(%bx,%si),%cx
    a2c9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a2ce:	67 66 8b 50 28       	mov    0x28(%bx,%si),%dx
    a2d3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a2d8:	67 66 8b 40 24       	mov    0x24(%bx,%si),%ax
    a2dd:	66 51                	push   %cx
    a2df:	66 52                	push   %dx
    a2e1:	66 50                	push   %ax
    a2e3:	66 e8 0c e1          	callw  83f3 <Message31+0x4>
    a2e7:	ff                   	(bad)  
    a2e8:	ff 66 83             	jmp    *-0x7d(%esi)
    a2eb:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    a2ee:	c9                   	leave  
    a2ef:	66 c3                	retw   

0000a2f1 <isempty>:
int isempty(struct Queue *queue){
    a2f1:	66 55                	push   %bp
    a2f3:	66 89 e5             	mov    %sp,%bp
    
    return (queue -> size == 0);
    a2f6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a2fb:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a300:	66 85 c0             	test   %ax,%ax
    a303:	0f 94 c0             	sete   %al
    a306:	66 0f b6 c0          	movzbw %al,%ax

}
    a30a:	66 5d                	pop    %bp
    a30c:	66 c3                	retw   

0000a30e <size>:
int size(struct Queue *queue){
    a30e:	66 55                	push   %bp
    a310:	66 89 e5             	mov    %sp,%bp
    return queue -> size ;
    a313:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a318:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
}
    a31d:	66 5d                	pop    %bp
    a31f:	66 c3                	retw   

0000a321 <enqueue>:
void enqueue(struct Queue *queue,int data){
    a321:	66 55                	push   %bp
    a323:	66 89 e5             	mov    %sp,%bp
    if(queue -> size >= MAX){
    a326:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a32b:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a330:	66 83 f8 1d          	cmp    $0x1d,%ax
    a334:	7e 02                	jle    a338 <enqueue+0x17>
        return;
    a336:	eb 51                	jmp    a389 <enqueue+0x68>
    }
    queue -> size ++;
    a338:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a33d:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a342:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    a347:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a34c:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    queue -> tail = (queue -> tail + 1) % MAX;
    a351:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a356:	67 66 8b 00          	mov    (%bx,%si),%ax
    a35a:	66 40                	inc    %ax
    a35c:	66 b9 1e 00          	mov    $0x1e,%cx
    a360:	00 00                	add    %al,(%eax)
    a362:	66 99                	cwtd   
    a364:	66 f7 f9             	idiv   %cx
    a367:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a36c:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> array[queue -> tail] = data;
    a370:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a375:	67 66 8b 10          	mov    (%bx,%si),%dx
    a379:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a37e:	67 66 8b 4d 0c       	mov    0xc(%di),%cx
    a383:	67 66 89 4c 90       	mov    %cx,-0x70(%si)
    a388:	0c 66                	or     $0x66,%al

}
    a38a:	5d                   	pop    %ebp
    a38b:	66 c3                	retw   

0000a38d <dequeue>:
void dequeue(struct Queue *queue,int * data){
    a38d:	66 55                	push   %bp
    a38f:	66 89 e5             	mov    %sp,%bp

    if(queue -> size <= 0){
    a392:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a397:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a39c:	66 85 c0             	test   %ax,%ax
    a39f:	7f 02                	jg     a3a3 <dequeue+0x16>
        return;
    a3a1:	eb 58                	jmp    a3fb <dequeue+0x6e>
    }
    queue -> size --;
    a3a3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a3a8:	67 66 8b 40 08       	mov    0x8(%bx,%si),%ax
    a3ad:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    a3b2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a3b7:	67 66 89 50 08       	mov    %dx,0x8(%bx,%si)
    *data = queue -> array[queue -> head];
    a3bc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a3c1:	67 66 8b 50 04       	mov    0x4(%bx,%si),%dx
    a3c6:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a3cb:	67 66 8b 54 90       	mov    -0x70(%si),%dx
    a3d0:	0c 67                	or     $0x67,%al
    a3d2:	66 8b 45 0c          	mov    0xc(%ebp),%ax
    a3d6:	67 66 89 10          	mov    %dx,(%bx,%si)
    queue -> head = (queue -> head + 1) % MAX;
    a3da:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a3df:	67 66 8b 40 04       	mov    0x4(%bx,%si),%ax
    a3e4:	66 40                	inc    %ax
    a3e6:	66 b9 1e 00          	mov    $0x1e,%cx
    a3ea:	00 00                	add    %al,(%eax)
    a3ec:	66 99                	cwtd   
    a3ee:	66 f7 f9             	idiv   %cx
    a3f1:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a3f6:	67 66 89 50 04       	mov    %dx,0x4(%bx,%si)

}
    a3fb:	66 5d                	pop    %bp
    a3fd:	66 c3                	retw   

0000a3ff <init_queue>:
void init_queue(struct Queue *queue){
    a3ff:	66 55                	push   %bp
    a401:	66 89 e5             	mov    %sp,%bp
    queue -> size = 0;
    a404:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a409:	67 66 c7 40 08 00 00 	movw   $0x0,0x8(%bx,%si)
    a410:	00 00                	add    %al,(%eax)
    queue -> tail = MAX - 1;
    a412:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a417:	67 66 c7 00 1d 00    	movw   $0x1d,(%bx,%si)
    a41d:	00 00                	add    %al,(%eax)
    queue -> head = 0;
    a41f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a424:	67 66 c7 40 04 00 00 	movw   $0x0,0x4(%bx,%si)
    a42b:	00 00                	add    %al,(%eax)
}
    a42d:	66 5d                	pop    %bp
    a42f:	66 c3                	retw   

0000a431 <rmele>:
int rm_tmp;
int ii;
int size_of_rmqueue;
void rmele(struct Queue *queue,int data){
    a431:	66 55                	push   %bp
    a433:	66 89 e5             	mov    %sp,%bp
    size_of_rmqueue= size(queue);
    a436:	67 66 ff 75 08       	pushw  0x8(%di)
    a43b:	66 e8 cd fe          	callw  a30c <isempty+0x1b>
    a43f:	ff                   	(bad)  
    a440:	ff 66 83             	jmp    *-0x7d(%esi)
    a443:	c4 04 66             	les    (%esi,%eiz,2),%eax
    a446:	a3 1c dc 66 c7       	mov    %eax,0xc766dc1c
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    a44b:	06                   	push   %es
    a44c:	20 dc                	and    %bl,%ah
    a44e:	00 00                	add    %al,(%eax)
    a450:	00 00                	add    %al,(%eax)
    a452:	eb 3f                	jmp    a493 <rmele+0x62>
        dequeue(queue,&rm_tmp);
    a454:	66 68 2c dc          	pushw  $0xdc2c
    a458:	00 00                	add    %al,(%eax)
    a45a:	67 66 ff 75 08       	pushw  0x8(%di)
    a45f:	66 e8 28 ff          	callw  a38b <enqueue+0x6a>
    a463:	ff                   	(bad)  
    a464:	ff 66 83             	jmp    *-0x7d(%esi)
    a467:	c4 08                	les    (%eax),%ecx
        if(rm_tmp != data){
    a469:	66 a1 2c dc 67 66    	mov    0x6667dc2c,%ax
    a46f:	3b 45 0c             	cmp    0xc(%ebp),%eax
    a472:	74 15                	je     a489 <rmele+0x58>
            enqueue(queue,rm_tmp);
    a474:	66 a1 2c dc 66 50    	mov    0x5066dc2c,%ax
    a47a:	67 66 ff 75 08       	pushw  0x8(%di)
    a47f:	66 e8 9c fe          	callw  a31f <size+0x11>
    a483:	ff                   	(bad)  
    a484:	ff 66 83             	jmp    *-0x7d(%esi)
    a487:	c4 08                	les    (%eax),%ecx
int rm_tmp;
int ii;
int size_of_rmqueue;
void rmele(struct Queue *queue,int data){
    size_of_rmqueue= size(queue);
    for(ii = 0;ii < size_of_rmqueue;ii ++){
    a489:	66 a1 20 dc 66 40    	mov    0x4066dc20,%ax
    a48f:	66 a3 20 dc 66 8b    	mov    %ax,0x8b66dc20
    a495:	16                   	push   %ss
    a496:	20 dc                	and    %bl,%ah
    a498:	66 a1 1c dc 66 39    	mov    0x3966dc1c,%ax
    a49e:	c2 7c b3             	ret    $0xb37c
        dequeue(queue,&rm_tmp);
        if(rm_tmp != data){
            enqueue(queue,rm_tmp);
        }
    }
}
    a4a1:	66 c9                	leavew 
    a4a3:	66 c3                	retw   

0000a4a5 <init_Semlist>:
void init_Semlist(int index){
    a4a5:	66 55                	push   %bp
    a4a7:	66 89 e5             	mov    %sp,%bp
    SEM_list[index].used = 0;
    a4aa:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a4af:	66 89 d0             	mov    %dx,%ax
    a4b2:	66 c1 e0 02          	shl    $0x2,%ax
    a4b6:	66 01 d0             	add    %dx,%ax
    a4b9:	66 c1 e0 02          	shl    $0x2,%ax
    a4bd:	67 66 8d 14          	lea    (%si),%dx
    a4c1:	c5 00                	lds    (%eax),%eax
    a4c3:	00 00                	add    %al,(%eax)
    a4c5:	00 66 29             	add    %ah,0x29(%esi)
    a4c8:	c2 66 89             	ret    $0x8966
    a4cb:	d0 66 05             	shlb   0x5(%esi)
    a4ce:	80 cb 00             	or     $0x0,%bl
    a4d1:	00 67 66             	add    %ah,0x66(%edi)
    a4d4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    init_queue(&SEM_list[index].semaque);
    a4db:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a4e0:	66 89 d0             	mov    %dx,%ax
    a4e3:	66 c1 e0 02          	shl    $0x2,%ax
    a4e7:	66 01 d0             	add    %dx,%ax
    a4ea:	66 c1 e0 02          	shl    $0x2,%ax
    a4ee:	67 66 8d 14          	lea    (%si),%dx
    a4f2:	c5 00                	lds    (%eax),%eax
    a4f4:	00 00                	add    %al,(%eax)
    a4f6:	00 66 29             	add    %ah,0x29(%esi)
    a4f9:	c2 67 66             	ret    $0x6667
    a4fc:	8d 82 00 cb 00 00    	lea    0xcb00(%edx),%eax
    a502:	66 83 c0 04          	add    $0x4,%ax
    a506:	66 50                	push   %ax
    a508:	66 e8 f1 fe          	callw  a3fd <dequeue+0x70>
    a50c:	ff                   	(bad)  
    a50d:	ff 66 83             	jmp    *-0x7d(%esi)
    a510:	c4 04 66             	les    (%esi,%eiz,2),%eax
}
    a513:	c9                   	leave  
    a514:	66 c3                	retw   

0000a516 <do_SemGet>:
int do_SemGet(int value){
    a516:	66 55                	push   %bp
    a518:	66 89 e5             	mov    %sp,%bp
    a51b:	66 83 ec 04          	sub    $0x4,%sp
    int i = 0;
    a51f:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    a526:	00 00                	add    %al,(%eax)
    while(SEM_list[i].used == 1){
    a528:	eb 05                	jmp    a52f <do_SemGet+0x19>
        i ++;
    a52a:	67 66 ff 45 fc       	incw   -0x4(%di)
    SEM_list[index].used = 0;
    init_queue(&SEM_list[index].semaque);
}
int do_SemGet(int value){
    int i = 0;
    while(SEM_list[i].used == 1){
    a52f:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    a534:	66 89 d0             	mov    %dx,%ax
    a537:	66 c1 e0 02          	shl    $0x2,%ax
    a53b:	66 01 d0             	add    %dx,%ax
    a53e:	66 c1 e0 02          	shl    $0x2,%ax
    a542:	67 66 8d 14          	lea    (%si),%dx
    a546:	c5 00                	lds    (%eax),%eax
    a548:	00 00                	add    %al,(%eax)
    a54a:	00 66 29             	add    %ah,0x29(%esi)
    a54d:	c2 66 89             	ret    $0x8966
    a550:	d0 66 05             	shlb   0x5(%esi)
    a553:	80 cb 00             	or     $0x0,%bl
    a556:	00 67 66             	add    %ah,0x66(%edi)
    a559:	8b 40 08             	mov    0x8(%eax),%eax
    a55c:	66 83 f8 01          	cmp    $0x1,%ax
    a560:	74 c8                	je     a52a <do_SemGet+0x14>
        i ++;
    }
    if(i < SemMax){
    a562:	67 66 83 7d fc 1d    	cmpw   $0x1d,-0x4(%di)
    a568:	7f 7a                	jg     a5e4 <do_SemGet+0xce>
        init_Semlist(i);
    a56a:	67 66 ff 75 fc       	pushw  -0x4(%di)
    a56f:	66 e8 30 ff          	callw  a4a3 <rmele+0x72>
    a573:	ff                   	(bad)  
    a574:	ff 66 83             	jmp    *-0x7d(%esi)
    a577:	c4 04 67             	les    (%edi,%eiz,2),%eax
        SEM_list[i].used = 1;
    a57a:	66 8b 55 fc          	mov    -0x4(%ebp),%dx
    a57e:	66 89 d0             	mov    %dx,%ax
    a581:	66 c1 e0 02          	shl    $0x2,%ax
    a585:	66 01 d0             	add    %dx,%ax
    a588:	66 c1 e0 02          	shl    $0x2,%ax
    a58c:	67 66 8d 14          	lea    (%si),%dx
    a590:	c5 00                	lds    (%eax),%eax
    a592:	00 00                	add    %al,(%eax)
    a594:	00 66 29             	add    %ah,0x29(%esi)
    a597:	c2 66 89             	ret    $0x8966
    a59a:	d0 66 05             	shlb   0x5(%esi)
    a59d:	80 cb 00             	or     $0x0,%bl
    a5a0:	00 67 66             	add    %ah,0x66(%edi)
    a5a3:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        SEM_list[i].count = value;
    a5aa:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    a5af:	66 89 d0             	mov    %dx,%ax
    a5b2:	66 c1 e0 02          	shl    $0x2,%ax
    a5b6:	66 01 d0             	add    %dx,%ax
    a5b9:	66 c1 e0 02          	shl    $0x2,%ax
    a5bd:	67 66 8d 14          	lea    (%si),%dx
    a5c1:	c5 00                	lds    (%eax),%eax
    a5c3:	00 00                	add    %al,(%eax)
    a5c5:	00 66 29             	add    %ah,0x29(%esi)
    a5c8:	c2 66 89             	ret    $0x8966
    a5cb:	d0 67 66             	shlb   0x66(%edi)
    a5ce:	8d 90 00 cb 00 00    	lea    0xcb00(%eax),%edx
    a5d4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    a5d9:	67 66 89 02          	mov    %ax,(%bp,%si)
        return i;
    a5dd:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    a5e2:	eb 06                	jmp    a5ea <do_SemGet+0xd4>
    }
    else 
        return -1;
    a5e4:	66 b8 ff ff          	mov    $0xffff,%ax
    a5e8:	ff                   	(bad)  
    a5e9:	ff 66 c9             	jmp    *-0x37(%esi)
}
    a5ec:	66 c3                	retw   

0000a5ee <do_SemFree>:
void do_SemFree(int s){
    a5ee:	66 55                	push   %bp
    a5f0:	66 89 e5             	mov    %sp,%bp
    SEM_list[s].used = 0;
    a5f3:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a5f8:	66 89 d0             	mov    %dx,%ax
    a5fb:	66 c1 e0 02          	shl    $0x2,%ax
    a5ff:	66 01 d0             	add    %dx,%ax
    a602:	66 c1 e0 02          	shl    $0x2,%ax
    a606:	67 66 8d 14          	lea    (%si),%dx
    a60a:	c5 00                	lds    (%eax),%eax
    a60c:	00 00                	add    %al,(%eax)
    a60e:	00 66 29             	add    %ah,0x29(%esi)
    a611:	c2 66 89             	ret    $0x8966
    a614:	d0 66 05             	shlb   0x5(%esi)
    a617:	80 cb 00             	or     $0x0,%bl
    a61a:	00 67 66             	add    %ah,0x66(%edi)
    a61d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
    a624:	66 5d                	pop    %bp
    a626:	66 c3                	retw   

0000a628 <do_P>:
int tempp;
int sem_index;
int t;
void do_P(int s){
    a628:	66 55                	push   %bp
    a62a:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    a62d:	fa                   	cli    
    SEM_list[s].count = SEM_list[s].count - 1;
    a62e:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a633:	66 89 d0             	mov    %dx,%ax
    a636:	66 c1 e0 02          	shl    $0x2,%ax
    a63a:	66 01 d0             	add    %dx,%ax
    a63d:	66 c1 e0 02          	shl    $0x2,%ax
    a641:	67 66 8d 14          	lea    (%si),%dx
    a645:	c5 00                	lds    (%eax),%eax
    a647:	00 00                	add    %al,(%eax)
    a649:	00 66 29             	add    %ah,0x29(%esi)
    a64c:	c2 66 89             	ret    $0x8966
    a64f:	d0 66 05             	shlb   0x5(%esi)
    a652:	00 cb                	add    %cl,%bl
    a654:	00 00                	add    %al,(%eax)
    a656:	67 66 8b 00          	mov    (%bx,%si),%ax
    a65a:	67 66 8d 48 ff       	lea    -0x1(%bx,%si),%cx
    a65f:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a664:	66 89 d0             	mov    %dx,%ax
    a667:	66 c1 e0 02          	shl    $0x2,%ax
    a66b:	66 01 d0             	add    %dx,%ax
    a66e:	66 c1 e0 02          	shl    $0x2,%ax
    a672:	67 66 8d 14          	lea    (%si),%dx
    a676:	c5 00                	lds    (%eax),%eax
    a678:	00 00                	add    %al,(%eax)
    a67a:	00 66 29             	add    %ah,0x29(%esi)
    a67d:	c2 66 89             	ret    $0x8966
    a680:	d0 66 05             	shlb   0x5(%esi)
    a683:	00 cb                	add    %cl,%bl
    a685:	00 00                	add    %al,(%eax)
    a687:	67 66 89 08          	mov    %cx,(%bx,%si)
    if(SEM_list[s].count < 0){
    a68b:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a690:	66 89 d0             	mov    %dx,%ax
    a693:	66 c1 e0 02          	shl    $0x2,%ax
    a697:	66 01 d0             	add    %dx,%ax
    a69a:	66 c1 e0 02          	shl    $0x2,%ax
    a69e:	67 66 8d 14          	lea    (%si),%dx
    a6a2:	c5 00                	lds    (%eax),%eax
    a6a4:	00 00                	add    %al,(%eax)
    a6a6:	00 66 29             	add    %ah,0x29(%esi)
    a6a9:	c2 66 89             	ret    $0x8966
    a6ac:	d0 66 05             	shlb   0x5(%esi)
    a6af:	00 cb                	add    %cl,%bl
    a6b1:	00 00                	add    %al,(%eax)
    a6b3:	67 66 8b 00          	mov    (%bx,%si),%ax
    a6b7:	66 85 c0             	test   %ax,%ax
    a6ba:	0f 89 b1 00 66 a1    	jns    a166a771 <_end+0xa165cb3d>
        sem_index = _CurrentProg - PCB_list;
    a6c0:	f0 ca 66 89          	lock lret $0x8966
    a6c4:	c2 66 b8             	ret    $0xb866
    a6c7:	a0 c5 00 00 66       	mov    0x660000c5,%al
    a6cc:	29 c2                	sub    %eax,%edx
    a6ce:	66 89 d0             	mov    %dx,%ax
    a6d1:	66 c1 f8 02          	sar    $0x2,%ax
    a6d5:	66 89 c2             	mov    %ax,%dx
    a6d8:	66 89 d0             	mov    %dx,%ax
    a6db:	66 01 c0             	add    %ax,%ax
    a6de:	66 01 d0             	add    %dx,%ax
    a6e1:	67 66 8d 14          	lea    (%si),%dx
    a6e5:	85 00                	test   %eax,(%eax)
    a6e7:	00 00                	add    %al,(%eax)
    a6e9:	00 66 01             	add    %ah,0x1(%esi)
    a6ec:	d0 66 89             	shlb   -0x77(%esi)
    a6ef:	c2 66 c1             	ret    $0xc166
    a6f2:	e2 08                	loop   a6fc <do_P+0xd4>
    a6f4:	66 01 d0             	add    %dx,%ax
    a6f7:	66 89 c2             	mov    %ax,%dx
    a6fa:	66 c1 e2 10          	shl    $0x10,%dx
    a6fe:	66 01 d0             	add    %dx,%ax
    a701:	66 f7 d8             	neg    %ax
    a704:	66 a3 30 dc 66 a1    	mov    %ax,0xa166dc30
        rmele(&readyqueue,sem_index);//将进程从就绪队列中取出
    a70a:	30 dc                	xor    %bl,%ah
    a70c:	66 50                	push   %ax
    a70e:	66 68 80 db          	pushw  $0xdb80
    a712:	00 00                	add    %al,(%eax)
    a714:	66 e8 17 fd          	callw  a42f <init_queue+0x30>
    a718:	ff                   	(bad)  
    a719:	ff 66 83             	jmp    *-0x7d(%esi)
    a71c:	c4 08                	les    (%eax),%ecx
        _CurrentProg->prg_status = BLOCKED;
    a71e:	66 a1 f0 ca 67 66    	mov    0x6667caf0,%ax
    a724:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
        enqueue(&SEM_list[s].semaque,sem_index);
    a72b:	66 8b 0e             	mov    (%esi),%cx
    a72e:	30 dc                	xor    %bl,%ah
    a730:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a735:	66 89 d0             	mov    %dx,%ax
    a738:	66 c1 e0 02          	shl    $0x2,%ax
    a73c:	66 01 d0             	add    %dx,%ax
    a73f:	66 c1 e0 02          	shl    $0x2,%ax
    a743:	67 66 8d 14          	lea    (%si),%dx
    a747:	c5 00                	lds    (%eax),%eax
    a749:	00 00                	add    %al,(%eax)
    a74b:	00 66 29             	add    %ah,0x29(%esi)
    a74e:	c2 67 66             	ret    $0x6667
    a751:	8d 82 00 cb 00 00    	lea    0xcb00(%edx),%eax
    a757:	66 83 c0 04          	add    $0x4,%ax
    a75b:	66 51                	push   %cx
    a75d:	66 50                	push   %ax
    a75f:	66 e8 bc fb          	callw  a31f <size+0x11>
    a763:	ff                   	(bad)  
    a764:	ff 66 83             	jmp    *-0x7d(%esi)
    a767:	c4 08                	les    (%eax),%ecx
        _Schedule_PV();
    a769:	66 e8 1f de          	callw  858c <_Vr+0x10>
    a76d:	ff                   	(bad)  
    a76e:	ff                   	(bad)  
    }
    __asm("sti\n");
    a76f:	fb                   	sti    
}
    a770:	66 c9                	leavew 
    a772:	66 c3                	retw   

0000a774 <do_V>:
int v_res;
int vtempp;
void do_V(int s){
    a774:	66 55                	push   %bp
    a776:	66 89 e5             	mov    %sp,%bp
    __asm__("cli\n");
    a779:	fa                   	cli    
    SEM_list[s].count  = SEM_list[s].count + 1;
    a77a:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a77f:	66 89 d0             	mov    %dx,%ax
    a782:	66 c1 e0 02          	shl    $0x2,%ax
    a786:	66 01 d0             	add    %dx,%ax
    a789:	66 c1 e0 02          	shl    $0x2,%ax
    a78d:	67 66 8d 14          	lea    (%si),%dx
    a791:	c5 00                	lds    (%eax),%eax
    a793:	00 00                	add    %al,(%eax)
    a795:	00 66 29             	add    %ah,0x29(%esi)
    a798:	c2 66 89             	ret    $0x8966
    a79b:	d0 66 05             	shlb   0x5(%esi)
    a79e:	00 cb                	add    %cl,%bl
    a7a0:	00 00                	add    %al,(%eax)
    a7a2:	67 66 8b 00          	mov    (%bx,%si),%ax
    a7a6:	67 66 8d 48 01       	lea    0x1(%bx,%si),%cx
    a7ab:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a7b0:	66 89 d0             	mov    %dx,%ax
    a7b3:	66 c1 e0 02          	shl    $0x2,%ax
    a7b7:	66 01 d0             	add    %dx,%ax
    a7ba:	66 c1 e0 02          	shl    $0x2,%ax
    a7be:	67 66 8d 14          	lea    (%si),%dx
    a7c2:	c5 00                	lds    (%eax),%eax
    a7c4:	00 00                	add    %al,(%eax)
    a7c6:	00 66 29             	add    %ah,0x29(%esi)
    a7c9:	c2 66 89             	ret    $0x8966
    a7cc:	d0 66 05             	shlb   0x5(%esi)
    a7cf:	00 cb                	add    %cl,%bl
    a7d1:	00 00                	add    %al,(%eax)
    a7d3:	67 66 89 08          	mov    %cx,(%bx,%si)
    if(SEM_list[s].count <= 0){
    a7d7:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a7dc:	66 89 d0             	mov    %dx,%ax
    a7df:	66 c1 e0 02          	shl    $0x2,%ax
    a7e3:	66 01 d0             	add    %dx,%ax
    a7e6:	66 c1 e0 02          	shl    $0x2,%ax
    a7ea:	67 66 8d 14          	lea    (%si),%dx
    a7ee:	c5 00                	lds    (%eax),%eax
    a7f0:	00 00                	add    %al,(%eax)
    a7f2:	00 66 29             	add    %ah,0x29(%esi)
    a7f5:	c2 66 89             	ret    $0x8966
    a7f8:	d0 66 05             	shlb   0x5(%esi)
    a7fb:	00 cb                	add    %cl,%bl
    a7fd:	00 00                	add    %al,(%eax)
    a7ff:	67 66 8b 00          	mov    (%bx,%si),%ax
    a803:	66 85 c0             	test   %ax,%ax
    a806:	7f 74                	jg     a87c <do_V+0x108>
        dequeue(&SEM_list[s].semaque,&v_res);
    a808:	67 66 8b 55 08       	mov    0x8(%di),%dx
    a80d:	66 89 d0             	mov    %dx,%ax
    a810:	66 c1 e0 02          	shl    $0x2,%ax
    a814:	66 01 d0             	add    %dx,%ax
    a817:	66 c1 e0 02          	shl    $0x2,%ax
    a81b:	67 66 8d 14          	lea    (%si),%dx
    a81f:	c5 00                	lds    (%eax),%eax
    a821:	00 00                	add    %al,(%eax)
    a823:	00 66 29             	add    %ah,0x29(%esi)
    a826:	c2 67 66             	ret    $0x6667
    a829:	8d 82 00 cb 00 00    	lea    0xcb00(%edx),%eax
    a82f:	66 83 c0 04          	add    $0x4,%ax
    a833:	66 68 18 dc          	pushw  $0xdc18
    a837:	00 00                	add    %al,(%eax)
    a839:	66 50                	push   %ax
    a83b:	66 e8 4c fb          	callw  a38b <enqueue+0x6a>
    a83f:	ff                   	(bad)  
    a840:	ff 66 83             	jmp    *-0x7d(%esi)
    a843:	c4 08                	les    (%eax),%ecx
        PCB_list[v_res].prg_status = READY;
    a845:	66 a1 18 dc 66 c1    	mov    0xc166dc18,%ax
    a84b:	e0 02                	loopne a84f <do_V+0xdb>
    a84d:	66 89 c2             	mov    %ax,%dx
    a850:	66 c1 e2 04          	shl    $0x4,%dx
    a854:	66 01 d0             	add    %dx,%ax
    a857:	66 05 d0 c5          	add    $0xc5d0,%ax
    a85b:	00 00                	add    %al,(%eax)
    a85d:	67 66 c7 40 08 03 00 	movw   $0x3,0x8(%bx,%si)
    a864:	00 00                	add    %al,(%eax)
        enqueue(&readyqueue,v_res);
    a866:	66 a1 18 dc 66 50    	mov    0x5066dc18,%ax
    a86c:	66 68 80 db          	pushw  $0xdb80
    a870:	00 00                	add    %al,(%eax)
    a872:	66 e8 a9 fa          	callw  a31f <size+0x11>
    a876:	ff                   	(bad)  
    a877:	ff 66 83             	jmp    *-0x7d(%esi)
    a87a:	c4 08                	les    (%eax),%ecx
    }
    __asm__("sti\n");
    a87c:	fb                   	sti    

    a87d:	66 c9                	leavew 
    a87f:	66 c3                	retw   
