
kernel.elf:     file format elf32-i386


Disassembly of section .text:

00007d00 <_start>:
    7d00:	66 b8 00 00          	mov    $0x0,%ax
    7d04:	00 00                	add    %al,(%eax)
    7d06:	8e d8                	mov    %eax,%ds
    7d08:	8e c0                	mov    %eax,%es
    7d0a:	8e d0                	mov    %eax,%ss
    7d0c:	66 ea 14 7d 00 00    	ljmpw  $0x0,$0x7d14
	...

00007d14 <main>:
#include"../syscall/use.h"
#include"../shell/command.h"
#include"kernel.h"
#include "../syscall/stdio.h"
#include "../syscall/schedule.h"
int main(){
    7d14:	66 55                	push   %bp
    7d16:	66 89 e5             	mov    %sp,%bp
    7d19:	66 83 ec 0c          	sub    $0xc,%sp
    clearscreen();
    7d1d:	66 e8 31 01          	callw  7e52 <main+0x13e>
    7d21:	00 00                	add    %al,(%eax)
   // char str[100] = {};
    //getline(str,10);
   // prints(str);
    Initial_Int();
    7d23:	66 e8 3b 01          	callw  7e62 <clearscreen+0xe>
    7d27:	00 00                	add    %al,(%eax)
    //Initial_Int_09h();
    loadProg(10,25,0x2000);
    7d29:	66 68 00 20          	pushw  $0x2000
    7d2d:	00 00                	add    %al,(%eax)
    7d2f:	66 6a 19             	pushw  $0x19
    7d32:	66 6a 0a             	pushw  $0xa
    7d35:	66 e8 57 01          	callw  7e90 <Initial_Int_08h+0xd>
    7d39:	00 00                	add    %al,(%eax)
    7d3b:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(10,35,0x3000);
    7d3f:	66 68 00 30          	pushw  $0x3000
    7d43:	00 00                	add    %al,(%eax)
    7d45:	66 6a 23             	pushw  $0x23
    7d48:	66 6a 0a             	pushw  $0xa
    7d4b:	66 e8 41 01          	callw  7e90 <Initial_Int_08h+0xd>
    7d4f:	00 00                	add    %al,(%eax)
    7d51:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(10,45,0x4000);
    7d55:	66 68 00 40          	pushw  $0x4000
    7d59:	00 00                	add    %al,(%eax)
    7d5b:	66 6a 2d             	pushw  $0x2d
    7d5e:	66 6a 0a             	pushw  $0xa
    7d61:	66 e8 2b 01          	callw  7e90 <Initial_Int_08h+0xd>
    7d65:	00 00                	add    %al,(%eax)
    7d67:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(10,55,0x5000);
    7d6b:	66 68 00 50          	pushw  $0x5000
    7d6f:	00 00                	add    %al,(%eax)
    7d71:	66 6a 37             	pushw  $0x37
    7d74:	66 6a 0a             	pushw  $0xa
    7d77:	66 e8 15 01          	callw  7e90 <Initial_Int_08h+0xd>
    7d7b:	00 00                	add    %al,(%eax)
    7d7d:	66 83 c4 0c          	add    $0xc,%sp
    _loadP(10,65,0x6000);
    7d81:	66 68 00 60          	pushw  $0x6000
    7d85:	00 00                	add    %al,(%eax)
    7d87:	66 6a 41             	pushw  $0x41
    7d8a:	66 6a 0a             	pushw  $0xa
    7d8d:	66 e8 e5 01          	callw  7f76 <_setPoint+0x15>
    7d91:	00 00                	add    %al,(%eax)
    7d93:	66 83 c4 0c          	add    $0xc,%sp
    //initial_PCB(1);
    //struct PCB* _CurrentProg;//这样也不ok
    _CurrentProg = PCB_list + 5;//important! mov dword ptr ds:0x9e60, 0x00009d20,把PCB_list的地址9d20存到ds的9e60处，此后就直接用9e60来织带PCB_list
    7d97:	66 c7 06 c0 af       	movw   $0xafc0,(%esi)
    7d9c:	80 af 00 00 66 e8 dd 	subb   $0xdd,-0x179a0000(%edi)
    Initial_Int_08h();
    7da3:	00 00                	add    %al,(%eax)
    7da5:	00 67 66             	add    %ah,0x66(%edi)
    //struct PCB* _CurrentProg = PCB_list;//mov dword ptr ss:[ebp-4], 0x00009d20 ss:[ebp-4]里面是0000
                                        //会导致mov esi, dword ptr ds:0x9e60 
  // _RunProgress(0x6000);


    char const *Messeage = "Built by Chen Hongyang on March 20, 2018";
    7da8:	c7 45 fc 94 95 00 00 	movl   $0x9594,-0x4(%ebp)
    print("===================================================",9,12);
    7daf:	66 6a 0c             	pushw  $0xc
    7db2:	66 6a 09             	pushw  $0x9
    7db5:	66 68 c0 95          	pushw  $0x95c0
    7db9:	00 00                	add    %al,(%eax)
    7dbb:	66 e8 0e 0d          	callw  8acd <run+0x66>
    7dbf:	00 00                	add    %al,(%eax)
    7dc1:	66 83 c4 0c          	add    $0xc,%sp

    print("chenhyOS",10,32);
    7dc5:	66 6a 20             	pushw  $0x20
    7dc8:	66 6a 0a             	pushw  $0xa
    7dcb:	66 68 f4 95          	pushw  $0x95f4
    7dcf:	00 00                	add    %al,(%eax)
    7dd1:	66 e8 f8 0c          	callw  8acd <run+0x66>
    7dd5:	00 00                	add    %al,(%eax)
    7dd7:	66 83 c4 0c          	add    $0xc,%sp
   print(Messeage,11,16); //print the msg
    7ddb:	66 6a 10             	pushw  $0x10
    7dde:	66 6a 0b             	pushw  $0xb
    7de1:	67 66 ff 75 fc       	pushw  -0x4(%di)
    7de6:	66 e8 e3 0c          	callw  8acd <run+0x66>
    7dea:	00 00                	add    %al,(%eax)
    7dec:	66 83 c4 0c          	add    $0xc,%sp
   print("===================================================",12,12);
    7df0:	66 6a 0c             	pushw  $0xc
    7df3:	66 6a 0c             	pushw  $0xc
    7df6:	66 68 c0 95          	pushw  $0x95c0
    7dfa:	00 00                	add    %al,(%eax)
    7dfc:	66 e8 cd 0c          	callw  8acd <run+0x66>
    7e00:	00 00                	add    %al,(%eax)
    7e02:	66 83 c4 0c          	add    $0xc,%sp
   

   char a = getch();
    7e06:	66 e8 70 0f          	callw  8d7a <read_and_print_input+0x3a>
    7e0a:	00 00                	add    %al,(%eax)
    7e0c:	67 88 45 fb          	mov    %al,-0x5(%di)
   clearscreen(); 
    7e10:	66 e8 3e 00          	callw  7e52 <main+0x13e>
    7e14:	00 00                	add    %al,(%eax)
    char const *Msg1 = "Press any key to get help\n\r";
    7e16:	67 66 c7 45 f4 fd 95 	movw   $0x95fd,-0xc(%di)
    7e1d:	00 00                	add    %al,(%eax)
   prints(Msg1);
    7e1f:	67 66 ff 75 f4       	pushw  -0xc(%di)
    7e24:	66 e8 36 0d          	callw  8b5e <print+0x8f>
    7e28:	00 00                	add    %al,(%eax)
    7e2a:	66 83 c4 04          	add    $0x4,%sp
   print("!",13,39);
    7e2e:	66 6a 27             	pushw  $0x27
    7e31:	66 6a 0d             	pushw  $0xd
    7e34:	66 68 19 96          	pushw  $0x9619
    7e38:	00 00                	add    %al,(%eax)
    7e3a:	66 e8 8f 0c          	callw  8acd <run+0x66>
    7e3e:	00 00                	add    %al,(%eax)
    7e40:	66 83 c4 0c          	add    $0xc,%sp
   //Initial_Int();
    /*buildmap();还有待解决debug
    void *addr = (void*) 0xB100;
    _loadP(2,21,addr);
    showtable();*/
    terminal();
    7e44:	66 e8 6f 07          	callw  85b7 <RTC_Timer+0xa3>
    7e48:	00 00                	add    %al,(%eax)
    return 0;
    7e4a:	66 b8 00 00          	mov    $0x0,%ax
    7e4e:	00 00                	add    %al,(%eax)
    7e50:	66 c9                	leavew 
    7e52:	66 c3                	retw   

00007e54 <clearscreen>:
#include "use.h"
#include "schedule.h"
//====================================================
//                封装清屏函数
//====================================================
void clearscreen(){
    7e54:	66 55                	push   %bp
    7e56:	66 89 e5             	mov    %sp,%bp
	_clearscreen();//C调用汇编时会压入四个字节，必须考虑到这个，写出newret，是pop edx,而非 pop dx；
    7e59:	66 e8 aa 00          	callw  7f07 <Message32+0x10>
    7e5d:	00 00                	add    %al,(%eax)
	//__asm__("pop %ax");
	return ;
    7e5f:	90                   	nop
}
    7e60:	66 5d                	pop    %bp
    7e62:	66 c3                	retw   

00007e64 <Initial_Int>:
	}
}*/
//====================================================
//                封装中断初始化函数
//====================================================
void Initial_Int(){
    7e64:	66 55                	push   %bp
    7e66:	66 89 e5             	mov    %sp,%bp
	_initialInt();
    7e69:	66 e8 37 04          	callw  82a4 <_SetINT38h+0xd>
    7e6d:	00 00                	add    %al,(%eax)
	return;
    7e6f:	90                   	nop
}
    7e70:	66 5d                	pop    %bp
    7e72:	66 c3                	retw   

00007e74 <Initial_Int_09h>:
void Initial_Int_09h(){
    7e74:	66 55                	push   %bp
    7e76:	66 89 e5             	mov    %sp,%bp
	_initialInt_09h();
    7e79:	66 e8 58 05          	callw  83d5 <_initialInt+0x12f>
    7e7d:	00 00                	add    %al,(%eax)
}
    7e7f:	66 5d                	pop    %bp
    7e81:	66 c3                	retw   

00007e83 <Initial_Int_08h>:
void Initial_Int_08h(){
    7e83:	66 55                	push   %bp
    7e85:	66 89 e5             	mov    %sp,%bp
	_initialInt_08h();
    7e88:	66 e8 83 05          	callw  840f <_initialInt_09h+0x38>
    7e8c:	00 00                	add    %al,(%eax)
}
    7e8e:	66 5d                	pop    %bp
    7e90:	66 c3                	retw   

00007e92 <loadProg>:
void loadProg(int count,int begin,int memory_postion){
    7e92:	66 55                	push   %bp
    7e94:	66 89 e5             	mov    %sp,%bp
    _loadP(count,begin,memory_postion);
    7e97:	67 66 ff 75 10       	pushw  0x10(%di)
    7e9c:	67 66 ff 75 0c       	pushw  0xc(%di)
    7ea1:	67 66 ff 75 08       	pushw  0x8(%di)
    7ea6:	66 e8 cc 00          	callw  7f76 <_setPoint+0x15>
    7eaa:	00 00                	add    %al,(%eax)
    7eac:	66 83 c4 0c          	add    $0xc,%sp
    7eb0:	66 c9                	leavew 
    7eb2:	66 c3                	retw   
    7eb4:	66 90                	xchg   %ax,%ax
    7eb6:	66 90                	xchg   %ax,%ax
    7eb8:	66 90                	xchg   %ax,%ax
    7eba:	66 90                	xchg   %ax,%ax
    7ebc:	66 90                	xchg   %ax,%ax
    7ebe:	66 90                	xchg   %ax,%ax

00007ec0 <count>:
    7ec0:	08 2d 00 00 00 00    	or     %ch,0x0

00007ec1 <alpha>:
    7ec1:	2d 00 00 00 00       	sub    $0x0,%eax

00007ec2 <int_09_saved>:
    7ec2:	00 00                	add    %al,(%eax)
	...

00007ec6 <program_saved>:
    7ec6:	70 00                	jo     7ec8 <program_saved+0x2>
	...

00007eca <ds_saved>:
    7eca:	7c 00                	jl     7ecc <ds_saved+0x2>
	...

00007ece <return_save>:
    7ece:	88 00                	mov    %al,(%eax)

00007ed0 <esi_save>:
    7ed0:	96                   	xchg   %eax,%esi
    7ed1:	00 00                	add    %al,(%eax)
	...

00007ed4 <temp>:
    7ed4:	e8 03 b4 00 00       	call   132dc <_end+0x8318>

00007ed6 <kernelesp_saved>:
    7ed6:	b4 00                	mov    $0x0,%ah
	...

00007eda <esp_saved_inkernel>:
    7eda:	c8 00 00 00          	enter  $0x0,$0x0

00007ede <esp_saved_in_user>:
    7ede:	f0 00 00             	lock add %al,(%eax)
	...

00007ee2 <ss_saved_in_user>:
    7ee2:	2c 01                	sub    $0x1,%al
	...

00007ee6 <color>:
    7ee6:	01 54 68 65          	add    %edx,0x65(%eax,%ebp,2)

00007ee7 <Message31>:
    7ee7:	54                   	push   %esp
    7ee8:	68 65 20 74 69       	push   $0x69742065
    7eed:	6d                   	insl   (%dx),%es:(%edi)
    7eee:	65 20 6e 6f          	and    %ch,%gs:0x6f(%esi)
    7ef2:	77 20                	ja     7f14 <_printchar+0x2>
    7ef4:	69 73 20 54 68 65 20 	imul   $0x20656854,0x20(%ebx),%esi

00007ef7 <Message32>:
    7ef7:	54                   	push   %esp
    7ef8:	68 65 20 64 61       	push   $0x61642065
    7efd:	74 65                	je     7f64 <_setPoint+0x3>
    7eff:	20 74 6f 64          	and    %dh,0x64(%edi,%ebp,2)
    7f03:	61                   	popa   
    7f04:	79 20                	jns    7f26 <_printchar+0x14>
    7f06:	69 73 20 b8 03 00 cd 	imul   $0xcd0003b8,0x20(%ebx),%esi

00007f09 <_clearscreen>:
    7f09:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    7f0e:	66 5a                	pop    %dx
    7f10:	ff e2                	jmp    *%edx

00007f12 <_printchar>:
    7f12:	c8 00 00 00          	enter  $0x0,$0x0
    7f16:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
    7f1b:	57                   	push   %edi
    7f1c:	66 8b 4e 06          	mov    0x6(%esi),%cx
    7f20:	66 8b 7e 0a          	mov    0xa(%esi),%di
    7f24:	66 8b 56 0e          	mov    0xe(%esi),%dx
    7f28:	88 d5                	mov    %dl,%ch
    7f2a:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
    7f31:	00 66 5a             	add    %ah,0x5a(%esi)
    7f34:	ff e2                	jmp    *%edx

00007f36 <_readinput>:
    7f36:	c8 04 00 00          	enter  $0x4,$0x0
    7f3a:	b4 00                	mov    $0x0,%ah
    7f3c:	cd 16                	int    $0x16
    7f3e:	b4 00                	mov    $0x0,%ah
    7f40:	66 67 89 04          	mov    %ax,(%si)
    7f44:	24 66                	and    $0x66,%al
    7f46:	67 8b 04             	mov    (%si),%eax
    7f49:	24 c9                	and    $0xc9,%al
    7f4b:	66 5a                	pop    %dx
    7f4d:	ff e2                	jmp    *%edx

00007f4f <_showchar>:
    7f4f:	c8 00 00 00          	enter  $0x0,$0x0
    7f53:	8b 46 06             	mov    0x6(%esi),%eax
    7f56:	b4 0e                	mov    $0xe,%ah
    7f58:	b3 00                	mov    $0x0,%bl
    7f5a:	cd 10                	int    $0x10
    7f5c:	c9                   	leave  
    7f5d:	66 5a                	pop    %dx
    7f5f:	ff e2                	jmp    *%edx

00007f61 <_setPoint>:
    7f61:	c8 00 00 00          	enter  $0x0,$0x0
    7f65:	53                   	push   %ebx
    7f66:	b7 00                	mov    $0x0,%bh
    7f68:	8a 77 06             	mov    0x6(%edi),%dh
    7f6b:	8a 57 0a             	mov    0xa(%edi),%dl
    7f6e:	b4 02                	mov    $0x2,%ah
    7f70:	cd 10                	int    $0x10
    7f72:	5b                   	pop    %ebx
    7f73:	c9                   	leave  
    7f74:	66 5a                	pop    %dx
    7f76:	ff e2                	jmp    *%edx

00007f78 <_loadP>:
    7f78:	c8 00 00 00          	enter  $0x0,$0x0
    7f7c:	60                   	pusha  
    7f7d:	06                   	push   %es
    7f7e:	1e                   	push   %ds
    7f7f:	8c c8                	mov    %cs,%eax
    7f81:	8e d8                	mov    %eax,%ds
    7f83:	8b 46 0e             	mov    0xe(%esi),%eax
    7f86:	8e c0                	mov    %eax,%es
    7f88:	b2 00                	mov    $0x0,%dl
    7f8a:	8b 46 0a             	mov    0xa(%esi),%eax
    7f8d:	b3 12                	mov    $0x12,%bl
    7f8f:	f6 f3                	div    %bl
    7f91:	88 e1                	mov    %ah,%cl
    7f93:	30 e4                	xor    %ah,%ah
    7f95:	b3 02                	mov    $0x2,%bl
    7f97:	f6 f3                	div    %bl
    7f99:	88 e6                	mov    %ah,%dh
    7f9b:	88 c5                	mov    %al,%ch
    7f9d:	8a 46 06             	mov    0x6(%esi),%al
    7fa0:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
    7fa5:	cd 13                	int    $0x13
    7fa7:	1f                   	pop    %ds
    7fa8:	07                   	pop    %es
    7fa9:	61                   	popa   
    7faa:	c9                   	leave  
    7fab:	66 5a                	pop    %dx
    7fad:	ff e2                	jmp    *%edx

00007faf <_RunProgress>:
    7faf:	c8 00 00 00          	enter  $0x0,$0x0
    7fb3:	8c c8                	mov    %cs,%eax
    7fb5:	8e d8                	mov    %eax,%ds
    7fb7:	8e c0                	mov    %eax,%es
    7fb9:	8b 5e 06             	mov    0x6(%esi),%ebx
    7fbc:	c7 06 c6 7e 00 01    	movl   $0x1007ec6,(%esi)
    7fc2:	89 1e                	mov    %ebx,(%esi)
    7fc4:	c8 7e 66 89          	enter  $0x667e,$0x89
    7fc8:	26 da 7e 26          	fidivrl %es:0x26(%esi)
    7fcc:	ff 1e                	lcall  *(%esi)
    7fce:	c6                   	(bad)  
    7fcf:	7e 8c                	jle    7f5d <_showchar+0xe>

00007fd0 <S>:
    7fd0:	8c c8                	mov    %cs,%eax
    7fd2:	8e d8                	mov    %eax,%ds
    7fd4:	8e c0                	mov    %eax,%es
    7fd6:	8e d0                	mov    %eax,%ss
    7fd8:	66 8b 26             	mov    (%esi),%sp
    7fdb:	da 7e b4             	fidivrl -0x4c(%esi)
    7fde:	00 cd                	add    %cl,%ch
    7fe0:	16                   	push   %ss
    7fe1:	c9                   	leave  
    7fe2:	66 5a                	pop    %dx
    7fe4:	ff e2                	jmp    *%edx

00007fe6 <_SetINT20h>:
    7fe6:	fa                   	cli    
    7fe7:	1e                   	push   %ds
    7fe8:	06                   	push   %es
    7fe9:	8c c8                	mov    %cs,%eax
    7feb:	8e d8                	mov    %eax,%ds
    7fed:	8e c0                	mov    %eax,%es
    7fef:	8c 16                	mov    %ss,(%esi)
    7ff1:	e2 7e                	loop   8071 <changright+0xb>
    7ff3:	8e d0                	mov    %eax,%ss
    7ff5:	66 89 26             	mov    %sp,(%esi)
    7ff8:	de 7e 66             	fidivr 0x66(%esi)
    7ffb:	8b 26                	mov    (%esi),%esp
    7ffd:	da 7e 53             	fidivrl 0x53(%esi)
    8000:	51                   	push   %ecx
    8001:	52                   	push   %edx
    8002:	b4 01                	mov    $0x1,%ah
    8004:	cd 16                	int    $0x16
    8006:	5a                   	pop    %edx
    8007:	59                   	pop    %ecx
    8008:	5b                   	pop    %ebx
    8009:	8e 16                	mov    (%esi),%ss
    800b:	e2 7e                	loop   808b <show+0x9>
    800d:	66 8b 26             	mov    (%esi),%sp
    8010:	de 7e 07             	fidivr 0x7(%esi)
    8013:	1f                   	pop    %ds
    8014:	74 0a                	je     8020 <going_on>
    8016:	50                   	push   %eax
    8017:	b4 00                	mov    $0x0,%ah
    8019:	cd 16                	int    $0x16
    801b:	58                   	pop    %eax
    801c:	fb                   	sti    
    801d:	cd 38                	int    $0x38
    801f:	cf                   	iret   

00008020 <going_on>:
    8020:	fb                   	sti    
    8021:	cf                   	iret   

00008022 <_SetINT08h_turn_around>:
    8022:	fa                   	cli    
    8023:	e8 26 04 6a 00       	call   6a844e <_end+0x69d48a>
    8028:	e8 45 14 e8 92       	call   92e89472 <_end+0x92e7e4ae>
    802d:	04 b0                	add    $0xb0,%al
    802f:	20 e6                	and    %ah,%dh
    8031:	20 e6                	and    %ah,%dh
    8033:	a0 fb cf 60 0f       	mov    0xf60cffb,%al

00008036 <_SetINT08h>:
    8036:	60                   	pusha  
    8037:	0f a8                	push   %gs
    8039:	1e                   	push   %ds
    803a:	06                   	push   %es
    803b:	16                   	push   %ss
    803c:	8c c8                	mov    %cs,%eax
    803e:	8e c0                	mov    %eax,%es
    8040:	8e d8                	mov    %eax,%ds
    8042:	8e d0                	mov    %eax,%ss
    8044:	fe 0e                	decb   (%esi)
    8046:	c0 7e 75 4f          	sarb   $0x4f,0x75(%esi)

0000804a <notc>:
    804a:	80 3e c1             	cmpb   $0xc1,(%esi)
    804d:	7e 2d                	jle    807c <changheng+0x8>
    804f:	75 07                	jne    8058 <changleft>
    8051:	c6 06 c1             	movb   $0xc1,(%esi)
    8054:	7e 5c                	jle    80b2 <_SetINT09h+0xb>
    8056:	eb 2a                	jmp    8082 <show>

00008058 <changleft>:
    8058:	80 3e c1             	cmpb   $0xc1,(%esi)
    805b:	7e 5c                	jle    80b9 <_SetINT09h+0x12>
    805d:	75 07                	jne    8066 <changright>
    805f:	c6 06 c1             	movb   $0xc1,(%esi)
    8062:	7e 7c                	jle    80e0 <_SetINT09h+0x39>
    8064:	eb 1c                	jmp    8082 <show>

00008066 <changright>:
    8066:	80 3e c1             	cmpb   $0xc1,(%esi)
    8069:	7e 7c                	jle    80e7 <_SetINT09h+0x40>
    806b:	75 07                	jne    8074 <changheng>
    806d:	c6 06 c1             	movb   $0xc1,(%esi)
    8070:	7e 2f                	jle    80a1 <end+0x8>
    8072:	eb 0e                	jmp    8082 <show>

00008074 <changheng>:
    8074:	80 3e c1             	cmpb   $0xc1,(%esi)
    8077:	7e 2f                	jle    80a8 <_SetINT09h+0x1>
    8079:	75 cf                	jne    804a <notc>
    807b:	c6 06 c1             	movb   $0xc1,(%esi)
    807e:	7e 2d                	jle    80ad <_SetINT09h+0x6>
    8080:	eb 00                	jmp    8082 <show>

00008082 <show>:
    8082:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    8087:	b4 09                	mov    $0x9,%ah
    8089:	8a 26                	mov    (%esi),%ah
    808b:	e6 7e                	out    %al,$0x7e
    808d:	a0 c1 7e 65 a3       	mov    0xa3657ec1,%al
    8092:	8e 00                	mov    (%eax),%es
    8094:	c6 06 c0             	movb   $0xc0,(%esi)
    8097:	7e 08                	jle    80a1 <end+0x8>

00008099 <end>:
    8099:	b0 20                	mov    $0x20,%al
    809b:	e6 20                	out    %al,$0x20
    809d:	e6 a0                	out    %al,$0xa0
    809f:	17                   	pop    %ss
    80a0:	07                   	pop    %es
    80a1:	1f                   	pop    %ds
    80a2:	0f a9                	pop    %gs
    80a4:	61                   	popa   
    80a5:	fb                   	sti    
    80a6:	cf                   	iret   

000080a7 <_SetINT09h>:
    80a7:	fa                   	cli    
    80a8:	1e                   	push   %ds
    80a9:	06                   	push   %es
    80aa:	8c c8                	mov    %cs,%eax
    80ac:	8e d8                	mov    %eax,%ds
    80ae:	8e c0                	mov    %eax,%es
    80b0:	8e d0                	mov    %eax,%ss
    80b2:	8c 16                	mov    %ss,(%esi)
    80b4:	e2 7e                	loop   8134 <cont+0x1a>
    80b6:	8e d0                	mov    %eax,%ss
    80b8:	66 89 26             	mov    %sp,(%esi)
    80bb:	de 7e 66             	fidivr 0x66(%esi)
    80be:	8b 26                	mov    (%esi),%esp
    80c0:	da 7e 60             	fidivrl 0x60(%esi)
    80c3:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    80c8:	8a 26                	mov    (%esi),%ah
    80ca:	e6 7e                	out    %al,$0x7e
    80cc:	b0 4f                	mov    $0x4f,%al
    80ce:	65 a3 78 00 b0 55    	mov    %eax,%gs:0x55b00078
    80d4:	65 a3 7a 00 b0 43    	mov    %eax,%gs:0x43b0007a
    80da:	65 a3 7c 00 b0 48    	mov    %eax,%gs:0x48b0007c
    80e0:	65 a3 7e 00 b0 53    	mov    %eax,%gs:0x53b0007e
    80e6:	65 a3 80 00 b0 21    	mov    %eax,%gs:0x21b00080
    80ec:	65 a3 82 00 b0 4f    	mov    %eax,%gs:0x4fb00082
    80f2:	65 a3 84 00 b0 55    	mov    %eax,%gs:0x55b00084
    80f8:	65 a3 86 00 b0 43    	mov    %eax,%gs:0x43b00086
    80fe:	65 a3 88 00 b0 48    	mov    %eax,%gs:0x48b00088
    8104:	65 a3 8a 00 b0 21    	mov    %eax,%gs:0x21b0008a
    810a:	65 a3 8c 00 61 80    	mov    %eax,%gs:0x8061008c
    8110:	fc                   	cld    
    8111:	06                   	push   %es
    8112:	75 06                	jne    811a <cont>
    8114:	b4 01                	mov    $0x1,%ah
    8116:	88 26                	mov    %ah,(%esi)
    8118:	e6 7e                	out    %al,$0x7e

0000811a <cont>:
    811a:	fe 06                	incb   (%esi)
    811c:	e6 7e                	out    %al,$0x7e
    811e:	8c c8                	mov    %cs,%eax
    8120:	8e c0                	mov    %eax,%es
    8122:	fb                   	sti    
    8123:	9c                   	pushf  
    8124:	26 ff 1e             	lcall  *%es:(%esi)
    8127:	c2 7e 8e             	ret    $0x8e7e
    812a:	16                   	push   %ss
    812b:	e2 7e                	loop   81ab <_SetINT35h+0xa>
    812d:	66 8b 26             	mov    (%esi),%sp
    8130:	de 7e 07             	fidivr 0x7(%esi)
    8133:	1f                   	pop    %ds
    8134:	cf                   	iret   

00008135 <_SetINT33h>:
    8135:	fa                   	cli    
    8136:	c8 00 00 00          	enter  $0x0,$0x0
    813a:	60                   	pusha  
    813b:	1e                   	push   %ds
    813c:	0f a8                	push   %gs
    813e:	06                   	push   %es
    813f:	8c c8                	mov    %cs,%eax
    8141:	8e c0                	mov    %eax,%es
    8143:	8e d8                	mov    %eax,%ds
    8145:	8c 16                	mov    %ss,(%esi)
    8147:	e2 7e                	loop   81c7 <_SetINT35h+0x26>
    8149:	8e d0                	mov    %eax,%ss
    814b:	66 89 26             	mov    %sp,(%esi)
    814e:	de 7e 66             	fidivr 0x66(%esi)
    8151:	8b 26                	mov    (%esi),%esp
    8153:	da 7e 6a             	fidivrl 0x6a(%esi)
    8156:	00 e8                	add    %ch,%al
    8158:	7d 0f                	jge    8169 <_SetINT33h+0x34>
    815a:	8e 16                	mov    (%esi),%ss
    815c:	e2 7e                	loop   81dc <_SetINT36h+0xb>
    815e:	66 8b 26             	mov    (%esi),%sp
    8161:	de 7e 07             	fidivr 0x7(%esi)
    8164:	0f a9                	pop    %gs
    8166:	1f                   	pop    %ds
    8167:	61                   	popa   
    8168:	fb                   	sti    
    8169:	c9                   	leave  
    816a:	cf                   	iret   

0000816b <_SetINT34h>:
    816b:	fa                   	cli    
    816c:	c8 00 00 00          	enter  $0x0,$0x0
    8170:	60                   	pusha  
    8171:	1e                   	push   %ds
    8172:	0f a8                	push   %gs
    8174:	06                   	push   %es
    8175:	8c c8                	mov    %cs,%eax
    8177:	8e c0                	mov    %eax,%es
    8179:	8e d8                	mov    %eax,%ds
    817b:	8c 16                	mov    %ss,(%esi)
    817d:	e2 7e                	loop   81fd <_SetINT36h+0x2c>
    817f:	8e d0                	mov    %eax,%ss
    8181:	66 89 26             	mov    %sp,(%esi)
    8184:	de 7e 66             	fidivr 0x66(%esi)
    8187:	8b 26                	mov    (%esi),%esp
    8189:	da 7e 6a             	fidivrl 0x6a(%esi)
    818c:	00 e8                	add    %ch,%al
    818e:	f7                   	(bad)  
    818f:	0f 8e 16 e2 7e 66    	jle    667f63ab <_end+0x667eb3e7>
    8195:	8b 26                	mov    (%esi),%esp
    8197:	de 7e 07             	fidivr 0x7(%esi)
    819a:	0f a9                	pop    %gs
    819c:	1f                   	pop    %ds
    819d:	61                   	popa   
    819e:	fb                   	sti    
    819f:	c9                   	leave  
    81a0:	cf                   	iret   

000081a1 <_SetINT35h>:
    81a1:	60                   	pusha  
    81a2:	1e                   	push   %ds
    81a3:	0f a8                	push   %gs
    81a5:	06                   	push   %es
    81a6:	8c c8                	mov    %cs,%eax
    81a8:	8e c0                	mov    %eax,%es
    81aa:	8e d8                	mov    %eax,%ds
    81ac:	8c 16                	mov    %ss,(%esi)
    81ae:	e2 7e                	loop   822e <fn0>
    81b0:	8e d0                	mov    %eax,%ss
    81b2:	66 89 26             	mov    %sp,(%esi)
    81b5:	de 7e 66             	fidivr 0x66(%esi)
    81b8:	8b 26                	mov    (%esi),%esp
    81ba:	da 7e 6a             	fidivrl 0x6a(%esi)
    81bd:	00 e8                	add    %ch,%al
    81bf:	a5                   	movsl  %ds:(%esi),%es:(%edi)
    81c0:	10 8e 16 e2 7e 66    	adc    %cl,0x667ee216(%esi)
    81c6:	8b 26                	mov    (%esi),%esp
    81c8:	de 7e 07             	fidivr 0x7(%esi)
    81cb:	0f a9                	pop    %gs
    81cd:	1f                   	pop    %ds
    81ce:	61                   	popa   
    81cf:	fb                   	sti    
    81d0:	cf                   	iret   

000081d1 <_SetINT36h>:
    81d1:	60                   	pusha  
    81d2:	1e                   	push   %ds
    81d3:	0f a8                	push   %gs
    81d5:	06                   	push   %es
    81d6:	8c c8                	mov    %cs,%eax
    81d8:	8e c0                	mov    %eax,%es
    81da:	8e d8                	mov    %eax,%ds
    81dc:	8c 16                	mov    %ss,(%esi)
    81de:	e2 7e                	loop   825e <fn1+0x20>
    81e0:	8e d0                	mov    %eax,%ss
    81e2:	66 89 26             	mov    %sp,(%esi)
    81e5:	de 7e 66             	fidivr 0x66(%esi)
    81e8:	8b 26                	mov    (%esi),%esp
    81ea:	da 7e 6a             	fidivrl 0x6a(%esi)
    81ed:	00 e8                	add    %ch,%al
    81ef:	fb                   	sti    
    81f0:	10 8e 16 e2 7e 66    	adc    %cl,0x667ee216(%esi)
    81f6:	8b 26                	mov    (%esi),%esp
    81f8:	de 7e 07             	fidivr 0x7(%esi)
    81fb:	0f a9                	pop    %gs
    81fd:	1f                   	pop    %ds
    81fe:	61                   	popa   
    81ff:	fb                   	sti    
    8200:	cf                   	iret   

00008201 <_SetINT21h>:
    8201:	c8 00 00 00          	enter  $0x0,$0x0
    8205:	60                   	pusha  
    8206:	1e                   	push   %ds
    8207:	0f a8                	push   %gs
    8209:	06                   	push   %es
    820a:	8c c8                	mov    %cs,%eax
    820c:	8e c0                	mov    %eax,%es
    820e:	8e d8                	mov    %eax,%ds
    8210:	8b 46 08             	mov    0x8(%esi),%eax
    8213:	80 fc 00             	cmp    $0x0,%ah
    8216:	74 16                	je     822e <fn0>
    8218:	80 fc 01             	cmp    $0x1,%ah
    821b:	74 21                	je     823e <fn1>
    821d:	80 fc 02             	cmp    $0x2,%ah
    8220:	74 3d                	je     825f <fn2>
    8222:	80 fc 03             	cmp    $0x3,%ah
    8225:	74 5f                	je     8286 <fn3>
    8227:	07                   	pop    %es
    8228:	0f a9                	pop    %gs
    822a:	1f                   	pop    %ds
    822b:	61                   	popa   
    822c:	c9                   	leave  
    822d:	cf                   	iret   

0000822e <fn0>:
    822e:	8b 46 0a             	mov    0xa(%esi),%eax
    8231:	b4 0e                	mov    $0xe,%ah
    8233:	b3 00                	mov    $0x0,%bl
    8235:	cd 10                	int    $0x10
    8237:	07                   	pop    %es
    8238:	0f a9                	pop    %gs
    823a:	1f                   	pop    %ds
    823b:	61                   	popa   
    823c:	c9                   	leave  
    823d:	cf                   	iret   

0000823e <fn1>:
    823e:	66 83 ec 04          	sub    $0x4,%sp
    8242:	b4 00                	mov    $0x0,%ah
    8244:	cd 16                	int    $0x16
    8246:	b4 00                	mov    $0x0,%ah
    8248:	66 67 89 04          	mov    %ax,(%si)
    824c:	24 66                	and    $0x66,%al
    824e:	67 8b 04             	mov    (%si),%eax
    8251:	24 66                	and    $0x66,%al
    8253:	83 c4 04             	add    $0x4,%esp
    8256:	8e e0                	mov    %eax,%fs
    8258:	07                   	pop    %es
    8259:	0f a9                	pop    %gs
    825b:	1f                   	pop    %ds
    825c:	61                   	popa   
    825d:	c9                   	leave  
    825e:	cf                   	iret   

0000825f <fn2>:
    825f:	66 83 ec 04          	sub    $0x4,%sp
    8263:	b4 00                	mov    $0x0,%ah
    8265:	cd 16                	int    $0x16
    8267:	b4 00                	mov    $0x0,%ah
    8269:	66 67 89 04          	mov    %ax,(%si)
    826d:	24 66                	and    $0x66,%al
    826f:	67 8b 04             	mov    (%si),%eax
    8272:	24 b4                	and    $0xb4,%al
    8274:	0e                   	push   %cs
    8275:	b3 00                	mov    $0x0,%bl
    8277:	cd 10                	int    $0x10
    8279:	66 83 c4 04          	add    $0x4,%sp
    827d:	8e e0                	mov    %eax,%fs
    827f:	07                   	pop    %es
    8280:	0f a9                	pop    %gs
    8282:	1f                   	pop    %ds
    8283:	61                   	popa   
    8284:	c9                   	leave  
    8285:	cf                   	iret   

00008286 <fn3>:
    8286:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    828b:	07                   	pop    %es
    828c:	0f a9                	pop    %gs
    828e:	1f                   	pop    %ds
    828f:	61                   	popa   
    8290:	c9                   	leave  
    8291:	cf                   	iret   

00008292 <_SetINT37h>:
    8292:	fa                   	cli    
    8293:	e8 7e 02 cf fa       	call   facf8516 <_end+0xfaced552>

00008297 <_SetINT38h>:
    8297:	fa                   	cli    
    8298:	50                   	push   %eax
    8299:	1e                   	push   %ds
    829a:	8c c8                	mov    %cs,%eax
    829c:	8e d8                	mov    %eax,%ds
    829e:	6a 00                	push   $0x0
    82a0:	e8 b6 12 1f 58       	call   581f955b <_end+0x581ee597>
    82a5:	cf                   	iret   

000082a6 <_initialInt>:
    82a6:	c8 00 00 00          	enter  $0x0,$0x0
    82aa:	60                   	pusha  
    82ab:	06                   	push   %es
    82ac:	1e                   	push   %ds
    82ad:	8c c8                	mov    %cs,%eax
    82af:	8e d8                	mov    %eax,%ds
    82b1:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    82b6:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
    82bb:	00 f7                	add    %dh,%bh
    82bd:	e3 89                	jecxz  8248 <fn1+0xa>
    82bf:	c7                   	(bad)  
    82c0:	b8 e6 7f 26 89       	mov    $0x89267fe6,%eax
    82c5:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    82ca:	45                   	inc    %ebp
    82cb:	02 1f                	add    (%edi),%bl
    82cd:	07                   	pop    %es
    82ce:	61                   	popa   
    82cf:	60                   	pusha  
    82d0:	06                   	push   %es
    82d1:	1e                   	push   %ds
    82d2:	8c c8                	mov    %cs,%eax
    82d4:	8e d8                	mov    %eax,%ds
    82d6:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    82db:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
    82e0:	00 f7                	add    %dh,%bh
    82e2:	e3 89                	jecxz  826d <fn2+0xe>
    82e4:	c7                   	(bad)  
    82e5:	b8 35 81 26 89       	mov    $0x89268135,%eax
    82ea:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    82ef:	45                   	inc    %ebp
    82f0:	02 1f                	add    (%edi),%bl
    82f2:	07                   	pop    %es
    82f3:	61                   	popa   
    82f4:	60                   	pusha  
    82f5:	06                   	push   %es
    82f6:	1e                   	push   %ds
    82f7:	8c c8                	mov    %cs,%eax
    82f9:	8e d8                	mov    %eax,%ds
    82fb:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8300:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
    8305:	00 f7                	add    %dh,%bh
    8307:	e3 89                	jecxz  8292 <_SetINT37h>
    8309:	c7                   	(bad)  
    830a:	b8 6b 81 26 89       	mov    $0x8926816b,%eax
    830f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8314:	45                   	inc    %ebp
    8315:	02 1f                	add    (%edi),%bl
    8317:	07                   	pop    %es
    8318:	61                   	popa   
    8319:	60                   	pusha  
    831a:	06                   	push   %es
    831b:	1e                   	push   %ds
    831c:	8c c8                	mov    %cs,%eax
    831e:	8e d8                	mov    %eax,%ds
    8320:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8325:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
    832a:	00 f7                	add    %dh,%bh
    832c:	e3 89                	jecxz  82b7 <_initialInt+0x11>
    832e:	c7                   	(bad)  
    832f:	b8 a1 81 26 89       	mov    $0x892681a1,%eax
    8334:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8339:	45                   	inc    %ebp
    833a:	02 1f                	add    (%edi),%bl
    833c:	07                   	pop    %es
    833d:	61                   	popa   
    833e:	60                   	pusha  
    833f:	06                   	push   %es
    8340:	1e                   	push   %ds
    8341:	8c c8                	mov    %cs,%eax
    8343:	8e d8                	mov    %eax,%ds
    8345:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    834a:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
    834f:	00 f7                	add    %dh,%bh
    8351:	e3 89                	jecxz  82dc <_initialInt+0x36>
    8353:	c7                   	(bad)  
    8354:	b8 d1 81 26 89       	mov    $0x892681d1,%eax
    8359:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    835e:	45                   	inc    %ebp
    835f:	02 1f                	add    (%edi),%bl
    8361:	07                   	pop    %es
    8362:	61                   	popa   
    8363:	60                   	pusha  
    8364:	06                   	push   %es
    8365:	1e                   	push   %ds
    8366:	8c c8                	mov    %cs,%eax
    8368:	8e d8                	mov    %eax,%ds
    836a:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    836f:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
    8374:	00 f7                	add    %dh,%bh
    8376:	e3 89                	jecxz  8301 <_initialInt+0x5b>
    8378:	c7                   	(bad)  
    8379:	b8 01 82 26 89       	mov    $0x89268201,%eax
    837e:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8383:	45                   	inc    %ebp
    8384:	02 1f                	add    (%edi),%bl
    8386:	07                   	pop    %es
    8387:	61                   	popa   
    8388:	60                   	pusha  
    8389:	06                   	push   %es
    838a:	1e                   	push   %ds
    838b:	8c c8                	mov    %cs,%eax
    838d:	8e d8                	mov    %eax,%ds
    838f:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8394:	b8 37 00 bb 04       	mov    $0x4bb0037,%eax
    8399:	00 f7                	add    %dh,%bh
    839b:	e3 89                	jecxz  8326 <_initialInt+0x80>
    839d:	c7                   	(bad)  
    839e:	b8 92 82 26 89       	mov    $0x89268292,%eax
    83a3:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    83a8:	45                   	inc    %ebp
    83a9:	02 1f                	add    (%edi),%bl
    83ab:	07                   	pop    %es
    83ac:	61                   	popa   
    83ad:	60                   	pusha  
    83ae:	06                   	push   %es
    83af:	1e                   	push   %ds
    83b0:	8c c8                	mov    %cs,%eax
    83b2:	8e d8                	mov    %eax,%ds
    83b4:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    83b9:	b8 38 00 bb 04       	mov    $0x4bb0038,%eax
    83be:	00 f7                	add    %dh,%bh
    83c0:	e3 89                	jecxz  834b <_initialInt+0xa5>
    83c2:	c7                   	(bad)  
    83c3:	b8 97 82 26 89       	mov    $0x89268297,%eax
    83c8:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    83cd:	45                   	inc    %ebp
    83ce:	02 1f                	add    (%edi),%bl
    83d0:	07                   	pop    %es
    83d1:	61                   	popa   
    83d2:	c9                   	leave  
    83d3:	66 5a                	pop    %dx
    83d5:	ff e2                	jmp    *%edx

000083d7 <_initialInt_09h>:
    83d7:	c8 00 00 00          	enter  $0x0,$0x0
    83db:	a1 24 00 a3 c2       	mov    0xc2a30024,%eax
    83e0:	7e a1                	jle    8383 <_initialInt+0xdd>
    83e2:	26 00 a3 c4 7e 60 06 	add    %ah,%es:0x6607ec4(%ebx)
    83e9:	1e                   	push   %ds
    83ea:	8c c8                	mov    %cs,%eax
    83ec:	8e d8                	mov    %eax,%ds
    83ee:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    83f3:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
    83f8:	00 f7                	add    %dh,%bh
    83fa:	e3 89                	jecxz  8385 <_initialInt+0xdf>
    83fc:	c7                   	(bad)  
    83fd:	b8 a7 80 26 89       	mov    $0x892680a7,%eax
    8402:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8407:	45                   	inc    %ebp
    8408:	02 1f                	add    (%edi),%bl
    840a:	07                   	pop    %es
    840b:	61                   	popa   
    840c:	c9                   	leave  
    840d:	66 5a                	pop    %dx
    840f:	ff e2                	jmp    *%edx

00008411 <_initialInt_08h>:
    8411:	c8 00 00 00          	enter  $0x0,$0x0
    8415:	b0 40                	mov    $0x40,%al
    8417:	e6 43                	out    %al,$0x43
    8419:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
    841e:	88 e0                	mov    %ah,%al
    8420:	e6 40                	out    %al,$0x40
    8422:	60                   	pusha  
    8423:	06                   	push   %es
    8424:	1e                   	push   %ds
    8425:	8c c8                	mov    %cs,%eax
    8427:	8e d8                	mov    %eax,%ds
    8429:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    842e:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
    8433:	00 f7                	add    %dh,%bh
    8435:	e3 89                	jecxz  83c0 <_initialInt+0x11a>
    8437:	c7                   	(bad)  
    8438:	b8 22 80 26 89       	mov    $0x89268022,%eax
    843d:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8442:	45                   	inc    %ebp
    8443:	02 1f                	add    (%edi),%bl
    8445:	07                   	pop    %es
    8446:	61                   	popa   
    8447:	c9                   	leave  
    8448:	66 5a                	pop    %dx
    844a:	ff e2                	jmp    *%edx

0000844c <_save>:
    844c:	66 89 26             	mov    %sp,(%esi)
    844f:	da 7e 1e             	fidivrl 0x1e(%esi)
    8452:	0e                   	push   %cs
    8453:	1f                   	pop    %ds
    8454:	8f 06                	popl   (%esi)
    8456:	ca 7e 8f             	lret   $0x8f7e
    8459:	06                   	push   %es
    845a:	ce                   	into   
    845b:	7e 66                	jle    84c3 <_restart+0x3>
    845d:	89 26                	mov    %esp,(%esi)
    845f:	d6                   	(bad)  
    8460:	7e 66                	jle    84c8 <_restart+0x8>
    8462:	89 36                	mov    %esi,(%esi)
    8464:	d0 7e 66             	sarb   0x66(%esi)
    8467:	8b 36                	mov    (%esi),%esi
    8469:	c0 af 66 83 c6 2c 67 	shrb   $0x67,0x2cc68366(%edi)
    8470:	8f 06                	popl   (%esi)
    8472:	67 8f 46 04          	popl   0x4(%bp)
    8476:	67 c7 46 06 00 00 67 	movl   $0x8f670000,0x6(%bp)
    847d:	8f 
    847e:	46                   	inc    %esi
    847f:	08 67 c7             	or     %ah,-0x39(%edi)
    8482:	46                   	inc    %esi
    8483:	0a 00                	or     (%eax),%al
    8485:	00 66 67             	add    %ah,0x67(%esi)
    8488:	89 66 fc             	mov    %esp,-0x4(%esi)
    848b:	67 8c 56 f8          	mov    %ss,-0x8(%bp)
    848f:	8c de                	mov    %ds,%esi
    8491:	8e d6                	mov    %esi,%ss
    8493:	66 8b 26             	mov    (%esi),%sp
    8496:	c0 af 66 83 c4 24 6a 	shrb   $0x6a,0x24c48366(%edi)
    849d:	00 ff                	add    %bh,%bh
    849f:	36                   	ss
    84a0:	ca 7e 6a             	lret   $0x6a7e
    84a3:	00 06                	add    %al,(%esi)
    84a5:	66 55                	push   %bp
    84a7:	66 57                	push   %di
    84a9:	66 ff 36             	pushw  (%esi)
    84ac:	d0 7e 66             	sarb   0x66(%esi)
    84af:	52                   	push   %edx
    84b0:	66 51                	push   %cx
    84b2:	66 53                	push   %bx
    84b4:	66 50                	push   %ax
    84b6:	66 8b 26             	mov    (%esi),%sp
    84b9:	d6                   	(bad)  
    84ba:	7e a1                	jle    845d <_save+0x11>
    84bc:	ce                   	into   
    84bd:	7e ff                	jle    84be <_save+0x72>
    84bf:	e0 66                	loopne 8527 <RTC_Timer+0x13>

000084c0 <_restart>:
    84c0:	66 89 26             	mov    %sp,(%esi)
    84c3:	d6                   	(bad)  
    84c4:	7e 66                	jle    852c <RTC_Timer+0x18>
    84c6:	8b 26                	mov    (%esi),%esp
    84c8:	c0 af 66 58 66 5b 66 	shrb   $0x66,0x5b665866(%edi)
    84cf:	59                   	pop    %ecx
    84d0:	66 5a                	pop    %dx
    84d2:	66 5e                	pop    %si
    84d4:	66 5f                	pop    %di
    84d6:	66 5d                	pop    %bp
    84d8:	07                   	pop    %es
    84d9:	8f 06                	popl   (%esi)
    84db:	d4 7e                	aam    $0x7e
    84dd:	8f 06                	popl   (%esi)
    84df:	ca 7e 8f             	lret   $0x8f7e
    84e2:	06                   	push   %es
    84e3:	d4 7e                	aam    $0x7e
    84e5:	66 89 36             	mov    %si,(%esi)
    84e8:	d0 7e 17             	sarb   0x17(%esi)
    84eb:	8f 06                	popl   (%esi)
    84ed:	d4 7e                	aam    $0x7e
    84ef:	66 89 e6             	mov    %sp,%si
    84f2:	66 67 8b 26 67 ff    	mov    -0x99,%sp
    84f8:	76 0c                	jbe    8506 <_restart+0x46>
    84fa:	67 ff 76 08          	pushl  0x8(%bp)
    84fe:	67 ff 76 04          	pushl  0x4(%bp)
    8502:	66 8b 36             	mov    (%esi),%si
    8505:	d0 7e 8e             	sarb   -0x72(%esi)
    8508:	1e                   	push   %ds
    8509:	ca 7e 50             	lret   $0x507e
    850c:	b0 20                	mov    $0x20,%al
    850e:	e6 20                	out    %al,$0x20
    8510:	e6 a0                	out    %al,$0xa0
    8512:	58                   	pop    %eax
    8513:	cf                   	iret   

00008514 <RTC_Timer>:
    8514:	c8 00 00 00          	enter  $0x0,$0x0
    8518:	1e                   	push   %ds
    8519:	06                   	push   %es
    851a:	60                   	pusha  
    851b:	8c c8                	mov    %cs,%eax
    851d:	8e d8                	mov    %eax,%ds
    851f:	8c c8                	mov    %cs,%eax
    8521:	8e c0                	mov    %eax,%es
    8523:	bf 20 ae b4 02       	mov    $0x2b4ae20,%edi
    8528:	cd 1a                	int    $0x1a
    852a:	88 e8                	mov    %ch,%al
    852c:	b4 00                	mov    $0x0,%ah
    852e:	b3 10                	mov    $0x10,%bl
    8530:	f6 f3                	div    %bl
    8532:	04 30                	add    $0x30,%al
    8534:	88 05 b4 02 cd 1a    	mov    %al,0x1acd02b4
    853a:	88 e8                	mov    %ch,%al
    853c:	24 0f                	and    $0xf,%al
    853e:	04 30                	add    $0x30,%al
    8540:	88 45 01             	mov    %al,0x1(%ebp)
    8543:	c6 45 02 20          	movb   $0x20,0x2(%ebp)
    8547:	c6 45 03 68          	movb   $0x68,0x3(%ebp)
    854b:	c6 45 04 20          	movb   $0x20,0x4(%ebp)
    854f:	b4 02                	mov    $0x2,%ah
    8551:	cd 1a                	int    $0x1a
    8553:	88 c8                	mov    %cl,%al
    8555:	b4 00                	mov    $0x0,%ah
    8557:	b3 10                	mov    $0x10,%bl
    8559:	f6 f3                	div    %bl
    855b:	04 30                	add    $0x30,%al
    855d:	88 45 05             	mov    %al,0x5(%ebp)
    8560:	b4 02                	mov    $0x2,%ah
    8562:	cd 1a                	int    $0x1a
    8564:	88 c8                	mov    %cl,%al
    8566:	24 0f                	and    $0xf,%al
    8568:	04 30                	add    $0x30,%al
    856a:	88 45 06             	mov    %al,0x6(%ebp)
    856d:	c6 45 07 20          	movb   $0x20,0x7(%ebp)
    8571:	c6 45 08 6d          	movb   $0x6d,0x8(%ebp)
    8575:	c6 45 09 20          	movb   $0x20,0x9(%ebp)
    8579:	8c c8                	mov    %cs,%eax
    857b:	8e d8                	mov    %eax,%ds
    857d:	8e c0                	mov    %eax,%es
    857f:	bd e7 7e 8c d8       	mov    $0xd88c7ee7,%ebp
    8584:	8e c0                	mov    %eax,%es
    8586:	b9 10 00 b8 01       	mov    $0x1b80010,%ecx
    858b:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
    8591:	b2 0a                	mov    $0xa,%dl
    8593:	cd 10                	int    $0x10
    8595:	8c c8                	mov    %cs,%eax
    8597:	8e d8                	mov    %eax,%ds
    8599:	8e c0                	mov    %eax,%es
    859b:	bd 20 ae 8c d8       	mov    $0xd88cae20,%ebp
    85a0:	8e c0                	mov    %eax,%es
    85a2:	b9 0f 00 b8 01       	mov    $0x1b8000f,%ecx
    85a7:	13 bb 0f 00 b6 0a    	adc    0xab6000f(%ebx),%edi
    85ad:	b2 1e                	mov    $0x1e,%dl
    85af:	cd 10                	int    $0x10
    85b1:	61                   	popa   
    85b2:	07                   	pop    %es
    85b3:	1f                   	pop    %ds
    85b4:	c9                   	leave  
    85b5:	66 5a                	pop    %dx
    85b7:	ff e2                	jmp    *%edx

000085b9 <terminal>:
#include "../syscall/use.h"
#include "command.h"
#include "../syscall/stdio.h"
void run(int queue[],int size);
int terminal(){
    85b9:	66 55                	push   %bp
    85bb:	66 89 e5             	mov    %sp,%bp
    85be:	66 57                	push   %di
    85c0:	66 56                	push   %si
    85c2:	66 53                	push   %bx
    85c4:	66 83 ec 60          	sub    $0x60,%sp
    85c8:	66 89 e0             	mov    %sp,%ax
    85cb:	66 89 c6             	mov    %ax,%si
    char const *CMDHead = "hongyangchendeMacBook-Air:chenhyOS users$ ";
    85ce:	67 66 c7 45 e4 1c 96 	movw   $0x961c,-0x1c(%di)
    85d5:	00 00                	add    %al,(%eax)
    char const *controlMsg1 = "The queue is full,waiting for the Enter Key.";
    85d7:	67 66 c7 45 e0 48 96 	movw   $0x9648,-0x20(%di)
    85de:	00 00                	add    %al,(%eax)
    char const *controlMsg2 = "The queue is empty!";
    85e0:	67 66 c7 45 dc 75 96 	movw   $0x9675,-0x24(%di)
    85e7:	00 00                	add    %al,(%eax)
    char const *ByeByeMsg = "ByeBye";
    85e9:	67 66 c7 45 d8 89 96 	movw   $0x9689,-0x28(%di)
    85f0:	00 00                	add    %al,(%eax)
    char const *filelist = "Program1 upleft   Program2 upright  \r\nProgram3 downleft  Program4 downright";
    85f2:	67 66 c7 45 d4 90 96 	movw   $0x9690,-0x2c(%di)
    85f9:	00 00                	add    %al,(%eax)
    char const *HelpMsg1 = "Enter 1,2,3,4 to run the program\n\rEnter quit,to quit\n\rEnter help to print this script again";
    85fb:	67 66 c7 45 d0 dc 96 	movw   $0x96dc,-0x30(%di)
    8602:	00 00                	add    %al,(%eax)
    char const *help = "help";
    8604:	67 66 c7 45 cc 38 97 	movw   $0x9738,-0x34(%di)
    860b:	00 00                	add    %al,(%eax)
    char const *quit = "quit";
    860d:	67 66 c7 45 c8 3d 97 	movw   $0x973d,-0x38(%di)
    8614:	00 00                	add    %al,(%eax)
    char const *lst = "ls";
    8616:	67 66 c7 45 c4 42 97 	movw   $0x9742,-0x3c(%di)
    861d:	00 00                	add    %al,(%eax)
    int Maxsize = 10;
    861f:	67 66 c7 45 c0 0a 00 	movw   $0xa,-0x40(%di)
    8626:	00 00                	add    %al,(%eax)
    print_next_line(HelpMsg1);
    8628:	67 66 ff 75 d0       	pushw  -0x30(%di)
    862d:	66 e8 a0 06          	callw  8cd1 <printsint+0xf6>
    8631:	00 00                	add    %al,(%eax)
    8633:	66 83 c4 04          	add    $0x4,%sp
    
            // _RunProgress(0xC000);
   prints(CMDHead);
    8637:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    863c:	66 e8 1e 05          	callw  8b5e <print+0x8f>
    8640:	00 00                	add    %al,(%eax)
    8642:	66 83 c4 04          	add    $0x4,%sp
    char recived[10] = {};
    8646:	67 66 8d 5d 96       	lea    -0x6a(%di),%bx
    864b:	66 ba 0a 00          	mov    $0xa,%dx
    864f:	00 00                	add    %al,(%eax)
    8651:	b0 00                	mov    $0x0,%al
    8653:	66 89 df             	mov    %bx,%di
    8656:	66 89 d1             	mov    %dx,%cx
    8659:	f3 aa                	rep stos %al,%es:(%edi)
    recived[0] = 0;
    865b:	67 c6 45 96 00       	movb   $0x0,-0x6a(%di)
    int index_of_str = 0;
    8660:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8667:	00 00                	add    %al,(%eax)
    int i = 1;
    8669:	67 66 c7 45 bc 01 00 	movw   $0x1,-0x44(%di)
    8670:	00 00                	add    %al,(%eax)
    int queue[Maxsize];
    8672:	67 66 8b 45 c0       	mov    -0x40(%di),%ax
    8677:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    867c:	67 66 89 55 b8       	mov    %dx,-0x48(%di)
    8681:	66 c1 e0 02          	shl    $0x2,%ax
    8685:	67 66 8d 50 03       	lea    0x3(%bx,%si),%dx
    868a:	66 b8 04 00          	mov    $0x4,%ax
    868e:	00 00                	add    %al,(%eax)
    8690:	66 48                	dec    %ax
    8692:	66 01 d0             	add    %dx,%ax
    8695:	66 bb 04 00          	mov    $0x4,%bx
    8699:	00 00                	add    %al,(%eax)
    869b:	66 ba 00 00          	mov    $0x0,%dx
    869f:	00 00                	add    %al,(%eax)
    86a1:	66 f7 f3             	div    %bx
    86a4:	66 6b c0 04          	imul   $0x4,%ax,%ax
    86a8:	66 29 c4             	sub    %ax,%sp
    86ab:	66 89 e0             	mov    %sp,%ax
    86ae:	66 83 c0 03          	add    $0x3,%ax
    86b2:	66 c1 e8 02          	shr    $0x2,%ax
    86b6:	66 c1 e0 02          	shl    $0x2,%ax
    86ba:	67 66 89 45 b4       	mov    %ax,-0x4c(%di)
    int num_of_queue = 0;
    86bf:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    86c6:	00 00                	add    %al,(%eax)
    int number = 0;
    86c8:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    86cf:	00 00                	add    %al,(%eax)
    int k = 0;
    86d1:	67 66 c7 45 b0 00 00 	movw   $0x0,-0x50(%di)
    86d8:	00 00                	add    %al,(%eax)
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    86da:	e9 6e 03 66 e8       	jmp    e8668a4d <_end+0xe865da89>
        char save = getch();
    86df:	99                   	cltd   
    86e0:	06                   	push   %es
    86e1:	00 00                	add    %al,(%eax)
    86e3:	67 88 45 af          	mov    %al,-0x51(%di)
        if(save == 32){//空格
    86e7:	67 80 7d af 20       	cmpb   $0x20,-0x51(%di)
    86ec:	75 74                	jne    8762 <terminal+0x1a9>
            if(num_of_queue == Maxsize){
    86ee:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    86f3:	67 66 3b 45 c0       	cmp    -0x40(%di),%ax
    86f8:	75 31                	jne    872b <terminal+0x172>
                prints("\n\r");
    86fa:	66 68 45 97          	pushw  $0x9745
    86fe:	00 00                	add    %al,(%eax)
    8700:	66 e8 5a 04          	callw  8b5e <print+0x8f>
    8704:	00 00                	add    %al,(%eax)
    8706:	66 83 c4 04          	add    $0x4,%sp
                print_next_line(controlMsg1);
    870a:	67 66 ff 75 e0       	pushw  -0x20(%di)
    870f:	66 e8 be 05          	callw  8cd1 <printsint+0xf6>
    8713:	00 00                	add    %al,(%eax)
    8715:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    8719:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    871e:	66 e8 3c 04          	callw  8b5e <print+0x8f>
    8722:	00 00                	add    %al,(%eax)
    8724:	66 83 c4 04          	add    $0x4,%sp
                continue;
    8728:	e9 20 03 67 66       	jmp    66678a4d <_end+0x6666da89>
            }
            printc(save);
    872d:	0f be 45 af          	movsbl -0x51(%ebp),%eax
    8731:	66 50                	push   %ax
    8733:	66 e8 79 04          	callw  8bb0 <prints+0x50>
    8737:	00 00                	add    %al,(%eax)
    8739:	66 83 c4 04          	add    $0x4,%sp
            queue[num_of_queue] = number;
    873d:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    8742:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    8747:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    874c:	67 66 89 0c          	mov    %cx,(%si)
    8750:	90                   	nop
            num_of_queue ++;
    8751:	67 66 ff 45 ec       	incw   -0x14(%di)
            number = 0;
    8756:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    875d:	00 00                	add    %al,(%eax)
            continue;
    875f:	e9 e9 02 67 80       	jmp    80678a4d <_end+0x8066da89>
        }
       else  if(save == 13){//回车
    8764:	7d af                	jge    8715 <terminal+0x15c>
    8766:	0d 0f 85 39 02       	or     $0x239850f,%eax
            int strcmp1 = strcmp(recived,quit);
    876b:	67 66 ff 75 c8       	pushw  -0x38(%di)
    8770:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    8775:	66 50                	push   %ax
    8777:	66 e8 1e 07          	callw  8e99 <print_different_color+0x86>
    877b:	00 00                	add    %al,(%eax)
    877d:	66 83 c4 08          	add    $0x8,%sp
    8781:	67 66 89 45 a8       	mov    %ax,-0x58(%di)
            int strcmp2 = strcmp(recived,help);
    8786:	67 66 ff 75 cc       	pushw  -0x34(%di)
    878b:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    8790:	66 50                	push   %ax
    8792:	66 e8 03 07          	callw  8e99 <print_different_color+0x86>
    8796:	00 00                	add    %al,(%eax)
    8798:	66 83 c4 08          	add    $0x8,%sp
    879c:	67 66 89 45 a4       	mov    %ax,-0x5c(%di)
            int strcmp3 = strcmp(recived,lst);
    87a1:	67 66 ff 75 c4       	pushw  -0x3c(%di)
    87a6:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    87ab:	66 50                	push   %ax
    87ad:	66 e8 e8 06          	callw  8e99 <print_different_color+0x86>
    87b1:	00 00                	add    %al,(%eax)
    87b3:	66 83 c4 08          	add    $0x8,%sp
    87b7:	67 66 89 45 a0       	mov    %ax,-0x60(%di)
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
    87bc:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    87c2:	75 22                	jne    87e6 <terminal+0x22d>
    87c4:	67 66 83 7d e8 00    	cmpw   $0x0,-0x18(%di)
    87ca:	75 1a                	jne    87e6 <terminal+0x22d>
    87cc:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    87d2:	74 12                	je     87e6 <terminal+0x22d>
    87d4:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    87da:	74 0a                	je     87e6 <terminal+0x22d>
    87dc:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    87e2:	0f 85 73 01 67 66    	jne    6667895b <_end+0x6666d997>
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    87e8:	83 7d a8 01          	cmpl   $0x1,-0x58(%ebp)
    87ec:	74 12                	je     8800 <terminal+0x247>
    87ee:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    87f4:	74 0a                	je     8800 <terminal+0x247>
    87f6:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    87fc:	0f 85 b9 00 66 68    	jne    686688bb <_end+0x6865d8f7>
                    print_next_line("");
    8802:	48                   	dec    %eax
    8803:	97                   	xchg   %eax,%edi
    8804:	00 00                	add    %al,(%eax)
    8806:	66 e8 c7 04          	callw  8cd1 <printsint+0xf6>
    880a:	00 00                	add    %al,(%eax)
    880c:	66 83 c4 04          	add    $0x4,%sp
                    if(strcmp1 == 1){
    8810:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    8816:	75 2b                	jne    8843 <terminal+0x28a>
                        print_next_line(ByeByeMsg);
    8818:	67 66 ff 75 d8       	pushw  -0x28(%di)
    881d:	66 e8 b0 04          	callw  8cd1 <printsint+0xf6>
    8821:	00 00                	add    %al,(%eax)
    8823:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    8827:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    882e:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    8830:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8835:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    883a:	66 01 d0             	add    %dx,%ax
    883d:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8841:	eb 64                	jmp    88a7 <terminal+0x2ee>
                    }                  
                   else if(strcmp2 == 1){
    8843:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    8849:	75 2b                	jne    8876 <terminal+0x2bd>
                         print_next_line(HelpMsg1);
    884b:	67 66 ff 75 d0       	pushw  -0x30(%di)
    8850:	66 e8 7d 04          	callw  8cd1 <printsint+0xf6>
    8854:	00 00                	add    %al,(%eax)
    8856:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    885a:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8861:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    8863:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8868:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    886d:	66 01 d0             	add    %dx,%ax
    8870:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8874:	eb 31                	jmp    88a7 <terminal+0x2ee>
                    }
                    else if(strcmp3 == 1){
    8876:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    887c:	75 29                	jne    88a7 <terminal+0x2ee>
                        print_next_line(filelist);
    887e:	67 66 ff 75 d4       	pushw  -0x2c(%di)
    8883:	66 e8 4a 04          	callw  8cd1 <printsint+0xf6>
    8887:	00 00                	add    %al,(%eax)
    8889:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    888d:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8894:	00 00                	add    %al,(%eax)
                      recived[index_of_str] = 0;
    8896:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    889b:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    88a0:	66 01 d0             	add    %dx,%ax
    88a3:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    }
                        //prints(recived);
                    prints(CMDHead);
    88a7:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    88ac:	66 e8 ae 02          	callw  8b5e <print+0x8f>
    88b0:	00 00                	add    %al,(%eax)
    88b2:	66 83 c4 04          	add    $0x4,%sp
                    continue;
    88b6:	e9 92 01 67 66       	jmp    66678a4d <_end+0x6666da89>
                }
            
                else if(number != 0||num_of_queue != 0){
    88bb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    88bf:	75 0a                	jne    88cb <terminal+0x312>
    88c1:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    88c7:	0f 84 8a 00 67 66    	je     66678957 <_end+0x6666d993>
                    if(number != 0 ){
    88cd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    88d1:	74 28                	je     88fb <terminal+0x342>
                         printsint(number);
    88d3:	67 66 ff 75 e8       	pushw  -0x18(%di)
    88d8:	66 e8 fd 02          	callw  8bd9 <printc+0x27>
    88dc:	00 00                	add    %al,(%eax)
    88de:	66 83 c4 04          	add    $0x4,%sp
                        queue[num_of_queue] = number;
    88e2:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    88e7:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    88ec:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    88f1:	67 66 89 0c          	mov    %cx,(%si)
    88f5:	90                   	nop
                        num_of_queue++;
    88f6:	67 66 ff 45 ec       	incw   -0x14(%di)
                    }
                    run(queue,num_of_queue);
    88fb:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    8900:	67 66 ff 75 ec       	pushw  -0x14(%di)
    8905:	66 50                	push   %ax
    8907:	66 e8 5a 01          	callw  8a65 <terminal+0x4ac>
    890b:	00 00                	add    %al,(%eax)
    890d:	66 83 c4 08          	add    $0x8,%sp
                    num_of_queue = 0;
    8911:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    8918:	00 00                	add    %al,(%eax)
                    number = 0;
    891a:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    8921:	00 00                	add    %al,(%eax)
                    clearscreen();
    8923:	66 e8 2b f5          	callw  7e52 <main+0x13e>
    8927:	ff                   	(bad)  
    8928:	ff 67 66             	jmp    *0x66(%edi)
                    prints(CMDHead);
    892b:	ff 75 e4             	pushl  -0x1c(%ebp)
    892e:	66 e8 2c 02          	callw  8b5e <print+0x8f>
    8932:	00 00                	add    %al,(%eax)
    8934:	66 83 c4 04          	add    $0x4,%sp
                    index_of_str = 0;
    8938:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    893f:	00 00                	add    %al,(%eax)
                    recived[index_of_str] = 0;
    8941:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8946:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    894b:	66 01 d0             	add    %dx,%ax
    894e:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    continue;
    8952:	e9 f6 00 90 e9       	jmp    e9908a4d <_end+0xe98fda89>
            int strcmp1 = strcmp(recived,quit);
            int strcmp2 = strcmp(recived,help);
            int strcmp3 = strcmp(recived,lst);
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    8957:	f2 00 66 68          	repnz add %ah,0x68(%esi)
                    recived[index_of_str] = 0;
                    continue;
                }
            }
            else{
                 prints("\n\r");
    895b:	45                   	inc    %ebp
    895c:	97                   	xchg   %eax,%edi
    895d:	00 00                	add    %al,(%eax)
    895f:	66 e8 fb 01          	callw  8b5e <print+0x8f>
    8963:	00 00                	add    %al,(%eax)
    8965:	66 83 c4 04          	add    $0x4,%sp
                print_next_line(controlMsg2);
    8969:	67 66 ff 75 dc       	pushw  -0x24(%di)
    896e:	66 e8 5f 03          	callw  8cd1 <printsint+0xf6>
    8972:	00 00                	add    %al,(%eax)
    8974:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    8978:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    897d:	66 e8 dd 01          	callw  8b5e <print+0x8f>
    8981:	00 00                	add    %al,(%eax)
    8983:	66 83 c4 04          	add    $0x4,%sp
                index_of_str = 0;
    8987:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    898e:	00 00                	add    %al,(%eax)
                recived[index_of_str] = 0;
    8990:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8995:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    899a:	66 01 d0             	add    %dx,%ax
    899d:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                continue;
    89a1:	e9 a7 00 67 80       	jmp    80678a4d <_end+0x8066da89>
            }
        }
        else if(save >= '0' && save <='9'){
    89a6:	7d af                	jge    8957 <terminal+0x39e>
    89a8:	2f                   	das    
    89a9:	7e 42                	jle    89ed <terminal+0x434>
    89ab:	67 80 7d af 39       	cmpb   $0x39,-0x51(%di)
    89b0:	7f 3b                	jg     89ed <terminal+0x434>
           printc(save);
    89b2:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    89b8:	66 50                	push   %ax
    89ba:	66 e8 f2 01          	callw  8bb0 <prints+0x50>
    89be:	00 00                	add    %al,(%eax)
    89c0:	66 83 c4 04          	add    $0x4,%sp
            number = number * 10 + save -'0';
    89c4:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
    89c9:	66 89 d0             	mov    %dx,%ax
    89cc:	66 c1 e0 02          	shl    $0x2,%ax
    89d0:	66 01 d0             	add    %dx,%ax
    89d3:	66 01 c0             	add    %ax,%ax
    89d6:	66 89 c2             	mov    %ax,%dx
    89d9:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    89df:	66 01 d0             	add    %dx,%ax
    89e2:	66 83 e8 30          	sub    $0x30,%ax
    89e6:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
           // printsint(number);
            continue;
    89eb:	eb 5e                	jmp    8a4b <terminal+0x492>
        }
        else{
           printc(save);
    89ed:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    89f3:	66 50                	push   %ax
    89f5:	66 e8 b7 01          	callw  8bb0 <prints+0x50>
    89f9:	00 00                	add    %al,(%eax)
    89fb:	66 83 c4 04          	add    $0x4,%sp
           // if(save == '-' || save == 'q' || save == 'h' || save == 'l' || save =='s'){
            if(index_of_str < 10){
    89ff:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    8a05:	7f 2c                	jg     8a33 <terminal+0x47a>
                recived[index_of_str] =  save;
    8a07:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8a0c:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8a11:	66 01 c2             	add    %ax,%dx
    8a14:	67 8a 45 af          	mov    -0x51(%di),%al
    8a18:	67 88 02             	mov    %al,(%bp,%si)
                index_of_str ++;
    8a1b:	67 66 ff 45 f0       	incw   -0x10(%di)
                recived[index_of_str] = 0;
    8a20:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8a25:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8a2a:	66 01 d0             	add    %dx,%ax
    8a2d:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8a31:	eb 18                	jmp    8a4b <terminal+0x492>
            }
            else if(index_of_str >= 10){
    8a33:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    8a39:	7e 10                	jle    8a4b <terminal+0x492>
                prints("not added");
    8a3b:	66 68 49 97          	pushw  $0x9749
    8a3f:	00 00                	add    %al,(%eax)
    8a41:	66 e8 19 01          	callw  8b5e <print+0x8f>
    8a45:	00 00                	add    %al,(%eax)
    8a47:	66 83 c4 04          	add    $0x4,%sp
    int number = 0;
    int k = 0;
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    8a4b:	67 66 83 7d bc 00    	cmpw   $0x0,-0x44(%di)
    8a51:	0f 85 88 fc 66 89    	jne    896786df <_end+0x8966d71b>
    8a57:	f4                   	hlt    
            else if(index_of_str >= 10){
                prints("not added");
            }
        }
    }
}
    8a58:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8a5d:	66 5b                	pop    %bx
    8a5f:	66 5e                	pop    %si
    8a61:	66 5f                	pop    %di
    8a63:	66 5d                	pop    %bp
    8a65:	66 c3                	retw   

00008a67 <run>:
void run(int queue[],int size){
    8a67:	66 55                	push   %bp
    8a69:	66 89 e5             	mov    %sp,%bp
    8a6c:	66 83 ec 08          	sub    $0x8,%sp
    int j = 0;
    8a70:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8a77:	00 00                	add    %al,(%eax)
    clearscreen();
    8a79:	66 e8 d5 f3          	callw  7e52 <main+0x13e>
    8a7d:	ff                   	(bad)  
    8a7e:	ff 67 66             	jmp    *0x66(%edi)
        if(queue[j] == 4){
            //_loadP(10,55,0x4000);
            _RunProgress(0x4000);
        }
    }*/
    for(j = 0;j < size;j ++){
    8a81:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    8a88:	eb 2b                	jmp    8ab5 <run+0x4e>
        initial_PCB(queue[j]);
    8a8a:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8a8f:	67 66 8d 14          	lea    (%si),%dx
    8a93:	85 00                	test   %eax,(%eax)
    8a95:	00 00                	add    %al,(%eax)
    8a97:	00 67 66             	add    %ah,0x66(%edi)
    8a9a:	8b 45 08             	mov    0x8(%ebp),%eax
    8a9d:	66 01 d0             	add    %dx,%ax
    8aa0:	67 66 8b 00          	mov    (%bx,%si),%ax
    8aa4:	66 50                	push   %ax
    8aa6:	66 e8 f9 08          	callw  93a3 <sys_printheart+0xb7>
    8aaa:	00 00                	add    %al,(%eax)
    8aac:	66 83 c4 04          	add    $0x4,%sp
        if(queue[j] == 4){
            //_loadP(10,55,0x4000);
            _RunProgress(0x4000);
        }
    }*/
    for(j = 0;j < size;j ++){
    8ab0:	67 66 ff 45 fc       	incw   -0x4(%di)
    8ab5:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8aba:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    8abf:	7c c9                	jl     8a8a <run+0x23>
        initial_PCB(queue[j]);
    }
   // clearscreen();
    char no_use = getch();
    8ac1:	66 e8 b5 02          	callw  8d7a <read_and_print_input+0x3a>
    8ac5:	00 00                	add    %al,(%eax)
    8ac7:	67 88 45 fb          	mov    %al,-0x5(%di)
    //Initial_Int_08h();
    8acb:	66 c9                	leavew 
    8acd:	66 c3                	retw   

00008acf <print>:
#include "stdio.h"
//====================================================
//              显示字符串函数，可以指定位置
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
    8acf:	66 55                	push   %bp
    8ad1:	66 89 e5             	mov    %sp,%bp
    8ad4:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    8ad8:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    8add:	66 89 d0             	mov    %dx,%ax
    8ae0:	66 c1 e0 02          	shl    $0x2,%ax
    8ae4:	66 01 d0             	add    %dx,%ax
    8ae7:	66 c1 e0 04          	shl    $0x4,%ax
    8aeb:	66 89 c2             	mov    %ax,%dx
    8aee:	67 66 8b 45 10       	mov    0x10(%di),%ax
    8af3:	66 01 d0             	add    %dx,%ax
    8af6:	66 01 c0             	add    %ax,%ax
    8af9:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    8afe:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    8b05:	00 00                	add    %al,(%eax)
	int index = 0;
    8b07:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8b0e:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    8b10:	eb 35                	jmp    8b47 <print+0x78>
		_printchar(Messeage[index],pos,color);
    8b12:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8b17:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8b1c:	66 01 d0             	add    %dx,%ax
    8b1f:	67 8a 00             	mov    (%bx,%si),%al
    8b22:	66 0f be c0          	movsbw %al,%ax
    8b26:	67 66 ff 75 f4       	pushw  -0xc(%di)
    8b2b:	67 66 ff 75 fc       	pushw  -0x4(%di)
    8b30:	66 50                	push   %ax
    8b32:	66 e8 da f3          	callw  7f10 <_clearscreen+0x7>
    8b36:	ff                   	(bad)  
    8b37:	ff 66 83             	jmp    *-0x7d(%esi)
    8b3a:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    8b3d:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    8b41:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    8b47:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8b4c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8b51:	66 01 d0             	add    %dx,%ax
    8b54:	67 8a 00             	mov    (%bx,%si),%al
    8b57:	84 c0                	test   %al,%al
    8b59:	75 b7                	jne    8b12 <print+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    8b5b:	90                   	nop
}
    8b5c:	66 c9                	leavew 
    8b5e:	66 c3                	retw   

00008b60 <prints>:
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input
    8b60:	66 55                	push   %bp
    8b62:	66 89 e5             	mov    %sp,%bp
    8b65:	66 83 ec 04          	sub    $0x4,%sp
	int index = 0;
    8b69:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8b70:	00 00                	add    %al,(%eax)
	while(Messeage[index]){
    8b72:	eb 25                	jmp    8b99 <prints+0x39>
		_showchar(Messeage[index]);
    8b74:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8b79:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8b7e:	66 01 d0             	add    %dx,%ax
    8b81:	67 8a 00             	mov    (%bx,%si),%al
    8b84:	66 0f be c0          	movsbw %al,%ax
    8b88:	66 50                	push   %ax
    8b8a:	66 e8 bf f3          	callw  7f4d <_readinput+0x17>
    8b8e:	ff                   	(bad)  
    8b8f:	ff 66 83             	jmp    *-0x7d(%esi)
    8b92:	c4 04 67             	les    (%edi,%eiz,2),%eax
		index++;
    8b95:	66 ff 45 fc          	incw   -0x4(%ebp)
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input
	int index = 0;
	while(Messeage[index]){
    8b99:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8b9e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8ba3:	66 01 d0             	add    %dx,%ax
    8ba6:	67 8a 00             	mov    (%bx,%si),%al
    8ba9:	84 c0                	test   %al,%al
    8bab:	75 c7                	jne    8b74 <prints+0x14>
		_showchar(Messeage[index]);
		index++;
	}
	return;
    8bad:	90                   	nop
}
    8bae:	66 c9                	leavew 
    8bb0:	66 c3                	retw   

00008bb2 <printc>:
//====================================================
//                显示字符函数
//====================================================
void printc(char alpha){
    8bb2:	66 55                	push   %bp
    8bb4:	66 89 e5             	mov    %sp,%bp
    8bb7:	66 83 ec 04          	sub    $0x4,%sp
    8bbb:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8bc0:	67 88 45 fc          	mov    %al,-0x4(%di)
	_showchar(alpha);
    8bc4:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    8bca:	66 50                	push   %ax
    8bcc:	66 e8 7d f3          	callw  7f4d <_readinput+0x17>
    8bd0:	ff                   	(bad)  
    8bd1:	ff 66 83             	jmp    *-0x7d(%esi)
    8bd4:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    8bd7:	66 c9                	leavew 
    8bd9:	66 c3                	retw   

00008bdb <printsint>:
//====================================================
//                数字转字符函数
//====================================================
void printsint(int num){
    8bdb:	66 55                	push   %bp
    8bdd:	66 89 e5             	mov    %sp,%bp
    8be0:	66 83 ec 2c          	sub    $0x2c,%sp
	 int save = num;
    8be4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8be9:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	 int count = 0;
    8bee:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8bf5:	00 00                	add    %al,(%eax)
	 char number[30];
	 number[count] = 0;
    8bf7:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    8bfc:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8c01:	66 01 d0             	add    %dx,%ax
    8c04:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	if(num < 0){
    8c08:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    8c0e:	79 14                	jns    8c24 <printsint+0x49>
		printc('-');
    8c10:	66 6a 2d             	pushw  $0x2d
    8c13:	66 e8 99 ff          	callw  8bb0 <prints+0x50>
    8c17:	ff                   	(bad)  
    8c18:	ff 66 83             	jmp    *-0x7d(%esi)
    8c1b:	c4 04 67             	les    (%edi,%eiz,2),%eax
		num = -num;
    8c1e:	66 f7 5d 08          	negw   0x8(%ebp)
    8c22:	eb 15                	jmp    8c39 <printsint+0x5e>
	}
	else if(num == 0){
    8c24:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    8c2a:	75 0d                	jne    8c39 <printsint+0x5e>
		printc('0');
    8c2c:	66 6a 30             	pushw  $0x30
    8c2f:	66 e8 7d ff          	callw  8bb0 <prints+0x50>
    8c33:	ff                   	(bad)  
    8c34:	ff 66 83             	jmp    *-0x7d(%esi)
    8c37:	c4 04 eb             	les    (%ebx,%ebp,8),%eax
	}
	while(num > 0){
    8c3a:	50                   	push   %eax
		number[count] = num % 10 + '0';
    8c3b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8c40:	66 b9 0a 00          	mov    $0xa,%cx
    8c44:	00 00                	add    %al,(%eax)
    8c46:	66 99                	cwtd   
    8c48:	66 f7 f9             	idiv   %cx
    8c4b:	66 89 d0             	mov    %dx,%ax
    8c4e:	66 83 c0 30          	add    $0x30,%ax
    8c52:	67 66 8d 4d d6       	lea    -0x2a(%di),%cx
    8c57:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8c5c:	66 01 ca             	add    %cx,%dx
    8c5f:	67 88 02             	mov    %al,(%bp,%si)
		num  = num / 10;
    8c62:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    8c67:	66 b8 67 66          	mov    $0x6667,%ax
    8c6b:	66 66 66 f7 e9       	data32 data32 imul %cx
    8c70:	66 c1 fa 02          	sar    $0x2,%dx
    8c74:	66 89 c8             	mov    %cx,%ax
    8c77:	66 c1 f8 1f          	sar    $0x1f,%ax
    8c7b:	66 29 c2             	sub    %ax,%dx
    8c7e:	66 89 d0             	mov    %dx,%ax
    8c81:	67 66 89 45 08       	mov    %ax,0x8(%di)
		count ++;
    8c86:	67 66 ff 45 fc       	incw   -0x4(%di)
		num = -num;
	}
	else if(num == 0){
		printc('0');
	}
	while(num > 0){
    8c8b:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    8c91:	7f a8                	jg     8c3b <printsint+0x60>
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    8c93:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8c98:	66 48                	dec    %ax
    8c9a:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    8c9f:	eb 25                	jmp    8cc6 <printsint+0xeb>
		printc(number[i]);
    8ca1:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    8ca6:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    8cab:	66 01 d0             	add    %dx,%ax
    8cae:	67 8a 00             	mov    (%bx,%si),%al
    8cb1:	66 0f be c0          	movsbw %al,%ax
    8cb5:	66 50                	push   %ax
    8cb7:	66 e8 f5 fe          	callw  8bb0 <prints+0x50>
    8cbb:	ff                   	(bad)  
    8cbc:	ff 66 83             	jmp    *-0x7d(%esi)
    8cbf:	c4 04 67             	les    (%edi,%eiz,2),%eax
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    8cc2:	66 ff 4d f8          	decw   -0x8(%ebp)
    8cc6:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    8ccc:	79 d3                	jns    8ca1 <printsint+0xc6>
		printc(number[i]);
	}
	return;
    8cce:	90                   	nop
}
    8ccf:	66 c9                	leavew 
    8cd1:	66 c3                	retw   

00008cd3 <print_next_line>:
//====================================================
//                显示字符串并换行函数
//====================================================
 void print_next_line(char const* Messeage){
    8cd3:	66 55                	push   %bp
    8cd5:	66 89 e5             	mov    %sp,%bp
	prints(Messeage);
    8cd8:	67 66 ff 75 08       	pushw  0x8(%di)
    8cdd:	66 e8 7d fe          	callw  8b5e <print+0x8f>
    8ce1:	ff                   	(bad)  
    8ce2:	ff 66 83             	jmp    *-0x7d(%esi)
    8ce5:	c4 04 66             	les    (%esi,%eiz,2),%eax
	prints("\n\r");
    8ce8:	68 53 97 00 00       	push   $0x9753
    8ced:	66 e8 6d fe          	callw  8b5e <print+0x8f>
    8cf1:	ff                   	(bad)  
    8cf2:	ff 66 83             	jmp    *-0x7d(%esi)
    8cf5:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    8cf8:	66 c9                	leavew 
    8cfa:	66 c3                	retw   

00008cfc <strlen>:
//====================================================
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
    8cfc:	66 55                	push   %bp
    8cfe:	66 89 e5             	mov    %sp,%bp
    8d01:	66 83 ec 08          	sub    $0x8,%sp
	int i = 0;
    8d05:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8d0c:	00 00                	add    %al,(%eax)
	int count = 0;
    8d0e:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8d15:	00 00                	add    %al,(%eax)
	while(Messeage[i] != 0){
    8d17:	eb 0a                	jmp    8d23 <strlen+0x27>
		i++;
    8d19:	67 66 ff 45 fc       	incw   -0x4(%di)
		count++;
    8d1e:	67 66 ff 45 f8       	incw   -0x8(%di)
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
	int i = 0;
	int count = 0;
	while(Messeage[i] != 0){
    8d23:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8d28:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8d2d:	66 01 d0             	add    %dx,%ax
    8d30:	67 8a 00             	mov    (%bx,%si),%al
    8d33:	84 c0                	test   %al,%al
    8d35:	75 e2                	jne    8d19 <strlen+0x1d>
		i++;
		count++;
	}
	return count;
    8d37:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    8d3c:	66 c9                	leavew 
    8d3e:	66 c3                	retw   

00008d40 <read_and_print_input>:
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    8d40:	66 55                	push   %bp
    8d42:	66 89 e5             	mov    %sp,%bp
    8d45:	66 83 ec 08          	sub    $0x8,%sp
    int i = 1;
    8d49:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    8d50:	00 00                	add    %al,(%eax)
    while(i){
    8d52:	eb 1c                	jmp    8d70 <read_and_print_input+0x30>
        char savechar = _readinput();
    8d54:	66 e8 dc f1          	callw  7f34 <_printchar+0x22>
    8d58:	ff                   	(bad)  
    8d59:	ff 67 88             	jmp    *-0x78(%edi)
    8d5c:	45                   	inc    %ebp
    8d5d:	fb                   	sti    
        _showchar(savechar);
    8d5e:	67 66 0f be 45 fb    	movsbw -0x5(%di),%ax
    8d64:	66 50                	push   %ax
    8d66:	66 e8 e3 f1          	callw  7f4d <_readinput+0x17>
    8d6a:	ff                   	(bad)  
    8d6b:	ff 66 83             	jmp    *-0x7d(%esi)
    8d6e:	c4 04 67             	les    (%edi,%eiz,2),%eax
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    int i = 1;
    while(i){
    8d71:	66 83 7d fc 00       	cmpw   $0x0,-0x4(%ebp)
    8d76:	75 dc                	jne    8d54 <read_and_print_input+0x14>
        char savechar = _readinput();
        _showchar(savechar);
    }
}
    8d78:	66 c9                	leavew 
    8d7a:	66 c3                	retw   

00008d7c <getch>:
//====================================================
//        等待用户输入函数，返回用户输入在缓冲区中
//====================================================
char getch(){
    8d7c:	66 55                	push   %bp
    8d7e:	66 89 e5             	mov    %sp,%bp
    8d81:	66 83 ec 04          	sub    $0x4,%sp
	char result = _readinput();
    8d85:	66 e8 ab f1          	callw  7f34 <_printchar+0x22>
    8d89:	ff                   	(bad)  
    8d8a:	ff 67 88             	jmp    *-0x78(%edi)
    8d8d:	45                   	inc    %ebp
    8d8e:	ff 67 8a             	jmp    *-0x76(%edi)
	return result;
    8d91:	45                   	inc    %ebp
    8d92:	ff 66 c9             	jmp    *-0x37(%esi)
}
    8d95:	66 c3                	retw   

00008d97 <getline>:
void  getline(char str[],int length){
    8d97:	66 55                	push   %bp
    8d99:	66 89 e5             	mov    %sp,%bp
    8d9c:	66 83 ec 08          	sub    $0x8,%sp
	char save = getch();
    8da0:	66 e8 d6 ff          	callw  8d7a <read_and_print_input+0x3a>
    8da4:	ff                   	(bad)  
    8da5:	ff 67 88             	jmp    *-0x78(%edi)
    8da8:	45                   	inc    %ebp
    8da9:	ff 67 66             	jmp    *0x66(%edi)
	int index = 0;
    8dac:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while(save != 13 && index < length){
    8db3:	eb 46                	jmp    8dfb <getline+0x64>
		printc(save);
    8db5:	67 66 0f be 45 ff    	movsbw -0x1(%di),%ax
    8dbb:	66 50                	push   %ax
    8dbd:	66 e8 ef fd          	callw  8bb0 <prints+0x50>
    8dc1:	ff                   	(bad)  
    8dc2:	ff 66 83             	jmp    *-0x7d(%esi)
    8dc5:	c4 04 67             	les    (%edi,%eiz,2),%eax
		str[index] = save;
    8dc8:	66 8b 55 f8          	mov    -0x8(%ebp),%dx
    8dcc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8dd1:	66 01 c2             	add    %ax,%dx
    8dd4:	67 8a 45 ff          	mov    -0x1(%di),%al
    8dd8:	67 88 02             	mov    %al,(%bp,%si)
		index ++;
    8ddb:	67 66 ff 45 f8       	incw   -0x8(%di)
		str[index] = 0;
    8de0:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8de5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8dea:	66 01 d0             	add    %dx,%ax
    8ded:	67 c6 00 00          	movb   $0x0,(%bx,%si)
		save = getch();
    8df1:	66 e8 85 ff          	callw  8d7a <read_and_print_input+0x3a>
    8df5:	ff                   	(bad)  
    8df6:	ff 67 88             	jmp    *-0x78(%edi)
    8df9:	45                   	inc    %ebp
    8dfa:	ff 67 80             	jmp    *-0x80(%edi)
	return result;
}
void  getline(char str[],int length){
	char save = getch();
	int index = 0;
	while(save != 13 && index < length){
    8dfd:	7d ff                	jge    8dfe <getline+0x67>
    8dff:	0d 74 0c 67 66       	or     $0x66670c74,%eax
    8e04:	8b 45 f8             	mov    -0x8(%ebp),%eax
    8e07:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    8e0c:	7c a7                	jl     8db5 <getline+0x1e>
		str[index] = save;
		index ++;
		str[index] = 0;
		save = getch();
	}
	return;
    8e0e:	90                   	nop
}
    8e0f:	66 c9                	leavew 
    8e11:	66 c3                	retw   

00008e13 <print_different_color>:
void print_different_color(char const* Messeage,int row,int colume,int color){
    8e13:	66 55                	push   %bp
    8e15:	66 89 e5             	mov    %sp,%bp
    8e18:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    8e1c:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    8e21:	66 89 d0             	mov    %dx,%ax
    8e24:	66 c1 e0 02          	shl    $0x2,%ax
    8e28:	66 01 d0             	add    %dx,%ax
    8e2b:	66 c1 e0 04          	shl    $0x4,%ax
    8e2f:	66 89 c2             	mov    %ax,%dx
    8e32:	67 66 8b 45 10       	mov    0x10(%di),%ax
    8e37:	66 01 d0             	add    %dx,%ax
    8e3a:	66 01 c0             	add    %ax,%ax
    8e3d:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    8e42:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8e49:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    8e4b:	eb 35                	jmp    8e82 <print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    8e4d:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8e52:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8e57:	66 01 d0             	add    %dx,%ax
    8e5a:	67 8a 00             	mov    (%bx,%si),%al
    8e5d:	66 0f be c0          	movsbw %al,%ax
    8e61:	67 66 ff 75 14       	pushw  0x14(%di)
    8e66:	67 66 ff 75 fc       	pushw  -0x4(%di)
    8e6b:	66 50                	push   %ax
    8e6d:	66 e8 9f f0          	callw  7f10 <_clearscreen+0x7>
    8e71:	ff                   	(bad)  
    8e72:	ff 66 83             	jmp    *-0x7d(%esi)
    8e75:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    8e78:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    8e7c:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    8e82:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8e87:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8e8c:	66 01 d0             	add    %dx,%ax
    8e8f:	67 8a 00             	mov    (%bx,%si),%al
    8e92:	84 c0                	test   %al,%al
    8e94:	75 b7                	jne    8e4d <print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    8e96:	90                   	nop
}
    8e97:	66 c9                	leavew 
    8e99:	66 c3                	retw   

00008e9b <strcmp>:
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
    8e9b:	66 55                	push   %bp
    8e9d:	66 89 e5             	mov    %sp,%bp
    8ea0:	66 83 ec 04          	sub    $0x4,%sp
	int i = 0;
    8ea4:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8eab:	00 00                	add    %al,(%eax)
	while(m1[i] != 0 && m2[i]!= 0){
    8ead:	eb 31                	jmp    8ee0 <strcmp+0x45>
		if(m1[i] != m2[i]){
    8eaf:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8eb4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8eb9:	66 01 d0             	add    %dx,%ax
    8ebc:	67 8a 10             	mov    (%bx,%si),%dl
    8ebf:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    8ec4:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8ec9:	66 01 c8             	add    %cx,%ax
    8ecc:	67 8a 00             	mov    (%bx,%si),%al
    8ecf:	38 c2                	cmp    %al,%dl
    8ed1:	74 08                	je     8edb <strcmp+0x40>
			return 0;
    8ed3:	66 b8 00 00          	mov    $0x0,%ax
    8ed7:	00 00                	add    %al,(%eax)
    8ed9:	eb 63                	jmp    8f3e <strcmp+0xa3>
		}
		i++;
    8edb:	67 66 ff 45 fc       	incw   -0x4(%di)
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
	int i = 0;
	while(m1[i] != 0 && m2[i]!= 0){
    8ee0:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8ee5:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8eea:	66 01 d0             	add    %dx,%ax
    8eed:	67 8a 00             	mov    (%bx,%si),%al
    8ef0:	84 c0                	test   %al,%al
    8ef2:	74 14                	je     8f08 <strcmp+0x6d>
    8ef4:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8ef9:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8efe:	66 01 d0             	add    %dx,%ax
    8f01:	67 8a 00             	mov    (%bx,%si),%al
    8f04:	84 c0                	test   %al,%al
    8f06:	75 a7                	jne    8eaf <strcmp+0x14>
		if(m1[i] != m2[i]){
			return 0;
		}
		i++;
	}
	if(m1[i] != 0 || m2[i] != 0){
    8f08:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8f0d:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8f12:	66 01 d0             	add    %dx,%ax
    8f15:	67 8a 00             	mov    (%bx,%si),%al
    8f18:	84 c0                	test   %al,%al
    8f1a:	75 14                	jne    8f30 <strcmp+0x95>
    8f1c:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8f21:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8f26:	66 01 d0             	add    %dx,%ax
    8f29:	67 8a 00             	mov    (%bx,%si),%al
    8f2c:	84 c0                	test   %al,%al
    8f2e:	74 08                	je     8f38 <strcmp+0x9d>
		return 0;
    8f30:	66 b8 00 00          	mov    $0x0,%ax
    8f34:	00 00                	add    %al,(%eax)
    8f36:	eb 06                	jmp    8f3e <strcmp+0xa3>
	}
	return 1;
    8f38:	66 b8 01 00          	mov    $0x1,%ax
    8f3c:	00 00                	add    %al,(%eax)
}
    8f3e:	66 c9                	leavew 
    8f40:	66 c3                	retw   

00008f42 <strcpy>:
//====================================================
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
    8f42:	66 55                	push   %bp
    8f44:	66 89 e5             	mov    %sp,%bp
    8f47:	66 83 ec 08          	sub    $0x8,%sp
	int len = strlen(src);
    8f4b:	67 66 ff 75 08       	pushw  0x8(%di)
    8f50:	66 e8 a6 fd          	callw  8cfa <print_next_line+0x27>
    8f54:	ff                   	(bad)  
    8f55:	ff 66 83             	jmp    *-0x7d(%esi)
    8f58:	c4 04 67             	les    (%edi,%eiz,2),%eax
    8f5b:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	int i = 0;
    8f5f:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8f66:	00 00                	add    %al,(%eax)
	for(i = 0;i < len;i ++){
    8f68:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8f6f:	00 00                	add    %al,(%eax)
    8f71:	eb 3b                	jmp    8fae <strcpy+0x6c>
    	des[i] =  src[i];
    8f73:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8f78:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8f7d:	66 01 c2             	add    %ax,%dx
    8f80:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    8f85:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8f8a:	66 01 c8             	add    %cx,%ax
    8f8d:	67 8a 00             	mov    (%bx,%si),%al
    8f90:	67 88 02             	mov    %al,(%bp,%si)
        des[i+1] = 0;
    8f93:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8f98:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    8f9d:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8fa2:	66 01 d0             	add    %dx,%ax
    8fa5:	67 c6 00 00          	movb   $0x0,(%bx,%si)
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
	int len = strlen(src);
	int i = 0;
	for(i = 0;i < len;i ++){
    8fa9:	67 66 ff 45 fc       	incw   -0x4(%di)
    8fae:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8fb3:	67 66 3b 45 f8       	cmp    -0x8(%di),%ax
    8fb8:	7c b9                	jl     8f73 <strcpy+0x31>
    	des[i] =  src[i];
        des[i+1] = 0;
	}
    8fba:	66 c9                	leavew 
    8fbc:	66 c3                	retw   

00008fbe <sys_print_for_heart>:
#include "use.h"
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
    8fbe:	66 55                	push   %bp
    8fc0:	66 89 e5             	mov    %sp,%bp
    8fc3:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    8fc7:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    8fcc:	66 89 d0             	mov    %dx,%ax
    8fcf:	66 c1 e0 02          	shl    $0x2,%ax
    8fd3:	66 01 d0             	add    %dx,%ax
    8fd6:	66 c1 e0 04          	shl    $0x4,%ax
    8fda:	66 89 c2             	mov    %ax,%dx
    8fdd:	67 66 8b 45 10       	mov    0x10(%di),%ax
    8fe2:	66 01 d0             	add    %dx,%ax
    8fe5:	66 01 c0             	add    %ax,%ax
    8fe8:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    8fed:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    8ff4:	00 00                	add    %al,(%eax)
	int index = 0;
    8ff6:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8ffd:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    8fff:	eb 35                	jmp    9036 <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
    9001:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    9006:	67 66 8b 45 08       	mov    0x8(%di),%ax
    900b:	66 01 d0             	add    %dx,%ax
    900e:	67 8a 00             	mov    (%bx,%si),%al
    9011:	66 0f be c0          	movsbw %al,%ax
    9015:	67 66 ff 75 f4       	pushw  -0xc(%di)
    901a:	67 66 ff 75 fc       	pushw  -0x4(%di)
    901f:	66 50                	push   %ax
    9021:	66 e8 eb ee          	callw  7f10 <_clearscreen+0x7>
    9025:	ff                   	(bad)  
    9026:	ff 66 83             	jmp    *-0x7d(%esi)
    9029:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    902c:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    9030:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
char ttime[20]="";
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    9036:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    903b:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9040:	66 01 d0             	add    %dx,%ax
    9043:	67 8a 00             	mov    (%bx,%si),%al
    9046:	84 c0                	test   %al,%al
    9048:	75 b7                	jne    9001 <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    904a:	90                   	nop
}
    904b:	66 c9                	leavew 
    904d:	66 c3                	retw   

0000904f <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    904f:	66 55                	push   %bp
    9051:	66 89 e5             	mov    %sp,%bp
    9054:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    9058:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    905d:	66 89 d0             	mov    %dx,%ax
    9060:	66 c1 e0 02          	shl    $0x2,%ax
    9064:	66 01 d0             	add    %dx,%ax
    9067:	66 c1 e0 04          	shl    $0x4,%ax
    906b:	66 89 c2             	mov    %ax,%dx
    906e:	67 66 8b 45 10       	mov    0x10(%di),%ax
    9073:	66 01 d0             	add    %dx,%ax
    9076:	66 01 c0             	add    %ax,%ax
    9079:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    907e:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    9085:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    9087:	eb 35                	jmp    90be <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    9089:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    908e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9093:	66 01 d0             	add    %dx,%ax
    9096:	67 8a 00             	mov    (%bx,%si),%al
    9099:	66 0f be c0          	movsbw %al,%ax
    909d:	67 66 ff 75 14       	pushw  0x14(%di)
    90a2:	67 66 ff 75 fc       	pushw  -0x4(%di)
    90a7:	66 50                	push   %ax
    90a9:	66 e8 63 ee          	callw  7f10 <_clearscreen+0x7>
    90ad:	ff                   	(bad)  
    90ae:	ff 66 83             	jmp    *-0x7d(%esi)
    90b1:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    90b4:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    90b8:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    90be:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    90c3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    90c8:	66 01 d0             	add    %dx,%ax
    90cb:	67 8a 00             	mov    (%bx,%si),%al
    90ce:	84 c0                	test   %al,%al
    90d0:	75 b7                	jne    9089 <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    90d2:	90                   	nop
}
    90d3:	66 c9                	leavew 
    90d5:	66 c3                	retw   

000090d7 <sys_showline>:
void sys_showline(){
    90d7:	66 55                	push   %bp
    90d9:	66 89 e5             	mov    %sp,%bp
    90dc:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
    90e0:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
    90e5:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
    90ea:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
    90ef:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
    90f4:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
    90f9:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
    90fe:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
    9103:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    910a:	00 00                	add    %al,(%eax)
    int i = 0;
    910c:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9113:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
    9115:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    911c:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
    911e:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9125:	00 00                	add    %al,(%eax)
    9127:	eb 52                	jmp    917b <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
    9129:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    912e:	66 89 d0             	mov    %dx,%ax
    9131:	66 c1 e0 03          	shl    $0x3,%ax
    9135:	66 01 d0             	add    %dx,%ax
    9138:	67 66 8d 14          	lea    (%si),%dx
    913c:	c5 00                	lds    (%eax),%eax
    913e:	00 00                	add    %al,(%eax)
    9140:	00 66 01             	add    %ah,0x1(%esi)
    9143:	d0 66 01             	shlb   0x1(%esi)
    9146:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
    914a:	45                   	inc    %ebp
    914b:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
    9151:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    9156:	66 01 d0             	add    %dx,%ax
    9159:	67 8a 00             	mov    (%bx,%si),%al
    915c:	66 0f be c0          	movsbw %al,%ax
    9160:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9165:	67 66 ff 75 f0       	pushw  -0x10(%di)
    916a:	66 50                	push   %ax
    916c:	66 e8 a0 ed          	callw  7f10 <_clearscreen+0x7>
    9170:	ff                   	(bad)  
    9171:	ff 66 83             	jmp    *-0x7d(%esi)
    9174:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
    9177:	66 ff 45 fc          	incw   -0x4(%ebp)
    917b:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
    9181:	7e a6                	jle    9129 <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
    9183:	66 c9                	leavew 
    9185:	66 c3                	retw   

00009187 <sys_printname>:

void sys_printname(){
    9187:	66 55                	push   %bp
    9189:	66 89 e5             	mov    %sp,%bp
    918c:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
    9190:	67 66 c7 45 fc 58 97 	movw   $0x9758,-0x4(%di)
    9197:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
    9199:	67 66 c7 45 f8 9c 97 	movw   $0x979c,-0x8(%di)
    91a0:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
    91a2:	67 66 c7 45 f4 e0 97 	movw   $0x97e0,-0xc(%di)
    91a9:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
    91ab:	67 66 c7 45 f0 24 98 	movw   $0x9824,-0x10(%di)
    91b2:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
    91b4:	67 66 c7 45 ec 68 98 	movw   $0x9868,-0x14(%di)
    91bb:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
    91bd:	67 66 c7 45 e8 ac 98 	movw   $0x98ac,-0x18(%di)
    91c4:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
    91c6:	67 66 c7 45 e4 f0 98 	movw   $0x98f0,-0x1c(%di)
    91cd:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
    91cf:	66 6a 0b             	pushw  $0xb
    91d2:	66 6a 10             	pushw  $0x10
    91d5:	67 66 ff 75 fc       	pushw  -0x4(%di)
    91da:	66 e8 de fd          	callw  8fbc <strcpy+0x7a>
    91de:	ff                   	(bad)  
    91df:	ff 66 83             	jmp    *-0x7d(%esi)
    91e2:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
    91e5:	6a 0b                	push   $0xb
    91e7:	66 6a 11             	pushw  $0x11
    91ea:	67 66 ff 75 f8       	pushw  -0x8(%di)
    91ef:	66 e8 c9 fd          	callw  8fbc <strcpy+0x7a>
    91f3:	ff                   	(bad)  
    91f4:	ff 66 83             	jmp    *-0x7d(%esi)
    91f7:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
    91fa:	6a 0b                	push   $0xb
    91fc:	66 6a 12             	pushw  $0x12
    91ff:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9204:	66 e8 b4 fd          	callw  8fbc <strcpy+0x7a>
    9208:	ff                   	(bad)  
    9209:	ff 66 83             	jmp    *-0x7d(%esi)
    920c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
    920f:	6a 0b                	push   $0xb
    9211:	66 6a 13             	pushw  $0x13
    9214:	67 66 ff 75 f0       	pushw  -0x10(%di)
    9219:	66 e8 9f fd          	callw  8fbc <strcpy+0x7a>
    921d:	ff                   	(bad)  
    921e:	ff 66 83             	jmp    *-0x7d(%esi)
    9221:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
    9224:	6a 0b                	push   $0xb
    9226:	66 6a 14             	pushw  $0x14
    9229:	67 66 ff 75 ec       	pushw  -0x14(%di)
    922e:	66 e8 8a fd          	callw  8fbc <strcpy+0x7a>
    9232:	ff                   	(bad)  
    9233:	ff 66 83             	jmp    *-0x7d(%esi)
    9236:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
    9239:	6a 0b                	push   $0xb
    923b:	66 6a 15             	pushw  $0x15
    923e:	67 66 ff 75 e8       	pushw  -0x18(%di)
    9243:	66 e8 75 fd          	callw  8fbc <strcpy+0x7a>
    9247:	ff                   	(bad)  
    9248:	ff 66 83             	jmp    *-0x7d(%esi)
    924b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
    924e:	6a 0b                	push   $0xb
    9250:	66 6a 16             	pushw  $0x16
    9253:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    9258:	66 e8 60 fd          	callw  8fbc <strcpy+0x7a>
    925c:	ff                   	(bad)  
    925d:	ff 66 83             	jmp    *-0x7d(%esi)
    9260:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    9263:	c9                   	leave  
    9264:	66 c3                	retw   

00009266 <sys_printpoem>:
void sys_printpoem(){
    9266:	66 55                	push   %bp
    9268:	66 89 e5             	mov    %sp,%bp
    926b:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
    926f:	67 66 c7 45 f8 34 99 	movw   $0x9934,-0x8(%di)
    9276:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
    9278:	67 66 c7 45 f4 46 99 	movw   $0x9946,-0xc(%di)
    927f:	00 00                	add    %al,(%eax)
    int i = 1;
    9281:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    9288:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
    928a:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    9291:	00 00                	add    %al,(%eax)
    9293:	eb 4b                	jmp    92e0 <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
    9295:	67 66 ff 75 fc       	pushw  -0x4(%di)
    929a:	66 6a 0a             	pushw  $0xa
    929d:	66 6a 0f             	pushw  $0xf
    92a0:	67 66 ff 75 f8       	pushw  -0x8(%di)
    92a5:	66 e8 a4 fd          	callw  904d <sys_print_for_heart+0x8f>
    92a9:	ff                   	(bad)  
    92aa:	ff 66 83             	jmp    *-0x7d(%esi)
    92ad:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
    92af:	67 66 ff 75 fc       	pushw  -0x4(%di)
    92b4:	66 6a 0a             	pushw  $0xa
    92b7:	66 6a 10             	pushw  $0x10
    92ba:	67 66 ff 75 f4       	pushw  -0xc(%di)
    92bf:	66 e8 8a fd          	callw  904d <sys_print_for_heart+0x8f>
    92c3:	ff                   	(bad)  
    92c4:	ff 66 83             	jmp    *-0x7d(%esi)
    92c7:	c4 10                	les    (%eax),%edx
        int j = 0;
    92c9:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    92d0:	00 00                	add    %al,(%eax)
        int k = 0;
    92d2:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    92d9:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
    92db:	67 66 ff 45 fc       	incw   -0x4(%di)
    92e0:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    92e6:	7e ad                	jle    9295 <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
    92e8:	66 c9                	leavew 
    92ea:	66 c3                	retw   

000092ec <sys_printheart>:
void sys_printheart(){
    92ec:	66 55                	push   %bp
    92ee:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
    92f1:	66 6a 28             	pushw  $0x28
    92f4:	66 6a 00             	pushw  $0x0
    92f7:	66 68 4f 99          	pushw  $0x994f
    92fb:	00 00                	add    %al,(%eax)
    92fd:	66 e8 bb fc          	callw  8fbc <strcpy+0x7a>
    9301:	ff                   	(bad)  
    9302:	ff 66 83             	jmp    *-0x7d(%esi)
    9305:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
    9308:	6a 28                	push   $0x28
    930a:	66 6a 01             	pushw  $0x1
    930d:	66 68 67 99          	pushw  $0x9967
    9311:	00 00                	add    %al,(%eax)
    9313:	66 e8 a5 fc          	callw  8fbc <strcpy+0x7a>
    9317:	ff                   	(bad)  
    9318:	ff 66 83             	jmp    *-0x7d(%esi)
    931b:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
    931e:	6a 28                	push   $0x28
    9320:	66 6a 02             	pushw  $0x2
    9323:	66 68 80 99          	pushw  $0x9980
    9327:	00 00                	add    %al,(%eax)
    9329:	66 e8 8f fc          	callw  8fbc <strcpy+0x7a>
    932d:	ff                   	(bad)  
    932e:	ff 66 83             	jmp    *-0x7d(%esi)
    9331:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
    9334:	6a 28                	push   $0x28
    9336:	66 6a 03             	pushw  $0x3
    9339:	66 68 9b 99          	pushw  $0x999b
    933d:	00 00                	add    %al,(%eax)
    933f:	66 e8 79 fc          	callw  8fbc <strcpy+0x7a>
    9343:	ff                   	(bad)  
    9344:	ff 66 83             	jmp    *-0x7d(%esi)
    9347:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
    934a:	6a 28                	push   $0x28
    934c:	66 6a 04             	pushw  $0x4
    934f:	66 68 b4 99          	pushw  $0x99b4
    9353:	00 00                	add    %al,(%eax)
    9355:	66 e8 63 fc          	callw  8fbc <strcpy+0x7a>
    9359:	ff                   	(bad)  
    935a:	ff 66 83             	jmp    *-0x7d(%esi)
    935d:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
    9360:	6a 28                	push   $0x28
    9362:	66 6a 05             	pushw  $0x5
    9365:	66 68 cc 99          	pushw  $0x99cc
    9369:	00 00                	add    %al,(%eax)
    936b:	66 e8 4d fc          	callw  8fbc <strcpy+0x7a>
    936f:	ff                   	(bad)  
    9370:	ff 66 83             	jmp    *-0x7d(%esi)
    9373:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
    9376:	6a 28                	push   $0x28
    9378:	66 6a 06             	pushw  $0x6
    937b:	66 68 e3 99          	pushw  $0x99e3
    937f:	00 00                	add    %al,(%eax)
    9381:	66 e8 37 fc          	callw  8fbc <strcpy+0x7a>
    9385:	ff                   	(bad)  
    9386:	ff 66 83             	jmp    *-0x7d(%esi)
    9389:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
    938c:	6a 28                	push   $0x28
    938e:	66 6a 07             	pushw  $0x7
    9391:	66 68 f9 99          	pushw  $0x99f9
    9395:	00 00                	add    %al,(%eax)
    9397:	66 e8 21 fc          	callw  8fbc <strcpy+0x7a>
    939b:	ff                   	(bad)  
    939c:	ff 66 83             	jmp    *-0x7d(%esi)
    939f:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    93a2:	c9                   	leave  
    93a3:	66 c3                	retw   

000093a5 <initial_PCB>:
#include "schedule.h"
#define EXIT 0
#define RUN 1
#define BLOCKED 2
void initial_PCB(int index){
    93a5:	66 55                	push   %bp
    93a7:	66 89 e5             	mov    %sp,%bp
    PCB_list[index - 1].cs = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    93aa:	67 66 8b 45 08       	mov    0x8(%di),%ax
    93af:	67 66 8d 48 ff       	lea    -0x1(%bx,%si),%cx
    93b4:	67 66 8b 45 08       	mov    0x8(%di),%ax
    93b9:	66 40                	inc    %ax
    93bb:	66 c1 e0 0c          	shl    $0xc,%ax
    93bf:	66 89 c2             	mov    %ax,%dx
    93c2:	66 89 c8             	mov    %cx,%ax
    93c5:	66 c1 e0 06          	shl    $0x6,%ax
    93c9:	66 05 70 ae          	add    $0xae70,%ax
    93cd:	00 00                	add    %al,(%eax)
    93cf:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index - 1].ds = 0x2000+0x1000*(index - 1);//0代表内核，1代表用户程序
    93d3:	67 66 8b 45 08       	mov    0x8(%di),%ax
    93d8:	67 66 8d 48 ff       	lea    -0x1(%bx,%si),%cx
    93dd:	67 66 8b 45 08       	mov    0x8(%di),%ax
    93e2:	66 40                	inc    %ax
    93e4:	66 c1 e0 0c          	shl    $0xc,%ax
    93e8:	66 89 c2             	mov    %ax,%dx
    93eb:	66 89 c8             	mov    %cx,%ax
    93ee:	66 c1 e0 06          	shl    $0x6,%ax
    93f2:	66 05 60 ae          	add    $0xae60,%ax
    93f6:	00 00                	add    %al,(%eax)
    93f8:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index - 1].ip = 0x100;
    93fc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9401:	66 48                	dec    %ax
    9403:	66 c1 e0 06          	shl    $0x6,%ax
    9407:	66 05 60 ae          	add    $0xae60,%ax
    940b:	00 00                	add    %al,(%eax)
    940d:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    9414:	00 00                	add    %al,(%eax)
    PCB_list[index - 1].prg_status = RUN;
    9416:	67 66 8b 45 08       	mov    0x8(%di),%ax
    941b:	66 48                	dec    %ax
    941d:	66 c1 e0 06          	shl    $0x6,%ax
    9421:	66 05 70 ae          	add    $0xae70,%ax
    9425:	00 00                	add    %al,(%eax)
    9427:	67 66 c7 40 08 01 00 	movw   $0x1,0x8(%bx,%si)
    942e:	00 00                	add    %al,(%eax)
    PCB_list[index - 1].eflags = 512;
    9430:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9435:	66 48                	dec    %ax
    9437:	66 c1 e0 06          	shl    $0x6,%ax
    943b:	66 05 70 ae          	add    $0xae70,%ax
    943f:	00 00                	add    %al,(%eax)
    9441:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    9448:	00 00                	add    %al,(%eax)
    PCB_list[index - 1].prg_name = '1'+index - 1;
    944a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    944f:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    9454:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9459:	66 83 c0 30          	add    $0x30,%ax
    945d:	66 c1 e2 06          	shl    $0x6,%dx
    9461:	66 81 c2 70 ae       	add    $0xae70,%dx
    9466:	00 00                	add    %al,(%eax)
    9468:	67 88 42 0c          	mov    %al,0xc(%bp,%si)
}
    946c:	66 5d                	pop    %bp
    946e:	66 c3                	retw   

00009470 <sys_schedule>:

void sys_schedule(){
    9470:	66 55                	push   %bp
    9472:	66 89 e5             	mov    %sp,%bp
    9475:	66 83 ec 08          	sub    $0x8,%sp
    int i,j;
    if(PCB_list  == _CurrentProg ){
    9479:	66 a1 c0 af 66 3d    	mov    0x3d66afc0,%ax
    947f:	40                   	inc    %eax
    9480:	ae                   	scas   %es:(%edi),%al
    9481:	00 00                	add    %al,(%eax)
    9483:	75 0b                	jne    9490 <sys_schedule+0x20>
        i = 0;
    9485:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    948c:	00 00                	add    %al,(%eax)
    948e:	eb 65                	jmp    94f5 <sys_schedule+0x85>
    }
    else if(PCB_list + 1 == _CurrentProg){
    9490:	66 a1 c0 af 66 3d    	mov    0x3d66afc0,%ax
    9496:	80 ae 00 00 75 0b 67 	subb   $0x67,0xb750000(%esi)
        i = 1;
    949d:	66 c7 45 fc 01 00    	movw   $0x1,-0x4(%ebp)
    94a3:	00 00                	add    %al,(%eax)
    94a5:	eb 4e                	jmp    94f5 <sys_schedule+0x85>
    }
    else if(PCB_list + 2 == _CurrentProg){
    94a7:	66 a1 c0 af 66 3d    	mov    0x3d66afc0,%ax
    94ad:	c0 ae 00 00 75 0b 67 	shrb   $0x67,0xb750000(%esi)
        i = 2;
    94b4:	66 c7 45 fc 02 00    	movw   $0x2,-0x4(%ebp)
    94ba:	00 00                	add    %al,(%eax)
    94bc:	eb 37                	jmp    94f5 <sys_schedule+0x85>
    }
    else if(PCB_list + 3 == _CurrentProg){
    94be:	66 a1 c0 af 66 3d    	mov    0x3d66afc0,%ax
    94c4:	00 af 00 00 75 0b    	add    %ch,0xb750000(%edi)
        i = 3;
    94ca:	67 66 c7 45 fc 03 00 	movw   $0x3,-0x4(%di)
    94d1:	00 00                	add    %al,(%eax)
    94d3:	eb 20                	jmp    94f5 <sys_schedule+0x85>
    }
    else if(PCB_list + 4 == _CurrentProg){
    94d5:	66 a1 c0 af 66 3d    	mov    0x3d66afc0,%ax
    94db:	40                   	inc    %eax
    94dc:	af                   	scas   %es:(%edi),%eax
    94dd:	00 00                	add    %al,(%eax)
    94df:	75 0b                	jne    94ec <sys_schedule+0x7c>
        i = 3;
    94e1:	67 66 c7 45 fc 03 00 	movw   $0x3,-0x4(%di)
    94e8:	00 00                	add    %al,(%eax)
    94ea:	eb 09                	jmp    94f5 <sys_schedule+0x85>
    }
    else{
        i = 3;
    94ec:	67 66 c7 45 fc 03 00 	movw   $0x3,-0x4(%di)
    94f3:	00 00                	add    %al,(%eax)
    }
    for(j = 0;j < 4;j ++){
    94f5:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    94fc:	00 00                	add    %al,(%eax)
    94fe:	eb 43                	jmp    9543 <sys_schedule+0xd3>
        if(i == 3){
    9500:	67 66 83 7d fc 03    	cmpw   $0x3,-0x4(%di)
    9506:	75 14                	jne    951c <sys_schedule+0xac>
            _CurrentProg = PCB_list;
    9508:	66 c7 06 c0 af       	movw   $0xafc0,(%esi)
    950d:	40                   	inc    %eax
    950e:	ae                   	scas   %es:(%edi),%al
    950f:	00 00                	add    %al,(%eax)
            i = 0;
    9511:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    9518:	00 00                	add    %al,(%eax)
    951a:	eb 11                	jmp    952d <sys_schedule+0xbd>
        }
        else{
            _CurrentProg ++;
    951c:	66 a1 c0 af 66 83    	mov    0x8366afc0,%ax
    9522:	c0 40 66 a3          	rolb   $0xa3,0x66(%eax)
    9526:	c0 af 67 66 ff 45 fc 	shrb   $0xfc,0x45ff6667(%edi)
            i ++;
        }
        if(_CurrentProg -> prg_status == RUN){
    952d:	66 a1 c0 af 67 66    	mov    0x6667afc0,%ax
    9533:	8b 40 38             	mov    0x38(%eax),%eax
    9536:	66 83 f8 01          	cmp    $0x1,%ax
    953a:	75 02                	jne    953e <sys_schedule+0xce>
            return;
    953c:	eb 17                	jmp    9555 <sys_schedule+0xe5>
        i = 3;
    }
    else{
        i = 3;
    }
    for(j = 0;j < 4;j ++){
    953e:	67 66 ff 45 f8       	incw   -0x8(%di)
    9543:	67 66 83 7d f8 03    	cmpw   $0x3,-0x8(%di)
    9549:	7e b5                	jle    9500 <sys_schedule+0x90>
        }
        if(_CurrentProg -> prg_status == RUN){
            return;
        }
    }
    _CurrentProg = PCB_list + 5;
    954b:	66 c7 06 c0 af       	movw   $0xafc0,(%esi)
    9550:	80 af 00 00 90 66 c9 	subb   $0xc9,0x66900000(%edi)
    return;
}
    9557:	66 c3                	retw   

00009559 <sys_exit>:
void sys_exit(){
    9559:	66 55                	push   %bp
    955b:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = EXIT;
    955e:	66 a1 c0 af 67 66    	mov    0x6667afc0,%ax
    9564:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
}
    956b:	66 5d                	pop    %bp
    956d:	66 c3                	retw   

0000956f <sys_bolocked>:
struct PCB* sys_bolocked(){
    956f:	66 55                	push   %bp
    9571:	66 89 e5             	mov    %sp,%bp
    _CurrentProg -> prg_status = BLOCKED;
    9574:	66 a1 c0 af 67 66    	mov    0x6667afc0,%ax
    957a:	c7 40 38 02 00 00 00 	movl   $0x2,0x38(%eax)
    sys_schedule();
    9581:	66 e8 e9 fe          	callw  946e <initial_PCB+0xc9>
    9585:	ff                   	(bad)  
    9586:	ff 66 5d             	jmp    *0x5d(%esi)
}
    9589:	66 c3                	retw   

0000958b <sys_run>:
void sys_run(){
    958b:	66 55                	push   %bp
    958d:	66 89 e5             	mov    %sp,%bp

    9590:	66 5d                	pop    %bp
    9592:	66 c3                	retw   
