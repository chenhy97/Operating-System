
kernel.elf:     file format elf32-i386


Disassembly of section .text:

00007d00 <_start>:
    7d00:	66 b8 00 00          	mov    $0x0,%ax
    7d04:	00 00                	add    %al,(%eax)
    7d06:	8e d8                	mov    %eax,%ds
    7d08:	8e c0                	mov    %eax,%es
    7d0a:	8e d0                	mov    %eax,%ss
    7d0c:	66 ea 14 7d 00 00    	ljmpw  $0x0,$0x7d14
	...

00007d14 <main>:
#include"../syscall/use.h"
#include"../shell/command.h"
#include"kernel.h"
#include "../syscall/stdio.h"
int main(){
    7d14:	66 55                	push   %bp
    7d16:	66 89 e5             	mov    %sp,%bp
    7d19:	66 83 ec 0c          	sub    $0xc,%sp
    clearscreen();
    7d1d:	66 e8 18 01          	callw  7e39 <main+0x125>
    7d21:	00 00                	add    %al,(%eax)
   // char str[100] = {};
    //getline(str,10);
   // prints(str);
    Initial_Int();
    7d23:	66 e8 22 01          	callw  7e49 <clearscreen+0xe>
    7d27:	00 00                	add    %al,(%eax)
    Initial_Int_08h();
    7d29:	66 e8 3b 01          	callw  7e68 <Initial_Int_09h+0xd>
    7d2d:	00 00                	add    %al,(%eax)
    Initial_Int_09h();
    7d2f:	66 e8 26 01          	callw  7e59 <Initial_Int+0xe>
    7d33:	00 00                	add    %al,(%eax)
    loadProg(10,25,0x1000);
    7d35:	66 68 00 10          	pushw  $0x1000
    7d39:	00 00                	add    %al,(%eax)
    7d3b:	66 6a 19             	pushw  $0x19
    7d3e:	66 6a 0a             	pushw  $0xa
    7d41:	66 e8 32 01          	callw  7e77 <Initial_Int_08h+0xd>
    7d45:	00 00                	add    %al,(%eax)
    7d47:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(10,35,0x2000);
    7d4b:	66 68 00 20          	pushw  $0x2000
    7d4f:	00 00                	add    %al,(%eax)
    7d51:	66 6a 23             	pushw  $0x23
    7d54:	66 6a 0a             	pushw  $0xa
    7d57:	66 e8 1c 01          	callw  7e77 <Initial_Int_08h+0xd>
    7d5b:	00 00                	add    %al,(%eax)
    7d5d:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(10,45,0x3000);
    7d61:	66 68 00 30          	pushw  $0x3000
    7d65:	00 00                	add    %al,(%eax)
    7d67:	66 6a 2d             	pushw  $0x2d
    7d6a:	66 6a 0a             	pushw  $0xa
    7d6d:	66 e8 06 01          	callw  7e77 <Initial_Int_08h+0xd>
    7d71:	00 00                	add    %al,(%eax)
    7d73:	66 83 c4 0c          	add    $0xc,%sp
    loadProg(10,55,0x4000);
    7d77:	66 68 00 40          	pushw  $0x4000
    7d7b:	00 00                	add    %al,(%eax)
    7d7d:	66 6a 37             	pushw  $0x37
    7d80:	66 6a 0a             	pushw  $0xa
    7d83:	66 e8 f0 00          	callw  7e77 <Initial_Int_08h+0xd>
    7d87:	00 00                	add    %al,(%eax)
    7d89:	66 83 c4 0c          	add    $0xc,%sp
    //_loadP(10,65,0x1000);
    //_RunProgress(0x1000);


    char const *Messeage = "Built by Chen Hongyang on March 20, 2018";
    7d8d:	67 66 c7 45 fc bc 93 	movw   $0x93bc,-0x4(%di)
    7d94:	00 00                	add    %al,(%eax)
    print("===================================================",9,12);
    7d96:	66 6a 0c             	pushw  $0xc
    7d99:	66 6a 09             	pushw  $0x9
    7d9c:	66 68 e8 93          	pushw  $0x93e8
    7da0:	00 00                	add    %al,(%eax)
    7da2:	66 e8 ec 0b          	callw  8992 <run+0xff>
    7da6:	00 00                	add    %al,(%eax)
    7da8:	66 83 c4 0c          	add    $0xc,%sp

    print("chenhyOS",10,32);
    7dac:	66 6a 20             	pushw  $0x20
    7daf:	66 6a 0a             	pushw  $0xa
    7db2:	66 68 1c 94          	pushw  $0x941c
    7db6:	00 00                	add    %al,(%eax)
    7db8:	66 e8 d6 0b          	callw  8992 <run+0xff>
    7dbc:	00 00                	add    %al,(%eax)
    7dbe:	66 83 c4 0c          	add    $0xc,%sp
   print(Messeage,11,16); //print the msg
    7dc2:	66 6a 10             	pushw  $0x10
    7dc5:	66 6a 0b             	pushw  $0xb
    7dc8:	67 66 ff 75 fc       	pushw  -0x4(%di)
    7dcd:	66 e8 c1 0b          	callw  8992 <run+0xff>
    7dd1:	00 00                	add    %al,(%eax)
    7dd3:	66 83 c4 0c          	add    $0xc,%sp
   print("===================================================",12,12);
    7dd7:	66 6a 0c             	pushw  $0xc
    7dda:	66 6a 0c             	pushw  $0xc
    7ddd:	66 68 e8 93          	pushw  $0x93e8
    7de1:	00 00                	add    %al,(%eax)
    7de3:	66 e8 ab 0b          	callw  8992 <run+0xff>
    7de7:	00 00                	add    %al,(%eax)
    7de9:	66 83 c4 0c          	add    $0xc,%sp
   

   char a = getch();
    7ded:	66 e8 4e 0e          	callw  8c3f <read_and_print_input+0x3a>
    7df1:	00 00                	add    %al,(%eax)
    7df3:	67 88 45 fb          	mov    %al,-0x5(%di)
   clearscreen(); 
    7df7:	66 e8 3e 00          	callw  7e39 <main+0x125>
    7dfb:	00 00                	add    %al,(%eax)
    char const *Msg1 = "Press any key to get help\n\r";
    7dfd:	67 66 c7 45 f4 25 94 	movw   $0x9425,-0xc(%di)
    7e04:	00 00                	add    %al,(%eax)
   prints(Msg1);
    7e06:	67 66 ff 75 f4       	pushw  -0xc(%di)
    7e0b:	66 e8 14 0c          	callw  8a23 <print+0x8f>
    7e0f:	00 00                	add    %al,(%eax)
    7e11:	66 83 c4 04          	add    $0x4,%sp
   print("!",13,39);
    7e15:	66 6a 27             	pushw  $0x27
    7e18:	66 6a 0d             	pushw  $0xd
    7e1b:	66 68 41 94          	pushw  $0x9441
    7e1f:	00 00                	add    %al,(%eax)
    7e21:	66 e8 6d 0b          	callw  8992 <run+0xff>
    7e25:	00 00                	add    %al,(%eax)
    7e27:	66 83 c4 0c          	add    $0xc,%sp
   //Initial_Int();
    /*buildmap();还有待解决debug
    void *addr = (void*) 0xB100;
    _loadP(2,21,addr);
    showtable();*/
    terminal();
    7e2b:	66 e8 aa 05          	callw  83d9 <Timer+0x9>
    7e2f:	00 00                	add    %al,(%eax)
    return 0;
    7e31:	66 b8 00 00          	mov    $0x0,%ax
    7e35:	00 00                	add    %al,(%eax)
    7e37:	66 c9                	leavew 
    7e39:	66 c3                	retw   

00007e3b <clearscreen>:
#include "use.h"
#include "schedule.h"
//====================================================
//                封装清屏函数
//====================================================
void clearscreen(){
    7e3b:	66 55                	push   %bp
    7e3d:	66 89 e5             	mov    %sp,%bp
	_clearscreen();//C调用汇编时会压入四个字节，必须考虑到这个，写出newret，是pop edx,而非 pop dx；
    7e40:	66 e8 b5 00          	callw  7ef9 <kernelesp_saved+0x3>
    7e44:	00 00                	add    %al,(%eax)
	//__asm__("pop %ax");
	return ;
    7e46:	90                   	nop
}
    7e47:	66 5d                	pop    %bp
    7e49:	66 c3                	retw   

00007e4b <Initial_Int>:
	}
}*/
//====================================================
//                封装中断初始化函数
//====================================================
void Initial_Int(){
    7e4b:	66 55                	push   %bp
    7e4d:	66 89 e5             	mov    %sp,%bp
	_initialInt();
    7e50:	66 e8 75 03          	callw  81c9 <fn3+0xa>
    7e54:	00 00                	add    %al,(%eax)
	return;
    7e56:	90                   	nop
}
    7e57:	66 5d                	pop    %bp
    7e59:	66 c3                	retw   

00007e5b <Initial_Int_09h>:
void Initial_Int_09h(){
    7e5b:	66 55                	push   %bp
    7e5d:	66 89 e5             	mov    %sp,%bp
	_initialInt_09h();
    7e60:	66 e8 4c 04          	callw  82b0 <_initialInt+0xe5>
    7e64:	00 00                	add    %al,(%eax)
}
    7e66:	66 5d                	pop    %bp
    7e68:	66 c3                	retw   

00007e6a <Initial_Int_08h>:
void Initial_Int_08h(){
    7e6a:	66 55                	push   %bp
    7e6c:	66 89 e5             	mov    %sp,%bp
	_initialInt_08h();
    7e6f:	66 e8 77 04          	callw  82ea <_initialInt_09h+0x38>
    7e73:	00 00                	add    %al,(%eax)
}
    7e75:	66 5d                	pop    %bp
    7e77:	66 c3                	retw   

00007e79 <loadProg>:
void loadProg(int count,int begin,int memory_postion){
    7e79:	66 55                	push   %bp
    7e7b:	66 89 e5             	mov    %sp,%bp
    7e7e:	66 83 ec 04          	sub    $0x4,%sp
    _loadP(count,begin,memory_postion);
    7e82:	67 66 ff 75 10       	pushw  0x10(%di)
    7e87:	67 66 ff 75 0c       	pushw  0xc(%di)
    7e8c:	67 66 ff 75 08       	pushw  0x8(%di)
    7e91:	66 e8 d3 00          	callw  7f68 <_setPoint+0x15>
    7e95:	00 00                	add    %al,(%eax)
    7e97:	66 83 c4 0c          	add    $0xc,%sp
	int index = (memory_postion - 0x1000)/0x1000 - 1;
    7e9b:	67 66 8b 45 10       	mov    0x10(%di),%ax
    7ea0:	66 2d 00 10          	sub    $0x1000,%ax
    7ea4:	00 00                	add    %al,(%eax)
    7ea6:	66 85 c0             	test   %ax,%ax
    7ea9:	79 06                	jns    7eb1 <loadProg+0x38>
    7eab:	66 05 ff 0f          	add    $0xfff,%ax
    7eaf:	00 00                	add    %al,(%eax)
    7eb1:	66 c1 f8 0c          	sar    $0xc,%ax
    7eb5:	66 48                	dec    %ax
    7eb7:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	initial_PCB(index);
    7ebc:	67 66 ff 75 fc       	pushw  -0x4(%di)
    7ec1:	66 e8 a3 13          	callw  9268 <sys_printheart+0xb7>
    7ec5:	00 00                	add    %al,(%eax)
    7ec7:	66 83 c4 04          	add    $0x4,%sp
    7ecb:	66 c9                	leavew 
    7ecd:	66 c3                	retw   
    7ecf:	90                   	nop

00007ed0 <Pg_Segment>:
	...

00007ed2 <Pg_Offset>:
    7ed2:	00 c0                	add    %al,%al

00007ed4 <info_Segment>:
	...

00007ed6 <info_Offset>:
    7ed6:	00 b1 08 00 00 00    	add    %dh,0x8(%ecx)

00007ed8 <count>:
    7ed8:	08 00                	or     %al,(%eax)

00007ed9 <x>:
	...

00007edb <y>:
	...

00007edd <xdul>:
    7edd:	01 00                	add    %eax,(%eax)

00007edf <ydul>:
    7edf:	01 00                	add    %eax,(%eax)

00007ee1 <alpha>:
    7ee1:	2d 00 00 00 00       	sub    $0x0,%eax

00007ee2 <int_09_saved>:
    7ee2:	00 00                	add    %al,(%eax)
	...

00007ee6 <program09_saved>:
    7ee6:	70 00                	jo     7ee8 <program09_saved+0x2>
	...

00007eea <ds_saved>:
    7eea:	7c 00                	jl     7eec <ds_saved+0x2>
	...

00007eee <return_save>:
    7eee:	88 00                	mov    %al,(%eax)
	...

00007ef2 <esi_save>:
    7ef2:	96                   	xchg   %eax,%esi
    7ef3:	00 00                	add    %al,(%eax)
	...

00007ef6 <kernelesp_saved>:
    7ef6:	b4 00                	mov    $0x0,%ah
	...

00007efa <color>:
    7efa:	01 b8 03 00 cd 10    	add    %edi,0x10cd0003(%eax)

00007efb <_clearscreen>:
    7efb:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    7f00:	66 5a                	pop    %dx
    7f02:	ff e2                	jmp    *%edx

00007f04 <_printchar>:
    7f04:	c8 00 00 00          	enter  $0x0,$0x0
    7f08:	b8 00 b8 8e e8       	mov    $0xe88eb800,%eax
    7f0d:	57                   	push   %edi
    7f0e:	66 8b 4e 06          	mov    0x6(%esi),%cx
    7f12:	66 8b 7e 0a          	mov    0xa(%esi),%di
    7f16:	66 8b 56 0e          	mov    0xe(%esi),%dx
    7f1a:	88 d5                	mov    %dl,%ch
    7f1c:	65 89 0d 5f c9 b8 01 	mov    %ecx,%gs:0x1b8c95f
    7f23:	00 66 5a             	add    %ah,0x5a(%esi)
    7f26:	ff e2                	jmp    *%edx

00007f28 <_readinput>:
    7f28:	c8 04 00 00          	enter  $0x4,$0x0
    7f2c:	b4 00                	mov    $0x0,%ah
    7f2e:	cd 16                	int    $0x16
    7f30:	b4 00                	mov    $0x0,%ah
    7f32:	66 67 89 04          	mov    %ax,(%si)
    7f36:	24 66                	and    $0x66,%al
    7f38:	67 8b 04             	mov    (%si),%eax
    7f3b:	24 c9                	and    $0xc9,%al
    7f3d:	66 5a                	pop    %dx
    7f3f:	ff e2                	jmp    *%edx

00007f41 <_showchar>:
    7f41:	c8 00 00 00          	enter  $0x0,$0x0
    7f45:	8b 46 06             	mov    0x6(%esi),%eax
    7f48:	b4 0e                	mov    $0xe,%ah
    7f4a:	b3 00                	mov    $0x0,%bl
    7f4c:	cd 10                	int    $0x10
    7f4e:	c9                   	leave  
    7f4f:	66 5a                	pop    %dx
    7f51:	ff e2                	jmp    *%edx

00007f53 <_setPoint>:
    7f53:	c8 00 00 00          	enter  $0x0,$0x0
    7f57:	53                   	push   %ebx
    7f58:	b7 00                	mov    $0x0,%bh
    7f5a:	8a 77 06             	mov    0x6(%edi),%dh
    7f5d:	8a 57 0a             	mov    0xa(%edi),%dl
    7f60:	b4 02                	mov    $0x2,%ah
    7f62:	cd 10                	int    $0x10
    7f64:	5b                   	pop    %ebx
    7f65:	c9                   	leave  
    7f66:	66 5a                	pop    %dx
    7f68:	ff e2                	jmp    *%edx

00007f6a <_loadP>:
    7f6a:	c8 00 00 00          	enter  $0x0,$0x0
    7f6e:	60                   	pusha  
    7f6f:	06                   	push   %es
    7f70:	1e                   	push   %ds
    7f71:	8c c8                	mov    %cs,%eax
    7f73:	8e d8                	mov    %eax,%ds
    7f75:	8b 46 0e             	mov    0xe(%esi),%eax
    7f78:	8e c0                	mov    %eax,%es
    7f7a:	b2 00                	mov    $0x0,%dl
    7f7c:	8b 46 0a             	mov    0xa(%esi),%eax
    7f7f:	b3 12                	mov    $0x12,%bl
    7f81:	f6 f3                	div    %bl
    7f83:	88 e1                	mov    %ah,%cl
    7f85:	30 e4                	xor    %ah,%ah
    7f87:	b3 02                	mov    $0x2,%bl
    7f89:	f6 f3                	div    %bl
    7f8b:	88 e6                	mov    %ah,%dh
    7f8d:	88 c5                	mov    %al,%ch
    7f8f:	8a 46 06             	mov    0x6(%esi),%al
    7f92:	bb 00 01 b4 02       	mov    $0x2b40100,%ebx
    7f97:	cd 13                	int    $0x13
    7f99:	1f                   	pop    %ds
    7f9a:	07                   	pop    %es
    7f9b:	61                   	popa   
    7f9c:	c9                   	leave  
    7f9d:	66 5a                	pop    %dx
    7f9f:	ff e2                	jmp    *%edx

00007fa1 <_RunProgress>:
    7fa1:	c8 00 00 00          	enter  $0x0,$0x0
    7fa5:	8c c8                	mov    %cs,%eax
    7fa7:	8e d8                	mov    %eax,%ds
    7fa9:	8e c0                	mov    %eax,%es
    7fab:	8b 5e 06             	mov    0x6(%esi),%ebx
    7fae:	c7 06 e6 7e 00 01    	movl   $0x1007ee6,(%esi)
    7fb4:	89 1e                	mov    %ebx,(%esi)
    7fb6:	e8 7e 26 ff 1e       	call   1effa639 <_end+0x1efef8d9>
    7fbb:	e6 7e                	out    %al,$0x7e

00007fbd <S>:
    7fbd:	8c c8                	mov    %cs,%eax
    7fbf:	8e d8                	mov    %eax,%ds
    7fc1:	8e c0                	mov    %eax,%es
    7fc3:	8e d0                	mov    %eax,%ss
    7fc5:	b4 00                	mov    $0x0,%ah
    7fc7:	cd 16                	int    $0x16
    7fc9:	c9                   	leave  
    7fca:	66 5a                	pop    %dx
    7fcc:	ff e2                	jmp    *%edx

00007fce <_SetINT20h>:
    7fce:	1e                   	push   %ds
    7fcf:	06                   	push   %es
    7fd0:	8c c8                	mov    %cs,%eax
    7fd2:	8e d8                	mov    %eax,%ds
    7fd4:	8e c0                	mov    %eax,%es
    7fd6:	8e d0                	mov    %eax,%ss
    7fd8:	53                   	push   %ebx
    7fd9:	51                   	push   %ecx
    7fda:	52                   	push   %edx
    7fdb:	b4 01                	mov    $0x1,%ah
    7fdd:	cd 16                	int    $0x16
    7fdf:	5a                   	pop    %edx
    7fe0:	59                   	pop    %ecx
    7fe1:	5b                   	pop    %ebx
    7fe2:	07                   	pop    %es
    7fe3:	1f                   	pop    %ds
    7fe4:	75 d7                	jne    7fbd <S>
    7fe6:	cf                   	iret   

00007fe7 <_SetINT08h>:
    7fe7:	60                   	pusha  
    7fe8:	0f a8                	push   %gs
    7fea:	1e                   	push   %ds
    7feb:	06                   	push   %es
    7fec:	16                   	push   %ss
    7fed:	8c c8                	mov    %cs,%eax
    7fef:	8e c0                	mov    %eax,%es
    7ff1:	8e d8                	mov    %eax,%ds
    7ff3:	8e d0                	mov    %eax,%ss
    7ff5:	fe 0e                	decb   (%esi)
    7ff7:	d8 7e 75             	fdivrs 0x75(%esi)
    7ffa:	4f                   	dec    %edi

00007ffb <notc>:
    7ffb:	80 3e e1             	cmpb   $0xe1,(%esi)
    7ffe:	7e 2d                	jle    802d <changheng+0x8>
    8000:	75 07                	jne    8009 <changleft>
    8002:	c6 06 e1             	movb   $0xe1,(%esi)
    8005:	7e 5c                	jle    8063 <_SetINT09h+0xb>
    8007:	eb 2a                	jmp    8033 <show>

00008009 <changleft>:
    8009:	80 3e e1             	cmpb   $0xe1,(%esi)
    800c:	7e 5c                	jle    806a <_SetINT09h+0x12>
    800e:	75 07                	jne    8017 <changright>
    8010:	c6 06 e1             	movb   $0xe1,(%esi)
    8013:	7e 7c                	jle    8091 <_SetINT09h+0x39>
    8015:	eb 1c                	jmp    8033 <show>

00008017 <changright>:
    8017:	80 3e e1             	cmpb   $0xe1,(%esi)
    801a:	7e 7c                	jle    8098 <_SetINT09h+0x40>
    801c:	75 07                	jne    8025 <changheng>
    801e:	c6 06 e1             	movb   $0xe1,(%esi)
    8021:	7e 2f                	jle    8052 <end+0x8>
    8023:	eb 0e                	jmp    8033 <show>

00008025 <changheng>:
    8025:	80 3e e1             	cmpb   $0xe1,(%esi)
    8028:	7e 2f                	jle    8059 <_SetINT09h+0x1>
    802a:	75 cf                	jne    7ffb <notc>
    802c:	c6 06 e1             	movb   $0xe1,(%esi)
    802f:	7e 2d                	jle    805e <_SetINT09h+0x6>
    8031:	eb 00                	jmp    8033 <show>

00008033 <show>:
    8033:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    8038:	b4 09                	mov    $0x9,%ah
    803a:	8a 26                	mov    (%esi),%ah
    803c:	fa                   	cli    
    803d:	7e a0                	jle    7fdf <_SetINT20h+0x11>
    803f:	e1 7e                	loope  80bf <cont+0x4>
    8041:	65 a3 8e 00 c6 06    	mov    %eax,%gs:0x6c6008e
    8047:	d8 7e 08             	fdivrs 0x8(%esi)

0000804a <end>:
    804a:	b0 20                	mov    $0x20,%al
    804c:	e6 20                	out    %al,$0x20
    804e:	e6 a0                	out    %al,$0xa0
    8050:	17                   	pop    %ss
    8051:	07                   	pop    %es
    8052:	1f                   	pop    %ds
    8053:	0f a9                	pop    %gs
    8055:	61                   	popa   
    8056:	fb                   	sti    
    8057:	cf                   	iret   

00008058 <_SetINT09h>:
    8058:	1e                   	push   %ds
    8059:	06                   	push   %es
    805a:	16                   	push   %ss
    805b:	60                   	pusha  
    805c:	8c c8                	mov    %cs,%eax
    805e:	8e d8                	mov    %eax,%ds
    8060:	8e c0                	mov    %eax,%es
    8062:	8e d0                	mov    %eax,%ss
    8064:	b9 00 b8 8e e9       	mov    $0xe98eb800,%ecx
    8069:	8a 26                	mov    (%esi),%ah
    806b:	fa                   	cli    
    806c:	7e b0                	jle    801e <changright+0x7>
    806e:	4f                   	dec    %edi
    806f:	65 a3 78 00 b0 55    	mov    %eax,%gs:0x55b00078
    8075:	65 a3 7a 00 b0 43    	mov    %eax,%gs:0x43b0007a
    807b:	65 a3 7c 00 b0 48    	mov    %eax,%gs:0x48b0007c
    8081:	65 a3 7e 00 b0 53    	mov    %eax,%gs:0x53b0007e
    8087:	65 a3 80 00 b0 21    	mov    %eax,%gs:0x21b00080
    808d:	65 a3 82 00 b0 4f    	mov    %eax,%gs:0x4fb00082
    8093:	65 a3 84 00 b0 55    	mov    %eax,%gs:0x55b00084
    8099:	65 a3 86 00 b0 43    	mov    %eax,%gs:0x43b00086
    809f:	65 a3 88 00 b0 48    	mov    %eax,%gs:0x48b00088
    80a5:	65 a3 8a 00 b0 21    	mov    %eax,%gs:0x21b0008a
    80ab:	65 a3 8c 00 61 80    	mov    %eax,%gs:0x8061008c
    80b1:	fc                   	cld    
    80b2:	06                   	push   %es
    80b3:	75 06                	jne    80bb <cont>
    80b5:	b4 01                	mov    $0x1,%ah
    80b7:	88 26                	mov    %ah,(%esi)
    80b9:	fa                   	cli    
    80ba:	7e fe                	jle    80ba <_SetINT09h+0x62>

000080bb <cont>:
    80bb:	fe 06                	incb   (%esi)
    80bd:	fa                   	cli    
    80be:	7e 8c                	jle    804c <end+0x2>
    80c0:	c8 8e c0 fb          	enter  $0xc08e,$0xfb
    80c4:	9c                   	pushf  
    80c5:	26 ff 1e             	lcall  *%es:(%esi)
    80c8:	e2 7e                	loop   8148 <_SetINT21h+0xe>
    80ca:	17                   	pop    %ss
    80cb:	07                   	pop    %es
    80cc:	1f                   	pop    %ds
    80cd:	cf                   	iret   

000080ce <_SetINT33h>:
    80ce:	60                   	pusha  
    80cf:	1e                   	push   %ds
    80d0:	0f a8                	push   %gs
    80d2:	06                   	push   %es
    80d3:	16                   	push   %ss
    80d4:	8c c8                	mov    %cs,%eax
    80d6:	8e c0                	mov    %eax,%es
    80d8:	8e d8                	mov    %eax,%ds
    80da:	8e d0                	mov    %eax,%ss
    80dc:	6a 00                	push   $0x0
    80de:	e8 bb 0e 17 07       	call   7178f9e <_end+0x716e23e>
    80e3:	0f a9                	pop    %gs
    80e5:	1f                   	pop    %ds
    80e6:	61                   	popa   
    80e7:	fb                   	sti    
    80e8:	cf                   	iret   

000080e9 <_SetINT34h>:
    80e9:	60                   	pusha  
    80ea:	1e                   	push   %ds
    80eb:	0f a8                	push   %gs
    80ed:	06                   	push   %es
    80ee:	16                   	push   %ss
    80ef:	8c c8                	mov    %cs,%eax
    80f1:	8e c0                	mov    %eax,%es
    80f3:	8e d8                	mov    %eax,%ds
    80f5:	8e d0                	mov    %eax,%ss
    80f7:	6a 00                	push   $0x0
    80f9:	e8 50 0f 17 07       	call   717904e <_end+0x716e2ee>
    80fe:	0f a9                	pop    %gs
    8100:	1f                   	pop    %ds
    8101:	61                   	popa   
    8102:	fb                   	sti    
    8103:	cf                   	iret   

00008104 <_SetINT35h>:
    8104:	60                   	pusha  
    8105:	1e                   	push   %ds
    8106:	0f a8                	push   %gs
    8108:	06                   	push   %es
    8109:	16                   	push   %ss
    810a:	8c c8                	mov    %cs,%eax
    810c:	8e c0                	mov    %eax,%es
    810e:	8e d8                	mov    %eax,%ds
    8110:	8e d0                	mov    %eax,%ss
    8112:	6a 00                	push   $0x0
    8114:	e8 14 10 17 07       	call   717912d <_end+0x716e3cd>
    8119:	0f a9                	pop    %gs
    811b:	1f                   	pop    %ds
    811c:	61                   	popa   
    811d:	fb                   	sti    
    811e:	cf                   	iret   

0000811f <_SetINT36h>:
    811f:	60                   	pusha  
    8120:	1e                   	push   %ds
    8121:	0f a8                	push   %gs
    8123:	06                   	push   %es
    8124:	16                   	push   %ss
    8125:	8c c8                	mov    %cs,%eax
    8127:	8e c0                	mov    %eax,%es
    8129:	8e d8                	mov    %eax,%ds
    812b:	8e d0                	mov    %eax,%ss
    812d:	6a 00                	push   $0x0
    812f:	e8 7f 10 17 07       	call   71791b3 <_end+0x716e453>
    8134:	0f a9                	pop    %gs
    8136:	1f                   	pop    %ds
    8137:	61                   	popa   
    8138:	fb                   	sti    
    8139:	cf                   	iret   

0000813a <_SetINT21h>:
    813a:	c8 00 00 00          	enter  $0x0,$0x0
    813e:	60                   	pusha  
    813f:	1e                   	push   %ds
    8140:	0f a8                	push   %gs
    8142:	06                   	push   %es
    8143:	8c c8                	mov    %cs,%eax
    8145:	8e c0                	mov    %eax,%es
    8147:	8e d8                	mov    %eax,%ds
    8149:	8b 46 08             	mov    0x8(%esi),%eax
    814c:	80 fc 00             	cmp    $0x0,%ah
    814f:	74 16                	je     8167 <fn0>
    8151:	80 fc 01             	cmp    $0x1,%ah
    8154:	74 21                	je     8177 <fn1>
    8156:	80 fc 02             	cmp    $0x2,%ah
    8159:	74 3d                	je     8198 <fn2>
    815b:	80 fc 03             	cmp    $0x3,%ah
    815e:	74 5f                	je     81bf <fn3>
    8160:	07                   	pop    %es
    8161:	0f a9                	pop    %gs
    8163:	1f                   	pop    %ds
    8164:	61                   	popa   
    8165:	c9                   	leave  
    8166:	cf                   	iret   

00008167 <fn0>:
    8167:	8b 46 0a             	mov    0xa(%esi),%eax
    816a:	b4 0e                	mov    $0xe,%ah
    816c:	b3 00                	mov    $0x0,%bl
    816e:	cd 10                	int    $0x10
    8170:	07                   	pop    %es
    8171:	0f a9                	pop    %gs
    8173:	1f                   	pop    %ds
    8174:	61                   	popa   
    8175:	c9                   	leave  
    8176:	cf                   	iret   

00008177 <fn1>:
    8177:	66 83 ec 04          	sub    $0x4,%sp
    817b:	b4 00                	mov    $0x0,%ah
    817d:	cd 16                	int    $0x16
    817f:	b4 00                	mov    $0x0,%ah
    8181:	66 67 89 04          	mov    %ax,(%si)
    8185:	24 66                	and    $0x66,%al
    8187:	67 8b 04             	mov    (%si),%eax
    818a:	24 66                	and    $0x66,%al
    818c:	83 c4 04             	add    $0x4,%esp
    818f:	8e e0                	mov    %eax,%fs
    8191:	07                   	pop    %es
    8192:	0f a9                	pop    %gs
    8194:	1f                   	pop    %ds
    8195:	61                   	popa   
    8196:	c9                   	leave  
    8197:	cf                   	iret   

00008198 <fn2>:
    8198:	66 83 ec 04          	sub    $0x4,%sp
    819c:	b4 00                	mov    $0x0,%ah
    819e:	cd 16                	int    $0x16
    81a0:	b4 00                	mov    $0x0,%ah
    81a2:	66 67 89 04          	mov    %ax,(%si)
    81a6:	24 66                	and    $0x66,%al
    81a8:	67 8b 04             	mov    (%si),%eax
    81ab:	24 b4                	and    $0xb4,%al
    81ad:	0e                   	push   %cs
    81ae:	b3 00                	mov    $0x0,%bl
    81b0:	cd 10                	int    $0x10
    81b2:	66 83 c4 04          	add    $0x4,%sp
    81b6:	8e e0                	mov    %eax,%fs
    81b8:	07                   	pop    %es
    81b9:	0f a9                	pop    %gs
    81bb:	1f                   	pop    %ds
    81bc:	61                   	popa   
    81bd:	c9                   	leave  
    81be:	cf                   	iret   

000081bf <fn3>:
    81bf:	b8 03 00 cd 10       	mov    $0x10cd0003,%eax
    81c4:	07                   	pop    %es
    81c5:	0f a9                	pop    %gs
    81c7:	1f                   	pop    %ds
    81c8:	61                   	popa   
    81c9:	c9                   	leave  
    81ca:	cf                   	iret   

000081cb <_initialInt>:
    81cb:	c8 00 00 00          	enter  $0x0,$0x0
    81cf:	60                   	pusha  
    81d0:	06                   	push   %es
    81d1:	1e                   	push   %ds
    81d2:	8c c8                	mov    %cs,%eax
    81d4:	8e d8                	mov    %eax,%ds
    81d6:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    81db:	b8 20 00 bb 04       	mov    $0x4bb0020,%eax
    81e0:	00 f7                	add    %dh,%bh
    81e2:	e3 89                	jecxz  816d <fn0+0x6>
    81e4:	c7                   	(bad)  
    81e5:	b8 ce 7f 26 89       	mov    $0x89267fce,%eax
    81ea:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    81ef:	45                   	inc    %ebp
    81f0:	02 1f                	add    (%edi),%bl
    81f2:	07                   	pop    %es
    81f3:	61                   	popa   
    81f4:	60                   	pusha  
    81f5:	06                   	push   %es
    81f6:	1e                   	push   %ds
    81f7:	8c c8                	mov    %cs,%eax
    81f9:	8e d8                	mov    %eax,%ds
    81fb:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8200:	b8 33 00 bb 04       	mov    $0x4bb0033,%eax
    8205:	00 f7                	add    %dh,%bh
    8207:	e3 89                	jecxz  8192 <fn1+0x1b>
    8209:	c7                   	(bad)  
    820a:	b8 ce 80 26 89       	mov    $0x892680ce,%eax
    820f:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8214:	45                   	inc    %ebp
    8215:	02 1f                	add    (%edi),%bl
    8217:	07                   	pop    %es
    8218:	61                   	popa   
    8219:	60                   	pusha  
    821a:	06                   	push   %es
    821b:	1e                   	push   %ds
    821c:	8c c8                	mov    %cs,%eax
    821e:	8e d8                	mov    %eax,%ds
    8220:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8225:	b8 34 00 bb 04       	mov    $0x4bb0034,%eax
    822a:	00 f7                	add    %dh,%bh
    822c:	e3 89                	jecxz  81b7 <fn2+0x1f>
    822e:	c7                   	(bad)  
    822f:	b8 e9 80 26 89       	mov    $0x892680e9,%eax
    8234:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8239:	45                   	inc    %ebp
    823a:	02 1f                	add    (%edi),%bl
    823c:	07                   	pop    %es
    823d:	61                   	popa   
    823e:	60                   	pusha  
    823f:	06                   	push   %es
    8240:	1e                   	push   %ds
    8241:	8c c8                	mov    %cs,%eax
    8243:	8e d8                	mov    %eax,%ds
    8245:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    824a:	b8 35 00 bb 04       	mov    $0x4bb0035,%eax
    824f:	00 f7                	add    %dh,%bh
    8251:	e3 89                	jecxz  81dc <_initialInt+0x11>
    8253:	c7                   	(bad)  
    8254:	b8 04 81 26 89       	mov    $0x89268104,%eax
    8259:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    825e:	45                   	inc    %ebp
    825f:	02 1f                	add    (%edi),%bl
    8261:	07                   	pop    %es
    8262:	61                   	popa   
    8263:	60                   	pusha  
    8264:	06                   	push   %es
    8265:	1e                   	push   %ds
    8266:	8c c8                	mov    %cs,%eax
    8268:	8e d8                	mov    %eax,%ds
    826a:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    826f:	b8 36 00 bb 04       	mov    $0x4bb0036,%eax
    8274:	00 f7                	add    %dh,%bh
    8276:	e3 89                	jecxz  8201 <_initialInt+0x36>
    8278:	c7                   	(bad)  
    8279:	b8 1f 81 26 89       	mov    $0x8926811f,%eax
    827e:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    8283:	45                   	inc    %ebp
    8284:	02 1f                	add    (%edi),%bl
    8286:	07                   	pop    %es
    8287:	61                   	popa   
    8288:	60                   	pusha  
    8289:	06                   	push   %es
    828a:	1e                   	push   %ds
    828b:	8c c8                	mov    %cs,%eax
    828d:	8e d8                	mov    %eax,%ds
    828f:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8294:	b8 21 00 bb 04       	mov    $0x4bb0021,%eax
    8299:	00 f7                	add    %dh,%bh
    829b:	e3 89                	jecxz  8226 <_initialInt+0x5b>
    829d:	c7                   	(bad)  
    829e:	b8 3a 81 26 89       	mov    $0x8926813a,%eax
    82a3:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    82a8:	45                   	inc    %ebp
    82a9:	02 1f                	add    (%edi),%bl
    82ab:	07                   	pop    %es
    82ac:	61                   	popa   
    82ad:	c9                   	leave  
    82ae:	66 5a                	pop    %dx
    82b0:	ff e2                	jmp    *%edx

000082b2 <_initialInt_09h>:
    82b2:	c8 00 00 00          	enter  $0x0,$0x0
    82b6:	a1 24 00 a3 e2       	mov    0xe2a30024,%eax
    82bb:	7e a1                	jle    825e <_initialInt+0x93>
    82bd:	26 00 a3 e4 7e 60 06 	add    %ah,%es:0x6607ee4(%ebx)
    82c4:	1e                   	push   %ds
    82c5:	8c c8                	mov    %cs,%eax
    82c7:	8e d8                	mov    %eax,%ds
    82c9:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    82ce:	b8 09 00 bb 04       	mov    $0x4bb0009,%eax
    82d3:	00 f7                	add    %dh,%bh
    82d5:	e3 89                	jecxz  8260 <_initialInt+0x95>
    82d7:	c7                   	(bad)  
    82d8:	b8 58 80 26 89       	mov    $0x89268058,%eax
    82dd:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    82e2:	45                   	inc    %ebp
    82e3:	02 1f                	add    (%edi),%bl
    82e5:	07                   	pop    %es
    82e6:	61                   	popa   
    82e7:	c9                   	leave  
    82e8:	66 5a                	pop    %dx
    82ea:	ff e2                	jmp    *%edx

000082ec <_initialInt_08h>:
    82ec:	c8 00 00 00          	enter  $0x0,$0x0
    82f0:	b0 40                	mov    $0x40,%al
    82f2:	e6 43                	out    %al,$0x43
    82f4:	b8 0b e9 e6 40       	mov    $0x40e6e90b,%eax
    82f9:	88 e0                	mov    %ah,%al
    82fb:	e6 40                	out    %al,$0x40
    82fd:	60                   	pusha  
    82fe:	06                   	push   %es
    82ff:	1e                   	push   %ds
    8300:	8c c8                	mov    %cs,%eax
    8302:	8e d8                	mov    %eax,%ds
    8304:	b8 00 00 8e c0       	mov    $0xc08e0000,%eax
    8309:	b8 08 00 bb 04       	mov    $0x4bb0008,%eax
    830e:	00 f7                	add    %dh,%bh
    8310:	e3 89                	jecxz  829b <_initialInt+0xd0>
    8312:	c7                   	(bad)  
    8313:	b8 e7 7f 26 89       	mov    $0x89267fe7,%eax
    8318:	05 8c c8 26 89       	add    $0x8926c88c,%eax
    831d:	45                   	inc    %ebp
    831e:	02 1f                	add    (%edi),%bl
    8320:	07                   	pop    %es
    8321:	61                   	popa   
    8322:	c9                   	leave  
    8323:	66 5a                	pop    %dx
    8325:	ff e2                	jmp    *%edx

00008327 <_save>:
    8327:	1e                   	push   %ds
    8328:	0e                   	push   %cs
    8329:	1f                   	pop    %ds
    832a:	8f 06                	popl   (%esi)
    832c:	ea 7e 66 8f 06 ee 7e 	ljmp   $0x7eee,$0x68f667e
    8333:	66 89 36             	mov    %si,(%esi)
    8336:	f2 7e 66             	bnd jle 839f <_restart+0x1a>
    8339:	8b 36                	mov    (%esi),%esi
    833b:	00 ac 66 83 c6 26 66 	add    %ch,0x6626c683(%esi,%eiz,2)
    8342:	67 8f 06 67 8f       	popl   -0x7099
    8347:	46                   	inc    %esi
    8348:	02 67 8f             	add    -0x71(%edi),%ah
    834b:	46                   	inc    %esi
    834c:	04 66                	add    $0x66,%al
    834e:	67 89 66 fc          	mov    %esp,-0x4(%bp)
    8352:	67 8c 56 fa          	mov    %ss,-0x6(%bp)
    8356:	8c de                	mov    %ds,%esi
    8358:	8e d6                	mov    %esi,%ss
    835a:	66 8b 26             	mov    (%esi),%sp
    835d:	00 ac 66 83 c4 1e ff 	add    %ch,-0xe13b7d(%esi,%eiz,2)
    8364:	36                   	ss
    8365:	ea 7e 06 66 55 66 57 	ljmp   $0x5766,$0x5566067e
    836c:	66 ff 36             	pushw  (%esi)
    836f:	f2 7e 66             	bnd jle 83d8 <Timer+0x8>
    8372:	52                   	push   %edx
    8373:	66 51                	push   %cx
    8375:	66 53                	push   %bx
    8377:	66 50                	push   %ax
    8379:	66 8b 26             	mov    (%esi),%sp
    837c:	f6 7e 66             	idivb  0x66(%esi)
    837f:	a1 ee 7e 66 ff       	mov    0xff667eee,%eax
    8384:	e0 66                	loopne 83ec <terminal+0x11>

00008385 <_restart>:
    8385:	66 89 26             	mov    %sp,(%esi)
    8388:	f6 7e 66             	idivb  0x66(%esi)
    838b:	8b 26                	mov    (%esi),%esp
    838d:	00 ac 66 58 66 5b 66 	add    %ch,0x665b6658(%esi,%eiz,2)
    8394:	59                   	pop    %ecx
    8395:	66 5a                	pop    %dx
    8397:	66 5e                	pop    %si
    8399:	66 5f                	pop    %di
    839b:	66 5d                	pop    %bp
    839d:	07                   	pop    %es
    839e:	8f 06                	popl   (%esi)
    83a0:	ea 7e 66 89 36 f2 7e 	ljmp   $0x7ef2,$0x3689667e
    83a7:	17                   	pop    %ss
    83a8:	66 89 e6             	mov    %sp,%si
    83ab:	66 67 8b 26 66 67    	mov    0x6766,%sp
    83b1:	ff 76 0a             	pushl  0xa(%esi)
    83b4:	66 67 ff 76 08       	pushw  0x8(%bp)
    83b9:	66 67 ff 76 04       	pushw  0x4(%bp)
    83be:	66 8b 36             	mov    (%esi),%si
    83c1:	f2 7e 8e             	bnd jle 8352 <_save+0x2b>
    83c4:	1e                   	push   %ds
    83c5:	ea 7e 50 b0 20 e6 20 	ljmp   $0x20e6,$0x20b0507e
    83cc:	e6 a0                	out    %al,$0xa0
    83ce:	58                   	pop    %eax
    83cf:	cf                   	iret   

000083d0 <Timer>:
    83d0:	e8 54 ff 6a 00       	call   6b8329 <_end+0x6ad5c9>
    83d5:	e8 23 0f e8 aa       	call   aae892fd <_end+0xaae7e59d>
    83da:	ff 66 55             	jmp    *0x55(%esi)

000083db <terminal>:
#include "../syscall/use.h"
#include "command.h"
#include "../syscall/stdio.h"
void run(int queue[],int size);
int terminal(){
    83db:	66 55                	push   %bp
    83dd:	66 89 e5             	mov    %sp,%bp
    83e0:	66 57                	push   %di
    83e2:	66 56                	push   %si
    83e4:	66 53                	push   %bx
    83e6:	66 83 ec 60          	sub    $0x60,%sp
    83ea:	66 89 e0             	mov    %sp,%ax
    83ed:	66 89 c6             	mov    %ax,%si
    char const *CMDHead = "hongyangchendeMacBook-Air:chenhyOS users$ ";
    83f0:	67 66 c7 45 e4 44 94 	movw   $0x9444,-0x1c(%di)
    83f7:	00 00                	add    %al,(%eax)
    char const *controlMsg1 = "The queue is full,waiting for the Enter Key.";
    83f9:	67 66 c7 45 e0 70 94 	movw   $0x9470,-0x20(%di)
    8400:	00 00                	add    %al,(%eax)
    char const *controlMsg2 = "The queue is empty!";
    8402:	67 66 c7 45 dc 9d 94 	movw   $0x949d,-0x24(%di)
    8409:	00 00                	add    %al,(%eax)
    char const *ByeByeMsg = "ByeBye";
    840b:	67 66 c7 45 d8 b1 94 	movw   $0x94b1,-0x28(%di)
    8412:	00 00                	add    %al,(%eax)
    char const *filelist = "Program1 upleft   Program2 upright  \r\nProgram3 downleft  Program4 downright";
    8414:	67 66 c7 45 d4 b8 94 	movw   $0x94b8,-0x2c(%di)
    841b:	00 00                	add    %al,(%eax)
    char const *HelpMsg1 = "Enter 1,2,3,4 to run the program\n\rEnter quit,to quit\n\rEnter help to print this script again";
    841d:	67 66 c7 45 d0 04 95 	movw   $0x9504,-0x30(%di)
    8424:	00 00                	add    %al,(%eax)
    char const *help = "help";
    8426:	67 66 c7 45 cc 60 95 	movw   $0x9560,-0x34(%di)
    842d:	00 00                	add    %al,(%eax)
    char const *quit = "quit";
    842f:	67 66 c7 45 c8 65 95 	movw   $0x9565,-0x38(%di)
    8436:	00 00                	add    %al,(%eax)
    char const *lst = "ls";
    8438:	67 66 c7 45 c4 6a 95 	movw   $0x956a,-0x3c(%di)
    843f:	00 00                	add    %al,(%eax)
    int Maxsize = 10;
    8441:	67 66 c7 45 c0 0a 00 	movw   $0xa,-0x40(%di)
    8448:	00 00                	add    %al,(%eax)
    print_next_line(HelpMsg1);
    844a:	67 66 ff 75 d0       	pushw  -0x30(%di)
    844f:	66 e8 43 07          	callw  8b96 <printsint+0xf6>
    8453:	00 00                	add    %al,(%eax)
    8455:	66 83 c4 04          	add    $0x4,%sp
    
            // _RunProgress(0xC000);
   prints(CMDHead);
    8459:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    845e:	66 e8 c1 05          	callw  8a23 <print+0x8f>
    8462:	00 00                	add    %al,(%eax)
    8464:	66 83 c4 04          	add    $0x4,%sp
    char recived[10] = {};
    8468:	67 66 8d 5d 96       	lea    -0x6a(%di),%bx
    846d:	66 ba 0a 00          	mov    $0xa,%dx
    8471:	00 00                	add    %al,(%eax)
    8473:	b0 00                	mov    $0x0,%al
    8475:	66 89 df             	mov    %bx,%di
    8478:	66 89 d1             	mov    %dx,%cx
    847b:	f3 aa                	rep stos %al,%es:(%edi)
    recived[0] = 0;
    847d:	67 c6 45 96 00       	movb   $0x0,-0x6a(%di)
    int index_of_str = 0;
    8482:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8489:	00 00                	add    %al,(%eax)
    int i = 1;
    848b:	67 66 c7 45 bc 01 00 	movw   $0x1,-0x44(%di)
    8492:	00 00                	add    %al,(%eax)
    int queue[Maxsize];
    8494:	67 66 8b 45 c0       	mov    -0x40(%di),%ax
    8499:	67 66 8d 50 ff       	lea    -0x1(%bx,%si),%dx
    849e:	67 66 89 55 b8       	mov    %dx,-0x48(%di)
    84a3:	66 c1 e0 02          	shl    $0x2,%ax
    84a7:	67 66 8d 50 03       	lea    0x3(%bx,%si),%dx
    84ac:	66 b8 04 00          	mov    $0x4,%ax
    84b0:	00 00                	add    %al,(%eax)
    84b2:	66 48                	dec    %ax
    84b4:	66 01 d0             	add    %dx,%ax
    84b7:	66 bb 04 00          	mov    $0x4,%bx
    84bb:	00 00                	add    %al,(%eax)
    84bd:	66 ba 00 00          	mov    $0x0,%dx
    84c1:	00 00                	add    %al,(%eax)
    84c3:	66 f7 f3             	div    %bx
    84c6:	66 6b c0 04          	imul   $0x4,%ax,%ax
    84ca:	66 29 c4             	sub    %ax,%sp
    84cd:	66 89 e0             	mov    %sp,%ax
    84d0:	66 83 c0 03          	add    $0x3,%ax
    84d4:	66 c1 e8 02          	shr    $0x2,%ax
    84d8:	66 c1 e0 02          	shl    $0x2,%ax
    84dc:	67 66 89 45 b4       	mov    %ax,-0x4c(%di)
    int num_of_queue = 0;
    84e1:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    84e8:	00 00                	add    %al,(%eax)
    int number = 0;
    84ea:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    84f1:	00 00                	add    %al,(%eax)
    int k = 0;
    84f3:	67 66 c7 45 b0 00 00 	movw   $0x0,-0x50(%di)
    84fa:	00 00                	add    %al,(%eax)
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    84fc:	e9 78 03 66 e8       	jmp    e8668879 <_end+0xe865db19>
        char save = getch();
    8501:	3c 07                	cmp    $0x7,%al
    8503:	00 00                	add    %al,(%eax)
    8505:	67 88 45 af          	mov    %al,-0x51(%di)
        if(save == 32){//空格
    8509:	67 80 7d af 20       	cmpb   $0x20,-0x51(%di)
    850e:	75 74                	jne    8584 <terminal+0x1a9>
            if(num_of_queue == Maxsize){
    8510:	67 66 8b 45 ec       	mov    -0x14(%di),%ax
    8515:	67 66 3b 45 c0       	cmp    -0x40(%di),%ax
    851a:	75 31                	jne    854d <terminal+0x172>
                prints("\n\r");
    851c:	66 68 6d 95          	pushw  $0x956d
    8520:	00 00                	add    %al,(%eax)
    8522:	66 e8 fd 04          	callw  8a23 <print+0x8f>
    8526:	00 00                	add    %al,(%eax)
    8528:	66 83 c4 04          	add    $0x4,%sp
                print_next_line(controlMsg1);
    852c:	67 66 ff 75 e0       	pushw  -0x20(%di)
    8531:	66 e8 61 06          	callw  8b96 <printsint+0xf6>
    8535:	00 00                	add    %al,(%eax)
    8537:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    853b:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    8540:	66 e8 df 04          	callw  8a23 <print+0x8f>
    8544:	00 00                	add    %al,(%eax)
    8546:	66 83 c4 04          	add    $0x4,%sp
                continue;
    854a:	e9 2a 03 67 66       	jmp    66678879 <_end+0x6666db19>
            }
            printc(save);
    854f:	0f be 45 af          	movsbl -0x51(%ebp),%eax
    8553:	66 50                	push   %ax
    8555:	66 e8 1c 05          	callw  8a75 <prints+0x50>
    8559:	00 00                	add    %al,(%eax)
    855b:	66 83 c4 04          	add    $0x4,%sp
            queue[num_of_queue] = number;
    855f:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    8564:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    8569:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    856e:	67 66 89 0c          	mov    %cx,(%si)
    8572:	90                   	nop
            num_of_queue ++;
    8573:	67 66 ff 45 ec       	incw   -0x14(%di)
            number = 0;
    8578:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    857f:	00 00                	add    %al,(%eax)
            continue;
    8581:	e9 f3 02 67 80       	jmp    80678879 <_end+0x8066db19>
        }
       else  if(save == 13){//回车
    8586:	7d af                	jge    8537 <terminal+0x15c>
    8588:	0d 0f 85 43 02       	or     $0x243850f,%eax
            int strcmp1 = strcmp(recived,quit);
    858d:	67 66 ff 75 c8       	pushw  -0x38(%di)
    8592:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    8597:	66 50                	push   %ax
    8599:	66 e8 c1 07          	callw  8d5e <print_different_color+0x86>
    859d:	00 00                	add    %al,(%eax)
    859f:	66 83 c4 08          	add    $0x8,%sp
    85a3:	67 66 89 45 a8       	mov    %ax,-0x58(%di)
            int strcmp2 = strcmp(recived,help);
    85a8:	67 66 ff 75 cc       	pushw  -0x34(%di)
    85ad:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    85b2:	66 50                	push   %ax
    85b4:	66 e8 a6 07          	callw  8d5e <print_different_color+0x86>
    85b8:	00 00                	add    %al,(%eax)
    85ba:	66 83 c4 08          	add    $0x8,%sp
    85be:	67 66 89 45 a4       	mov    %ax,-0x5c(%di)
            int strcmp3 = strcmp(recived,lst);
    85c3:	67 66 ff 75 c4       	pushw  -0x3c(%di)
    85c8:	67 66 8d 45 96       	lea    -0x6a(%di),%ax
    85cd:	66 50                	push   %ax
    85cf:	66 e8 8b 07          	callw  8d5e <print_different_color+0x86>
    85d3:	00 00                	add    %al,(%eax)
    85d5:	66 83 c4 08          	add    $0x8,%sp
    85d9:	67 66 89 45 a0       	mov    %ax,-0x60(%di)
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
    85de:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    85e4:	75 22                	jne    8608 <terminal+0x22d>
    85e6:	67 66 83 7d e8 00    	cmpw   $0x0,-0x18(%di)
    85ec:	75 1a                	jne    8608 <terminal+0x22d>
    85ee:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    85f4:	74 12                	je     8608 <terminal+0x22d>
    85f6:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    85fc:	74 0a                	je     8608 <terminal+0x22d>
    85fe:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    8604:	0f 85 7d 01 67 66    	jne    66678787 <_end+0x6666da27>
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    860a:	83 7d a8 01          	cmpl   $0x1,-0x58(%ebp)
    860e:	74 12                	je     8622 <terminal+0x247>
    8610:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    8616:	74 0a                	je     8622 <terminal+0x247>
    8618:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    861e:	0f 85 b9 00 66 68    	jne    686686dd <_end+0x6865d97d>
                    print_next_line("");
    8624:	70 95                	jo     85bb <terminal+0x1e0>
    8626:	00 00                	add    %al,(%eax)
    8628:	66 e8 6a 05          	callw  8b96 <printsint+0xf6>
    862c:	00 00                	add    %al,(%eax)
    862e:	66 83 c4 04          	add    $0x4,%sp
                    if(strcmp1 == 1){
    8632:	67 66 83 7d a8 01    	cmpw   $0x1,-0x58(%di)
    8638:	75 2b                	jne    8665 <terminal+0x28a>
                        print_next_line(ByeByeMsg);
    863a:	67 66 ff 75 d8       	pushw  -0x28(%di)
    863f:	66 e8 53 05          	callw  8b96 <printsint+0xf6>
    8643:	00 00                	add    %al,(%eax)
    8645:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    8649:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8650:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    8652:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8657:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    865c:	66 01 d0             	add    %dx,%ax
    865f:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8663:	eb 64                	jmp    86c9 <terminal+0x2ee>
                    }                  
                   else if(strcmp2 == 1){
    8665:	67 66 83 7d a4 01    	cmpw   $0x1,-0x5c(%di)
    866b:	75 2b                	jne    8698 <terminal+0x2bd>
                         print_next_line(HelpMsg1);
    866d:	67 66 ff 75 d0       	pushw  -0x30(%di)
    8672:	66 e8 20 05          	callw  8b96 <printsint+0xf6>
    8676:	00 00                	add    %al,(%eax)
    8678:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    867c:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8683:	00 00                	add    %al,(%eax)
                        recived[index_of_str] = 0;
    8685:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    868a:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    868f:	66 01 d0             	add    %dx,%ax
    8692:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    8696:	eb 31                	jmp    86c9 <terminal+0x2ee>
                    }
                    else if(strcmp3 == 1){
    8698:	67 66 83 7d a0 01    	cmpw   $0x1,-0x60(%di)
    869e:	75 29                	jne    86c9 <terminal+0x2ee>
                        print_next_line(filelist);
    86a0:	67 66 ff 75 d4       	pushw  -0x2c(%di)
    86a5:	66 e8 ed 04          	callw  8b96 <printsint+0xf6>
    86a9:	00 00                	add    %al,(%eax)
    86ab:	66 83 c4 04          	add    $0x4,%sp
                        index_of_str = 0;
    86af:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    86b6:	00 00                	add    %al,(%eax)
                      recived[index_of_str] = 0;
    86b8:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    86bd:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    86c2:	66 01 d0             	add    %dx,%ax
    86c5:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    }
                        //prints(recived);
                    prints(CMDHead);
    86c9:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    86ce:	66 e8 51 03          	callw  8a23 <print+0x8f>
    86d2:	00 00                	add    %al,(%eax)
    86d4:	66 83 c4 04          	add    $0x4,%sp
                    continue;
    86d8:	e9 9c 01 67 66       	jmp    66678879 <_end+0x6666db19>
                }
            
                else if(number != 0||num_of_queue != 0){
    86dd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    86e1:	75 0a                	jne    86ed <terminal+0x312>
    86e3:	67 66 83 7d ec 00    	cmpw   $0x0,-0x14(%di)
    86e9:	0f 84 84 00 67 66    	je     66678773 <_end+0x6666da13>
                    if(number != 0 ){
    86ef:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    86f3:	74 28                	je     871d <terminal+0x342>
                         printsint(number);
    86f5:	67 66 ff 75 e8       	pushw  -0x18(%di)
    86fa:	66 e8 a0 03          	callw  8a9e <printc+0x27>
    86fe:	00 00                	add    %al,(%eax)
    8700:	66 83 c4 04          	add    $0x4,%sp
                        queue[num_of_queue] = number;
    8704:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    8709:	67 66 8b 55 ec       	mov    -0x14(%di),%dx
    870e:	67 66 8b 4d e8       	mov    -0x18(%di),%cx
    8713:	67 66 89 0c          	mov    %cx,(%si)
    8717:	90                   	nop
                        num_of_queue++;
    8718:	67 66 ff 45 ec       	incw   -0x14(%di)
                    }
                    run(queue,num_of_queue);
    871d:	67 66 8b 45 b4       	mov    -0x4c(%di),%ax
    8722:	67 66 ff 75 ec       	pushw  -0x14(%di)
    8727:	66 50                	push   %ax
    8729:	66 e8 64 01          	callw  8891 <terminal+0x4b6>
    872d:	00 00                	add    %al,(%eax)
    872f:	66 83 c4 08          	add    $0x8,%sp
                    num_of_queue = 0;
    8733:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    873a:	00 00                	add    %al,(%eax)
                    number = 0;
    873c:	67 66 c7 45 e8 00 00 	movw   $0x0,-0x18(%di)
    8743:	00 00                	add    %al,(%eax)
                    prints(CMDHead);
    8745:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    874a:	66 e8 d5 02          	callw  8a23 <print+0x8f>
    874e:	00 00                	add    %al,(%eax)
    8750:	66 83 c4 04          	add    $0x4,%sp
                    index_of_str = 0;
    8754:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    875b:	00 00                	add    %al,(%eax)
                    recived[index_of_str] = 0;
    875d:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8762:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8767:	66 01 d0             	add    %dx,%ax
    876a:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                    continue;
    876e:	e9 06 01 66 68       	jmp    68668879 <_end+0x6865db19>
                }
                else{
                    prints("fuck");
    8773:	71 95                	jno    870a <terminal+0x32f>
    8775:	00 00                	add    %al,(%eax)
    8777:	66 e8 a8 02          	callw  8a23 <print+0x8f>
    877b:	00 00                	add    %al,(%eax)
    877d:	66 83 c4 04          	add    $0x4,%sp
            int strcmp1 = strcmp(recived,quit);
            int strcmp2 = strcmp(recived,help);
            int strcmp3 = strcmp(recived,lst);
            //printsint(strcmp2);
            if(num_of_queue != 0 || number != 0 ||strcmp1 == 1 ||strcmp2 == 1 || strcmp3 == 1){
                if(strcmp1 == 1 || strcmp2 == 1 || strcmp3 == 1){//判断字符串  
    8781:	90                   	nop
    8782:	e9 f2 00 66 68       	jmp    68668879 <_end+0x6865db19>
                else{
                    prints("fuck");
                }
            }
            else{
                 prints("\n\r");
    8787:	6d                   	insl   (%dx),%es:(%edi)
    8788:	95                   	xchg   %eax,%ebp
    8789:	00 00                	add    %al,(%eax)
    878b:	66 e8 94 02          	callw  8a23 <print+0x8f>
    878f:	00 00                	add    %al,(%eax)
    8791:	66 83 c4 04          	add    $0x4,%sp
                print_next_line(controlMsg2);
    8795:	67 66 ff 75 dc       	pushw  -0x24(%di)
    879a:	66 e8 f8 03          	callw  8b96 <printsint+0xf6>
    879e:	00 00                	add    %al,(%eax)
    87a0:	66 83 c4 04          	add    $0x4,%sp
                prints(CMDHead);
    87a4:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    87a9:	66 e8 76 02          	callw  8a23 <print+0x8f>
    87ad:	00 00                	add    %al,(%eax)
    87af:	66 83 c4 04          	add    $0x4,%sp
                index_of_str = 0;
    87b3:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    87ba:	00 00                	add    %al,(%eax)
                recived[index_of_str] = 0;
    87bc:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    87c1:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    87c6:	66 01 d0             	add    %dx,%ax
    87c9:	67 c6 00 00          	movb   $0x0,(%bx,%si)
                continue;
    87cd:	e9 a7 00 67 80       	jmp    80678879 <_end+0x8066db19>
            }
        }
        else if(save >= '0' && save <='9'){
    87d2:	7d af                	jge    8783 <terminal+0x3a8>
    87d4:	2f                   	das    
    87d5:	7e 42                	jle    8819 <terminal+0x43e>
    87d7:	67 80 7d af 39       	cmpb   $0x39,-0x51(%di)
    87dc:	7f 3b                	jg     8819 <terminal+0x43e>
           printc(save);
    87de:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    87e4:	66 50                	push   %ax
    87e6:	66 e8 8b 02          	callw  8a75 <prints+0x50>
    87ea:	00 00                	add    %al,(%eax)
    87ec:	66 83 c4 04          	add    $0x4,%sp
            number = number * 10 + save -'0';
    87f0:	67 66 8b 55 e8       	mov    -0x18(%di),%dx
    87f5:	66 89 d0             	mov    %dx,%ax
    87f8:	66 c1 e0 02          	shl    $0x2,%ax
    87fc:	66 01 d0             	add    %dx,%ax
    87ff:	66 01 c0             	add    %ax,%ax
    8802:	66 89 c2             	mov    %ax,%dx
    8805:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    880b:	66 01 d0             	add    %dx,%ax
    880e:	66 83 e8 30          	sub    $0x30,%ax
    8812:	67 66 89 45 e8       	mov    %ax,-0x18(%di)
           // printsint(number);
            continue;
    8817:	eb 5e                	jmp    8877 <terminal+0x49c>
        }
        else{
           printc(save);
    8819:	67 66 0f be 45 af    	movsbw -0x51(%di),%ax
    881f:	66 50                	push   %ax
    8821:	66 e8 50 02          	callw  8a75 <prints+0x50>
    8825:	00 00                	add    %al,(%eax)
    8827:	66 83 c4 04          	add    $0x4,%sp
           // if(save == '-' || save == 'q' || save == 'h' || save == 'l' || save =='s'){
            if(index_of_str < 10){
    882b:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    8831:	7f 2c                	jg     885f <terminal+0x484>
                recived[index_of_str] =  save;
    8833:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8838:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    883d:	66 01 c2             	add    %ax,%dx
    8840:	67 8a 45 af          	mov    -0x51(%di),%al
    8844:	67 88 02             	mov    %al,(%bp,%si)
                index_of_str ++;
    8847:	67 66 ff 45 f0       	incw   -0x10(%di)
                recived[index_of_str] = 0;
    884c:	67 66 8d 55 96       	lea    -0x6a(%di),%dx
    8851:	67 66 8b 45 f0       	mov    -0x10(%di),%ax
    8856:	66 01 d0             	add    %dx,%ax
    8859:	67 c6 00 00          	movb   $0x0,(%bx,%si)
    885d:	eb 18                	jmp    8877 <terminal+0x49c>
            }
            else if(index_of_str >= 10){
    885f:	67 66 83 7d f0 09    	cmpw   $0x9,-0x10(%di)
    8865:	7e 10                	jle    8877 <terminal+0x49c>
                prints("not added");
    8867:	66 68 76 95          	pushw  $0x9576
    886b:	00 00                	add    %al,(%eax)
    886d:	66 e8 b2 01          	callw  8a23 <print+0x8f>
    8871:	00 00                	add    %al,(%eax)
    8873:	66 83 c4 04          	add    $0x4,%sp
    int number = 0;
    int k = 0;
    /*for(k = 0;k < Maxsize;i ++){
        queue[k] = 0;
    }*/
    while(i){
    8877:	67 66 83 7d bc 00    	cmpw   $0x0,-0x44(%di)
    887d:	0f 85 7e fc 66 89    	jne    89678501 <_end+0x8966d7a1>
    8883:	f4                   	hlt    
            else if(index_of_str >= 10){
                prints("not added");
            }
        }
    }
}
    8884:	67 66 8d 65 f4       	lea    -0xc(%di),%sp
    8889:	66 5b                	pop    %bx
    888b:	66 5e                	pop    %si
    888d:	66 5f                	pop    %di
    888f:	66 5d                	pop    %bp
    8891:	66 c3                	retw   

00008893 <run>:
void run(int queue[],int size){
    8893:	66 55                	push   %bp
    8895:	66 89 e5             	mov    %sp,%bp
    8898:	66 83 ec 04          	sub    $0x4,%sp
    int j = 0;
    889c:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    88a3:	00 00                	add    %al,(%eax)
    clearscreen();
    88a5:	66 e8 90 f5          	callw  7e39 <main+0x125>
    88a9:	ff                   	(bad)  
    88aa:	ff 67 66             	jmp    *0x66(%edi)
    for(j = 0;j < size;j ++){
    88ad:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    88b4:	e9 c5 00 67 66       	jmp    6667897e <_end+0x6666dc1e>
        //_delay();
        //_load_userProgram(queue[j]);
        //_delay();
        if(queue[j] == 1){
    88b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
    88bc:	67 66 8d 14          	lea    (%si),%dx
    88c0:	85 00                	test   %eax,(%eax)
    88c2:	00 00                	add    %al,(%eax)
    88c4:	00 67 66             	add    %ah,0x66(%edi)
    88c7:	8b 45 08             	mov    0x8(%ebp),%eax
    88ca:	66 01 d0             	add    %dx,%ax
    88cd:	67 66 8b 00          	mov    (%bx,%si),%ax
    88d1:	66 83 f8 01          	cmp    $0x1,%ax
    88d5:	75 10                	jne    88e7 <run+0x54>
           // _loadP(10,25,0x1000);
             _RunProgress(0x1000);
    88d7:	66 68 00 10          	pushw  $0x1000
    88db:	00 00                	add    %al,(%eax)
    88dd:	66 e8 be f6          	callw  7f9f <_loadP+0x35>
    88e1:	ff                   	(bad)  
    88e2:	ff 66 83             	jmp    *-0x7d(%esi)
    88e5:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
        if(queue[j] == 2){
    88e8:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
    88ec:	67 66 8d 14          	lea    (%si),%dx
    88f0:	85 00                	test   %eax,(%eax)
    88f2:	00 00                	add    %al,(%eax)
    88f4:	00 67 66             	add    %ah,0x66(%edi)
    88f7:	8b 45 08             	mov    0x8(%ebp),%eax
    88fa:	66 01 d0             	add    %dx,%ax
    88fd:	67 66 8b 00          	mov    (%bx,%si),%ax
    8901:	66 83 f8 02          	cmp    $0x2,%ax
    8905:	75 10                	jne    8917 <run+0x84>
            //_loadP(10,35,0x2000);
            _RunProgress(0x2000);
    8907:	66 68 00 20          	pushw  $0x2000
    890b:	00 00                	add    %al,(%eax)
    890d:	66 e8 8e f6          	callw  7f9f <_loadP+0x35>
    8911:	ff                   	(bad)  
    8912:	ff 66 83             	jmp    *-0x7d(%esi)
    8915:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
        if(queue[j] == 3){
    8918:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
    891c:	67 66 8d 14          	lea    (%si),%dx
    8920:	85 00                	test   %eax,(%eax)
    8922:	00 00                	add    %al,(%eax)
    8924:	00 67 66             	add    %ah,0x66(%edi)
    8927:	8b 45 08             	mov    0x8(%ebp),%eax
    892a:	66 01 d0             	add    %dx,%ax
    892d:	67 66 8b 00          	mov    (%bx,%si),%ax
    8931:	66 83 f8 03          	cmp    $0x3,%ax
    8935:	75 10                	jne    8947 <run+0xb4>
           // _loadP(10,45,0x3000);
            _RunProgress(0x3000);
    8937:	66 68 00 30          	pushw  $0x3000
    893b:	00 00                	add    %al,(%eax)
    893d:	66 e8 5e f6          	callw  7f9f <_loadP+0x35>
    8941:	ff                   	(bad)  
    8942:	ff 66 83             	jmp    *-0x7d(%esi)
    8945:	c4 04 67             	les    (%edi,%eiz,2),%eax
        }
        if(queue[j] == 4){
    8948:	66 8b 45 fc          	mov    -0x4(%ebp),%ax
    894c:	67 66 8d 14          	lea    (%si),%dx
    8950:	85 00                	test   %eax,(%eax)
    8952:	00 00                	add    %al,(%eax)
    8954:	00 67 66             	add    %ah,0x66(%edi)
    8957:	8b 45 08             	mov    0x8(%ebp),%eax
    895a:	66 01 d0             	add    %dx,%ax
    895d:	67 66 8b 00          	mov    (%bx,%si),%ax
    8961:	66 83 f8 04          	cmp    $0x4,%ax
    8965:	75 10                	jne    8977 <run+0xe4>
            //_loadP(10,55,0x4000);
            _RunProgress(0x4000);
    8967:	66 68 00 40          	pushw  $0x4000
    896b:	00 00                	add    %al,(%eax)
    896d:	66 e8 2e f6          	callw  7f9f <_loadP+0x35>
    8971:	ff                   	(bad)  
    8972:	ff 66 83             	jmp    *-0x7d(%esi)
    8975:	c4 04 67             	les    (%edi,%eiz,2),%eax
    }
}
void run(int queue[],int size){
    int j = 0;
    clearscreen();
    for(j = 0;j < size;j ++){
    8978:	66 ff 45 fc          	incw   -0x4(%ebp)
    897c:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8981:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    8986:	0f 8c 2d ff 66 e8    	jl     e86788b9 <_end+0xe866db59>
        if(queue[j] == 4){
            //_loadP(10,55,0x4000);
            _RunProgress(0x4000);
        }
    }
     clearscreen();
    898c:	ab                   	stos   %eax,%es:(%edi)
    898d:	f4                   	hlt    
    898e:	ff                   	(bad)  
    898f:	ff 66 c9             	jmp    *-0x37(%esi)
    8992:	66 c3                	retw   

00008994 <print>:
#include "stdio.h"
//====================================================
//              显示字符串函数，可以指定位置
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
    8994:	66 55                	push   %bp
    8996:	66 89 e5             	mov    %sp,%bp
    8999:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    899d:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    89a2:	66 89 d0             	mov    %dx,%ax
    89a5:	66 c1 e0 02          	shl    $0x2,%ax
    89a9:	66 01 d0             	add    %dx,%ax
    89ac:	66 c1 e0 04          	shl    $0x4,%ax
    89b0:	66 89 c2             	mov    %ax,%dx
    89b3:	67 66 8b 45 10       	mov    0x10(%di),%ax
    89b8:	66 01 d0             	add    %dx,%ax
    89bb:	66 01 c0             	add    %ax,%ax
    89be:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    89c3:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    89ca:	00 00                	add    %al,(%eax)
	int index = 0;
    89cc:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    89d3:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    89d5:	eb 35                	jmp    8a0c <print+0x78>
		_printchar(Messeage[index],pos,color);
    89d7:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    89dc:	67 66 8b 45 08       	mov    0x8(%di),%ax
    89e1:	66 01 d0             	add    %dx,%ax
    89e4:	67 8a 00             	mov    (%bx,%si),%al
    89e7:	66 0f be c0          	movsbw %al,%ax
    89eb:	67 66 ff 75 f4       	pushw  -0xc(%di)
    89f0:	67 66 ff 75 fc       	pushw  -0x4(%di)
    89f5:	66 50                	push   %ax
    89f7:	66 e8 07 f5          	callw  7f02 <_clearscreen+0x7>
    89fb:	ff                   	(bad)  
    89fc:	ff 66 83             	jmp    *-0x7d(%esi)
    89ff:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    8a02:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    8a06:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
//====================================================
void print(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    8a0c:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8a11:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8a16:	66 01 d0             	add    %dx,%ax
    8a19:	67 8a 00             	mov    (%bx,%si),%al
    8a1c:	84 c0                	test   %al,%al
    8a1e:	75 b7                	jne    89d7 <print+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    8a20:	90                   	nop
}
    8a21:	66 c9                	leavew 
    8a23:	66 c3                	retw   

00008a25 <prints>:
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input
    8a25:	66 55                	push   %bp
    8a27:	66 89 e5             	mov    %sp,%bp
    8a2a:	66 83 ec 04          	sub    $0x4,%sp
	int index = 0;
    8a2e:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8a35:	00 00                	add    %al,(%eax)
	while(Messeage[index]){
    8a37:	eb 25                	jmp    8a5e <prints+0x39>
		_showchar(Messeage[index]);
    8a39:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8a3e:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8a43:	66 01 d0             	add    %dx,%ax
    8a46:	67 8a 00             	mov    (%bx,%si),%al
    8a49:	66 0f be c0          	movsbw %al,%ax
    8a4d:	66 50                	push   %ax
    8a4f:	66 e8 ec f4          	callw  7f3f <_readinput+0x17>
    8a53:	ff                   	(bad)  
    8a54:	ff 66 83             	jmp    *-0x7d(%esi)
    8a57:	c4 04 67             	les    (%edi,%eiz,2),%eax
		index++;
    8a5a:	66 ff 45 fc          	incw   -0x4(%ebp)
//====================================================
//               显示字符串函数，紧跟着光标
//====================================================
void prints(char const *Messeage){//can follow the position of your input
	int index = 0;
	while(Messeage[index]){
    8a5e:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8a63:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8a68:	66 01 d0             	add    %dx,%ax
    8a6b:	67 8a 00             	mov    (%bx,%si),%al
    8a6e:	84 c0                	test   %al,%al
    8a70:	75 c7                	jne    8a39 <prints+0x14>
		_showchar(Messeage[index]);
		index++;
	}
	return;
    8a72:	90                   	nop
}
    8a73:	66 c9                	leavew 
    8a75:	66 c3                	retw   

00008a77 <printc>:
//====================================================
//                显示字符函数
//====================================================
void printc(char alpha){
    8a77:	66 55                	push   %bp
    8a79:	66 89 e5             	mov    %sp,%bp
    8a7c:	66 83 ec 04          	sub    $0x4,%sp
    8a80:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8a85:	67 88 45 fc          	mov    %al,-0x4(%di)
	_showchar(alpha);
    8a89:	67 66 0f be 45 fc    	movsbw -0x4(%di),%ax
    8a8f:	66 50                	push   %ax
    8a91:	66 e8 aa f4          	callw  7f3f <_readinput+0x17>
    8a95:	ff                   	(bad)  
    8a96:	ff 66 83             	jmp    *-0x7d(%esi)
    8a99:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    8a9c:	66 c9                	leavew 
    8a9e:	66 c3                	retw   

00008aa0 <printsint>:
//====================================================
//                数字转字符函数
//====================================================
void printsint(int num){
    8aa0:	66 55                	push   %bp
    8aa2:	66 89 e5             	mov    %sp,%bp
    8aa5:	66 83 ec 2c          	sub    $0x2c,%sp
	 int save = num;
    8aa9:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8aae:	67 66 89 45 f4       	mov    %ax,-0xc(%di)
	 int count = 0;
    8ab3:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8aba:	00 00                	add    %al,(%eax)
	 char number[30];
	 number[count] = 0;
    8abc:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    8ac1:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8ac6:	66 01 d0             	add    %dx,%ax
    8ac9:	67 c6 00 00          	movb   $0x0,(%bx,%si)
	if(num < 0){
    8acd:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    8ad3:	79 14                	jns    8ae9 <printsint+0x49>
		printc('-');
    8ad5:	66 6a 2d             	pushw  $0x2d
    8ad8:	66 e8 99 ff          	callw  8a75 <prints+0x50>
    8adc:	ff                   	(bad)  
    8add:	ff 66 83             	jmp    *-0x7d(%esi)
    8ae0:	c4 04 67             	les    (%edi,%eiz,2),%eax
		num = -num;
    8ae3:	66 f7 5d 08          	negw   0x8(%ebp)
    8ae7:	eb 15                	jmp    8afe <printsint+0x5e>
	}
	else if(num == 0){
    8ae9:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    8aef:	75 0d                	jne    8afe <printsint+0x5e>
		printc('0');
    8af1:	66 6a 30             	pushw  $0x30
    8af4:	66 e8 7d ff          	callw  8a75 <prints+0x50>
    8af8:	ff                   	(bad)  
    8af9:	ff 66 83             	jmp    *-0x7d(%esi)
    8afc:	c4 04 eb             	les    (%ebx,%ebp,8),%eax
	}
	while(num > 0){
    8aff:	50                   	push   %eax
		number[count] = num % 10 + '0';
    8b00:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8b05:	66 b9 0a 00          	mov    $0xa,%cx
    8b09:	00 00                	add    %al,(%eax)
    8b0b:	66 99                	cwtd   
    8b0d:	66 f7 f9             	idiv   %cx
    8b10:	66 89 d0             	mov    %dx,%ax
    8b13:	66 83 c0 30          	add    $0x30,%ax
    8b17:	67 66 8d 4d d6       	lea    -0x2a(%di),%cx
    8b1c:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8b21:	66 01 ca             	add    %cx,%dx
    8b24:	67 88 02             	mov    %al,(%bp,%si)
		num  = num / 10;
    8b27:	67 66 8b 4d 08       	mov    0x8(%di),%cx
    8b2c:	66 b8 67 66          	mov    $0x6667,%ax
    8b30:	66 66 66 f7 e9       	data32 data32 imul %cx
    8b35:	66 c1 fa 02          	sar    $0x2,%dx
    8b39:	66 89 c8             	mov    %cx,%ax
    8b3c:	66 c1 f8 1f          	sar    $0x1f,%ax
    8b40:	66 29 c2             	sub    %ax,%dx
    8b43:	66 89 d0             	mov    %dx,%ax
    8b46:	67 66 89 45 08       	mov    %ax,0x8(%di)
		count ++;
    8b4b:	67 66 ff 45 fc       	incw   -0x4(%di)
		num = -num;
	}
	else if(num == 0){
		printc('0');
	}
	while(num > 0){
    8b50:	67 66 83 7d 08 00    	cmpw   $0x0,0x8(%di)
    8b56:	7f a8                	jg     8b00 <printsint+0x60>
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    8b58:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8b5d:	66 48                	dec    %ax
    8b5f:	67 66 89 45 f8       	mov    %ax,-0x8(%di)
    8b64:	eb 25                	jmp    8b8b <printsint+0xeb>
		printc(number[i]);
    8b66:	67 66 8d 55 d6       	lea    -0x2a(%di),%dx
    8b6b:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
    8b70:	66 01 d0             	add    %dx,%ax
    8b73:	67 8a 00             	mov    (%bx,%si),%al
    8b76:	66 0f be c0          	movsbw %al,%ax
    8b7a:	66 50                	push   %ax
    8b7c:	66 e8 f5 fe          	callw  8a75 <prints+0x50>
    8b80:	ff                   	(bad)  
    8b81:	ff 66 83             	jmp    *-0x7d(%esi)
    8b84:	c4 04 67             	les    (%edi,%eiz,2),%eax
		number[count] = num % 10 + '0';
		num  = num / 10;
		count ++;
	}
	int i;
	for(i = count - 1;i >= 0;i --){
    8b87:	66 ff 4d f8          	decw   -0x8(%ebp)
    8b8b:	67 66 83 7d f8 00    	cmpw   $0x0,-0x8(%di)
    8b91:	79 d3                	jns    8b66 <printsint+0xc6>
		printc(number[i]);
	}
	return;
    8b93:	90                   	nop
}
    8b94:	66 c9                	leavew 
    8b96:	66 c3                	retw   

00008b98 <print_next_line>:
//====================================================
//                显示字符串并换行函数
//====================================================
 void print_next_line(char const* Messeage){
    8b98:	66 55                	push   %bp
    8b9a:	66 89 e5             	mov    %sp,%bp
	prints(Messeage);
    8b9d:	67 66 ff 75 08       	pushw  0x8(%di)
    8ba2:	66 e8 7d fe          	callw  8a23 <print+0x8f>
    8ba6:	ff                   	(bad)  
    8ba7:	ff 66 83             	jmp    *-0x7d(%esi)
    8baa:	c4 04 66             	les    (%esi,%eiz,2),%eax
	prints("\n\r");
    8bad:	68 80 95 00 00       	push   $0x9580
    8bb2:	66 e8 6d fe          	callw  8a23 <print+0x8f>
    8bb6:	ff                   	(bad)  
    8bb7:	ff 66 83             	jmp    *-0x7d(%esi)
    8bba:	c4 04 90             	les    (%eax,%edx,4),%eax
	return;
}
    8bbd:	66 c9                	leavew 
    8bbf:	66 c3                	retw   

00008bc1 <strlen>:
//====================================================
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
    8bc1:	66 55                	push   %bp
    8bc3:	66 89 e5             	mov    %sp,%bp
    8bc6:	66 83 ec 08          	sub    $0x8,%sp
	int i = 0;
    8bca:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8bd1:	00 00                	add    %al,(%eax)
	int count = 0;
    8bd3:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8bda:	00 00                	add    %al,(%eax)
	while(Messeage[i] != 0){
    8bdc:	eb 0a                	jmp    8be8 <strlen+0x27>
		i++;
    8bde:	67 66 ff 45 fc       	incw   -0x4(%di)
		count++;
    8be3:	67 66 ff 45 f8       	incw   -0x8(%di)
//               获取字符串长度函数
//====================================================
int strlen(char const *Messeage){
	int i = 0;
	int count = 0;
	while(Messeage[i] != 0){
    8be8:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8bed:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8bf2:	66 01 d0             	add    %dx,%ax
    8bf5:	67 8a 00             	mov    (%bx,%si),%al
    8bf8:	84 c0                	test   %al,%al
    8bfa:	75 e2                	jne    8bde <strlen+0x1d>
		i++;
		count++;
	}
	return count;
    8bfc:	67 66 8b 45 f8       	mov    -0x8(%di),%ax
}
    8c01:	66 c9                	leavew 
    8c03:	66 c3                	retw   

00008c05 <read_and_print_input>:
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    8c05:	66 55                	push   %bp
    8c07:	66 89 e5             	mov    %sp,%bp
    8c0a:	66 83 ec 08          	sub    $0x8,%sp
    int i = 1;
    8c0e:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    8c15:	00 00                	add    %al,(%eax)
    while(i){
    8c17:	eb 1c                	jmp    8c35 <read_and_print_input+0x30>
        char savechar = _readinput();
    8c19:	66 e8 09 f3          	callw  7f26 <_printchar+0x22>
    8c1d:	ff                   	(bad)  
    8c1e:	ff 67 88             	jmp    *-0x78(%edi)
    8c21:	45                   	inc    %ebp
    8c22:	fb                   	sti    
        _showchar(savechar);
    8c23:	67 66 0f be 45 fb    	movsbw -0x5(%di),%ax
    8c29:	66 50                	push   %ax
    8c2b:	66 e8 10 f3          	callw  7f3f <_readinput+0x17>
    8c2f:	ff                   	(bad)  
    8c30:	ff 66 83             	jmp    *-0x7d(%esi)
    8c33:	c4 04 67             	les    (%edi,%eiz,2),%eax
//====================================================
//                读取用户输入并回显函数
//====================================================
 void read_and_print_input(){
    int i = 1;
    while(i){
    8c36:	66 83 7d fc 00       	cmpw   $0x0,-0x4(%ebp)
    8c3b:	75 dc                	jne    8c19 <read_and_print_input+0x14>
        char savechar = _readinput();
        _showchar(savechar);
    }
}
    8c3d:	66 c9                	leavew 
    8c3f:	66 c3                	retw   

00008c41 <getch>:
//====================================================
//        等待用户输入函数，返回用户输入在缓冲区中
//====================================================
char getch(){
    8c41:	66 55                	push   %bp
    8c43:	66 89 e5             	mov    %sp,%bp
    8c46:	66 83 ec 04          	sub    $0x4,%sp
	char result = _readinput();
    8c4a:	66 e8 d8 f2          	callw  7f26 <_printchar+0x22>
    8c4e:	ff                   	(bad)  
    8c4f:	ff 67 88             	jmp    *-0x78(%edi)
    8c52:	45                   	inc    %ebp
    8c53:	ff 67 8a             	jmp    *-0x76(%edi)
	return result;
    8c56:	45                   	inc    %ebp
    8c57:	ff 66 c9             	jmp    *-0x37(%esi)
}
    8c5a:	66 c3                	retw   

00008c5c <getline>:
void  getline(char str[],int length){
    8c5c:	66 55                	push   %bp
    8c5e:	66 89 e5             	mov    %sp,%bp
    8c61:	66 83 ec 08          	sub    $0x8,%sp
	char save = getch();
    8c65:	66 e8 d6 ff          	callw  8c3f <read_and_print_input+0x3a>
    8c69:	ff                   	(bad)  
    8c6a:	ff 67 88             	jmp    *-0x78(%edi)
    8c6d:	45                   	inc    %ebp
    8c6e:	ff 67 66             	jmp    *0x66(%edi)
	int index = 0;
    8c71:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while(save != 13 && index < length){
    8c78:	eb 46                	jmp    8cc0 <getline+0x64>
		printc(save);
    8c7a:	67 66 0f be 45 ff    	movsbw -0x1(%di),%ax
    8c80:	66 50                	push   %ax
    8c82:	66 e8 ef fd          	callw  8a75 <prints+0x50>
    8c86:	ff                   	(bad)  
    8c87:	ff 66 83             	jmp    *-0x7d(%esi)
    8c8a:	c4 04 67             	les    (%edi,%eiz,2),%eax
		str[index] = save;
    8c8d:	66 8b 55 f8          	mov    -0x8(%ebp),%dx
    8c91:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8c96:	66 01 c2             	add    %ax,%dx
    8c99:	67 8a 45 ff          	mov    -0x1(%di),%al
    8c9d:	67 88 02             	mov    %al,(%bp,%si)
		index ++;
    8ca0:	67 66 ff 45 f8       	incw   -0x8(%di)
		str[index] = 0;
    8ca5:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8caa:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8caf:	66 01 d0             	add    %dx,%ax
    8cb2:	67 c6 00 00          	movb   $0x0,(%bx,%si)
		save = getch();
    8cb6:	66 e8 85 ff          	callw  8c3f <read_and_print_input+0x3a>
    8cba:	ff                   	(bad)  
    8cbb:	ff 67 88             	jmp    *-0x78(%edi)
    8cbe:	45                   	inc    %ebp
    8cbf:	ff 67 80             	jmp    *-0x80(%edi)
	return result;
}
void  getline(char str[],int length){
	char save = getch();
	int index = 0;
	while(save != 13 && index < length){
    8cc2:	7d ff                	jge    8cc3 <getline+0x67>
    8cc4:	0d 74 0c 67 66       	or     $0x66670c74,%eax
    8cc9:	8b 45 f8             	mov    -0x8(%ebp),%eax
    8ccc:	67 66 3b 45 0c       	cmp    0xc(%di),%ax
    8cd1:	7c a7                	jl     8c7a <getline+0x1e>
		str[index] = save;
		index ++;
		str[index] = 0;
		save = getch();
	}
	return;
    8cd3:	90                   	nop
}
    8cd4:	66 c9                	leavew 
    8cd6:	66 c3                	retw   

00008cd8 <print_different_color>:
void print_different_color(char const* Messeage,int row,int colume,int color){
    8cd8:	66 55                	push   %bp
    8cda:	66 89 e5             	mov    %sp,%bp
    8cdd:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    8ce1:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    8ce6:	66 89 d0             	mov    %dx,%ax
    8ce9:	66 c1 e0 02          	shl    $0x2,%ax
    8ced:	66 01 d0             	add    %dx,%ax
    8cf0:	66 c1 e0 04          	shl    $0x4,%ax
    8cf4:	66 89 c2             	mov    %ax,%dx
    8cf7:	67 66 8b 45 10       	mov    0x10(%di),%ax
    8cfc:	66 01 d0             	add    %dx,%ax
    8cff:	66 01 c0             	add    %ax,%ax
    8d02:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    8d07:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8d0e:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    8d10:	eb 35                	jmp    8d47 <print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    8d12:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8d17:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8d1c:	66 01 d0             	add    %dx,%ax
    8d1f:	67 8a 00             	mov    (%bx,%si),%al
    8d22:	66 0f be c0          	movsbw %al,%ax
    8d26:	67 66 ff 75 14       	pushw  0x14(%di)
    8d2b:	67 66 ff 75 fc       	pushw  -0x4(%di)
    8d30:	66 50                	push   %ax
    8d32:	66 e8 cc f1          	callw  7f02 <_clearscreen+0x7>
    8d36:	ff                   	(bad)  
    8d37:	ff 66 83             	jmp    *-0x7d(%esi)
    8d3a:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    8d3d:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    8d41:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    8d47:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8d4c:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8d51:	66 01 d0             	add    %dx,%ax
    8d54:	67 8a 00             	mov    (%bx,%si),%al
    8d57:	84 c0                	test   %al,%al
    8d59:	75 b7                	jne    8d12 <print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    8d5b:	90                   	nop
}
    8d5c:	66 c9                	leavew 
    8d5e:	66 c3                	retw   

00008d60 <strcmp>:
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
    8d60:	66 55                	push   %bp
    8d62:	66 89 e5             	mov    %sp,%bp
    8d65:	66 83 ec 04          	sub    $0x4,%sp
	int i = 0;
    8d69:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8d70:	00 00                	add    %al,(%eax)
	while(m1[i] != 0 && m2[i]!= 0){
    8d72:	eb 31                	jmp    8da5 <strcmp+0x45>
		if(m1[i] != m2[i]){
    8d74:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8d79:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8d7e:	66 01 d0             	add    %dx,%ax
    8d81:	67 8a 10             	mov    (%bx,%si),%dl
    8d84:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    8d89:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8d8e:	66 01 c8             	add    %cx,%ax
    8d91:	67 8a 00             	mov    (%bx,%si),%al
    8d94:	38 c2                	cmp    %al,%dl
    8d96:	74 08                	je     8da0 <strcmp+0x40>
			return 0;
    8d98:	66 b8 00 00          	mov    $0x0,%ax
    8d9c:	00 00                	add    %al,(%eax)
    8d9e:	eb 63                	jmp    8e03 <strcmp+0xa3>
		}
		i++;
    8da0:	67 66 ff 45 fc       	incw   -0x4(%di)
//====================================================
//                字符串匹配函数
//====================================================
int strcmp(char *m1,char const* m2){
	int i = 0;
	while(m1[i] != 0 && m2[i]!= 0){
    8da5:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8daa:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8daf:	66 01 d0             	add    %dx,%ax
    8db2:	67 8a 00             	mov    (%bx,%si),%al
    8db5:	84 c0                	test   %al,%al
    8db7:	74 14                	je     8dcd <strcmp+0x6d>
    8db9:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8dbe:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8dc3:	66 01 d0             	add    %dx,%ax
    8dc6:	67 8a 00             	mov    (%bx,%si),%al
    8dc9:	84 c0                	test   %al,%al
    8dcb:	75 a7                	jne    8d74 <strcmp+0x14>
		if(m1[i] != m2[i]){
			return 0;
		}
		i++;
	}
	if(m1[i] != 0 || m2[i] != 0){
    8dcd:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8dd2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8dd7:	66 01 d0             	add    %dx,%ax
    8dda:	67 8a 00             	mov    (%bx,%si),%al
    8ddd:	84 c0                	test   %al,%al
    8ddf:	75 14                	jne    8df5 <strcmp+0x95>
    8de1:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8de6:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8deb:	66 01 d0             	add    %dx,%ax
    8dee:	67 8a 00             	mov    (%bx,%si),%al
    8df1:	84 c0                	test   %al,%al
    8df3:	74 08                	je     8dfd <strcmp+0x9d>
		return 0;
    8df5:	66 b8 00 00          	mov    $0x0,%ax
    8df9:	00 00                	add    %al,(%eax)
    8dfb:	eb 06                	jmp    8e03 <strcmp+0xa3>
	}
	return 1;
    8dfd:	66 b8 01 00          	mov    $0x1,%ax
    8e01:	00 00                	add    %al,(%eax)
}
    8e03:	66 c9                	leavew 
    8e05:	66 c3                	retw   

00008e07 <strcpy>:
//====================================================
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
    8e07:	66 55                	push   %bp
    8e09:	66 89 e5             	mov    %sp,%bp
    8e0c:	66 83 ec 08          	sub    $0x8,%sp
	int len = strlen(src);
    8e10:	67 66 ff 75 08       	pushw  0x8(%di)
    8e15:	66 e8 a6 fd          	callw  8bbf <print_next_line+0x27>
    8e19:	ff                   	(bad)  
    8e1a:	ff 66 83             	jmp    *-0x7d(%esi)
    8e1d:	c4 04 67             	les    (%edi,%eiz,2),%eax
    8e20:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	int i = 0;
    8e24:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8e2b:	00 00                	add    %al,(%eax)
	for(i = 0;i < len;i ++){
    8e2d:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8e34:	00 00                	add    %al,(%eax)
    8e36:	eb 3b                	jmp    8e73 <strcpy+0x6c>
    	des[i] =  src[i];
    8e38:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8e3d:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8e42:	66 01 c2             	add    %ax,%dx
    8e45:	67 66 8b 4d fc       	mov    -0x4(%di),%cx
    8e4a:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8e4f:	66 01 c8             	add    %cx,%ax
    8e52:	67 8a 00             	mov    (%bx,%si),%al
    8e55:	67 88 02             	mov    %al,(%bp,%si)
        des[i+1] = 0;
    8e58:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8e5d:	67 66 8d 50 01       	lea    0x1(%bx,%si),%dx
    8e62:	67 66 8b 45 0c       	mov    0xc(%di),%ax
    8e67:	66 01 d0             	add    %dx,%ax
    8e6a:	67 c6 00 00          	movb   $0x0,(%bx,%si)
//                字符串复制函数
//====================================================
void strcpy(char const *src,char *des){
	int len = strlen(src);
	int i = 0;
	for(i = 0;i < len;i ++){
    8e6e:	67 66 ff 45 fc       	incw   -0x4(%di)
    8e73:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    8e78:	67 66 3b 45 f8       	cmp    -0x8(%di),%ax
    8e7d:	7c b9                	jl     8e38 <strcpy+0x31>
    	des[i] =  src[i];
        des[i+1] = 0;
	}
    8e7f:	66 c9                	leavew 
    8e81:	66 c3                	retw   

00008e83 <sys_print_for_heart>:
#include "use.h"
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
    8e83:	66 55                	push   %bp
    8e85:	66 89 e5             	mov    %sp,%bp
    8e88:	66 83 ec 0c          	sub    $0xc,%sp
	int pos = (80 * row + colume)*2;
    8e8c:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    8e91:	66 89 d0             	mov    %dx,%ax
    8e94:	66 c1 e0 02          	shl    $0x2,%ax
    8e98:	66 01 d0             	add    %dx,%ax
    8e9b:	66 c1 e0 04          	shl    $0x4,%ax
    8e9f:	66 89 c2             	mov    %ax,%dx
    8ea2:	67 66 8b 45 10       	mov    0x10(%di),%ax
    8ea7:	66 01 d0             	add    %dx,%ax
    8eaa:	66 01 c0             	add    %ax,%ax
    8ead:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int color = 3;
    8eb2:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    8eb9:	00 00                	add    %al,(%eax)
	int index = 0;
    8ebb:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8ec2:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    8ec4:	eb 35                	jmp    8efb <sys_print_for_heart+0x78>
		_printchar(Messeage[index],pos,color);
    8ec6:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8ecb:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8ed0:	66 01 d0             	add    %dx,%ax
    8ed3:	67 8a 00             	mov    (%bx,%si),%al
    8ed6:	66 0f be c0          	movsbw %al,%ax
    8eda:	67 66 ff 75 f4       	pushw  -0xc(%di)
    8edf:	67 66 ff 75 fc       	pushw  -0x4(%di)
    8ee4:	66 50                	push   %ax
    8ee6:	66 e8 18 f0          	callw  7f02 <_clearscreen+0x7>
    8eea:	ff                   	(bad)  
    8eeb:	ff 66 83             	jmp    *-0x7d(%esi)
    8eee:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    8ef1:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    8ef5:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
#include "use.h"
void sys_print_for_heart(char const* Messeage,int row,int colume){//need the pos
	int pos = (80 * row + colume)*2;
	int color = 3;
	int index = 0;
	while(Messeage[index] != '\0'){
    8efb:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8f00:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8f05:	66 01 d0             	add    %dx,%ax
    8f08:	67 8a 00             	mov    (%bx,%si),%al
    8f0b:	84 c0                	test   %al,%al
    8f0d:	75 b7                	jne    8ec6 <sys_print_for_heart+0x43>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    8f0f:	90                   	nop
}
    8f10:	66 c9                	leavew 
    8f12:	66 c3                	retw   

00008f14 <sys_print_different_color>:
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    8f14:	66 55                	push   %bp
    8f16:	66 89 e5             	mov    %sp,%bp
    8f19:	66 83 ec 08          	sub    $0x8,%sp
    int pos = (80 * row + colume)*2;
    8f1d:	67 66 8b 55 0c       	mov    0xc(%di),%dx
    8f22:	66 89 d0             	mov    %dx,%ax
    8f25:	66 c1 e0 02          	shl    $0x2,%ax
    8f29:	66 01 d0             	add    %dx,%ax
    8f2c:	66 c1 e0 04          	shl    $0x4,%ax
    8f30:	66 89 c2             	mov    %ax,%dx
    8f33:	67 66 8b 45 10       	mov    0x10(%di),%ax
    8f38:	66 01 d0             	add    %dx,%ax
    8f3b:	66 01 c0             	add    %ax,%ax
    8f3e:	67 66 89 45 fc       	mov    %ax,-0x4(%di)
	int index = 0;
    8f43:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    8f4a:	00 00                	add    %al,(%eax)
	while(Messeage[index] != '\0'){
    8f4c:	eb 35                	jmp    8f83 <sys_print_different_color+0x6f>
		_printchar(Messeage[index],pos,color);
    8f4e:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8f53:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8f58:	66 01 d0             	add    %dx,%ax
    8f5b:	67 8a 00             	mov    (%bx,%si),%al
    8f5e:	66 0f be c0          	movsbw %al,%ax
    8f62:	67 66 ff 75 14       	pushw  0x14(%di)
    8f67:	67 66 ff 75 fc       	pushw  -0x4(%di)
    8f6c:	66 50                	push   %ax
    8f6e:	66 e8 90 ef          	callw  7f02 <_clearscreen+0x7>
    8f72:	ff                   	(bad)  
    8f73:	ff 66 83             	jmp    *-0x7d(%esi)
    8f76:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
		index++;
    8f79:	66 ff 45 f8          	incw   -0x8(%ebp)
		pos = pos + 2;
    8f7d:	67 66 83 45 fc 02    	addw   $0x2,-0x4(%di)
	return;
}
void sys_print_different_color(char const* Messeage,int row,int colume,int color){
    int pos = (80 * row + colume)*2;
	int index = 0;
	while(Messeage[index] != '\0'){
    8f83:	67 66 8b 55 f8       	mov    -0x8(%di),%dx
    8f88:	67 66 8b 45 08       	mov    0x8(%di),%ax
    8f8d:	66 01 d0             	add    %dx,%ax
    8f90:	67 8a 00             	mov    (%bx,%si),%al
    8f93:	84 c0                	test   %al,%al
    8f95:	75 b7                	jne    8f4e <sys_print_different_color+0x3a>
		_printchar(Messeage[index],pos,color);
		index++;
		pos = pos + 2;
	}
	return;
    8f97:	90                   	nop
}
    8f98:	66 c9                	leavew 
    8f9a:	66 c3                	retw   

00008f9c <sys_showline>:
void sys_showline(){
    8f9c:	66 55                	push   %bp
    8f9e:	66 89 e5             	mov    %sp,%bp
    8fa1:	66 83 ec 18          	sub    $0x18,%sp
    char alpha = 'a';
    8fa5:	67 c6 45 fb 61       	movb   $0x61,-0x5(%di)
    char name[6];
    name[0] = 'c';
    8faa:	67 c6 45 ea 63       	movb   $0x63,-0x16(%di)
    name[1] = 'h';
    8faf:	67 c6 45 eb 68       	movb   $0x68,-0x15(%di)
    name[2] = 'e';
    8fb4:	67 c6 45 ec 65       	movb   $0x65,-0x14(%di)
    name[3] = 'n';
    8fb9:	67 c6 45 ed 6e       	movb   $0x6e,-0x13(%di)
    name[4] = 'h';
    8fbe:	67 c6 45 ee 68       	movb   $0x68,-0x12(%di)
    name[5] = 'y';
    8fc3:	67 c6 45 ef 79       	movb   $0x79,-0x11(%di)
    int color = 3;
    8fc8:	67 66 c7 45 f4 03 00 	movw   $0x3,-0xc(%di)
    8fcf:	00 00                	add    %al,(%eax)
    int i = 0;
    8fd1:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8fd8:	00 00                	add    %al,(%eax)
    int pos = (80 * 0 + 0)*2;
    8fda:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    8fe1:	00 00                	add    %al,(%eax)
    for(i = 0;i < 6;i ++){
    8fe3:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    8fea:	00 00                	add    %al,(%eax)
    8fec:	eb 52                	jmp    9040 <sys_showline+0xa4>
        pos = (80 * i + i) * 2;
    8fee:	67 66 8b 55 fc       	mov    -0x4(%di),%dx
    8ff3:	66 89 d0             	mov    %dx,%ax
    8ff6:	66 c1 e0 03          	shl    $0x3,%ax
    8ffa:	66 01 d0             	add    %dx,%ax
    8ffd:	67 66 8d 14          	lea    (%si),%dx
    9001:	c5 00                	lds    (%eax),%eax
    9003:	00 00                	add    %al,(%eax)
    9005:	00 66 01             	add    %ah,0x1(%esi)
    9008:	d0 66 01             	shlb   0x1(%esi)
    900b:	c0 67 66 89          	shlb   $0x89,0x66(%edi)
    900f:	45                   	inc    %ebp
    9010:	f0 67 66 8d 55 ea    	lock lea -0x16(%di),%dx
        _printchar(name[i],pos,color);
    9016:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    901b:	66 01 d0             	add    %dx,%ax
    901e:	67 8a 00             	mov    (%bx,%si),%al
    9021:	66 0f be c0          	movsbw %al,%ax
    9025:	67 66 ff 75 f4       	pushw  -0xc(%di)
    902a:	67 66 ff 75 f0       	pushw  -0x10(%di)
    902f:	66 50                	push   %ax
    9031:	66 e8 cd ee          	callw  7f02 <_clearscreen+0x7>
    9035:	ff                   	(bad)  
    9036:	ff 66 83             	jmp    *-0x7d(%esi)
    9039:	c4 0c 67             	les    (%edi,%eiz,2),%ecx
    name[4] = 'h';
    name[5] = 'y';
    int color = 3;
    int i = 0;
    int pos = (80 * 0 + 0)*2;
    for(i = 0;i < 6;i ++){
    903c:	66 ff 45 fc          	incw   -0x4(%ebp)
    9040:	67 66 83 7d fc 05    	cmpw   $0x5,-0x4(%di)
    9046:	7e a6                	jle    8fee <sys_showline+0x52>
        pos = (80 * i + i) * 2;
        _printchar(name[i],pos,color);
    }
}
    9048:	66 c9                	leavew 
    904a:	66 c3                	retw   

0000904c <sys_printname>:

void sys_printname(){
    904c:	66 55                	push   %bp
    904e:	66 89 e5             	mov    %sp,%bp
    9051:	66 83 ec 1c          	sub    $0x1c,%sp
    char const* Messeage1 = "***      ***  *****     *****         ******                ****  ";
    9055:	67 66 c7 45 fc 84 95 	movw   $0x9584,-0x4(%di)
    905c:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "***      ***   ****     ****       ***      ***          **     ** ";
    905e:	67 66 c7 45 f8 c8 95 	movw   $0x95c8,-0x8(%di)
    9065:	00 00                	add    %al,(%eax)
    char const* Messeage3 = "***      ***    ***     ***      ***          ***       **         "; 
    9067:	67 66 c7 45 f4 0c 96 	movw   $0x960c,-0xc(%di)
    906e:	00 00                	add    %al,(%eax)
    char const* Messeage4 = "************       *****         ***          ***         ***      ";
    9070:	67 66 c7 45 f0 50 96 	movw   $0x9650,-0x10(%di)
    9077:	00 00                	add    %al,(%eax)
    char const* Messeage5 = "***      ***       *****         ***          ***            **    ";
    9079:	67 66 c7 45 ec 94 96 	movw   $0x9694,-0x14(%di)
    9080:	00 00                	add    %al,(%eax)
    char const* Messeage6 = "***      ***       *****           ***      ***          **   ***  ";
    9082:	67 66 c7 45 e8 d8 96 	movw   $0x96d8,-0x18(%di)
    9089:	00 00                	add    %al,(%eax)
    char const* Messeage7 = "***      ***       *****              ******               ****    ";
    908b:	67 66 c7 45 e4 1c 97 	movw   $0x971c,-0x1c(%di)
    9092:	00 00                	add    %al,(%eax)

    sys_print_for_heart(Messeage1,16,11);
    9094:	66 6a 0b             	pushw  $0xb
    9097:	66 6a 10             	pushw  $0x10
    909a:	67 66 ff 75 fc       	pushw  -0x4(%di)
    909f:	66 e8 de fd          	callw  8e81 <strcpy+0x7a>
    90a3:	ff                   	(bad)  
    90a4:	ff 66 83             	jmp    *-0x7d(%esi)
    90a7:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage2,17,11);
    90aa:	6a 0b                	push   $0xb
    90ac:	66 6a 11             	pushw  $0x11
    90af:	67 66 ff 75 f8       	pushw  -0x8(%di)
    90b4:	66 e8 c9 fd          	callw  8e81 <strcpy+0x7a>
    90b8:	ff                   	(bad)  
    90b9:	ff 66 83             	jmp    *-0x7d(%esi)
    90bc:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage3,18,11);
    90bf:	6a 0b                	push   $0xb
    90c1:	66 6a 12             	pushw  $0x12
    90c4:	67 66 ff 75 f4       	pushw  -0xc(%di)
    90c9:	66 e8 b4 fd          	callw  8e81 <strcpy+0x7a>
    90cd:	ff                   	(bad)  
    90ce:	ff 66 83             	jmp    *-0x7d(%esi)
    90d1:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage4,19,11);
    90d4:	6a 0b                	push   $0xb
    90d6:	66 6a 13             	pushw  $0x13
    90d9:	67 66 ff 75 f0       	pushw  -0x10(%di)
    90de:	66 e8 9f fd          	callw  8e81 <strcpy+0x7a>
    90e2:	ff                   	(bad)  
    90e3:	ff 66 83             	jmp    *-0x7d(%esi)
    90e6:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage5,20,11);
    90e9:	6a 0b                	push   $0xb
    90eb:	66 6a 14             	pushw  $0x14
    90ee:	67 66 ff 75 ec       	pushw  -0x14(%di)
    90f3:	66 e8 8a fd          	callw  8e81 <strcpy+0x7a>
    90f7:	ff                   	(bad)  
    90f8:	ff 66 83             	jmp    *-0x7d(%esi)
    90fb:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage6,21,11);
    90fe:	6a 0b                	push   $0xb
    9100:	66 6a 15             	pushw  $0x15
    9103:	67 66 ff 75 e8       	pushw  -0x18(%di)
    9108:	66 e8 75 fd          	callw  8e81 <strcpy+0x7a>
    910c:	ff                   	(bad)  
    910d:	ff 66 83             	jmp    *-0x7d(%esi)
    9110:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(Messeage7,22,11);
    9113:	6a 0b                	push   $0xb
    9115:	66 6a 16             	pushw  $0x16
    9118:	67 66 ff 75 e4       	pushw  -0x1c(%di)
    911d:	66 e8 60 fd          	callw  8e81 <strcpy+0x7a>
    9121:	ff                   	(bad)  
    9122:	ff 66 83             	jmp    *-0x7d(%esi)
    9125:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
}
    9128:	c9                   	leave  
    9129:	66 c3                	retw   

0000912b <sys_printpoem>:
void sys_printpoem(){
    912b:	66 55                	push   %bp
    912d:	66 89 e5             	mov    %sp,%bp
    9130:	66 83 ec 14          	sub    $0x14,%sp
    char const* Messeage = "Comuputer Sciense";
    9134:	67 66 c7 45 f8 60 97 	movw   $0x9760,-0x8(%di)
    913b:	00 00                	add    %al,(%eax)
    char const* Messeage2 = "chenhyOS";
    913d:	67 66 c7 45 f4 72 97 	movw   $0x9772,-0xc(%di)
    9144:	00 00                	add    %al,(%eax)
    int i = 1;
    9146:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    914d:	00 00                	add    %al,(%eax)
    for(i = 1;i < 7;i ++){
    914f:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    9156:	00 00                	add    %al,(%eax)
    9158:	eb 4b                	jmp    91a5 <sys_printpoem+0x7a>
        sys_print_different_color(Messeage,15,10,i);
    915a:	67 66 ff 75 fc       	pushw  -0x4(%di)
    915f:	66 6a 0a             	pushw  $0xa
    9162:	66 6a 0f             	pushw  $0xf
    9165:	67 66 ff 75 f8       	pushw  -0x8(%di)
    916a:	66 e8 a4 fd          	callw  8f12 <sys_print_for_heart+0x8f>
    916e:	ff                   	(bad)  
    916f:	ff 66 83             	jmp    *-0x7d(%esi)
    9172:	c4 10                	les    (%eax),%edx
        sys_print_different_color(Messeage2,16,10,i);
    9174:	67 66 ff 75 fc       	pushw  -0x4(%di)
    9179:	66 6a 0a             	pushw  $0xa
    917c:	66 6a 10             	pushw  $0x10
    917f:	67 66 ff 75 f4       	pushw  -0xc(%di)
    9184:	66 e8 8a fd          	callw  8f12 <sys_print_for_heart+0x8f>
    9188:	ff                   	(bad)  
    9189:	ff 66 83             	jmp    *-0x7d(%esi)
    918c:	c4 10                	les    (%eax),%edx
        int j = 0;
    918e:	67 66 c7 45 f0 00 00 	movw   $0x0,-0x10(%di)
    9195:	00 00                	add    %al,(%eax)
        int k = 0;
    9197:	67 66 c7 45 ec 00 00 	movw   $0x0,-0x14(%di)
    919e:	00 00                	add    %al,(%eax)
}
void sys_printpoem(){
    char const* Messeage = "Comuputer Sciense";
    char const* Messeage2 = "chenhyOS";
    int i = 1;
    for(i = 1;i < 7;i ++){
    91a0:	67 66 ff 45 fc       	incw   -0x4(%di)
    91a5:	67 66 83 7d fc 06    	cmpw   $0x6,-0x4(%di)
    91ab:	7e ad                	jle    915a <sys_printpoem+0x2f>
        sys_print_different_color(Messeage,15,10,i);
        sys_print_different_color(Messeage2,16,10,i);
        int j = 0;
        int k = 0;
    }
}
    91ad:	66 c9                	leavew 
    91af:	66 c3                	retw   

000091b1 <sys_printheart>:
void sys_printheart(){
    91b1:	66 55                	push   %bp
    91b3:	66 89 e5             	mov    %sp,%bp
    sys_print_for_heart("     * *       * *     ",00,40);
    91b6:	66 6a 28             	pushw  $0x28
    91b9:	66 6a 00             	pushw  $0x0
    91bc:	66 68 7b 97          	pushw  $0x977b
    91c0:	00 00                	add    %al,(%eax)
    91c2:	66 e8 bb fc          	callw  8e81 <strcpy+0x7a>
    91c6:	ff                   	(bad)  
    91c7:	ff 66 83             	jmp    *-0x7d(%esi)
    91ca:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("   * * * *   * * * *    ",1,40);
    91cd:	6a 28                	push   $0x28
    91cf:	66 6a 01             	pushw  $0x1
    91d2:	66 68 93 97          	pushw  $0x9793
    91d6:	00 00                	add    %al,(%eax)
    91d8:	66 e8 a5 fc          	callw  8e81 <strcpy+0x7a>
    91dc:	ff                   	(bad)  
    91dd:	ff 66 83             	jmp    *-0x7d(%esi)
    91e0:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart(" * * * * * * * * * * *    ",2,40);
    91e3:	6a 28                	push   $0x28
    91e5:	66 6a 02             	pushw  $0x2
    91e8:	66 68 ac 97          	pushw  $0x97ac
    91ec:	00 00                	add    %al,(%eax)
    91ee:	66 e8 8f fc          	callw  8e81 <strcpy+0x7a>
    91f2:	ff                   	(bad)  
    91f3:	ff 66 83             	jmp    *-0x7d(%esi)
    91f6:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("  * * * * * * * * * *   ",3,40);
    91f9:	6a 28                	push   $0x28
    91fb:	66 6a 03             	pushw  $0x3
    91fe:	66 68 c7 97          	pushw  $0x97c7
    9202:	00 00                	add    %al,(%eax)
    9204:	66 e8 79 fc          	callw  8e81 <strcpy+0x7a>
    9208:	ff                   	(bad)  
    9209:	ff 66 83             	jmp    *-0x7d(%esi)
    920c:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("    * * * * * * * *    ",4,40);
    920f:	6a 28                	push   $0x28
    9211:	66 6a 04             	pushw  $0x4
    9214:	66 68 e0 97          	pushw  $0x97e0
    9218:	00 00                	add    %al,(%eax)
    921a:	66 e8 63 fc          	callw  8e81 <strcpy+0x7a>
    921e:	ff                   	(bad)  
    921f:	ff 66 83             	jmp    *-0x7d(%esi)
    9222:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("      * * * * * *     ",5,40);
    9225:	6a 28                	push   $0x28
    9227:	66 6a 05             	pushw  $0x5
    922a:	66 68 f8 97          	pushw  $0x97f8
    922e:	00 00                	add    %al,(%eax)
    9230:	66 e8 4d fc          	callw  8e81 <strcpy+0x7a>
    9234:	ff                   	(bad)  
    9235:	ff 66 83             	jmp    *-0x7d(%esi)
    9238:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("        * * * *      ",6,40);
    923b:	6a 28                	push   $0x28
    923d:	66 6a 06             	pushw  $0x6
    9240:	66 68 0f 98          	pushw  $0x980f
    9244:	00 00                	add    %al,(%eax)
    9246:	66 e8 37 fc          	callw  8e81 <strcpy+0x7a>
    924a:	ff                   	(bad)  
    924b:	ff 66 83             	jmp    *-0x7d(%esi)
    924e:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    sys_print_for_heart("          * *       ",7,40);
    9251:	6a 28                	push   $0x28
    9253:	66 6a 07             	pushw  $0x7
    9256:	66 68 25 98          	pushw  $0x9825
    925a:	00 00                	add    %al,(%eax)
    925c:	66 e8 21 fc          	callw  8e81 <strcpy+0x7a>
    9260:	ff                   	(bad)  
    9261:	ff 66 83             	jmp    *-0x7d(%esi)
    9264:	c4 0c 66             	les    (%esi,%eiz,2),%ecx
    9267:	c9                   	leave  
    9268:	66 c3                	retw   

0000926a <initial_PCB>:
#include "schedule.h"
struct PCB PCB_list[5];
void initial_PCB(int index){
    926a:	66 55                	push   %bp
    926c:	66 89 e5             	mov    %sp,%bp
    PCB_list[index].cs = 0x1000+0x1000*(index + 1);//5代表内核，0代表用户程序
    926f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9274:	66 83 c0 02          	add    $0x2,%ax
    9278:	66 c1 e0 0c          	shl    $0xc,%ax
    927c:	66 89 c2             	mov    %ax,%dx
    927f:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9284:	66 c1 e0 06          	shl    $0x6,%ax
    9288:	66 05 50 ac          	add    $0xac50,%ax
    928c:	00 00                	add    %al,(%eax)
    928e:	67 66 89 10          	mov    %dx,(%bx,%si)
    PCB_list[index].eip = 0x100;
    9292:	67 66 8b 45 08       	mov    0x8(%di),%ax
    9297:	66 c1 e0 06          	shl    $0x6,%ax
    929b:	66 05 40 ac          	add    $0xac40,%ax
    929f:	00 00                	add    %al,(%eax)
    92a1:	67 66 c7 40 0c 00 01 	movw   $0x100,0xc(%bx,%si)
    92a8:	00 00                	add    %al,(%eax)
    PCB_list[index].prg_status = 1;
    92aa:	67 66 8b 45 08       	mov    0x8(%di),%ax
    92af:	66 c1 e0 06          	shl    $0x6,%ax
    92b3:	66 05 50 ac          	add    $0xac50,%ax
    92b7:	00 00                	add    %al,(%eax)
    92b9:	67 66 c7 40 08 01 00 	movw   $0x1,0x8(%bx,%si)
    92c0:	00 00                	add    %al,(%eax)
    PCB_list[index].eflags = 512;
    92c2:	67 66 8b 45 08       	mov    0x8(%di),%ax
    92c7:	66 c1 e0 06          	shl    $0x6,%ax
    92cb:	66 05 50 ac          	add    $0xac50,%ax
    92cf:	00 00                	add    %al,(%eax)
    92d1:	67 66 c7 40 04 00 02 	movw   $0x200,0x4(%bx,%si)
    92d8:	00 00                	add    %al,(%eax)
    PCB_list[index].prg_name = '1'+index - 1;
    92da:	67 66 8b 45 08       	mov    0x8(%di),%ax
    92df:	66 83 c0 30          	add    $0x30,%ax
    92e3:	67 66 8b 55 08       	mov    0x8(%di),%dx
    92e8:	66 c1 e2 06          	shl    $0x6,%dx
    92ec:	66 81 c2 50 ac       	add    $0xac50,%dx
    92f1:	00 00                	add    %al,(%eax)
    92f3:	67 88 42 0c          	mov    %al,0xc(%bp,%si)
}
    92f7:	66 5d                	pop    %bp
    92f9:	66 c3                	retw   

000092fb <sys_schedule>:
void sys_schedule(){
    92fb:	66 55                	push   %bp
    92fd:	66 89 e5             	mov    %sp,%bp
    9300:	66 83 ec 08          	sub    $0x8,%sp
    int i,j;
    if(PCB_list == _CurrentProg){
    9304:	66 a1 00 ac 66 3d    	mov    0x3d66ac00,%ax
    930a:	20 ac 00 00 75 09 67 	and    %ch,0x67097500(%eax,%eax,1)
        i = 0;
    9311:	66 c7 45 fc 00 00    	movw   $0x0,-0x4(%ebp)
    9317:	00 00                	add    %al,(%eax)
    }
    if(PCB_list + 1 == _CurrentProg ){
    9319:	66 a1 00 ac 66 3d    	mov    0x3d66ac00,%ax
    931f:	60                   	pusha  
    9320:	ac                   	lods   %ds:(%esi),%al
    9321:	00 00                	add    %al,(%eax)
    9323:	75 09                	jne    932e <sys_schedule+0x33>
        i = 1;
    9325:	67 66 c7 45 fc 01 00 	movw   $0x1,-0x4(%di)
    932c:	00 00                	add    %al,(%eax)
    }
    if(PCB_list + 2 == _CurrentProg){
    932e:	66 a1 00 ac 66 3d    	mov    0x3d66ac00,%ax
    9334:	a0 ac 00 00 75       	mov    0x750000ac,%al
    9339:	09 67 66             	or     %esp,0x66(%edi)
        i = 2;
    933c:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    }
    if(PCB_list + 3 == _CurrentProg){
    9343:	66 a1 00 ac 66 3d    	mov    0x3d66ac00,%ax
    9349:	e0 ac                	loopne 92f7 <initial_PCB+0x8d>
    934b:	00 00                	add    %al,(%eax)
    934d:	75 09                	jne    9358 <sys_schedule+0x5d>
        i = 3;
    934f:	67 66 c7 45 fc 03 00 	movw   $0x3,-0x4(%di)
    9356:	00 00                	add    %al,(%eax)
    }
    for(j = 0;j < 4;j ++){
    9358:	67 66 c7 45 f8 00 00 	movw   $0x0,-0x8(%di)
    935f:	00 00                	add    %al,(%eax)
    9361:	eb 42                	jmp    93a5 <sys_schedule+0xaa>
        if(i == 3){
    9363:	67 66 83 7d fc 03    	cmpw   $0x3,-0x4(%di)
    9369:	75 14                	jne    937f <sys_schedule+0x84>
            _CurrentProg = 0;
    936b:	66 c7 06 00 ac       	movw   $0xac00,(%esi)
    9370:	00 00                	add    %al,(%eax)
    9372:	00 00                	add    %al,(%eax)
            i = 0;
    9374:	67 66 c7 45 fc 00 00 	movw   $0x0,-0x4(%di)
    937b:	00 00                	add    %al,(%eax)
    937d:	eb 11                	jmp    9390 <sys_schedule+0x95>
        }
        else{
            _CurrentProg ++;
    937f:	66 a1 00 ac 66 83    	mov    0x8366ac00,%ax
    9385:	c0 40 66 a3          	rolb   $0xa3,0x66(%eax)
    9389:	00 ac 67 66 ff 45 fc 	add    %ch,-0x3ba009a(%edi,%eiz,2)
            i ++;
        }
        if(_CurrentProg -> prg_status != 0){
    9390:	66 a1 00 ac 67 66    	mov    0x6667ac00,%ax
    9396:	8b 40 38             	mov    0x38(%eax),%eax
    9399:	66 85 c0             	test   %ax,%ax
    939c:	74 02                	je     93a0 <sys_schedule+0xa5>
            return;
    939e:	eb 17                	jmp    93b7 <sys_schedule+0xbc>
        i = 2;
    }
    if(PCB_list + 3 == _CurrentProg){
        i = 3;
    }
    for(j = 0;j < 4;j ++){
    93a0:	67 66 ff 45 f8       	incw   -0x8(%di)
    93a5:	67 66 83 7d f8 03    	cmpw   $0x3,-0x8(%di)
    93ab:	7e b6                	jle    9363 <sys_schedule+0x68>
        }
        if(_CurrentProg -> prg_status != 0){
            return;
        }
    }
    _CurrentProg = PCB_list + 4;
    93ad:	66 c7 06 00 ac       	movw   $0xac00,(%esi)
    93b2:	20 ad 00 00 90 66    	and    %ch,0x66900000(%ebp)
    return;
    93b8:	c9                   	leave  
    93b9:	66 c3                	retw   
